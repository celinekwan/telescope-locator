
F411-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c148  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800c2e8  0800c2e8  0001c2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c744  0800c744  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c74c  0800c74c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c74c  0800c74c  0001c74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800c754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  200002cc  0800ca20  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc0  0800ca20  00021fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151f7  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003273  00000000  00000000  000354f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00039858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a5e  00000000  00000000  0003a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164e7  00000000  00000000  00054276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4aa  00000000  00000000  0006a75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005818  00000000  00000000  000f7c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2d0 	.word	0x0800c2d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800c2d0 	.word	0x0800c2d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <adxl_write>:
void display_data (float);

char x_char[4] = {0};

// write function
void adxl_write (uint8_t reg, uint8_t value) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 10);
 8000f74:	f107 020c 	add.w	r2, r7, #12
 8000f78:	230a      	movs	r3, #10
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	21a6      	movs	r1, #166	; 0xa6
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <adxl_write+0x34>)
 8000f82:	f001 f8d5 	bl	8002130 <HAL_I2C_Master_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002e8 	.word	0x200002e8

08000f94 <adxl_read>:

// read function
void adxl_read (uint8_t reg, uint8_t numberofbytes) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, data_rec, numberofbytes, 100);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2164      	movs	r1, #100	; 0x64
 8000fae:	9102      	str	r1, [sp, #8]
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <adxl_read+0x34>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	21a6      	movs	r1, #166	; 0xa6
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <adxl_read+0x38>)
 8000fbc:	f001 f9b6 	bl	800232c <HAL_I2C_Mem_Read>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000380 	.word	0x20000380
 8000fcc:	200002e8 	.word	0x200002e8

08000fd0 <adxl_init>:

// initialization
void adxl_init (void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	adxl_read(0x00,1); // 0xE5
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ffdc 	bl	8000f94 <adxl_read>

	adxl_write (0x2d, 0); // reset all bits
 8000fdc:	2100      	movs	r1, #0
 8000fde:	202d      	movs	r0, #45	; 0x2d
 8000fe0:	f7ff ffbc 	bl	8000f5c <adxl_write>
	adxl_write (0x2d, 0x08); // measure bit-1, wakeup 0, 0 at 8hz
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	202d      	movs	r0, #45	; 0x2d
 8000fe8:	f7ff ffb8 	bl	8000f5c <adxl_write>

	adxl_write (0x31, 0x01); // +- 4g range
 8000fec:	2101      	movs	r1, #1
 8000fee:	2031      	movs	r0, #49	; 0x31
 8000ff0:	f7ff ffb4 	bl	8000f5c <adxl_write>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <display_data>:

void display_data(float data) { // TODO check if UART output formatting is correct
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf (x_char, "% 4f", data); // needed to add -u _printf_float linker flag -- might have to change to %.4f
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff faa8 	bl	8000558 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <display_data+0x30>)
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <display_data+0x34>)
 8001010:	f008 fee6 	bl	8009de0 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)x_char, sizeof(x_char),10);
 8001014:	230a      	movs	r3, #10
 8001016:	2204      	movs	r2, #4
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <display_data+0x34>)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <display_data+0x38>)
 800101c:	f003 fe15 	bl	8004c4a <HAL_UART_Transmit>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	0800c2e8 	.word	0x0800c2e8
 800102c:	20000398 	.word	0x20000398
 8001030:	2000033c 	.word	0x2000033c
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fbed 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f8d7 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 f995 	bl	8001374 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800104a:	f007 fd43 	bl	8008ad4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800104e:	f000 f967 	bl	8001320 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001052:	f000 f937 	bl	80012c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  adxl_init();
 8001056:	f7ff ffbb 	bl	8000fd0 <adxl_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // 4. I2C with ADXL
	  adxl_read (0x32, 6);
 800105a:	2106      	movs	r1, #6
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f7ff ff99 	bl	8000f94 <adxl_read>
	  x = (data_rec[1]<<8) | data_rec[0];
 8001062:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <main+0x190>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <main+0x190>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b55      	ldr	r3, [pc, #340]	; (80011cc <main+0x194>)
 8001076:	801a      	strh	r2, [r3, #0]
	  y = (data_rec[3]<<8) | data_rec[2];
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <main+0x190>)
 800107a:	78db      	ldrb	r3, [r3, #3]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <main+0x190>)
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <main+0x198>)
 800108c:	801a      	strh	r2, [r3, #0]
	  z = (data_rec[5]<<8) | data_rec[4];
 800108e:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <main+0x190>)
 8001090:	795b      	ldrb	r3, [r3, #5]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <main+0x190>)
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <main+0x19c>)
 80010a2:	801a      	strh	r2, [r3, #0]

	  /* convert the x value to the g
	   * under test condition: +-4 g, 10-bit resolution */
	  xg = x * .0078;
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <main+0x194>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa42 	bl	8000534 <__aeabi_i2d>
 80010b0:	a343      	add	r3, pc, #268	; (adr r3, 80011c0 <main+0x188>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff faa7 	bl	8000608 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd79 	bl	8000bb8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <main+0x1a0>)
 80010ca:	6013      	str	r3, [r2, #0]
	  yg = y * .0078;
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <main+0x198>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa2e 	bl	8000534 <__aeabi_i2d>
 80010d8:	a339      	add	r3, pc, #228	; (adr r3, 80011c0 <main+0x188>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa93 	bl	8000608 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd65 	bl	8000bb8 <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <main+0x1a4>)
 80010f2:	6013      	str	r3, [r2, #0]
	  zg = z * .0078;
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <main+0x19c>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa1a 	bl	8000534 <__aeabi_i2d>
 8001100:	a32f      	add	r3, pc, #188	; (adr r3, 80011c0 <main+0x188>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa7f 	bl	8000608 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd51 	bl	8000bb8 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <main+0x1a8>)
 800111a:	6013      	str	r3, [r2, #0]

	  // print data to UART
	  strcpy((char*)buf,"\r\n====\r\nX: ");
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <main+0x1ac>)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	ca07      	ldmia	r2, {r0, r1, r2}
 8001122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f859 	bl	80001e0 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	1d39      	adds	r1, r7, #4
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <main+0x1b0>)
 800113a:	f003 fd86 	bl	8004c4a <HAL_UART_Transmit>
	  display_data(xg);
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <main+0x1a0>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	f7ff ff56 	bl	8000ff8 <display_data>

	  strcpy((char*)buf,"\r\nY: ");
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <main+0x1b4>)
 8001150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001154:	6018      	str	r0, [r3, #0]
 8001156:	3304      	adds	r3, #4
 8001158:	8019      	strh	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f83f 	bl	80001e0 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	1d39      	adds	r1, r7, #4
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <main+0x1b0>)
 800116e:	f003 fd6c 	bl	8004c4a <HAL_UART_Transmit>
	  display_data(yg);
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <main+0x1a4>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	f7ff ff3c 	bl	8000ff8 <display_data>

	  strcpy((char*)buf,"\r\nZ: ");
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <main+0x1b8>)
 8001184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001188:	6018      	str	r0, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	8019      	strh	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f825 	bl	80001e0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	b29a      	uxth	r2, r3
 800119a:	1d39      	adds	r1, r7, #4
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <main+0x1b0>)
 80011a2:	f003 fd52 	bl	8004c4a <HAL_UART_Transmit>
	  display_data(zg);
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <main+0x1a8>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	f7ff ff22 	bl	8000ff8 <display_data>

	  HAL_Delay(500);
 80011b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b8:	f000 fba2 	bl	8001900 <HAL_Delay>
	  adxl_read (0x32, 6);
 80011bc:	e74d      	b.n	800105a <main+0x22>
 80011be:	bf00      	nop
 80011c0:	8e8a71de 	.word	0x8e8a71de
 80011c4:	3f7ff2e4 	.word	0x3f7ff2e4
 80011c8:	20000380 	.word	0x20000380
 80011cc:	20000386 	.word	0x20000386
 80011d0:	20000388 	.word	0x20000388
 80011d4:	2000038a 	.word	0x2000038a
 80011d8:	2000038c 	.word	0x2000038c
 80011dc:	20000390 	.word	0x20000390
 80011e0:	20000394 	.word	0x20000394
 80011e4:	0800c2f0 	.word	0x0800c2f0
 80011e8:	2000033c 	.word	0x2000033c
 80011ec:	0800c2fc 	.word	0x0800c2fc
 80011f0:	0800c304 	.word	0x0800c304

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f008 f97a 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <SystemClock_Config+0xc8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a26      	ldr	r2, [pc, #152]	; (80012bc <SystemClock_Config+0xc8>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SystemClock_Config+0xc8>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <SystemClock_Config+0xcc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <SystemClock_Config+0xcc>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <SystemClock_Config+0xcc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001264:	2319      	movs	r3, #25
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001268:	23c0      	movs	r3, #192	; 0xc0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f841 	bl	8004300 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f8d6 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2103      	movs	r1, #3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 faa3 	bl	80047f0 <HAL_RCC_ClockConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b0:	f000 f8c0 	bl	8001434 <Error_Handler>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3750      	adds	r7, #80	; 0x50
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f000 fdd1 	bl	8001ea8 <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 f892 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200002e8 	.word	0x200002e8
 8001318:	40005400 	.word	0x40005400
 800131c:	000186a0 	.word	0x000186a0

08001320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART1_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001358:	f003 fc2a 	bl	8004bb0 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f867 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000033c 	.word	0x2000033c
 8001370:	40011000 	.word	0x40011000

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_GPIO_Init+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <MX_GPIO_Init+0xb8>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_GPIO_Init+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_GPIO_Init+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a1f      	ldr	r2, [pc, #124]	; (800142c <MX_GPIO_Init+0xb8>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_GPIO_Init+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_GPIO_Init+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <MX_GPIO_Init+0xb8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_GPIO_Init+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_GPIO_Init+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <MX_GPIO_Init+0xb8>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_GPIO_Init+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001400:	480b      	ldr	r0, [pc, #44]	; (8001430 <MX_GPIO_Init+0xbc>)
 8001402:	f000 fd37 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_GPIO_Init+0xbc>)
 8001420:	f000 fba4 	bl	8001b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_I2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0x8c>)
 80014ea:	f000 fb3f 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_I2C_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12c      	bne.n	800159c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_UART_MspInit+0x88>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800157a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_UART_MspInit+0x8c>)
 8001598:	f000 fae8 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40011000 	.word	0x40011000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f960 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <OTG_FS_IRQHandler+0x10>)
 800160a:	f001 fd4c 	bl	80030a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20001884 	.word	0x20001884

08001618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_kill>:

int _kill(int pid, int sig)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001632:	f007 ff39 	bl	80094a8 <__errno>
 8001636:	4603      	mov	r3, r0
 8001638:	2216      	movs	r2, #22
 800163a:	601a      	str	r2, [r3, #0]
  return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_exit>:

void _exit (int status)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffe7 	bl	8001628 <_kill>
  while (1) {}    /* Make sure we hang here */
 800165a:	e7fe      	b.n	800165a <_exit+0x12>

0800165c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e00a      	b.n	8001684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166e:	f3af 8000 	nop.w
 8001672:	4601      	mov	r1, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf0      	blt.n	800166e <_read+0x12>
  }

  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e009      	b.n	80016bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <_write+0x12>
  }
  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f6:	605a      	str	r2, [r3, #4]
  return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_isatty>:

int _isatty(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f007 fe9e 	bl	80094a8 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	2000039c 	.word	0x2000039c
 80017a0:	20001fc0 	.word	0x20001fc0

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f007 fe5d 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fc1d 	bl	8001038 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 800180c:	0800c754 	.word	0x0800c754
  ldr r2, =_sbss
 8001810:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001814:	20001fc0 	.word	0x20001fc0

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f94f 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fdf6 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f967 	bl	8001b52 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f92f 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200003a0 	.word	0x200003a0

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200003a0 	.word	0x200003a0

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e159      	b.n	8001e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8148 	bne.w	8001e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d005      	beq.n	8001bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d130      	bne.n	8001c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 0201 	and.w	r2, r3, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d017      	beq.n	8001c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d123      	bne.n	8001cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a2 	beq.w	8001e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0e:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_GPIO_Init+0x2f0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d019      	beq.n	8001d6e <HAL_GPIO_Init+0x202>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0x1fe>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_GPIO_Init+0x2f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00d      	beq.n	8001d66 <HAL_GPIO_Init+0x1fa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a46      	ldr	r2, [pc, #280]	; (8001e68 <HAL_GPIO_Init+0x2fc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x1f6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a45      	ldr	r2, [pc, #276]	; (8001e6c <HAL_GPIO_Init+0x300>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_Init+0x1f2>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x204>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_GPIO_Init+0x304>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f aea2 	bls.w	8001b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e12b      	b.n	8002112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fade 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f002 fe28 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a81      	ldr	r2, [pc, #516]	; (800211c <HAL_I2C_Init+0x274>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d807      	bhi.n	8001f2c <HAL_I2C_Init+0x84>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_I2C_Init+0x278>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e006      	b.n	8001f3a <HAL_I2C_Init+0x92>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_I2C_Init+0x27c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0e7      	b.n	8002112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a78      	ldr	r2, [pc, #480]	; (8002128 <HAL_I2C_Init+0x280>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_I2C_Init+0x274>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d802      	bhi.n	8001f7c <HAL_I2C_Init+0xd4>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	e009      	b.n	8001f90 <HAL_I2C_Init+0xe8>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	4a69      	ldr	r2, [pc, #420]	; (800212c <HAL_I2C_Init+0x284>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	3301      	adds	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	495c      	ldr	r1, [pc, #368]	; (800211c <HAL_I2C_Init+0x274>)
 8001fac:	428b      	cmp	r3, r1
 8001fae:	d819      	bhi.n	8001fe4 <HAL_I2C_Init+0x13c>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e59      	subs	r1, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_I2C_Init+0x138>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e59      	subs	r1, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fde:	e051      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e04f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_I2C_Init+0x168>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e012      	b.n	8002036 <HAL_I2C_Init+0x18e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x196>
 800203a:	2301      	movs	r3, #1
 800203c:	e022      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <HAL_I2C_Init+0x1bc>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e58      	subs	r0, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	fbb0 f3f3 	udiv	r3, r0, r3
 8002058:	3301      	adds	r3, #1
 800205a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	e00f      	b.n	8002084 <HAL_I2C_Init+0x1dc>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6911      	ldr	r1, [r2, #16]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	000186a0 	.word	0x000186a0
 8002120:	001e847f 	.word	0x001e847f
 8002124:	003d08ff 	.word	0x003d08ff
 8002128:	431bde83 	.word	0x431bde83
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fbd0 	bl	80018e8 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 80e0 	bne.w	8002318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	4970      	ldr	r1, [pc, #448]	; (8002324 <HAL_I2C_Master_Transmit+0x1f4>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fc72 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	e0d3      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x50>
 800217c:	2302      	movs	r3, #2
 800217e:	e0cc      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2210      	movs	r2, #16
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_I2C_Master_Transmit+0x1f8>)
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fac2 	bl	8002778 <I2C_MasterRequestWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08d      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002214:	e066      	b.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fcec 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d11b      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	6a39      	ldr	r1, [r7, #32]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fcdc 	bl	8002c7a <I2C_WaitOnBTFFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d107      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e01a      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d194      	bne.n	8002216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00100002 	.word	0x00100002
 8002328:	ffff0000 	.word	0xffff0000

0800232c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff facf 	bl	80018e8 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 8208 	bne.w	800276a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	497b      	ldr	r1, [pc, #492]	; (8002550 <HAL_I2C_Mem_Read+0x224>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fb71 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e1fb      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Read+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e1f4      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2222      	movs	r2, #34	; 0x22
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a5b      	ldr	r2, [pc, #364]	; (8002554 <HAL_I2C_Mem_Read+0x228>)
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa3e 	bl	800287c <I2C_RequestMemoryRead>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e1b0      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d113      	bne.n	800243a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e184      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	2b01      	cmp	r3, #1
 8002440:	d11b      	bne.n	800247a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e164      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	2b02      	cmp	r3, #2
 8002480:	d11b      	bne.n	80024ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002490:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	e144      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024d0:	e138      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	f200 80f1 	bhi.w	80026be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d123      	bne.n	800252c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fc07 	bl	8002cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e139      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800252a:	e10b      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	2b02      	cmp	r3, #2
 8002532:	d14e      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	2200      	movs	r2, #0
 800253c:	4906      	ldr	r1, [pc, #24]	; (8002558 <HAL_I2C_Mem_Read+0x22c>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa84 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e10e      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
 800254e:	bf00      	nop
 8002550:	00100002 	.word	0x00100002
 8002554:	ffff0000 	.word	0xffff0000
 8002558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d0:	e0b8      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2200      	movs	r2, #0
 80025da:	4966      	ldr	r1, [pc, #408]	; (8002774 <HAL_I2C_Mem_Read+0x448>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fa35 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0bf      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	494f      	ldr	r1, [pc, #316]	; (8002774 <HAL_I2C_Mem_Read+0x448>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fa07 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e091      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026bc:	e042      	b.n	8002744 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fb1a 	bl	8002cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e04c      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d118      	bne.n	8002744 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f aec2 	bne.w	80024d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	3728      	adds	r7, #40	; 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	00010004 	.word	0x00010004

08002778 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d006      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d003      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a0:	d108      	bne.n	80027b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00b      	b.n	80027cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d107      	bne.n	80027cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f937 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d103      	bne.n	80027fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e035      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002808:	d108      	bne.n	800281c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e01b      	b.n	8002854 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	11db      	asrs	r3, r3, #7
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0306 	and.w	r3, r3, #6
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f063 030f 	orn	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <I2C_MasterRequestWrite+0xfc>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f95d 	bl	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e010      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <I2C_MasterRequestWrite+0x100>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f94d 	bl	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	00010008 	.word	0x00010008
 8002878:	00010002 	.word	0x00010002

0800287c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	460b      	mov	r3, r1
 8002890:	813b      	strh	r3, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	2200      	movs	r2, #0
 80028be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8c2 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028dc:	d103      	bne.n	80028e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0aa      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	4952      	ldr	r1, [pc, #328]	; (8002a48 <I2C_RequestMemoryRead+0x1cc>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f8fa 	bl	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e097      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	6a39      	ldr	r1, [r7, #32]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f964 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b04      	cmp	r3, #4
 800293c:	d107      	bne.n	800294e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e076      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	611a      	str	r2, [r3, #16]
 8002962:	e021      	b.n	80029a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002964:	893b      	ldrh	r3, [r7, #8]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f93e 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b04      	cmp	r3, #4
 8002988:	d107      	bne.n	800299a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e050      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	6a39      	ldr	r1, [r7, #32]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f923 	bl	8002bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d107      	bne.n	80029d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e035      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f82b 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0a:	d103      	bne.n	8002a14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e013      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a18:	897b      	ldrh	r3, [r7, #10]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	6a3a      	ldr	r2, [r7, #32]
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <I2C_RequestMemoryRead+0x1cc>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f863 	bl	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010002 	.word	0x00010002

08002a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5c:	e025      	b.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d021      	beq.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7fe ff3f 	bl	80018e8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e023      	b.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10d      	bne.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	e00c      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d0b6      	beq.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b08:	e051      	b.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d123      	bne.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0204 	orr.w	r2, r3, #4
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e046      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d021      	beq.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe febd 	bl	80018e8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e020      	b.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10c      	bne.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	e00b      	b.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d18d      	bne.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c04:	e02d      	b.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f8ce 	bl	8002da8 <I2C_IsAcknowledgeFailed>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02d      	b.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d021      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe fe63 	bl	80018e8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d116      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0220 	orr.w	r2, r3, #32
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d1ca      	bne.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c86:	e02d      	b.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f88d 	bl	8002da8 <I2C_IsAcknowledgeFailed>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e02d      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d021      	beq.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fe fe22 	bl	80018e8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e007      	b.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d1ca      	bne.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d08:	e042      	b.n	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d119      	bne.n	8002d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0210 	mvn.w	r2, #16
 8002d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e029      	b.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4c:	f7fe fdcc 	bl	80018e8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d302      	bcc.n	8002d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e007      	b.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d1b5      	bne.n	8002d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d11b      	bne.n	8002df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e08:	b08f      	sub	sp, #60	; 0x3c
 8002e0a:	af0a      	add	r7, sp, #40	; 0x28
 8002e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e10f      	b.n	8003038 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f006 f82e 	bl	8008e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fb81 	bl	800555e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	687e      	ldr	r6, [r7, #4]
 8002e64:	466d      	mov	r5, sp
 8002e66:	f106 0410 	add.w	r4, r6, #16
 8002e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e7a:	1d33      	adds	r3, r6, #4
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f002 fa58 	bl	8005334 <USB_CoreInit>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0d0      	b.n	8003038 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 fb6f 	bl	8005580 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e04a      	b.n	8002f3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333d      	adds	r3, #61	; 0x3d
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	333c      	adds	r3, #60	; 0x3c
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	b298      	uxth	r0, r3
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3344      	adds	r3, #68	; 0x44
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3340      	adds	r3, #64	; 0x40
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3348      	adds	r3, #72	; 0x48
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334c      	adds	r3, #76	; 0x4c
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3354      	adds	r3, #84	; 0x54
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d3af      	bcc.n	8002ea8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e044      	b.n	8002fd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d3b5      	bcc.n	8002f4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	687e      	ldr	r6, [r7, #4]
 8002fea:	466d      	mov	r5, sp
 8002fec:	f106 0410 	add.w	r4, r6, #16
 8002ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003000:	1d33      	adds	r3, r6, #4
 8003002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	f002 fb07 	bl	8005618 <USB_DevInit>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e00d      	b.n	8003038 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fc56 	bl	80068e2 <USB_DevDisconnect>

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003040 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_PCD_Start+0x1c>
 8003058:	2302      	movs	r3, #2
 800305a:	e020      	b.n	800309e <HAL_PCD_Start+0x5e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	2b01      	cmp	r3, #1
 800306a:	d109      	bne.n	8003080 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fa59 	bl	800553c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fc06 	bl	80068a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030a6:	b590      	push	{r4, r7, lr}
 80030a8:	b08d      	sub	sp, #52	; 0x34
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fcc4 	bl	8006a4a <USB_GetMode>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 848a 	bne.w	80039de <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fc28 	bl	8006924 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8480 	beq.w	80039dc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fc15 	bl	8006924 <USB_ReadInterrupts>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b02      	cmp	r3, #2
 8003102:	d107      	bne.n	8003114 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f002 0202 	and.w	r2, r2, #2
 8003112:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fc03 	bl	8006924 <USB_ReadInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d161      	bne.n	80031ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0210 	bic.w	r2, r2, #16
 8003136:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	0c5b      	lsrs	r3, r3, #17
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	2b02      	cmp	r3, #2
 8003162:	d124      	bne.n	80031ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d035      	beq.n	80031dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800317a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6a38      	ldr	r0, [r7, #32]
 8003184:	f003 fa3a 	bl	80065fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003194:	441a      	add	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	6a1a      	ldr	r2, [r3, #32]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a6:	441a      	add	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	621a      	str	r2, [r3, #32]
 80031ac:	e016      	b.n	80031dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	0c5b      	lsrs	r3, r3, #17
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d110      	bne.n	80031dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c0:	2208      	movs	r2, #8
 80031c2:	4619      	mov	r1, r3
 80031c4:	6a38      	ldr	r0, [r7, #32]
 80031c6:	f003 fa19 	bl	80065fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d6:	441a      	add	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0210 	orr.w	r2, r2, #16
 80031ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fb97 	bl	8006924 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003200:	f040 80a7 	bne.w	8003352 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fb9c 	bl	800694a <USB_ReadDevAllOutEpInterrupt>
 8003212:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003214:	e099      	b.n	800334a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 808e 	beq.w	800333e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f003 fbc0 	bl	80069b2 <USB_ReadDevOutEPInterrupt>
 8003232:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	2301      	movs	r3, #1
 800324e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fec2 	bl	8003fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2308      	movs	r3, #8
 8003272:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff98 	bl	80041ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	2310      	movs	r3, #16
 8003296:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d030      	beq.n	8003304 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d109      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f005 fecd 	bl	800908c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	461a      	mov	r2, r3
 8003300:	2302      	movs	r3, #2
 8003302:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	461a      	mov	r2, r3
 800331c:	2320      	movs	r3, #32
 800331e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800333c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	f47f af62 	bne.w	8003216 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fae4 	bl	8006924 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003362:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003366:	f040 80db 	bne.w	8003520 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f003 fb05 	bl	800697e <USB_ReadDevAllInEpInterrupt>
 8003374:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800337a:	e0cd      	b.n	8003518 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80c2 	beq.w	800350c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fb2b 	bl	80069ee <USB_ReadDevInEPInterrupt>
 8003398:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d057      	beq.n	8003454 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	2201      	movs	r2, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69f9      	ldr	r1, [r7, #28]
 80033c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c4:	4013      	ands	r3, r2
 80033c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	461a      	mov	r2, r3
 80033d6:	2301      	movs	r3, #1
 80033d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d132      	bne.n	8003448 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334c      	adds	r3, #76	; 0x4c
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	3348      	adds	r3, #72	; 0x48
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4419      	add	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4403      	add	r3, r0
 8003416:	334c      	adds	r3, #76	; 0x4c
 8003418:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d113      	bne.n	8003448 <HAL_PCD_IRQHandler+0x3a2>
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3354      	adds	r3, #84	; 0x54
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d108      	bne.n	8003448 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003440:	461a      	mov	r2, r3
 8003442:	2101      	movs	r1, #1
 8003444:	f003 fb32 	bl	8006aac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	b2db      	uxtb	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f005 fda1 	bl	8008f96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	461a      	mov	r2, r3
 800346c:	2308      	movs	r3, #8
 800346e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003486:	461a      	mov	r2, r3
 8003488:	2310      	movs	r3, #16
 800348a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	461a      	mov	r2, r3
 80034a4:	2340      	movs	r3, #64	; 0x40
 80034a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d023      	beq.n	80034fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b4:	6a38      	ldr	r0, [r7, #32]
 80034b6:	f002 fa13 	bl	80058e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	3338      	adds	r3, #56	; 0x38
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d108      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f005 fde4 	bl	80090b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	461a      	mov	r2, r3
 80034f6:	2302      	movs	r3, #2
 80034f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fcdb 	bl	8003ec2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	3301      	adds	r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	f47f af2e 	bne.w	800337c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f9fd 	bl	8006924 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003534:	d122      	bne.n	800357c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003550:	2b01      	cmp	r3, #1
 8003552:	d108      	bne.n	8003566 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fec2 	bl	80042e8 <HAL_PCDEx_LPM_Callback>
 8003564:	e002      	b.n	800356c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f005 fd82 	bl	8009070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800357a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f003 f9cf 	bl	8006924 <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003590:	d112      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f005 fd3e 	bl	8009024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 f9b1 	bl	8006924 <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035cc:	f040 80b7 	bne.w	800373e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2110      	movs	r1, #16
 80035ea:	4618      	mov	r0, r3
 80035ec:	f002 f978 	bl	80058e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f4:	e046      	b.n	8003684 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003602:	461a      	mov	r2, r3
 8003604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003608:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361a:	0151      	lsls	r1, r2, #5
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	440a      	add	r2, r1
 8003620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003628:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	461a      	mov	r2, r3
 8003638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800363c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	0151      	lsls	r1, r2, #5
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	440a      	add	r2, r1
 8003654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003658:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800365c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366e:	0151      	lsls	r1, r2, #5
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	440a      	add	r2, r1
 8003674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003678:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	3301      	adds	r3, #1
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368a:	429a      	cmp	r2, r3
 800368c:	d3b3      	bcc.n	80035f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ba:	f043 030b 	orr.w	r3, r3, #11
 80036be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d0:	f043 030b 	orr.w	r3, r3, #11
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	e015      	b.n	8003704 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fe:	f043 030b 	orr.w	r3, r3, #11
 8003702:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003712:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003716:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003728:	461a      	mov	r2, r3
 800372a:	f003 f9bf 	bl	8006aac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800373c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 f8ee 	bl	8006924 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003752:	d124      	bne.n	800379e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f003 f984 	bl	8006a66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f002 f939 	bl	80059da <USB_GetDevSpeed>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681c      	ldr	r4, [r3, #0]
 8003774:	f001 f9e8 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8003778:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4620      	mov	r0, r4
 8003784:	f001 fe38 	bl	80053f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f005 fc2c 	bl	8008fe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800379c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f8be 	bl	8006924 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d10a      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f005 fc09 	bl	8008fca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 0208 	and.w	r2, r2, #8
 80037c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 f8a9 	bl	8006924 <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d122      	bne.n	8003822 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	e014      	b.n	8003818 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fb27 	bl	8003e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3301      	adds	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d3e5      	bcc.n	80037ee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 f87c 	bl	8006924 <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d13b      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003838:	2301      	movs	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
 800383c:	e02b      	b.n	8003896 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3340      	adds	r3, #64	; 0x40
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d115      	bne.n	8003890 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003864:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003866:	2b00      	cmp	r3, #0
 8003868:	da12      	bge.n	8003890 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	333f      	adds	r3, #63	; 0x3f
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fae8 	bl	8003e60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	429a      	cmp	r2, r3
 800389e:	d3ce      	bcc.n	800383e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 f835 	bl	8006924 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c4:	d155      	bne.n	8003972 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	e045      	b.n	8003958 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d12e      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da2b      	bge.n	8003952 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003906:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800390a:	429a      	cmp	r2, r3
 800390c:	d121      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800394a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394e:	6053      	str	r3, [r2, #4]
            break;
 8003950:	e007      	b.n	8003962 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	3301      	adds	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	429a      	cmp	r2, r3
 8003960:	d3b4      	bcc.n	80038cc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 ffd4 	bl	8006924 <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d10a      	bne.n	800399e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f005 fba3 	bl	80090d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800399c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 ffbe 	bl	8006924 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d115      	bne.n	80039de <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f005 fb93 	bl	80090f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e000      	b.n	80039de <HAL_PCD_IRQHandler+0x938>
      return;
 80039dc:	bf00      	nop
    }
  }
}
 80039de:	3734      	adds	r7, #52	; 0x34
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd90      	pop	{r4, r7, pc}

080039e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_PCD_SetAddress+0x1a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e013      	b.n	8003a26 <HAL_PCD_SetAddress+0x42>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 ff1c 	bl	8006854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	4608      	mov	r0, r1
 8003a38:	4611      	mov	r1, r2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	70fb      	strb	r3, [r7, #3]
 8003a40:	460b      	mov	r3, r1
 8003a42:	803b      	strh	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da0f      	bge.n	8003a74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	3338      	adds	r3, #56	; 0x38
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	705a      	strb	r2, [r3, #1]
 8003a72:	e00f      	b.n	8003a94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003aa0:	883a      	ldrh	r2, [r7, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_PCD_EP_Open+0xaa>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e00e      	b.n	8003af6 <HAL_PCD_EP_Open+0xc8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68f9      	ldr	r1, [r7, #12]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 ff9c 	bl	8005a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003af4:	7afb      	ldrb	r3, [r7, #11]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da0f      	bge.n	8003b32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 020f 	and.w	r2, r3, #15
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	3338      	adds	r3, #56	; 0x38
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	3304      	adds	r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	705a      	strb	r2, [r3, #1]
 8003b30:	e00f      	b.n	8003b52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_Close+0x6e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e00e      	b.n	8003b8a <HAL_PCD_EP_Close+0x8c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 ffda 	bl	8005b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bee:	7afb      	ldrb	r3, [r7, #11]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	6979      	ldr	r1, [r7, #20]
 8003c06:	f002 fab9 	bl	800617c <USB_EP0StartXfer>
 8003c0a:	e008      	b.n	8003c1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	f002 f867 	bl	8005cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	460b      	mov	r3, r1
 8003c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3338      	adds	r3, #56	; 0x38
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2201      	movs	r2, #1
 8003c96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d102      	bne.n	8003cb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	f002 fa57 	bl	800617c <USB_EP0StartXfer>
 8003cce:	e008      	b.n	8003ce2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	f002 f805 	bl	8005cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d901      	bls.n	8003d0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e050      	b.n	8003dac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da0f      	bge.n	8003d32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3338      	adds	r3, #56	; 0x38
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	705a      	strb	r2, [r3, #1]
 8003d30:	e00d      	b.n	8003d4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	3304      	adds	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_PCD_EP_SetStall+0x82>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e01e      	b.n	8003dac <HAL_PCD_EP_SetStall+0xc0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fc95 	bl	80066ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	b2d9      	uxtb	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f002 fe85 	bl	8006aac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d901      	bls.n	8003dd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e042      	b.n	8003e58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da0f      	bge.n	8003dfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3338      	adds	r3, #56	; 0x38
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	705a      	strb	r2, [r3, #1]
 8003df8:	e00f      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3304      	adds	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_PCD_EP_ClrStall+0x86>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e00e      	b.n	8003e58 <HAL_PCD_EP_ClrStall+0xa4>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fc9d 	bl	8006788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da0c      	bge.n	8003e8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3338      	adds	r3, #56	; 0x38
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e00c      	b.n	8003ea8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 020f 	and.w	r2, r3, #15
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 fabc 	bl	800642c <USB_EPStopXfer>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	; 0x28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	3338      	adds	r3, #56	; 0x38
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d901      	bls.n	8003efa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06c      	b.n	8003fd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d902      	bls.n	8003f16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f1e:	e02b      	b.n	8003f78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d902      	bls.n	8003f3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3303      	adds	r3, #3
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6919      	ldr	r1, [r3, #16]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f002 fb10 	bl	8006580 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	441a      	add	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d809      	bhi.n	8003fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d203      	bcs.n	8003fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1be      	bne.n	8003f20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d811      	bhi.n	8003fd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	6939      	ldr	r1, [r7, #16]
 8003fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fce:	4013      	ands	r3, r2
 8003fd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d17b      	bne.n	800410a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a61      	ldr	r2, [pc, #388]	; (80041a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	f240 80b9 	bls.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80b3 	beq.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	461a      	mov	r2, r3
 8004040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004044:	6093      	str	r3, [r2, #8]
 8004046:	e0a7      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2320      	movs	r3, #32
 8004062:	6093      	str	r3, [r2, #8]
 8004064:	e098      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8093 	bne.w	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d90f      	bls.n	800409a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	e07e      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	0159      	lsls	r1, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d114      	bne.n	80040fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040e4:	461a      	mov	r2, r3
 80040e6:	2101      	movs	r1, #1
 80040e8:	f002 fce0 	bl	8006aac <USB_EP0_OutStart>
 80040ec:	e006      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f004 ff2c 	bl	8008f60 <HAL_PCD_DataOutStageCallback>
 8004108:	e046      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d124      	bne.n	800415c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	6093      	str	r3, [r2, #8]
 8004130:	e032      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	2320      	movs	r3, #32
 800414c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f004 ff03 	bl	8008f60 <HAL_PCD_DataOutStageCallback>
 800415a:	e01d      	b.n	8004198 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d114      	bne.n	800418c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004184:	461a      	mov	r2, r3
 8004186:	2100      	movs	r1, #0
 8004188:	f002 fc90 	bl	8006aac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f004 fee4 	bl	8008f60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	4f54300a 	.word	0x4f54300a
 80041a8:	4f54310a 	.word	0x4f54310a

080041ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	333c      	adds	r3, #60	; 0x3c
 80041c4:	3304      	adds	r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <PCD_EP_OutSetupPacket_int+0x88>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d90e      	bls.n	8004200 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f004 fe9b 	bl	8008f3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <PCD_EP_OutSetupPacket_int+0x88>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d90c      	bls.n	8004228 <PCD_EP_OutSetupPacket_int+0x7c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d108      	bne.n	8004228 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004220:	461a      	mov	r2, r3
 8004222:	2101      	movs	r1, #1
 8004224:	f002 fc42 	bl	8006aac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	4f54300a 	.word	0x4f54300a

08004238 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
 8004244:	4613      	mov	r3, r2
 8004246:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004256:	883b      	ldrh	r3, [r7, #0]
 8004258:	0419      	lsls	r1, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	430a      	orrs	r2, r1
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
 8004264:	e028      	b.n	80042b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e00d      	b.n	8004296 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	3340      	adds	r3, #64	; 0x40
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3301      	adds	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	7bfa      	ldrb	r2, [r7, #15]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	3b01      	subs	r3, #1
 800429c:	429a      	cmp	r2, r3
 800429e:	d3ec      	bcc.n	800427a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042a0:	883b      	ldrh	r3, [r7, #0]
 80042a2:	0418      	lsls	r0, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6819      	ldr	r1, [r3, #0]
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4302      	orrs	r2, r0
 80042b0:	3340      	adds	r3, #64	; 0x40
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e267      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d075      	beq.n	800440a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00c      	beq.n	8004344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d112      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004336:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004342:	d10b      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05b      	beq.n	8004408 <HAL_RCC_OscConfig+0x108>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d157      	bne.n	8004408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e242      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d106      	bne.n	8004374 <HAL_RCC_OscConfig+0x74>
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e01d      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b70      	ldr	r3, [pc, #448]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6f      	ldr	r2, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6c      	ldr	r2, [pc, #432]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004398:	4b69      	ldr	r3, [pc, #420]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a68      	ldr	r2, [pc, #416]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd fa96 	bl	80018e8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fd fa92 	bl	80018e8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e207      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b5b      	ldr	r3, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xc0>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fa82 	bl	80018e8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd fa7e 	bl	80018e8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1f3      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0xe8>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004416:	4b4a      	ldr	r3, [pc, #296]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442a:	2b08      	cmp	r3, #8
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b44      	ldr	r3, [pc, #272]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1c7      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4937      	ldr	r1, [pc, #220]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	e03a      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fa37 	bl	80018e8 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd fa33 	bl	80018e8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1a8      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	e015      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fd fa16 	bl	80018e8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fd fa12 	bl	80018e8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e187      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d036      	beq.n	8004558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd f9f6 	bl	80018e8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004500:	f7fd f9f2 	bl	80018e8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e167      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x200>
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fd f9df 	bl	80018e8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	e00e      	b.n	800454c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452e:	f7fd f9db 	bl	80018e8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d907      	bls.n	800454c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e150      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
 8004548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ea      	bne.n	800452e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8097 	beq.w	8004694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b77      	ldr	r3, [pc, #476]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d118      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b74      	ldr	r3, [pc, #464]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a73      	ldr	r2, [pc, #460]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fd f99b 	bl	80018e8 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fd f997 	bl	80018e8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e10c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x2ea>
 80045dc:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a63      	ldr	r2, [pc, #396]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x30c>
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a5e      	ldr	r2, [pc, #376]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a5b      	ldr	r2, [pc, #364]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a54      	ldr	r2, [pc, #336]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd f95c 	bl	80018e8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd f958 	bl	80018e8 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e0cb      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RCC_OscConfig+0x334>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fd f946 	bl	80018e8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd f942 	bl	80018e8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0b5      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4a38      	ldr	r2, [pc, #224]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80a1 	beq.w	80047e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d05c      	beq.n	8004764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d141      	bne.n	8004736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd f916 	bl	80018e8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd f912 	bl	80018e8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e087      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	491b      	ldr	r1, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7fd f8eb 	bl	80018e8 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004716:	f7fd f8e7 	bl	80018e8 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e05c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x416>
 8004734:	e054      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd f8d4 	bl	80018e8 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd f8d0 	bl	80018e8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e045      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
 8004762:	e03d      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e038      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004770:	40023800 	.word	0x40023800
 8004774:	40007000 	.word	0x40007000
 8004778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x4ec>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d028      	beq.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d121      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11a      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0cc      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d90c      	bls.n	800482c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b8      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800484e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494d      	ldr	r1, [pc, #308]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d119      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e067      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4934      	ldr	r1, [pc, #208]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e0:	f7fd f802 	bl	80018e8 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fc fffe 	bl	80018e8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 020c 	and.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1eb      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d20c      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e032      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4916      	ldr	r1, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f821 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490a      	ldr	r1, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc ff62 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023c00 	.word	0x40023c00
 80049ac:	40023800 	.word	0x40023800
 80049b0:	0800c354 	.word	0x0800c354
 80049b4:	20000000 	.word	0x20000000
 80049b8:	20000004 	.word	0x20000004

080049bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b090      	sub	sp, #64	; 0x40
 80049c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
 80049c8:	2300      	movs	r3, #0
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	2300      	movs	r3, #0
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d4:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d00d      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x40>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	f200 80a1 	bhi.w	8004b28 <HAL_RCC_GetSysClockFreq+0x16c>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ee:	e09b      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x184>)
 80049f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80049f4:	e09b      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049f6:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049fa:	e098      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049fc:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a06:	4b4d      	ldr	r3, [pc, #308]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d028      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	2200      	movs	r2, #0
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a24:	2100      	movs	r1, #0
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a28:	fb03 f201 	mul.w	r2, r3, r1
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	fb00 f303 	mul.w	r3, r0, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	4a43      	ldr	r2, [pc, #268]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a36:	fba0 1202 	umull	r1, r2, r0, r2
 8004a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a42:	4413      	add	r3, r2
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	61fa      	str	r2, [r7, #28]
 8004a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a56:	f7fc f8ff 	bl	8000c58 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4613      	mov	r3, r2
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	e053      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4b35      	ldr	r3, [pc, #212]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	617a      	str	r2, [r7, #20]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a76:	f04f 0b00 	mov.w	fp, #0
 8004a7a:	4652      	mov	r2, sl
 8004a7c:	465b      	mov	r3, fp
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	0159      	lsls	r1, r3, #5
 8004a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8c:	0150      	lsls	r0, r2, #5
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	ebb2 080a 	subs.w	r8, r2, sl
 8004a96:	eb63 090b 	sbc.w	r9, r3, fp
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004aae:	ebb2 0408 	subs.w	r4, r2, r8
 8004ab2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	00eb      	lsls	r3, r5, #3
 8004ac0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac4:	00e2      	lsls	r2, r4, #3
 8004ac6:	4614      	mov	r4, r2
 8004ac8:	461d      	mov	r5, r3
 8004aca:	eb14 030a 	adds.w	r3, r4, sl
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	eb45 030b 	adc.w	r3, r5, fp
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2200      	movs	r2, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	60fa      	str	r2, [r7, #12]
 8004afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b00:	f7fc f8aa 	bl	8000c58 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	3301      	adds	r3, #1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3740      	adds	r7, #64	; 0x40
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	017d7840 	.word	0x017d7840

08004b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000000 	.word	0x20000000

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800c364 	.word	0x0800c364

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0800c364 	.word	0x0800c364

08004bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e03f      	b.n	8004c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fca2 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f929 	bl	8004e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08a      	sub	sp, #40	; 0x28
 8004c4e:	af02      	add	r7, sp, #8
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d17c      	bne.n	8004d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_UART_Transmit+0x2c>
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e075      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Transmit+0x3e>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e06e      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	; 0x21
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fe23 	bl	80018e8 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	d108      	bne.n	8004ccc <HAL_UART_Transmit+0x82>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e003      	b.n	8004cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cdc:	e02a      	b.n	8004d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2180      	movs	r1, #128	; 0x80
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f840 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e036      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	3302      	adds	r3, #2
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e007      	b.n	8004d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1cf      	bne.n	8004cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f810 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e006      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b090      	sub	sp, #64	; 0x40
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	e050      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d04c      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	f7fc fdab 	bl	80018e8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d241      	bcs.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dbe:	637a      	str	r2, [r7, #52]	; 0x34
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3314      	adds	r3, #20
 8004df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df2:	623a      	str	r2, [r7, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d09f      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3740      	adds	r7, #64	; 0x40
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e50:	b0c0      	sub	sp, #256	; 0x100
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	68d9      	ldr	r1, [r3, #12]
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	ea40 0301 	orr.w	r3, r0, r1
 8004e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ea4:	f021 010c 	bic.w	r1, r1, #12
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec6:	6999      	ldr	r1, [r3, #24]
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	ea40 0301 	orr.w	r3, r0, r1
 8004ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b8f      	ldr	r3, [pc, #572]	; (8005118 <UART_SetConfig+0x2cc>)
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d005      	beq.n	8004eec <UART_SetConfig+0xa0>
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	; (800511c <UART_SetConfig+0x2d0>)
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d104      	bne.n	8004ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7ff fe4c 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ef4:	e003      	b.n	8004efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ef6:	f7ff fe33 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8004efa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	f040 810c 	bne.w	8005124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	1891      	adds	r1, r2, r2
 8004f24:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f26:	415b      	adcs	r3, r3
 8004f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f2e:	4621      	mov	r1, r4
 8004f30:	eb12 0801 	adds.w	r8, r2, r1
 8004f34:	4629      	mov	r1, r5
 8004f36:	eb43 0901 	adc.w	r9, r3, r1
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4e:	4690      	mov	r8, r2
 8004f50:	4699      	mov	r9, r3
 8004f52:	4623      	mov	r3, r4
 8004f54:	eb18 0303 	adds.w	r3, r8, r3
 8004f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	eb49 0303 	adc.w	r3, r9, r3
 8004f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	18db      	adds	r3, r3, r3
 8004f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f80:	4613      	mov	r3, r2
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	657b      	str	r3, [r7, #84]	; 0x54
 8004f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f90:	f7fb fe62 	bl	8000c58 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4b61      	ldr	r3, [pc, #388]	; (8005120 <UART_SetConfig+0x2d4>)
 8004f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	011c      	lsls	r4, r3, #4
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe4:	4692      	mov	sl, r2
 8004fe6:	469b      	mov	fp, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	eb1a 0303 	adds.w	r3, sl, r3
 8004fee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800500c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005010:	460b      	mov	r3, r1
 8005012:	18db      	adds	r3, r3, r3
 8005014:	643b      	str	r3, [r7, #64]	; 0x40
 8005016:	4613      	mov	r3, r2
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
 800501e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005026:	f7fb fe17 	bl	8000c58 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4611      	mov	r1, r2
 8005030:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <UART_SetConfig+0x2d4>)
 8005032:	fba3 2301 	umull	r2, r3, r3, r1
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2264      	movs	r2, #100	; 0x64
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <UART_SetConfig+0x2d4>)
 8005048:	fba3 2302 	umull	r2, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005054:	441c      	add	r4, r3
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005070:	415b      	adcs	r3, r3
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6339      	str	r1, [r7, #48]	; 0x30
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050cc:	460b      	mov	r3, r1
 80050ce:	18db      	adds	r3, r3, r3
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d2:	4613      	mov	r3, r2
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050e2:	f7fb fdb9 	bl	8000c58 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <UART_SetConfig+0x2d4>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <UART_SetConfig+0x2d4>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 0207 	and.w	r2, r3, #7
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4422      	add	r2, r4
 8005112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005114:	e105      	b.n	8005322 <UART_SetConfig+0x4d6>
 8005116:	bf00      	nop
 8005118:	40011000 	.word	0x40011000
 800511c:	40011400 	.word	0x40011400
 8005120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800512e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005136:	4642      	mov	r2, r8
 8005138:	464b      	mov	r3, r9
 800513a:	1891      	adds	r1, r2, r2
 800513c:	6239      	str	r1, [r7, #32]
 800513e:	415b      	adcs	r3, r3
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005146:	4641      	mov	r1, r8
 8005148:	1854      	adds	r4, r2, r1
 800514a:	4649      	mov	r1, r9
 800514c:	eb43 0501 	adc.w	r5, r3, r1
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	00eb      	lsls	r3, r5, #3
 800515a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800515e:	00e2      	lsls	r2, r4, #3
 8005160:	4614      	mov	r4, r2
 8005162:	461d      	mov	r5, r3
 8005164:	4643      	mov	r3, r8
 8005166:	18e3      	adds	r3, r4, r3
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800516c:	464b      	mov	r3, r9
 800516e:	eb45 0303 	adc.w	r3, r5, r3
 8005172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005192:	4629      	mov	r1, r5
 8005194:	008b      	lsls	r3, r1, #2
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519c:	4621      	mov	r1, r4
 800519e:	008a      	lsls	r2, r1, #2
 80051a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051a4:	f7fb fd58 	bl	8000c58 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4b60      	ldr	r3, [pc, #384]	; (8005330 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2302 	umull	r2, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	011c      	lsls	r4, r3, #4
 80051b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	61b9      	str	r1, [r7, #24]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d8:	4641      	mov	r1, r8
 80051da:	1851      	adds	r1, r2, r1
 80051dc:	6139      	str	r1, [r7, #16]
 80051de:	4649      	mov	r1, r9
 80051e0:	414b      	adcs	r3, r1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051f0:	4659      	mov	r1, fp
 80051f2:	00cb      	lsls	r3, r1, #3
 80051f4:	4651      	mov	r1, sl
 80051f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fa:	4651      	mov	r1, sl
 80051fc:	00ca      	lsls	r2, r1, #3
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	4603      	mov	r3, r0
 8005204:	4642      	mov	r2, r8
 8005206:	189b      	adds	r3, r3, r2
 8005208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800520c:	464b      	mov	r3, r9
 800520e:	460a      	mov	r2, r1
 8005210:	eb42 0303 	adc.w	r3, r2, r3
 8005214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	67bb      	str	r3, [r7, #120]	; 0x78
 8005222:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005230:	4649      	mov	r1, r9
 8005232:	008b      	lsls	r3, r1, #2
 8005234:	4641      	mov	r1, r8
 8005236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523a:	4641      	mov	r1, r8
 800523c:	008a      	lsls	r2, r1, #2
 800523e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005242:	f7fb fd09 	bl	8000c58 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4b39      	ldr	r3, [pc, #228]	; (8005330 <UART_SetConfig+0x4e4>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a34      	ldr	r2, [pc, #208]	; (8005330 <UART_SetConfig+0x4e4>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526a:	441c      	add	r4, r3
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005270:	2200      	movs	r2, #0
 8005272:	673b      	str	r3, [r7, #112]	; 0x70
 8005274:	677a      	str	r2, [r7, #116]	; 0x74
 8005276:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	415b      	adcs	r3, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800528a:	4641      	mov	r1, r8
 800528c:	1851      	adds	r1, r2, r1
 800528e:	6039      	str	r1, [r7, #0]
 8005290:	4649      	mov	r1, r9
 8005292:	414b      	adcs	r3, r1
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052a2:	4659      	mov	r1, fp
 80052a4:	00cb      	lsls	r3, r1, #3
 80052a6:	4651      	mov	r1, sl
 80052a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ac:	4651      	mov	r1, sl
 80052ae:	00ca      	lsls	r2, r1, #3
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	4603      	mov	r3, r0
 80052b6:	4642      	mov	r2, r8
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80052bc:	464b      	mov	r3, r9
 80052be:	460a      	mov	r2, r1
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
 80052d0:	667a      	str	r2, [r7, #100]	; 0x64
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052de:	4649      	mov	r1, r9
 80052e0:	008b      	lsls	r3, r1, #2
 80052e2:	4641      	mov	r1, r8
 80052e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e8:	4641      	mov	r1, r8
 80052ea:	008a      	lsls	r2, r1, #2
 80052ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052f0:	f7fb fcb2 	bl	8000c58 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <UART_SetConfig+0x4e4>)
 80052fa:	fba3 1302 	umull	r1, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2164      	movs	r1, #100	; 0x64
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <UART_SetConfig+0x4e4>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4422      	add	r2, r4
 8005320:	609a      	str	r2, [r3, #8]
}
 8005322:	bf00      	nop
 8005324:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	51eb851f 	.word	0x51eb851f

08005334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005334:	b084      	sub	sp, #16
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	f107 001c 	add.w	r0, r7, #28
 8005342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d122      	bne.n	8005392 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fbee 	bl	8006b68 <USB_CoreReset>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
 8005390:	e01a      	b.n	80053c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 fbe2 	bl	8006b68 <USB_CoreReset>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
 80053ba:	e005      	b.n	80053c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d10b      	bne.n	80053e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f043 0206 	orr.w	r2, r3, #6
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f2:	b004      	add	sp, #16
 80053f4:	4770      	bx	lr
	...

080053f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d165      	bne.n	80054d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a41      	ldr	r2, [pc, #260]	; (8005514 <USB_SetTurnaroundTime+0x11c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d906      	bls.n	8005422 <USB_SetTurnaroundTime+0x2a>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a40      	ldr	r2, [pc, #256]	; (8005518 <USB_SetTurnaroundTime+0x120>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d202      	bcs.n	8005422 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800541c:	230f      	movs	r3, #15
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e062      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <USB_SetTurnaroundTime+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d306      	bcc.n	8005438 <USB_SetTurnaroundTime+0x40>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a3b      	ldr	r2, [pc, #236]	; (800551c <USB_SetTurnaroundTime+0x124>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d202      	bcs.n	8005438 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005432:	230e      	movs	r3, #14
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e057      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a38      	ldr	r2, [pc, #224]	; (800551c <USB_SetTurnaroundTime+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d306      	bcc.n	800544e <USB_SetTurnaroundTime+0x56>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a37      	ldr	r2, [pc, #220]	; (8005520 <USB_SetTurnaroundTime+0x128>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d202      	bcs.n	800544e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005448:	230d      	movs	r3, #13
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e04c      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4a33      	ldr	r2, [pc, #204]	; (8005520 <USB_SetTurnaroundTime+0x128>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d306      	bcc.n	8005464 <USB_SetTurnaroundTime+0x6c>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a32      	ldr	r2, [pc, #200]	; (8005524 <USB_SetTurnaroundTime+0x12c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d802      	bhi.n	8005464 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800545e:	230c      	movs	r3, #12
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e041      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <USB_SetTurnaroundTime+0x12c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d906      	bls.n	800547a <USB_SetTurnaroundTime+0x82>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a2e      	ldr	r2, [pc, #184]	; (8005528 <USB_SetTurnaroundTime+0x130>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d802      	bhi.n	800547a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005474:	230b      	movs	r3, #11
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e036      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a2a      	ldr	r2, [pc, #168]	; (8005528 <USB_SetTurnaroundTime+0x130>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d906      	bls.n	8005490 <USB_SetTurnaroundTime+0x98>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a29      	ldr	r2, [pc, #164]	; (800552c <USB_SetTurnaroundTime+0x134>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d802      	bhi.n	8005490 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800548a:	230a      	movs	r3, #10
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e02b      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a26      	ldr	r2, [pc, #152]	; (800552c <USB_SetTurnaroundTime+0x134>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d906      	bls.n	80054a6 <USB_SetTurnaroundTime+0xae>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a25      	ldr	r2, [pc, #148]	; (8005530 <USB_SetTurnaroundTime+0x138>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d202      	bcs.n	80054a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054a0:	2309      	movs	r3, #9
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e020      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a21      	ldr	r2, [pc, #132]	; (8005530 <USB_SetTurnaroundTime+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d306      	bcc.n	80054bc <USB_SetTurnaroundTime+0xc4>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a20      	ldr	r2, [pc, #128]	; (8005534 <USB_SetTurnaroundTime+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d802      	bhi.n	80054bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054b6:	2308      	movs	r3, #8
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e015      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a1d      	ldr	r2, [pc, #116]	; (8005534 <USB_SetTurnaroundTime+0x13c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0xda>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <USB_SetTurnaroundTime+0x140>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054cc:	2307      	movs	r3, #7
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e00a      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054d2:	2306      	movs	r3, #6
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e007      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d102      	bne.n	80054e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054de:	2309      	movs	r3, #9
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e001      	b.n	80054e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054e4:	2309      	movs	r3, #9
 80054e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	00d8acbf 	.word	0x00d8acbf
 8005518:	00e4e1c0 	.word	0x00e4e1c0
 800551c:	00f42400 	.word	0x00f42400
 8005520:	01067380 	.word	0x01067380
 8005524:	011a499f 	.word	0x011a499f
 8005528:	01312cff 	.word	0x01312cff
 800552c:	014ca43f 	.word	0x014ca43f
 8005530:	016e3600 	.word	0x016e3600
 8005534:	01a6ab1f 	.word	0x01a6ab1f
 8005538:	01e84800 	.word	0x01e84800

0800553c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f043 0201 	orr.w	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d115      	bne.n	80055ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055ae:	2001      	movs	r0, #1
 80055b0:	f7fc f9a6 	bl	8001900 <HAL_Delay>
      ms++;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fa45 	bl	8006a4a <USB_GetMode>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d01e      	beq.n	8005604 <USB_SetCurrentMode+0x84>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b31      	cmp	r3, #49	; 0x31
 80055ca:	d9f0      	bls.n	80055ae <USB_SetCurrentMode+0x2e>
 80055cc:	e01a      	b.n	8005604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d115      	bne.n	8005600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7fc f98d 	bl	8001900 <HAL_Delay>
      ms++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fa2c 	bl	8006a4a <USB_GetMode>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <USB_SetCurrentMode+0x84>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b31      	cmp	r3, #49	; 0x31
 80055fc:	d9f0      	bls.n	80055e0 <USB_SetCurrentMode+0x60>
 80055fe:	e001      	b.n	8005604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e005      	b.n	8005610 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b32      	cmp	r3, #50	; 0x32
 8005608:	d101      	bne.n	800560e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005618:	b084      	sub	sp, #16
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e009      	b.n	800564c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3340      	adds	r3, #64	; 0x40
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3301      	adds	r3, #1
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2b0e      	cmp	r3, #14
 8005650:	d9f2      	bls.n	8005638 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11c      	bne.n	8005692 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005666:	f043 0302 	orr.w	r3, r3, #2
 800566a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
 8005690:	e00b      	b.n	80056aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b0:	461a      	mov	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	4619      	mov	r1, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	461a      	mov	r2, r3
 80056c6:	680b      	ldr	r3, [r1, #0]
 80056c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10c      	bne.n	80056ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d104      	bne.n	80056e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056d6:	2100      	movs	r1, #0
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f965 	bl	80059a8 <USB_SetDevSpeed>
 80056de:	e008      	b.n	80056f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f960 	bl	80059a8 <USB_SetDevSpeed>
 80056e8:	e003      	b.n	80056f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ea:	2103      	movs	r1, #3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f95b 	bl	80059a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056f2:	2110      	movs	r1, #16
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f8f3 	bl	80058e0 <USB_FlushTxFifo>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f91f 	bl	8005948 <USB_FlushRxFifo>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	e043      	b.n	80057c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005754:	d118      	bne.n	8005788 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e013      	b.n	800579a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	461a      	mov	r2, r3
 8005780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e008      	b.n	800579a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	461a      	mov	r2, r3
 8005796:	2300      	movs	r3, #0
 8005798:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	461a      	mov	r2, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	461a      	mov	r2, r3
 80057ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	3301      	adds	r3, #1
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d3b7      	bcc.n	800573e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	e043      	b.n	800585c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ea:	d118      	bne.n	800581e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	461a      	mov	r2, r3
 8005800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e013      	b.n	8005830 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e008      	b.n	8005830 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	461a      	mov	r2, r3
 800582c:	2300      	movs	r3, #0
 800582e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	461a      	mov	r2, r3
 8005850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d3b7      	bcc.n	80057d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005876:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005884:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f043 0210 	orr.w	r2, r3, #16
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <USB_DevInit+0x2c4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f043 0208 	orr.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d107      	bne.n	80058cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	f043 0304 	orr.w	r3, r3, #4
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d8:	b004      	add	sp, #16
 80058da:	4770      	bx	lr
 80058dc:	803c3800 	.word	0x803c3800

080058e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <USB_FlushTxFifo+0x64>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e01b      	b.n	8005938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	daf2      	bge.n	80058ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	019b      	lsls	r3, r3, #6
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <USB_FlushTxFifo+0x64>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b20      	cmp	r3, #32
 8005934:	d0f0      	beq.n	8005918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	00030d40 	.word	0x00030d40

08005948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <USB_FlushRxFifo+0x5c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e018      	b.n	8005998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	daf2      	bge.n	8005954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2210      	movs	r2, #16
 8005976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <USB_FlushRxFifo+0x5c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d0f0      	beq.n	8005978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0306 	and.w	r3, r3, #6
 80059f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	e00a      	b.n	8005a16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d002      	beq.n	8005a0c <USB_GetDevSpeed+0x32>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b06      	cmp	r3, #6
 8005a0a:	d102      	bne.n	8005a12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	75fb      	strb	r3, [r7, #23]
 8005a10:	e001      	b.n	8005a16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a12:	230f      	movs	r3, #15
 8005a14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d13a      	bne.n	8005ab6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d155      	bne.n	8005b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	791b      	ldrb	r3, [r3, #4]
 8005a92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	059b      	lsls	r3, r3, #22
 8005a9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e036      	b.n	8005b24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11a      	bne.n	8005b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d161      	bne.n	8005c14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b66:	d11f      	bne.n	8005ba8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bec:	4013      	ands	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0159      	lsls	r1, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4b35      	ldr	r3, [pc, #212]	; (8005ce4 <USB_DeactivateEndpoint+0x1b0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
 8005c12:	e060      	b.n	8005cd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2a:	d11f      	bne.n	8005c6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	0159      	lsls	r1, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	440b      	add	r3, r1
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <USB_DeactivateEndpoint+0x1b4>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	ec337800 	.word	0xec337800
 8005ce8:	eff37800 	.word	0xeff37800

08005cec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	f040 815c 	bne.w	8005fc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d132      	bne.n	8005d7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	0cdb      	lsrs	r3, r3, #19
 8005d76:	04db      	lsls	r3, r3, #19
 8005d78:	6113      	str	r3, [r2, #16]
 8005d7a:	e074      	b.n	8005e66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	0cdb      	lsrs	r3, r3, #19
 8005d98:	04db      	lsls	r3, r3, #19
 8005d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6999      	ldr	r1, [r3, #24]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	1e59      	subs	r1, r3, #1
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005de4:	4b9d      	ldr	r3, [pc, #628]	; (800605c <USB_EPStartXfer+0x370>)
 8005de6:	400b      	ands	r3, r1
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0e:	69b9      	ldr	r1, [r7, #24]
 8005e10:	0148      	lsls	r0, r1, #5
 8005e12:	69f9      	ldr	r1, [r7, #28]
 8005e14:	4401      	add	r1, r0
 8005e16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	791b      	ldrb	r3, [r3, #4]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d11f      	bne.n	8005e66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d14b      	bne.n	8005f04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d128      	bne.n	8005ee2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	e00f      	b.n	8005ee2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e133      	b.n	800616c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	791b      	ldrb	r3, [r3, #4]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d015      	beq.n	8005f58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 811b 	beq.w	800616c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	69f9      	ldr	r1, [r7, #28]
 8005f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f52:	4313      	orrs	r3, r2
 8005f54:	634b      	str	r3, [r1, #52]	; 0x34
 8005f56:	e109      	b.n	800616c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e00f      	b.n	8005faa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6919      	ldr	r1, [r3, #16]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	b298      	uxth	r0, r3
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fade 	bl	8006580 <USB_WritePacket>
 8005fc4:	e0d2      	b.n	800616c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	0cdb      	lsrs	r3, r3, #19
 8005fe2:	04db      	lsls	r3, r3, #19
 8005fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d126      	bne.n	8006060 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	0148      	lsls	r0, r1, #5
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	4401      	add	r1, r0
 8006030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006034:	4313      	orrs	r3, r2
 8006036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006056:	6113      	str	r3, [r2, #16]
 8006058:	e03a      	b.n	80060d0 <USB_EPStartXfer+0x3e4>
 800605a:	bf00      	nop
 800605c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4413      	add	r3, r2
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	8afa      	ldrh	r2, [r7, #22]
 800607c:	fb03 f202 	mul.w	r2, r3, r2
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	8afb      	ldrh	r3, [r7, #22]
 8006094:	04d9      	lsls	r1, r3, #19
 8006096:	4b38      	ldr	r3, [pc, #224]	; (8006178 <USB_EPStartXfer+0x48c>)
 8006098:	400b      	ands	r3, r1
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	0148      	lsls	r0, r1, #5
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	4401      	add	r1, r0
 80060a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a6:	4313      	orrs	r3, r2
 80060a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	0148      	lsls	r0, r1, #5
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	4401      	add	r1, r0
 80060c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6919      	ldr	r1, [r3, #16]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	460a      	mov	r2, r1
 80060f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d128      	bne.n	800614c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00f      	b.n	800614c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800616a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	1ff80000 	.word	0x1ff80000

0800617c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 80ce 	bne.w	800633a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d132      	bne.n	800620c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	0cdb      	lsrs	r3, r3, #19
 8006206:	04db      	lsls	r3, r3, #19
 8006208:	6113      	str	r3, [r2, #16]
 800620a:	e04e      	b.n	80062aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	0cdb      	lsrs	r3, r3, #19
 8006228:	04db      	lsls	r3, r3, #19
 800622a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800624a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800624e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d903      	bls.n	8006264 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	6939      	ldr	r1, [r7, #16]
 800629c:	0148      	lsls	r0, r1, #5
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	4401      	add	r1, r0
 80062a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d11e      	bne.n	80062ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e097      	b.n	800641e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800630c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8083 	beq.w	800641e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2101      	movs	r1, #1
 800632a:	fa01 f303 	lsl.w	r3, r1, r3
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006334:	4313      	orrs	r3, r2
 8006336:	634b      	str	r3, [r1, #52]	; 0x34
 8006338:	e071      	b.n	800641e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	0cdb      	lsrs	r3, r3, #19
 8006356:	04db      	lsls	r3, r3, #19
 8006358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800637c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063cc:	6939      	ldr	r1, [r7, #16]
 80063ce:	0148      	lsls	r0, r1, #5
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	4401      	add	r1, r0
 80063d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10d      	bne.n	80063fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6919      	ldr	r1, [r3, #16]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	460a      	mov	r2, r1
 80063fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006418:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800641c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d14a      	bne.n	80064e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006462:	f040 8086 	bne.w	8006572 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006488:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d902      	bls.n	80064c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
          break;
 80064c2:	e056      	b.n	8006572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064dc:	d0e7      	beq.n	80064ae <USB_EPStopXfer+0x82>
 80064de:	e048      	b.n	8006572 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f8:	d13b      	bne.n	8006572 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800651c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	7812      	ldrb	r2, [r2, #0]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006540:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f242 7210 	movw	r2, #10000	; 0x2710
 800654e:	4293      	cmp	r3, r2
 8006550:	d902      	bls.n	8006558 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
          break;
 8006556:	e00c      	b.n	8006572 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800656c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006570:	d0e7      	beq.n	8006542 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	460b      	mov	r3, r1
 8006590:	71fb      	strb	r3, [r7, #7]
 8006592:	4613      	mov	r3, r2
 8006594:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800659e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d123      	bne.n	80065ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065a6:	88bb      	ldrh	r3, [r7, #4]
 80065a8:	3303      	adds	r3, #3
 80065aa:	089b      	lsrs	r3, r3, #2
 80065ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e018      	b.n	80065e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	031a      	lsls	r2, r3, #12
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	461a      	mov	r2, r3
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	3301      	adds	r3, #1
 80065d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3301      	adds	r3, #1
 80065de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d3e2      	bcc.n	80065b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3724      	adds	r7, #36	; 0x24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b08b      	sub	sp, #44	; 0x2c
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	089b      	lsrs	r3, r3, #2
 8006616:	b29b      	uxth	r3, r3
 8006618:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e014      	b.n	8006652 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	601a      	str	r2, [r3, #0]
    pDest++;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	3301      	adds	r3, #1
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	3301      	adds	r3, #1
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	3301      	adds	r3, #1
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	3301      	adds	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	3301      	adds	r3, #1
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3e6      	bcc.n	8006628 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800665a:	8bfb      	ldrh	r3, [r7, #30]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01e      	beq.n	800669e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	461a      	mov	r2, r3
 800666c:	f107 0310 	add.w	r3, r7, #16
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	701a      	strb	r2, [r3, #0]
      i++;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	3301      	adds	r3, #1
 800668a:	623b      	str	r3, [r7, #32]
      pDest++;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	3301      	adds	r3, #1
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006692:	8bfb      	ldrh	r3, [r7, #30]
 8006694:	3b01      	subs	r3, #1
 8006696:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006698:	8bfb      	ldrh	r3, [r7, #30]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ea      	bne.n	8006674 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	372c      	adds	r7, #44	; 0x2c
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d12c      	bne.n	8006722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	db12      	blt.n	8006700 <USB_EPSetStall+0x54>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00f      	beq.n	8006700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e02b      	b.n	800677a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db12      	blt.n	800675a <USB_EPSetStall+0xae>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00f      	beq.n	800675a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d128      	bne.n	80067f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	791b      	ldrb	r3, [r3, #4]
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d003      	beq.n	80067d4 <USB_EPClearStall+0x4c>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	791b      	ldrb	r3, [r3, #4]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d138      	bne.n	8006846 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e027      	b.n	8006846 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006814:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	2b03      	cmp	r3, #3
 800681c:	d003      	beq.n	8006826 <USB_EPClearStall+0x9e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	791b      	ldrb	r3, [r3, #4]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d10f      	bne.n	8006846 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006844:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006888:	68f9      	ldr	r1, [r7, #12]
 800688a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688e:	4313      	orrs	r3, r2
 8006890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f023 0302 	bic.w	r3, r3, #2
 80068d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068fc:	f023 0303 	bic.w	r3, r3, #3
 8006900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006910:	f043 0302 	orr.w	r3, r3, #2
 8006914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4013      	ands	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	4013      	ands	r3, r2
 800696c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	0c1b      	lsrs	r3, r3, #16
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	4013      	ands	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	b29b      	uxth	r3, r3
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069e0:	68bb      	ldr	r3, [r7, #8]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b087      	sub	sp, #28
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	01db      	lsls	r3, r3, #7
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0301 	and.w	r3, r3, #1
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a84:	f023 0307 	bic.w	r3, r3, #7
 8006a88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	333c      	adds	r3, #60	; 0x3c
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <USB_EP0_OutStart+0xb8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d90a      	bls.n	8006ae6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae0:	d101      	bne.n	8006ae6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e037      	b.n	8006b56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aec:	461a      	mov	r2, r3
 8006aee:	2300      	movs	r3, #0
 8006af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b14:	f043 0318 	orr.w	r3, r3, #24
 8006b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10f      	bne.n	8006b54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	4f54300a 	.word	0x4f54300a

08006b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <USB_CoreReset+0x64>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e01b      	b.n	8006bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	daf2      	bge.n	8006b74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f043 0201 	orr.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <USB_CoreReset+0x64>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d0f0      	beq.n	8006b9e <USB_CoreReset+0x36>

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	00030d40 	.word	0x00030d40

08006bd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bdc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006be0:	f002 fc1e 	bl	8009420 <USBD_static_malloc>
 8006be4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32b0      	adds	r2, #176	; 0xb0
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e0d4      	b.n	8006daa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c00:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f002 fc78 	bl	80094fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	32b0      	adds	r2, #176	; 0xb0
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32b0      	adds	r2, #176	; 0xb0
 8006c26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7c1b      	ldrb	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d138      	bne.n	8006caa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c38:	4b5e      	ldr	r3, [pc, #376]	; (8006db4 <USBD_CDC_Init+0x1e4>)
 8006c3a:	7819      	ldrb	r1, [r3, #0]
 8006c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c40:	2202      	movs	r2, #2
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f002 fac9 	bl	80091da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c48:	4b5a      	ldr	r3, [pc, #360]	; (8006db4 <USBD_CDC_Init+0x1e4>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	2201      	movs	r2, #1
 8006c60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c62:	4b55      	ldr	r3, [pc, #340]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006c64:	7819      	ldrb	r1, [r3, #0]
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 fab4 	bl	80091da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c72:	4b51      	ldr	r3, [pc, #324]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	; (8006dbc <USBD_CDC_Init+0x1ec>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	3326      	adds	r3, #38	; 0x26
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e035      	b.n	8006d16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006caa:	4b42      	ldr	r3, [pc, #264]	; (8006db4 <USBD_CDC_Init+0x1e4>)
 8006cac:	7819      	ldrb	r1, [r3, #0]
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 fa91 	bl	80091da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cb8:	4b3e      	ldr	r3, [pc, #248]	; (8006db4 <USBD_CDC_Init+0x1e4>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	2201      	movs	r2, #1
 8006cd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006cd4:	7819      	ldrb	r1, [r3, #0]
 8006cd6:	2340      	movs	r3, #64	; 0x40
 8006cd8:	2202      	movs	r2, #2
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fa7d 	bl	80091da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ce0:	4b35      	ldr	r3, [pc, #212]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cfc:	4b2f      	ldr	r3, [pc, #188]	; (8006dbc <USBD_CDC_Init+0x1ec>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 020f 	and.w	r2, r3, #15
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	3326      	adds	r3, #38	; 0x26
 8006d12:	2210      	movs	r2, #16
 8006d14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d16:	4b29      	ldr	r3, [pc, #164]	; (8006dbc <USBD_CDC_Init+0x1ec>)
 8006d18:	7819      	ldrb	r1, [r3, #0]
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 fa5b 	bl	80091da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d24:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <USBD_CDC_Init+0x1ec>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	33b0      	adds	r3, #176	; 0xb0
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d74:	2302      	movs	r3, #2
 8006d76:	e018      	b.n	8006daa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7c1b      	ldrb	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006d82:	7819      	ldrb	r1, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 fb12 	bl	80093b8 <USBD_LL_PrepareReceive>
 8006d94:	e008      	b.n	8006da8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <USBD_CDC_Init+0x1e8>)
 8006d98:	7819      	ldrb	r1, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f002 fb08 	bl	80093b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000093 	.word	0x20000093
 8006db8:	20000094 	.word	0x20000094
 8006dbc:	20000095 	.word	0x20000095

08006dc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <USBD_CDC_DeInit+0xf8>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f002 fa27 	bl	8009226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dd8:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <USBD_CDC_DeInit+0xf8>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3324      	adds	r3, #36	; 0x24
 8006dee:	2200      	movs	r2, #0
 8006df0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006df2:	4b32      	ldr	r3, [pc, #200]	; (8006ebc <USBD_CDC_DeInit+0xfc>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 fa14 	bl	8009226 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dfe:	4b2f      	ldr	r3, [pc, #188]	; (8006ebc <USBD_CDC_DeInit+0xfc>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e16:	2200      	movs	r2, #0
 8006e18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e1a:	4b29      	ldr	r3, [pc, #164]	; (8006ec0 <USBD_CDC_DeInit+0x100>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fa00 	bl	8009226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e26:	4b26      	ldr	r3, [pc, #152]	; (8006ec0 <USBD_CDC_DeInit+0x100>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	3324      	adds	r3, #36	; 0x24
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e40:	4b1f      	ldr	r3, [pc, #124]	; (8006ec0 <USBD_CDC_DeInit+0x100>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 020f 	and.w	r2, r3, #15
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	3326      	adds	r3, #38	; 0x26
 8006e56:	2200      	movs	r2, #0
 8006e58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32b0      	adds	r2, #176	; 0xb0
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01f      	beq.n	8006eac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	33b0      	adds	r3, #176	; 0xb0
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	; 0xb0
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f002 fad4 	bl	800943c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	32b0      	adds	r2, #176	; 0xb0
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000093 	.word	0x20000093
 8006ebc:	20000094 	.word	0x20000094
 8006ec0:	20000095 	.word	0x20000095

08006ec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	32b0      	adds	r2, #176	; 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e0bf      	b.n	8007074 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d050      	beq.n	8006fa2 <USBD_CDC_Setup+0xde>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	f040 80af 	bne.w	8007064 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d03a      	beq.n	8006f84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da1b      	bge.n	8006f50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	33b0      	adds	r3, #176	; 0xb0
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	88d2      	ldrh	r2, [r2, #6]
 8006f34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	88db      	ldrh	r3, [r3, #6]
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	bf28      	it	cs
 8006f3e:	2307      	movcs	r3, #7
 8006f40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	89fa      	ldrh	r2, [r7, #14]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fd43 	bl	80089d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f4e:	e090      	b.n	8007072 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785a      	ldrb	r2, [r3, #1]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	88db      	ldrh	r3, [r3, #6]
 8006f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8006f60:	d803      	bhi.n	8006f6a <USBD_CDC_Setup+0xa6>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88db      	ldrh	r3, [r3, #6]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	e000      	b.n	8006f6c <USBD_CDC_Setup+0xa8>
 8006f6a:	2240      	movs	r2, #64	; 0x40
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f72:	6939      	ldr	r1, [r7, #16]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fd55 	bl	8008a2c <USBD_CtlPrepareRx>
      break;
 8006f82:	e076      	b.n	8007072 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	33b0      	adds	r3, #176	; 0xb0
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	7850      	ldrb	r0, [r2, #1]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	4798      	blx	r3
      break;
 8006fa0:	e067      	b.n	8007072 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b0b      	cmp	r3, #11
 8006fa8:	d851      	bhi.n	800704e <USBD_CDC_Setup+0x18a>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBD_CDC_Setup+0xec>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fe1 	.word	0x08006fe1
 8006fb4:	0800705d 	.word	0x0800705d
 8006fb8:	0800704f 	.word	0x0800704f
 8006fbc:	0800704f 	.word	0x0800704f
 8006fc0:	0800704f 	.word	0x0800704f
 8006fc4:	0800704f 	.word	0x0800704f
 8006fc8:	0800704f 	.word	0x0800704f
 8006fcc:	0800704f 	.word	0x0800704f
 8006fd0:	0800704f 	.word	0x0800704f
 8006fd4:	0800704f 	.word	0x0800704f
 8006fd8:	0800700b 	.word	0x0800700b
 8006fdc:	08007035 	.word	0x08007035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d107      	bne.n	8006ffc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fec:	f107 030a 	add.w	r3, r7, #10
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fced 	bl	80089d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ffa:	e032      	b.n	8007062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fc77 	bl	80088f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	75fb      	strb	r3, [r7, #23]
          break;
 8007008:	e02b      	b.n	8007062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b03      	cmp	r3, #3
 8007014:	d107      	bne.n	8007026 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007016:	f107 030d 	add.w	r3, r7, #13
 800701a:	2201      	movs	r2, #1
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fcd8 	bl	80089d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007024:	e01d      	b.n	8007062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fc62 	bl	80088f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800702e:	2303      	movs	r3, #3
 8007030:	75fb      	strb	r3, [r7, #23]
          break;
 8007032:	e016      	b.n	8007062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d00f      	beq.n	8007060 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 fc55 	bl	80088f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800704c:	e008      	b.n	8007060 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fc4e 	bl	80088f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	75fb      	strb	r3, [r7, #23]
          break;
 800705a:	e002      	b.n	8007062 <USBD_CDC_Setup+0x19e>
          break;
 800705c:	bf00      	nop
 800705e:	e008      	b.n	8007072 <USBD_CDC_Setup+0x1ae>
          break;
 8007060:	bf00      	nop
      }
      break;
 8007062:	e006      	b.n	8007072 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 fc43 	bl	80088f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	75fb      	strb	r3, [r7, #23]
      break;
 8007070:	bf00      	nop
  }

  return (uint8_t)ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800708e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32b0      	adds	r2, #176	; 0xb0
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e065      	b.n	8007172 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	32b0      	adds	r2, #176	; 0xb0
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	3318      	adds	r3, #24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02f      	beq.n	8007130 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	f003 020f 	and.w	r2, r3, #15
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3318      	adds	r3, #24
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	f003 010f 	and.w	r1, r3, #15
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	460b      	mov	r3, r1
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	440b      	add	r3, r1
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4403      	add	r3, r0
 80070f8:	3348      	adds	r3, #72	; 0x48
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007106:	2b00      	cmp	r3, #0
 8007108:	d112      	bne.n	8007130 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	3318      	adds	r3, #24
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007122:	78f9      	ldrb	r1, [r7, #3]
 8007124:	2300      	movs	r3, #0
 8007126:	2200      	movs	r2, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f002 f924 	bl	8009376 <USBD_LL_Transmit>
 800712e:	e01f      	b.n	8007170 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	33b0      	adds	r3, #176	; 0xb0
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d010      	beq.n	8007170 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	33b0      	adds	r3, #176	; 0xb0
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	32b0      	adds	r2, #176	; 0xb0
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	32b0      	adds	r2, #176	; 0xb0
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e01a      	b.n	80071e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f002 f922 	bl	80093fa <USBD_LL_GetRxDataSize>
 80071b6:	4602      	mov	r2, r0
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	33b0      	adds	r3, #176	; 0xb0
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071dc:	4611      	mov	r1, r2
 80071de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	32b0      	adds	r2, #176	; 0xb0
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	e025      	b.n	8007258 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	33b0      	adds	r3, #176	; 0xb0
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <USBD_CDC_EP0_RxReady+0x6c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007226:	2bff      	cmp	r3, #255	; 0xff
 8007228:	d015      	beq.n	8007256 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	33b0      	adds	r3, #176	; 0xb0
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007242:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800724a:	b292      	uxth	r2, r2
 800724c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007268:	2182      	movs	r1, #130	; 0x82
 800726a:	4818      	ldr	r0, [pc, #96]	; (80072cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800726c:	f000 fd09 	bl	8007c82 <USBD_GetEpDesc>
 8007270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007272:	2101      	movs	r1, #1
 8007274:	4815      	ldr	r0, [pc, #84]	; (80072cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007276:	f000 fd04 	bl	8007c82 <USBD_GetEpDesc>
 800727a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800727c:	2181      	movs	r1, #129	; 0x81
 800727e:	4813      	ldr	r0, [pc, #76]	; (80072cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007280:	f000 fcff 	bl	8007c82 <USBD_GetEpDesc>
 8007284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2210      	movs	r2, #16
 8007290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2200      	movs	r2, #0
 800729c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a0:	711a      	strb	r2, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b4:	711a      	strb	r2, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2243      	movs	r2, #67	; 0x43
 80072be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000050 	.word	0x20000050

080072d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072d8:	2182      	movs	r1, #130	; 0x82
 80072da:	4818      	ldr	r0, [pc, #96]	; (800733c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072dc:	f000 fcd1 	bl	8007c82 <USBD_GetEpDesc>
 80072e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072e2:	2101      	movs	r1, #1
 80072e4:	4815      	ldr	r0, [pc, #84]	; (800733c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072e6:	f000 fccc 	bl	8007c82 <USBD_GetEpDesc>
 80072ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072ec:	2181      	movs	r1, #129	; 0x81
 80072ee:	4813      	ldr	r0, [pc, #76]	; (800733c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072f0:	f000 fcc7 	bl	8007c82 <USBD_GetEpDesc>
 80072f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2210      	movs	r2, #16
 8007300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2200      	movs	r2, #0
 800730c:	711a      	strb	r2, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f042 0202 	orr.w	r2, r2, #2
 8007314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	711a      	strb	r2, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f042 0202 	orr.w	r2, r2, #2
 8007328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2243      	movs	r2, #67	; 0x43
 800732e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000050 	.word	0x20000050

08007340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007348:	2182      	movs	r1, #130	; 0x82
 800734a:	4818      	ldr	r0, [pc, #96]	; (80073ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800734c:	f000 fc99 	bl	8007c82 <USBD_GetEpDesc>
 8007350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007352:	2101      	movs	r1, #1
 8007354:	4815      	ldr	r0, [pc, #84]	; (80073ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007356:	f000 fc94 	bl	8007c82 <USBD_GetEpDesc>
 800735a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800735c:	2181      	movs	r1, #129	; 0x81
 800735e:	4813      	ldr	r0, [pc, #76]	; (80073ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007360:	f000 fc8f 	bl	8007c82 <USBD_GetEpDesc>
 8007364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2210      	movs	r2, #16
 8007370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d006      	beq.n	8007386 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2200      	movs	r2, #0
 800737c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007380:	711a      	strb	r2, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2243      	movs	r2, #67	; 0x43
 800739e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000050 	.word	0x20000050

080073b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	220a      	movs	r2, #10
 80073bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073be:	4b03      	ldr	r3, [pc, #12]	; (80073cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	2000000c 	.word	0x2000000c

080073d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e009      	b.n	80073f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	33b0      	adds	r3, #176	; 0xb0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	32b0      	adds	r2, #176	; 0xb0
 800741a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007426:	2303      	movs	r3, #3
 8007428:	e008      	b.n	800743c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	32b0      	adds	r2, #176	; 0xb0
 800745c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007468:	2303      	movs	r3, #3
 800746a:	e004      	b.n	8007476 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	; 0xb0
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	32b0      	adds	r2, #176	; 0xb0
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e018      	b.n	80074e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7c1b      	ldrb	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <USBD_CDC_ReceivePacket+0x68>)
 80074bc:	7819      	ldrb	r1, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 ff75 	bl	80093b8 <USBD_LL_PrepareReceive>
 80074ce:	e008      	b.n	80074e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074d0:	4b06      	ldr	r3, [pc, #24]	; (80074ec <USBD_CDC_ReceivePacket+0x68>)
 80074d2:	7819      	ldrb	r1, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074da:	2340      	movs	r3, #64	; 0x40
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 ff6b 	bl	80093b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20000094 	.word	0x20000094

080074f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e01f      	b.n	8007548 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	79fa      	ldrb	r2, [r7, #7]
 800753a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f001 fde5 	bl	800910c <USBD_LL_Init>
 8007542:	4603      	mov	r3, r0
 8007544:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	e025      	b.n	80075b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	; 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00f      	beq.n	80075a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	f107 020e 	add.w	r2, r7, #14
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	4602      	mov	r2, r0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 fded 	bl	80091a4 <USBD_LL_Start>
 80075ca:	4603      	mov	r3, r0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	4611      	mov	r1, r2
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	4611      	mov	r1, r2
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f001 f908 	bl	800887e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	2b02      	cmp	r3, #2
 8007690:	d01a      	beq.n	80076c8 <USBD_LL_SetupStage+0x72>
 8007692:	2b02      	cmp	r3, #2
 8007694:	d822      	bhi.n	80076dc <USBD_LL_SetupStage+0x86>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <USBD_LL_SetupStage+0x4a>
 800769a:	2b01      	cmp	r3, #1
 800769c:	d00a      	beq.n	80076b4 <USBD_LL_SetupStage+0x5e>
 800769e:	e01d      	b.n	80076dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb5f 	bl	8007d6c <USBD_StdDevReq>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
      break;
 80076b2:	e020      	b.n	80076f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fbc7 	bl	8007e50 <USBD_StdItfReq>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
      break;
 80076c6:	e016      	b.n	80076f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc29 	bl	8007f28 <USBD_StdEPReq>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e00c      	b.n	80076f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fdba 	bl	8009264 <USBD_LL_StallEP>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
      break;
 80076f4:	bf00      	nop
  }

  return ret;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	460b      	mov	r3, r1
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d16e      	bne.n	80077f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800771e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007726:	2b03      	cmp	r3, #3
 8007728:	f040 8098 	bne.w	800785c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	429a      	cmp	r2, r3
 8007736:	d913      	bls.n	8007760 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	1ad2      	subs	r2, r2, r3
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4293      	cmp	r3, r2
 8007750:	bf28      	it	cs
 8007752:	4613      	movcs	r3, r2
 8007754:	461a      	mov	r2, r3
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 f984 	bl	8008a66 <USBD_CtlContinueRx>
 800775e:	e07d      	b.n	800785c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	2b02      	cmp	r3, #2
 800776c:	d014      	beq.n	8007798 <USBD_LL_DataOutStage+0x98>
 800776e:	2b02      	cmp	r3, #2
 8007770:	d81d      	bhi.n	80077ae <USBD_LL_DataOutStage+0xae>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <USBD_LL_DataOutStage+0x7c>
 8007776:	2b01      	cmp	r3, #1
 8007778:	d003      	beq.n	8007782 <USBD_LL_DataOutStage+0x82>
 800777a:	e018      	b.n	80077ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	75bb      	strb	r3, [r7, #22]
            break;
 8007780:	e018      	b.n	80077b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fa5e 	bl	8007c4e <USBD_CoreFindIF>
 8007792:	4603      	mov	r3, r0
 8007794:	75bb      	strb	r3, [r7, #22]
            break;
 8007796:	e00d      	b.n	80077b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fa60 	bl	8007c68 <USBD_CoreFindEP>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75bb      	strb	r3, [r7, #22]
            break;
 80077ac:	e002      	b.n	80077b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75bb      	strb	r3, [r7, #22]
            break;
 80077b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077b4:	7dbb      	ldrb	r3, [r7, #22]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d119      	bne.n	80077ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d113      	bne.n	80077ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077c6:	7dba      	ldrb	r2, [r7, #22]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	32ae      	adds	r2, #174	; 0xae
 80077cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077d6:	7dba      	ldrb	r2, [r7, #22]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077de:	7dba      	ldrb	r2, [r7, #22]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	32ae      	adds	r2, #174	; 0xae
 80077e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 f94a 	bl	8008a88 <USBD_CtlSendStatus>
 80077f4:	e032      	b.n	800785c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fa31 	bl	8007c68 <USBD_CoreFindEP>
 8007806:	4603      	mov	r3, r0
 8007808:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800780a:	7dbb      	ldrb	r3, [r7, #22]
 800780c:	2bff      	cmp	r3, #255	; 0xff
 800780e:	d025      	beq.n	800785c <USBD_LL_DataOutStage+0x15c>
 8007810:	7dbb      	ldrb	r3, [r7, #22]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d122      	bne.n	800785c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d117      	bne.n	8007852 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007822:	7dba      	ldrb	r2, [r7, #22]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	32ae      	adds	r2, #174	; 0xae
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00f      	beq.n	8007852 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007832:	7dba      	ldrb	r2, [r7, #22]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800783a:	7dba      	ldrb	r2, [r7, #22]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	32ae      	adds	r2, #174	; 0xae
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	7afa      	ldrb	r2, [r7, #11]
 8007848:	4611      	mov	r1, r2
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	4798      	blx	r3
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	e000      	b.n	800785e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	460b      	mov	r3, r1
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d16f      	bne.n	800795a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3314      	adds	r3, #20
 800787e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007886:	2b02      	cmp	r3, #2
 8007888:	d15a      	bne.n	8007940 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	429a      	cmp	r2, r3
 8007894:	d914      	bls.n	80078c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f001 f8ac 	bl	8008a0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 fd7d 	bl	80093b8 <USBD_LL_PrepareReceive>
 80078be:	e03f      	b.n	8007940 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d11c      	bne.n	8007906 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d316      	bcc.n	8007906 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d20f      	bcs.n	8007906 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f001 f88d 	bl	8008a0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f8:	2300      	movs	r3, #0
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 fd5a 	bl	80093b8 <USBD_LL_PrepareReceive>
 8007904:	e01c      	b.n	8007940 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d10f      	bne.n	8007932 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f001 fc95 	bl	8009264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f001 f8b7 	bl	8008aae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d03a      	beq.n	80079c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fe42 	bl	80075d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007958:	e032      	b.n	80079c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007960:	b2db      	uxtb	r3, r3
 8007962:	4619      	mov	r1, r3
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f97f 	bl	8007c68 <USBD_CoreFindEP>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2bff      	cmp	r3, #255	; 0xff
 8007972:	d025      	beq.n	80079c0 <USBD_LL_DataInStage+0x15a>
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d122      	bne.n	80079c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d11c      	bne.n	80079c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007986:	7dfa      	ldrb	r2, [r7, #23]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	32ae      	adds	r2, #174	; 0xae
 800798c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d014      	beq.n	80079c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007996:	7dfa      	ldrb	r2, [r7, #23]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800799e:	7dfa      	ldrb	r2, [r7, #23]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	32ae      	adds	r2, #174	; 0xae
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	7afa      	ldrb	r2, [r7, #11]
 80079ac:	4611      	mov	r1, r2
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079b6:	7dbb      	ldrb	r3, [r7, #22]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079bc:	7dbb      	ldrb	r3, [r7, #22]
 80079be:	e000      	b.n	80079c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d014      	beq.n	8007a30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00e      	beq.n	8007a30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6852      	ldr	r2, [r2, #4]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	4611      	mov	r1, r2
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	2200      	movs	r2, #0
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fbcf 	bl	80091da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2240      	movs	r2, #64	; 0x40
 8007a48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2180      	movs	r1, #128	; 0x80
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fbc1 	bl	80091da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2240      	movs	r2, #64	; 0x40
 8007a62:	621a      	str	r2, [r3, #32]

  return ret;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d106      	bne.n	8007adc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d110      	bne.n	8007b20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	32ae      	adds	r2, #174	; 0xae
 8007b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e01c      	b.n	8007b86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d115      	bne.n	8007b84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	; 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	; 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	32ae      	adds	r2, #174	; 0xae
 8007ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e01c      	b.n	8007bea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d115      	bne.n	8007be8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	; 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	; 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	4611      	mov	r1, r2
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6852      	ldr	r2, [r2, #4]
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	4611      	mov	r1, r2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d920      	bls.n	8007cec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cb2:	e013      	b.n	8007cdc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cb4:	f107 030a 	add.w	r3, r7, #10
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f000 f81b 	bl	8007cf6 <USBD_GetNextDesc>
 8007cc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d108      	bne.n	8007cdc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	789b      	ldrb	r3, [r3, #2]
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d008      	beq.n	8007cea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	885b      	ldrh	r3, [r3, #2]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	897b      	ldrh	r3, [r7, #10]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d8e5      	bhi.n	8007cb4 <USBD_GetEpDesc+0x32>
 8007ce8:	e000      	b.n	8007cec <USBD_GetEpDesc+0x6a>
          break;
 8007cea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cec:	693b      	ldr	r3, [r7, #16]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	881a      	ldrh	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4413      	add	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	3301      	adds	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d4e:	8a3b      	ldrh	r3, [r7, #16]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b21a      	sxth	r2, r3
 8007d54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdDevReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d857      	bhi.n	8007e3a <USBD_StdDevReq+0xce>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00f      	beq.n	8007dae <USBD_StdDevReq+0x42>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d153      	bne.n	8007e3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32ae      	adds	r2, #174	; 0xae
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dac:	e04a      	b.n	8007e44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d83b      	bhi.n	8007e2e <USBD_StdDevReq+0xc2>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBD_StdDevReq+0x50>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007e25 	.word	0x08007e25
 8007dc4:	08007e2f 	.word	0x08007e2f
 8007dc8:	08007e1b 	.word	0x08007e1b
 8007dcc:	08007e2f 	.word	0x08007e2f
 8007dd0:	08007def 	.word	0x08007def
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007e2f 	.word	0x08007e2f
 8007ddc:	08007e07 	.word	0x08007e07
 8007de0:	08007df9 	.word	0x08007df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa3c 	bl	8008264 <USBD_GetDescriptor>
          break;
 8007dec:	e024      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fba1 	bl	8008538 <USBD_SetAddress>
          break;
 8007df6:	e01f      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fbe0 	bl	80085c0 <USBD_SetConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
          break;
 8007e04:	e018      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc83 	bl	8008714 <USBD_GetConfig>
          break;
 8007e0e:	e013      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fcb4 	bl	8008780 <USBD_GetStatus>
          break;
 8007e18:	e00e      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fce3 	bl	80087e8 <USBD_SetFeature>
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fd07 	bl	800883a <USBD_ClrFeature>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fd5e 	bl	80088f2 <USBD_CtlError>
          break;
 8007e36:	bf00      	nop
      }
      break;
 8007e38:	e004      	b.n	8007e44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fd58 	bl	80088f2 <USBD_CtlError>
      break;
 8007e42:	bf00      	nop
  }

  return ret;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d005      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d852      	bhi.n	8007f14 <USBD_StdItfReq+0xc4>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <USBD_StdItfReq+0x26>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d14e      	bne.n	8007f14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d840      	bhi.n	8007f06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	889b      	ldrh	r3, [r3, #4]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d836      	bhi.n	8007efc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fed9 	bl	8007c4e <USBD_CoreFindIF>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	2bff      	cmp	r3, #255	; 0xff
 8007ea4:	d01d      	beq.n	8007ee2 <USBD_StdItfReq+0x92>
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d11a      	bne.n	8007ee2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007eac:	7bba      	ldrb	r2, [r7, #14]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32ae      	adds	r2, #174	; 0xae
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00f      	beq.n	8007edc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ebc:	7bba      	ldrb	r2, [r7, #14]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ec4:	7bba      	ldrb	r2, [r7, #14]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32ae      	adds	r2, #174	; 0xae
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eda:	e004      	b.n	8007ee6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ee0:	e001      	b.n	8007ee6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d110      	bne.n	8007f10 <USBD_StdItfReq+0xc0>
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10d      	bne.n	8007f10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fdc7 	bl	8008a88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007efa:	e009      	b.n	8007f10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fcf7 	bl	80088f2 <USBD_CtlError>
          break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcf2 	bl	80088f2 <USBD_CtlError>
          break;
 8007f0e:	e000      	b.n	8007f12 <USBD_StdItfReq+0xc2>
          break;
 8007f10:	bf00      	nop
      }
      break;
 8007f12:	e004      	b.n	8007f1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fceb 	bl	80088f2 <USBD_CtlError>
      break;
 8007f1c:	bf00      	nop
  }

  return ret;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d007      	beq.n	8007f58 <USBD_StdEPReq+0x30>
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	f200 817f 	bhi.w	800824c <USBD_StdEPReq+0x324>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d02a      	beq.n	8007fa8 <USBD_StdEPReq+0x80>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	f040 817a 	bne.w	800824c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fe83 	bl	8007c68 <USBD_CoreFindEP>
 8007f62:	4603      	mov	r3, r0
 8007f64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	2bff      	cmp	r3, #255	; 0xff
 8007f6a:	f000 8174 	beq.w	8008256 <USBD_StdEPReq+0x32e>
 8007f6e:	7b7b      	ldrb	r3, [r7, #13]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8170 	bne.w	8008256 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f76:	7b7a      	ldrb	r2, [r7, #13]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f7e:	7b7a      	ldrb	r2, [r7, #13]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32ae      	adds	r2, #174	; 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8163 	beq.w	8008256 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f90:	7b7a      	ldrb	r2, [r7, #13]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32ae      	adds	r2, #174	; 0xae
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fa6:	e156      	b.n	8008256 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d008      	beq.n	8007fc2 <USBD_StdEPReq+0x9a>
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	f300 8145 	bgt.w	8008240 <USBD_StdEPReq+0x318>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 809b 	beq.w	80080f2 <USBD_StdEPReq+0x1ca>
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d03c      	beq.n	800803a <USBD_StdEPReq+0x112>
 8007fc0:	e13e      	b.n	8008240 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d002      	beq.n	8007fd4 <USBD_StdEPReq+0xac>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d016      	beq.n	8008000 <USBD_StdEPReq+0xd8>
 8007fd2:	e02c      	b.n	800802e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00d      	beq.n	8007ff6 <USBD_StdEPReq+0xce>
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	d00a      	beq.n	8007ff6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f93d 	bl	8009264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fea:	2180      	movs	r1, #128	; 0x80
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 f939 	bl	8009264 <USBD_LL_StallEP>
 8007ff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ff4:	e020      	b.n	8008038 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc7a 	bl	80088f2 <USBD_CtlError>
              break;
 8007ffe:	e01b      	b.n	8008038 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	885b      	ldrh	r3, [r3, #2]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10e      	bne.n	8008026 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <USBD_StdEPReq+0xfe>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d008      	beq.n	8008026 <USBD_StdEPReq+0xfe>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d104      	bne.n	8008026 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f91f 	bl	8009264 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fd2e 	bl	8008a88 <USBD_CtlSendStatus>

              break;
 800802c:	e004      	b.n	8008038 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc5e 	bl	80088f2 <USBD_CtlError>
              break;
 8008036:	bf00      	nop
          }
          break;
 8008038:	e107      	b.n	800824a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d002      	beq.n	800804c <USBD_StdEPReq+0x124>
 8008046:	2b03      	cmp	r3, #3
 8008048:	d016      	beq.n	8008078 <USBD_StdEPReq+0x150>
 800804a:	e04b      	b.n	80080e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <USBD_StdEPReq+0x146>
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b80      	cmp	r3, #128	; 0x80
 8008056:	d00a      	beq.n	800806e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f901 	bl	8009264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008062:	2180      	movs	r1, #128	; 0x80
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f8fd 	bl	8009264 <USBD_LL_StallEP>
 800806a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800806c:	e040      	b.n	80080f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc3e 	bl	80088f2 <USBD_CtlError>
              break;
 8008076:	e03b      	b.n	80080f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d136      	bne.n	80080ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f907 	bl	80092a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fcf7 	bl	8008a88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fde2 	bl	8007c68 <USBD_CoreFindEP>
 80080a4:	4603      	mov	r3, r0
 80080a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a8:	7b7b      	ldrb	r3, [r7, #13]
 80080aa:	2bff      	cmp	r3, #255	; 0xff
 80080ac:	d01f      	beq.n	80080ee <USBD_StdEPReq+0x1c6>
 80080ae:	7b7b      	ldrb	r3, [r7, #13]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d11c      	bne.n	80080ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080b4:	7b7a      	ldrb	r2, [r7, #13]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080bc:	7b7a      	ldrb	r2, [r7, #13]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	; 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d010      	beq.n	80080ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080cc:	7b7a      	ldrb	r2, [r7, #13]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080e2:	e004      	b.n	80080ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc03 	bl	80088f2 <USBD_CtlError>
              break;
 80080ec:	e000      	b.n	80080f0 <USBD_StdEPReq+0x1c8>
              break;
 80080ee:	bf00      	nop
          }
          break;
 80080f0:	e0ab      	b.n	800824a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d002      	beq.n	8008104 <USBD_StdEPReq+0x1dc>
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d032      	beq.n	8008168 <USBD_StdEPReq+0x240>
 8008102:	e097      	b.n	8008234 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d007      	beq.n	800811a <USBD_StdEPReq+0x1f2>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	d004      	beq.n	800811a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbed 	bl	80088f2 <USBD_CtlError>
                break;
 8008118:	e091      	b.n	800823e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800811a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	da0b      	bge.n	800813a <USBD_StdEPReq+0x212>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	3310      	adds	r3, #16
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	3304      	adds	r3, #4
 8008138:	e00b      	b.n	8008152 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2202      	movs	r2, #2
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fc37 	bl	80089d4 <USBD_CtlSendData>
              break;
 8008166:	e06a      	b.n	800823e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da11      	bge.n	8008194 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	f003 020f 	and.w	r2, r3, #15
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d117      	bne.n	80081ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fbb0 	bl	80088f2 <USBD_CtlError>
                  break;
 8008192:	e054      	b.n	800823e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	f003 020f 	and.w	r2, r3, #15
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb9d 	bl	80088f2 <USBD_CtlError>
                  break;
 80081b8:	e041      	b.n	800823e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da0b      	bge.n	80081da <USBD_StdEPReq+0x2b2>
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	3310      	adds	r3, #16
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	3304      	adds	r3, #4
 80081d8:	e00b      	b.n	80081f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <USBD_StdEPReq+0x2d8>
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b80      	cmp	r3, #128	; 0x80
 80081fe:	d103      	bne.n	8008208 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e00e      	b.n	8008226 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f867 	bl	80092e0 <USBD_LL_IsStallEP>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e002      	b.n	8008226 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2202      	movs	r2, #2
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fbd1 	bl	80089d4 <USBD_CtlSendData>
              break;
 8008232:	e004      	b.n	800823e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fb5b 	bl	80088f2 <USBD_CtlError>
              break;
 800823c:	bf00      	nop
          }
          break;
 800823e:	e004      	b.n	800824a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fb55 	bl	80088f2 <USBD_CtlError>
          break;
 8008248:	bf00      	nop
      }
      break;
 800824a:	e005      	b.n	8008258 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fb4f 	bl	80088f2 <USBD_CtlError>
      break;
 8008254:	e000      	b.n	8008258 <USBD_StdEPReq+0x330>
      break;
 8008256:	bf00      	nop
  }

  return ret;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	2b06      	cmp	r3, #6
 8008286:	f200 8128 	bhi.w	80084da <USBD_GetDescriptor+0x276>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_GetDescriptor+0x2c>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082ad 	.word	0x080082ad
 8008294:	080082c5 	.word	0x080082c5
 8008298:	08008305 	.word	0x08008305
 800829c:	080084db 	.word	0x080084db
 80082a0:	080084db 	.word	0x080084db
 80082a4:	0800847b 	.word	0x0800847b
 80082a8:	080084a7 	.word	0x080084a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7c12      	ldrb	r2, [r2, #16]
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
      break;
 80082c2:	e112      	b.n	80084ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	7c1b      	ldrb	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f107 0208 	add.w	r2, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3301      	adds	r3, #1
 80082e2:	2202      	movs	r2, #2
 80082e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082e6:	e100      	b.n	80084ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	f107 0208 	add.w	r2, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	2202      	movs	r2, #2
 8008300:	701a      	strb	r2, [r3, #0]
      break;
 8008302:	e0f2      	b.n	80084ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b05      	cmp	r3, #5
 800830c:	f200 80ac 	bhi.w	8008468 <USBD_GetDescriptor+0x204>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USBD_GetDescriptor+0xb4>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	08008331 	.word	0x08008331
 800831c:	08008365 	.word	0x08008365
 8008320:	08008399 	.word	0x08008399
 8008324:	080083cd 	.word	0x080083cd
 8008328:	08008401 	.word	0x08008401
 800832c:	08008435 	.word	0x08008435
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	7c12      	ldrb	r2, [r2, #16]
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
 8008350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008352:	e091      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 facb 	bl	80088f2 <USBD_CtlError>
            err++;
 800835c:	7afb      	ldrb	r3, [r7, #11]
 800835e:	3301      	adds	r3, #1
 8008360:	72fb      	strb	r3, [r7, #11]
          break;
 8008362:	e089      	b.n	8008478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7c12      	ldrb	r2, [r2, #16]
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	4610      	mov	r0, r2
 8008382:	4798      	blx	r3
 8008384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008386:	e077      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fab1 	bl	80088f2 <USBD_CtlError>
            err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
          break;
 8008396:	e06f      	b.n	8008478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ba:	e05d      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa97 	bl	80088f2 <USBD_CtlError>
            err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ca:	e055      	b.n	8008478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e043      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa7d 	bl	80088f2 <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e03b      	b.n	8008478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e029      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa63 	bl	80088f2 <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e021      	b.n	8008478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e00f      	b.n	8008478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa49 	bl	80088f2 <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e007      	b.n	8008478 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa41 	bl	80088f2 <USBD_CtlError>
          err++;
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	3301      	adds	r3, #1
 8008474:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008476:	bf00      	nop
      }
      break;
 8008478:	e037      	b.n	80084ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7c1b      	ldrb	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	f107 0208 	add.w	r2, r7, #8
 800848e:	4610      	mov	r0, r2
 8008490:	4798      	blx	r3
 8008492:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008494:	e029      	b.n	80084ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fa2a 	bl	80088f2 <USBD_CtlError>
        err++;
 800849e:	7afb      	ldrb	r3, [r7, #11]
 80084a0:	3301      	adds	r3, #1
 80084a2:	72fb      	strb	r3, [r7, #11]
      break;
 80084a4:	e021      	b.n	80084ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7c1b      	ldrb	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10d      	bne.n	80084ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f107 0208 	add.w	r2, r7, #8
 80084ba:	4610      	mov	r0, r2
 80084bc:	4798      	blx	r3
 80084be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	2207      	movs	r2, #7
 80084c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084c8:	e00f      	b.n	80084ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fa10 	bl	80088f2 <USBD_CtlError>
        err++;
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	3301      	adds	r3, #1
 80084d6:	72fb      	strb	r3, [r7, #11]
      break;
 80084d8:	e007      	b.n	80084ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa08 	bl	80088f2 <USBD_CtlError>
      err++;
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	3301      	adds	r3, #1
 80084e6:	72fb      	strb	r3, [r7, #11]
      break;
 80084e8:	bf00      	nop
  }

  if (err != 0U)
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d11e      	bne.n	800852e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	88db      	ldrh	r3, [r3, #6]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d016      	beq.n	8008526 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084f8:	893b      	ldrh	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	88da      	ldrh	r2, [r3, #6]
 8008502:	893b      	ldrh	r3, [r7, #8]
 8008504:	4293      	cmp	r3, r2
 8008506:	bf28      	it	cs
 8008508:	4613      	movcs	r3, r2
 800850a:	b29b      	uxth	r3, r3
 800850c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800850e:	893b      	ldrh	r3, [r7, #8]
 8008510:	461a      	mov	r2, r3
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fa5d 	bl	80089d4 <USBD_CtlSendData>
 800851a:	e009      	b.n	8008530 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f9e7 	bl	80088f2 <USBD_CtlError>
 8008524:	e004      	b.n	8008530 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 faae 	bl	8008a88 <USBD_CtlSendStatus>
 800852c:	e000      	b.n	8008530 <USBD_GetDescriptor+0x2cc>
    return;
 800852e:	bf00      	nop
  }
}
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop

08008538 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	889b      	ldrh	r3, [r3, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d131      	bne.n	80085ae <USBD_SetAddress+0x76>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d12d      	bne.n	80085ae <USBD_SetAddress+0x76>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	885b      	ldrh	r3, [r3, #2]
 8008556:	2b7f      	cmp	r3, #127	; 0x7f
 8008558:	d829      	bhi.n	80085ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	885b      	ldrh	r3, [r3, #2]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008564:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d104      	bne.n	800857c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9bc 	bl	80088f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	e01d      	b.n	80085b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7bfa      	ldrb	r2, [r7, #15]
 8008580:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fed5 	bl	8009338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa7a 	bl	8008a88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a2:	e009      	b.n	80085b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ac:	e004      	b.n	80085b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f99e 	bl	80088f2 <USBD_CtlError>
  }
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <USBD_SetConfig+0x150>)
 80085d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085d8:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <USBD_SetConfig+0x150>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d905      	bls.n	80085ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f985 	bl	80088f2 <USBD_CtlError>
    return USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e08c      	b.n	8008706 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d002      	beq.n	80085fe <USBD_SetConfig+0x3e>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d029      	beq.n	8008650 <USBD_SetConfig+0x90>
 80085fc:	e075      	b.n	80086ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085fe:	4b44      	ldr	r3, [pc, #272]	; (8008710 <USBD_SetConfig+0x150>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d020      	beq.n	8008648 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008606:	4b42      	ldr	r3, [pc, #264]	; (8008710 <USBD_SetConfig+0x150>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008610:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <USBD_SetConfig+0x150>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fe ffe7 	bl	80075ea <USBD_SetClassConfig>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f962 	bl	80088f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008636:	e065      	b.n	8008704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fa25 	bl	8008a88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2203      	movs	r2, #3
 8008642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008646:	e05d      	b.n	8008704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa1d 	bl	8008a88 <USBD_CtlSendStatus>
      break;
 800864e:	e059      	b.n	8008704 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008650:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <USBD_SetConfig+0x150>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d112      	bne.n	800867e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008660:	4b2b      	ldr	r3, [pc, #172]	; (8008710 <USBD_SetConfig+0x150>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800866a:	4b29      	ldr	r3, [pc, #164]	; (8008710 <USBD_SetConfig+0x150>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fe ffd6 	bl	8007622 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa06 	bl	8008a88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800867c:	e042      	b.n	8008704 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <USBD_SetConfig+0x150>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	429a      	cmp	r2, r3
 800868a:	d02a      	beq.n	80086e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7fe ffc4 	bl	8007622 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800869a:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <USBD_SetConfig+0x150>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <USBD_SetConfig+0x150>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fe ff9d 	bl	80075ea <USBD_SetClassConfig>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00f      	beq.n	80086da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f918 	bl	80088f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fe ffa9 	bl	8007622 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086d8:	e014      	b.n	8008704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9d4 	bl	8008a88 <USBD_CtlSendStatus>
      break;
 80086e0:	e010      	b.n	8008704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9d0 	bl	8008a88 <USBD_CtlSendStatus>
      break;
 80086e8:	e00c      	b.n	8008704 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f900 	bl	80088f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <USBD_SetConfig+0x150>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fe ff92 	bl	8007622 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	73fb      	strb	r3, [r7, #15]
      break;
 8008702:	bf00      	nop
  }

  return ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200003a4 	.word	0x200003a4

08008714 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	88db      	ldrh	r3, [r3, #6]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d004      	beq.n	8008730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f8e2 	bl	80088f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800872e:	e023      	b.n	8008778 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b02      	cmp	r3, #2
 800873a:	dc02      	bgt.n	8008742 <USBD_GetConfig+0x2e>
 800873c:	2b00      	cmp	r3, #0
 800873e:	dc03      	bgt.n	8008748 <USBD_GetConfig+0x34>
 8008740:	e015      	b.n	800876e <USBD_GetConfig+0x5a>
 8008742:	2b03      	cmp	r3, #3
 8008744:	d00b      	beq.n	800875e <USBD_GetConfig+0x4a>
 8008746:	e012      	b.n	800876e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3308      	adds	r3, #8
 8008752:	2201      	movs	r2, #1
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f93c 	bl	80089d4 <USBD_CtlSendData>
        break;
 800875c:	e00c      	b.n	8008778 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3304      	adds	r3, #4
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f934 	bl	80089d4 <USBD_CtlSendData>
        break;
 800876c:	e004      	b.n	8008778 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8be 	bl	80088f2 <USBD_CtlError>
        break;
 8008776:	bf00      	nop
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	2b02      	cmp	r3, #2
 8008796:	d81e      	bhi.n	80087d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	88db      	ldrh	r3, [r3, #6]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d004      	beq.n	80087aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8a5 	bl	80088f2 <USBD_CtlError>
        break;
 80087a8:	e01a      	b.n	80087e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f043 0202 	orr.w	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	330c      	adds	r3, #12
 80087ca:	2202      	movs	r2, #2
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f900 	bl	80089d4 <USBD_CtlSendData>
      break;
 80087d4:	e004      	b.n	80087e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f88a 	bl	80088f2 <USBD_CtlError>
      break;
 80087de:	bf00      	nop
  }
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	885b      	ldrh	r3, [r3, #2]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d107      	bne.n	800880a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f940 	bl	8008a88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008808:	e013      	b.n	8008832 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d10b      	bne.n	800882a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	b29b      	uxth	r3, r3
 800881a:	b2da      	uxtb	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f930 	bl	8008a88 <USBD_CtlSendStatus>
}
 8008828:	e003      	b.n	8008832 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f860 	bl	80088f2 <USBD_CtlError>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884a:	b2db      	uxtb	r3, r3
 800884c:	3b01      	subs	r3, #1
 800884e:	2b02      	cmp	r3, #2
 8008850:	d80b      	bhi.n	800886a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	885b      	ldrh	r3, [r3, #2]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d10c      	bne.n	8008874 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f910 	bl	8008a88 <USBD_CtlSendStatus>
      }
      break;
 8008868:	e004      	b.n	8008874 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f840 	bl	80088f2 <USBD_CtlError>
      break;
 8008872:	e000      	b.n	8008876 <USBD_ClrFeature+0x3c>
      break;
 8008874:	bf00      	nop
  }
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	781a      	ldrb	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff fa41 	bl	8007d30 <SWAPBYTE>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fa34 	bl	8007d30 <SWAPBYTE>
 80088c8:	4603      	mov	r3, r0
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff fa27 	bl	8007d30 <SWAPBYTE>
 80088e2:	4603      	mov	r3, r0
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	80da      	strh	r2, [r3, #6]
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088fc:	2180      	movs	r1, #128	; 0x80
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fcb0 	bl	8009264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fcac 	bl	8009264 <USBD_LL_StallEP>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d036      	beq.n	8008998 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800892e:	6938      	ldr	r0, [r7, #16]
 8008930:	f000 f836 	bl	80089a0 <USBD_GetLen>
 8008934:	4603      	mov	r3, r0
 8008936:	3301      	adds	r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	4413      	add	r3, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	701a      	strb	r2, [r3, #0]
  idx++;
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	3301      	adds	r3, #1
 8008952:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4413      	add	r3, r2
 800895a:	2203      	movs	r2, #3
 800895c:	701a      	strb	r2, [r3, #0]
  idx++;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	3301      	adds	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008964:	e013      	b.n	800898e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	4413      	add	r3, r2
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	7812      	ldrb	r2, [r2, #0]
 8008970:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3301      	adds	r3, #1
 8008976:	613b      	str	r3, [r7, #16]
    idx++;
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	3301      	adds	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	4413      	add	r3, r2
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    idx++;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	3301      	adds	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e7      	bne.n	8008966 <USBD_GetString+0x52>
 8008996:	e000      	b.n	800899a <USBD_GetString+0x86>
    return;
 8008998:	bf00      	nop
  }
}
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089b0:	e005      	b.n	80089be <USBD_GetLen+0x1e>
  {
    len++;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	3301      	adds	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f5      	bne.n	80089b2 <USBD_GetLen+0x12>
  }

  return len;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fcbb 	bl	8009376 <USBD_LL_Transmit>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fcaa 	bl	8009376 <USBD_LL_Transmit>

  return USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	2100      	movs	r1, #0
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fcae 	bl	80093b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	2100      	movs	r1, #0
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fc9d 	bl	80093b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2204      	movs	r2, #4
 8008a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc69 	bl	8009376 <USBD_LL_Transmit>

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2205      	movs	r2, #5
 8008aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fc77 	bl	80093b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4912      	ldr	r1, [pc, #72]	; (8008b24 <MX_USB_DEVICE_Init+0x50>)
 8008adc:	4812      	ldr	r0, [pc, #72]	; (8008b28 <MX_USB_DEVICE_Init+0x54>)
 8008ade:	f7fe fd07 	bl	80074f0 <USBD_Init>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ae8:	f7f8 fca4 	bl	8001434 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008aec:	490f      	ldr	r1, [pc, #60]	; (8008b2c <MX_USB_DEVICE_Init+0x58>)
 8008aee:	480e      	ldr	r0, [pc, #56]	; (8008b28 <MX_USB_DEVICE_Init+0x54>)
 8008af0:	f7fe fd2e 	bl	8007550 <USBD_RegisterClass>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008afa:	f7f8 fc9b 	bl	8001434 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008afe:	490c      	ldr	r1, [pc, #48]	; (8008b30 <MX_USB_DEVICE_Init+0x5c>)
 8008b00:	4809      	ldr	r0, [pc, #36]	; (8008b28 <MX_USB_DEVICE_Init+0x54>)
 8008b02:	f7fe fc65 	bl	80073d0 <USBD_CDC_RegisterInterface>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b0c:	f7f8 fc92 	bl	8001434 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <MX_USB_DEVICE_Init+0x54>)
 8008b12:	f7fe fd53 	bl	80075bc <USBD_Start>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b1c:	f7f8 fc8a 	bl	8001434 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b20:	bf00      	nop
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200000ac 	.word	0x200000ac
 8008b28:	200003a8 	.word	0x200003a8
 8008b2c:	20000018 	.word	0x20000018
 8008b30:	20000098 	.word	0x20000098

08008b34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4905      	ldr	r1, [pc, #20]	; (8008b50 <CDC_Init_FS+0x1c>)
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <CDC_Init_FS+0x20>)
 8008b3e:	f7fe fc61 	bl	8007404 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b42:	4905      	ldr	r1, [pc, #20]	; (8008b58 <CDC_Init_FS+0x24>)
 8008b44:	4803      	ldr	r0, [pc, #12]	; (8008b54 <CDC_Init_FS+0x20>)
 8008b46:	f7fe fc7f 	bl	8007448 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000e84 	.word	0x20000e84
 8008b54:	200003a8 	.word	0x200003a8
 8008b58:	20000684 	.word	0x20000684

08008b5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b23      	cmp	r3, #35	; 0x23
 8008b80:	d84a      	bhi.n	8008c18 <CDC_Control_FS+0xac>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <CDC_Control_FS+0x1c>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008c19 	.word	0x08008c19
 8008b8c:	08008c19 	.word	0x08008c19
 8008b90:	08008c19 	.word	0x08008c19
 8008b94:	08008c19 	.word	0x08008c19
 8008b98:	08008c19 	.word	0x08008c19
 8008b9c:	08008c19 	.word	0x08008c19
 8008ba0:	08008c19 	.word	0x08008c19
 8008ba4:	08008c19 	.word	0x08008c19
 8008ba8:	08008c19 	.word	0x08008c19
 8008bac:	08008c19 	.word	0x08008c19
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008c19 	.word	0x08008c19
 8008bb8:	08008c19 	.word	0x08008c19
 8008bbc:	08008c19 	.word	0x08008c19
 8008bc0:	08008c19 	.word	0x08008c19
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008c19 	.word	0x08008c19
 8008bcc:	08008c19 	.word	0x08008c19
 8008bd0:	08008c19 	.word	0x08008c19
 8008bd4:	08008c19 	.word	0x08008c19
 8008bd8:	08008c19 	.word	0x08008c19
 8008bdc:	08008c19 	.word	0x08008c19
 8008be0:	08008c19 	.word	0x08008c19
 8008be4:	08008c19 	.word	0x08008c19
 8008be8:	08008c19 	.word	0x08008c19
 8008bec:	08008c19 	.word	0x08008c19
 8008bf0:	08008c19 	.word	0x08008c19
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c19 	.word	0x08008c19
 8008bfc:	08008c19 	.word	0x08008c19
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c19 	.word	0x08008c19
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c19 	.word	0x08008c19
 8008c10:	08008c19 	.word	0x08008c19
 8008c14:	08008c19 	.word	0x08008c19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c18:	bf00      	nop
  }

  return (USBD_OK);
 8008c1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4805      	ldr	r0, [pc, #20]	; (8008c4c <CDC_Receive_FS+0x24>)
 8008c36:	f7fe fc07 	bl	8007448 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c3a:	4804      	ldr	r0, [pc, #16]	; (8008c4c <CDC_Receive_FS+0x24>)
 8008c3c:	f7fe fc22 	bl	8007484 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	200003a8 	.word	0x200003a8

08008c50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2212      	movs	r2, #18
 8008c84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c86:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	200000c8 	.word	0x200000c8

08008c98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2204      	movs	r2, #4
 8008ca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008caa:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	200000dc 	.word	0x200000dc

08008cbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	6039      	str	r1, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d105      	bne.n	8008cda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	4907      	ldr	r1, [pc, #28]	; (8008cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cd2:	4808      	ldr	r0, [pc, #32]	; (8008cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cd4:	f7ff fe1e 	bl	8008914 <USBD_GetString>
 8008cd8:	e004      	b.n	8008ce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	4904      	ldr	r1, [pc, #16]	; (8008cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cde:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ce0:	f7ff fe18 	bl	8008914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20001684 	.word	0x20001684
 8008cf4:	0800c30c 	.word	0x0800c30c

08008cf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	4904      	ldr	r1, [pc, #16]	; (8008d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d08:	4804      	ldr	r0, [pc, #16]	; (8008d1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d0a:	f7ff fe03 	bl	8008914 <USBD_GetString>
  return USBD_StrDesc;
 8008d0e:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20001684 	.word	0x20001684
 8008d1c:	0800c324 	.word	0x0800c324

08008d20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	221a      	movs	r2, #26
 8008d30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d32:	f000 f843 	bl	8008dbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d36:	4b02      	ldr	r3, [pc, #8]	; (8008d40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200000e0 	.word	0x200000e0

08008d44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d105      	bne.n	8008d62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	4907      	ldr	r1, [pc, #28]	; (8008d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d5a:	4808      	ldr	r0, [pc, #32]	; (8008d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d5c:	f7ff fdda 	bl	8008914 <USBD_GetString>
 8008d60:	e004      	b.n	8008d6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d66:	4805      	ldr	r0, [pc, #20]	; (8008d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d68:	f7ff fdd4 	bl	8008914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20001684 	.word	0x20001684
 8008d7c:	0800c338 	.word	0x0800c338

08008d80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4907      	ldr	r1, [pc, #28]	; (8008db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d96:	4808      	ldr	r0, [pc, #32]	; (8008db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d98:	f7ff fdbc 	bl	8008914 <USBD_GetString>
 8008d9c:	e004      	b.n	8008da8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	4904      	ldr	r1, [pc, #16]	; (8008db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008da2:	4805      	ldr	r0, [pc, #20]	; (8008db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008da4:	f7ff fdb6 	bl	8008914 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20001684 	.word	0x20001684
 8008db8:	0800c344 	.word	0x0800c344

08008dbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dc2:	4b0f      	ldr	r3, [pc, #60]	; (8008e00 <Get_SerialNum+0x44>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <Get_SerialNum+0x48>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <Get_SerialNum+0x4c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4413      	add	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d009      	beq.n	8008df6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008de2:	2208      	movs	r2, #8
 8008de4:	4909      	ldr	r1, [pc, #36]	; (8008e0c <Get_SerialNum+0x50>)
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f814 	bl	8008e14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dec:	2204      	movs	r2, #4
 8008dee:	4908      	ldr	r1, [pc, #32]	; (8008e10 <Get_SerialNum+0x54>)
 8008df0:	68b8      	ldr	r0, [r7, #8]
 8008df2:	f000 f80f 	bl	8008e14 <IntToUnicode>
  }
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	1fff7a10 	.word	0x1fff7a10
 8008e04:	1fff7a14 	.word	0x1fff7a14
 8008e08:	1fff7a18 	.word	0x1fff7a18
 8008e0c:	200000e2 	.word	0x200000e2
 8008e10:	200000f2 	.word	0x200000f2

08008e14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
 8008e2a:	e027      	b.n	8008e7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	0f1b      	lsrs	r3, r3, #28
 8008e30:	2b09      	cmp	r3, #9
 8008e32:	d80b      	bhi.n	8008e4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	0f1b      	lsrs	r3, r3, #28
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	440b      	add	r3, r1
 8008e44:	3230      	adds	r2, #48	; 0x30
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e00a      	b.n	8008e62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	0f1b      	lsrs	r3, r3, #28
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	4619      	mov	r1, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3237      	adds	r2, #55	; 0x37
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4413      	add	r3, r2
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
 8008e7c:	7dfa      	ldrb	r2, [r7, #23]
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d3d3      	bcc.n	8008e2c <IntToUnicode+0x18>
  }
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08a      	sub	sp, #40	; 0x28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb4:	d13a      	bne.n	8008f2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	4b1e      	ldr	r3, [pc, #120]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec6:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ed2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ee4:	230a      	movs	r3, #10
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	4619      	mov	r1, r3
 8008eee:	4812      	ldr	r0, [pc, #72]	; (8008f38 <HAL_PCD_MspInit+0xa4>)
 8008ef0:	f7f8 fe3c 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef8:	4a0e      	ldr	r2, [pc, #56]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efe:	6353      	str	r3, [r2, #52]	; 0x34
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f08:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8008f10:	4b08      	ldr	r3, [pc, #32]	; (8008f34 <HAL_PCD_MspInit+0xa0>)
 8008f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	2043      	movs	r0, #67	; 0x43
 8008f22:	f7f8 fdec 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f26:	2043      	movs	r0, #67	; 0x43
 8008f28:	f7f8 fe05 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40020000 	.word	0x40020000

08008f3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fe fb7f 	bl	8007656 <USBD_LL_SetupStage>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	78fb      	ldrb	r3, [r7, #3]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7fe fbb9 	bl	8007700 <USBD_LL_DataOutStage>
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	334c      	adds	r3, #76	; 0x4c
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f7fe fc52 	bl	8007866 <USBD_LL_DataInStage>
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fd86 	bl	8007aea <USBD_LL_SOF>
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d001      	beq.n	8008ffe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ffa:	f7f8 fa1b 	bl	8001434 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009004:	7bfa      	ldrb	r2, [r7, #15]
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fd30 	bl	8007a6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fcd8 	bl	80079ca <USBD_LL_Reset>
}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fd2b 	bl	8007a8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	6812      	ldr	r2, [r2, #0]
 8009046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009058:	4b04      	ldr	r3, [pc, #16]	; (800906c <HAL_PCD_SuspendCallback+0x48>)
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	4a03      	ldr	r2, [pc, #12]	; (800906c <HAL_PCD_SuspendCallback+0x48>)
 800905e:	f043 0306 	orr.w	r3, r3, #6
 8009062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	e000ed00 	.word	0xe000ed00

08009070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fd1b 	bl	8007aba <USBD_LL_Resume>
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fd73 	bl	8007b8e <USBD_LL_IsoOUTIncomplete>
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fd2f 	bl	8007b2a <USBD_LL_IsoINIncomplete>
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fd85 	bl	8007bf2 <USBD_LL_DevConnected>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fd82 	bl	8007c08 <USBD_LL_DevDisconnected>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d13c      	bne.n	8009196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800911c:	4a20      	ldr	r2, [pc, #128]	; (80091a0 <USBD_LL_Init+0x94>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1e      	ldr	r2, [pc, #120]	; (80091a0 <USBD_LL_Init+0x94>)
 8009128:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800912c:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <USBD_LL_Init+0x94>)
 800912e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009134:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <USBD_LL_Init+0x94>)
 8009136:	2204      	movs	r2, #4
 8009138:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800913a:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <USBD_LL_Init+0x94>)
 800913c:	2202      	movs	r2, #2
 800913e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <USBD_LL_Init+0x94>)
 8009142:	2200      	movs	r2, #0
 8009144:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009146:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <USBD_LL_Init+0x94>)
 8009148:	2202      	movs	r2, #2
 800914a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800914c:	4b14      	ldr	r3, [pc, #80]	; (80091a0 <USBD_LL_Init+0x94>)
 800914e:	2200      	movs	r2, #0
 8009150:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <USBD_LL_Init+0x94>)
 8009154:	2200      	movs	r2, #0
 8009156:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009158:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <USBD_LL_Init+0x94>)
 800915a:	2200      	movs	r2, #0
 800915c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <USBD_LL_Init+0x94>)
 8009160:	2200      	movs	r2, #0
 8009162:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009164:	4b0e      	ldr	r3, [pc, #56]	; (80091a0 <USBD_LL_Init+0x94>)
 8009166:	2200      	movs	r2, #0
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800916a:	480d      	ldr	r0, [pc, #52]	; (80091a0 <USBD_LL_Init+0x94>)
 800916c:	f7f9 fe4b 	bl	8002e06 <HAL_PCD_Init>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009176:	f7f8 f95d 	bl	8001434 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800917a:	2180      	movs	r1, #128	; 0x80
 800917c:	4808      	ldr	r0, [pc, #32]	; (80091a0 <USBD_LL_Init+0x94>)
 800917e:	f7fb f8a2 	bl	80042c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009182:	2240      	movs	r2, #64	; 0x40
 8009184:	2100      	movs	r1, #0
 8009186:	4806      	ldr	r0, [pc, #24]	; (80091a0 <USBD_LL_Init+0x94>)
 8009188:	f7fb f856 	bl	8004238 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800918c:	2280      	movs	r2, #128	; 0x80
 800918e:	2101      	movs	r1, #1
 8009190:	4803      	ldr	r0, [pc, #12]	; (80091a0 <USBD_LL_Init+0x94>)
 8009192:	f7fb f851 	bl	8004238 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20001884 	.word	0x20001884

080091a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f9 ff40 	bl	8003040 <HAL_PCD_Start>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f942 	bl	8009450 <USBD_Get_USB_Status>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	4608      	mov	r0, r1
 80091e4:	4611      	mov	r1, r2
 80091e6:	461a      	mov	r2, r3
 80091e8:	4603      	mov	r3, r0
 80091ea:	70fb      	strb	r3, [r7, #3]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70bb      	strb	r3, [r7, #2]
 80091f0:	4613      	mov	r3, r2
 80091f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009202:	78bb      	ldrb	r3, [r7, #2]
 8009204:	883a      	ldrh	r2, [r7, #0]
 8009206:	78f9      	ldrb	r1, [r7, #3]
 8009208:	f7fa fc11 	bl	8003a2e <HAL_PCD_EP_Open>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f91c 	bl	8009450 <USBD_Get_USB_Status>
 8009218:	4603      	mov	r3, r0
 800921a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921c:	7bbb      	ldrb	r3, [r7, #14]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009240:	78fa      	ldrb	r2, [r7, #3]
 8009242:	4611      	mov	r1, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f7fa fc5a 	bl	8003afe <HAL_PCD_EP_Close>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	4618      	mov	r0, r3
 8009252:	f000 f8fd 	bl	8009450 <USBD_Get_USB_Status>
 8009256:	4603      	mov	r3, r0
 8009258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925a:	7bbb      	ldrb	r3, [r7, #14]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7fa fd32 	bl	8003cec <HAL_PCD_EP_SetStall>
 8009288:	4603      	mov	r3, r0
 800928a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f8de 	bl	8009450 <USBD_Get_USB_Status>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009298:	7bbb      	ldrb	r3, [r7, #14]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fa fd77 	bl	8003db4 <HAL_PCD_EP_ClrStall>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f8bf 	bl	8009450 <USBD_Get_USB_Status>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	da0b      	bge.n	8009314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	4613      	mov	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	333e      	adds	r3, #62	; 0x3e
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	e00b      	b.n	800932c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	4613      	mov	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800932a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7fa fb44 	bl	80039e4 <HAL_PCD_SetAddress>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f874 	bl	8009450 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b086      	sub	sp, #24
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	460b      	mov	r3, r1
 8009384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009394:	7af9      	ldrb	r1, [r7, #11]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f7fa fc5d 	bl	8003c58 <HAL_PCD_EP_Transmit>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f853 	bl	8009450 <USBD_Get_USB_Status>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	460b      	mov	r3, r1
 80093c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093d6:	7af9      	ldrb	r1, [r7, #11]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	f7fa fbd9 	bl	8003b92 <HAL_PCD_EP_Receive>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f832 	bl	8009450 <USBD_Get_USB_Status>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f7fa fc09 	bl	8003c28 <HAL_PCD_EP_GetRxCount>
 8009416:	4603      	mov	r3, r0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009428:	4b03      	ldr	r3, [pc, #12]	; (8009438 <USBD_static_malloc+0x18>)
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20001d90 	.word	0x20001d90

0800943c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]

}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	2b03      	cmp	r3, #3
 8009462:	d817      	bhi.n	8009494 <USBD_Get_USB_Status+0x44>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_Get_USB_Status+0x1c>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	0800947d 	.word	0x0800947d
 8009470:	08009483 	.word	0x08009483
 8009474:	08009489 	.word	0x08009489
 8009478:	0800948f 	.word	0x0800948f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
    break;
 8009480:	e00b      	b.n	800949a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009482:	2303      	movs	r3, #3
 8009484:	73fb      	strb	r3, [r7, #15]
    break;
 8009486:	e008      	b.n	800949a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	e005      	b.n	800949a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	73fb      	strb	r3, [r7, #15]
    break;
 8009492:	e002      	b.n	800949a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009494:	2303      	movs	r3, #3
 8009496:	73fb      	strb	r3, [r7, #15]
    break;
 8009498:	bf00      	nop
  }
  return usb_status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <__errno>:
 80094a8:	4b01      	ldr	r3, [pc, #4]	; (80094b0 <__errno+0x8>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	200000fc 	.word	0x200000fc

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	; (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	; (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	; (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	; (80094f8 <__libc_init_array+0x44>)
 80094c8:	f002 ff02 	bl	800c2d0 <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800c74c 	.word	0x0800c74c
 80094f0:	0800c74c 	.word	0x0800c74c
 80094f4:	0800c74c 	.word	0x0800c74c
 80094f8:	0800c750 	.word	0x0800c750

080094fc <memset>:
 80094fc:	4402      	add	r2, r0
 80094fe:	4603      	mov	r3, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <__cvt>:
 800950c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	ec55 4b10 	vmov	r4, r5, d0
 8009514:	2d00      	cmp	r5, #0
 8009516:	460e      	mov	r6, r1
 8009518:	4619      	mov	r1, r3
 800951a:	462b      	mov	r3, r5
 800951c:	bfbb      	ittet	lt
 800951e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009522:	461d      	movlt	r5, r3
 8009524:	2300      	movge	r3, #0
 8009526:	232d      	movlt	r3, #45	; 0x2d
 8009528:	700b      	strb	r3, [r1, #0]
 800952a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800952c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009530:	4691      	mov	r9, r2
 8009532:	f023 0820 	bic.w	r8, r3, #32
 8009536:	bfbc      	itt	lt
 8009538:	4622      	movlt	r2, r4
 800953a:	4614      	movlt	r4, r2
 800953c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009540:	d005      	beq.n	800954e <__cvt+0x42>
 8009542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009546:	d100      	bne.n	800954a <__cvt+0x3e>
 8009548:	3601      	adds	r6, #1
 800954a:	2102      	movs	r1, #2
 800954c:	e000      	b.n	8009550 <__cvt+0x44>
 800954e:	2103      	movs	r1, #3
 8009550:	ab03      	add	r3, sp, #12
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	ab02      	add	r3, sp, #8
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	ec45 4b10 	vmov	d0, r4, r5
 800955c:	4653      	mov	r3, sl
 800955e:	4632      	mov	r2, r6
 8009560:	f000 fcea 	bl	8009f38 <_dtoa_r>
 8009564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009568:	4607      	mov	r7, r0
 800956a:	d102      	bne.n	8009572 <__cvt+0x66>
 800956c:	f019 0f01 	tst.w	r9, #1
 8009570:	d022      	beq.n	80095b8 <__cvt+0xac>
 8009572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009576:	eb07 0906 	add.w	r9, r7, r6
 800957a:	d110      	bne.n	800959e <__cvt+0x92>
 800957c:	783b      	ldrb	r3, [r7, #0]
 800957e:	2b30      	cmp	r3, #48	; 0x30
 8009580:	d10a      	bne.n	8009598 <__cvt+0x8c>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800958e:	b918      	cbnz	r0, 8009598 <__cvt+0x8c>
 8009590:	f1c6 0601 	rsb	r6, r6, #1
 8009594:	f8ca 6000 	str.w	r6, [sl]
 8009598:	f8da 3000 	ldr.w	r3, [sl]
 800959c:	4499      	add	r9, r3
 800959e:	2200      	movs	r2, #0
 80095a0:	2300      	movs	r3, #0
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f7 fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 80095aa:	b108      	cbz	r0, 80095b0 <__cvt+0xa4>
 80095ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80095b0:	2230      	movs	r2, #48	; 0x30
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	454b      	cmp	r3, r9
 80095b6:	d307      	bcc.n	80095c8 <__cvt+0xbc>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095bc:	1bdb      	subs	r3, r3, r7
 80095be:	4638      	mov	r0, r7
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	b004      	add	sp, #16
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	1c59      	adds	r1, r3, #1
 80095ca:	9103      	str	r1, [sp, #12]
 80095cc:	701a      	strb	r2, [r3, #0]
 80095ce:	e7f0      	b.n	80095b2 <__cvt+0xa6>

080095d0 <__exponent>:
 80095d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d2:	4603      	mov	r3, r0
 80095d4:	2900      	cmp	r1, #0
 80095d6:	bfb8      	it	lt
 80095d8:	4249      	neglt	r1, r1
 80095da:	f803 2b02 	strb.w	r2, [r3], #2
 80095de:	bfb4      	ite	lt
 80095e0:	222d      	movlt	r2, #45	; 0x2d
 80095e2:	222b      	movge	r2, #43	; 0x2b
 80095e4:	2909      	cmp	r1, #9
 80095e6:	7042      	strb	r2, [r0, #1]
 80095e8:	dd2a      	ble.n	8009640 <__exponent+0x70>
 80095ea:	f10d 0407 	add.w	r4, sp, #7
 80095ee:	46a4      	mov	ip, r4
 80095f0:	270a      	movs	r7, #10
 80095f2:	46a6      	mov	lr, r4
 80095f4:	460a      	mov	r2, r1
 80095f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80095fa:	fb07 1516 	mls	r5, r7, r6, r1
 80095fe:	3530      	adds	r5, #48	; 0x30
 8009600:	2a63      	cmp	r2, #99	; 0x63
 8009602:	f104 34ff 	add.w	r4, r4, #4294967295
 8009606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800960a:	4631      	mov	r1, r6
 800960c:	dcf1      	bgt.n	80095f2 <__exponent+0x22>
 800960e:	3130      	adds	r1, #48	; 0x30
 8009610:	f1ae 0502 	sub.w	r5, lr, #2
 8009614:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009618:	1c44      	adds	r4, r0, #1
 800961a:	4629      	mov	r1, r5
 800961c:	4561      	cmp	r1, ip
 800961e:	d30a      	bcc.n	8009636 <__exponent+0x66>
 8009620:	f10d 0209 	add.w	r2, sp, #9
 8009624:	eba2 020e 	sub.w	r2, r2, lr
 8009628:	4565      	cmp	r5, ip
 800962a:	bf88      	it	hi
 800962c:	2200      	movhi	r2, #0
 800962e:	4413      	add	r3, r2
 8009630:	1a18      	subs	r0, r3, r0
 8009632:	b003      	add	sp, #12
 8009634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800963a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800963e:	e7ed      	b.n	800961c <__exponent+0x4c>
 8009640:	2330      	movs	r3, #48	; 0x30
 8009642:	3130      	adds	r1, #48	; 0x30
 8009644:	7083      	strb	r3, [r0, #2]
 8009646:	70c1      	strb	r1, [r0, #3]
 8009648:	1d03      	adds	r3, r0, #4
 800964a:	e7f1      	b.n	8009630 <__exponent+0x60>

0800964c <_printf_float>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	ed2d 8b02 	vpush	{d8}
 8009654:	b08d      	sub	sp, #52	; 0x34
 8009656:	460c      	mov	r4, r1
 8009658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800965c:	4616      	mov	r6, r2
 800965e:	461f      	mov	r7, r3
 8009660:	4605      	mov	r5, r0
 8009662:	f001 fa57 	bl	800ab14 <_localeconv_r>
 8009666:	f8d0 a000 	ldr.w	sl, [r0]
 800966a:	4650      	mov	r0, sl
 800966c:	f7f6 fdb8 	bl	80001e0 <strlen>
 8009670:	2300      	movs	r3, #0
 8009672:	930a      	str	r3, [sp, #40]	; 0x28
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	9305      	str	r3, [sp, #20]
 8009678:	f8d8 3000 	ldr.w	r3, [r8]
 800967c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009680:	3307      	adds	r3, #7
 8009682:	f023 0307 	bic.w	r3, r3, #7
 8009686:	f103 0208 	add.w	r2, r3, #8
 800968a:	f8c8 2000 	str.w	r2, [r8]
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800969a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80096a4:	ee08 0a10 	vmov	s16, r0
 80096a8:	4b9f      	ldr	r3, [pc, #636]	; (8009928 <_printf_float+0x2dc>)
 80096aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	f7f7 fa43 	bl	8000b3c <__aeabi_dcmpun>
 80096b6:	bb88      	cbnz	r0, 800971c <_printf_float+0xd0>
 80096b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096bc:	4b9a      	ldr	r3, [pc, #616]	; (8009928 <_printf_float+0x2dc>)
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	f7f7 fa1d 	bl	8000b00 <__aeabi_dcmple>
 80096c6:	bb48      	cbnz	r0, 800971c <_printf_float+0xd0>
 80096c8:	2200      	movs	r2, #0
 80096ca:	2300      	movs	r3, #0
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f7 fa0c 	bl	8000aec <__aeabi_dcmplt>
 80096d4:	b110      	cbz	r0, 80096dc <_printf_float+0x90>
 80096d6:	232d      	movs	r3, #45	; 0x2d
 80096d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096dc:	4b93      	ldr	r3, [pc, #588]	; (800992c <_printf_float+0x2e0>)
 80096de:	4894      	ldr	r0, [pc, #592]	; (8009930 <_printf_float+0x2e4>)
 80096e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096e4:	bf94      	ite	ls
 80096e6:	4698      	movls	r8, r3
 80096e8:	4680      	movhi	r8, r0
 80096ea:	2303      	movs	r3, #3
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	f023 0204 	bic.w	r2, r3, #4
 80096f4:	6022      	str	r2, [r4, #0]
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	9700      	str	r7, [sp, #0]
 80096fc:	4633      	mov	r3, r6
 80096fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009700:	4621      	mov	r1, r4
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f9d8 	bl	8009ab8 <_printf_common>
 8009708:	3001      	adds	r0, #1
 800970a:	f040 8090 	bne.w	800982e <_printf_float+0x1e2>
 800970e:	f04f 30ff 	mov.w	r0, #4294967295
 8009712:	b00d      	add	sp, #52	; 0x34
 8009714:	ecbd 8b02 	vpop	{d8}
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	4640      	mov	r0, r8
 8009722:	4649      	mov	r1, r9
 8009724:	f7f7 fa0a 	bl	8000b3c <__aeabi_dcmpun>
 8009728:	b140      	cbz	r0, 800973c <_printf_float+0xf0>
 800972a:	464b      	mov	r3, r9
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfbc      	itt	lt
 8009730:	232d      	movlt	r3, #45	; 0x2d
 8009732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009736:	487f      	ldr	r0, [pc, #508]	; (8009934 <_printf_float+0x2e8>)
 8009738:	4b7f      	ldr	r3, [pc, #508]	; (8009938 <_printf_float+0x2ec>)
 800973a:	e7d1      	b.n	80096e0 <_printf_float+0x94>
 800973c:	6863      	ldr	r3, [r4, #4]
 800973e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009742:	9206      	str	r2, [sp, #24]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	d13f      	bne.n	80097c8 <_printf_float+0x17c>
 8009748:	2306      	movs	r3, #6
 800974a:	6063      	str	r3, [r4, #4]
 800974c:	9b05      	ldr	r3, [sp, #20]
 800974e:	6861      	ldr	r1, [r4, #4]
 8009750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009754:	2300      	movs	r3, #0
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	ab0a      	add	r3, sp, #40	; 0x28
 800975a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800975e:	ab09      	add	r3, sp, #36	; 0x24
 8009760:	ec49 8b10 	vmov	d0, r8, r9
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800976c:	4628      	mov	r0, r5
 800976e:	f7ff fecd 	bl	800950c <__cvt>
 8009772:	9b06      	ldr	r3, [sp, #24]
 8009774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009776:	2b47      	cmp	r3, #71	; 0x47
 8009778:	4680      	mov	r8, r0
 800977a:	d108      	bne.n	800978e <_printf_float+0x142>
 800977c:	1cc8      	adds	r0, r1, #3
 800977e:	db02      	blt.n	8009786 <_printf_float+0x13a>
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	4299      	cmp	r1, r3
 8009784:	dd41      	ble.n	800980a <_printf_float+0x1be>
 8009786:	f1ab 0b02 	sub.w	fp, fp, #2
 800978a:	fa5f fb8b 	uxtb.w	fp, fp
 800978e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009792:	d820      	bhi.n	80097d6 <_printf_float+0x18a>
 8009794:	3901      	subs	r1, #1
 8009796:	465a      	mov	r2, fp
 8009798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800979c:	9109      	str	r1, [sp, #36]	; 0x24
 800979e:	f7ff ff17 	bl	80095d0 <__exponent>
 80097a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a4:	1813      	adds	r3, r2, r0
 80097a6:	2a01      	cmp	r2, #1
 80097a8:	4681      	mov	r9, r0
 80097aa:	6123      	str	r3, [r4, #16]
 80097ac:	dc02      	bgt.n	80097b4 <_printf_float+0x168>
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	07d2      	lsls	r2, r2, #31
 80097b2:	d501      	bpl.n	80097b8 <_printf_float+0x16c>
 80097b4:	3301      	adds	r3, #1
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d09c      	beq.n	80096fa <_printf_float+0xae>
 80097c0:	232d      	movs	r3, #45	; 0x2d
 80097c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c6:	e798      	b.n	80096fa <_printf_float+0xae>
 80097c8:	9a06      	ldr	r2, [sp, #24]
 80097ca:	2a47      	cmp	r2, #71	; 0x47
 80097cc:	d1be      	bne.n	800974c <_printf_float+0x100>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1bc      	bne.n	800974c <_printf_float+0x100>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e7b9      	b.n	800974a <_printf_float+0xfe>
 80097d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097da:	d118      	bne.n	800980e <_printf_float+0x1c2>
 80097dc:	2900      	cmp	r1, #0
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	dd0b      	ble.n	80097fa <_printf_float+0x1ae>
 80097e2:	6121      	str	r1, [r4, #16]
 80097e4:	b913      	cbnz	r3, 80097ec <_printf_float+0x1a0>
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	07d0      	lsls	r0, r2, #31
 80097ea:	d502      	bpl.n	80097f2 <_printf_float+0x1a6>
 80097ec:	3301      	adds	r3, #1
 80097ee:	440b      	add	r3, r1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80097f4:	f04f 0900 	mov.w	r9, #0
 80097f8:	e7de      	b.n	80097b8 <_printf_float+0x16c>
 80097fa:	b913      	cbnz	r3, 8009802 <_printf_float+0x1b6>
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	07d2      	lsls	r2, r2, #31
 8009800:	d501      	bpl.n	8009806 <_printf_float+0x1ba>
 8009802:	3302      	adds	r3, #2
 8009804:	e7f4      	b.n	80097f0 <_printf_float+0x1a4>
 8009806:	2301      	movs	r3, #1
 8009808:	e7f2      	b.n	80097f0 <_printf_float+0x1a4>
 800980a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800980e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009810:	4299      	cmp	r1, r3
 8009812:	db05      	blt.n	8009820 <_printf_float+0x1d4>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	6121      	str	r1, [r4, #16]
 8009818:	07d8      	lsls	r0, r3, #31
 800981a:	d5ea      	bpl.n	80097f2 <_printf_float+0x1a6>
 800981c:	1c4b      	adds	r3, r1, #1
 800981e:	e7e7      	b.n	80097f0 <_printf_float+0x1a4>
 8009820:	2900      	cmp	r1, #0
 8009822:	bfd4      	ite	le
 8009824:	f1c1 0202 	rsble	r2, r1, #2
 8009828:	2201      	movgt	r2, #1
 800982a:	4413      	add	r3, r2
 800982c:	e7e0      	b.n	80097f0 <_printf_float+0x1a4>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	055a      	lsls	r2, r3, #21
 8009832:	d407      	bmi.n	8009844 <_printf_float+0x1f8>
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	4642      	mov	r2, r8
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	d12c      	bne.n	800989c <_printf_float+0x250>
 8009842:	e764      	b.n	800970e <_printf_float+0xc2>
 8009844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009848:	f240 80e0 	bls.w	8009a0c <_printf_float+0x3c0>
 800984c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	f7f7 f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8009858:	2800      	cmp	r0, #0
 800985a:	d034      	beq.n	80098c6 <_printf_float+0x27a>
 800985c:	4a37      	ldr	r2, [pc, #220]	; (800993c <_printf_float+0x2f0>)
 800985e:	2301      	movs	r3, #1
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f af51 	beq.w	800970e <_printf_float+0xc2>
 800986c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009870:	429a      	cmp	r2, r3
 8009872:	db02      	blt.n	800987a <_printf_float+0x22e>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	07d8      	lsls	r0, r3, #31
 8009878:	d510      	bpl.n	800989c <_printf_float+0x250>
 800987a:	ee18 3a10 	vmov	r3, s16
 800987e:	4652      	mov	r2, sl
 8009880:	4631      	mov	r1, r6
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f af41 	beq.w	800970e <_printf_float+0xc2>
 800988c:	f04f 0800 	mov.w	r8, #0
 8009890:	f104 091a 	add.w	r9, r4, #26
 8009894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009896:	3b01      	subs	r3, #1
 8009898:	4543      	cmp	r3, r8
 800989a:	dc09      	bgt.n	80098b0 <_printf_float+0x264>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	f100 8105 	bmi.w	8009aae <_printf_float+0x462>
 80098a4:	68e0      	ldr	r0, [r4, #12]
 80098a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a8:	4298      	cmp	r0, r3
 80098aa:	bfb8      	it	lt
 80098ac:	4618      	movlt	r0, r3
 80098ae:	e730      	b.n	8009712 <_printf_float+0xc6>
 80098b0:	2301      	movs	r3, #1
 80098b2:	464a      	mov	r2, r9
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af27 	beq.w	800970e <_printf_float+0xc2>
 80098c0:	f108 0801 	add.w	r8, r8, #1
 80098c4:	e7e6      	b.n	8009894 <_printf_float+0x248>
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dc39      	bgt.n	8009940 <_printf_float+0x2f4>
 80098cc:	4a1b      	ldr	r2, [pc, #108]	; (800993c <_printf_float+0x2f0>)
 80098ce:	2301      	movs	r3, #1
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f af19 	beq.w	800970e <_printf_float+0xc2>
 80098dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098e0:	4313      	orrs	r3, r2
 80098e2:	d102      	bne.n	80098ea <_printf_float+0x29e>
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	07d9      	lsls	r1, r3, #31
 80098e8:	d5d8      	bpl.n	800989c <_printf_float+0x250>
 80098ea:	ee18 3a10 	vmov	r3, s16
 80098ee:	4652      	mov	r2, sl
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f af09 	beq.w	800970e <_printf_float+0xc2>
 80098fc:	f04f 0900 	mov.w	r9, #0
 8009900:	f104 0a1a 	add.w	sl, r4, #26
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	425b      	negs	r3, r3
 8009908:	454b      	cmp	r3, r9
 800990a:	dc01      	bgt.n	8009910 <_printf_float+0x2c4>
 800990c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990e:	e792      	b.n	8009836 <_printf_float+0x1ea>
 8009910:	2301      	movs	r3, #1
 8009912:	4652      	mov	r2, sl
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f aef7 	beq.w	800970e <_printf_float+0xc2>
 8009920:	f109 0901 	add.w	r9, r9, #1
 8009924:	e7ee      	b.n	8009904 <_printf_float+0x2b8>
 8009926:	bf00      	nop
 8009928:	7fefffff 	.word	0x7fefffff
 800992c:	0800c370 	.word	0x0800c370
 8009930:	0800c374 	.word	0x0800c374
 8009934:	0800c37c 	.word	0x0800c37c
 8009938:	0800c378 	.word	0x0800c378
 800993c:	0800c380 	.word	0x0800c380
 8009940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009944:	429a      	cmp	r2, r3
 8009946:	bfa8      	it	ge
 8009948:	461a      	movge	r2, r3
 800994a:	2a00      	cmp	r2, #0
 800994c:	4691      	mov	r9, r2
 800994e:	dc37      	bgt.n	80099c0 <_printf_float+0x374>
 8009950:	f04f 0b00 	mov.w	fp, #0
 8009954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009958:	f104 021a 	add.w	r2, r4, #26
 800995c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	eba3 0309 	sub.w	r3, r3, r9
 8009964:	455b      	cmp	r3, fp
 8009966:	dc33      	bgt.n	80099d0 <_printf_float+0x384>
 8009968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996c:	429a      	cmp	r2, r3
 800996e:	db3b      	blt.n	80099e8 <_printf_float+0x39c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07da      	lsls	r2, r3, #31
 8009974:	d438      	bmi.n	80099e8 <_printf_float+0x39c>
 8009976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009978:	9a05      	ldr	r2, [sp, #20]
 800997a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800997c:	1a9a      	subs	r2, r3, r2
 800997e:	eba3 0901 	sub.w	r9, r3, r1
 8009982:	4591      	cmp	r9, r2
 8009984:	bfa8      	it	ge
 8009986:	4691      	movge	r9, r2
 8009988:	f1b9 0f00 	cmp.w	r9, #0
 800998c:	dc35      	bgt.n	80099fa <_printf_float+0x3ae>
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009996:	f104 0a1a 	add.w	sl, r4, #26
 800999a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	eba3 0309 	sub.w	r3, r3, r9
 80099a4:	4543      	cmp	r3, r8
 80099a6:	f77f af79 	ble.w	800989c <_printf_float+0x250>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f aeaa 	beq.w	800970e <_printf_float+0xc2>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	e7ec      	b.n	800999a <_printf_float+0x34e>
 80099c0:	4613      	mov	r3, r2
 80099c2:	4631      	mov	r1, r6
 80099c4:	4642      	mov	r2, r8
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b8      	blx	r7
 80099ca:	3001      	adds	r0, #1
 80099cc:	d1c0      	bne.n	8009950 <_printf_float+0x304>
 80099ce:	e69e      	b.n	800970e <_printf_float+0xc2>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	9205      	str	r2, [sp, #20]
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f ae97 	beq.w	800970e <_printf_float+0xc2>
 80099e0:	9a05      	ldr	r2, [sp, #20]
 80099e2:	f10b 0b01 	add.w	fp, fp, #1
 80099e6:	e7b9      	b.n	800995c <_printf_float+0x310>
 80099e8:	ee18 3a10 	vmov	r3, s16
 80099ec:	4652      	mov	r2, sl
 80099ee:	4631      	mov	r1, r6
 80099f0:	4628      	mov	r0, r5
 80099f2:	47b8      	blx	r7
 80099f4:	3001      	adds	r0, #1
 80099f6:	d1be      	bne.n	8009976 <_printf_float+0x32a>
 80099f8:	e689      	b.n	800970e <_printf_float+0xc2>
 80099fa:	9a05      	ldr	r2, [sp, #20]
 80099fc:	464b      	mov	r3, r9
 80099fe:	4442      	add	r2, r8
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	d1c1      	bne.n	800998e <_printf_float+0x342>
 8009a0a:	e680      	b.n	800970e <_printf_float+0xc2>
 8009a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a0e:	2a01      	cmp	r2, #1
 8009a10:	dc01      	bgt.n	8009a16 <_printf_float+0x3ca>
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d538      	bpl.n	8009a88 <_printf_float+0x43c>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4642      	mov	r2, r8
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f ae74 	beq.w	800970e <_printf_float+0xc2>
 8009a26:	ee18 3a10 	vmov	r3, s16
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f ae6b 	beq.w	800970e <_printf_float+0xc2>
 8009a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f7f7 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a44:	b9d8      	cbnz	r0, 8009a7e <_printf_float+0x432>
 8009a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a48:	f108 0201 	add.w	r2, r8, #1
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	d10e      	bne.n	8009a76 <_printf_float+0x42a>
 8009a58:	e659      	b.n	800970e <_printf_float+0xc2>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4652      	mov	r2, sl
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f ae52 	beq.w	800970e <_printf_float+0xc2>
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a70:	3b01      	subs	r3, #1
 8009a72:	4543      	cmp	r3, r8
 8009a74:	dcf1      	bgt.n	8009a5a <_printf_float+0x40e>
 8009a76:	464b      	mov	r3, r9
 8009a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a7c:	e6dc      	b.n	8009838 <_printf_float+0x1ec>
 8009a7e:	f04f 0800 	mov.w	r8, #0
 8009a82:	f104 0a1a 	add.w	sl, r4, #26
 8009a86:	e7f2      	b.n	8009a6e <_printf_float+0x422>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	e7df      	b.n	8009a4e <_printf_float+0x402>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	464a      	mov	r2, r9
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f ae38 	beq.w	800970e <_printf_float+0xc2>
 8009a9e:	f108 0801 	add.w	r8, r8, #1
 8009aa2:	68e3      	ldr	r3, [r4, #12]
 8009aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aa6:	1a5b      	subs	r3, r3, r1
 8009aa8:	4543      	cmp	r3, r8
 8009aaa:	dcf0      	bgt.n	8009a8e <_printf_float+0x442>
 8009aac:	e6fa      	b.n	80098a4 <_printf_float+0x258>
 8009aae:	f04f 0800 	mov.w	r8, #0
 8009ab2:	f104 0919 	add.w	r9, r4, #25
 8009ab6:	e7f4      	b.n	8009aa2 <_printf_float+0x456>

08009ab8 <_printf_common>:
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	4616      	mov	r6, r2
 8009abe:	4699      	mov	r9, r3
 8009ac0:	688a      	ldr	r2, [r1, #8]
 8009ac2:	690b      	ldr	r3, [r1, #16]
 8009ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	bfb8      	it	lt
 8009acc:	4613      	movlt	r3, r2
 8009ace:	6033      	str	r3, [r6, #0]
 8009ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b10a      	cbz	r2, 8009ade <_printf_common+0x26>
 8009ada:	3301      	adds	r3, #1
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	0699      	lsls	r1, r3, #26
 8009ae2:	bf42      	ittt	mi
 8009ae4:	6833      	ldrmi	r3, [r6, #0]
 8009ae6:	3302      	addmi	r3, #2
 8009ae8:	6033      	strmi	r3, [r6, #0]
 8009aea:	6825      	ldr	r5, [r4, #0]
 8009aec:	f015 0506 	ands.w	r5, r5, #6
 8009af0:	d106      	bne.n	8009b00 <_printf_common+0x48>
 8009af2:	f104 0a19 	add.w	sl, r4, #25
 8009af6:	68e3      	ldr	r3, [r4, #12]
 8009af8:	6832      	ldr	r2, [r6, #0]
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	42ab      	cmp	r3, r5
 8009afe:	dc26      	bgt.n	8009b4e <_printf_common+0x96>
 8009b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b04:	1e13      	subs	r3, r2, #0
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	bf18      	it	ne
 8009b0a:	2301      	movne	r3, #1
 8009b0c:	0692      	lsls	r2, r2, #26
 8009b0e:	d42b      	bmi.n	8009b68 <_printf_common+0xb0>
 8009b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b14:	4649      	mov	r1, r9
 8009b16:	4638      	mov	r0, r7
 8009b18:	47c0      	blx	r8
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d01e      	beq.n	8009b5c <_printf_common+0xa4>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	68e5      	ldr	r5, [r4, #12]
 8009b22:	6832      	ldr	r2, [r6, #0]
 8009b24:	f003 0306 	and.w	r3, r3, #6
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	bf08      	it	eq
 8009b2c:	1aad      	subeq	r5, r5, r2
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	6922      	ldr	r2, [r4, #16]
 8009b32:	bf0c      	ite	eq
 8009b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b38:	2500      	movne	r5, #0
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	bfc4      	itt	gt
 8009b3e:	1a9b      	subgt	r3, r3, r2
 8009b40:	18ed      	addgt	r5, r5, r3
 8009b42:	2600      	movs	r6, #0
 8009b44:	341a      	adds	r4, #26
 8009b46:	42b5      	cmp	r5, r6
 8009b48:	d11a      	bne.n	8009b80 <_printf_common+0xc8>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e008      	b.n	8009b60 <_printf_common+0xa8>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4652      	mov	r2, sl
 8009b52:	4649      	mov	r1, r9
 8009b54:	4638      	mov	r0, r7
 8009b56:	47c0      	blx	r8
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d103      	bne.n	8009b64 <_printf_common+0xac>
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b64:	3501      	adds	r5, #1
 8009b66:	e7c6      	b.n	8009af6 <_printf_common+0x3e>
 8009b68:	18e1      	adds	r1, r4, r3
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	2030      	movs	r0, #48	; 0x30
 8009b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b72:	4422      	add	r2, r4
 8009b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b7c:	3302      	adds	r3, #2
 8009b7e:	e7c7      	b.n	8009b10 <_printf_common+0x58>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4622      	mov	r2, r4
 8009b84:	4649      	mov	r1, r9
 8009b86:	4638      	mov	r0, r7
 8009b88:	47c0      	blx	r8
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d0e6      	beq.n	8009b5c <_printf_common+0xa4>
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7d9      	b.n	8009b46 <_printf_common+0x8e>
	...

08009b94 <_printf_i>:
 8009b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	7e0f      	ldrb	r7, [r1, #24]
 8009b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b9c:	2f78      	cmp	r7, #120	; 0x78
 8009b9e:	4691      	mov	r9, r2
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009baa:	d807      	bhi.n	8009bbc <_printf_i+0x28>
 8009bac:	2f62      	cmp	r7, #98	; 0x62
 8009bae:	d80a      	bhi.n	8009bc6 <_printf_i+0x32>
 8009bb0:	2f00      	cmp	r7, #0
 8009bb2:	f000 80d8 	beq.w	8009d66 <_printf_i+0x1d2>
 8009bb6:	2f58      	cmp	r7, #88	; 0x58
 8009bb8:	f000 80a3 	beq.w	8009d02 <_printf_i+0x16e>
 8009bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bc4:	e03a      	b.n	8009c3c <_printf_i+0xa8>
 8009bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bca:	2b15      	cmp	r3, #21
 8009bcc:	d8f6      	bhi.n	8009bbc <_printf_i+0x28>
 8009bce:	a101      	add	r1, pc, #4	; (adr r1, 8009bd4 <_printf_i+0x40>)
 8009bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bd4:	08009c2d 	.word	0x08009c2d
 8009bd8:	08009c41 	.word	0x08009c41
 8009bdc:	08009bbd 	.word	0x08009bbd
 8009be0:	08009bbd 	.word	0x08009bbd
 8009be4:	08009bbd 	.word	0x08009bbd
 8009be8:	08009bbd 	.word	0x08009bbd
 8009bec:	08009c41 	.word	0x08009c41
 8009bf0:	08009bbd 	.word	0x08009bbd
 8009bf4:	08009bbd 	.word	0x08009bbd
 8009bf8:	08009bbd 	.word	0x08009bbd
 8009bfc:	08009bbd 	.word	0x08009bbd
 8009c00:	08009d4d 	.word	0x08009d4d
 8009c04:	08009c71 	.word	0x08009c71
 8009c08:	08009d2f 	.word	0x08009d2f
 8009c0c:	08009bbd 	.word	0x08009bbd
 8009c10:	08009bbd 	.word	0x08009bbd
 8009c14:	08009d6f 	.word	0x08009d6f
 8009c18:	08009bbd 	.word	0x08009bbd
 8009c1c:	08009c71 	.word	0x08009c71
 8009c20:	08009bbd 	.word	0x08009bbd
 8009c24:	08009bbd 	.word	0x08009bbd
 8009c28:	08009d37 	.word	0x08009d37
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	1d1a      	adds	r2, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	602a      	str	r2, [r5, #0]
 8009c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0a3      	b.n	8009d88 <_printf_i+0x1f4>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	6829      	ldr	r1, [r5, #0]
 8009c44:	0606      	lsls	r6, r0, #24
 8009c46:	f101 0304 	add.w	r3, r1, #4
 8009c4a:	d50a      	bpl.n	8009c62 <_printf_i+0xce>
 8009c4c:	680e      	ldr	r6, [r1, #0]
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	2e00      	cmp	r6, #0
 8009c52:	da03      	bge.n	8009c5c <_printf_i+0xc8>
 8009c54:	232d      	movs	r3, #45	; 0x2d
 8009c56:	4276      	negs	r6, r6
 8009c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5c:	485e      	ldr	r0, [pc, #376]	; (8009dd8 <_printf_i+0x244>)
 8009c5e:	230a      	movs	r3, #10
 8009c60:	e019      	b.n	8009c96 <_printf_i+0x102>
 8009c62:	680e      	ldr	r6, [r1, #0]
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c6a:	bf18      	it	ne
 8009c6c:	b236      	sxthne	r6, r6
 8009c6e:	e7ef      	b.n	8009c50 <_printf_i+0xbc>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	6820      	ldr	r0, [r4, #0]
 8009c74:	1d19      	adds	r1, r3, #4
 8009c76:	6029      	str	r1, [r5, #0]
 8009c78:	0601      	lsls	r1, r0, #24
 8009c7a:	d501      	bpl.n	8009c80 <_printf_i+0xec>
 8009c7c:	681e      	ldr	r6, [r3, #0]
 8009c7e:	e002      	b.n	8009c86 <_printf_i+0xf2>
 8009c80:	0646      	lsls	r6, r0, #25
 8009c82:	d5fb      	bpl.n	8009c7c <_printf_i+0xe8>
 8009c84:	881e      	ldrh	r6, [r3, #0]
 8009c86:	4854      	ldr	r0, [pc, #336]	; (8009dd8 <_printf_i+0x244>)
 8009c88:	2f6f      	cmp	r7, #111	; 0x6f
 8009c8a:	bf0c      	ite	eq
 8009c8c:	2308      	moveq	r3, #8
 8009c8e:	230a      	movne	r3, #10
 8009c90:	2100      	movs	r1, #0
 8009c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c96:	6865      	ldr	r5, [r4, #4]
 8009c98:	60a5      	str	r5, [r4, #8]
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	bfa2      	ittt	ge
 8009c9e:	6821      	ldrge	r1, [r4, #0]
 8009ca0:	f021 0104 	bicge.w	r1, r1, #4
 8009ca4:	6021      	strge	r1, [r4, #0]
 8009ca6:	b90e      	cbnz	r6, 8009cac <_printf_i+0x118>
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	d04d      	beq.n	8009d48 <_printf_i+0x1b4>
 8009cac:	4615      	mov	r5, r2
 8009cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8009cb6:	5dc7      	ldrb	r7, [r0, r7]
 8009cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	42bb      	cmp	r3, r7
 8009cc0:	460e      	mov	r6, r1
 8009cc2:	d9f4      	bls.n	8009cae <_printf_i+0x11a>
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d10b      	bne.n	8009ce0 <_printf_i+0x14c>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	07de      	lsls	r6, r3, #31
 8009ccc:	d508      	bpl.n	8009ce0 <_printf_i+0x14c>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	bfde      	ittt	le
 8009cd6:	2330      	movle	r3, #48	; 0x30
 8009cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ce0:	1b52      	subs	r2, r2, r5
 8009ce2:	6122      	str	r2, [r4, #16]
 8009ce4:	f8cd a000 	str.w	sl, [sp]
 8009ce8:	464b      	mov	r3, r9
 8009cea:	aa03      	add	r2, sp, #12
 8009cec:	4621      	mov	r1, r4
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f7ff fee2 	bl	8009ab8 <_printf_common>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d14c      	bne.n	8009d92 <_printf_i+0x1fe>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	b004      	add	sp, #16
 8009cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d02:	4835      	ldr	r0, [pc, #212]	; (8009dd8 <_printf_i+0x244>)
 8009d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d08:	6829      	ldr	r1, [r5, #0]
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d10:	6029      	str	r1, [r5, #0]
 8009d12:	061d      	lsls	r5, r3, #24
 8009d14:	d514      	bpl.n	8009d40 <_printf_i+0x1ac>
 8009d16:	07df      	lsls	r7, r3, #31
 8009d18:	bf44      	itt	mi
 8009d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d1e:	6023      	strmi	r3, [r4, #0]
 8009d20:	b91e      	cbnz	r6, 8009d2a <_printf_i+0x196>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	f023 0320 	bic.w	r3, r3, #32
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	2310      	movs	r3, #16
 8009d2c:	e7b0      	b.n	8009c90 <_printf_i+0xfc>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f043 0320 	orr.w	r3, r3, #32
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	2378      	movs	r3, #120	; 0x78
 8009d38:	4828      	ldr	r0, [pc, #160]	; (8009ddc <_printf_i+0x248>)
 8009d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d3e:	e7e3      	b.n	8009d08 <_printf_i+0x174>
 8009d40:	0659      	lsls	r1, r3, #25
 8009d42:	bf48      	it	mi
 8009d44:	b2b6      	uxthmi	r6, r6
 8009d46:	e7e6      	b.n	8009d16 <_printf_i+0x182>
 8009d48:	4615      	mov	r5, r2
 8009d4a:	e7bb      	b.n	8009cc4 <_printf_i+0x130>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	6826      	ldr	r6, [r4, #0]
 8009d50:	6961      	ldr	r1, [r4, #20]
 8009d52:	1d18      	adds	r0, r3, #4
 8009d54:	6028      	str	r0, [r5, #0]
 8009d56:	0635      	lsls	r5, r6, #24
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	d501      	bpl.n	8009d60 <_printf_i+0x1cc>
 8009d5c:	6019      	str	r1, [r3, #0]
 8009d5e:	e002      	b.n	8009d66 <_printf_i+0x1d2>
 8009d60:	0670      	lsls	r0, r6, #25
 8009d62:	d5fb      	bpl.n	8009d5c <_printf_i+0x1c8>
 8009d64:	8019      	strh	r1, [r3, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	e7ba      	b.n	8009ce4 <_printf_i+0x150>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	1d1a      	adds	r2, r3, #4
 8009d72:	602a      	str	r2, [r5, #0]
 8009d74:	681d      	ldr	r5, [r3, #0]
 8009d76:	6862      	ldr	r2, [r4, #4]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f7f6 fa38 	bl	80001f0 <memchr>
 8009d80:	b108      	cbz	r0, 8009d86 <_printf_i+0x1f2>
 8009d82:	1b40      	subs	r0, r0, r5
 8009d84:	6060      	str	r0, [r4, #4]
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d90:	e7a8      	b.n	8009ce4 <_printf_i+0x150>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	462a      	mov	r2, r5
 8009d96:	4649      	mov	r1, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	47d0      	blx	sl
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d0ab      	beq.n	8009cf8 <_printf_i+0x164>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	079b      	lsls	r3, r3, #30
 8009da4:	d413      	bmi.n	8009dce <_printf_i+0x23a>
 8009da6:	68e0      	ldr	r0, [r4, #12]
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	4298      	cmp	r0, r3
 8009dac:	bfb8      	it	lt
 8009dae:	4618      	movlt	r0, r3
 8009db0:	e7a4      	b.n	8009cfc <_printf_i+0x168>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4632      	mov	r2, r6
 8009db6:	4649      	mov	r1, r9
 8009db8:	4640      	mov	r0, r8
 8009dba:	47d0      	blx	sl
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d09b      	beq.n	8009cf8 <_printf_i+0x164>
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	9903      	ldr	r1, [sp, #12]
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	dcf2      	bgt.n	8009db2 <_printf_i+0x21e>
 8009dcc:	e7eb      	b.n	8009da6 <_printf_i+0x212>
 8009dce:	2500      	movs	r5, #0
 8009dd0:	f104 0619 	add.w	r6, r4, #25
 8009dd4:	e7f5      	b.n	8009dc2 <_printf_i+0x22e>
 8009dd6:	bf00      	nop
 8009dd8:	0800c382 	.word	0x0800c382
 8009ddc:	0800c393 	.word	0x0800c393

08009de0 <siprintf>:
 8009de0:	b40e      	push	{r1, r2, r3}
 8009de2:	b500      	push	{lr}
 8009de4:	b09c      	sub	sp, #112	; 0x70
 8009de6:	ab1d      	add	r3, sp, #116	; 0x74
 8009de8:	9002      	str	r0, [sp, #8]
 8009dea:	9006      	str	r0, [sp, #24]
 8009dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009df0:	4809      	ldr	r0, [pc, #36]	; (8009e18 <siprintf+0x38>)
 8009df2:	9107      	str	r1, [sp, #28]
 8009df4:	9104      	str	r1, [sp, #16]
 8009df6:	4909      	ldr	r1, [pc, #36]	; (8009e1c <siprintf+0x3c>)
 8009df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfc:	9105      	str	r1, [sp, #20]
 8009dfe:	6800      	ldr	r0, [r0, #0]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	a902      	add	r1, sp, #8
 8009e04:	f001 fb76 	bl	800b4f4 <_svfiprintf_r>
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	b01c      	add	sp, #112	; 0x70
 8009e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e14:	b003      	add	sp, #12
 8009e16:	4770      	bx	lr
 8009e18:	200000fc 	.word	0x200000fc
 8009e1c:	ffff0208 	.word	0xffff0208

08009e20 <quorem>:
 8009e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	6903      	ldr	r3, [r0, #16]
 8009e26:	690c      	ldr	r4, [r1, #16]
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	f2c0 8081 	blt.w	8009f32 <quorem+0x112>
 8009e30:	3c01      	subs	r4, #1
 8009e32:	f101 0814 	add.w	r8, r1, #20
 8009e36:	f100 0514 	add.w	r5, r0, #20
 8009e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e54:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e58:	d331      	bcc.n	8009ebe <quorem+0x9e>
 8009e5a:	f04f 0e00 	mov.w	lr, #0
 8009e5e:	4640      	mov	r0, r8
 8009e60:	46ac      	mov	ip, r5
 8009e62:	46f2      	mov	sl, lr
 8009e64:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e68:	b293      	uxth	r3, r2
 8009e6a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ebaa 0303 	sub.w	r3, sl, r3
 8009e78:	f8dc a000 	ldr.w	sl, [ip]
 8009e7c:	0c12      	lsrs	r2, r2, #16
 8009e7e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e82:	fb06 e202 	mla	r2, r6, r2, lr
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e8e:	b292      	uxth	r2, r2
 8009e90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e98:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e9c:	4581      	cmp	r9, r0
 8009e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ea2:	f84c 3b04 	str.w	r3, [ip], #4
 8009ea6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009eaa:	d2db      	bcs.n	8009e64 <quorem+0x44>
 8009eac:	f855 300b 	ldr.w	r3, [r5, fp]
 8009eb0:	b92b      	cbnz	r3, 8009ebe <quorem+0x9e>
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	d32e      	bcc.n	8009f1a <quorem+0xfa>
 8009ebc:	613c      	str	r4, [r7, #16]
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f001 f8c4 	bl	800b04c <__mcmp>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	db24      	blt.n	8009f12 <quorem+0xf2>
 8009ec8:	3601      	adds	r6, #1
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f04f 0c00 	mov.w	ip, #0
 8009ed0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ed4:	f8d0 e000 	ldr.w	lr, [r0]
 8009ed8:	b293      	uxth	r3, r2
 8009eda:	ebac 0303 	sub.w	r3, ip, r3
 8009ede:	0c12      	lsrs	r2, r2, #16
 8009ee0:	fa13 f38e 	uxtah	r3, r3, lr
 8009ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ef2:	45c1      	cmp	r9, r8
 8009ef4:	f840 3b04 	str.w	r3, [r0], #4
 8009ef8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009efc:	d2e8      	bcs.n	8009ed0 <quorem+0xb0>
 8009efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f06:	b922      	cbnz	r2, 8009f12 <quorem+0xf2>
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	429d      	cmp	r5, r3
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	d30a      	bcc.n	8009f26 <quorem+0x106>
 8009f10:	613c      	str	r4, [r7, #16]
 8009f12:	4630      	mov	r0, r6
 8009f14:	b003      	add	sp, #12
 8009f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	3b04      	subs	r3, #4
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	d1cc      	bne.n	8009ebc <quorem+0x9c>
 8009f22:	3c01      	subs	r4, #1
 8009f24:	e7c7      	b.n	8009eb6 <quorem+0x96>
 8009f26:	6812      	ldr	r2, [r2, #0]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d1f0      	bne.n	8009f10 <quorem+0xf0>
 8009f2e:	3c01      	subs	r4, #1
 8009f30:	e7eb      	b.n	8009f0a <quorem+0xea>
 8009f32:	2000      	movs	r0, #0
 8009f34:	e7ee      	b.n	8009f14 <quorem+0xf4>
	...

08009f38 <_dtoa_r>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	ed2d 8b04 	vpush	{d8-d9}
 8009f40:	ec57 6b10 	vmov	r6, r7, d0
 8009f44:	b093      	sub	sp, #76	; 0x4c
 8009f46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f4c:	9106      	str	r1, [sp, #24]
 8009f4e:	ee10 aa10 	vmov	sl, s0
 8009f52:	4604      	mov	r4, r0
 8009f54:	9209      	str	r2, [sp, #36]	; 0x24
 8009f56:	930c      	str	r3, [sp, #48]	; 0x30
 8009f58:	46bb      	mov	fp, r7
 8009f5a:	b975      	cbnz	r5, 8009f7a <_dtoa_r+0x42>
 8009f5c:	2010      	movs	r0, #16
 8009f5e:	f000 fddd 	bl	800ab1c <malloc>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6260      	str	r0, [r4, #36]	; 0x24
 8009f66:	b920      	cbnz	r0, 8009f72 <_dtoa_r+0x3a>
 8009f68:	4ba7      	ldr	r3, [pc, #668]	; (800a208 <_dtoa_r+0x2d0>)
 8009f6a:	21ea      	movs	r1, #234	; 0xea
 8009f6c:	48a7      	ldr	r0, [pc, #668]	; (800a20c <_dtoa_r+0x2d4>)
 8009f6e:	f001 fbd1 	bl	800b714 <__assert_func>
 8009f72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f76:	6005      	str	r5, [r0, #0]
 8009f78:	60c5      	str	r5, [r0, #12]
 8009f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7c:	6819      	ldr	r1, [r3, #0]
 8009f7e:	b151      	cbz	r1, 8009f96 <_dtoa_r+0x5e>
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	604a      	str	r2, [r1, #4]
 8009f84:	2301      	movs	r3, #1
 8009f86:	4093      	lsls	r3, r2
 8009f88:	608b      	str	r3, [r1, #8]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fe1c 	bl	800abc8 <_Bfree>
 8009f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	1e3b      	subs	r3, r7, #0
 8009f98:	bfaa      	itet	ge
 8009f9a:	2300      	movge	r3, #0
 8009f9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fa0:	f8c8 3000 	strge.w	r3, [r8]
 8009fa4:	4b9a      	ldr	r3, [pc, #616]	; (800a210 <_dtoa_r+0x2d8>)
 8009fa6:	bfbc      	itt	lt
 8009fa8:	2201      	movlt	r2, #1
 8009faa:	f8c8 2000 	strlt.w	r2, [r8]
 8009fae:	ea33 030b 	bics.w	r3, r3, fp
 8009fb2:	d11b      	bne.n	8009fec <_dtoa_r+0xb4>
 8009fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc0:	4333      	orrs	r3, r6
 8009fc2:	f000 8592 	beq.w	800aaea <_dtoa_r+0xbb2>
 8009fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc8:	b963      	cbnz	r3, 8009fe4 <_dtoa_r+0xac>
 8009fca:	4b92      	ldr	r3, [pc, #584]	; (800a214 <_dtoa_r+0x2dc>)
 8009fcc:	e022      	b.n	800a014 <_dtoa_r+0xdc>
 8009fce:	4b92      	ldr	r3, [pc, #584]	; (800a218 <_dtoa_r+0x2e0>)
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	9801      	ldr	r0, [sp, #4]
 8009fda:	b013      	add	sp, #76	; 0x4c
 8009fdc:	ecbd 8b04 	vpop	{d8-d9}
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	4b8b      	ldr	r3, [pc, #556]	; (800a214 <_dtoa_r+0x2dc>)
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	3303      	adds	r3, #3
 8009fea:	e7f3      	b.n	8009fd4 <_dtoa_r+0x9c>
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff8:	ec4b ab19 	vmov	d9, sl, fp
 8009ffc:	4680      	mov	r8, r0
 8009ffe:	b158      	cbz	r0, 800a018 <_dtoa_r+0xe0>
 800a000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a002:	2301      	movs	r3, #1
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 856b 	beq.w	800aae4 <_dtoa_r+0xbac>
 800a00e:	4883      	ldr	r0, [pc, #524]	; (800a21c <_dtoa_r+0x2e4>)
 800a010:	6018      	str	r0, [r3, #0]
 800a012:	1e43      	subs	r3, r0, #1
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	e7df      	b.n	8009fd8 <_dtoa_r+0xa0>
 800a018:	ec4b ab10 	vmov	d0, sl, fp
 800a01c:	aa10      	add	r2, sp, #64	; 0x40
 800a01e:	a911      	add	r1, sp, #68	; 0x44
 800a020:	4620      	mov	r0, r4
 800a022:	f001 f8b9 	bl	800b198 <__d2b>
 800a026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a02a:	ee08 0a10 	vmov	s16, r0
 800a02e:	2d00      	cmp	r5, #0
 800a030:	f000 8084 	beq.w	800a13c <_dtoa_r+0x204>
 800a034:	ee19 3a90 	vmov	r3, s19
 800a038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a03c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a040:	4656      	mov	r6, sl
 800a042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a04a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a04e:	4b74      	ldr	r3, [pc, #464]	; (800a220 <_dtoa_r+0x2e8>)
 800a050:	2200      	movs	r2, #0
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f91f 	bl	8000298 <__aeabi_dsub>
 800a05a:	a365      	add	r3, pc, #404	; (adr r3, 800a1f0 <_dtoa_r+0x2b8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 fad2 	bl	8000608 <__aeabi_dmul>
 800a064:	a364      	add	r3, pc, #400	; (adr r3, 800a1f8 <_dtoa_r+0x2c0>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7f6 f917 	bl	800029c <__adddf3>
 800a06e:	4606      	mov	r6, r0
 800a070:	4628      	mov	r0, r5
 800a072:	460f      	mov	r7, r1
 800a074:	f7f6 fa5e 	bl	8000534 <__aeabi_i2d>
 800a078:	a361      	add	r3, pc, #388	; (adr r3, 800a200 <_dtoa_r+0x2c8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 fac3 	bl	8000608 <__aeabi_dmul>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f907 	bl	800029c <__adddf3>
 800a08e:	4606      	mov	r6, r0
 800a090:	460f      	mov	r7, r1
 800a092:	f7f6 fd69 	bl	8000b68 <__aeabi_d2iz>
 800a096:	2200      	movs	r2, #0
 800a098:	9000      	str	r0, [sp, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 fd24 	bl	8000aec <__aeabi_dcmplt>
 800a0a4:	b150      	cbz	r0, 800a0bc <_dtoa_r+0x184>
 800a0a6:	9800      	ldr	r0, [sp, #0]
 800a0a8:	f7f6 fa44 	bl	8000534 <__aeabi_i2d>
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	f7f6 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b4:	b910      	cbnz	r0, 800a0bc <_dtoa_r+0x184>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	9b00      	ldr	r3, [sp, #0]
 800a0be:	2b16      	cmp	r3, #22
 800a0c0:	d85a      	bhi.n	800a178 <_dtoa_r+0x240>
 800a0c2:	9a00      	ldr	r2, [sp, #0]
 800a0c4:	4b57      	ldr	r3, [pc, #348]	; (800a224 <_dtoa_r+0x2ec>)
 800a0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	ec51 0b19 	vmov	r0, r1, d9
 800a0d2:	f7f6 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d050      	beq.n	800a17c <_dtoa_r+0x244>
 800a0da:	9b00      	ldr	r3, [sp, #0]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0e6:	1b5d      	subs	r5, r3, r5
 800a0e8:	1e6b      	subs	r3, r5, #1
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	bf45      	ittet	mi
 800a0ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0f2:	9304      	strmi	r3, [sp, #16]
 800a0f4:	2300      	movpl	r3, #0
 800a0f6:	2300      	movmi	r3, #0
 800a0f8:	bf4c      	ite	mi
 800a0fa:	9305      	strmi	r3, [sp, #20]
 800a0fc:	9304      	strpl	r3, [sp, #16]
 800a0fe:	9b00      	ldr	r3, [sp, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	db3d      	blt.n	800a180 <_dtoa_r+0x248>
 800a104:	9b05      	ldr	r3, [sp, #20]
 800a106:	9a00      	ldr	r2, [sp, #0]
 800a108:	920a      	str	r2, [sp, #40]	; 0x28
 800a10a:	4413      	add	r3, r2
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	2300      	movs	r3, #0
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	9b06      	ldr	r3, [sp, #24]
 800a114:	2b09      	cmp	r3, #9
 800a116:	f200 8089 	bhi.w	800a22c <_dtoa_r+0x2f4>
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	bfc4      	itt	gt
 800a11e:	3b04      	subgt	r3, #4
 800a120:	9306      	strgt	r3, [sp, #24]
 800a122:	9b06      	ldr	r3, [sp, #24]
 800a124:	f1a3 0302 	sub.w	r3, r3, #2
 800a128:	bfcc      	ite	gt
 800a12a:	2500      	movgt	r5, #0
 800a12c:	2501      	movle	r5, #1
 800a12e:	2b03      	cmp	r3, #3
 800a130:	f200 8087 	bhi.w	800a242 <_dtoa_r+0x30a>
 800a134:	e8df f003 	tbb	[pc, r3]
 800a138:	59383a2d 	.word	0x59383a2d
 800a13c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a140:	441d      	add	r5, r3
 800a142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a146:	2b20      	cmp	r3, #32
 800a148:	bfc1      	itttt	gt
 800a14a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a14e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a152:	fa0b f303 	lslgt.w	r3, fp, r3
 800a156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a15a:	bfda      	itte	le
 800a15c:	f1c3 0320 	rsble	r3, r3, #32
 800a160:	fa06 f003 	lslle.w	r0, r6, r3
 800a164:	4318      	orrgt	r0, r3
 800a166:	f7f6 f9d5 	bl	8000514 <__aeabi_ui2d>
 800a16a:	2301      	movs	r3, #1
 800a16c:	4606      	mov	r6, r0
 800a16e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a172:	3d01      	subs	r5, #1
 800a174:	930e      	str	r3, [sp, #56]	; 0x38
 800a176:	e76a      	b.n	800a04e <_dtoa_r+0x116>
 800a178:	2301      	movs	r3, #1
 800a17a:	e7b2      	b.n	800a0e2 <_dtoa_r+0x1aa>
 800a17c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a17e:	e7b1      	b.n	800a0e4 <_dtoa_r+0x1ac>
 800a180:	9b04      	ldr	r3, [sp, #16]
 800a182:	9a00      	ldr	r2, [sp, #0]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	4253      	negs	r3, r2
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	2300      	movs	r3, #0
 800a18e:	930a      	str	r3, [sp, #40]	; 0x28
 800a190:	e7bf      	b.n	800a112 <_dtoa_r+0x1da>
 800a192:	2300      	movs	r3, #0
 800a194:	9308      	str	r3, [sp, #32]
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dc55      	bgt.n	800a248 <_dtoa_r+0x310>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1a6:	e00c      	b.n	800a1c2 <_dtoa_r+0x28a>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e7f3      	b.n	800a194 <_dtoa_r+0x25c>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b0:	9308      	str	r3, [sp, #32]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	9303      	str	r3, [sp, #12]
 800a1be:	bfb8      	it	lt
 800a1c0:	2301      	movlt	r3, #1
 800a1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6042      	str	r2, [r0, #4]
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	f102 0614 	add.w	r6, r2, #20
 800a1ce:	429e      	cmp	r6, r3
 800a1d0:	6841      	ldr	r1, [r0, #4]
 800a1d2:	d93d      	bls.n	800a250 <_dtoa_r+0x318>
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fcb7 	bl	800ab48 <_Balloc>
 800a1da:	9001      	str	r0, [sp, #4]
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d13b      	bne.n	800a258 <_dtoa_r+0x320>
 800a1e0:	4b11      	ldr	r3, [pc, #68]	; (800a228 <_dtoa_r+0x2f0>)
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1e8:	e6c0      	b.n	8009f6c <_dtoa_r+0x34>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e7df      	b.n	800a1ae <_dtoa_r+0x276>
 800a1ee:	bf00      	nop
 800a1f0:	636f4361 	.word	0x636f4361
 800a1f4:	3fd287a7 	.word	0x3fd287a7
 800a1f8:	8b60c8b3 	.word	0x8b60c8b3
 800a1fc:	3fc68a28 	.word	0x3fc68a28
 800a200:	509f79fb 	.word	0x509f79fb
 800a204:	3fd34413 	.word	0x3fd34413
 800a208:	0800c3b1 	.word	0x0800c3b1
 800a20c:	0800c3c8 	.word	0x0800c3c8
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	0800c3ad 	.word	0x0800c3ad
 800a218:	0800c3a4 	.word	0x0800c3a4
 800a21c:	0800c381 	.word	0x0800c381
 800a220:	3ff80000 	.word	0x3ff80000
 800a224:	0800c4b8 	.word	0x0800c4b8
 800a228:	0800c423 	.word	0x0800c423
 800a22c:	2501      	movs	r5, #1
 800a22e:	2300      	movs	r3, #0
 800a230:	9306      	str	r3, [sp, #24]
 800a232:	9508      	str	r5, [sp, #32]
 800a234:	f04f 33ff 	mov.w	r3, #4294967295
 800a238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a23c:	2200      	movs	r2, #0
 800a23e:	2312      	movs	r3, #18
 800a240:	e7b0      	b.n	800a1a4 <_dtoa_r+0x26c>
 800a242:	2301      	movs	r3, #1
 800a244:	9308      	str	r3, [sp, #32]
 800a246:	e7f5      	b.n	800a234 <_dtoa_r+0x2fc>
 800a248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a24e:	e7b8      	b.n	800a1c2 <_dtoa_r+0x28a>
 800a250:	3101      	adds	r1, #1
 800a252:	6041      	str	r1, [r0, #4]
 800a254:	0052      	lsls	r2, r2, #1
 800a256:	e7b8      	b.n	800a1ca <_dtoa_r+0x292>
 800a258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25a:	9a01      	ldr	r2, [sp, #4]
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	2b0e      	cmp	r3, #14
 800a262:	f200 809d 	bhi.w	800a3a0 <_dtoa_r+0x468>
 800a266:	2d00      	cmp	r5, #0
 800a268:	f000 809a 	beq.w	800a3a0 <_dtoa_r+0x468>
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dd32      	ble.n	800a2d8 <_dtoa_r+0x3a0>
 800a272:	4ab7      	ldr	r2, [pc, #732]	; (800a550 <_dtoa_r+0x618>)
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a27c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a280:	9b00      	ldr	r3, [sp, #0]
 800a282:	05d8      	lsls	r0, r3, #23
 800a284:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a288:	d516      	bpl.n	800a2b8 <_dtoa_r+0x380>
 800a28a:	4bb2      	ldr	r3, [pc, #712]	; (800a554 <_dtoa_r+0x61c>)
 800a28c:	ec51 0b19 	vmov	r0, r1, d9
 800a290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a294:	f7f6 fae2 	bl	800085c <__aeabi_ddiv>
 800a298:	f007 070f 	and.w	r7, r7, #15
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	2503      	movs	r5, #3
 800a2a2:	4eac      	ldr	r6, [pc, #688]	; (800a554 <_dtoa_r+0x61c>)
 800a2a4:	b957      	cbnz	r7, 800a2bc <_dtoa_r+0x384>
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	f7f6 fad5 	bl	800085c <__aeabi_ddiv>
 800a2b2:	4682      	mov	sl, r0
 800a2b4:	468b      	mov	fp, r1
 800a2b6:	e028      	b.n	800a30a <_dtoa_r+0x3d2>
 800a2b8:	2502      	movs	r5, #2
 800a2ba:	e7f2      	b.n	800a2a2 <_dtoa_r+0x36a>
 800a2bc:	07f9      	lsls	r1, r7, #31
 800a2be:	d508      	bpl.n	800a2d2 <_dtoa_r+0x39a>
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	107f      	asrs	r7, r7, #1
 800a2d4:	3608      	adds	r6, #8
 800a2d6:	e7e5      	b.n	800a2a4 <_dtoa_r+0x36c>
 800a2d8:	f000 809b 	beq.w	800a412 <_dtoa_r+0x4da>
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	4f9d      	ldr	r7, [pc, #628]	; (800a554 <_dtoa_r+0x61c>)
 800a2e0:	425e      	negs	r6, r3
 800a2e2:	4b9b      	ldr	r3, [pc, #620]	; (800a550 <_dtoa_r+0x618>)
 800a2e4:	f006 020f 	and.w	r2, r6, #15
 800a2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	ec51 0b19 	vmov	r0, r1, d9
 800a2f4:	f7f6 f988 	bl	8000608 <__aeabi_dmul>
 800a2f8:	1136      	asrs	r6, r6, #4
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	2300      	movs	r3, #0
 800a300:	2502      	movs	r5, #2
 800a302:	2e00      	cmp	r6, #0
 800a304:	d17a      	bne.n	800a3fc <_dtoa_r+0x4c4>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1d3      	bne.n	800a2b2 <_dtoa_r+0x37a>
 800a30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8082 	beq.w	800a416 <_dtoa_r+0x4de>
 800a312:	4b91      	ldr	r3, [pc, #580]	; (800a558 <_dtoa_r+0x620>)
 800a314:	2200      	movs	r2, #0
 800a316:	4650      	mov	r0, sl
 800a318:	4659      	mov	r1, fp
 800a31a:	f7f6 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d079      	beq.n	800a416 <_dtoa_r+0x4de>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d076      	beq.n	800a416 <_dtoa_r+0x4de>
 800a328:	9b02      	ldr	r3, [sp, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	dd36      	ble.n	800a39c <_dtoa_r+0x464>
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	4650      	mov	r0, sl
 800a332:	4659      	mov	r1, fp
 800a334:	1e5f      	subs	r7, r3, #1
 800a336:	2200      	movs	r2, #0
 800a338:	4b88      	ldr	r3, [pc, #544]	; (800a55c <_dtoa_r+0x624>)
 800a33a:	f7f6 f965 	bl	8000608 <__aeabi_dmul>
 800a33e:	9e02      	ldr	r6, [sp, #8]
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	3501      	adds	r5, #1
 800a346:	4628      	mov	r0, r5
 800a348:	f7f6 f8f4 	bl	8000534 <__aeabi_i2d>
 800a34c:	4652      	mov	r2, sl
 800a34e:	465b      	mov	r3, fp
 800a350:	f7f6 f95a 	bl	8000608 <__aeabi_dmul>
 800a354:	4b82      	ldr	r3, [pc, #520]	; (800a560 <_dtoa_r+0x628>)
 800a356:	2200      	movs	r2, #0
 800a358:	f7f5 ffa0 	bl	800029c <__adddf3>
 800a35c:	46d0      	mov	r8, sl
 800a35e:	46d9      	mov	r9, fp
 800a360:	4682      	mov	sl, r0
 800a362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a366:	2e00      	cmp	r6, #0
 800a368:	d158      	bne.n	800a41c <_dtoa_r+0x4e4>
 800a36a:	4b7e      	ldr	r3, [pc, #504]	; (800a564 <_dtoa_r+0x62c>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	4640      	mov	r0, r8
 800a370:	4649      	mov	r1, r9
 800a372:	f7f5 ff91 	bl	8000298 <__aeabi_dsub>
 800a376:	4652      	mov	r2, sl
 800a378:	465b      	mov	r3, fp
 800a37a:	4680      	mov	r8, r0
 800a37c:	4689      	mov	r9, r1
 800a37e:	f7f6 fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 800a382:	2800      	cmp	r0, #0
 800a384:	f040 8295 	bne.w	800a8b2 <_dtoa_r+0x97a>
 800a388:	4652      	mov	r2, sl
 800a38a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 fbab 	bl	8000aec <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f040 8289 	bne.w	800a8ae <_dtoa_r+0x976>
 800a39c:	ec5b ab19 	vmov	sl, fp, d9
 800a3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f2c0 8148 	blt.w	800a638 <_dtoa_r+0x700>
 800a3a8:	9a00      	ldr	r2, [sp, #0]
 800a3aa:	2a0e      	cmp	r2, #14
 800a3ac:	f300 8144 	bgt.w	800a638 <_dtoa_r+0x700>
 800a3b0:	4b67      	ldr	r3, [pc, #412]	; (800a550 <_dtoa_r+0x618>)
 800a3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f280 80d5 	bge.w	800a56c <_dtoa_r+0x634>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f300 80d1 	bgt.w	800a56c <_dtoa_r+0x634>
 800a3ca:	f040 826f 	bne.w	800a8ac <_dtoa_r+0x974>
 800a3ce:	4b65      	ldr	r3, [pc, #404]	; (800a564 <_dtoa_r+0x62c>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	4652      	mov	r2, sl
 800a3dc:	465b      	mov	r3, fp
 800a3de:	f7f6 fb99 	bl	8000b14 <__aeabi_dcmpge>
 800a3e2:	9e03      	ldr	r6, [sp, #12]
 800a3e4:	4637      	mov	r7, r6
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f040 8245 	bne.w	800a876 <_dtoa_r+0x93e>
 800a3ec:	9d01      	ldr	r5, [sp, #4]
 800a3ee:	2331      	movs	r3, #49	; 0x31
 800a3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	e240      	b.n	800a87e <_dtoa_r+0x946>
 800a3fc:	07f2      	lsls	r2, r6, #31
 800a3fe:	d505      	bpl.n	800a40c <_dtoa_r+0x4d4>
 800a400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a404:	f7f6 f900 	bl	8000608 <__aeabi_dmul>
 800a408:	3501      	adds	r5, #1
 800a40a:	2301      	movs	r3, #1
 800a40c:	1076      	asrs	r6, r6, #1
 800a40e:	3708      	adds	r7, #8
 800a410:	e777      	b.n	800a302 <_dtoa_r+0x3ca>
 800a412:	2502      	movs	r5, #2
 800a414:	e779      	b.n	800a30a <_dtoa_r+0x3d2>
 800a416:	9f00      	ldr	r7, [sp, #0]
 800a418:	9e03      	ldr	r6, [sp, #12]
 800a41a:	e794      	b.n	800a346 <_dtoa_r+0x40e>
 800a41c:	9901      	ldr	r1, [sp, #4]
 800a41e:	4b4c      	ldr	r3, [pc, #304]	; (800a550 <_dtoa_r+0x618>)
 800a420:	4431      	add	r1, r6
 800a422:	910d      	str	r1, [sp, #52]	; 0x34
 800a424:	9908      	ldr	r1, [sp, #32]
 800a426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a42a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a42e:	2900      	cmp	r1, #0
 800a430:	d043      	beq.n	800a4ba <_dtoa_r+0x582>
 800a432:	494d      	ldr	r1, [pc, #308]	; (800a568 <_dtoa_r+0x630>)
 800a434:	2000      	movs	r0, #0
 800a436:	f7f6 fa11 	bl	800085c <__aeabi_ddiv>
 800a43a:	4652      	mov	r2, sl
 800a43c:	465b      	mov	r3, fp
 800a43e:	f7f5 ff2b 	bl	8000298 <__aeabi_dsub>
 800a442:	9d01      	ldr	r5, [sp, #4]
 800a444:	4682      	mov	sl, r0
 800a446:	468b      	mov	fp, r1
 800a448:	4649      	mov	r1, r9
 800a44a:	4640      	mov	r0, r8
 800a44c:	f7f6 fb8c 	bl	8000b68 <__aeabi_d2iz>
 800a450:	4606      	mov	r6, r0
 800a452:	f7f6 f86f 	bl	8000534 <__aeabi_i2d>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 ff1b 	bl	8000298 <__aeabi_dsub>
 800a462:	3630      	adds	r6, #48	; 0x30
 800a464:	f805 6b01 	strb.w	r6, [r5], #1
 800a468:	4652      	mov	r2, sl
 800a46a:	465b      	mov	r3, fp
 800a46c:	4680      	mov	r8, r0
 800a46e:	4689      	mov	r9, r1
 800a470:	f7f6 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	d163      	bne.n	800a540 <_dtoa_r+0x608>
 800a478:	4642      	mov	r2, r8
 800a47a:	464b      	mov	r3, r9
 800a47c:	4936      	ldr	r1, [pc, #216]	; (800a558 <_dtoa_r+0x620>)
 800a47e:	2000      	movs	r0, #0
 800a480:	f7f5 ff0a 	bl	8000298 <__aeabi_dsub>
 800a484:	4652      	mov	r2, sl
 800a486:	465b      	mov	r3, fp
 800a488:	f7f6 fb30 	bl	8000aec <__aeabi_dcmplt>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f040 80b5 	bne.w	800a5fc <_dtoa_r+0x6c4>
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	429d      	cmp	r5, r3
 800a496:	d081      	beq.n	800a39c <_dtoa_r+0x464>
 800a498:	4b30      	ldr	r3, [pc, #192]	; (800a55c <_dtoa_r+0x624>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	4650      	mov	r0, sl
 800a49e:	4659      	mov	r1, fp
 800a4a0:	f7f6 f8b2 	bl	8000608 <__aeabi_dmul>
 800a4a4:	4b2d      	ldr	r3, [pc, #180]	; (800a55c <_dtoa_r+0x624>)
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	468b      	mov	fp, r1
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	e7c6      	b.n	800a448 <_dtoa_r+0x510>
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	4659      	mov	r1, fp
 800a4be:	f7f6 f8a3 	bl	8000608 <__aeabi_dmul>
 800a4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c4:	9d01      	ldr	r5, [sp, #4]
 800a4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	468b      	mov	fp, r1
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f7f6 fb4a 	bl	8000b68 <__aeabi_d2iz>
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	f7f6 f82d 	bl	8000534 <__aeabi_i2d>
 800a4da:	3630      	adds	r6, #48	; 0x30
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	f7f5 fed8 	bl	8000298 <__aeabi_dsub>
 800a4e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4689      	mov	r9, r1
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	d124      	bne.n	800a544 <_dtoa_r+0x60c>
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <_dtoa_r+0x630>)
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	4659      	mov	r1, fp
 800a500:	f7f5 fecc 	bl	800029c <__adddf3>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 fb0c 	bl	8000b28 <__aeabi_dcmpgt>
 800a510:	2800      	cmp	r0, #0
 800a512:	d173      	bne.n	800a5fc <_dtoa_r+0x6c4>
 800a514:	4652      	mov	r2, sl
 800a516:	465b      	mov	r3, fp
 800a518:	4913      	ldr	r1, [pc, #76]	; (800a568 <_dtoa_r+0x630>)
 800a51a:	2000      	movs	r0, #0
 800a51c:	f7f5 febc 	bl	8000298 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	f7f6 fae0 	bl	8000aec <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	f43f af35 	beq.w	800a39c <_dtoa_r+0x464>
 800a532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a534:	1e6b      	subs	r3, r5, #1
 800a536:	930f      	str	r3, [sp, #60]	; 0x3c
 800a538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a53c:	2b30      	cmp	r3, #48	; 0x30
 800a53e:	d0f8      	beq.n	800a532 <_dtoa_r+0x5fa>
 800a540:	9700      	str	r7, [sp, #0]
 800a542:	e049      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a544:	4b05      	ldr	r3, [pc, #20]	; (800a55c <_dtoa_r+0x624>)
 800a546:	f7f6 f85f 	bl	8000608 <__aeabi_dmul>
 800a54a:	4680      	mov	r8, r0
 800a54c:	4689      	mov	r9, r1
 800a54e:	e7bd      	b.n	800a4cc <_dtoa_r+0x594>
 800a550:	0800c4b8 	.word	0x0800c4b8
 800a554:	0800c490 	.word	0x0800c490
 800a558:	3ff00000 	.word	0x3ff00000
 800a55c:	40240000 	.word	0x40240000
 800a560:	401c0000 	.word	0x401c0000
 800a564:	40140000 	.word	0x40140000
 800a568:	3fe00000 	.word	0x3fe00000
 800a56c:	9d01      	ldr	r5, [sp, #4]
 800a56e:	4656      	mov	r6, sl
 800a570:	465f      	mov	r7, fp
 800a572:	4642      	mov	r2, r8
 800a574:	464b      	mov	r3, r9
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f6 f96f 	bl	800085c <__aeabi_ddiv>
 800a57e:	f7f6 faf3 	bl	8000b68 <__aeabi_d2iz>
 800a582:	4682      	mov	sl, r0
 800a584:	f7f5 ffd6 	bl	8000534 <__aeabi_i2d>
 800a588:	4642      	mov	r2, r8
 800a58a:	464b      	mov	r3, r9
 800a58c:	f7f6 f83c 	bl	8000608 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a59c:	f7f5 fe7c 	bl	8000298 <__aeabi_dsub>
 800a5a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a4:	9e01      	ldr	r6, [sp, #4]
 800a5a6:	9f03      	ldr	r7, [sp, #12]
 800a5a8:	1bae      	subs	r6, r5, r6
 800a5aa:	42b7      	cmp	r7, r6
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	d135      	bne.n	800a61e <_dtoa_r+0x6e6>
 800a5b2:	f7f5 fe73 	bl	800029c <__adddf3>
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	464b      	mov	r3, r9
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460f      	mov	r7, r1
 800a5be:	f7f6 fab3 	bl	8000b28 <__aeabi_dcmpgt>
 800a5c2:	b9d0      	cbnz	r0, 800a5fa <_dtoa_r+0x6c2>
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5d0:	b110      	cbz	r0, 800a5d8 <_dtoa_r+0x6a0>
 800a5d2:	f01a 0f01 	tst.w	sl, #1
 800a5d6:	d110      	bne.n	800a5fa <_dtoa_r+0x6c2>
 800a5d8:	4620      	mov	r0, r4
 800a5da:	ee18 1a10 	vmov	r1, s16
 800a5de:	f000 faf3 	bl	800abc8 <_Bfree>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9800      	ldr	r0, [sp, #0]
 800a5e6:	702b      	strb	r3, [r5, #0]
 800a5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	6018      	str	r0, [r3, #0]
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f43f acf1 	beq.w	8009fd8 <_dtoa_r+0xa0>
 800a5f6:	601d      	str	r5, [r3, #0]
 800a5f8:	e4ee      	b.n	8009fd8 <_dtoa_r+0xa0>
 800a5fa:	9f00      	ldr	r7, [sp, #0]
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	461d      	mov	r5, r3
 800a600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a604:	2a39      	cmp	r2, #57	; 0x39
 800a606:	d106      	bne.n	800a616 <_dtoa_r+0x6de>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d1f7      	bne.n	800a5fe <_dtoa_r+0x6c6>
 800a60e:	9901      	ldr	r1, [sp, #4]
 800a610:	2230      	movs	r2, #48	; 0x30
 800a612:	3701      	adds	r7, #1
 800a614:	700a      	strb	r2, [r1, #0]
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	3201      	adds	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
 800a61c:	e790      	b.n	800a540 <_dtoa_r+0x608>
 800a61e:	4ba6      	ldr	r3, [pc, #664]	; (800a8b8 <_dtoa_r+0x980>)
 800a620:	2200      	movs	r2, #0
 800a622:	f7f5 fff1 	bl	8000608 <__aeabi_dmul>
 800a626:	2200      	movs	r2, #0
 800a628:	2300      	movs	r3, #0
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	f7f6 fa53 	bl	8000ad8 <__aeabi_dcmpeq>
 800a632:	2800      	cmp	r0, #0
 800a634:	d09d      	beq.n	800a572 <_dtoa_r+0x63a>
 800a636:	e7cf      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a638:	9a08      	ldr	r2, [sp, #32]
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	f000 80d7 	beq.w	800a7ee <_dtoa_r+0x8b6>
 800a640:	9a06      	ldr	r2, [sp, #24]
 800a642:	2a01      	cmp	r2, #1
 800a644:	f300 80ba 	bgt.w	800a7bc <_dtoa_r+0x884>
 800a648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	f000 80b2 	beq.w	800a7b4 <_dtoa_r+0x87c>
 800a650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a654:	9e07      	ldr	r6, [sp, #28]
 800a656:	9d04      	ldr	r5, [sp, #16]
 800a658:	9a04      	ldr	r2, [sp, #16]
 800a65a:	441a      	add	r2, r3
 800a65c:	9204      	str	r2, [sp, #16]
 800a65e:	9a05      	ldr	r2, [sp, #20]
 800a660:	2101      	movs	r1, #1
 800a662:	441a      	add	r2, r3
 800a664:	4620      	mov	r0, r4
 800a666:	9205      	str	r2, [sp, #20]
 800a668:	f000 fb66 	bl	800ad38 <__i2b>
 800a66c:	4607      	mov	r7, r0
 800a66e:	2d00      	cmp	r5, #0
 800a670:	dd0c      	ble.n	800a68c <_dtoa_r+0x754>
 800a672:	9b05      	ldr	r3, [sp, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	dd09      	ble.n	800a68c <_dtoa_r+0x754>
 800a678:	42ab      	cmp	r3, r5
 800a67a:	9a04      	ldr	r2, [sp, #16]
 800a67c:	bfa8      	it	ge
 800a67e:	462b      	movge	r3, r5
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	9204      	str	r2, [sp, #16]
 800a684:	9a05      	ldr	r2, [sp, #20]
 800a686:	1aed      	subs	r5, r5, r3
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	9305      	str	r3, [sp, #20]
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	b31b      	cbz	r3, 800a6d8 <_dtoa_r+0x7a0>
 800a690:	9b08      	ldr	r3, [sp, #32]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80af 	beq.w	800a7f6 <_dtoa_r+0x8be>
 800a698:	2e00      	cmp	r6, #0
 800a69a:	dd13      	ble.n	800a6c4 <_dtoa_r+0x78c>
 800a69c:	4639      	mov	r1, r7
 800a69e:	4632      	mov	r2, r6
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fc09 	bl	800aeb8 <__pow5mult>
 800a6a6:	ee18 2a10 	vmov	r2, s16
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 fb58 	bl	800ad64 <__multiply>
 800a6b4:	ee18 1a10 	vmov	r1, s16
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 fa84 	bl	800abc8 <_Bfree>
 800a6c0:	ee08 8a10 	vmov	s16, r8
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	1b9a      	subs	r2, r3, r6
 800a6c8:	d006      	beq.n	800a6d8 <_dtoa_r+0x7a0>
 800a6ca:	ee18 1a10 	vmov	r1, s16
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 fbf2 	bl	800aeb8 <__pow5mult>
 800a6d4:	ee08 0a10 	vmov	s16, r0
 800a6d8:	2101      	movs	r1, #1
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fb2c 	bl	800ad38 <__i2b>
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	f340 8088 	ble.w	800a7fa <_dtoa_r+0x8c2>
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fbe2 	bl	800aeb8 <__pow5mult>
 800a6f4:	9b06      	ldr	r3, [sp, #24]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	f340 8081 	ble.w	800a800 <_dtoa_r+0x8c8>
 800a6fe:	f04f 0800 	mov.w	r8, #0
 800a702:	6933      	ldr	r3, [r6, #16]
 800a704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a708:	6918      	ldr	r0, [r3, #16]
 800a70a:	f000 fac5 	bl	800ac98 <__hi0bits>
 800a70e:	f1c0 0020 	rsb	r0, r0, #32
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	4418      	add	r0, r3
 800a716:	f010 001f 	ands.w	r0, r0, #31
 800a71a:	f000 8092 	beq.w	800a842 <_dtoa_r+0x90a>
 800a71e:	f1c0 0320 	rsb	r3, r0, #32
 800a722:	2b04      	cmp	r3, #4
 800a724:	f340 808a 	ble.w	800a83c <_dtoa_r+0x904>
 800a728:	f1c0 001c 	rsb	r0, r0, #28
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	4403      	add	r3, r0
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	9b05      	ldr	r3, [sp, #20]
 800a734:	4403      	add	r3, r0
 800a736:	4405      	add	r5, r0
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dd07      	ble.n	800a750 <_dtoa_r+0x818>
 800a740:	ee18 1a10 	vmov	r1, s16
 800a744:	461a      	mov	r2, r3
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fc10 	bl	800af6c <__lshift>
 800a74c:	ee08 0a10 	vmov	s16, r0
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	dd05      	ble.n	800a762 <_dtoa_r+0x82a>
 800a756:	4631      	mov	r1, r6
 800a758:	461a      	mov	r2, r3
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 fc06 	bl	800af6c <__lshift>
 800a760:	4606      	mov	r6, r0
 800a762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d06e      	beq.n	800a846 <_dtoa_r+0x90e>
 800a768:	ee18 0a10 	vmov	r0, s16
 800a76c:	4631      	mov	r1, r6
 800a76e:	f000 fc6d 	bl	800b04c <__mcmp>
 800a772:	2800      	cmp	r0, #0
 800a774:	da67      	bge.n	800a846 <_dtoa_r+0x90e>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	220a      	movs	r2, #10
 800a782:	2300      	movs	r3, #0
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fa41 	bl	800ac0c <__multadd>
 800a78a:	9b08      	ldr	r3, [sp, #32]
 800a78c:	ee08 0a10 	vmov	s16, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 81b1 	beq.w	800aaf8 <_dtoa_r+0xbc0>
 800a796:	2300      	movs	r3, #0
 800a798:	4639      	mov	r1, r7
 800a79a:	220a      	movs	r2, #10
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fa35 	bl	800ac0c <__multadd>
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	f300 808e 	bgt.w	800a8c8 <_dtoa_r+0x990>
 800a7ac:	9b06      	ldr	r3, [sp, #24]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	dc51      	bgt.n	800a856 <_dtoa_r+0x91e>
 800a7b2:	e089      	b.n	800a8c8 <_dtoa_r+0x990>
 800a7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7ba:	e74b      	b.n	800a654 <_dtoa_r+0x71c>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	1e5e      	subs	r6, r3, #1
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	42b3      	cmp	r3, r6
 800a7c4:	bfbf      	itttt	lt
 800a7c6:	9b07      	ldrlt	r3, [sp, #28]
 800a7c8:	9607      	strlt	r6, [sp, #28]
 800a7ca:	1af2      	sublt	r2, r6, r3
 800a7cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a7ce:	bfb6      	itet	lt
 800a7d0:	189b      	addlt	r3, r3, r2
 800a7d2:	1b9e      	subge	r6, r3, r6
 800a7d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	bfb8      	it	lt
 800a7da:	2600      	movlt	r6, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfb7      	itett	lt
 800a7e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a7e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a7e8:	1a9d      	sublt	r5, r3, r2
 800a7ea:	2300      	movlt	r3, #0
 800a7ec:	e734      	b.n	800a658 <_dtoa_r+0x720>
 800a7ee:	9e07      	ldr	r6, [sp, #28]
 800a7f0:	9d04      	ldr	r5, [sp, #16]
 800a7f2:	9f08      	ldr	r7, [sp, #32]
 800a7f4:	e73b      	b.n	800a66e <_dtoa_r+0x736>
 800a7f6:	9a07      	ldr	r2, [sp, #28]
 800a7f8:	e767      	b.n	800a6ca <_dtoa_r+0x792>
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	dc18      	bgt.n	800a832 <_dtoa_r+0x8fa>
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	d115      	bne.n	800a832 <_dtoa_r+0x8fa>
 800a806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a80a:	b993      	cbnz	r3, 800a832 <_dtoa_r+0x8fa>
 800a80c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	051b      	lsls	r3, r3, #20
 800a814:	b183      	cbz	r3, 800a838 <_dtoa_r+0x900>
 800a816:	9b04      	ldr	r3, [sp, #16]
 800a818:	3301      	adds	r3, #1
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	9b05      	ldr	r3, [sp, #20]
 800a81e:	3301      	adds	r3, #1
 800a820:	9305      	str	r3, [sp, #20]
 800a822:	f04f 0801 	mov.w	r8, #1
 800a826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f47f af6a 	bne.w	800a702 <_dtoa_r+0x7ca>
 800a82e:	2001      	movs	r0, #1
 800a830:	e76f      	b.n	800a712 <_dtoa_r+0x7da>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	e7f6      	b.n	800a826 <_dtoa_r+0x8ee>
 800a838:	4698      	mov	r8, r3
 800a83a:	e7f4      	b.n	800a826 <_dtoa_r+0x8ee>
 800a83c:	f43f af7d 	beq.w	800a73a <_dtoa_r+0x802>
 800a840:	4618      	mov	r0, r3
 800a842:	301c      	adds	r0, #28
 800a844:	e772      	b.n	800a72c <_dtoa_r+0x7f4>
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	dc37      	bgt.n	800a8bc <_dtoa_r+0x984>
 800a84c:	9b06      	ldr	r3, [sp, #24]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	dd34      	ble.n	800a8bc <_dtoa_r+0x984>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	9302      	str	r3, [sp, #8]
 800a856:	9b02      	ldr	r3, [sp, #8]
 800a858:	b96b      	cbnz	r3, 800a876 <_dtoa_r+0x93e>
 800a85a:	4631      	mov	r1, r6
 800a85c:	2205      	movs	r2, #5
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 f9d4 	bl	800ac0c <__multadd>
 800a864:	4601      	mov	r1, r0
 800a866:	4606      	mov	r6, r0
 800a868:	ee18 0a10 	vmov	r0, s16
 800a86c:	f000 fbee 	bl	800b04c <__mcmp>
 800a870:	2800      	cmp	r0, #0
 800a872:	f73f adbb 	bgt.w	800a3ec <_dtoa_r+0x4b4>
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	9d01      	ldr	r5, [sp, #4]
 800a87a:	43db      	mvns	r3, r3
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	4631      	mov	r1, r6
 800a884:	4620      	mov	r0, r4
 800a886:	f000 f99f 	bl	800abc8 <_Bfree>
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	f43f aea4 	beq.w	800a5d8 <_dtoa_r+0x6a0>
 800a890:	f1b8 0f00 	cmp.w	r8, #0
 800a894:	d005      	beq.n	800a8a2 <_dtoa_r+0x96a>
 800a896:	45b8      	cmp	r8, r7
 800a898:	d003      	beq.n	800a8a2 <_dtoa_r+0x96a>
 800a89a:	4641      	mov	r1, r8
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 f993 	bl	800abc8 <_Bfree>
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 f98f 	bl	800abc8 <_Bfree>
 800a8aa:	e695      	b.n	800a5d8 <_dtoa_r+0x6a0>
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	4637      	mov	r7, r6
 800a8b0:	e7e1      	b.n	800a876 <_dtoa_r+0x93e>
 800a8b2:	9700      	str	r7, [sp, #0]
 800a8b4:	4637      	mov	r7, r6
 800a8b6:	e599      	b.n	800a3ec <_dtoa_r+0x4b4>
 800a8b8:	40240000 	.word	0x40240000
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80ca 	beq.w	800aa58 <_dtoa_r+0xb20>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	dd05      	ble.n	800a8d8 <_dtoa_r+0x9a0>
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 fb4b 	bl	800af6c <__lshift>
 800a8d6:	4607      	mov	r7, r0
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	d05b      	beq.n	800a996 <_dtoa_r+0xa5e>
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 f931 	bl	800ab48 <_Balloc>
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b928      	cbnz	r0, 800a8f6 <_dtoa_r+0x9be>
 800a8ea:	4b87      	ldr	r3, [pc, #540]	; (800ab08 <_dtoa_r+0xbd0>)
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8f2:	f7ff bb3b 	b.w	8009f6c <_dtoa_r+0x34>
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	3202      	adds	r2, #2
 800a8fa:	0092      	lsls	r2, r2, #2
 800a8fc:	f107 010c 	add.w	r1, r7, #12
 800a900:	300c      	adds	r0, #12
 800a902:	f000 f913 	bl	800ab2c <memcpy>
 800a906:	2201      	movs	r2, #1
 800a908:	4629      	mov	r1, r5
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fb2e 	bl	800af6c <__lshift>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	f103 0901 	add.w	r9, r3, #1
 800a916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f00a 0301 	and.w	r3, sl, #1
 800a922:	46b8      	mov	r8, r7
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	4607      	mov	r7, r0
 800a928:	4631      	mov	r1, r6
 800a92a:	ee18 0a10 	vmov	r0, s16
 800a92e:	f7ff fa77 	bl	8009e20 <quorem>
 800a932:	4641      	mov	r1, r8
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a93a:	ee18 0a10 	vmov	r0, s16
 800a93e:	f000 fb85 	bl	800b04c <__mcmp>
 800a942:	463a      	mov	r2, r7
 800a944:	9003      	str	r0, [sp, #12]
 800a946:	4631      	mov	r1, r6
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fb9b 	bl	800b084 <__mdiff>
 800a94e:	68c2      	ldr	r2, [r0, #12]
 800a950:	f109 3bff 	add.w	fp, r9, #4294967295
 800a954:	4605      	mov	r5, r0
 800a956:	bb02      	cbnz	r2, 800a99a <_dtoa_r+0xa62>
 800a958:	4601      	mov	r1, r0
 800a95a:	ee18 0a10 	vmov	r0, s16
 800a95e:	f000 fb75 	bl	800b04c <__mcmp>
 800a962:	4602      	mov	r2, r0
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	9207      	str	r2, [sp, #28]
 800a96a:	f000 f92d 	bl	800abc8 <_Bfree>
 800a96e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a972:	ea43 0102 	orr.w	r1, r3, r2
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	430b      	orrs	r3, r1
 800a97a:	464d      	mov	r5, r9
 800a97c:	d10f      	bne.n	800a99e <_dtoa_r+0xa66>
 800a97e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a982:	d02a      	beq.n	800a9da <_dtoa_r+0xaa2>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	dd02      	ble.n	800a990 <_dtoa_r+0xa58>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a990:	f88b a000 	strb.w	sl, [fp]
 800a994:	e775      	b.n	800a882 <_dtoa_r+0x94a>
 800a996:	4638      	mov	r0, r7
 800a998:	e7ba      	b.n	800a910 <_dtoa_r+0x9d8>
 800a99a:	2201      	movs	r2, #1
 800a99c:	e7e2      	b.n	800a964 <_dtoa_r+0xa2c>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	db04      	blt.n	800a9ae <_dtoa_r+0xa76>
 800a9a4:	9906      	ldr	r1, [sp, #24]
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	9904      	ldr	r1, [sp, #16]
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	d122      	bne.n	800a9f4 <_dtoa_r+0xabc>
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	ddee      	ble.n	800a990 <_dtoa_r+0xa58>
 800a9b2:	ee18 1a10 	vmov	r1, s16
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fad7 	bl	800af6c <__lshift>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	ee08 0a10 	vmov	s16, r0
 800a9c4:	f000 fb42 	bl	800b04c <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dc03      	bgt.n	800a9d4 <_dtoa_r+0xa9c>
 800a9cc:	d1e0      	bne.n	800a990 <_dtoa_r+0xa58>
 800a9ce:	f01a 0f01 	tst.w	sl, #1
 800a9d2:	d0dd      	beq.n	800a990 <_dtoa_r+0xa58>
 800a9d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9d8:	d1d7      	bne.n	800a98a <_dtoa_r+0xa52>
 800a9da:	2339      	movs	r3, #57	; 0x39
 800a9dc:	f88b 3000 	strb.w	r3, [fp]
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	461d      	mov	r5, r3
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9ea:	2a39      	cmp	r2, #57	; 0x39
 800a9ec:	d071      	beq.n	800aad2 <_dtoa_r+0xb9a>
 800a9ee:	3201      	adds	r2, #1
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e746      	b.n	800a882 <_dtoa_r+0x94a>
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	dd07      	ble.n	800aa08 <_dtoa_r+0xad0>
 800a9f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9fc:	d0ed      	beq.n	800a9da <_dtoa_r+0xaa2>
 800a9fe:	f10a 0301 	add.w	r3, sl, #1
 800aa02:	f88b 3000 	strb.w	r3, [fp]
 800aa06:	e73c      	b.n	800a882 <_dtoa_r+0x94a>
 800aa08:	9b05      	ldr	r3, [sp, #20]
 800aa0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa0e:	4599      	cmp	r9, r3
 800aa10:	d047      	beq.n	800aaa2 <_dtoa_r+0xb6a>
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	2300      	movs	r3, #0
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 f8f6 	bl	800ac0c <__multadd>
 800aa20:	45b8      	cmp	r8, r7
 800aa22:	ee08 0a10 	vmov	s16, r0
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	f04f 020a 	mov.w	r2, #10
 800aa2e:	4641      	mov	r1, r8
 800aa30:	4620      	mov	r0, r4
 800aa32:	d106      	bne.n	800aa42 <_dtoa_r+0xb0a>
 800aa34:	f000 f8ea 	bl	800ac0c <__multadd>
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	f109 0901 	add.w	r9, r9, #1
 800aa40:	e772      	b.n	800a928 <_dtoa_r+0x9f0>
 800aa42:	f000 f8e3 	bl	800ac0c <__multadd>
 800aa46:	4639      	mov	r1, r7
 800aa48:	4680      	mov	r8, r0
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 f8dc 	bl	800ac0c <__multadd>
 800aa54:	4607      	mov	r7, r0
 800aa56:	e7f1      	b.n	800aa3c <_dtoa_r+0xb04>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	9d01      	ldr	r5, [sp, #4]
 800aa5e:	ee18 0a10 	vmov	r0, s16
 800aa62:	4631      	mov	r1, r6
 800aa64:	f7ff f9dc 	bl	8009e20 <quorem>
 800aa68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aa6c:	9b01      	ldr	r3, [sp, #4]
 800aa6e:	f805 ab01 	strb.w	sl, [r5], #1
 800aa72:	1aea      	subs	r2, r5, r3
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	4293      	cmp	r3, r2
 800aa78:	dd09      	ble.n	800aa8e <_dtoa_r+0xb56>
 800aa7a:	ee18 1a10 	vmov	r1, s16
 800aa7e:	2300      	movs	r3, #0
 800aa80:	220a      	movs	r2, #10
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 f8c2 	bl	800ac0c <__multadd>
 800aa88:	ee08 0a10 	vmov	s16, r0
 800aa8c:	e7e7      	b.n	800aa5e <_dtoa_r+0xb26>
 800aa8e:	9b02      	ldr	r3, [sp, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bfc8      	it	gt
 800aa94:	461d      	movgt	r5, r3
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	bfd8      	it	le
 800aa9a:	2501      	movle	r5, #1
 800aa9c:	441d      	add	r5, r3
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	ee18 1a10 	vmov	r1, s16
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fa5f 	bl	800af6c <__lshift>
 800aaae:	4631      	mov	r1, r6
 800aab0:	ee08 0a10 	vmov	s16, r0
 800aab4:	f000 faca 	bl	800b04c <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dc91      	bgt.n	800a9e0 <_dtoa_r+0xaa8>
 800aabc:	d102      	bne.n	800aac4 <_dtoa_r+0xb8c>
 800aabe:	f01a 0f01 	tst.w	sl, #1
 800aac2:	d18d      	bne.n	800a9e0 <_dtoa_r+0xaa8>
 800aac4:	462b      	mov	r3, r5
 800aac6:	461d      	mov	r5, r3
 800aac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aacc:	2a30      	cmp	r2, #48	; 0x30
 800aace:	d0fa      	beq.n	800aac6 <_dtoa_r+0xb8e>
 800aad0:	e6d7      	b.n	800a882 <_dtoa_r+0x94a>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d184      	bne.n	800a9e2 <_dtoa_r+0xaaa>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	2331      	movs	r3, #49	; 0x31
 800aae0:	7013      	strb	r3, [r2, #0]
 800aae2:	e6ce      	b.n	800a882 <_dtoa_r+0x94a>
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <_dtoa_r+0xbd4>)
 800aae6:	f7ff ba95 	b.w	800a014 <_dtoa_r+0xdc>
 800aaea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f47f aa6e 	bne.w	8009fce <_dtoa_r+0x96>
 800aaf2:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <_dtoa_r+0xbd8>)
 800aaf4:	f7ff ba8e 	b.w	800a014 <_dtoa_r+0xdc>
 800aaf8:	9b02      	ldr	r3, [sp, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dcae      	bgt.n	800aa5c <_dtoa_r+0xb24>
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	f73f aea8 	bgt.w	800a856 <_dtoa_r+0x91e>
 800ab06:	e7a9      	b.n	800aa5c <_dtoa_r+0xb24>
 800ab08:	0800c423 	.word	0x0800c423
 800ab0c:	0800c380 	.word	0x0800c380
 800ab10:	0800c3a4 	.word	0x0800c3a4

0800ab14 <_localeconv_r>:
 800ab14:	4800      	ldr	r0, [pc, #0]	; (800ab18 <_localeconv_r+0x4>)
 800ab16:	4770      	bx	lr
 800ab18:	20000250 	.word	0x20000250

0800ab1c <malloc>:
 800ab1c:	4b02      	ldr	r3, [pc, #8]	; (800ab28 <malloc+0xc>)
 800ab1e:	4601      	mov	r1, r0
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	f000 bc17 	b.w	800b354 <_malloc_r>
 800ab26:	bf00      	nop
 800ab28:	200000fc 	.word	0x200000fc

0800ab2c <memcpy>:
 800ab2c:	440a      	add	r2, r1
 800ab2e:	4291      	cmp	r1, r2
 800ab30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab34:	d100      	bne.n	800ab38 <memcpy+0xc>
 800ab36:	4770      	bx	lr
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab42:	4291      	cmp	r1, r2
 800ab44:	d1f9      	bne.n	800ab3a <memcpy+0xe>
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <_Balloc>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	b976      	cbnz	r6, 800ab70 <_Balloc+0x28>
 800ab52:	2010      	movs	r0, #16
 800ab54:	f7ff ffe2 	bl	800ab1c <malloc>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab5c:	b920      	cbnz	r0, 800ab68 <_Balloc+0x20>
 800ab5e:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <_Balloc+0x78>)
 800ab60:	4818      	ldr	r0, [pc, #96]	; (800abc4 <_Balloc+0x7c>)
 800ab62:	2166      	movs	r1, #102	; 0x66
 800ab64:	f000 fdd6 	bl	800b714 <__assert_func>
 800ab68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab6c:	6006      	str	r6, [r0, #0]
 800ab6e:	60c6      	str	r6, [r0, #12]
 800ab70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab72:	68f3      	ldr	r3, [r6, #12]
 800ab74:	b183      	cbz	r3, 800ab98 <_Balloc+0x50>
 800ab76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab7e:	b9b8      	cbnz	r0, 800abb0 <_Balloc+0x68>
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f605 	lsl.w	r6, r1, r5
 800ab86:	1d72      	adds	r2, r6, #5
 800ab88:	0092      	lsls	r2, r2, #2
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f000 fb60 	bl	800b250 <_calloc_r>
 800ab90:	b160      	cbz	r0, 800abac <_Balloc+0x64>
 800ab92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab96:	e00e      	b.n	800abb6 <_Balloc+0x6e>
 800ab98:	2221      	movs	r2, #33	; 0x21
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fb57 	bl	800b250 <_calloc_r>
 800aba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba4:	60f0      	str	r0, [r6, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e4      	bne.n	800ab76 <_Balloc+0x2e>
 800abac:	2000      	movs	r0, #0
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	6802      	ldr	r2, [r0, #0]
 800abb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abb6:	2300      	movs	r3, #0
 800abb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abbc:	e7f7      	b.n	800abae <_Balloc+0x66>
 800abbe:	bf00      	nop
 800abc0:	0800c3b1 	.word	0x0800c3b1
 800abc4:	0800c434 	.word	0x0800c434

0800abc8 <_Bfree>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b976      	cbnz	r6, 800abf0 <_Bfree+0x28>
 800abd2:	2010      	movs	r0, #16
 800abd4:	f7ff ffa2 	bl	800ab1c <malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	6268      	str	r0, [r5, #36]	; 0x24
 800abdc:	b920      	cbnz	r0, 800abe8 <_Bfree+0x20>
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_Bfree+0x3c>)
 800abe0:	4809      	ldr	r0, [pc, #36]	; (800ac08 <_Bfree+0x40>)
 800abe2:	218a      	movs	r1, #138	; 0x8a
 800abe4:	f000 fd96 	bl	800b714 <__assert_func>
 800abe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abec:	6006      	str	r6, [r0, #0]
 800abee:	60c6      	str	r6, [r0, #12]
 800abf0:	b13c      	cbz	r4, 800ac02 <_Bfree+0x3a>
 800abf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abf4:	6862      	ldr	r2, [r4, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abfc:	6021      	str	r1, [r4, #0]
 800abfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	0800c3b1 	.word	0x0800c3b1
 800ac08:	0800c434 	.word	0x0800c434

0800ac0c <__multadd>:
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	690d      	ldr	r5, [r1, #16]
 800ac12:	4607      	mov	r7, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	461e      	mov	r6, r3
 800ac18:	f101 0c14 	add.w	ip, r1, #20
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac22:	b299      	uxth	r1, r3
 800ac24:	fb02 6101 	mla	r1, r2, r1, r6
 800ac28:	0c1e      	lsrs	r6, r3, #16
 800ac2a:	0c0b      	lsrs	r3, r1, #16
 800ac2c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac30:	b289      	uxth	r1, r1
 800ac32:	3001      	adds	r0, #1
 800ac34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac38:	4285      	cmp	r5, r0
 800ac3a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac42:	dcec      	bgt.n	800ac1e <__multadd+0x12>
 800ac44:	b30e      	cbz	r6, 800ac8a <__multadd+0x7e>
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	dc19      	bgt.n	800ac80 <__multadd+0x74>
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	4638      	mov	r0, r7
 800ac50:	3101      	adds	r1, #1
 800ac52:	f7ff ff79 	bl	800ab48 <_Balloc>
 800ac56:	4680      	mov	r8, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <__multadd+0x5a>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <__multadd+0x84>)
 800ac5e:	480d      	ldr	r0, [pc, #52]	; (800ac94 <__multadd+0x88>)
 800ac60:	21b5      	movs	r1, #181	; 0xb5
 800ac62:	f000 fd57 	bl	800b714 <__assert_func>
 800ac66:	6922      	ldr	r2, [r4, #16]
 800ac68:	3202      	adds	r2, #2
 800ac6a:	f104 010c 	add.w	r1, r4, #12
 800ac6e:	0092      	lsls	r2, r2, #2
 800ac70:	300c      	adds	r0, #12
 800ac72:	f7ff ff5b 	bl	800ab2c <memcpy>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7ff ffa5 	bl	800abc8 <_Bfree>
 800ac7e:	4644      	mov	r4, r8
 800ac80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac84:	3501      	adds	r5, #1
 800ac86:	615e      	str	r6, [r3, #20]
 800ac88:	6125      	str	r5, [r4, #16]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	0800c423 	.word	0x0800c423
 800ac94:	0800c434 	.word	0x0800c434

0800ac98 <__hi0bits>:
 800ac98:	0c03      	lsrs	r3, r0, #16
 800ac9a:	041b      	lsls	r3, r3, #16
 800ac9c:	b9d3      	cbnz	r3, 800acd4 <__hi0bits+0x3c>
 800ac9e:	0400      	lsls	r0, r0, #16
 800aca0:	2310      	movs	r3, #16
 800aca2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aca6:	bf04      	itt	eq
 800aca8:	0200      	lsleq	r0, r0, #8
 800acaa:	3308      	addeq	r3, #8
 800acac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acb0:	bf04      	itt	eq
 800acb2:	0100      	lsleq	r0, r0, #4
 800acb4:	3304      	addeq	r3, #4
 800acb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acba:	bf04      	itt	eq
 800acbc:	0080      	lsleq	r0, r0, #2
 800acbe:	3302      	addeq	r3, #2
 800acc0:	2800      	cmp	r0, #0
 800acc2:	db05      	blt.n	800acd0 <__hi0bits+0x38>
 800acc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acc8:	f103 0301 	add.w	r3, r3, #1
 800accc:	bf08      	it	eq
 800acce:	2320      	moveq	r3, #32
 800acd0:	4618      	mov	r0, r3
 800acd2:	4770      	bx	lr
 800acd4:	2300      	movs	r3, #0
 800acd6:	e7e4      	b.n	800aca2 <__hi0bits+0xa>

0800acd8 <__lo0bits>:
 800acd8:	6803      	ldr	r3, [r0, #0]
 800acda:	f013 0207 	ands.w	r2, r3, #7
 800acde:	4601      	mov	r1, r0
 800ace0:	d00b      	beq.n	800acfa <__lo0bits+0x22>
 800ace2:	07da      	lsls	r2, r3, #31
 800ace4:	d423      	bmi.n	800ad2e <__lo0bits+0x56>
 800ace6:	0798      	lsls	r0, r3, #30
 800ace8:	bf49      	itett	mi
 800acea:	085b      	lsrmi	r3, r3, #1
 800acec:	089b      	lsrpl	r3, r3, #2
 800acee:	2001      	movmi	r0, #1
 800acf0:	600b      	strmi	r3, [r1, #0]
 800acf2:	bf5c      	itt	pl
 800acf4:	600b      	strpl	r3, [r1, #0]
 800acf6:	2002      	movpl	r0, #2
 800acf8:	4770      	bx	lr
 800acfa:	b298      	uxth	r0, r3
 800acfc:	b9a8      	cbnz	r0, 800ad2a <__lo0bits+0x52>
 800acfe:	0c1b      	lsrs	r3, r3, #16
 800ad00:	2010      	movs	r0, #16
 800ad02:	b2da      	uxtb	r2, r3
 800ad04:	b90a      	cbnz	r2, 800ad0a <__lo0bits+0x32>
 800ad06:	3008      	adds	r0, #8
 800ad08:	0a1b      	lsrs	r3, r3, #8
 800ad0a:	071a      	lsls	r2, r3, #28
 800ad0c:	bf04      	itt	eq
 800ad0e:	091b      	lsreq	r3, r3, #4
 800ad10:	3004      	addeq	r0, #4
 800ad12:	079a      	lsls	r2, r3, #30
 800ad14:	bf04      	itt	eq
 800ad16:	089b      	lsreq	r3, r3, #2
 800ad18:	3002      	addeq	r0, #2
 800ad1a:	07da      	lsls	r2, r3, #31
 800ad1c:	d403      	bmi.n	800ad26 <__lo0bits+0x4e>
 800ad1e:	085b      	lsrs	r3, r3, #1
 800ad20:	f100 0001 	add.w	r0, r0, #1
 800ad24:	d005      	beq.n	800ad32 <__lo0bits+0x5a>
 800ad26:	600b      	str	r3, [r1, #0]
 800ad28:	4770      	bx	lr
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	e7e9      	b.n	800ad02 <__lo0bits+0x2a>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	4770      	bx	lr
 800ad32:	2020      	movs	r0, #32
 800ad34:	4770      	bx	lr
	...

0800ad38 <__i2b>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	f7ff ff03 	bl	800ab48 <_Balloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <__i2b+0x1a>
 800ad46:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <__i2b+0x24>)
 800ad48:	4805      	ldr	r0, [pc, #20]	; (800ad60 <__i2b+0x28>)
 800ad4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad4e:	f000 fce1 	bl	800b714 <__assert_func>
 800ad52:	2301      	movs	r3, #1
 800ad54:	6144      	str	r4, [r0, #20]
 800ad56:	6103      	str	r3, [r0, #16]
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800c423 	.word	0x0800c423
 800ad60:	0800c434 	.word	0x0800c434

0800ad64 <__multiply>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	4691      	mov	r9, r2
 800ad6a:	690a      	ldr	r2, [r1, #16]
 800ad6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	bfb8      	it	lt
 800ad74:	460b      	movlt	r3, r1
 800ad76:	460c      	mov	r4, r1
 800ad78:	bfbc      	itt	lt
 800ad7a:	464c      	movlt	r4, r9
 800ad7c:	4699      	movlt	r9, r3
 800ad7e:	6927      	ldr	r7, [r4, #16]
 800ad80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad84:	68a3      	ldr	r3, [r4, #8]
 800ad86:	6861      	ldr	r1, [r4, #4]
 800ad88:	eb07 060a 	add.w	r6, r7, sl
 800ad8c:	42b3      	cmp	r3, r6
 800ad8e:	b085      	sub	sp, #20
 800ad90:	bfb8      	it	lt
 800ad92:	3101      	addlt	r1, #1
 800ad94:	f7ff fed8 	bl	800ab48 <_Balloc>
 800ad98:	b930      	cbnz	r0, 800ada8 <__multiply+0x44>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b44      	ldr	r3, [pc, #272]	; (800aeb0 <__multiply+0x14c>)
 800ad9e:	4845      	ldr	r0, [pc, #276]	; (800aeb4 <__multiply+0x150>)
 800ada0:	f240 115d 	movw	r1, #349	; 0x15d
 800ada4:	f000 fcb6 	bl	800b714 <__assert_func>
 800ada8:	f100 0514 	add.w	r5, r0, #20
 800adac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adb0:	462b      	mov	r3, r5
 800adb2:	2200      	movs	r2, #0
 800adb4:	4543      	cmp	r3, r8
 800adb6:	d321      	bcc.n	800adfc <__multiply+0x98>
 800adb8:	f104 0314 	add.w	r3, r4, #20
 800adbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adc0:	f109 0314 	add.w	r3, r9, #20
 800adc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adc8:	9202      	str	r2, [sp, #8]
 800adca:	1b3a      	subs	r2, r7, r4
 800adcc:	3a15      	subs	r2, #21
 800adce:	f022 0203 	bic.w	r2, r2, #3
 800add2:	3204      	adds	r2, #4
 800add4:	f104 0115 	add.w	r1, r4, #21
 800add8:	428f      	cmp	r7, r1
 800adda:	bf38      	it	cc
 800addc:	2204      	movcc	r2, #4
 800adde:	9201      	str	r2, [sp, #4]
 800ade0:	9a02      	ldr	r2, [sp, #8]
 800ade2:	9303      	str	r3, [sp, #12]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d80c      	bhi.n	800ae02 <__multiply+0x9e>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	dd03      	ble.n	800adf4 <__multiply+0x90>
 800adec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d05a      	beq.n	800aeaa <__multiply+0x146>
 800adf4:	6106      	str	r6, [r0, #16]
 800adf6:	b005      	add	sp, #20
 800adf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfc:	f843 2b04 	str.w	r2, [r3], #4
 800ae00:	e7d8      	b.n	800adb4 <__multiply+0x50>
 800ae02:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae06:	f1ba 0f00 	cmp.w	sl, #0
 800ae0a:	d024      	beq.n	800ae56 <__multiply+0xf2>
 800ae0c:	f104 0e14 	add.w	lr, r4, #20
 800ae10:	46a9      	mov	r9, r5
 800ae12:	f04f 0c00 	mov.w	ip, #0
 800ae16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae1a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae1e:	fa1f fb82 	uxth.w	fp, r2
 800ae22:	b289      	uxth	r1, r1
 800ae24:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae30:	4461      	add	r1, ip
 800ae32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae36:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae3e:	b289      	uxth	r1, r1
 800ae40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae44:	4577      	cmp	r7, lr
 800ae46:	f849 1b04 	str.w	r1, [r9], #4
 800ae4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae4e:	d8e2      	bhi.n	800ae16 <__multiply+0xb2>
 800ae50:	9a01      	ldr	r2, [sp, #4]
 800ae52:	f845 c002 	str.w	ip, [r5, r2]
 800ae56:	9a03      	ldr	r2, [sp, #12]
 800ae58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	f1b9 0f00 	cmp.w	r9, #0
 800ae62:	d020      	beq.n	800aea6 <__multiply+0x142>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	f104 0c14 	add.w	ip, r4, #20
 800ae6a:	46ae      	mov	lr, r5
 800ae6c:	f04f 0a00 	mov.w	sl, #0
 800ae70:	f8bc b000 	ldrh.w	fp, [ip]
 800ae74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae78:	fb09 220b 	mla	r2, r9, fp, r2
 800ae7c:	4492      	add	sl, r2
 800ae7e:	b289      	uxth	r1, r1
 800ae80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae84:	f84e 1b04 	str.w	r1, [lr], #4
 800ae88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae8c:	f8be 1000 	ldrh.w	r1, [lr]
 800ae90:	0c12      	lsrs	r2, r2, #16
 800ae92:	fb09 1102 	mla	r1, r9, r2, r1
 800ae96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae9a:	4567      	cmp	r7, ip
 800ae9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aea0:	d8e6      	bhi.n	800ae70 <__multiply+0x10c>
 800aea2:	9a01      	ldr	r2, [sp, #4]
 800aea4:	50a9      	str	r1, [r5, r2]
 800aea6:	3504      	adds	r5, #4
 800aea8:	e79a      	b.n	800ade0 <__multiply+0x7c>
 800aeaa:	3e01      	subs	r6, #1
 800aeac:	e79c      	b.n	800ade8 <__multiply+0x84>
 800aeae:	bf00      	nop
 800aeb0:	0800c423 	.word	0x0800c423
 800aeb4:	0800c434 	.word	0x0800c434

0800aeb8 <__pow5mult>:
 800aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	4615      	mov	r5, r2
 800aebe:	f012 0203 	ands.w	r2, r2, #3
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	d007      	beq.n	800aed8 <__pow5mult+0x20>
 800aec8:	4c25      	ldr	r4, [pc, #148]	; (800af60 <__pow5mult+0xa8>)
 800aeca:	3a01      	subs	r2, #1
 800aecc:	2300      	movs	r3, #0
 800aece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aed2:	f7ff fe9b 	bl	800ac0c <__multadd>
 800aed6:	4607      	mov	r7, r0
 800aed8:	10ad      	asrs	r5, r5, #2
 800aeda:	d03d      	beq.n	800af58 <__pow5mult+0xa0>
 800aedc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aede:	b97c      	cbnz	r4, 800af00 <__pow5mult+0x48>
 800aee0:	2010      	movs	r0, #16
 800aee2:	f7ff fe1b 	bl	800ab1c <malloc>
 800aee6:	4602      	mov	r2, r0
 800aee8:	6270      	str	r0, [r6, #36]	; 0x24
 800aeea:	b928      	cbnz	r0, 800aef8 <__pow5mult+0x40>
 800aeec:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <__pow5mult+0xac>)
 800aeee:	481e      	ldr	r0, [pc, #120]	; (800af68 <__pow5mult+0xb0>)
 800aef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aef4:	f000 fc0e 	bl	800b714 <__assert_func>
 800aef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aefc:	6004      	str	r4, [r0, #0]
 800aefe:	60c4      	str	r4, [r0, #12]
 800af00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af08:	b94c      	cbnz	r4, 800af1e <__pow5mult+0x66>
 800af0a:	f240 2171 	movw	r1, #625	; 0x271
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff12 	bl	800ad38 <__i2b>
 800af14:	2300      	movs	r3, #0
 800af16:	f8c8 0008 	str.w	r0, [r8, #8]
 800af1a:	4604      	mov	r4, r0
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	07eb      	lsls	r3, r5, #31
 800af24:	d50a      	bpl.n	800af3c <__pow5mult+0x84>
 800af26:	4639      	mov	r1, r7
 800af28:	4622      	mov	r2, r4
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff1a 	bl	800ad64 <__multiply>
 800af30:	4639      	mov	r1, r7
 800af32:	4680      	mov	r8, r0
 800af34:	4630      	mov	r0, r6
 800af36:	f7ff fe47 	bl	800abc8 <_Bfree>
 800af3a:	4647      	mov	r7, r8
 800af3c:	106d      	asrs	r5, r5, #1
 800af3e:	d00b      	beq.n	800af58 <__pow5mult+0xa0>
 800af40:	6820      	ldr	r0, [r4, #0]
 800af42:	b938      	cbnz	r0, 800af54 <__pow5mult+0x9c>
 800af44:	4622      	mov	r2, r4
 800af46:	4621      	mov	r1, r4
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ff0b 	bl	800ad64 <__multiply>
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	f8c0 9000 	str.w	r9, [r0]
 800af54:	4604      	mov	r4, r0
 800af56:	e7e4      	b.n	800af22 <__pow5mult+0x6a>
 800af58:	4638      	mov	r0, r7
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	bf00      	nop
 800af60:	0800c580 	.word	0x0800c580
 800af64:	0800c3b1 	.word	0x0800c3b1
 800af68:	0800c434 	.word	0x0800c434

0800af6c <__lshift>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	6849      	ldr	r1, [r1, #4]
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	4607      	mov	r7, r0
 800af7e:	4691      	mov	r9, r2
 800af80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af84:	f108 0601 	add.w	r6, r8, #1
 800af88:	42b3      	cmp	r3, r6
 800af8a:	db0b      	blt.n	800afa4 <__lshift+0x38>
 800af8c:	4638      	mov	r0, r7
 800af8e:	f7ff fddb 	bl	800ab48 <_Balloc>
 800af92:	4605      	mov	r5, r0
 800af94:	b948      	cbnz	r0, 800afaa <__lshift+0x3e>
 800af96:	4602      	mov	r2, r0
 800af98:	4b2a      	ldr	r3, [pc, #168]	; (800b044 <__lshift+0xd8>)
 800af9a:	482b      	ldr	r0, [pc, #172]	; (800b048 <__lshift+0xdc>)
 800af9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afa0:	f000 fbb8 	bl	800b714 <__assert_func>
 800afa4:	3101      	adds	r1, #1
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	e7ee      	b.n	800af88 <__lshift+0x1c>
 800afaa:	2300      	movs	r3, #0
 800afac:	f100 0114 	add.w	r1, r0, #20
 800afb0:	f100 0210 	add.w	r2, r0, #16
 800afb4:	4618      	mov	r0, r3
 800afb6:	4553      	cmp	r3, sl
 800afb8:	db37      	blt.n	800b02a <__lshift+0xbe>
 800afba:	6920      	ldr	r0, [r4, #16]
 800afbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afc0:	f104 0314 	add.w	r3, r4, #20
 800afc4:	f019 091f 	ands.w	r9, r9, #31
 800afc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afd0:	d02f      	beq.n	800b032 <__lshift+0xc6>
 800afd2:	f1c9 0e20 	rsb	lr, r9, #32
 800afd6:	468a      	mov	sl, r1
 800afd8:	f04f 0c00 	mov.w	ip, #0
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	fa02 f209 	lsl.w	r2, r2, r9
 800afe2:	ea42 020c 	orr.w	r2, r2, ip
 800afe6:	f84a 2b04 	str.w	r2, [sl], #4
 800afea:	f853 2b04 	ldr.w	r2, [r3], #4
 800afee:	4298      	cmp	r0, r3
 800aff0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aff4:	d8f2      	bhi.n	800afdc <__lshift+0x70>
 800aff6:	1b03      	subs	r3, r0, r4
 800aff8:	3b15      	subs	r3, #21
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	3304      	adds	r3, #4
 800b000:	f104 0215 	add.w	r2, r4, #21
 800b004:	4290      	cmp	r0, r2
 800b006:	bf38      	it	cc
 800b008:	2304      	movcc	r3, #4
 800b00a:	f841 c003 	str.w	ip, [r1, r3]
 800b00e:	f1bc 0f00 	cmp.w	ip, #0
 800b012:	d001      	beq.n	800b018 <__lshift+0xac>
 800b014:	f108 0602 	add.w	r6, r8, #2
 800b018:	3e01      	subs	r6, #1
 800b01a:	4638      	mov	r0, r7
 800b01c:	612e      	str	r6, [r5, #16]
 800b01e:	4621      	mov	r1, r4
 800b020:	f7ff fdd2 	bl	800abc8 <_Bfree>
 800b024:	4628      	mov	r0, r5
 800b026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b02e:	3301      	adds	r3, #1
 800b030:	e7c1      	b.n	800afb6 <__lshift+0x4a>
 800b032:	3904      	subs	r1, #4
 800b034:	f853 2b04 	ldr.w	r2, [r3], #4
 800b038:	f841 2f04 	str.w	r2, [r1, #4]!
 800b03c:	4298      	cmp	r0, r3
 800b03e:	d8f9      	bhi.n	800b034 <__lshift+0xc8>
 800b040:	e7ea      	b.n	800b018 <__lshift+0xac>
 800b042:	bf00      	nop
 800b044:	0800c423 	.word	0x0800c423
 800b048:	0800c434 	.word	0x0800c434

0800b04c <__mcmp>:
 800b04c:	b530      	push	{r4, r5, lr}
 800b04e:	6902      	ldr	r2, [r0, #16]
 800b050:	690c      	ldr	r4, [r1, #16]
 800b052:	1b12      	subs	r2, r2, r4
 800b054:	d10e      	bne.n	800b074 <__mcmp+0x28>
 800b056:	f100 0314 	add.w	r3, r0, #20
 800b05a:	3114      	adds	r1, #20
 800b05c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b06c:	42a5      	cmp	r5, r4
 800b06e:	d003      	beq.n	800b078 <__mcmp+0x2c>
 800b070:	d305      	bcc.n	800b07e <__mcmp+0x32>
 800b072:	2201      	movs	r2, #1
 800b074:	4610      	mov	r0, r2
 800b076:	bd30      	pop	{r4, r5, pc}
 800b078:	4283      	cmp	r3, r0
 800b07a:	d3f3      	bcc.n	800b064 <__mcmp+0x18>
 800b07c:	e7fa      	b.n	800b074 <__mcmp+0x28>
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	e7f7      	b.n	800b074 <__mcmp+0x28>

0800b084 <__mdiff>:
 800b084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	4606      	mov	r6, r0
 800b08c:	4611      	mov	r1, r2
 800b08e:	4620      	mov	r0, r4
 800b090:	4690      	mov	r8, r2
 800b092:	f7ff ffdb 	bl	800b04c <__mcmp>
 800b096:	1e05      	subs	r5, r0, #0
 800b098:	d110      	bne.n	800b0bc <__mdiff+0x38>
 800b09a:	4629      	mov	r1, r5
 800b09c:	4630      	mov	r0, r6
 800b09e:	f7ff fd53 	bl	800ab48 <_Balloc>
 800b0a2:	b930      	cbnz	r0, 800b0b2 <__mdiff+0x2e>
 800b0a4:	4b3a      	ldr	r3, [pc, #232]	; (800b190 <__mdiff+0x10c>)
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	f240 2132 	movw	r1, #562	; 0x232
 800b0ac:	4839      	ldr	r0, [pc, #228]	; (800b194 <__mdiff+0x110>)
 800b0ae:	f000 fb31 	bl	800b714 <__assert_func>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	bfa4      	itt	ge
 800b0be:	4643      	movge	r3, r8
 800b0c0:	46a0      	movge	r8, r4
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0c8:	bfa6      	itte	ge
 800b0ca:	461c      	movge	r4, r3
 800b0cc:	2500      	movge	r5, #0
 800b0ce:	2501      	movlt	r5, #1
 800b0d0:	f7ff fd3a 	bl	800ab48 <_Balloc>
 800b0d4:	b920      	cbnz	r0, 800b0e0 <__mdiff+0x5c>
 800b0d6:	4b2e      	ldr	r3, [pc, #184]	; (800b190 <__mdiff+0x10c>)
 800b0d8:	4602      	mov	r2, r0
 800b0da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0de:	e7e5      	b.n	800b0ac <__mdiff+0x28>
 800b0e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0e4:	6926      	ldr	r6, [r4, #16]
 800b0e6:	60c5      	str	r5, [r0, #12]
 800b0e8:	f104 0914 	add.w	r9, r4, #20
 800b0ec:	f108 0514 	add.w	r5, r8, #20
 800b0f0:	f100 0e14 	add.w	lr, r0, #20
 800b0f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b0f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0fc:	f108 0210 	add.w	r2, r8, #16
 800b100:	46f2      	mov	sl, lr
 800b102:	2100      	movs	r1, #0
 800b104:	f859 3b04 	ldr.w	r3, [r9], #4
 800b108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b10c:	fa1f f883 	uxth.w	r8, r3
 800b110:	fa11 f18b 	uxtah	r1, r1, fp
 800b114:	0c1b      	lsrs	r3, r3, #16
 800b116:	eba1 0808 	sub.w	r8, r1, r8
 800b11a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b11e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b122:	fa1f f888 	uxth.w	r8, r8
 800b126:	1419      	asrs	r1, r3, #16
 800b128:	454e      	cmp	r6, r9
 800b12a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b12e:	f84a 3b04 	str.w	r3, [sl], #4
 800b132:	d8e7      	bhi.n	800b104 <__mdiff+0x80>
 800b134:	1b33      	subs	r3, r6, r4
 800b136:	3b15      	subs	r3, #21
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	3304      	adds	r3, #4
 800b13e:	3415      	adds	r4, #21
 800b140:	42a6      	cmp	r6, r4
 800b142:	bf38      	it	cc
 800b144:	2304      	movcc	r3, #4
 800b146:	441d      	add	r5, r3
 800b148:	4473      	add	r3, lr
 800b14a:	469e      	mov	lr, r3
 800b14c:	462e      	mov	r6, r5
 800b14e:	4566      	cmp	r6, ip
 800b150:	d30e      	bcc.n	800b170 <__mdiff+0xec>
 800b152:	f10c 0203 	add.w	r2, ip, #3
 800b156:	1b52      	subs	r2, r2, r5
 800b158:	f022 0203 	bic.w	r2, r2, #3
 800b15c:	3d03      	subs	r5, #3
 800b15e:	45ac      	cmp	ip, r5
 800b160:	bf38      	it	cc
 800b162:	2200      	movcc	r2, #0
 800b164:	441a      	add	r2, r3
 800b166:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b16a:	b17b      	cbz	r3, 800b18c <__mdiff+0x108>
 800b16c:	6107      	str	r7, [r0, #16]
 800b16e:	e7a3      	b.n	800b0b8 <__mdiff+0x34>
 800b170:	f856 8b04 	ldr.w	r8, [r6], #4
 800b174:	fa11 f288 	uxtah	r2, r1, r8
 800b178:	1414      	asrs	r4, r2, #16
 800b17a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b17e:	b292      	uxth	r2, r2
 800b180:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b184:	f84e 2b04 	str.w	r2, [lr], #4
 800b188:	1421      	asrs	r1, r4, #16
 800b18a:	e7e0      	b.n	800b14e <__mdiff+0xca>
 800b18c:	3f01      	subs	r7, #1
 800b18e:	e7ea      	b.n	800b166 <__mdiff+0xe2>
 800b190:	0800c423 	.word	0x0800c423
 800b194:	0800c434 	.word	0x0800c434

0800b198 <__d2b>:
 800b198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	4689      	mov	r9, r1
 800b19e:	2101      	movs	r1, #1
 800b1a0:	ec57 6b10 	vmov	r6, r7, d0
 800b1a4:	4690      	mov	r8, r2
 800b1a6:	f7ff fccf 	bl	800ab48 <_Balloc>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	b930      	cbnz	r0, 800b1bc <__d2b+0x24>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	4b25      	ldr	r3, [pc, #148]	; (800b248 <__d2b+0xb0>)
 800b1b2:	4826      	ldr	r0, [pc, #152]	; (800b24c <__d2b+0xb4>)
 800b1b4:	f240 310a 	movw	r1, #778	; 0x30a
 800b1b8:	f000 faac 	bl	800b714 <__assert_func>
 800b1bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1c4:	bb35      	cbnz	r5, 800b214 <__d2b+0x7c>
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	d028      	beq.n	800b21e <__d2b+0x86>
 800b1cc:	4668      	mov	r0, sp
 800b1ce:	9600      	str	r6, [sp, #0]
 800b1d0:	f7ff fd82 	bl	800acd8 <__lo0bits>
 800b1d4:	9900      	ldr	r1, [sp, #0]
 800b1d6:	b300      	cbz	r0, 800b21a <__d2b+0x82>
 800b1d8:	9a01      	ldr	r2, [sp, #4]
 800b1da:	f1c0 0320 	rsb	r3, r0, #32
 800b1de:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e2:	430b      	orrs	r3, r1
 800b1e4:	40c2      	lsrs	r2, r0
 800b1e6:	6163      	str	r3, [r4, #20]
 800b1e8:	9201      	str	r2, [sp, #4]
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	61a3      	str	r3, [r4, #24]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	bf14      	ite	ne
 800b1f2:	2202      	movne	r2, #2
 800b1f4:	2201      	moveq	r2, #1
 800b1f6:	6122      	str	r2, [r4, #16]
 800b1f8:	b1d5      	cbz	r5, 800b230 <__d2b+0x98>
 800b1fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1fe:	4405      	add	r5, r0
 800b200:	f8c9 5000 	str.w	r5, [r9]
 800b204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b208:	f8c8 0000 	str.w	r0, [r8]
 800b20c:	4620      	mov	r0, r4
 800b20e:	b003      	add	sp, #12
 800b210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b218:	e7d5      	b.n	800b1c6 <__d2b+0x2e>
 800b21a:	6161      	str	r1, [r4, #20]
 800b21c:	e7e5      	b.n	800b1ea <__d2b+0x52>
 800b21e:	a801      	add	r0, sp, #4
 800b220:	f7ff fd5a 	bl	800acd8 <__lo0bits>
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	6163      	str	r3, [r4, #20]
 800b228:	2201      	movs	r2, #1
 800b22a:	6122      	str	r2, [r4, #16]
 800b22c:	3020      	adds	r0, #32
 800b22e:	e7e3      	b.n	800b1f8 <__d2b+0x60>
 800b230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b238:	f8c9 0000 	str.w	r0, [r9]
 800b23c:	6918      	ldr	r0, [r3, #16]
 800b23e:	f7ff fd2b 	bl	800ac98 <__hi0bits>
 800b242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b246:	e7df      	b.n	800b208 <__d2b+0x70>
 800b248:	0800c423 	.word	0x0800c423
 800b24c:	0800c434 	.word	0x0800c434

0800b250 <_calloc_r>:
 800b250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b252:	fba1 2402 	umull	r2, r4, r1, r2
 800b256:	b94c      	cbnz	r4, 800b26c <_calloc_r+0x1c>
 800b258:	4611      	mov	r1, r2
 800b25a:	9201      	str	r2, [sp, #4]
 800b25c:	f000 f87a 	bl	800b354 <_malloc_r>
 800b260:	9a01      	ldr	r2, [sp, #4]
 800b262:	4605      	mov	r5, r0
 800b264:	b930      	cbnz	r0, 800b274 <_calloc_r+0x24>
 800b266:	4628      	mov	r0, r5
 800b268:	b003      	add	sp, #12
 800b26a:	bd30      	pop	{r4, r5, pc}
 800b26c:	220c      	movs	r2, #12
 800b26e:	6002      	str	r2, [r0, #0]
 800b270:	2500      	movs	r5, #0
 800b272:	e7f8      	b.n	800b266 <_calloc_r+0x16>
 800b274:	4621      	mov	r1, r4
 800b276:	f7fe f941 	bl	80094fc <memset>
 800b27a:	e7f4      	b.n	800b266 <_calloc_r+0x16>

0800b27c <_free_r>:
 800b27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b27e:	2900      	cmp	r1, #0
 800b280:	d044      	beq.n	800b30c <_free_r+0x90>
 800b282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b286:	9001      	str	r0, [sp, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f1a1 0404 	sub.w	r4, r1, #4
 800b28e:	bfb8      	it	lt
 800b290:	18e4      	addlt	r4, r4, r3
 800b292:	f000 fa9b 	bl	800b7cc <__malloc_lock>
 800b296:	4a1e      	ldr	r2, [pc, #120]	; (800b310 <_free_r+0x94>)
 800b298:	9801      	ldr	r0, [sp, #4]
 800b29a:	6813      	ldr	r3, [r2, #0]
 800b29c:	b933      	cbnz	r3, 800b2ac <_free_r+0x30>
 800b29e:	6063      	str	r3, [r4, #4]
 800b2a0:	6014      	str	r4, [r2, #0]
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2a8:	f000 ba96 	b.w	800b7d8 <__malloc_unlock>
 800b2ac:	42a3      	cmp	r3, r4
 800b2ae:	d908      	bls.n	800b2c2 <_free_r+0x46>
 800b2b0:	6825      	ldr	r5, [r4, #0]
 800b2b2:	1961      	adds	r1, r4, r5
 800b2b4:	428b      	cmp	r3, r1
 800b2b6:	bf01      	itttt	eq
 800b2b8:	6819      	ldreq	r1, [r3, #0]
 800b2ba:	685b      	ldreq	r3, [r3, #4]
 800b2bc:	1949      	addeq	r1, r1, r5
 800b2be:	6021      	streq	r1, [r4, #0]
 800b2c0:	e7ed      	b.n	800b29e <_free_r+0x22>
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	b10b      	cbz	r3, 800b2cc <_free_r+0x50>
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d9fa      	bls.n	800b2c2 <_free_r+0x46>
 800b2cc:	6811      	ldr	r1, [r2, #0]
 800b2ce:	1855      	adds	r5, r2, r1
 800b2d0:	42a5      	cmp	r5, r4
 800b2d2:	d10b      	bne.n	800b2ec <_free_r+0x70>
 800b2d4:	6824      	ldr	r4, [r4, #0]
 800b2d6:	4421      	add	r1, r4
 800b2d8:	1854      	adds	r4, r2, r1
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	6011      	str	r1, [r2, #0]
 800b2de:	d1e0      	bne.n	800b2a2 <_free_r+0x26>
 800b2e0:	681c      	ldr	r4, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	6053      	str	r3, [r2, #4]
 800b2e6:	4421      	add	r1, r4
 800b2e8:	6011      	str	r1, [r2, #0]
 800b2ea:	e7da      	b.n	800b2a2 <_free_r+0x26>
 800b2ec:	d902      	bls.n	800b2f4 <_free_r+0x78>
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	6003      	str	r3, [r0, #0]
 800b2f2:	e7d6      	b.n	800b2a2 <_free_r+0x26>
 800b2f4:	6825      	ldr	r5, [r4, #0]
 800b2f6:	1961      	adds	r1, r4, r5
 800b2f8:	428b      	cmp	r3, r1
 800b2fa:	bf04      	itt	eq
 800b2fc:	6819      	ldreq	r1, [r3, #0]
 800b2fe:	685b      	ldreq	r3, [r3, #4]
 800b300:	6063      	str	r3, [r4, #4]
 800b302:	bf04      	itt	eq
 800b304:	1949      	addeq	r1, r1, r5
 800b306:	6021      	streq	r1, [r4, #0]
 800b308:	6054      	str	r4, [r2, #4]
 800b30a:	e7ca      	b.n	800b2a2 <_free_r+0x26>
 800b30c:	b003      	add	sp, #12
 800b30e:	bd30      	pop	{r4, r5, pc}
 800b310:	20001fb0 	.word	0x20001fb0

0800b314 <sbrk_aligned>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	4e0e      	ldr	r6, [pc, #56]	; (800b350 <sbrk_aligned+0x3c>)
 800b318:	460c      	mov	r4, r1
 800b31a:	6831      	ldr	r1, [r6, #0]
 800b31c:	4605      	mov	r5, r0
 800b31e:	b911      	cbnz	r1, 800b326 <sbrk_aligned+0x12>
 800b320:	f000 f9e8 	bl	800b6f4 <_sbrk_r>
 800b324:	6030      	str	r0, [r6, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f000 f9e3 	bl	800b6f4 <_sbrk_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d00a      	beq.n	800b348 <sbrk_aligned+0x34>
 800b332:	1cc4      	adds	r4, r0, #3
 800b334:	f024 0403 	bic.w	r4, r4, #3
 800b338:	42a0      	cmp	r0, r4
 800b33a:	d007      	beq.n	800b34c <sbrk_aligned+0x38>
 800b33c:	1a21      	subs	r1, r4, r0
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f9d8 	bl	800b6f4 <_sbrk_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d101      	bne.n	800b34c <sbrk_aligned+0x38>
 800b348:	f04f 34ff 	mov.w	r4, #4294967295
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	20001fb4 	.word	0x20001fb4

0800b354 <_malloc_r>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	1ccd      	adds	r5, r1, #3
 800b35a:	f025 0503 	bic.w	r5, r5, #3
 800b35e:	3508      	adds	r5, #8
 800b360:	2d0c      	cmp	r5, #12
 800b362:	bf38      	it	cc
 800b364:	250c      	movcc	r5, #12
 800b366:	2d00      	cmp	r5, #0
 800b368:	4607      	mov	r7, r0
 800b36a:	db01      	blt.n	800b370 <_malloc_r+0x1c>
 800b36c:	42a9      	cmp	r1, r5
 800b36e:	d905      	bls.n	800b37c <_malloc_r+0x28>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	2600      	movs	r6, #0
 800b376:	4630      	mov	r0, r6
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	4e2e      	ldr	r6, [pc, #184]	; (800b438 <_malloc_r+0xe4>)
 800b37e:	f000 fa25 	bl	800b7cc <__malloc_lock>
 800b382:	6833      	ldr	r3, [r6, #0]
 800b384:	461c      	mov	r4, r3
 800b386:	bb34      	cbnz	r4, 800b3d6 <_malloc_r+0x82>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	f7ff ffc2 	bl	800b314 <sbrk_aligned>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	4604      	mov	r4, r0
 800b394:	d14d      	bne.n	800b432 <_malloc_r+0xde>
 800b396:	6834      	ldr	r4, [r6, #0]
 800b398:	4626      	mov	r6, r4
 800b39a:	2e00      	cmp	r6, #0
 800b39c:	d140      	bne.n	800b420 <_malloc_r+0xcc>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	eb04 0803 	add.w	r8, r4, r3
 800b3a8:	f000 f9a4 	bl	800b6f4 <_sbrk_r>
 800b3ac:	4580      	cmp	r8, r0
 800b3ae:	d13a      	bne.n	800b426 <_malloc_r+0xd2>
 800b3b0:	6821      	ldr	r1, [r4, #0]
 800b3b2:	3503      	adds	r5, #3
 800b3b4:	1a6d      	subs	r5, r5, r1
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff ffa5 	bl	800b314 <sbrk_aligned>
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d02b      	beq.n	800b426 <_malloc_r+0xd2>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	442b      	add	r3, r5
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	e00e      	b.n	800b3f4 <_malloc_r+0xa0>
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	1b52      	subs	r2, r2, r5
 800b3da:	d41e      	bmi.n	800b41a <_malloc_r+0xc6>
 800b3dc:	2a0b      	cmp	r2, #11
 800b3de:	d916      	bls.n	800b40e <_malloc_r+0xba>
 800b3e0:	1961      	adds	r1, r4, r5
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	6025      	str	r5, [r4, #0]
 800b3e6:	bf18      	it	ne
 800b3e8:	6059      	strne	r1, [r3, #4]
 800b3ea:	6863      	ldr	r3, [r4, #4]
 800b3ec:	bf08      	it	eq
 800b3ee:	6031      	streq	r1, [r6, #0]
 800b3f0:	5162      	str	r2, [r4, r5]
 800b3f2:	604b      	str	r3, [r1, #4]
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f104 060b 	add.w	r6, r4, #11
 800b3fa:	f000 f9ed 	bl	800b7d8 <__malloc_unlock>
 800b3fe:	f026 0607 	bic.w	r6, r6, #7
 800b402:	1d23      	adds	r3, r4, #4
 800b404:	1af2      	subs	r2, r6, r3
 800b406:	d0b6      	beq.n	800b376 <_malloc_r+0x22>
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	50a3      	str	r3, [r4, r2]
 800b40c:	e7b3      	b.n	800b376 <_malloc_r+0x22>
 800b40e:	6862      	ldr	r2, [r4, #4]
 800b410:	42a3      	cmp	r3, r4
 800b412:	bf0c      	ite	eq
 800b414:	6032      	streq	r2, [r6, #0]
 800b416:	605a      	strne	r2, [r3, #4]
 800b418:	e7ec      	b.n	800b3f4 <_malloc_r+0xa0>
 800b41a:	4623      	mov	r3, r4
 800b41c:	6864      	ldr	r4, [r4, #4]
 800b41e:	e7b2      	b.n	800b386 <_malloc_r+0x32>
 800b420:	4634      	mov	r4, r6
 800b422:	6876      	ldr	r6, [r6, #4]
 800b424:	e7b9      	b.n	800b39a <_malloc_r+0x46>
 800b426:	230c      	movs	r3, #12
 800b428:	603b      	str	r3, [r7, #0]
 800b42a:	4638      	mov	r0, r7
 800b42c:	f000 f9d4 	bl	800b7d8 <__malloc_unlock>
 800b430:	e7a1      	b.n	800b376 <_malloc_r+0x22>
 800b432:	6025      	str	r5, [r4, #0]
 800b434:	e7de      	b.n	800b3f4 <_malloc_r+0xa0>
 800b436:	bf00      	nop
 800b438:	20001fb0 	.word	0x20001fb0

0800b43c <__ssputs_r>:
 800b43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b440:	688e      	ldr	r6, [r1, #8]
 800b442:	429e      	cmp	r6, r3
 800b444:	4682      	mov	sl, r0
 800b446:	460c      	mov	r4, r1
 800b448:	4690      	mov	r8, r2
 800b44a:	461f      	mov	r7, r3
 800b44c:	d838      	bhi.n	800b4c0 <__ssputs_r+0x84>
 800b44e:	898a      	ldrh	r2, [r1, #12]
 800b450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b454:	d032      	beq.n	800b4bc <__ssputs_r+0x80>
 800b456:	6825      	ldr	r5, [r4, #0]
 800b458:	6909      	ldr	r1, [r1, #16]
 800b45a:	eba5 0901 	sub.w	r9, r5, r1
 800b45e:	6965      	ldr	r5, [r4, #20]
 800b460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b468:	3301      	adds	r3, #1
 800b46a:	444b      	add	r3, r9
 800b46c:	106d      	asrs	r5, r5, #1
 800b46e:	429d      	cmp	r5, r3
 800b470:	bf38      	it	cc
 800b472:	461d      	movcc	r5, r3
 800b474:	0553      	lsls	r3, r2, #21
 800b476:	d531      	bpl.n	800b4dc <__ssputs_r+0xa0>
 800b478:	4629      	mov	r1, r5
 800b47a:	f7ff ff6b 	bl	800b354 <_malloc_r>
 800b47e:	4606      	mov	r6, r0
 800b480:	b950      	cbnz	r0, 800b498 <__ssputs_r+0x5c>
 800b482:	230c      	movs	r3, #12
 800b484:	f8ca 3000 	str.w	r3, [sl]
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b498:	6921      	ldr	r1, [r4, #16]
 800b49a:	464a      	mov	r2, r9
 800b49c:	f7ff fb46 	bl	800ab2c <memcpy>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	6126      	str	r6, [r4, #16]
 800b4ae:	6165      	str	r5, [r4, #20]
 800b4b0:	444e      	add	r6, r9
 800b4b2:	eba5 0509 	sub.w	r5, r5, r9
 800b4b6:	6026      	str	r6, [r4, #0]
 800b4b8:	60a5      	str	r5, [r4, #8]
 800b4ba:	463e      	mov	r6, r7
 800b4bc:	42be      	cmp	r6, r7
 800b4be:	d900      	bls.n	800b4c2 <__ssputs_r+0x86>
 800b4c0:	463e      	mov	r6, r7
 800b4c2:	6820      	ldr	r0, [r4, #0]
 800b4c4:	4632      	mov	r2, r6
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	f000 f966 	bl	800b798 <memmove>
 800b4cc:	68a3      	ldr	r3, [r4, #8]
 800b4ce:	1b9b      	subs	r3, r3, r6
 800b4d0:	60a3      	str	r3, [r4, #8]
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	4433      	add	r3, r6
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e7db      	b.n	800b494 <__ssputs_r+0x58>
 800b4dc:	462a      	mov	r2, r5
 800b4de:	f000 f981 	bl	800b7e4 <_realloc_r>
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1e1      	bne.n	800b4ac <__ssputs_r+0x70>
 800b4e8:	6921      	ldr	r1, [r4, #16]
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f7ff fec6 	bl	800b27c <_free_r>
 800b4f0:	e7c7      	b.n	800b482 <__ssputs_r+0x46>
	...

0800b4f4 <_svfiprintf_r>:
 800b4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	4698      	mov	r8, r3
 800b4fa:	898b      	ldrh	r3, [r1, #12]
 800b4fc:	061b      	lsls	r3, r3, #24
 800b4fe:	b09d      	sub	sp, #116	; 0x74
 800b500:	4607      	mov	r7, r0
 800b502:	460d      	mov	r5, r1
 800b504:	4614      	mov	r4, r2
 800b506:	d50e      	bpl.n	800b526 <_svfiprintf_r+0x32>
 800b508:	690b      	ldr	r3, [r1, #16]
 800b50a:	b963      	cbnz	r3, 800b526 <_svfiprintf_r+0x32>
 800b50c:	2140      	movs	r1, #64	; 0x40
 800b50e:	f7ff ff21 	bl	800b354 <_malloc_r>
 800b512:	6028      	str	r0, [r5, #0]
 800b514:	6128      	str	r0, [r5, #16]
 800b516:	b920      	cbnz	r0, 800b522 <_svfiprintf_r+0x2e>
 800b518:	230c      	movs	r3, #12
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	e0d1      	b.n	800b6c6 <_svfiprintf_r+0x1d2>
 800b522:	2340      	movs	r3, #64	; 0x40
 800b524:	616b      	str	r3, [r5, #20]
 800b526:	2300      	movs	r3, #0
 800b528:	9309      	str	r3, [sp, #36]	; 0x24
 800b52a:	2320      	movs	r3, #32
 800b52c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b530:	f8cd 800c 	str.w	r8, [sp, #12]
 800b534:	2330      	movs	r3, #48	; 0x30
 800b536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6e0 <_svfiprintf_r+0x1ec>
 800b53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b53e:	f04f 0901 	mov.w	r9, #1
 800b542:	4623      	mov	r3, r4
 800b544:	469a      	mov	sl, r3
 800b546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54a:	b10a      	cbz	r2, 800b550 <_svfiprintf_r+0x5c>
 800b54c:	2a25      	cmp	r2, #37	; 0x25
 800b54e:	d1f9      	bne.n	800b544 <_svfiprintf_r+0x50>
 800b550:	ebba 0b04 	subs.w	fp, sl, r4
 800b554:	d00b      	beq.n	800b56e <_svfiprintf_r+0x7a>
 800b556:	465b      	mov	r3, fp
 800b558:	4622      	mov	r2, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7ff ff6d 	bl	800b43c <__ssputs_r>
 800b562:	3001      	adds	r0, #1
 800b564:	f000 80aa 	beq.w	800b6bc <_svfiprintf_r+0x1c8>
 800b568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b56a:	445a      	add	r2, fp
 800b56c:	9209      	str	r2, [sp, #36]	; 0x24
 800b56e:	f89a 3000 	ldrb.w	r3, [sl]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80a2 	beq.w	800b6bc <_svfiprintf_r+0x1c8>
 800b578:	2300      	movs	r3, #0
 800b57a:	f04f 32ff 	mov.w	r2, #4294967295
 800b57e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b582:	f10a 0a01 	add.w	sl, sl, #1
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	9307      	str	r3, [sp, #28]
 800b58a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b58e:	931a      	str	r3, [sp, #104]	; 0x68
 800b590:	4654      	mov	r4, sl
 800b592:	2205      	movs	r2, #5
 800b594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b598:	4851      	ldr	r0, [pc, #324]	; (800b6e0 <_svfiprintf_r+0x1ec>)
 800b59a:	f7f4 fe29 	bl	80001f0 <memchr>
 800b59e:	9a04      	ldr	r2, [sp, #16]
 800b5a0:	b9d8      	cbnz	r0, 800b5da <_svfiprintf_r+0xe6>
 800b5a2:	06d0      	lsls	r0, r2, #27
 800b5a4:	bf44      	itt	mi
 800b5a6:	2320      	movmi	r3, #32
 800b5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ac:	0711      	lsls	r1, r2, #28
 800b5ae:	bf44      	itt	mi
 800b5b0:	232b      	movmi	r3, #43	; 0x2b
 800b5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b5bc:	d015      	beq.n	800b5ea <_svfiprintf_r+0xf6>
 800b5be:	9a07      	ldr	r2, [sp, #28]
 800b5c0:	4654      	mov	r4, sl
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	f04f 0c0a 	mov.w	ip, #10
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ce:	3b30      	subs	r3, #48	; 0x30
 800b5d0:	2b09      	cmp	r3, #9
 800b5d2:	d94e      	bls.n	800b672 <_svfiprintf_r+0x17e>
 800b5d4:	b1b0      	cbz	r0, 800b604 <_svfiprintf_r+0x110>
 800b5d6:	9207      	str	r2, [sp, #28]
 800b5d8:	e014      	b.n	800b604 <_svfiprintf_r+0x110>
 800b5da:	eba0 0308 	sub.w	r3, r0, r8
 800b5de:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	46a2      	mov	sl, r4
 800b5e8:	e7d2      	b.n	800b590 <_svfiprintf_r+0x9c>
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	1d19      	adds	r1, r3, #4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	9103      	str	r1, [sp, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bfbb      	ittet	lt
 800b5f6:	425b      	neglt	r3, r3
 800b5f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b5fc:	9307      	strge	r3, [sp, #28]
 800b5fe:	9307      	strlt	r3, [sp, #28]
 800b600:	bfb8      	it	lt
 800b602:	9204      	strlt	r2, [sp, #16]
 800b604:	7823      	ldrb	r3, [r4, #0]
 800b606:	2b2e      	cmp	r3, #46	; 0x2e
 800b608:	d10c      	bne.n	800b624 <_svfiprintf_r+0x130>
 800b60a:	7863      	ldrb	r3, [r4, #1]
 800b60c:	2b2a      	cmp	r3, #42	; 0x2a
 800b60e:	d135      	bne.n	800b67c <_svfiprintf_r+0x188>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	1d1a      	adds	r2, r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	9203      	str	r2, [sp, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bfb8      	it	lt
 800b61c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b620:	3402      	adds	r4, #2
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6f0 <_svfiprintf_r+0x1fc>
 800b628:	7821      	ldrb	r1, [r4, #0]
 800b62a:	2203      	movs	r2, #3
 800b62c:	4650      	mov	r0, sl
 800b62e:	f7f4 fddf 	bl	80001f0 <memchr>
 800b632:	b140      	cbz	r0, 800b646 <_svfiprintf_r+0x152>
 800b634:	2340      	movs	r3, #64	; 0x40
 800b636:	eba0 000a 	sub.w	r0, r0, sl
 800b63a:	fa03 f000 	lsl.w	r0, r3, r0
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	4303      	orrs	r3, r0
 800b642:	3401      	adds	r4, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64a:	4826      	ldr	r0, [pc, #152]	; (800b6e4 <_svfiprintf_r+0x1f0>)
 800b64c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b650:	2206      	movs	r2, #6
 800b652:	f7f4 fdcd 	bl	80001f0 <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d038      	beq.n	800b6cc <_svfiprintf_r+0x1d8>
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <_svfiprintf_r+0x1f4>)
 800b65c:	bb1b      	cbnz	r3, 800b6a6 <_svfiprintf_r+0x1b2>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	f023 0307 	bic.w	r3, r3, #7
 800b666:	3308      	adds	r3, #8
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66c:	4433      	add	r3, r6
 800b66e:	9309      	str	r3, [sp, #36]	; 0x24
 800b670:	e767      	b.n	800b542 <_svfiprintf_r+0x4e>
 800b672:	fb0c 3202 	mla	r2, ip, r2, r3
 800b676:	460c      	mov	r4, r1
 800b678:	2001      	movs	r0, #1
 800b67a:	e7a5      	b.n	800b5c8 <_svfiprintf_r+0xd4>
 800b67c:	2300      	movs	r3, #0
 800b67e:	3401      	adds	r4, #1
 800b680:	9305      	str	r3, [sp, #20]
 800b682:	4619      	mov	r1, r3
 800b684:	f04f 0c0a 	mov.w	ip, #10
 800b688:	4620      	mov	r0, r4
 800b68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68e:	3a30      	subs	r2, #48	; 0x30
 800b690:	2a09      	cmp	r2, #9
 800b692:	d903      	bls.n	800b69c <_svfiprintf_r+0x1a8>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0c5      	beq.n	800b624 <_svfiprintf_r+0x130>
 800b698:	9105      	str	r1, [sp, #20]
 800b69a:	e7c3      	b.n	800b624 <_svfiprintf_r+0x130>
 800b69c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e7f0      	b.n	800b688 <_svfiprintf_r+0x194>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <_svfiprintf_r+0x1f8>)
 800b6ae:	a904      	add	r1, sp, #16
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f7fd ffcb 	bl	800964c <_printf_float>
 800b6b6:	1c42      	adds	r2, r0, #1
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	d1d6      	bne.n	800b66a <_svfiprintf_r+0x176>
 800b6bc:	89ab      	ldrh	r3, [r5, #12]
 800b6be:	065b      	lsls	r3, r3, #25
 800b6c0:	f53f af2c 	bmi.w	800b51c <_svfiprintf_r+0x28>
 800b6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c6:	b01d      	add	sp, #116	; 0x74
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <_svfiprintf_r+0x1f8>)
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	f7fe fa5c 	bl	8009b94 <_printf_i>
 800b6dc:	e7eb      	b.n	800b6b6 <_svfiprintf_r+0x1c2>
 800b6de:	bf00      	nop
 800b6e0:	0800c58c 	.word	0x0800c58c
 800b6e4:	0800c596 	.word	0x0800c596
 800b6e8:	0800964d 	.word	0x0800964d
 800b6ec:	0800b43d 	.word	0x0800b43d
 800b6f0:	0800c592 	.word	0x0800c592

0800b6f4 <_sbrk_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d06      	ldr	r5, [pc, #24]	; (800b710 <_sbrk_r+0x1c>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f6 f81a 	bl	8001738 <_sbrk>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_sbrk_r+0x1a>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_sbrk_r+0x1a>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20001fb8 	.word	0x20001fb8

0800b714 <__assert_func>:
 800b714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b716:	4614      	mov	r4, r2
 800b718:	461a      	mov	r2, r3
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <__assert_func+0x2c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4605      	mov	r5, r0
 800b720:	68d8      	ldr	r0, [r3, #12]
 800b722:	b14c      	cbz	r4, 800b738 <__assert_func+0x24>
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <__assert_func+0x30>)
 800b726:	9100      	str	r1, [sp, #0]
 800b728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b72c:	4906      	ldr	r1, [pc, #24]	; (800b748 <__assert_func+0x34>)
 800b72e:	462b      	mov	r3, r5
 800b730:	f000 f80e 	bl	800b750 <fiprintf>
 800b734:	f000 faac 	bl	800bc90 <abort>
 800b738:	4b04      	ldr	r3, [pc, #16]	; (800b74c <__assert_func+0x38>)
 800b73a:	461c      	mov	r4, r3
 800b73c:	e7f3      	b.n	800b726 <__assert_func+0x12>
 800b73e:	bf00      	nop
 800b740:	200000fc 	.word	0x200000fc
 800b744:	0800c59d 	.word	0x0800c59d
 800b748:	0800c5aa 	.word	0x0800c5aa
 800b74c:	0800c5d8 	.word	0x0800c5d8

0800b750 <fiprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b503      	push	{r0, r1, lr}
 800b754:	4601      	mov	r1, r0
 800b756:	ab03      	add	r3, sp, #12
 800b758:	4805      	ldr	r0, [pc, #20]	; (800b770 <fiprintf+0x20>)
 800b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	f000 f897 	bl	800b894 <_vfiprintf_r>
 800b766:	b002      	add	sp, #8
 800b768:	f85d eb04 	ldr.w	lr, [sp], #4
 800b76c:	b003      	add	sp, #12
 800b76e:	4770      	bx	lr
 800b770:	200000fc 	.word	0x200000fc

0800b774 <__ascii_mbtowc>:
 800b774:	b082      	sub	sp, #8
 800b776:	b901      	cbnz	r1, 800b77a <__ascii_mbtowc+0x6>
 800b778:	a901      	add	r1, sp, #4
 800b77a:	b142      	cbz	r2, 800b78e <__ascii_mbtowc+0x1a>
 800b77c:	b14b      	cbz	r3, 800b792 <__ascii_mbtowc+0x1e>
 800b77e:	7813      	ldrb	r3, [r2, #0]
 800b780:	600b      	str	r3, [r1, #0]
 800b782:	7812      	ldrb	r2, [r2, #0]
 800b784:	1e10      	subs	r0, r2, #0
 800b786:	bf18      	it	ne
 800b788:	2001      	movne	r0, #1
 800b78a:	b002      	add	sp, #8
 800b78c:	4770      	bx	lr
 800b78e:	4610      	mov	r0, r2
 800b790:	e7fb      	b.n	800b78a <__ascii_mbtowc+0x16>
 800b792:	f06f 0001 	mvn.w	r0, #1
 800b796:	e7f8      	b.n	800b78a <__ascii_mbtowc+0x16>

0800b798 <memmove>:
 800b798:	4288      	cmp	r0, r1
 800b79a:	b510      	push	{r4, lr}
 800b79c:	eb01 0402 	add.w	r4, r1, r2
 800b7a0:	d902      	bls.n	800b7a8 <memmove+0x10>
 800b7a2:	4284      	cmp	r4, r0
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	d807      	bhi.n	800b7b8 <memmove+0x20>
 800b7a8:	1e43      	subs	r3, r0, #1
 800b7aa:	42a1      	cmp	r1, r4
 800b7ac:	d008      	beq.n	800b7c0 <memmove+0x28>
 800b7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7b6:	e7f8      	b.n	800b7aa <memmove+0x12>
 800b7b8:	4402      	add	r2, r0
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	428a      	cmp	r2, r1
 800b7be:	d100      	bne.n	800b7c2 <memmove+0x2a>
 800b7c0:	bd10      	pop	{r4, pc}
 800b7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ca:	e7f7      	b.n	800b7bc <memmove+0x24>

0800b7cc <__malloc_lock>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	; (800b7d4 <__malloc_lock+0x8>)
 800b7ce:	f000 bc1f 	b.w	800c010 <__retarget_lock_acquire_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20001fbc 	.word	0x20001fbc

0800b7d8 <__malloc_unlock>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__malloc_unlock+0x8>)
 800b7da:	f000 bc1a 	b.w	800c012 <__retarget_lock_release_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20001fbc 	.word	0x20001fbc

0800b7e4 <_realloc_r>:
 800b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	4614      	mov	r4, r2
 800b7ec:	460e      	mov	r6, r1
 800b7ee:	b921      	cbnz	r1, 800b7fa <_realloc_r+0x16>
 800b7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	f7ff bdad 	b.w	800b354 <_malloc_r>
 800b7fa:	b92a      	cbnz	r2, 800b808 <_realloc_r+0x24>
 800b7fc:	f7ff fd3e 	bl	800b27c <_free_r>
 800b800:	4625      	mov	r5, r4
 800b802:	4628      	mov	r0, r5
 800b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b808:	f000 fc6a 	bl	800c0e0 <_malloc_usable_size_r>
 800b80c:	4284      	cmp	r4, r0
 800b80e:	4607      	mov	r7, r0
 800b810:	d802      	bhi.n	800b818 <_realloc_r+0x34>
 800b812:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b816:	d812      	bhi.n	800b83e <_realloc_r+0x5a>
 800b818:	4621      	mov	r1, r4
 800b81a:	4640      	mov	r0, r8
 800b81c:	f7ff fd9a 	bl	800b354 <_malloc_r>
 800b820:	4605      	mov	r5, r0
 800b822:	2800      	cmp	r0, #0
 800b824:	d0ed      	beq.n	800b802 <_realloc_r+0x1e>
 800b826:	42bc      	cmp	r4, r7
 800b828:	4622      	mov	r2, r4
 800b82a:	4631      	mov	r1, r6
 800b82c:	bf28      	it	cs
 800b82e:	463a      	movcs	r2, r7
 800b830:	f7ff f97c 	bl	800ab2c <memcpy>
 800b834:	4631      	mov	r1, r6
 800b836:	4640      	mov	r0, r8
 800b838:	f7ff fd20 	bl	800b27c <_free_r>
 800b83c:	e7e1      	b.n	800b802 <_realloc_r+0x1e>
 800b83e:	4635      	mov	r5, r6
 800b840:	e7df      	b.n	800b802 <_realloc_r+0x1e>

0800b842 <__sfputc_r>:
 800b842:	6893      	ldr	r3, [r2, #8]
 800b844:	3b01      	subs	r3, #1
 800b846:	2b00      	cmp	r3, #0
 800b848:	b410      	push	{r4}
 800b84a:	6093      	str	r3, [r2, #8]
 800b84c:	da08      	bge.n	800b860 <__sfputc_r+0x1e>
 800b84e:	6994      	ldr	r4, [r2, #24]
 800b850:	42a3      	cmp	r3, r4
 800b852:	db01      	blt.n	800b858 <__sfputc_r+0x16>
 800b854:	290a      	cmp	r1, #10
 800b856:	d103      	bne.n	800b860 <__sfputc_r+0x1e>
 800b858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b85c:	f000 b94a 	b.w	800baf4 <__swbuf_r>
 800b860:	6813      	ldr	r3, [r2, #0]
 800b862:	1c58      	adds	r0, r3, #1
 800b864:	6010      	str	r0, [r2, #0]
 800b866:	7019      	strb	r1, [r3, #0]
 800b868:	4608      	mov	r0, r1
 800b86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <__sfputs_r>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	4614      	mov	r4, r2
 800b878:	18d5      	adds	r5, r2, r3
 800b87a:	42ac      	cmp	r4, r5
 800b87c:	d101      	bne.n	800b882 <__sfputs_r+0x12>
 800b87e:	2000      	movs	r0, #0
 800b880:	e007      	b.n	800b892 <__sfputs_r+0x22>
 800b882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b886:	463a      	mov	r2, r7
 800b888:	4630      	mov	r0, r6
 800b88a:	f7ff ffda 	bl	800b842 <__sfputc_r>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	d1f3      	bne.n	800b87a <__sfputs_r+0xa>
 800b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b894 <_vfiprintf_r>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	460d      	mov	r5, r1
 800b89a:	b09d      	sub	sp, #116	; 0x74
 800b89c:	4614      	mov	r4, r2
 800b89e:	4698      	mov	r8, r3
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b118      	cbz	r0, 800b8ac <_vfiprintf_r+0x18>
 800b8a4:	6983      	ldr	r3, [r0, #24]
 800b8a6:	b90b      	cbnz	r3, 800b8ac <_vfiprintf_r+0x18>
 800b8a8:	f000 fb14 	bl	800bed4 <__sinit>
 800b8ac:	4b89      	ldr	r3, [pc, #548]	; (800bad4 <_vfiprintf_r+0x240>)
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	d11b      	bne.n	800b8ea <_vfiprintf_r+0x56>
 800b8b2:	6875      	ldr	r5, [r6, #4]
 800b8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	d405      	bmi.n	800b8c6 <_vfiprintf_r+0x32>
 800b8ba:	89ab      	ldrh	r3, [r5, #12]
 800b8bc:	059a      	lsls	r2, r3, #22
 800b8be:	d402      	bmi.n	800b8c6 <_vfiprintf_r+0x32>
 800b8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c2:	f000 fba5 	bl	800c010 <__retarget_lock_acquire_recursive>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	071b      	lsls	r3, r3, #28
 800b8ca:	d501      	bpl.n	800b8d0 <_vfiprintf_r+0x3c>
 800b8cc:	692b      	ldr	r3, [r5, #16]
 800b8ce:	b9eb      	cbnz	r3, 800b90c <_vfiprintf_r+0x78>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f000 f96e 	bl	800bbb4 <__swsetup_r>
 800b8d8:	b1c0      	cbz	r0, 800b90c <_vfiprintf_r+0x78>
 800b8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8dc:	07dc      	lsls	r4, r3, #31
 800b8de:	d50e      	bpl.n	800b8fe <_vfiprintf_r+0x6a>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	b01d      	add	sp, #116	; 0x74
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	4b7b      	ldr	r3, [pc, #492]	; (800bad8 <_vfiprintf_r+0x244>)
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	d101      	bne.n	800b8f4 <_vfiprintf_r+0x60>
 800b8f0:	68b5      	ldr	r5, [r6, #8]
 800b8f2:	e7df      	b.n	800b8b4 <_vfiprintf_r+0x20>
 800b8f4:	4b79      	ldr	r3, [pc, #484]	; (800badc <_vfiprintf_r+0x248>)
 800b8f6:	429d      	cmp	r5, r3
 800b8f8:	bf08      	it	eq
 800b8fa:	68f5      	ldreq	r5, [r6, #12]
 800b8fc:	e7da      	b.n	800b8b4 <_vfiprintf_r+0x20>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	0598      	lsls	r0, r3, #22
 800b902:	d4ed      	bmi.n	800b8e0 <_vfiprintf_r+0x4c>
 800b904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b906:	f000 fb84 	bl	800c012 <__retarget_lock_release_recursive>
 800b90a:	e7e9      	b.n	800b8e0 <_vfiprintf_r+0x4c>
 800b90c:	2300      	movs	r3, #0
 800b90e:	9309      	str	r3, [sp, #36]	; 0x24
 800b910:	2320      	movs	r3, #32
 800b912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b916:	f8cd 800c 	str.w	r8, [sp, #12]
 800b91a:	2330      	movs	r3, #48	; 0x30
 800b91c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bae0 <_vfiprintf_r+0x24c>
 800b920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b924:	f04f 0901 	mov.w	r9, #1
 800b928:	4623      	mov	r3, r4
 800b92a:	469a      	mov	sl, r3
 800b92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b930:	b10a      	cbz	r2, 800b936 <_vfiprintf_r+0xa2>
 800b932:	2a25      	cmp	r2, #37	; 0x25
 800b934:	d1f9      	bne.n	800b92a <_vfiprintf_r+0x96>
 800b936:	ebba 0b04 	subs.w	fp, sl, r4
 800b93a:	d00b      	beq.n	800b954 <_vfiprintf_r+0xc0>
 800b93c:	465b      	mov	r3, fp
 800b93e:	4622      	mov	r2, r4
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff ff94 	bl	800b870 <__sfputs_r>
 800b948:	3001      	adds	r0, #1
 800b94a:	f000 80aa 	beq.w	800baa2 <_vfiprintf_r+0x20e>
 800b94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b950:	445a      	add	r2, fp
 800b952:	9209      	str	r2, [sp, #36]	; 0x24
 800b954:	f89a 3000 	ldrb.w	r3, [sl]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 80a2 	beq.w	800baa2 <_vfiprintf_r+0x20e>
 800b95e:	2300      	movs	r3, #0
 800b960:	f04f 32ff 	mov.w	r2, #4294967295
 800b964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b968:	f10a 0a01 	add.w	sl, sl, #1
 800b96c:	9304      	str	r3, [sp, #16]
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b974:	931a      	str	r3, [sp, #104]	; 0x68
 800b976:	4654      	mov	r4, sl
 800b978:	2205      	movs	r2, #5
 800b97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97e:	4858      	ldr	r0, [pc, #352]	; (800bae0 <_vfiprintf_r+0x24c>)
 800b980:	f7f4 fc36 	bl	80001f0 <memchr>
 800b984:	9a04      	ldr	r2, [sp, #16]
 800b986:	b9d8      	cbnz	r0, 800b9c0 <_vfiprintf_r+0x12c>
 800b988:	06d1      	lsls	r1, r2, #27
 800b98a:	bf44      	itt	mi
 800b98c:	2320      	movmi	r3, #32
 800b98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b992:	0713      	lsls	r3, r2, #28
 800b994:	bf44      	itt	mi
 800b996:	232b      	movmi	r3, #43	; 0x2b
 800b998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b99c:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a2:	d015      	beq.n	800b9d0 <_vfiprintf_r+0x13c>
 800b9a4:	9a07      	ldr	r2, [sp, #28]
 800b9a6:	4654      	mov	r4, sl
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	f04f 0c0a 	mov.w	ip, #10
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b4:	3b30      	subs	r3, #48	; 0x30
 800b9b6:	2b09      	cmp	r3, #9
 800b9b8:	d94e      	bls.n	800ba58 <_vfiprintf_r+0x1c4>
 800b9ba:	b1b0      	cbz	r0, 800b9ea <_vfiprintf_r+0x156>
 800b9bc:	9207      	str	r2, [sp, #28]
 800b9be:	e014      	b.n	800b9ea <_vfiprintf_r+0x156>
 800b9c0:	eba0 0308 	sub.w	r3, r0, r8
 800b9c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	46a2      	mov	sl, r4
 800b9ce:	e7d2      	b.n	800b976 <_vfiprintf_r+0xe2>
 800b9d0:	9b03      	ldr	r3, [sp, #12]
 800b9d2:	1d19      	adds	r1, r3, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	9103      	str	r1, [sp, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bfbb      	ittet	lt
 800b9dc:	425b      	neglt	r3, r3
 800b9de:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e2:	9307      	strge	r3, [sp, #28]
 800b9e4:	9307      	strlt	r3, [sp, #28]
 800b9e6:	bfb8      	it	lt
 800b9e8:	9204      	strlt	r2, [sp, #16]
 800b9ea:	7823      	ldrb	r3, [r4, #0]
 800b9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ee:	d10c      	bne.n	800ba0a <_vfiprintf_r+0x176>
 800b9f0:	7863      	ldrb	r3, [r4, #1]
 800b9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f4:	d135      	bne.n	800ba62 <_vfiprintf_r+0x1ce>
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	1d1a      	adds	r2, r3, #4
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	9203      	str	r2, [sp, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bfb8      	it	lt
 800ba02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba06:	3402      	adds	r4, #2
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800baf0 <_vfiprintf_r+0x25c>
 800ba0e:	7821      	ldrb	r1, [r4, #0]
 800ba10:	2203      	movs	r2, #3
 800ba12:	4650      	mov	r0, sl
 800ba14:	f7f4 fbec 	bl	80001f0 <memchr>
 800ba18:	b140      	cbz	r0, 800ba2c <_vfiprintf_r+0x198>
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	eba0 000a 	sub.w	r0, r0, sl
 800ba20:	fa03 f000 	lsl.w	r0, r3, r0
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	4303      	orrs	r3, r0
 800ba28:	3401      	adds	r4, #1
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba30:	482c      	ldr	r0, [pc, #176]	; (800bae4 <_vfiprintf_r+0x250>)
 800ba32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba36:	2206      	movs	r2, #6
 800ba38:	f7f4 fbda 	bl	80001f0 <memchr>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d03f      	beq.n	800bac0 <_vfiprintf_r+0x22c>
 800ba40:	4b29      	ldr	r3, [pc, #164]	; (800bae8 <_vfiprintf_r+0x254>)
 800ba42:	bb1b      	cbnz	r3, 800ba8c <_vfiprintf_r+0x1f8>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	3307      	adds	r3, #7
 800ba48:	f023 0307 	bic.w	r3, r3, #7
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	9303      	str	r3, [sp, #12]
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	443b      	add	r3, r7
 800ba54:	9309      	str	r3, [sp, #36]	; 0x24
 800ba56:	e767      	b.n	800b928 <_vfiprintf_r+0x94>
 800ba58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	2001      	movs	r0, #1
 800ba60:	e7a5      	b.n	800b9ae <_vfiprintf_r+0x11a>
 800ba62:	2300      	movs	r3, #0
 800ba64:	3401      	adds	r4, #1
 800ba66:	9305      	str	r3, [sp, #20]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	f04f 0c0a 	mov.w	ip, #10
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba74:	3a30      	subs	r2, #48	; 0x30
 800ba76:	2a09      	cmp	r2, #9
 800ba78:	d903      	bls.n	800ba82 <_vfiprintf_r+0x1ee>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0c5      	beq.n	800ba0a <_vfiprintf_r+0x176>
 800ba7e:	9105      	str	r1, [sp, #20]
 800ba80:	e7c3      	b.n	800ba0a <_vfiprintf_r+0x176>
 800ba82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba86:	4604      	mov	r4, r0
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e7f0      	b.n	800ba6e <_vfiprintf_r+0x1da>
 800ba8c:	ab03      	add	r3, sp, #12
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	462a      	mov	r2, r5
 800ba92:	4b16      	ldr	r3, [pc, #88]	; (800baec <_vfiprintf_r+0x258>)
 800ba94:	a904      	add	r1, sp, #16
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7fd fdd8 	bl	800964c <_printf_float>
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	1c78      	adds	r0, r7, #1
 800baa0:	d1d6      	bne.n	800ba50 <_vfiprintf_r+0x1bc>
 800baa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baa4:	07d9      	lsls	r1, r3, #31
 800baa6:	d405      	bmi.n	800bab4 <_vfiprintf_r+0x220>
 800baa8:	89ab      	ldrh	r3, [r5, #12]
 800baaa:	059a      	lsls	r2, r3, #22
 800baac:	d402      	bmi.n	800bab4 <_vfiprintf_r+0x220>
 800baae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bab0:	f000 faaf 	bl	800c012 <__retarget_lock_release_recursive>
 800bab4:	89ab      	ldrh	r3, [r5, #12]
 800bab6:	065b      	lsls	r3, r3, #25
 800bab8:	f53f af12 	bmi.w	800b8e0 <_vfiprintf_r+0x4c>
 800babc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800babe:	e711      	b.n	800b8e4 <_vfiprintf_r+0x50>
 800bac0:	ab03      	add	r3, sp, #12
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	462a      	mov	r2, r5
 800bac6:	4b09      	ldr	r3, [pc, #36]	; (800baec <_vfiprintf_r+0x258>)
 800bac8:	a904      	add	r1, sp, #16
 800baca:	4630      	mov	r0, r6
 800bacc:	f7fe f862 	bl	8009b94 <_printf_i>
 800bad0:	e7e4      	b.n	800ba9c <_vfiprintf_r+0x208>
 800bad2:	bf00      	nop
 800bad4:	0800c704 	.word	0x0800c704
 800bad8:	0800c724 	.word	0x0800c724
 800badc:	0800c6e4 	.word	0x0800c6e4
 800bae0:	0800c58c 	.word	0x0800c58c
 800bae4:	0800c596 	.word	0x0800c596
 800bae8:	0800964d 	.word	0x0800964d
 800baec:	0800b871 	.word	0x0800b871
 800baf0:	0800c592 	.word	0x0800c592

0800baf4 <__swbuf_r>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	460e      	mov	r6, r1
 800baf8:	4614      	mov	r4, r2
 800bafa:	4605      	mov	r5, r0
 800bafc:	b118      	cbz	r0, 800bb06 <__swbuf_r+0x12>
 800bafe:	6983      	ldr	r3, [r0, #24]
 800bb00:	b90b      	cbnz	r3, 800bb06 <__swbuf_r+0x12>
 800bb02:	f000 f9e7 	bl	800bed4 <__sinit>
 800bb06:	4b21      	ldr	r3, [pc, #132]	; (800bb8c <__swbuf_r+0x98>)
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	d12b      	bne.n	800bb64 <__swbuf_r+0x70>
 800bb0c:	686c      	ldr	r4, [r5, #4]
 800bb0e:	69a3      	ldr	r3, [r4, #24]
 800bb10:	60a3      	str	r3, [r4, #8]
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	071a      	lsls	r2, r3, #28
 800bb16:	d52f      	bpl.n	800bb78 <__swbuf_r+0x84>
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	b36b      	cbz	r3, 800bb78 <__swbuf_r+0x84>
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	6820      	ldr	r0, [r4, #0]
 800bb20:	1ac0      	subs	r0, r0, r3
 800bb22:	6963      	ldr	r3, [r4, #20]
 800bb24:	b2f6      	uxtb	r6, r6
 800bb26:	4283      	cmp	r3, r0
 800bb28:	4637      	mov	r7, r6
 800bb2a:	dc04      	bgt.n	800bb36 <__swbuf_r+0x42>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f93c 	bl	800bdac <_fflush_r>
 800bb34:	bb30      	cbnz	r0, 800bb84 <__swbuf_r+0x90>
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	60a3      	str	r3, [r4, #8]
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	6022      	str	r2, [r4, #0]
 800bb42:	701e      	strb	r6, [r3, #0]
 800bb44:	6963      	ldr	r3, [r4, #20]
 800bb46:	3001      	adds	r0, #1
 800bb48:	4283      	cmp	r3, r0
 800bb4a:	d004      	beq.n	800bb56 <__swbuf_r+0x62>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	07db      	lsls	r3, r3, #31
 800bb50:	d506      	bpl.n	800bb60 <__swbuf_r+0x6c>
 800bb52:	2e0a      	cmp	r6, #10
 800bb54:	d104      	bne.n	800bb60 <__swbuf_r+0x6c>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f000 f927 	bl	800bdac <_fflush_r>
 800bb5e:	b988      	cbnz	r0, 800bb84 <__swbuf_r+0x90>
 800bb60:	4638      	mov	r0, r7
 800bb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <__swbuf_r+0x9c>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d101      	bne.n	800bb6e <__swbuf_r+0x7a>
 800bb6a:	68ac      	ldr	r4, [r5, #8]
 800bb6c:	e7cf      	b.n	800bb0e <__swbuf_r+0x1a>
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <__swbuf_r+0xa0>)
 800bb70:	429c      	cmp	r4, r3
 800bb72:	bf08      	it	eq
 800bb74:	68ec      	ldreq	r4, [r5, #12]
 800bb76:	e7ca      	b.n	800bb0e <__swbuf_r+0x1a>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f000 f81a 	bl	800bbb4 <__swsetup_r>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0cb      	beq.n	800bb1c <__swbuf_r+0x28>
 800bb84:	f04f 37ff 	mov.w	r7, #4294967295
 800bb88:	e7ea      	b.n	800bb60 <__swbuf_r+0x6c>
 800bb8a:	bf00      	nop
 800bb8c:	0800c704 	.word	0x0800c704
 800bb90:	0800c724 	.word	0x0800c724
 800bb94:	0800c6e4 	.word	0x0800c6e4

0800bb98 <__ascii_wctomb>:
 800bb98:	b149      	cbz	r1, 800bbae <__ascii_wctomb+0x16>
 800bb9a:	2aff      	cmp	r2, #255	; 0xff
 800bb9c:	bf85      	ittet	hi
 800bb9e:	238a      	movhi	r3, #138	; 0x8a
 800bba0:	6003      	strhi	r3, [r0, #0]
 800bba2:	700a      	strbls	r2, [r1, #0]
 800bba4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bba8:	bf98      	it	ls
 800bbaa:	2001      	movls	r0, #1
 800bbac:	4770      	bx	lr
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <__swsetup_r>:
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <__swsetup_r+0xcc>)
 800bbb6:	b570      	push	{r4, r5, r6, lr}
 800bbb8:	681d      	ldr	r5, [r3, #0]
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	b125      	cbz	r5, 800bbca <__swsetup_r+0x16>
 800bbc0:	69ab      	ldr	r3, [r5, #24]
 800bbc2:	b913      	cbnz	r3, 800bbca <__swsetup_r+0x16>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f000 f985 	bl	800bed4 <__sinit>
 800bbca:	4b2e      	ldr	r3, [pc, #184]	; (800bc84 <__swsetup_r+0xd0>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	d10f      	bne.n	800bbf0 <__swsetup_r+0x3c>
 800bbd0:	686c      	ldr	r4, [r5, #4]
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd8:	0719      	lsls	r1, r3, #28
 800bbda:	d42c      	bmi.n	800bc36 <__swsetup_r+0x82>
 800bbdc:	06dd      	lsls	r5, r3, #27
 800bbde:	d411      	bmi.n	800bc04 <__swsetup_r+0x50>
 800bbe0:	2309      	movs	r3, #9
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295
 800bbee:	e03e      	b.n	800bc6e <__swsetup_r+0xba>
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <__swsetup_r+0xd4>)
 800bbf2:	429c      	cmp	r4, r3
 800bbf4:	d101      	bne.n	800bbfa <__swsetup_r+0x46>
 800bbf6:	68ac      	ldr	r4, [r5, #8]
 800bbf8:	e7eb      	b.n	800bbd2 <__swsetup_r+0x1e>
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <__swsetup_r+0xd8>)
 800bbfc:	429c      	cmp	r4, r3
 800bbfe:	bf08      	it	eq
 800bc00:	68ec      	ldreq	r4, [r5, #12]
 800bc02:	e7e6      	b.n	800bbd2 <__swsetup_r+0x1e>
 800bc04:	0758      	lsls	r0, r3, #29
 800bc06:	d512      	bpl.n	800bc2e <__swsetup_r+0x7a>
 800bc08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc0a:	b141      	cbz	r1, 800bc1e <__swsetup_r+0x6a>
 800bc0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc10:	4299      	cmp	r1, r3
 800bc12:	d002      	beq.n	800bc1a <__swsetup_r+0x66>
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7ff fb31 	bl	800b27c <_free_r>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	2300      	movs	r3, #0
 800bc28:	6063      	str	r3, [r4, #4]
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f043 0308 	orr.w	r3, r3, #8
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	b94b      	cbnz	r3, 800bc4e <__swsetup_r+0x9a>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc44:	d003      	beq.n	800bc4e <__swsetup_r+0x9a>
 800bc46:	4621      	mov	r1, r4
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 fa09 	bl	800c060 <__smakebuf_r>
 800bc4e:	89a0      	ldrh	r0, [r4, #12]
 800bc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc54:	f010 0301 	ands.w	r3, r0, #1
 800bc58:	d00a      	beq.n	800bc70 <__swsetup_r+0xbc>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	6963      	ldr	r3, [r4, #20]
 800bc60:	425b      	negs	r3, r3
 800bc62:	61a3      	str	r3, [r4, #24]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b943      	cbnz	r3, 800bc7a <__swsetup_r+0xc6>
 800bc68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc6c:	d1ba      	bne.n	800bbe4 <__swsetup_r+0x30>
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	0781      	lsls	r1, r0, #30
 800bc72:	bf58      	it	pl
 800bc74:	6963      	ldrpl	r3, [r4, #20]
 800bc76:	60a3      	str	r3, [r4, #8]
 800bc78:	e7f4      	b.n	800bc64 <__swsetup_r+0xb0>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	e7f7      	b.n	800bc6e <__swsetup_r+0xba>
 800bc7e:	bf00      	nop
 800bc80:	200000fc 	.word	0x200000fc
 800bc84:	0800c704 	.word	0x0800c704
 800bc88:	0800c724 	.word	0x0800c724
 800bc8c:	0800c6e4 	.word	0x0800c6e4

0800bc90 <abort>:
 800bc90:	b508      	push	{r3, lr}
 800bc92:	2006      	movs	r0, #6
 800bc94:	f000 fa54 	bl	800c140 <raise>
 800bc98:	2001      	movs	r0, #1
 800bc9a:	f7f5 fcd5 	bl	8001648 <_exit>
	...

0800bca0 <__sflush_r>:
 800bca0:	898a      	ldrh	r2, [r1, #12]
 800bca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	4605      	mov	r5, r0
 800bca8:	0710      	lsls	r0, r2, #28
 800bcaa:	460c      	mov	r4, r1
 800bcac:	d458      	bmi.n	800bd60 <__sflush_r+0xc0>
 800bcae:	684b      	ldr	r3, [r1, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc05      	bgt.n	800bcc0 <__sflush_r+0x20>
 800bcb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dc02      	bgt.n	800bcc0 <__sflush_r+0x20>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	d0f9      	beq.n	800bcba <__sflush_r+0x1a>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bccc:	682f      	ldr	r7, [r5, #0]
 800bcce:	602b      	str	r3, [r5, #0]
 800bcd0:	d032      	beq.n	800bd38 <__sflush_r+0x98>
 800bcd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	075a      	lsls	r2, r3, #29
 800bcd8:	d505      	bpl.n	800bce6 <__sflush_r+0x46>
 800bcda:	6863      	ldr	r3, [r4, #4]
 800bcdc:	1ac0      	subs	r0, r0, r3
 800bcde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bce0:	b10b      	cbz	r3, 800bce6 <__sflush_r+0x46>
 800bce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bce4:	1ac0      	subs	r0, r0, r3
 800bce6:	2300      	movs	r3, #0
 800bce8:	4602      	mov	r2, r0
 800bcea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b0      	blx	r6
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	d106      	bne.n	800bd06 <__sflush_r+0x66>
 800bcf8:	6829      	ldr	r1, [r5, #0]
 800bcfa:	291d      	cmp	r1, #29
 800bcfc:	d82c      	bhi.n	800bd58 <__sflush_r+0xb8>
 800bcfe:	4a2a      	ldr	r2, [pc, #168]	; (800bda8 <__sflush_r+0x108>)
 800bd00:	40ca      	lsrs	r2, r1
 800bd02:	07d6      	lsls	r6, r2, #31
 800bd04:	d528      	bpl.n	800bd58 <__sflush_r+0xb8>
 800bd06:	2200      	movs	r2, #0
 800bd08:	6062      	str	r2, [r4, #4]
 800bd0a:	04d9      	lsls	r1, r3, #19
 800bd0c:	6922      	ldr	r2, [r4, #16]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	d504      	bpl.n	800bd1c <__sflush_r+0x7c>
 800bd12:	1c42      	adds	r2, r0, #1
 800bd14:	d101      	bne.n	800bd1a <__sflush_r+0x7a>
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	b903      	cbnz	r3, 800bd1c <__sflush_r+0x7c>
 800bd1a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd1e:	602f      	str	r7, [r5, #0]
 800bd20:	2900      	cmp	r1, #0
 800bd22:	d0ca      	beq.n	800bcba <__sflush_r+0x1a>
 800bd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <__sflush_r+0x92>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f7ff faa5 	bl	800b27c <_free_r>
 800bd32:	2000      	movs	r0, #0
 800bd34:	6360      	str	r0, [r4, #52]	; 0x34
 800bd36:	e7c1      	b.n	800bcbc <__sflush_r+0x1c>
 800bd38:	6a21      	ldr	r1, [r4, #32]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	47b0      	blx	r6
 800bd40:	1c41      	adds	r1, r0, #1
 800bd42:	d1c7      	bne.n	800bcd4 <__sflush_r+0x34>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0c4      	beq.n	800bcd4 <__sflush_r+0x34>
 800bd4a:	2b1d      	cmp	r3, #29
 800bd4c:	d001      	beq.n	800bd52 <__sflush_r+0xb2>
 800bd4e:	2b16      	cmp	r3, #22
 800bd50:	d101      	bne.n	800bd56 <__sflush_r+0xb6>
 800bd52:	602f      	str	r7, [r5, #0]
 800bd54:	e7b1      	b.n	800bcba <__sflush_r+0x1a>
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	e7ad      	b.n	800bcbc <__sflush_r+0x1c>
 800bd60:	690f      	ldr	r7, [r1, #16]
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	d0a9      	beq.n	800bcba <__sflush_r+0x1a>
 800bd66:	0793      	lsls	r3, r2, #30
 800bd68:	680e      	ldr	r6, [r1, #0]
 800bd6a:	bf08      	it	eq
 800bd6c:	694b      	ldreq	r3, [r1, #20]
 800bd6e:	600f      	str	r7, [r1, #0]
 800bd70:	bf18      	it	ne
 800bd72:	2300      	movne	r3, #0
 800bd74:	eba6 0807 	sub.w	r8, r6, r7
 800bd78:	608b      	str	r3, [r1, #8]
 800bd7a:	f1b8 0f00 	cmp.w	r8, #0
 800bd7e:	dd9c      	ble.n	800bcba <__sflush_r+0x1a>
 800bd80:	6a21      	ldr	r1, [r4, #32]
 800bd82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd84:	4643      	mov	r3, r8
 800bd86:	463a      	mov	r2, r7
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b0      	blx	r6
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	dc06      	bgt.n	800bd9e <__sflush_r+0xfe>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9c:	e78e      	b.n	800bcbc <__sflush_r+0x1c>
 800bd9e:	4407      	add	r7, r0
 800bda0:	eba8 0800 	sub.w	r8, r8, r0
 800bda4:	e7e9      	b.n	800bd7a <__sflush_r+0xda>
 800bda6:	bf00      	nop
 800bda8:	20400001 	.word	0x20400001

0800bdac <_fflush_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	690b      	ldr	r3, [r1, #16]
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	b913      	cbnz	r3, 800bdbc <_fflush_r+0x10>
 800bdb6:	2500      	movs	r5, #0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	b118      	cbz	r0, 800bdc6 <_fflush_r+0x1a>
 800bdbe:	6983      	ldr	r3, [r0, #24]
 800bdc0:	b90b      	cbnz	r3, 800bdc6 <_fflush_r+0x1a>
 800bdc2:	f000 f887 	bl	800bed4 <__sinit>
 800bdc6:	4b14      	ldr	r3, [pc, #80]	; (800be18 <_fflush_r+0x6c>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	d11b      	bne.n	800be04 <_fflush_r+0x58>
 800bdcc:	686c      	ldr	r4, [r5, #4]
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0ef      	beq.n	800bdb6 <_fflush_r+0xa>
 800bdd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdd8:	07d0      	lsls	r0, r2, #31
 800bdda:	d404      	bmi.n	800bde6 <_fflush_r+0x3a>
 800bddc:	0599      	lsls	r1, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_fflush_r+0x3a>
 800bde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bde2:	f000 f915 	bl	800c010 <__retarget_lock_acquire_recursive>
 800bde6:	4628      	mov	r0, r5
 800bde8:	4621      	mov	r1, r4
 800bdea:	f7ff ff59 	bl	800bca0 <__sflush_r>
 800bdee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdf0:	07da      	lsls	r2, r3, #31
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	d4e0      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	059b      	lsls	r3, r3, #22
 800bdfa:	d4dd      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfe:	f000 f908 	bl	800c012 <__retarget_lock_release_recursive>
 800be02:	e7d9      	b.n	800bdb8 <_fflush_r+0xc>
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <_fflush_r+0x70>)
 800be06:	429c      	cmp	r4, r3
 800be08:	d101      	bne.n	800be0e <_fflush_r+0x62>
 800be0a:	68ac      	ldr	r4, [r5, #8]
 800be0c:	e7df      	b.n	800bdce <_fflush_r+0x22>
 800be0e:	4b04      	ldr	r3, [pc, #16]	; (800be20 <_fflush_r+0x74>)
 800be10:	429c      	cmp	r4, r3
 800be12:	bf08      	it	eq
 800be14:	68ec      	ldreq	r4, [r5, #12]
 800be16:	e7da      	b.n	800bdce <_fflush_r+0x22>
 800be18:	0800c704 	.word	0x0800c704
 800be1c:	0800c724 	.word	0x0800c724
 800be20:	0800c6e4 	.word	0x0800c6e4

0800be24 <std>:
 800be24:	2300      	movs	r3, #0
 800be26:	b510      	push	{r4, lr}
 800be28:	4604      	mov	r4, r0
 800be2a:	e9c0 3300 	strd	r3, r3, [r0]
 800be2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be32:	6083      	str	r3, [r0, #8]
 800be34:	8181      	strh	r1, [r0, #12]
 800be36:	6643      	str	r3, [r0, #100]	; 0x64
 800be38:	81c2      	strh	r2, [r0, #14]
 800be3a:	6183      	str	r3, [r0, #24]
 800be3c:	4619      	mov	r1, r3
 800be3e:	2208      	movs	r2, #8
 800be40:	305c      	adds	r0, #92	; 0x5c
 800be42:	f7fd fb5b 	bl	80094fc <memset>
 800be46:	4b05      	ldr	r3, [pc, #20]	; (800be5c <std+0x38>)
 800be48:	6263      	str	r3, [r4, #36]	; 0x24
 800be4a:	4b05      	ldr	r3, [pc, #20]	; (800be60 <std+0x3c>)
 800be4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be4e:	4b05      	ldr	r3, [pc, #20]	; (800be64 <std+0x40>)
 800be50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be52:	4b05      	ldr	r3, [pc, #20]	; (800be68 <std+0x44>)
 800be54:	6224      	str	r4, [r4, #32]
 800be56:	6323      	str	r3, [r4, #48]	; 0x30
 800be58:	bd10      	pop	{r4, pc}
 800be5a:	bf00      	nop
 800be5c:	0800c179 	.word	0x0800c179
 800be60:	0800c19b 	.word	0x0800c19b
 800be64:	0800c1d3 	.word	0x0800c1d3
 800be68:	0800c1f7 	.word	0x0800c1f7

0800be6c <_cleanup_r>:
 800be6c:	4901      	ldr	r1, [pc, #4]	; (800be74 <_cleanup_r+0x8>)
 800be6e:	f000 b8af 	b.w	800bfd0 <_fwalk_reent>
 800be72:	bf00      	nop
 800be74:	0800bdad 	.word	0x0800bdad

0800be78 <__sfmoreglue>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	2268      	movs	r2, #104	; 0x68
 800be7c:	1e4d      	subs	r5, r1, #1
 800be7e:	4355      	muls	r5, r2
 800be80:	460e      	mov	r6, r1
 800be82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be86:	f7ff fa65 	bl	800b354 <_malloc_r>
 800be8a:	4604      	mov	r4, r0
 800be8c:	b140      	cbz	r0, 800bea0 <__sfmoreglue+0x28>
 800be8e:	2100      	movs	r1, #0
 800be90:	e9c0 1600 	strd	r1, r6, [r0]
 800be94:	300c      	adds	r0, #12
 800be96:	60a0      	str	r0, [r4, #8]
 800be98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be9c:	f7fd fb2e 	bl	80094fc <memset>
 800bea0:	4620      	mov	r0, r4
 800bea2:	bd70      	pop	{r4, r5, r6, pc}

0800bea4 <__sfp_lock_acquire>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__sfp_lock_acquire+0x8>)
 800bea6:	f000 b8b3 	b.w	800c010 <__retarget_lock_acquire_recursive>
 800beaa:	bf00      	nop
 800beac:	20001fbd 	.word	0x20001fbd

0800beb0 <__sfp_lock_release>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__sfp_lock_release+0x8>)
 800beb2:	f000 b8ae 	b.w	800c012 <__retarget_lock_release_recursive>
 800beb6:	bf00      	nop
 800beb8:	20001fbd 	.word	0x20001fbd

0800bebc <__sinit_lock_acquire>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__sinit_lock_acquire+0x8>)
 800bebe:	f000 b8a7 	b.w	800c010 <__retarget_lock_acquire_recursive>
 800bec2:	bf00      	nop
 800bec4:	20001fbe 	.word	0x20001fbe

0800bec8 <__sinit_lock_release>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__sinit_lock_release+0x8>)
 800beca:	f000 b8a2 	b.w	800c012 <__retarget_lock_release_recursive>
 800bece:	bf00      	nop
 800bed0:	20001fbe 	.word	0x20001fbe

0800bed4 <__sinit>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4604      	mov	r4, r0
 800bed8:	f7ff fff0 	bl	800bebc <__sinit_lock_acquire>
 800bedc:	69a3      	ldr	r3, [r4, #24]
 800bede:	b11b      	cbz	r3, 800bee8 <__sinit+0x14>
 800bee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bee4:	f7ff bff0 	b.w	800bec8 <__sinit_lock_release>
 800bee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800beec:	6523      	str	r3, [r4, #80]	; 0x50
 800beee:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <__sinit+0x68>)
 800bef0:	4a13      	ldr	r2, [pc, #76]	; (800bf40 <__sinit+0x6c>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bef6:	42a3      	cmp	r3, r4
 800bef8:	bf04      	itt	eq
 800befa:	2301      	moveq	r3, #1
 800befc:	61a3      	streq	r3, [r4, #24]
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 f820 	bl	800bf44 <__sfp>
 800bf04:	6060      	str	r0, [r4, #4]
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 f81c 	bl	800bf44 <__sfp>
 800bf0c:	60a0      	str	r0, [r4, #8]
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 f818 	bl	800bf44 <__sfp>
 800bf14:	2200      	movs	r2, #0
 800bf16:	60e0      	str	r0, [r4, #12]
 800bf18:	2104      	movs	r1, #4
 800bf1a:	6860      	ldr	r0, [r4, #4]
 800bf1c:	f7ff ff82 	bl	800be24 <std>
 800bf20:	68a0      	ldr	r0, [r4, #8]
 800bf22:	2201      	movs	r2, #1
 800bf24:	2109      	movs	r1, #9
 800bf26:	f7ff ff7d 	bl	800be24 <std>
 800bf2a:	68e0      	ldr	r0, [r4, #12]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	2112      	movs	r1, #18
 800bf30:	f7ff ff78 	bl	800be24 <std>
 800bf34:	2301      	movs	r3, #1
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	e7d2      	b.n	800bee0 <__sinit+0xc>
 800bf3a:	bf00      	nop
 800bf3c:	0800c36c 	.word	0x0800c36c
 800bf40:	0800be6d 	.word	0x0800be6d

0800bf44 <__sfp>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	4607      	mov	r7, r0
 800bf48:	f7ff ffac 	bl	800bea4 <__sfp_lock_acquire>
 800bf4c:	4b1e      	ldr	r3, [pc, #120]	; (800bfc8 <__sfp+0x84>)
 800bf4e:	681e      	ldr	r6, [r3, #0]
 800bf50:	69b3      	ldr	r3, [r6, #24]
 800bf52:	b913      	cbnz	r3, 800bf5a <__sfp+0x16>
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7ff ffbd 	bl	800bed4 <__sinit>
 800bf5a:	3648      	adds	r6, #72	; 0x48
 800bf5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	d503      	bpl.n	800bf6c <__sfp+0x28>
 800bf64:	6833      	ldr	r3, [r6, #0]
 800bf66:	b30b      	cbz	r3, 800bfac <__sfp+0x68>
 800bf68:	6836      	ldr	r6, [r6, #0]
 800bf6a:	e7f7      	b.n	800bf5c <__sfp+0x18>
 800bf6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf70:	b9d5      	cbnz	r5, 800bfa8 <__sfp+0x64>
 800bf72:	4b16      	ldr	r3, [pc, #88]	; (800bfcc <__sfp+0x88>)
 800bf74:	60e3      	str	r3, [r4, #12]
 800bf76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf7a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf7c:	f000 f847 	bl	800c00e <__retarget_lock_init_recursive>
 800bf80:	f7ff ff96 	bl	800beb0 <__sfp_lock_release>
 800bf84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf8c:	6025      	str	r5, [r4, #0]
 800bf8e:	61a5      	str	r5, [r4, #24]
 800bf90:	2208      	movs	r2, #8
 800bf92:	4629      	mov	r1, r5
 800bf94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf98:	f7fd fab0 	bl	80094fc <memset>
 800bf9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa8:	3468      	adds	r4, #104	; 0x68
 800bfaa:	e7d9      	b.n	800bf60 <__sfp+0x1c>
 800bfac:	2104      	movs	r1, #4
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f7ff ff62 	bl	800be78 <__sfmoreglue>
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	6030      	str	r0, [r6, #0]
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d1d5      	bne.n	800bf68 <__sfp+0x24>
 800bfbc:	f7ff ff78 	bl	800beb0 <__sfp_lock_release>
 800bfc0:	230c      	movs	r3, #12
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	e7ee      	b.n	800bfa4 <__sfp+0x60>
 800bfc6:	bf00      	nop
 800bfc8:	0800c36c 	.word	0x0800c36c
 800bfcc:	ffff0001 	.word	0xffff0001

0800bfd0 <_fwalk_reent>:
 800bfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	4688      	mov	r8, r1
 800bfd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfdc:	2700      	movs	r7, #0
 800bfde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfe2:	f1b9 0901 	subs.w	r9, r9, #1
 800bfe6:	d505      	bpl.n	800bff4 <_fwalk_reent+0x24>
 800bfe8:	6824      	ldr	r4, [r4, #0]
 800bfea:	2c00      	cmp	r4, #0
 800bfec:	d1f7      	bne.n	800bfde <_fwalk_reent+0xe>
 800bfee:	4638      	mov	r0, r7
 800bff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff4:	89ab      	ldrh	r3, [r5, #12]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d907      	bls.n	800c00a <_fwalk_reent+0x3a>
 800bffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bffe:	3301      	adds	r3, #1
 800c000:	d003      	beq.n	800c00a <_fwalk_reent+0x3a>
 800c002:	4629      	mov	r1, r5
 800c004:	4630      	mov	r0, r6
 800c006:	47c0      	blx	r8
 800c008:	4307      	orrs	r7, r0
 800c00a:	3568      	adds	r5, #104	; 0x68
 800c00c:	e7e9      	b.n	800bfe2 <_fwalk_reent+0x12>

0800c00e <__retarget_lock_init_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_acquire_recursive>:
 800c010:	4770      	bx	lr

0800c012 <__retarget_lock_release_recursive>:
 800c012:	4770      	bx	lr

0800c014 <__swhatbuf_r>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	460e      	mov	r6, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	2900      	cmp	r1, #0
 800c01e:	b096      	sub	sp, #88	; 0x58
 800c020:	4614      	mov	r4, r2
 800c022:	461d      	mov	r5, r3
 800c024:	da08      	bge.n	800c038 <__swhatbuf_r+0x24>
 800c026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	602a      	str	r2, [r5, #0]
 800c02e:	061a      	lsls	r2, r3, #24
 800c030:	d410      	bmi.n	800c054 <__swhatbuf_r+0x40>
 800c032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c036:	e00e      	b.n	800c056 <__swhatbuf_r+0x42>
 800c038:	466a      	mov	r2, sp
 800c03a:	f000 f903 	bl	800c244 <_fstat_r>
 800c03e:	2800      	cmp	r0, #0
 800c040:	dbf1      	blt.n	800c026 <__swhatbuf_r+0x12>
 800c042:	9a01      	ldr	r2, [sp, #4]
 800c044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c04c:	425a      	negs	r2, r3
 800c04e:	415a      	adcs	r2, r3
 800c050:	602a      	str	r2, [r5, #0]
 800c052:	e7ee      	b.n	800c032 <__swhatbuf_r+0x1e>
 800c054:	2340      	movs	r3, #64	; 0x40
 800c056:	2000      	movs	r0, #0
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	b016      	add	sp, #88	; 0x58
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c060 <__smakebuf_r>:
 800c060:	898b      	ldrh	r3, [r1, #12]
 800c062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c064:	079d      	lsls	r5, r3, #30
 800c066:	4606      	mov	r6, r0
 800c068:	460c      	mov	r4, r1
 800c06a:	d507      	bpl.n	800c07c <__smakebuf_r+0x1c>
 800c06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	6123      	str	r3, [r4, #16]
 800c074:	2301      	movs	r3, #1
 800c076:	6163      	str	r3, [r4, #20]
 800c078:	b002      	add	sp, #8
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	ab01      	add	r3, sp, #4
 800c07e:	466a      	mov	r2, sp
 800c080:	f7ff ffc8 	bl	800c014 <__swhatbuf_r>
 800c084:	9900      	ldr	r1, [sp, #0]
 800c086:	4605      	mov	r5, r0
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff f963 	bl	800b354 <_malloc_r>
 800c08e:	b948      	cbnz	r0, 800c0a4 <__smakebuf_r+0x44>
 800c090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c094:	059a      	lsls	r2, r3, #22
 800c096:	d4ef      	bmi.n	800c078 <__smakebuf_r+0x18>
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	f043 0302 	orr.w	r3, r3, #2
 800c0a0:	81a3      	strh	r3, [r4, #12]
 800c0a2:	e7e3      	b.n	800c06c <__smakebuf_r+0xc>
 800c0a4:	4b0d      	ldr	r3, [pc, #52]	; (800c0dc <__smakebuf_r+0x7c>)
 800c0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	6020      	str	r0, [r4, #0]
 800c0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0b0:	81a3      	strh	r3, [r4, #12]
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	6163      	str	r3, [r4, #20]
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	6120      	str	r0, [r4, #16]
 800c0ba:	b15b      	cbz	r3, 800c0d4 <__smakebuf_r+0x74>
 800c0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f000 f8d1 	bl	800c268 <_isatty_r>
 800c0c6:	b128      	cbz	r0, 800c0d4 <__smakebuf_r+0x74>
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	f023 0303 	bic.w	r3, r3, #3
 800c0ce:	f043 0301 	orr.w	r3, r3, #1
 800c0d2:	81a3      	strh	r3, [r4, #12]
 800c0d4:	89a0      	ldrh	r0, [r4, #12]
 800c0d6:	4305      	orrs	r5, r0
 800c0d8:	81a5      	strh	r5, [r4, #12]
 800c0da:	e7cd      	b.n	800c078 <__smakebuf_r+0x18>
 800c0dc:	0800be6d 	.word	0x0800be6d

0800c0e0 <_malloc_usable_size_r>:
 800c0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e4:	1f18      	subs	r0, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	bfbc      	itt	lt
 800c0ea:	580b      	ldrlt	r3, [r1, r0]
 800c0ec:	18c0      	addlt	r0, r0, r3
 800c0ee:	4770      	bx	lr

0800c0f0 <_raise_r>:
 800c0f0:	291f      	cmp	r1, #31
 800c0f2:	b538      	push	{r3, r4, r5, lr}
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	460d      	mov	r5, r1
 800c0f8:	d904      	bls.n	800c104 <_raise_r+0x14>
 800c0fa:	2316      	movs	r3, #22
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c106:	b112      	cbz	r2, 800c10e <_raise_r+0x1e>
 800c108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c10c:	b94b      	cbnz	r3, 800c122 <_raise_r+0x32>
 800c10e:	4620      	mov	r0, r4
 800c110:	f000 f830 	bl	800c174 <_getpid_r>
 800c114:	462a      	mov	r2, r5
 800c116:	4601      	mov	r1, r0
 800c118:	4620      	mov	r0, r4
 800c11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c11e:	f000 b817 	b.w	800c150 <_kill_r>
 800c122:	2b01      	cmp	r3, #1
 800c124:	d00a      	beq.n	800c13c <_raise_r+0x4c>
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	d103      	bne.n	800c132 <_raise_r+0x42>
 800c12a:	2316      	movs	r3, #22
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	2001      	movs	r0, #1
 800c130:	e7e7      	b.n	800c102 <_raise_r+0x12>
 800c132:	2400      	movs	r4, #0
 800c134:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c138:	4628      	mov	r0, r5
 800c13a:	4798      	blx	r3
 800c13c:	2000      	movs	r0, #0
 800c13e:	e7e0      	b.n	800c102 <_raise_r+0x12>

0800c140 <raise>:
 800c140:	4b02      	ldr	r3, [pc, #8]	; (800c14c <raise+0xc>)
 800c142:	4601      	mov	r1, r0
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	f7ff bfd3 	b.w	800c0f0 <_raise_r>
 800c14a:	bf00      	nop
 800c14c:	200000fc 	.word	0x200000fc

0800c150 <_kill_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d07      	ldr	r5, [pc, #28]	; (800c170 <_kill_r+0x20>)
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	4608      	mov	r0, r1
 800c15a:	4611      	mov	r1, r2
 800c15c:	602b      	str	r3, [r5, #0]
 800c15e:	f7f5 fa63 	bl	8001628 <_kill>
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	d102      	bne.n	800c16c <_kill_r+0x1c>
 800c166:	682b      	ldr	r3, [r5, #0]
 800c168:	b103      	cbz	r3, 800c16c <_kill_r+0x1c>
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	bd38      	pop	{r3, r4, r5, pc}
 800c16e:	bf00      	nop
 800c170:	20001fb8 	.word	0x20001fb8

0800c174 <_getpid_r>:
 800c174:	f7f5 ba50 	b.w	8001618 <_getpid>

0800c178 <__sread>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	460c      	mov	r4, r1
 800c17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c180:	f000 f894 	bl	800c2ac <_read_r>
 800c184:	2800      	cmp	r0, #0
 800c186:	bfab      	itete	ge
 800c188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c18a:	89a3      	ldrhlt	r3, [r4, #12]
 800c18c:	181b      	addge	r3, r3, r0
 800c18e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c192:	bfac      	ite	ge
 800c194:	6563      	strge	r3, [r4, #84]	; 0x54
 800c196:	81a3      	strhlt	r3, [r4, #12]
 800c198:	bd10      	pop	{r4, pc}

0800c19a <__swrite>:
 800c19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19e:	461f      	mov	r7, r3
 800c1a0:	898b      	ldrh	r3, [r1, #12]
 800c1a2:	05db      	lsls	r3, r3, #23
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	4616      	mov	r6, r2
 800c1aa:	d505      	bpl.n	800c1b8 <__swrite+0x1e>
 800c1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f000 f868 	bl	800c288 <_lseek_r>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ce:	f000 b817 	b.w	800c200 <_write_r>

0800c1d2 <__sseek>:
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1da:	f000 f855 	bl	800c288 <_lseek_r>
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	bf15      	itete	ne
 800c1e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1ee:	81a3      	strheq	r3, [r4, #12]
 800c1f0:	bf18      	it	ne
 800c1f2:	81a3      	strhne	r3, [r4, #12]
 800c1f4:	bd10      	pop	{r4, pc}

0800c1f6 <__sclose>:
 800c1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fa:	f000 b813 	b.w	800c224 <_close_r>
	...

0800c200 <_write_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	; (800c220 <_write_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f5 fa41 	bl	8001696 <_write>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_write_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_write_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20001fb8 	.word	0x20001fb8

0800c224 <_close_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d06      	ldr	r5, [pc, #24]	; (800c240 <_close_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f5 fa4d 	bl	80016ce <_close>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_close_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_close_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20001fb8 	.word	0x20001fb8

0800c244 <_fstat_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d07      	ldr	r5, [pc, #28]	; (800c264 <_fstat_r+0x20>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	f7f5 fa48 	bl	80016e6 <_fstat>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d102      	bne.n	800c260 <_fstat_r+0x1c>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	b103      	cbz	r3, 800c260 <_fstat_r+0x1c>
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	20001fb8 	.word	0x20001fb8

0800c268 <_isatty_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d06      	ldr	r5, [pc, #24]	; (800c284 <_isatty_r+0x1c>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f5 fa47 	bl	8001706 <_isatty>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_isatty_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_isatty_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20001fb8 	.word	0x20001fb8

0800c288 <_lseek_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_lseek_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f7f5 fa40 	bl	800171c <_lseek>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_lseek_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_lseek_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	20001fb8 	.word	0x20001fb8

0800c2ac <_read_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d07      	ldr	r5, [pc, #28]	; (800c2cc <_read_r+0x20>)
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	4608      	mov	r0, r1
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	602a      	str	r2, [r5, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f7f5 f9ce 	bl	800165c <_read>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	d102      	bne.n	800c2ca <_read_r+0x1e>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	b103      	cbz	r3, 800c2ca <_read_r+0x1e>
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	20001fb8 	.word	0x20001fb8

0800c2d0 <_init>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	bf00      	nop
 800c2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d6:	bc08      	pop	{r3}
 800c2d8:	469e      	mov	lr, r3
 800c2da:	4770      	bx	lr

0800c2dc <_fini>:
 800c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2de:	bf00      	nop
 800c2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2e2:	bc08      	pop	{r3}
 800c2e4:	469e      	mov	lr, r3
 800c2e6:	4770      	bx	lr
