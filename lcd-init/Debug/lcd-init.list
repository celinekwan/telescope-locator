
lcd-init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007388  08007388  00017388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007834  08007834  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800783c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001dc  08007a18  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007a18  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e628  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de8  00000000  00000000  0002e834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ef3  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f12f  00000000  00000000  00054d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1eae  00000000  00000000  00063e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135d48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d0  00000000  00000000  00135d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007370 	.word	0x08007370

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007370 	.word	0x08007370

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <I2Csendcmd>:
/// @param addr - Slave address of display
/// @param cmd  - "command" byte to be send
///
/// @return none
///
void I2Csendcmd(uint8_t addr, uint8_t cmd) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	// start transmission -- should be done by HAL_I2C_Master_Transmit function already
	uint8_t data[2];
	data[0] = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	733b      	strb	r3, [r7, #12]
	data[1] = cmd; // data byte (not data, but command)
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (&hi2c1, addr, data, 2, HAL_MAX_DELAY);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <I2Csendcmd+0x38>)
 8000ee6:	f001 f87d 	bl	8001fe4 <HAL_I2C_Master_Transmit>
		HAL_UART_Transmit(&huart2, working, sizeof(working), HAL_MAX_DELAY);
	} else {
		HAL_UART_Transmit(&huart2, not_working, sizeof(not_working), HAL_MAX_DELAY);
	}
	*/
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001fc 	.word	0x200001fc

08000ef8 <I2Csenddatum>:
/// @param addr - Slave address of display
/// @param data  - "data" byte to be send
///
/// @return none
///
void I2Csenddatum (uint8_t addr, uint8_t data) { // I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	uint8_t datum[2];
	datum[0] = 0x40;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	733b      	strb	r3, [r7, #12]
	datum[1] = data; // data byte (not data, but command)
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit (&hi2c1, addr, datum, 2, HAL_MAX_DELAY);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	b299      	uxth	r1, r3
 8000f14:	f107 020c 	add.w	r2, r7, #12
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <I2Csenddatum+0x38>)
 8000f22:	f001 f85f 	bl	8001fe4 <HAL_I2C_Master_Transmit>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200001fc 	.word	0x200001fc

08000f34 <screen_init>:
	uint8_t data[2];
	HAL_I2C_Master_Receive(&hi2c1, addr, data, 1, 10); // TODO: might be wrong
	HAL_UART_Transmit(&huart2,data,strlen((char*)data),HAL_MAX_DELAY); // TODO: delete this after - just for debugging
}

void screen_init(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	I2Csendcmd(SCREEN_ADDR, COMMAND_DISPLAY_ON_CURSOR_ON_BLINK_ON); // 0x0F

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY); // 0x01
	*/

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY); // 0x78, 0x01
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2078      	movs	r0, #120	; 0x78
 8000f3c:	f7ff ffbe 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_NORMAL_RE1_IS0); // 0x3A
 8000f40:	213a      	movs	r1, #58	; 0x3a
 8000f42:	2078      	movs	r0, #120	; 0x78
 8000f44:	f7ff ffba 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_NW);
 8000f48:	2109      	movs	r1, #9
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f7ff ffb6 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SEGMENT_BOTTOM_VIEW);
 8000f50:	2106      	movs	r1, #6
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f7ff ffb2 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_BS1_1);
 8000f58:	211e      	movs	r1, #30
 8000f5a:	2078      	movs	r0, #120	; 0x78
 8000f5c:	f7ff ffae 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_RE0_IS1);
 8000f60:	2139      	movs	r1, #57	; 0x39
 8000f62:	2078      	movs	r0, #120	; 0x78
 8000f64:	f7ff ffaa 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_BS0_1);
 8000f68:	211b      	movs	r1, #27
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f7ff ffa6 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_FOLLOWER_CONTROL);
 8000f70:	216e      	movs	r1, #110	; 0x6e
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f7ff ffa2 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_POWER_BOOSTER_CONTRAST);
 8000f78:	2157      	movs	r1, #87	; 0x57
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f7ff ff9e 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CONTRAST_1010);
 8000f80:	217a      	movs	r1, #122	; 0x7a
 8000f82:	2078      	movs	r0, #120	; 0x78
 8000f84:	f7ff ff9a 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_RE0_IS0);
 8000f88:	2138      	movs	r1, #56	; 0x38
 8000f8a:	2078      	movs	r0, #120	; 0x78
 8000f8c:	f7ff ff96 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_DISPLAY_ON_CURSOR_ON_BLINK_ON);
 8000f90:	210f      	movs	r1, #15
 8000f92:	2078      	movs	r0, #120	; 0x78
 8000f94:	f7ff ff92 	bl	8000ebc <I2Csendcmd>

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f7ff ff8e 	bl	8000ebc <I2Csendcmd>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <screen_write_string>:

void screen_write_string(char string_to_write[]) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	int letter=0; // index for string
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f7ff ff82 	bl	8000ebc <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CURSOR_LINE_1);
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f7ff ff7e 	bl	8000ebc <I2Csendcmd>
	int current_line = COMMAND_SET_CURSOR_LINE_1;
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	60bb      	str	r3, [r7, #8]

	while(string_to_write[letter]!='\0') // check if end of string
 8000fc4:	e02e      	b.n	8001024 <screen_write_string+0x80>
	{
		if ((letter != 0) && (letter % LINE_LENGTH == 0)) // move to a next line if index is a multiple of 10
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d020      	beq.n	800100e <screen_write_string+0x6a>
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <screen_write_string+0x98>)
 8000fd0:	fb83 2301 	smull	r2, r3, r3, r1
 8000fd4:	109a      	asrs	r2, r3, #2
 8000fd6:	17cb      	asrs	r3, r1, #31
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	1aca      	subs	r2, r1, r3
 8000fe4:	2a00      	cmp	r2, #0
 8000fe6:	d112      	bne.n	800100e <screen_write_string+0x6a>
		{
			if (current_line == COMMAND_SET_CURSOR_LINE_4){ // clear screen and put cursor to line 1 when screen is filled
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2be0      	cmp	r3, #224	; 0xe0
 8000fec:	d106      	bne.n	8000ffc <screen_write_string+0x58>
				current_line = COMMAND_SET_CURSOR_LINE_1;// We've gone past the end of the line, go to the next one
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	60bb      	str	r3, [r7, #8]
				I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f7ff ff61 	bl	8000ebc <I2Csendcmd>
 8000ffa:	e008      	b.n	800100e <screen_write_string+0x6a>
			}
			else {
				current_line = current_line+0x20;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3320      	adds	r3, #32
 8001000:	60bb      	str	r3, [r7, #8]
				I2Csendcmd(SCREEN_ADDR, current_line); // We've gone past the end of the line, go to the next one
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f7ff ff57 	bl	8000ebc <I2Csendcmd>
			}
		}

		I2Csenddatum(SCREEN_ADDR, string_to_write[letter]);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	2078      	movs	r0, #120	; 0x78
 800101a:	f7ff ff6d 	bl	8000ef8 <I2Csenddatum>
		letter++;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
	while(string_to_write[letter]!='\0') // check if end of string
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ca      	bne.n	8000fc6 <screen_write_string+0x22>
	}

}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	66666667 	.word	0x66666667

08001040 <screen_write_xyz>:

void screen_write_xyz (float x, float y, float z) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b096      	sub	sp, #88	; 0x58
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a03 	vstr	s0, [r7, #12]
 800104a:	edc7 0a02 	vstr	s1, [r7, #8]
 800104e:	ed87 1a01 	vstr	s2, [r7, #4]
	char str_x[11]; // not 10 bc dont want cursor to do funky stuff if reach multiple of 10
	char str_y[11];
	char str_z[11];
	char str_xyz[30];

	for (int i=0; i<30; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	657b      	str	r3, [r7, #84]	; 0x54
 8001056:	e008      	b.n	800106a <screen_write_xyz+0x2a>
		str_xyz[i] = '\0';
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800105e:	4413      	add	r3, r2
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<30; i++) {
 8001064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001066:	3301      	adds	r3, #1
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
 800106a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800106c:	2b1d      	cmp	r3, #29
 800106e:	ddf3      	ble.n	8001058 <screen_write_xyz+0x18>
	}
	// check if all chars initialized to NULL

	sprintf (str_x, "X:%.4f  ", x); // check str_x
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fa71 	bl	8000558 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800107e:	491c      	ldr	r1, [pc, #112]	; (80010f0 <screen_write_xyz+0xb0>)
 8001080:	f003 fee8 	bl	8004e54 <siprintf>
	sprintf (str_y, "Y:%.4f  ", y); // check str_y
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001092:	4918      	ldr	r1, [pc, #96]	; (80010f4 <screen_write_xyz+0xb4>)
 8001094:	f003 fede 	bl	8004e54 <siprintf>
	sprintf (str_z, "Z:%.4f  ", z); // check str_z
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fa5d 	bl	8000558 <__aeabi_f2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <screen_write_xyz+0xb8>)
 80010a8:	f003 fed4 	bl	8004e54 <siprintf>

	strcpy (str_xyz, str_x);
 80010ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fefb 	bl	8004eb2 <strcpy>
	strcat (str_xyz, str_y);
 80010bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fee4 	bl	8004e94 <strcat>
	strcat (str_xyz, str_z);
 80010cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fedc 	bl	8004e94 <strcat>
	// check str_xyz

	screen_write_string(str_xyz);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <screen_write_string>

}
 80010e6:	bf00      	nop
 80010e8:	3758      	adds	r7, #88	; 0x58
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08007388 	.word	0x08007388
 80010f4:	08007394 	.word	0x08007394
 80010f8:	080073a0 	.word	0x080073a0

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b098      	sub	sp, #96	; 0x60
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	const int STR_LEN = 40;
 8001102:	2328      	movs	r3, #40	; 0x28
 8001104:	65bb      	str	r3, [r7, #88]	; 0x58
	char string_to_write[STR_LEN];
 8001106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001108:	3b01      	subs	r3, #1
 800110a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800110c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800110e:	2200      	movs	r2, #0
 8001110:	461c      	mov	r4, r3
 8001112:	4615      	mov	r5, r2
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	00eb      	lsls	r3, r5, #3
 800111e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001122:	00e2      	lsls	r2, r4, #3
 8001124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001126:	2200      	movs	r2, #0
 8001128:	4618      	mov	r0, r3
 800112a:	4611      	mov	r1, r2
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	00cb      	lsls	r3, r1, #3
 8001136:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800113a:	00c2      	lsls	r2, r0, #3
 800113c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800113e:	3307      	adds	r3, #7
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	ebad 0d03 	sub.w	sp, sp, r3
 8001148:	466b      	mov	r3, sp
 800114a:	3300      	adds	r3, #0
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f000 fba1 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f867 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 f927 	bl	80013a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800115a:	f000 f8f5 	bl	8001348 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800115e:	f000 f8b3 	bl	80012c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // turn off display, turn on display (translated from PORTD section of Stewart's code)
  HAL_Delay(5);
 8001162:	2005      	movs	r0, #5
 8001164:	f000 fc12 	bl	800198c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2101      	movs	r1, #1
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 fe90 	bl	8001e94 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001174:	20c8      	movs	r0, #200	; 0xc8
 8001176:	f000 fc09 	bl	800198c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2101      	movs	r1, #1
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f000 fe87 	bl	8001e94 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001186:	2005      	movs	r0, #5
 8001188:	f000 fc00 	bl	800198c <HAL_Delay>

  //1. clear screen
    screen_init();
 800118c:	f7ff fed2 	bl	8000f34 <screen_init>

    uint8_t cursor[] = "\r\n look at the screen for cursor :D"; //Data to send
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <main+0x110>)
 8001192:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart2,cursor,sizeof(cursor),10);// Sending in normal mode
 80011a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80011a8:	230a      	movs	r3, #10
 80011aa:	2224      	movs	r2, #36	; 0x24
 80011ac:	4818      	ldr	r0, [pc, #96]	; (8001210 <main+0x114>)
 80011ae:	f002 fceb 	bl	8003b88 <HAL_UART_Transmit>

  //2. write Hello World to display
    sprintf(string_to_write, "hello world");
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <main+0x118>)
 80011b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011b6:	f003 fe4d 	bl	8004e54 <siprintf>
    screen_write_string(string_to_write);
 80011ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011bc:	f7ff fef2 	bl	8000fa4 <screen_write_string>

    uint8_t hello_world[] = "\r\n look at the screen for hello world :D"; //Data to send
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <main+0x11c>)
 80011c2:	1d3c      	adds	r4, r7, #4
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d2:	c403      	stmia	r4!, {r0, r1}
 80011d4:	7022      	strb	r2, [r4, #0]
    HAL_UART_Transmit(&huart2,hello_world,sizeof(hello_world),10);// Sending in normal mode
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	230a      	movs	r3, #10
 80011da:	2229      	movs	r2, #41	; 0x29
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <main+0x114>)
 80011de:	f002 fcd3 	bl	8003b88 <HAL_UART_Transmit>

  // 3. display x
    xg = 0.1234567;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <main+0x120>)
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <main+0x124>)
 80011e6:	601a      	str	r2, [r3, #0]
    screen_write_xyz(xg,xg,xg);
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <main+0x120>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <main+0x120>)
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <main+0x120>)
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	eeb0 1a66 	vmov.f32	s2, s13
 80011fe:	eef0 0a47 	vmov.f32	s1, s14
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff ff1b 	bl	8001040 <screen_write_xyz>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x10e>
 800120c:	080073b8 	.word	0x080073b8
 8001210:	20000250 	.word	0x20000250
 8001214:	080073ac 	.word	0x080073ac
 8001218:	080073dc 	.word	0x080073dc
 800121c:	200001f8 	.word	0x200001f8
 8001220:	3dfcd6de 	.word	0x3dfcd6de

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	; 0x58
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2244      	movs	r2, #68	; 0x44
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f003 f99c 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001246:	f44f 7000 	mov.w	r0, #512	; 0x200
 800124a:	f001 fa63 	bl	8002714 <HAL_PWREx_ControlVoltageScaling>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001254:	f000 f90e 	bl	8001474 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001260:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126a:	2302      	movs	r3, #2
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800126e:	2301      	movs	r3, #1
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001272:	230a      	movs	r3, #10
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001276:	2307      	movs	r3, #7
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127a:	2302      	movs	r3, #2
 800127c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fa9a 	bl	80027c0 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001292:	f000 f8ef 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2303      	movs	r3, #3
 800129c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	2104      	movs	r1, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fe9a 	bl	8002fe8 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ba:	f000 f8db 	bl	8001474 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3758      	adds	r7, #88	; 0x58
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_I2C1_Init+0x74>)
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_I2C1_Init+0x78>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_I2C1_Init+0x74>)
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <MX_I2C1_Init+0x7c>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_I2C1_Init+0x74>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_I2C1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <MX_I2C1_Init+0x74>)
 8001304:	f000 fdde 	bl	8001ec4 <HAL_I2C_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800130e:	f000 f8b1 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001312:	2100      	movs	r1, #0
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <MX_I2C1_Init+0x74>)
 8001316:	f001 f957 	bl	80025c8 <HAL_I2CEx_ConfigAnalogFilter>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001320:	f000 f8a8 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_I2C1_Init+0x74>)
 8001328:	f001 f999 	bl	800265e <HAL_I2CEx_ConfigDigitalFilter>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 f89f 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001fc 	.word	0x200001fc
 8001340:	40005400 	.word	0x40005400
 8001344:	10909cec 	.word	0x10909cec

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MX_USART2_UART_Init+0x5c>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x58>)
 800138c:	f002 fbae 	bl	8003aec <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 f86d 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000250 	.word	0x20000250
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_GPIO_Init+0xc4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a2a      	ldr	r2, [pc, #168]	; (800146c <MX_GPIO_Init+0xc4>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <MX_GPIO_Init+0xc4>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_GPIO_Init+0xc4>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a24      	ldr	r2, [pc, #144]	; (800146c <MX_GPIO_Init+0xc4>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_GPIO_Init+0xc4>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_GPIO_Init+0xc4>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <MX_GPIO_Init+0xc4>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_GPIO_Init+0xc4>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_GPIO_Init+0xc4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_GPIO_Init+0xc4>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_GPIO_Init+0xc4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD4_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2121      	movs	r1, #33	; 0x21
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f000 fd35 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001430:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_GPIO_Init+0xc8>)
 8001442:	f000 fbad 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD4_Pin;
 8001446:	2321      	movs	r3, #33	; 0x21
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f000 fb9e 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_MspInit+0x44>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	; 0x60
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a4      	sub	sp, #144	; 0x90
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2268      	movs	r2, #104	; 0x68
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f841 	bl	8004570 <memset>
  if(hi2c->Instance==I2C1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <HAL_I2C_MspInit+0xb0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13a      	bne.n	800156e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4618      	mov	r0, r3
 8001506:	f001 ff93 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001510:	f7ff ffb0 	bl	8001474 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_I2C_MspInit+0xb4>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_I2C_MspInit+0xb4>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_I2C_MspInit+0xb4>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001530:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001544:	2304      	movs	r3, #4
 8001546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_I2C_MspInit+0xb8>)
 8001552:	f000 fb25 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_I2C_MspInit+0xb4>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_I2C_MspInit+0xb4>)
 800155c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_I2C_MspInit+0xb4>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3790      	adds	r7, #144	; 0x90
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40005400 	.word	0x40005400
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0a4      	sub	sp, #144	; 0x90
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2268      	movs	r2, #104	; 0x68
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 ffe3 	bl	8004570 <memset>
  if(huart->Instance==USART2)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_UART_MspInit+0xb0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d13a      	bne.n	800162a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 ff35 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015cc:	f7ff ff52 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015da:	6593      	str	r3, [r2, #88]	; 0x58
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_UART_MspInit+0xb4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001600:	230c      	movs	r3, #12
 8001602:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	2307      	movs	r3, #7
 8001618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f000 fabb 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3790      	adds	r7, #144	; 0x90
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40021000 	.word	0x40021000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f960 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return 1;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_kill>:

int _kill(int pid, int sig)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016aa:	f002 ff37 	bl	800451c <__errno>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2216      	movs	r2, #22
 80016b2:	601a      	str	r2, [r3, #0]
  return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_exit>:

void _exit (int status)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ffe7 	bl	80016a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d2:	e7fe      	b.n	80016d2 <_exit+0x12>

080016d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
  }

  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e009      	b.n	8001734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf1      	blt.n	8001720 <_write+0x12>
  }
  return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	605a      	str	r2, [r3, #4]
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f002 fe9c 	bl	800451c <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20028000 	.word	0x20028000
 8001810:	00000400 	.word	0x00000400
 8001814:	200002d4 	.word	0x200002d4
 8001818:	200002f0 	.word	0x200002f0

0800181c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001844:	f7ff ffea 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <LoopForever+0x6>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <LoopForever+0xe>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <LoopForever+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f002 fe5b 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001872:	f7ff fc43 	bl	80010fc <main>

08001876 <LoopForever>:

LoopForever:
    b LoopForever
 8001876:	e7fe      	b.n	8001876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001878:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001884:	0800783c 	.word	0x0800783c
  ldr r2, =_sbss
 8001888:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800188c:	200002ec 	.word	0x200002ec

08001890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_IRQHandler>
	...

08001894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_Init+0x3c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_Init+0x3c>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018aa:	2003      	movs	r0, #3
 80018ac:	f000 f944 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 f80f 	bl	80018d4 <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	e001      	b.n	80018c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c2:	f7ff fddd 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c6:	79fb      	ldrb	r3, [r7, #7]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_InitTick+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_InitTick+0x70>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_InitTick+0x6c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f941 	bl	8001b86 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d809      	bhi.n	8001924 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f919 	bl	8001b4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_InitTick+0x74>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e007      	b.n	8001934 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e004      	b.n	8001934 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e001      	b.n	8001934 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	200002d8 	.word	0x200002d8

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200002d8 	.word	0x200002d8

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff47 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff5c 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffb0 	bl	8001af4 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e154      	b.n	8001e5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8146 	beq.w	8001e54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 0201 	and.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0203 	and.w	r2, r3, #3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a0 	beq.w	8001e54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_GPIO_Init+0x2d8>)
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_GPIO_Init+0x2d8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x2d8>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2c:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_GPIO_Init+0x2dc>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d56:	d019      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_GPIO_Init+0x2e0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2e4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00d      	beq.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_GPIO_Init+0x2e8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d007      	beq.n	8001d80 <HAL_GPIO_Init+0x1e0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a46      	ldr	r2, [pc, #280]	; (8001e8c <HAL_GPIO_Init+0x2ec>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_GPIO_Init+0x1dc>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e008      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2dc>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dd0:	4a2f      	ldr	r2, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dfa:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_GPIO_Init+0x2f0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aea3 	bne.w	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	48000400 	.word	0x48000400
 8001e84:	48000800 	.word	0x48000800
 8001e88:	48000c00 	.word	0x48000c00
 8001e8c:	48001000 	.word	0x48001000
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e081      	b.n	8001fda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff faec 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e006      	b.n	8001f4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d104      	bne.n	8001f5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69d9      	ldr	r1, [r3, #28]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	f040 80da 	bne.w	80021ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Master_Transmit+0x30>
 8002010:	2302      	movs	r3, #2
 8002012:	e0d3      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800201c:	f7ff fcaa 	bl	8001974 <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2319      	movs	r3, #25
 8002028:	2201      	movs	r2, #1
 800202a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f8f0 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0be      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2221      	movs	r2, #33	; 0x21
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2210      	movs	r2, #16
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	893a      	ldrh	r2, [r7, #8]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2bff      	cmp	r3, #255	; 0xff
 800206e:	d90e      	bls.n	800208e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	22ff      	movs	r2, #255	; 0xff
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa6c 	bl	8002564 <I2C_TransferConfig>
 800208c:	e06c      	b.n	8002168 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	b2da      	uxtb	r2, r3
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fa5b 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020ae:	e05b      	b.n	8002168 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f8ed 	bl	8002294 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07b      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d034      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x184>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	2b00      	cmp	r3, #0
 8002104:	d130      	bne.n	8002168 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f87f 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e04d      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d90e      	bls.n	8002148 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	b2da      	uxtb	r2, r3
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fa0f 	bl	8002564 <I2C_TransferConfig>
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	b2da      	uxtb	r2, r3
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f9fe 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d19e      	bne.n	80020b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f8cc 	bl	8002314 <I2C_WaitOnSTOPFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e01a      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800219a:	400b      	ands	r3, r1
 800219c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	80002000 	.word	0x80002000
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d103      	bne.n	80021ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d007      	beq.n	8002208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	619a      	str	r2, [r3, #24]
  }
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002224:	e022      	b.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d01e      	beq.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff fba1 	bl	8001974 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d113      	bne.n	800226c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00f      	b.n	800228c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	429a      	cmp	r2, r3
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	429a      	cmp	r2, r3
 8002288:	d0cd      	beq.n	8002226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022a0:	e02c      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f870 	bl	800238c <I2C_IsErrorOccurred>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e02a      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d01e      	beq.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7ff fb59 	bl	8001974 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e007      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d1cb      	bne.n	80022a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002320:	e028      	b.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f830 	bl	800238c <I2C_IsErrorOccurred>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e026      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff fb1d 	bl	8001974 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e007      	b.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b20      	cmp	r3, #32
 8002380:	d1cf      	bne.n	8002322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d075      	beq.n	80024a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023c0:	e056      	b.n	8002470 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d052      	beq.n	8002470 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff fad3 	bl	8001974 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_IsErrorOccurred+0x54>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d147      	bne.n	8002470 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d12e      	bne.n	8002462 <I2C_IsErrorOccurred+0xd6>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d02a      	beq.n	8002462 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d027      	beq.n	8002462 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002422:	f7ff faa7 	bl	8001974 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e01b      	b.n	8002462 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800242a:	f7ff faa3 	bl	8001974 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b19      	cmp	r3, #25
 8002436:	d914      	bls.n	8002462 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d1dc      	bne.n	800242a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b20      	cmp	r3, #32
 800247c:	d003      	beq.n	8002486 <I2C_IsErrorOccurred+0xfa>
 800247e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002482:	2b00      	cmp	r3, #0
 8002484:	d09d      	beq.n	80023c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01c      	beq.n	8002554 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fe56 	bl	80021cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <I2C_IsErrorOccurred+0x1d4>)
 800252c:	400b      	ands	r3, r1
 800252e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	4613      	mov	r3, r2
 8002574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257c:	7a7b      	ldrb	r3, [r7, #9]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	4313      	orrs	r3, r2
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <I2C_TransferConfig+0x60>)
 80025a4:	430b      	orrs	r3, r1
 80025a6:	43db      	mvns	r3, r3
 80025a8:	ea02 0103 	and.w	r1, r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	03ff63ff 	.word	0x03ff63ff

080025c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d138      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e032      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800261a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d139      	bne.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	e033      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2224      	movs	r2, #36	; 0x24
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_PWREx_GetVoltageRange+0x18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40007000 	.word	0x40007000

08002714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002722:	d130      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800272c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002730:	d038      	beq.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2232      	movs	r2, #50	; 0x32
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002758:	e002      	b.n	8002760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276c:	d102      	bne.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f2      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	d110      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e00f      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d007      	beq.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 bc02 	b.w	8002fd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4b96      	ldr	r3, [pc, #600]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4b94      	ldr	r3, [pc, #592]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80e4 	beq.w	80029be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_RCC_OscConfig+0x4c>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	f040 808b 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 8087 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280c:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_OscConfig+0x64>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e3d9      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	4b81      	ldr	r3, [pc, #516]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_RCC_OscConfig+0x7e>
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	e005      	b.n	800284a <HAL_RCC_OscConfig+0x8a>
 800283e:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284a:	4293      	cmp	r3, r2
 800284c:	d223      	bcs.n	8002896 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd8c 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3ba      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a72      	ldr	r2, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	496d      	ldr	r1, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4968      	ldr	r1, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e025      	b.n	80028e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002896:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4960      	ldr	r1, [pc, #384]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	495b      	ldr	r1, [pc, #364]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd4c 	bl	8003370 <RCC_SetFlashLatencyFromMSIRange>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e37a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e2:	f000 fc81 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	4950      	ldr	r1, [pc, #320]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a4e      	ldr	r2, [pc, #312]	; (8002a38 <HAL_RCC_OscConfig+0x278>)
 8002900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ffe4 	bl	80018d4 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d052      	beq.n	80029bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	e35e      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d032      	beq.n	8002988 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800292e:	f7ff f821 	bl	8001974 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002936:	f7ff f81d 	bl	8001974 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e347      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a35      	ldr	r2, [pc, #212]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4930      	ldr	r1, [pc, #192]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	492b      	ldr	r1, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
 8002986:	e01a      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002994:	f7fe ffee 	bl	8001974 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800299c:	f7fe ffea 	bl	8001974 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e314      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1dc>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d073      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x21c>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d10e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d063      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d15f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e2f1      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x24c>
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e025      	b.n	8002a58 <HAL_RCC_OscConfig+0x298>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a14:	d114      	bne.n	8002a40 <HAL_RCC_OscConfig+0x280>
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a02      	ldr	r2, [pc, #8]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e013      	b.n	8002a58 <HAL_RCC_OscConfig+0x298>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08007408 	.word	0x08007408
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	4ba0      	ldr	r3, [pc, #640]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a9f      	ldr	r2, [pc, #636]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b9d      	ldr	r3, [pc, #628]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a9c      	ldr	r2, [pc, #624]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff88 	bl	8001974 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe ff84 	bl	8001974 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2ae      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7a:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2a8>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe ff74 	bl	8001974 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe ff70 	bl	8001974 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e29a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d0>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x310>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d119      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d116      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x328>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e277      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	4973      	ldr	r1, [pc, #460]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afc:	e040      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d023      	beq.n	8002b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe ff2f 	bl	8001974 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe ff2b 	bl	8001974 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e255      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b2c:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	495f      	ldr	r1, [pc, #380]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe ff0b 	bl	8001974 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe ff07 	bl	8001974 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e231      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b94:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fee6 	bl	8001974 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe fee2 	bl	8001974 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e20c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x3ec>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fec9 	bl	8001974 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe fec5 	bl	8001974 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1ef      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a6 	beq.w	8002d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d118      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fe8c 	bl	8001974 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fe88 	bl	8001974 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1b2      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_RCC_OscConfig+0x508>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4d8>
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c96:	e029      	b.n	8002cec <HAL_RCC_OscConfig+0x52c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d115      	bne.n	8002ccc <HAL_RCC_OscConfig+0x50c>
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a03      	ldr	r2, [pc, #12]	; (8002cc4 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc0:	e014      	b.n	8002cec <HAL_RCC_OscConfig+0x52c>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	4b9a      	ldr	r3, [pc, #616]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a99      	ldr	r2, [pc, #612]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cdc:	4b96      	ldr	r3, [pc, #600]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	4a95      	ldr	r2, [pc, #596]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fe3e 	bl	8001974 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe3a 	bl	8001974 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e162      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ed      	beq.n	8002cfc <HAL_RCC_OscConfig+0x53c>
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fe27 	bl	8001974 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fe23 	bl	8001974 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e14b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ed      	bne.n	8002d2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d74:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d7a:	4a6f      	ldr	r2, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fdf6 	bl	8001974 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8c:	f7fe fdf2 	bl	8001974 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e11c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d9e:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x5cc>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db4:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fdd9 	bl	8001974 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc6:	f7fe fdd5 	bl	8001974 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0ff      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd8:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80f3 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 80c9 	bne.w	8002f8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dfa:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d12c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d123      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d11b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d113      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d109      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d06b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d062      	beq.n	8002f34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0ac      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e8a:	f7fe fd73 	bl	8001974 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fd6f 	bl	8001974 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e099      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCC_OscConfig+0x77c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eca:	0212      	lsls	r2, r2, #8
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0552      	lsls	r2, r2, #21
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eea:	06d2      	lsls	r2, r2, #27
 8002eec:	430a      	orrs	r2, r1
 8002eee:	4912      	ldr	r1, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f0c:	f7fe fd32 	bl	8001974 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fd2e 	bl	8001974 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e058      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_OscConfig+0x778>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f32:	e050      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e04f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d144      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f64:	f7fe fd06 	bl	8001974 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fd02 	bl	8001974 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e02c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x7ac>
 8002f8a:	e024      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d01f      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fce9 	bl	8001974 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fce5 	bl	8001974 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4905      	ldr	r1, [pc, #20]	; (8002fe0 <HAL_RCC_OscConfig+0x820>)
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	feeefffc 	.word	0xfeeefffc

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0e7      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b72      	ldr	r3, [pc, #456]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4970      	ldr	r1, [pc, #448]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cf      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d010      	beq.n	800305a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003044:	429a      	cmp	r2, r3
 8003046:	d908      	bls.n	800305a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4960      	ldr	r1, [pc, #384]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04c      	beq.n	8003100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d121      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0a6      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e09a      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309e:	4b4e      	ldr	r3, [pc, #312]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e08e      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e086      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4943      	ldr	r1, [pc, #268]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fc50 	bl	8001974 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fe fc4c 	bl	8001974 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e06e      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003118:	429a      	cmp	r2, r3
 800311a:	d208      	bcs.n	800312e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	492b      	ldr	r1, [pc, #172]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d210      	bcs.n	800315e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 0207 	bic.w	r2, r3, #7
 8003144:	4923      	ldr	r1, [pc, #140]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_ClockConfig+0x1ec>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e036      	b.n	80031cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4918      	ldr	r1, [pc, #96]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4910      	ldr	r1, [pc, #64]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800319c:	f000 f824 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	490b      	ldr	r1, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1f4>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1fc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe fb87 	bl	80018d4 <HAL_InitTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08007408 	.word	0x08007408
 80031e0:	20000000 	.word	0x20000000
 80031e4:	20000004 	.word	0x20000004

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x34>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d121      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d11e      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e005      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003244:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d102      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e004      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d101      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_RCC_GetSysClockFreq+0x114>)
 800326e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d134      	bne.n	80032e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0xa6>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d003      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xac>
 800328c:	e005      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003290:	617b      	str	r3, [r7, #20]
      break;
 8003292:	e005      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003296:	617b      	str	r3, [r7, #20]
      break;
 8003298:	e002      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	617b      	str	r3, [r7, #20]
      break;
 800329e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	3301      	adds	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	fb03 f202 	mul.w	r2, r3, r2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	0e5b      	lsrs	r3, r3, #25
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	3301      	adds	r3, #1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032e0:	69bb      	ldr	r3, [r7, #24]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	08007420 	.word	0x08007420
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	007a1200 	.word	0x007a1200

08003300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4904      	ldr	r1, [pc, #16]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	08007418 	.word	0x08007418

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003348:	f7ff ffda 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	; (800336c <HAL_RCC_GetPCLK2Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08007418 	.word	0x08007418

08003370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003388:	f7ff f9b6 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 800338c:	6178      	str	r0, [r7, #20]
 800338e:	e014      	b.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
 800339c:	4b22      	ldr	r3, [pc, #136]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a8:	f7ff f9a6 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 80033ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d10b      	bne.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d919      	bls.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2ba0      	cmp	r3, #160	; 0xa0
 80033cc:	d902      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ce:	2302      	movs	r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e013      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e010      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d902      	bls.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033e0:	2303      	movs	r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	e00a      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d102      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ec:	2302      	movs	r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e004      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b70      	cmp	r3, #112	; 0x70
 80033f6:	d101      	bne.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	4909      	ldr	r1, [pc, #36]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	40022000 	.word	0x40022000

08003430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003438:	2300      	movs	r3, #0
 800343a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343c:	2300      	movs	r3, #0
 800343e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d031      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003454:	d01a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003456:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800345a:	d814      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003464:	d10f      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a5c      	ldr	r2, [pc, #368]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003472:	e00c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fa44 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	74fb      	strb	r3, [r7, #19]
      break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	494e      	ldr	r1, [pc, #312]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034aa:	e001      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 809e 	beq.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b40      	ldr	r3, [pc, #256]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003500:	f7fe fa38 	bl	8001974 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fe fa34 	bl	8001974 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
        break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351c:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d15a      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d019      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d016      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f9f4 	bl	8001974 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358e:	e00b      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe f9f0 	bl	8001974 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
            break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ec      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ca:	4904      	ldr	r1, [pc, #16]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035d2:	e009      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
 80035d8:	e006      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e8:	7c7b      	ldrb	r3, [r7, #17]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b9e      	ldr	r3, [pc, #632]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a9d      	ldr	r2, [pc, #628]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003606:	4b98      	ldr	r3, [pc, #608]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4994      	ldr	r1, [pc, #592]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003628:	4b8f      	ldr	r3, [pc, #572]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 020c 	bic.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	498c      	ldr	r1, [pc, #560]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364a:	4b87      	ldr	r3, [pc, #540]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	4983      	ldr	r1, [pc, #524]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800366c:	4b7e      	ldr	r3, [pc, #504]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	497b      	ldr	r1, [pc, #492]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800368e:	4b76      	ldr	r3, [pc, #472]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4972      	ldr	r1, [pc, #456]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b0:	4b6d      	ldr	r3, [pc, #436]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	496a      	ldr	r1, [pc, #424]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	4961      	ldr	r1, [pc, #388]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f4:	4b5c      	ldr	r3, [pc, #368]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	4959      	ldr	r1, [pc, #356]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003716:	4b54      	ldr	r3, [pc, #336]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	4950      	ldr	r1, [pc, #320]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	4948      	ldr	r1, [pc, #288]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800375a:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800375c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003760:	f023 0203 	bic.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	493f      	ldr	r1, [pc, #252]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d028      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	4937      	ldr	r1, [pc, #220]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379a:	d106      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379c:	4b32      	ldr	r3, [pc, #200]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a31      	ldr	r2, [pc, #196]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a6:	60d3      	str	r3, [r2, #12]
 80037a8:	e011      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b2:	d10c      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f8a4 	bl	8003908 <RCCEx_PLLSAI1_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d028      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	491f      	ldr	r1, [pc, #124]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f8:	d106      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003804:	60d3      	str	r3, [r2, #12]
 8003806:	e011      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003810:	d10c      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f875 	bl	8003908 <RCCEx_PLLSAI1_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	4908      	ldr	r1, [pc, #32]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003856:	d109      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a02      	ldr	r2, [pc, #8]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800385e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003862:	60d3      	str	r3, [r2, #12]
 8003864:	e014      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003874:	d10c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f843 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01c      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2102      	movs	r1, #2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f820 	bl	8003908 <RCCEx_PLLSAI1_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003916:	4b74      	ldr	r3, [pc, #464]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003922:	4b71      	ldr	r3, [pc, #452]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d10d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
       ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800393a:	4b6b      	ldr	r3, [pc, #428]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
       ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d047      	beq.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e044      	b.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d018      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x86>
 800395c:	2b03      	cmp	r3, #3
 800395e:	d825      	bhi.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d002      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x62>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d009      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x74>
 8003968:	e020      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397a:	e01a      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800397c:	4b5a      	ldr	r3, [pc, #360]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e013      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800398e:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399a:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039aa:	e006      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e004      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	430b      	orrs	r3, r1
 80039d8:	4943      	ldr	r1, [pc, #268]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d17c      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fd ffc0 	bl	8001974 <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039f6:	e009      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f8:	f7fd ffbc 	bl	8001974 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0a:	e005      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ef      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d15f      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68d2      	ldr	r2, [r2, #12]
 8003a3a:	06d2      	lsls	r2, r2, #27
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	492a      	ldr	r1, [pc, #168]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	610b      	str	r3, [r1, #16]
 8003a44:	e027      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d112      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6912      	ldr	r2, [r2, #16]
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0552      	lsls	r2, r2, #21
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	491f      	ldr	r1, [pc, #124]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
 8003a70:	e011      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	0211      	lsls	r1, r2, #8
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6952      	ldr	r2, [r2, #20]
 8003a88:	0852      	lsrs	r2, r2, #1
 8003a8a:	3a01      	subs	r2, #1
 8003a8c:	0652      	lsls	r2, r2, #25
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fd ff67 	bl	8001974 <HAL_GetTick>
 8003aa6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa8:	e009      	b.n	8003abe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aaa:	f7fd ff63 	bl	8001974 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	73fb      	strb	r3, [r7, #15]
          break;
 8003abc:	e005      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ef      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e040      	b.n	8003b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fd38 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8c0 	bl	8003cb0 <UART_SetConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e022      	b.n	8003b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fb3a 	bl	80041bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fbc1 	bl	8004300 <UART_CheckIdleState>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	f040 8082 	bne.w	8003ca6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_UART_Transmit+0x26>
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e07a      	b.n	8003ca8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Transmit+0x38>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e073      	b.n	8003ca8 <HAL_UART_Transmit+0x120>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2221      	movs	r2, #33	; 0x21
 8003bd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd fecd 	bl	8001974 <HAL_GetTick>
 8003bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d108      	bne.n	8003c08 <HAL_UART_Transmit+0x80>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e003      	b.n	8003c10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c18:	e02d      	b.n	8003c76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fbb4 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e039      	b.n	8003ca8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c46:	b292      	uxth	r2, r2
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e008      	b.n	8003c64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b292      	uxth	r2, r2
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1cb      	bne.n	8003c1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb80 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e005      	b.n	8003ca8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b08a      	sub	sp, #40	; 0x28
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4ba5      	ldr	r3, [pc, #660]	; (8003f74 <UART_SetConfig+0x2c4>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a9a      	ldr	r2, [pc, #616]	; (8003f78 <UART_SetConfig+0x2c8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a91      	ldr	r2, [pc, #580]	; (8003f7c <UART_SetConfig+0x2cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d126      	bne.n	8003d88 <UART_SetConfig+0xd8>
 8003d3a:	4b91      	ldr	r3, [pc, #580]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d81b      	bhi.n	8003d80 <UART_SetConfig+0xd0>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0xa0>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e0d6      	b.n	8003f16 <UART_SetConfig+0x266>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e0d2      	b.n	8003f16 <UART_SetConfig+0x266>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e0ce      	b.n	8003f16 <UART_SetConfig+0x266>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e0ca      	b.n	8003f16 <UART_SetConfig+0x266>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e0c6      	b.n	8003f16 <UART_SetConfig+0x266>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7d      	ldr	r2, [pc, #500]	; (8003f84 <UART_SetConfig+0x2d4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d138      	bne.n	8003e04 <UART_SetConfig+0x154>
 8003d92:	4b7b      	ldr	r3, [pc, #492]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d82d      	bhi.n	8003dfc <UART_SetConfig+0x14c>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0xf8>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003dfd 	.word	0x08003dfd
 8003db4:	08003dfd 	.word	0x08003dfd
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003dfd 	.word	0x08003dfd
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dfd 	.word	0x08003dfd
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003dfd 	.word	0x08003dfd
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	08003dfd 	.word	0x08003dfd
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e098      	b.n	8003f16 <UART_SetConfig+0x266>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e094      	b.n	8003f16 <UART_SetConfig+0x266>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e090      	b.n	8003f16 <UART_SetConfig+0x266>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e08c      	b.n	8003f16 <UART_SetConfig+0x266>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e088      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5f      	ldr	r2, [pc, #380]	; (8003f88 <UART_SetConfig+0x2d8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d125      	bne.n	8003e5a <UART_SetConfig+0x1aa>
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d016      	beq.n	8003e4a <UART_SetConfig+0x19a>
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d818      	bhi.n	8003e52 <UART_SetConfig+0x1a2>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d00a      	beq.n	8003e3a <UART_SetConfig+0x18a>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d814      	bhi.n	8003e52 <UART_SetConfig+0x1a2>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <UART_SetConfig+0x182>
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d008      	beq.n	8003e42 <UART_SetConfig+0x192>
 8003e30:	e00f      	b.n	8003e52 <UART_SetConfig+0x1a2>
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e38:	e06d      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e40:	e069      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e42:	2304      	movs	r3, #4
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e48:	e065      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e50:	e061      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e52:	2310      	movs	r3, #16
 8003e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e58:	e05d      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <UART_SetConfig+0x2dc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d125      	bne.n	8003eb0 <UART_SetConfig+0x200>
 8003e64:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e70:	d016      	beq.n	8003ea0 <UART_SetConfig+0x1f0>
 8003e72:	2bc0      	cmp	r3, #192	; 0xc0
 8003e74:	d818      	bhi.n	8003ea8 <UART_SetConfig+0x1f8>
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	d00a      	beq.n	8003e90 <UART_SetConfig+0x1e0>
 8003e7a:	2b80      	cmp	r3, #128	; 0x80
 8003e7c:	d814      	bhi.n	8003ea8 <UART_SetConfig+0x1f8>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <UART_SetConfig+0x1d8>
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d008      	beq.n	8003e98 <UART_SetConfig+0x1e8>
 8003e86:	e00f      	b.n	8003ea8 <UART_SetConfig+0x1f8>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e042      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e90:	2302      	movs	r3, #2
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e03e      	b.n	8003f16 <UART_SetConfig+0x266>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e03a      	b.n	8003f16 <UART_SetConfig+0x266>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e036      	b.n	8003f16 <UART_SetConfig+0x266>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e032      	b.n	8003f16 <UART_SetConfig+0x266>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <UART_SetConfig+0x2c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d12a      	bne.n	8003f10 <UART_SetConfig+0x260>
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <UART_SetConfig+0x2d0>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec8:	d01a      	beq.n	8003f00 <UART_SetConfig+0x250>
 8003eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ece:	d81b      	bhi.n	8003f08 <UART_SetConfig+0x258>
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed4:	d00c      	beq.n	8003ef0 <UART_SetConfig+0x240>
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eda:	d815      	bhi.n	8003f08 <UART_SetConfig+0x258>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <UART_SetConfig+0x238>
 8003ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee4:	d008      	beq.n	8003ef8 <UART_SetConfig+0x248>
 8003ee6:	e00f      	b.n	8003f08 <UART_SetConfig+0x258>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e012      	b.n	8003f16 <UART_SetConfig+0x266>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e00e      	b.n	8003f16 <UART_SetConfig+0x266>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e00a      	b.n	8003f16 <UART_SetConfig+0x266>
 8003f00:	2308      	movs	r3, #8
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e006      	b.n	8003f16 <UART_SetConfig+0x266>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e002      	b.n	8003f16 <UART_SetConfig+0x266>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <UART_SetConfig+0x2c8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	f040 808b 	bne.w	8004038 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d834      	bhi.n	8003f94 <UART_SetConfig+0x2e4>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x280>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f95 	.word	0x08003f95
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f95 	.word	0x08003f95
 8003f40:	08003f63 	.word	0x08003f63
 8003f44:	08003f95 	.word	0x08003f95
 8003f48:	08003f95 	.word	0x08003f95
 8003f4c:	08003f95 	.word	0x08003f95
 8003f50:	08003f6b 	.word	0x08003f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7ff f9e0 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8003f58:	61f8      	str	r0, [r7, #28]
        break;
 8003f5a:	e021      	b.n	8003fa0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <UART_SetConfig+0x2e0>)
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e01e      	b.n	8003fa0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f62:	f7ff f941 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003f66:	61f8      	str	r0, [r7, #28]
        break;
 8003f68:	e01a      	b.n	8003fa0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6e:	61fb      	str	r3, [r7, #28]
        break;
 8003f70:	e016      	b.n	8003fa0 <UART_SetConfig+0x2f0>
 8003f72:	bf00      	nop
 8003f74:	efff69f3 	.word	0xefff69f3
 8003f78:	40008000 	.word	0x40008000
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40004400 	.word	0x40004400
 8003f88:	40004800 	.word	0x40004800
 8003f8c:	40004c00 	.word	0x40004c00
 8003f90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80fa 	beq.w	800419c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d305      	bcc.n	8003fc4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d903      	bls.n	8003fcc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fca:	e0e7      	b.n	800419c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	461c      	mov	r4, r3
 8003fd2:	4615      	mov	r5, r2
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	022b      	lsls	r3, r5, #8
 8003fde:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fe2:	0222      	lsls	r2, r4, #8
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	6849      	ldr	r1, [r1, #4]
 8003fe8:	0849      	lsrs	r1, r1, #1
 8003fea:	2000      	movs	r0, #0
 8003fec:	4688      	mov	r8, r1
 8003fee:	4681      	mov	r9, r0
 8003ff0:	eb12 0a08 	adds.w	sl, r2, r8
 8003ff4:	eb43 0b09 	adc.w	fp, r3, r9
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004006:	4650      	mov	r0, sl
 8004008:	4659      	mov	r1, fp
 800400a:	f7fc fdd5 	bl	8000bb8 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4613      	mov	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401c:	d308      	bcc.n	8004030 <UART_SetConfig+0x380>
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004024:	d204      	bcs.n	8004030 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	e0b5      	b.n	800419c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004036:	e0b1      	b.n	800419c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d15d      	bne.n	80040fe <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004046:	2b08      	cmp	r3, #8
 8004048:	d827      	bhi.n	800409a <UART_SetConfig+0x3ea>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x3a0>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800409b 	.word	0x0800409b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
 8004070:	08004093 	.word	0x08004093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7ff f950 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004078:	61f8      	str	r0, [r7, #28]
        break;
 800407a:	e014      	b.n	80040a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7ff f962 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004080:	61f8      	str	r0, [r7, #28]
        break;
 8004082:	e010      	b.n	80040a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <UART_SetConfig+0x508>)
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e00d      	b.n	80040a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7ff f8ad 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 800408e:	61f8      	str	r0, [r7, #28]
        break;
 8004090:	e009      	b.n	80040a6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	61fb      	str	r3, [r7, #28]
        break;
 8004098:	e005      	b.n	80040a6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d077      	beq.n	800419c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005a      	lsls	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d916      	bls.n	80040f6 <UART_SetConfig+0x446>
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d212      	bcs.n	80040f6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f023 030f 	bic.w	r3, r3, #15
 80040d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	8afb      	ldrh	r3, [r7, #22]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	8afa      	ldrh	r2, [r7, #22]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e052      	b.n	800419c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040fc:	e04e      	b.n	800419c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004102:	2b08      	cmp	r3, #8
 8004104:	d827      	bhi.n	8004156 <UART_SetConfig+0x4a6>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x45c>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7ff f8f2 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004134:	61f8      	str	r0, [r7, #28]
        break;
 8004136:	e014      	b.n	8004162 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff f904 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 800413c:	61f8      	str	r0, [r7, #28]
        break;
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <UART_SetConfig+0x508>)
 8004142:	61fb      	str	r3, [r7, #28]
        break;
 8004144:	e00d      	b.n	8004162 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7ff f84f 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 800414a:	61f8      	str	r0, [r7, #28]
        break;
 800414c:	e009      	b.n	8004162 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	61fb      	str	r3, [r7, #28]
        break;
 8004154:	e005      	b.n	8004162 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004160:	bf00      	nop
    }

    if (pclk != 0U)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d019      	beq.n	800419c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	085a      	lsrs	r2, r3, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	441a      	add	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	d909      	bls.n	8004196 <UART_SetConfig+0x4e6>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004188:	d205      	bcs.n	8004196 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	e002      	b.n	800419c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	00f42400 	.word	0x00f42400

080041bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ba:	d10a      	bne.n	80042d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af02      	add	r7, sp, #8
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004310:	f7fd fb30 	bl	8001974 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b08      	cmp	r3, #8
 8004322:	d10e      	bne.n	8004342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f82d 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e023      	b.n	800438a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d10e      	bne.n	800436e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f817 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00d      	b.n	800438a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b09c      	sub	sp, #112	; 0x70
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	e0a5      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	f000 80a1 	beq.w	80044f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fd fae1 	bl	8001974 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80043be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d13e      	bne.n	8004442 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d8:	667b      	str	r3, [r7, #100]	; 0x64
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	663b      	str	r3, [r7, #96]	; 0x60
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004416:	64ba      	str	r2, [r7, #72]	; 0x48
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800441c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e067      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d04f      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445e:	d147      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004468:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800447e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
 800448a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	613b      	str	r3, [r7, #16]
   return(result);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044bc:	623a      	str	r2, [r7, #32]
 80044be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e010      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	f43f af4a 	beq.w	80043a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3770      	adds	r7, #112	; 0x70
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <__errno>:
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <__errno+0x8>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	2000000c 	.word	0x2000000c

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4d0d      	ldr	r5, [pc, #52]	; (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2600      	movs	r6, #0
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4d0b      	ldr	r5, [pc, #44]	; (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	; (800456c <__libc_init_array+0x44>)
 800453c:	f002 ff18 	bl	8007370 <_init>
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2600      	movs	r6, #0
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	08007834 	.word	0x08007834
 8004564:	08007834 	.word	0x08007834
 8004568:	08007834 	.word	0x08007834
 800456c:	08007838 	.word	0x08007838

08004570 <memset>:
 8004570:	4402      	add	r2, r0
 8004572:	4603      	mov	r3, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <__cvt>:
 8004580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	ec55 4b10 	vmov	r4, r5, d0
 8004588:	2d00      	cmp	r5, #0
 800458a:	460e      	mov	r6, r1
 800458c:	4619      	mov	r1, r3
 800458e:	462b      	mov	r3, r5
 8004590:	bfbb      	ittet	lt
 8004592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004596:	461d      	movlt	r5, r3
 8004598:	2300      	movge	r3, #0
 800459a:	232d      	movlt	r3, #45	; 0x2d
 800459c:	700b      	strb	r3, [r1, #0]
 800459e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045a4:	4691      	mov	r9, r2
 80045a6:	f023 0820 	bic.w	r8, r3, #32
 80045aa:	bfbc      	itt	lt
 80045ac:	4622      	movlt	r2, r4
 80045ae:	4614      	movlt	r4, r2
 80045b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045b4:	d005      	beq.n	80045c2 <__cvt+0x42>
 80045b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045ba:	d100      	bne.n	80045be <__cvt+0x3e>
 80045bc:	3601      	adds	r6, #1
 80045be:	2102      	movs	r1, #2
 80045c0:	e000      	b.n	80045c4 <__cvt+0x44>
 80045c2:	2103      	movs	r1, #3
 80045c4:	ab03      	add	r3, sp, #12
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	ab02      	add	r3, sp, #8
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	ec45 4b10 	vmov	d0, r4, r5
 80045d0:	4653      	mov	r3, sl
 80045d2:	4632      	mov	r2, r6
 80045d4:	f000 fd00 	bl	8004fd8 <_dtoa_r>
 80045d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045dc:	4607      	mov	r7, r0
 80045de:	d102      	bne.n	80045e6 <__cvt+0x66>
 80045e0:	f019 0f01 	tst.w	r9, #1
 80045e4:	d022      	beq.n	800462c <__cvt+0xac>
 80045e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045ea:	eb07 0906 	add.w	r9, r7, r6
 80045ee:	d110      	bne.n	8004612 <__cvt+0x92>
 80045f0:	783b      	ldrb	r3, [r7, #0]
 80045f2:	2b30      	cmp	r3, #48	; 0x30
 80045f4:	d10a      	bne.n	800460c <__cvt+0x8c>
 80045f6:	2200      	movs	r2, #0
 80045f8:	2300      	movs	r3, #0
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fc fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004602:	b918      	cbnz	r0, 800460c <__cvt+0x8c>
 8004604:	f1c6 0601 	rsb	r6, r6, #1
 8004608:	f8ca 6000 	str.w	r6, [sl]
 800460c:	f8da 3000 	ldr.w	r3, [sl]
 8004610:	4499      	add	r9, r3
 8004612:	2200      	movs	r2, #0
 8004614:	2300      	movs	r3, #0
 8004616:	4620      	mov	r0, r4
 8004618:	4629      	mov	r1, r5
 800461a:	f7fc fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800461e:	b108      	cbz	r0, 8004624 <__cvt+0xa4>
 8004620:	f8cd 900c 	str.w	r9, [sp, #12]
 8004624:	2230      	movs	r2, #48	; 0x30
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	454b      	cmp	r3, r9
 800462a:	d307      	bcc.n	800463c <__cvt+0xbc>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004630:	1bdb      	subs	r3, r3, r7
 8004632:	4638      	mov	r0, r7
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	b004      	add	sp, #16
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	9103      	str	r1, [sp, #12]
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e7f0      	b.n	8004626 <__cvt+0xa6>

08004644 <__exponent>:
 8004644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004646:	4603      	mov	r3, r0
 8004648:	2900      	cmp	r1, #0
 800464a:	bfb8      	it	lt
 800464c:	4249      	neglt	r1, r1
 800464e:	f803 2b02 	strb.w	r2, [r3], #2
 8004652:	bfb4      	ite	lt
 8004654:	222d      	movlt	r2, #45	; 0x2d
 8004656:	222b      	movge	r2, #43	; 0x2b
 8004658:	2909      	cmp	r1, #9
 800465a:	7042      	strb	r2, [r0, #1]
 800465c:	dd2a      	ble.n	80046b4 <__exponent+0x70>
 800465e:	f10d 0407 	add.w	r4, sp, #7
 8004662:	46a4      	mov	ip, r4
 8004664:	270a      	movs	r7, #10
 8004666:	46a6      	mov	lr, r4
 8004668:	460a      	mov	r2, r1
 800466a:	fb91 f6f7 	sdiv	r6, r1, r7
 800466e:	fb07 1516 	mls	r5, r7, r6, r1
 8004672:	3530      	adds	r5, #48	; 0x30
 8004674:	2a63      	cmp	r2, #99	; 0x63
 8004676:	f104 34ff 	add.w	r4, r4, #4294967295
 800467a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800467e:	4631      	mov	r1, r6
 8004680:	dcf1      	bgt.n	8004666 <__exponent+0x22>
 8004682:	3130      	adds	r1, #48	; 0x30
 8004684:	f1ae 0502 	sub.w	r5, lr, #2
 8004688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800468c:	1c44      	adds	r4, r0, #1
 800468e:	4629      	mov	r1, r5
 8004690:	4561      	cmp	r1, ip
 8004692:	d30a      	bcc.n	80046aa <__exponent+0x66>
 8004694:	f10d 0209 	add.w	r2, sp, #9
 8004698:	eba2 020e 	sub.w	r2, r2, lr
 800469c:	4565      	cmp	r5, ip
 800469e:	bf88      	it	hi
 80046a0:	2200      	movhi	r2, #0
 80046a2:	4413      	add	r3, r2
 80046a4:	1a18      	subs	r0, r3, r0
 80046a6:	b003      	add	sp, #12
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046b2:	e7ed      	b.n	8004690 <__exponent+0x4c>
 80046b4:	2330      	movs	r3, #48	; 0x30
 80046b6:	3130      	adds	r1, #48	; 0x30
 80046b8:	7083      	strb	r3, [r0, #2]
 80046ba:	70c1      	strb	r1, [r0, #3]
 80046bc:	1d03      	adds	r3, r0, #4
 80046be:	e7f1      	b.n	80046a4 <__exponent+0x60>

080046c0 <_printf_float>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	ed2d 8b02 	vpush	{d8}
 80046c8:	b08d      	sub	sp, #52	; 0x34
 80046ca:	460c      	mov	r4, r1
 80046cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046d0:	4616      	mov	r6, r2
 80046d2:	461f      	mov	r7, r3
 80046d4:	4605      	mov	r5, r0
 80046d6:	f001 fa6d 	bl	8005bb4 <_localeconv_r>
 80046da:	f8d0 a000 	ldr.w	sl, [r0]
 80046de:	4650      	mov	r0, sl
 80046e0:	f7fb fd7e 	bl	80001e0 <strlen>
 80046e4:	2300      	movs	r3, #0
 80046e6:	930a      	str	r3, [sp, #40]	; 0x28
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	f8d8 3000 	ldr.w	r3, [r8]
 80046f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046f4:	3307      	adds	r3, #7
 80046f6:	f023 0307 	bic.w	r3, r3, #7
 80046fa:	f103 0208 	add.w	r2, r3, #8
 80046fe:	f8c8 2000 	str.w	r2, [r8]
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800470a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800470e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004712:	9307      	str	r3, [sp, #28]
 8004714:	f8cd 8018 	str.w	r8, [sp, #24]
 8004718:	ee08 0a10 	vmov	s16, r0
 800471c:	4b9f      	ldr	r3, [pc, #636]	; (800499c <_printf_float+0x2dc>)
 800471e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	f7fc fa09 	bl	8000b3c <__aeabi_dcmpun>
 800472a:	bb88      	cbnz	r0, 8004790 <_printf_float+0xd0>
 800472c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004730:	4b9a      	ldr	r3, [pc, #616]	; (800499c <_printf_float+0x2dc>)
 8004732:	f04f 32ff 	mov.w	r2, #4294967295
 8004736:	f7fc f9e3 	bl	8000b00 <__aeabi_dcmple>
 800473a:	bb48      	cbnz	r0, 8004790 <_printf_float+0xd0>
 800473c:	2200      	movs	r2, #0
 800473e:	2300      	movs	r3, #0
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fc f9d2 	bl	8000aec <__aeabi_dcmplt>
 8004748:	b110      	cbz	r0, 8004750 <_printf_float+0x90>
 800474a:	232d      	movs	r3, #45	; 0x2d
 800474c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004750:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <_printf_float+0x2e0>)
 8004752:	4894      	ldr	r0, [pc, #592]	; (80049a4 <_printf_float+0x2e4>)
 8004754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004758:	bf94      	ite	ls
 800475a:	4698      	movls	r8, r3
 800475c:	4680      	movhi	r8, r0
 800475e:	2303      	movs	r3, #3
 8004760:	6123      	str	r3, [r4, #16]
 8004762:	9b05      	ldr	r3, [sp, #20]
 8004764:	f023 0204 	bic.w	r2, r3, #4
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	f04f 0900 	mov.w	r9, #0
 800476e:	9700      	str	r7, [sp, #0]
 8004770:	4633      	mov	r3, r6
 8004772:	aa0b      	add	r2, sp, #44	; 0x2c
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f9d8 	bl	8004b2c <_printf_common>
 800477c:	3001      	adds	r0, #1
 800477e:	f040 8090 	bne.w	80048a2 <_printf_float+0x1e2>
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	b00d      	add	sp, #52	; 0x34
 8004788:	ecbd 8b02 	vpop	{d8}
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f9d0 	bl	8000b3c <__aeabi_dcmpun>
 800479c:	b140      	cbz	r0, 80047b0 <_printf_float+0xf0>
 800479e:	464b      	mov	r3, r9
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bfbc      	itt	lt
 80047a4:	232d      	movlt	r3, #45	; 0x2d
 80047a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047aa:	487f      	ldr	r0, [pc, #508]	; (80049a8 <_printf_float+0x2e8>)
 80047ac:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <_printf_float+0x2ec>)
 80047ae:	e7d1      	b.n	8004754 <_printf_float+0x94>
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047b6:	9206      	str	r2, [sp, #24]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	d13f      	bne.n	800483c <_printf_float+0x17c>
 80047bc:	2306      	movs	r3, #6
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	9b05      	ldr	r3, [sp, #20]
 80047c2:	6861      	ldr	r1, [r4, #4]
 80047c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047c8:	2300      	movs	r3, #0
 80047ca:	9303      	str	r3, [sp, #12]
 80047cc:	ab0a      	add	r3, sp, #40	; 0x28
 80047ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047d2:	ab09      	add	r3, sp, #36	; 0x24
 80047d4:	ec49 8b10 	vmov	d0, r8, r9
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047e0:	4628      	mov	r0, r5
 80047e2:	f7ff fecd 	bl	8004580 <__cvt>
 80047e6:	9b06      	ldr	r3, [sp, #24]
 80047e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ea:	2b47      	cmp	r3, #71	; 0x47
 80047ec:	4680      	mov	r8, r0
 80047ee:	d108      	bne.n	8004802 <_printf_float+0x142>
 80047f0:	1cc8      	adds	r0, r1, #3
 80047f2:	db02      	blt.n	80047fa <_printf_float+0x13a>
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	4299      	cmp	r1, r3
 80047f8:	dd41      	ble.n	800487e <_printf_float+0x1be>
 80047fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80047fe:	fa5f fb8b 	uxtb.w	fp, fp
 8004802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004806:	d820      	bhi.n	800484a <_printf_float+0x18a>
 8004808:	3901      	subs	r1, #1
 800480a:	465a      	mov	r2, fp
 800480c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004810:	9109      	str	r1, [sp, #36]	; 0x24
 8004812:	f7ff ff17 	bl	8004644 <__exponent>
 8004816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004818:	1813      	adds	r3, r2, r0
 800481a:	2a01      	cmp	r2, #1
 800481c:	4681      	mov	r9, r0
 800481e:	6123      	str	r3, [r4, #16]
 8004820:	dc02      	bgt.n	8004828 <_printf_float+0x168>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	07d2      	lsls	r2, r2, #31
 8004826:	d501      	bpl.n	800482c <_printf_float+0x16c>
 8004828:	3301      	adds	r3, #1
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004830:	2b00      	cmp	r3, #0
 8004832:	d09c      	beq.n	800476e <_printf_float+0xae>
 8004834:	232d      	movs	r3, #45	; 0x2d
 8004836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483a:	e798      	b.n	800476e <_printf_float+0xae>
 800483c:	9a06      	ldr	r2, [sp, #24]
 800483e:	2a47      	cmp	r2, #71	; 0x47
 8004840:	d1be      	bne.n	80047c0 <_printf_float+0x100>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1bc      	bne.n	80047c0 <_printf_float+0x100>
 8004846:	2301      	movs	r3, #1
 8004848:	e7b9      	b.n	80047be <_printf_float+0xfe>
 800484a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800484e:	d118      	bne.n	8004882 <_printf_float+0x1c2>
 8004850:	2900      	cmp	r1, #0
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	dd0b      	ble.n	800486e <_printf_float+0x1ae>
 8004856:	6121      	str	r1, [r4, #16]
 8004858:	b913      	cbnz	r3, 8004860 <_printf_float+0x1a0>
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	07d0      	lsls	r0, r2, #31
 800485e:	d502      	bpl.n	8004866 <_printf_float+0x1a6>
 8004860:	3301      	adds	r3, #1
 8004862:	440b      	add	r3, r1
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	65a1      	str	r1, [r4, #88]	; 0x58
 8004868:	f04f 0900 	mov.w	r9, #0
 800486c:	e7de      	b.n	800482c <_printf_float+0x16c>
 800486e:	b913      	cbnz	r3, 8004876 <_printf_float+0x1b6>
 8004870:	6822      	ldr	r2, [r4, #0]
 8004872:	07d2      	lsls	r2, r2, #31
 8004874:	d501      	bpl.n	800487a <_printf_float+0x1ba>
 8004876:	3302      	adds	r3, #2
 8004878:	e7f4      	b.n	8004864 <_printf_float+0x1a4>
 800487a:	2301      	movs	r3, #1
 800487c:	e7f2      	b.n	8004864 <_printf_float+0x1a4>
 800487e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004884:	4299      	cmp	r1, r3
 8004886:	db05      	blt.n	8004894 <_printf_float+0x1d4>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6121      	str	r1, [r4, #16]
 800488c:	07d8      	lsls	r0, r3, #31
 800488e:	d5ea      	bpl.n	8004866 <_printf_float+0x1a6>
 8004890:	1c4b      	adds	r3, r1, #1
 8004892:	e7e7      	b.n	8004864 <_printf_float+0x1a4>
 8004894:	2900      	cmp	r1, #0
 8004896:	bfd4      	ite	le
 8004898:	f1c1 0202 	rsble	r2, r1, #2
 800489c:	2201      	movgt	r2, #1
 800489e:	4413      	add	r3, r2
 80048a0:	e7e0      	b.n	8004864 <_printf_float+0x1a4>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	055a      	lsls	r2, r3, #21
 80048a6:	d407      	bmi.n	80048b8 <_printf_float+0x1f8>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	4642      	mov	r2, r8
 80048ac:	4631      	mov	r1, r6
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	d12c      	bne.n	8004910 <_printf_float+0x250>
 80048b6:	e764      	b.n	8004782 <_printf_float+0xc2>
 80048b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048bc:	f240 80e0 	bls.w	8004a80 <_printf_float+0x3c0>
 80048c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c4:	2200      	movs	r2, #0
 80048c6:	2300      	movs	r3, #0
 80048c8:	f7fc f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d034      	beq.n	800493a <_printf_float+0x27a>
 80048d0:	4a37      	ldr	r2, [pc, #220]	; (80049b0 <_printf_float+0x2f0>)
 80048d2:	2301      	movs	r3, #1
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af51 	beq.w	8004782 <_printf_float+0xc2>
 80048e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e4:	429a      	cmp	r2, r3
 80048e6:	db02      	blt.n	80048ee <_printf_float+0x22e>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07d8      	lsls	r0, r3, #31
 80048ec:	d510      	bpl.n	8004910 <_printf_float+0x250>
 80048ee:	ee18 3a10 	vmov	r3, s16
 80048f2:	4652      	mov	r2, sl
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f af41 	beq.w	8004782 <_printf_float+0xc2>
 8004900:	f04f 0800 	mov.w	r8, #0
 8004904:	f104 091a 	add.w	r9, r4, #26
 8004908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800490a:	3b01      	subs	r3, #1
 800490c:	4543      	cmp	r3, r8
 800490e:	dc09      	bgt.n	8004924 <_printf_float+0x264>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	079b      	lsls	r3, r3, #30
 8004914:	f100 8105 	bmi.w	8004b22 <_printf_float+0x462>
 8004918:	68e0      	ldr	r0, [r4, #12]
 800491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800491c:	4298      	cmp	r0, r3
 800491e:	bfb8      	it	lt
 8004920:	4618      	movlt	r0, r3
 8004922:	e730      	b.n	8004786 <_printf_float+0xc6>
 8004924:	2301      	movs	r3, #1
 8004926:	464a      	mov	r2, r9
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af27 	beq.w	8004782 <_printf_float+0xc2>
 8004934:	f108 0801 	add.w	r8, r8, #1
 8004938:	e7e6      	b.n	8004908 <_printf_float+0x248>
 800493a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc39      	bgt.n	80049b4 <_printf_float+0x2f4>
 8004940:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <_printf_float+0x2f0>)
 8004942:	2301      	movs	r3, #1
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af19 	beq.w	8004782 <_printf_float+0xc2>
 8004950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004954:	4313      	orrs	r3, r2
 8004956:	d102      	bne.n	800495e <_printf_float+0x29e>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	07d9      	lsls	r1, r3, #31
 800495c:	d5d8      	bpl.n	8004910 <_printf_float+0x250>
 800495e:	ee18 3a10 	vmov	r3, s16
 8004962:	4652      	mov	r2, sl
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	f43f af09 	beq.w	8004782 <_printf_float+0xc2>
 8004970:	f04f 0900 	mov.w	r9, #0
 8004974:	f104 0a1a 	add.w	sl, r4, #26
 8004978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497a:	425b      	negs	r3, r3
 800497c:	454b      	cmp	r3, r9
 800497e:	dc01      	bgt.n	8004984 <_printf_float+0x2c4>
 8004980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004982:	e792      	b.n	80048aa <_printf_float+0x1ea>
 8004984:	2301      	movs	r3, #1
 8004986:	4652      	mov	r2, sl
 8004988:	4631      	mov	r1, r6
 800498a:	4628      	mov	r0, r5
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	f43f aef7 	beq.w	8004782 <_printf_float+0xc2>
 8004994:	f109 0901 	add.w	r9, r9, #1
 8004998:	e7ee      	b.n	8004978 <_printf_float+0x2b8>
 800499a:	bf00      	nop
 800499c:	7fefffff 	.word	0x7fefffff
 80049a0:	08007454 	.word	0x08007454
 80049a4:	08007458 	.word	0x08007458
 80049a8:	08007460 	.word	0x08007460
 80049ac:	0800745c 	.word	0x0800745c
 80049b0:	08007464 	.word	0x08007464
 80049b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b8:	429a      	cmp	r2, r3
 80049ba:	bfa8      	it	ge
 80049bc:	461a      	movge	r2, r3
 80049be:	2a00      	cmp	r2, #0
 80049c0:	4691      	mov	r9, r2
 80049c2:	dc37      	bgt.n	8004a34 <_printf_float+0x374>
 80049c4:	f04f 0b00 	mov.w	fp, #0
 80049c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049cc:	f104 021a 	add.w	r2, r4, #26
 80049d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049d2:	9305      	str	r3, [sp, #20]
 80049d4:	eba3 0309 	sub.w	r3, r3, r9
 80049d8:	455b      	cmp	r3, fp
 80049da:	dc33      	bgt.n	8004a44 <_printf_float+0x384>
 80049dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e0:	429a      	cmp	r2, r3
 80049e2:	db3b      	blt.n	8004a5c <_printf_float+0x39c>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07da      	lsls	r2, r3, #31
 80049e8:	d438      	bmi.n	8004a5c <_printf_float+0x39c>
 80049ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ec:	9a05      	ldr	r2, [sp, #20]
 80049ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049f0:	1a9a      	subs	r2, r3, r2
 80049f2:	eba3 0901 	sub.w	r9, r3, r1
 80049f6:	4591      	cmp	r9, r2
 80049f8:	bfa8      	it	ge
 80049fa:	4691      	movge	r9, r2
 80049fc:	f1b9 0f00 	cmp.w	r9, #0
 8004a00:	dc35      	bgt.n	8004a6e <_printf_float+0x3ae>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0a:	f104 0a1a 	add.w	sl, r4, #26
 8004a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	eba3 0309 	sub.w	r3, r3, r9
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	f77f af79 	ble.w	8004910 <_printf_float+0x250>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f aeaa 	beq.w	8004782 <_printf_float+0xc2>
 8004a2e:	f108 0801 	add.w	r8, r8, #1
 8004a32:	e7ec      	b.n	8004a0e <_printf_float+0x34e>
 8004a34:	4613      	mov	r3, r2
 8004a36:	4631      	mov	r1, r6
 8004a38:	4642      	mov	r2, r8
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d1c0      	bne.n	80049c4 <_printf_float+0x304>
 8004a42:	e69e      	b.n	8004782 <_printf_float+0xc2>
 8004a44:	2301      	movs	r3, #1
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	9205      	str	r2, [sp, #20]
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f ae97 	beq.w	8004782 <_printf_float+0xc2>
 8004a54:	9a05      	ldr	r2, [sp, #20]
 8004a56:	f10b 0b01 	add.w	fp, fp, #1
 8004a5a:	e7b9      	b.n	80049d0 <_printf_float+0x310>
 8004a5c:	ee18 3a10 	vmov	r3, s16
 8004a60:	4652      	mov	r2, sl
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d1be      	bne.n	80049ea <_printf_float+0x32a>
 8004a6c:	e689      	b.n	8004782 <_printf_float+0xc2>
 8004a6e:	9a05      	ldr	r2, [sp, #20]
 8004a70:	464b      	mov	r3, r9
 8004a72:	4442      	add	r2, r8
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d1c1      	bne.n	8004a02 <_printf_float+0x342>
 8004a7e:	e680      	b.n	8004782 <_printf_float+0xc2>
 8004a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a82:	2a01      	cmp	r2, #1
 8004a84:	dc01      	bgt.n	8004a8a <_printf_float+0x3ca>
 8004a86:	07db      	lsls	r3, r3, #31
 8004a88:	d538      	bpl.n	8004afc <_printf_float+0x43c>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	f43f ae74 	beq.w	8004782 <_printf_float+0xc2>
 8004a9a:	ee18 3a10 	vmov	r3, s16
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae6b 	beq.w	8004782 <_printf_float+0xc2>
 8004aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f7fc f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ab8:	b9d8      	cbnz	r0, 8004af2 <_printf_float+0x432>
 8004aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004abc:	f108 0201 	add.w	r2, r8, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d10e      	bne.n	8004aea <_printf_float+0x42a>
 8004acc:	e659      	b.n	8004782 <_printf_float+0xc2>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f43f ae52 	beq.w	8004782 <_printf_float+0xc2>
 8004ade:	f108 0801 	add.w	r8, r8, #1
 8004ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	4543      	cmp	r3, r8
 8004ae8:	dcf1      	bgt.n	8004ace <_printf_float+0x40e>
 8004aea:	464b      	mov	r3, r9
 8004aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004af0:	e6dc      	b.n	80048ac <_printf_float+0x1ec>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	f104 0a1a 	add.w	sl, r4, #26
 8004afa:	e7f2      	b.n	8004ae2 <_printf_float+0x422>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	e7df      	b.n	8004ac2 <_printf_float+0x402>
 8004b02:	2301      	movs	r3, #1
 8004b04:	464a      	mov	r2, r9
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f ae38 	beq.w	8004782 <_printf_float+0xc2>
 8004b12:	f108 0801 	add.w	r8, r8, #1
 8004b16:	68e3      	ldr	r3, [r4, #12]
 8004b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1a:	1a5b      	subs	r3, r3, r1
 8004b1c:	4543      	cmp	r3, r8
 8004b1e:	dcf0      	bgt.n	8004b02 <_printf_float+0x442>
 8004b20:	e6fa      	b.n	8004918 <_printf_float+0x258>
 8004b22:	f04f 0800 	mov.w	r8, #0
 8004b26:	f104 0919 	add.w	r9, r4, #25
 8004b2a:	e7f4      	b.n	8004b16 <_printf_float+0x456>

08004b2c <_printf_common>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	4616      	mov	r6, r2
 8004b32:	4699      	mov	r9, r3
 8004b34:	688a      	ldr	r2, [r1, #8]
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	bfb8      	it	lt
 8004b40:	4613      	movlt	r3, r2
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b48:	4607      	mov	r7, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_printf_common+0x26>
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	0699      	lsls	r1, r3, #26
 8004b56:	bf42      	ittt	mi
 8004b58:	6833      	ldrmi	r3, [r6, #0]
 8004b5a:	3302      	addmi	r3, #2
 8004b5c:	6033      	strmi	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d106      	bne.n	8004b74 <_printf_common+0x48>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	6832      	ldr	r2, [r6, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dc26      	bgt.n	8004bc2 <_printf_common+0x96>
 8004b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b78:	1e13      	subs	r3, r2, #0
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	bf18      	it	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	0692      	lsls	r2, r2, #26
 8004b82:	d42b      	bmi.n	8004bdc <_printf_common+0xb0>
 8004b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b88:	4649      	mov	r1, r9
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c0      	blx	r8
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d01e      	beq.n	8004bd0 <_printf_common+0xa4>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	68e5      	ldr	r5, [r4, #12]
 8004b96:	6832      	ldr	r2, [r6, #0]
 8004b98:	f003 0306 	and.w	r3, r3, #6
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	bf08      	it	eq
 8004ba0:	1aad      	subeq	r5, r5, r2
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	bf0c      	ite	eq
 8004ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bac:	2500      	movne	r5, #0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfc4      	itt	gt
 8004bb2:	1a9b      	subgt	r3, r3, r2
 8004bb4:	18ed      	addgt	r5, r5, r3
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xc8>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xa8>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xac>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c6      	b.n	8004b6a <_printf_common+0x3e>
 8004bdc:	18e1      	adds	r1, r4, r3
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	2030      	movs	r0, #48	; 0x30
 8004be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be6:	4422      	add	r2, r4
 8004be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	e7c7      	b.n	8004b84 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa4>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x8e>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c10:	2f78      	cmp	r7, #120	; 0x78
 8004c12:	4691      	mov	r9, r2
 8004c14:	4680      	mov	r8, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	469a      	mov	sl, r3
 8004c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	; 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d8 	beq.w	8004dda <_printf_i+0x1d2>
 8004c2a:	2f58      	cmp	r7, #88	; 0x58
 8004c2c:	f000 80a3 	beq.w	8004d76 <_printf_i+0x16e>
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004dc1 	.word	0x08004dc1
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004da3 	.word	0x08004da3
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004de3 	.word	0x08004de3
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004dab 	.word	0x08004dab
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	602a      	str	r2, [r5, #0]
 8004ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0a3      	b.n	8004dfc <_printf_i+0x1f4>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	6829      	ldr	r1, [r5, #0]
 8004cb8:	0606      	lsls	r6, r0, #24
 8004cba:	f101 0304 	add.w	r3, r1, #4
 8004cbe:	d50a      	bpl.n	8004cd6 <_printf_i+0xce>
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	da03      	bge.n	8004cd0 <_printf_i+0xc8>
 8004cc8:	232d      	movs	r3, #45	; 0x2d
 8004cca:	4276      	negs	r6, r6
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	485e      	ldr	r0, [pc, #376]	; (8004e4c <_printf_i+0x244>)
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	e019      	b.n	8004d0a <_printf_i+0x102>
 8004cd6:	680e      	ldr	r6, [r1, #0]
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cde:	bf18      	it	ne
 8004ce0:	b236      	sxthne	r6, r6
 8004ce2:	e7ef      	b.n	8004cc4 <_printf_i+0xbc>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	0601      	lsls	r1, r0, #24
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0xec>
 8004cf0:	681e      	ldr	r6, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0xf2>
 8004cf4:	0646      	lsls	r6, r0, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0xe8>
 8004cf8:	881e      	ldrh	r6, [r3, #0]
 8004cfa:	4854      	ldr	r0, [pc, #336]	; (8004e4c <_printf_i+0x244>)
 8004cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8004cfe:	bf0c      	ite	eq
 8004d00:	2308      	moveq	r3, #8
 8004d02:	230a      	movne	r3, #10
 8004d04:	2100      	movs	r1, #0
 8004d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0a:	6865      	ldr	r5, [r4, #4]
 8004d0c:	60a5      	str	r5, [r4, #8]
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	bfa2      	ittt	ge
 8004d12:	6821      	ldrge	r1, [r4, #0]
 8004d14:	f021 0104 	bicge.w	r1, r1, #4
 8004d18:	6021      	strge	r1, [r4, #0]
 8004d1a:	b90e      	cbnz	r6, 8004d20 <_printf_i+0x118>
 8004d1c:	2d00      	cmp	r5, #0
 8004d1e:	d04d      	beq.n	8004dbc <_printf_i+0x1b4>
 8004d20:	4615      	mov	r5, r2
 8004d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d26:	fb03 6711 	mls	r7, r3, r1, r6
 8004d2a:	5dc7      	ldrb	r7, [r0, r7]
 8004d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d30:	4637      	mov	r7, r6
 8004d32:	42bb      	cmp	r3, r7
 8004d34:	460e      	mov	r6, r1
 8004d36:	d9f4      	bls.n	8004d22 <_printf_i+0x11a>
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d10b      	bne.n	8004d54 <_printf_i+0x14c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07de      	lsls	r6, r3, #31
 8004d40:	d508      	bpl.n	8004d54 <_printf_i+0x14c>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	6861      	ldr	r1, [r4, #4]
 8004d46:	4299      	cmp	r1, r3
 8004d48:	bfde      	ittt	le
 8004d4a:	2330      	movle	r3, #48	; 0x30
 8004d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d54:	1b52      	subs	r2, r2, r5
 8004d56:	6122      	str	r2, [r4, #16]
 8004d58:	f8cd a000 	str.w	sl, [sp]
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	aa03      	add	r2, sp, #12
 8004d60:	4621      	mov	r1, r4
 8004d62:	4640      	mov	r0, r8
 8004d64:	f7ff fee2 	bl	8004b2c <_printf_common>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d14c      	bne.n	8004e06 <_printf_i+0x1fe>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	b004      	add	sp, #16
 8004d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d76:	4835      	ldr	r0, [pc, #212]	; (8004e4c <_printf_i+0x244>)
 8004d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d7c:	6829      	ldr	r1, [r5, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d84:	6029      	str	r1, [r5, #0]
 8004d86:	061d      	lsls	r5, r3, #24
 8004d88:	d514      	bpl.n	8004db4 <_printf_i+0x1ac>
 8004d8a:	07df      	lsls	r7, r3, #31
 8004d8c:	bf44      	itt	mi
 8004d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d92:	6023      	strmi	r3, [r4, #0]
 8004d94:	b91e      	cbnz	r6, 8004d9e <_printf_i+0x196>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f023 0320 	bic.w	r3, r3, #32
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	2310      	movs	r3, #16
 8004da0:	e7b0      	b.n	8004d04 <_printf_i+0xfc>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	2378      	movs	r3, #120	; 0x78
 8004dac:	4828      	ldr	r0, [pc, #160]	; (8004e50 <_printf_i+0x248>)
 8004dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db2:	e7e3      	b.n	8004d7c <_printf_i+0x174>
 8004db4:	0659      	lsls	r1, r3, #25
 8004db6:	bf48      	it	mi
 8004db8:	b2b6      	uxthmi	r6, r6
 8004dba:	e7e6      	b.n	8004d8a <_printf_i+0x182>
 8004dbc:	4615      	mov	r5, r2
 8004dbe:	e7bb      	b.n	8004d38 <_printf_i+0x130>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	6826      	ldr	r6, [r4, #0]
 8004dc4:	6961      	ldr	r1, [r4, #20]
 8004dc6:	1d18      	adds	r0, r3, #4
 8004dc8:	6028      	str	r0, [r5, #0]
 8004dca:	0635      	lsls	r5, r6, #24
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	d501      	bpl.n	8004dd4 <_printf_i+0x1cc>
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <_printf_i+0x1d2>
 8004dd4:	0670      	lsls	r0, r6, #25
 8004dd6:	d5fb      	bpl.n	8004dd0 <_printf_i+0x1c8>
 8004dd8:	8019      	strh	r1, [r3, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	4615      	mov	r5, r2
 8004de0:	e7ba      	b.n	8004d58 <_printf_i+0x150>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	602a      	str	r2, [r5, #0]
 8004de8:	681d      	ldr	r5, [r3, #0]
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	2100      	movs	r1, #0
 8004dee:	4628      	mov	r0, r5
 8004df0:	f7fb f9fe 	bl	80001f0 <memchr>
 8004df4:	b108      	cbz	r0, 8004dfa <_printf_i+0x1f2>
 8004df6:	1b40      	subs	r0, r0, r5
 8004df8:	6060      	str	r0, [r4, #4]
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e04:	e7a8      	b.n	8004d58 <_printf_i+0x150>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	47d0      	blx	sl
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0ab      	beq.n	8004d6c <_printf_i+0x164>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	079b      	lsls	r3, r3, #30
 8004e18:	d413      	bmi.n	8004e42 <_printf_i+0x23a>
 8004e1a:	68e0      	ldr	r0, [r4, #12]
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	4298      	cmp	r0, r3
 8004e20:	bfb8      	it	lt
 8004e22:	4618      	movlt	r0, r3
 8004e24:	e7a4      	b.n	8004d70 <_printf_i+0x168>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4632      	mov	r2, r6
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	47d0      	blx	sl
 8004e30:	3001      	adds	r0, #1
 8004e32:	d09b      	beq.n	8004d6c <_printf_i+0x164>
 8004e34:	3501      	adds	r5, #1
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	9903      	ldr	r1, [sp, #12]
 8004e3a:	1a5b      	subs	r3, r3, r1
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dcf2      	bgt.n	8004e26 <_printf_i+0x21e>
 8004e40:	e7eb      	b.n	8004e1a <_printf_i+0x212>
 8004e42:	2500      	movs	r5, #0
 8004e44:	f104 0619 	add.w	r6, r4, #25
 8004e48:	e7f5      	b.n	8004e36 <_printf_i+0x22e>
 8004e4a:	bf00      	nop
 8004e4c:	08007466 	.word	0x08007466
 8004e50:	08007477 	.word	0x08007477

08004e54 <siprintf>:
 8004e54:	b40e      	push	{r1, r2, r3}
 8004e56:	b500      	push	{lr}
 8004e58:	b09c      	sub	sp, #112	; 0x70
 8004e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e5c:	9002      	str	r0, [sp, #8]
 8004e5e:	9006      	str	r0, [sp, #24]
 8004e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e64:	4809      	ldr	r0, [pc, #36]	; (8004e8c <siprintf+0x38>)
 8004e66:	9107      	str	r1, [sp, #28]
 8004e68:	9104      	str	r1, [sp, #16]
 8004e6a:	4909      	ldr	r1, [pc, #36]	; (8004e90 <siprintf+0x3c>)
 8004e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	a902      	add	r1, sp, #8
 8004e78:	f001 fb8c 	bl	8006594 <_svfiprintf_r>
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	b01c      	add	sp, #112	; 0x70
 8004e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e88:	b003      	add	sp, #12
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c
 8004e90:	ffff0208 	.word	0xffff0208

08004e94 <strcat>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4602      	mov	r2, r0
 8004e98:	7814      	ldrb	r4, [r2, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	3201      	adds	r2, #1
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d1fa      	bne.n	8004e98 <strcat+0x4>
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d1f9      	bne.n	8004ea4 <strcat+0x10>
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <strcpy>:
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb8:	f803 2b01 	strb.w	r2, [r3], #1
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <strcpy+0x2>
 8004ec0:	4770      	bx	lr

08004ec2 <quorem>:
 8004ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec6:	6903      	ldr	r3, [r0, #16]
 8004ec8:	690c      	ldr	r4, [r1, #16]
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	4607      	mov	r7, r0
 8004ece:	f2c0 8081 	blt.w	8004fd4 <quorem+0x112>
 8004ed2:	3c01      	subs	r4, #1
 8004ed4:	f101 0814 	add.w	r8, r1, #20
 8004ed8:	f100 0514 	add.w	r5, r0, #20
 8004edc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eea:	3301      	adds	r3, #1
 8004eec:	429a      	cmp	r2, r3
 8004eee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ef6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004efa:	d331      	bcc.n	8004f60 <quorem+0x9e>
 8004efc:	f04f 0e00 	mov.w	lr, #0
 8004f00:	4640      	mov	r0, r8
 8004f02:	46ac      	mov	ip, r5
 8004f04:	46f2      	mov	sl, lr
 8004f06:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f0a:	b293      	uxth	r3, r2
 8004f0c:	fb06 e303 	mla	r3, r6, r3, lr
 8004f10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1a:	f8dc a000 	ldr.w	sl, [ip]
 8004f1e:	0c12      	lsrs	r2, r2, #16
 8004f20:	fa13 f38a 	uxtah	r3, r3, sl
 8004f24:	fb06 e202 	mla	r2, r6, r2, lr
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	9b00      	ldr	r3, [sp, #0]
 8004f2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f30:	b292      	uxth	r2, r2
 8004f32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f3a:	f8bd 3000 	ldrh.w	r3, [sp]
 8004f3e:	4581      	cmp	r9, r0
 8004f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f44:	f84c 3b04 	str.w	r3, [ip], #4
 8004f48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f4c:	d2db      	bcs.n	8004f06 <quorem+0x44>
 8004f4e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f52:	b92b      	cbnz	r3, 8004f60 <quorem+0x9e>
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	429d      	cmp	r5, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	d32e      	bcc.n	8004fbc <quorem+0xfa>
 8004f5e:	613c      	str	r4, [r7, #16]
 8004f60:	4638      	mov	r0, r7
 8004f62:	f001 f8c3 	bl	80060ec <__mcmp>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	db24      	blt.n	8004fb4 <quorem+0xf2>
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f04f 0c00 	mov.w	ip, #0
 8004f72:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f76:	f8d0 e000 	ldr.w	lr, [r0]
 8004f7a:	b293      	uxth	r3, r2
 8004f7c:	ebac 0303 	sub.w	r3, ip, r3
 8004f80:	0c12      	lsrs	r2, r2, #16
 8004f82:	fa13 f38e 	uxtah	r3, r3, lr
 8004f86:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f94:	45c1      	cmp	r9, r8
 8004f96:	f840 3b04 	str.w	r3, [r0], #4
 8004f9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f9e:	d2e8      	bcs.n	8004f72 <quorem+0xb0>
 8004fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa8:	b922      	cbnz	r2, 8004fb4 <quorem+0xf2>
 8004faa:	3b04      	subs	r3, #4
 8004fac:	429d      	cmp	r5, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	d30a      	bcc.n	8004fc8 <quorem+0x106>
 8004fb2:	613c      	str	r4, [r7, #16]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	b003      	add	sp, #12
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d1cc      	bne.n	8004f5e <quorem+0x9c>
 8004fc4:	3c01      	subs	r4, #1
 8004fc6:	e7c7      	b.n	8004f58 <quorem+0x96>
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d1f0      	bne.n	8004fb2 <quorem+0xf0>
 8004fd0:	3c01      	subs	r4, #1
 8004fd2:	e7eb      	b.n	8004fac <quorem+0xea>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e7ee      	b.n	8004fb6 <quorem+0xf4>

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	ed2d 8b04 	vpush	{d8-d9}
 8004fe0:	ec57 6b10 	vmov	r6, r7, d0
 8004fe4:	b093      	sub	sp, #76	; 0x4c
 8004fe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fec:	9106      	str	r1, [sp, #24]
 8004fee:	ee10 aa10 	vmov	sl, s0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ff8:	46bb      	mov	fp, r7
 8004ffa:	b975      	cbnz	r5, 800501a <_dtoa_r+0x42>
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f000 fddd 	bl	8005bbc <malloc>
 8005002:	4602      	mov	r2, r0
 8005004:	6260      	str	r0, [r4, #36]	; 0x24
 8005006:	b920      	cbnz	r0, 8005012 <_dtoa_r+0x3a>
 8005008:	4ba7      	ldr	r3, [pc, #668]	; (80052a8 <_dtoa_r+0x2d0>)
 800500a:	21ea      	movs	r1, #234	; 0xea
 800500c:	48a7      	ldr	r0, [pc, #668]	; (80052ac <_dtoa_r+0x2d4>)
 800500e:	f001 fbd1 	bl	80067b4 <__assert_func>
 8005012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005016:	6005      	str	r5, [r0, #0]
 8005018:	60c5      	str	r5, [r0, #12]
 800501a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	b151      	cbz	r1, 8005036 <_dtoa_r+0x5e>
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	604a      	str	r2, [r1, #4]
 8005024:	2301      	movs	r3, #1
 8005026:	4093      	lsls	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 fe1c 	bl	8005c68 <_Bfree>
 8005030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	1e3b      	subs	r3, r7, #0
 8005038:	bfaa      	itet	ge
 800503a:	2300      	movge	r3, #0
 800503c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005040:	f8c8 3000 	strge.w	r3, [r8]
 8005044:	4b9a      	ldr	r3, [pc, #616]	; (80052b0 <_dtoa_r+0x2d8>)
 8005046:	bfbc      	itt	lt
 8005048:	2201      	movlt	r2, #1
 800504a:	f8c8 2000 	strlt.w	r2, [r8]
 800504e:	ea33 030b 	bics.w	r3, r3, fp
 8005052:	d11b      	bne.n	800508c <_dtoa_r+0xb4>
 8005054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005056:	f242 730f 	movw	r3, #9999	; 0x270f
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005060:	4333      	orrs	r3, r6
 8005062:	f000 8592 	beq.w	8005b8a <_dtoa_r+0xbb2>
 8005066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005068:	b963      	cbnz	r3, 8005084 <_dtoa_r+0xac>
 800506a:	4b92      	ldr	r3, [pc, #584]	; (80052b4 <_dtoa_r+0x2dc>)
 800506c:	e022      	b.n	80050b4 <_dtoa_r+0xdc>
 800506e:	4b92      	ldr	r3, [pc, #584]	; (80052b8 <_dtoa_r+0x2e0>)
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	3308      	adds	r3, #8
 8005074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	9801      	ldr	r0, [sp, #4]
 800507a:	b013      	add	sp, #76	; 0x4c
 800507c:	ecbd 8b04 	vpop	{d8-d9}
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	4b8b      	ldr	r3, [pc, #556]	; (80052b4 <_dtoa_r+0x2dc>)
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	3303      	adds	r3, #3
 800508a:	e7f3      	b.n	8005074 <_dtoa_r+0x9c>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	f7fb fd20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005098:	ec4b ab19 	vmov	d9, sl, fp
 800509c:	4680      	mov	r8, r0
 800509e:	b158      	cbz	r0, 80050b8 <_dtoa_r+0xe0>
 80050a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050a2:	2301      	movs	r3, #1
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 856b 	beq.w	8005b84 <_dtoa_r+0xbac>
 80050ae:	4883      	ldr	r0, [pc, #524]	; (80052bc <_dtoa_r+0x2e4>)
 80050b0:	6018      	str	r0, [r3, #0]
 80050b2:	1e43      	subs	r3, r0, #1
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	e7df      	b.n	8005078 <_dtoa_r+0xa0>
 80050b8:	ec4b ab10 	vmov	d0, sl, fp
 80050bc:	aa10      	add	r2, sp, #64	; 0x40
 80050be:	a911      	add	r1, sp, #68	; 0x44
 80050c0:	4620      	mov	r0, r4
 80050c2:	f001 f8b9 	bl	8006238 <__d2b>
 80050c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80050ca:	ee08 0a10 	vmov	s16, r0
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	f000 8084 	beq.w	80051dc <_dtoa_r+0x204>
 80050d4:	ee19 3a90 	vmov	r3, s19
 80050d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80050e0:	4656      	mov	r6, sl
 80050e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80050e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80050ee:	4b74      	ldr	r3, [pc, #464]	; (80052c0 <_dtoa_r+0x2e8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb f8cf 	bl	8000298 <__aeabi_dsub>
 80050fa:	a365      	add	r3, pc, #404	; (adr r3, 8005290 <_dtoa_r+0x2b8>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f7fb fa82 	bl	8000608 <__aeabi_dmul>
 8005104:	a364      	add	r3, pc, #400	; (adr r3, 8005298 <_dtoa_r+0x2c0>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f8c7 	bl	800029c <__adddf3>
 800510e:	4606      	mov	r6, r0
 8005110:	4628      	mov	r0, r5
 8005112:	460f      	mov	r7, r1
 8005114:	f7fb fa0e 	bl	8000534 <__aeabi_i2d>
 8005118:	a361      	add	r3, pc, #388	; (adr r3, 80052a0 <_dtoa_r+0x2c8>)
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f7fb fa73 	bl	8000608 <__aeabi_dmul>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4630      	mov	r0, r6
 8005128:	4639      	mov	r1, r7
 800512a:	f7fb f8b7 	bl	800029c <__adddf3>
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	f7fb fd19 	bl	8000b68 <__aeabi_d2iz>
 8005136:	2200      	movs	r2, #0
 8005138:	9000      	str	r0, [sp, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	4630      	mov	r0, r6
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb fcd4 	bl	8000aec <__aeabi_dcmplt>
 8005144:	b150      	cbz	r0, 800515c <_dtoa_r+0x184>
 8005146:	9800      	ldr	r0, [sp, #0]
 8005148:	f7fb f9f4 	bl	8000534 <__aeabi_i2d>
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	f7fb fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005154:	b910      	cbnz	r0, 800515c <_dtoa_r+0x184>
 8005156:	9b00      	ldr	r3, [sp, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	9b00      	ldr	r3, [sp, #0]
 800515e:	2b16      	cmp	r3, #22
 8005160:	d85a      	bhi.n	8005218 <_dtoa_r+0x240>
 8005162:	9a00      	ldr	r2, [sp, #0]
 8005164:	4b57      	ldr	r3, [pc, #348]	; (80052c4 <_dtoa_r+0x2ec>)
 8005166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	ec51 0b19 	vmov	r0, r1, d9
 8005172:	f7fb fcbb 	bl	8000aec <__aeabi_dcmplt>
 8005176:	2800      	cmp	r0, #0
 8005178:	d050      	beq.n	800521c <_dtoa_r+0x244>
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	3b01      	subs	r3, #1
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	930b      	str	r3, [sp, #44]	; 0x2c
 8005184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005186:	1b5d      	subs	r5, r3, r5
 8005188:	1e6b      	subs	r3, r5, #1
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	bf45      	ittet	mi
 800518e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005192:	9304      	strmi	r3, [sp, #16]
 8005194:	2300      	movpl	r3, #0
 8005196:	2300      	movmi	r3, #0
 8005198:	bf4c      	ite	mi
 800519a:	9305      	strmi	r3, [sp, #20]
 800519c:	9304      	strpl	r3, [sp, #16]
 800519e:	9b00      	ldr	r3, [sp, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db3d      	blt.n	8005220 <_dtoa_r+0x248>
 80051a4:	9b05      	ldr	r3, [sp, #20]
 80051a6:	9a00      	ldr	r2, [sp, #0]
 80051a8:	920a      	str	r2, [sp, #40]	; 0x28
 80051aa:	4413      	add	r3, r2
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9307      	str	r3, [sp, #28]
 80051b2:	9b06      	ldr	r3, [sp, #24]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	f200 8089 	bhi.w	80052cc <_dtoa_r+0x2f4>
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	bfc4      	itt	gt
 80051be:	3b04      	subgt	r3, #4
 80051c0:	9306      	strgt	r3, [sp, #24]
 80051c2:	9b06      	ldr	r3, [sp, #24]
 80051c4:	f1a3 0302 	sub.w	r3, r3, #2
 80051c8:	bfcc      	ite	gt
 80051ca:	2500      	movgt	r5, #0
 80051cc:	2501      	movle	r5, #1
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	f200 8087 	bhi.w	80052e2 <_dtoa_r+0x30a>
 80051d4:	e8df f003 	tbb	[pc, r3]
 80051d8:	59383a2d 	.word	0x59383a2d
 80051dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051e0:	441d      	add	r5, r3
 80051e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	bfc1      	itttt	gt
 80051ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80051f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80051f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051fa:	bfda      	itte	le
 80051fc:	f1c3 0320 	rsble	r3, r3, #32
 8005200:	fa06 f003 	lslle.w	r0, r6, r3
 8005204:	4318      	orrgt	r0, r3
 8005206:	f7fb f985 	bl	8000514 <__aeabi_ui2d>
 800520a:	2301      	movs	r3, #1
 800520c:	4606      	mov	r6, r0
 800520e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005212:	3d01      	subs	r5, #1
 8005214:	930e      	str	r3, [sp, #56]	; 0x38
 8005216:	e76a      	b.n	80050ee <_dtoa_r+0x116>
 8005218:	2301      	movs	r3, #1
 800521a:	e7b2      	b.n	8005182 <_dtoa_r+0x1aa>
 800521c:	900b      	str	r0, [sp, #44]	; 0x2c
 800521e:	e7b1      	b.n	8005184 <_dtoa_r+0x1ac>
 8005220:	9b04      	ldr	r3, [sp, #16]
 8005222:	9a00      	ldr	r2, [sp, #0]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	4253      	negs	r3, r2
 800522a:	9307      	str	r3, [sp, #28]
 800522c:	2300      	movs	r3, #0
 800522e:	930a      	str	r3, [sp, #40]	; 0x28
 8005230:	e7bf      	b.n	80051b2 <_dtoa_r+0x1da>
 8005232:	2300      	movs	r3, #0
 8005234:	9308      	str	r3, [sp, #32]
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc55      	bgt.n	80052e8 <_dtoa_r+0x310>
 800523c:	2301      	movs	r3, #1
 800523e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005242:	461a      	mov	r2, r3
 8005244:	9209      	str	r2, [sp, #36]	; 0x24
 8005246:	e00c      	b.n	8005262 <_dtoa_r+0x28a>
 8005248:	2301      	movs	r3, #1
 800524a:	e7f3      	b.n	8005234 <_dtoa_r+0x25c>
 800524c:	2300      	movs	r3, #0
 800524e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005250:	9308      	str	r3, [sp, #32]
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	4413      	add	r3, r2
 8005256:	9302      	str	r3, [sp, #8]
 8005258:	3301      	adds	r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	9303      	str	r3, [sp, #12]
 800525e:	bfb8      	it	lt
 8005260:	2301      	movlt	r3, #1
 8005262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005264:	2200      	movs	r2, #0
 8005266:	6042      	str	r2, [r0, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	f102 0614 	add.w	r6, r2, #20
 800526e:	429e      	cmp	r6, r3
 8005270:	6841      	ldr	r1, [r0, #4]
 8005272:	d93d      	bls.n	80052f0 <_dtoa_r+0x318>
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fcb7 	bl	8005be8 <_Balloc>
 800527a:	9001      	str	r0, [sp, #4]
 800527c:	2800      	cmp	r0, #0
 800527e:	d13b      	bne.n	80052f8 <_dtoa_r+0x320>
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <_dtoa_r+0x2f0>)
 8005282:	4602      	mov	r2, r0
 8005284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005288:	e6c0      	b.n	800500c <_dtoa_r+0x34>
 800528a:	2301      	movs	r3, #1
 800528c:	e7df      	b.n	800524e <_dtoa_r+0x276>
 800528e:	bf00      	nop
 8005290:	636f4361 	.word	0x636f4361
 8005294:	3fd287a7 	.word	0x3fd287a7
 8005298:	8b60c8b3 	.word	0x8b60c8b3
 800529c:	3fc68a28 	.word	0x3fc68a28
 80052a0:	509f79fb 	.word	0x509f79fb
 80052a4:	3fd34413 	.word	0x3fd34413
 80052a8:	08007495 	.word	0x08007495
 80052ac:	080074ac 	.word	0x080074ac
 80052b0:	7ff00000 	.word	0x7ff00000
 80052b4:	08007491 	.word	0x08007491
 80052b8:	08007488 	.word	0x08007488
 80052bc:	08007465 	.word	0x08007465
 80052c0:	3ff80000 	.word	0x3ff80000
 80052c4:	080075a0 	.word	0x080075a0
 80052c8:	08007507 	.word	0x08007507
 80052cc:	2501      	movs	r5, #1
 80052ce:	2300      	movs	r3, #0
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	9508      	str	r5, [sp, #32]
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	2312      	movs	r3, #18
 80052e0:	e7b0      	b.n	8005244 <_dtoa_r+0x26c>
 80052e2:	2301      	movs	r3, #1
 80052e4:	9308      	str	r3, [sp, #32]
 80052e6:	e7f5      	b.n	80052d4 <_dtoa_r+0x2fc>
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052ee:	e7b8      	b.n	8005262 <_dtoa_r+0x28a>
 80052f0:	3101      	adds	r1, #1
 80052f2:	6041      	str	r1, [r0, #4]
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	e7b8      	b.n	800526a <_dtoa_r+0x292>
 80052f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052fa:	9a01      	ldr	r2, [sp, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	2b0e      	cmp	r3, #14
 8005302:	f200 809d 	bhi.w	8005440 <_dtoa_r+0x468>
 8005306:	2d00      	cmp	r5, #0
 8005308:	f000 809a 	beq.w	8005440 <_dtoa_r+0x468>
 800530c:	9b00      	ldr	r3, [sp, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd32      	ble.n	8005378 <_dtoa_r+0x3a0>
 8005312:	4ab7      	ldr	r2, [pc, #732]	; (80055f0 <_dtoa_r+0x618>)
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800531c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005320:	9b00      	ldr	r3, [sp, #0]
 8005322:	05d8      	lsls	r0, r3, #23
 8005324:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005328:	d516      	bpl.n	8005358 <_dtoa_r+0x380>
 800532a:	4bb2      	ldr	r3, [pc, #712]	; (80055f4 <_dtoa_r+0x61c>)
 800532c:	ec51 0b19 	vmov	r0, r1, d9
 8005330:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005334:	f7fb fa92 	bl	800085c <__aeabi_ddiv>
 8005338:	f007 070f 	and.w	r7, r7, #15
 800533c:	4682      	mov	sl, r0
 800533e:	468b      	mov	fp, r1
 8005340:	2503      	movs	r5, #3
 8005342:	4eac      	ldr	r6, [pc, #688]	; (80055f4 <_dtoa_r+0x61c>)
 8005344:	b957      	cbnz	r7, 800535c <_dtoa_r+0x384>
 8005346:	4642      	mov	r2, r8
 8005348:	464b      	mov	r3, r9
 800534a:	4650      	mov	r0, sl
 800534c:	4659      	mov	r1, fp
 800534e:	f7fb fa85 	bl	800085c <__aeabi_ddiv>
 8005352:	4682      	mov	sl, r0
 8005354:	468b      	mov	fp, r1
 8005356:	e028      	b.n	80053aa <_dtoa_r+0x3d2>
 8005358:	2502      	movs	r5, #2
 800535a:	e7f2      	b.n	8005342 <_dtoa_r+0x36a>
 800535c:	07f9      	lsls	r1, r7, #31
 800535e:	d508      	bpl.n	8005372 <_dtoa_r+0x39a>
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005368:	f7fb f94e 	bl	8000608 <__aeabi_dmul>
 800536c:	3501      	adds	r5, #1
 800536e:	4680      	mov	r8, r0
 8005370:	4689      	mov	r9, r1
 8005372:	107f      	asrs	r7, r7, #1
 8005374:	3608      	adds	r6, #8
 8005376:	e7e5      	b.n	8005344 <_dtoa_r+0x36c>
 8005378:	f000 809b 	beq.w	80054b2 <_dtoa_r+0x4da>
 800537c:	9b00      	ldr	r3, [sp, #0]
 800537e:	4f9d      	ldr	r7, [pc, #628]	; (80055f4 <_dtoa_r+0x61c>)
 8005380:	425e      	negs	r6, r3
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <_dtoa_r+0x618>)
 8005384:	f006 020f 	and.w	r2, r6, #15
 8005388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	ec51 0b19 	vmov	r0, r1, d9
 8005394:	f7fb f938 	bl	8000608 <__aeabi_dmul>
 8005398:	1136      	asrs	r6, r6, #4
 800539a:	4682      	mov	sl, r0
 800539c:	468b      	mov	fp, r1
 800539e:	2300      	movs	r3, #0
 80053a0:	2502      	movs	r5, #2
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	d17a      	bne.n	800549c <_dtoa_r+0x4c4>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d3      	bne.n	8005352 <_dtoa_r+0x37a>
 80053aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8082 	beq.w	80054b6 <_dtoa_r+0x4de>
 80053b2:	4b91      	ldr	r3, [pc, #580]	; (80055f8 <_dtoa_r+0x620>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	4650      	mov	r0, sl
 80053b8:	4659      	mov	r1, fp
 80053ba:	f7fb fb97 	bl	8000aec <__aeabi_dcmplt>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d079      	beq.n	80054b6 <_dtoa_r+0x4de>
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d076      	beq.n	80054b6 <_dtoa_r+0x4de>
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dd36      	ble.n	800543c <_dtoa_r+0x464>
 80053ce:	9b00      	ldr	r3, [sp, #0]
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	1e5f      	subs	r7, r3, #1
 80053d6:	2200      	movs	r2, #0
 80053d8:	4b88      	ldr	r3, [pc, #544]	; (80055fc <_dtoa_r+0x624>)
 80053da:	f7fb f915 	bl	8000608 <__aeabi_dmul>
 80053de:	9e02      	ldr	r6, [sp, #8]
 80053e0:	4682      	mov	sl, r0
 80053e2:	468b      	mov	fp, r1
 80053e4:	3501      	adds	r5, #1
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fb f8a4 	bl	8000534 <__aeabi_i2d>
 80053ec:	4652      	mov	r2, sl
 80053ee:	465b      	mov	r3, fp
 80053f0:	f7fb f90a 	bl	8000608 <__aeabi_dmul>
 80053f4:	4b82      	ldr	r3, [pc, #520]	; (8005600 <_dtoa_r+0x628>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	f7fa ff50 	bl	800029c <__adddf3>
 80053fc:	46d0      	mov	r8, sl
 80053fe:	46d9      	mov	r9, fp
 8005400:	4682      	mov	sl, r0
 8005402:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005406:	2e00      	cmp	r6, #0
 8005408:	d158      	bne.n	80054bc <_dtoa_r+0x4e4>
 800540a:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <_dtoa_r+0x62c>)
 800540c:	2200      	movs	r2, #0
 800540e:	4640      	mov	r0, r8
 8005410:	4649      	mov	r1, r9
 8005412:	f7fa ff41 	bl	8000298 <__aeabi_dsub>
 8005416:	4652      	mov	r2, sl
 8005418:	465b      	mov	r3, fp
 800541a:	4680      	mov	r8, r0
 800541c:	4689      	mov	r9, r1
 800541e:	f7fb fb83 	bl	8000b28 <__aeabi_dcmpgt>
 8005422:	2800      	cmp	r0, #0
 8005424:	f040 8295 	bne.w	8005952 <_dtoa_r+0x97a>
 8005428:	4652      	mov	r2, sl
 800542a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800542e:	4640      	mov	r0, r8
 8005430:	4649      	mov	r1, r9
 8005432:	f7fb fb5b 	bl	8000aec <__aeabi_dcmplt>
 8005436:	2800      	cmp	r0, #0
 8005438:	f040 8289 	bne.w	800594e <_dtoa_r+0x976>
 800543c:	ec5b ab19 	vmov	sl, fp, d9
 8005440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005442:	2b00      	cmp	r3, #0
 8005444:	f2c0 8148 	blt.w	80056d8 <_dtoa_r+0x700>
 8005448:	9a00      	ldr	r2, [sp, #0]
 800544a:	2a0e      	cmp	r2, #14
 800544c:	f300 8144 	bgt.w	80056d8 <_dtoa_r+0x700>
 8005450:	4b67      	ldr	r3, [pc, #412]	; (80055f0 <_dtoa_r+0x618>)
 8005452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005456:	e9d3 8900 	ldrd	r8, r9, [r3]
 800545a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	f280 80d5 	bge.w	800560c <_dtoa_r+0x634>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f300 80d1 	bgt.w	800560c <_dtoa_r+0x634>
 800546a:	f040 826f 	bne.w	800594c <_dtoa_r+0x974>
 800546e:	4b65      	ldr	r3, [pc, #404]	; (8005604 <_dtoa_r+0x62c>)
 8005470:	2200      	movs	r2, #0
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	f7fb f8c7 	bl	8000608 <__aeabi_dmul>
 800547a:	4652      	mov	r2, sl
 800547c:	465b      	mov	r3, fp
 800547e:	f7fb fb49 	bl	8000b14 <__aeabi_dcmpge>
 8005482:	9e03      	ldr	r6, [sp, #12]
 8005484:	4637      	mov	r7, r6
 8005486:	2800      	cmp	r0, #0
 8005488:	f040 8245 	bne.w	8005916 <_dtoa_r+0x93e>
 800548c:	9d01      	ldr	r5, [sp, #4]
 800548e:	2331      	movs	r3, #49	; 0x31
 8005490:	f805 3b01 	strb.w	r3, [r5], #1
 8005494:	9b00      	ldr	r3, [sp, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	e240      	b.n	800591e <_dtoa_r+0x946>
 800549c:	07f2      	lsls	r2, r6, #31
 800549e:	d505      	bpl.n	80054ac <_dtoa_r+0x4d4>
 80054a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a4:	f7fb f8b0 	bl	8000608 <__aeabi_dmul>
 80054a8:	3501      	adds	r5, #1
 80054aa:	2301      	movs	r3, #1
 80054ac:	1076      	asrs	r6, r6, #1
 80054ae:	3708      	adds	r7, #8
 80054b0:	e777      	b.n	80053a2 <_dtoa_r+0x3ca>
 80054b2:	2502      	movs	r5, #2
 80054b4:	e779      	b.n	80053aa <_dtoa_r+0x3d2>
 80054b6:	9f00      	ldr	r7, [sp, #0]
 80054b8:	9e03      	ldr	r6, [sp, #12]
 80054ba:	e794      	b.n	80053e6 <_dtoa_r+0x40e>
 80054bc:	9901      	ldr	r1, [sp, #4]
 80054be:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <_dtoa_r+0x618>)
 80054c0:	4431      	add	r1, r6
 80054c2:	910d      	str	r1, [sp, #52]	; 0x34
 80054c4:	9908      	ldr	r1, [sp, #32]
 80054c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054ce:	2900      	cmp	r1, #0
 80054d0:	d043      	beq.n	800555a <_dtoa_r+0x582>
 80054d2:	494d      	ldr	r1, [pc, #308]	; (8005608 <_dtoa_r+0x630>)
 80054d4:	2000      	movs	r0, #0
 80054d6:	f7fb f9c1 	bl	800085c <__aeabi_ddiv>
 80054da:	4652      	mov	r2, sl
 80054dc:	465b      	mov	r3, fp
 80054de:	f7fa fedb 	bl	8000298 <__aeabi_dsub>
 80054e2:	9d01      	ldr	r5, [sp, #4]
 80054e4:	4682      	mov	sl, r0
 80054e6:	468b      	mov	fp, r1
 80054e8:	4649      	mov	r1, r9
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7fb fb3c 	bl	8000b68 <__aeabi_d2iz>
 80054f0:	4606      	mov	r6, r0
 80054f2:	f7fb f81f 	bl	8000534 <__aeabi_i2d>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fa fecb 	bl	8000298 <__aeabi_dsub>
 8005502:	3630      	adds	r6, #48	; 0x30
 8005504:	f805 6b01 	strb.w	r6, [r5], #1
 8005508:	4652      	mov	r2, sl
 800550a:	465b      	mov	r3, fp
 800550c:	4680      	mov	r8, r0
 800550e:	4689      	mov	r9, r1
 8005510:	f7fb faec 	bl	8000aec <__aeabi_dcmplt>
 8005514:	2800      	cmp	r0, #0
 8005516:	d163      	bne.n	80055e0 <_dtoa_r+0x608>
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	4936      	ldr	r1, [pc, #216]	; (80055f8 <_dtoa_r+0x620>)
 800551e:	2000      	movs	r0, #0
 8005520:	f7fa feba 	bl	8000298 <__aeabi_dsub>
 8005524:	4652      	mov	r2, sl
 8005526:	465b      	mov	r3, fp
 8005528:	f7fb fae0 	bl	8000aec <__aeabi_dcmplt>
 800552c:	2800      	cmp	r0, #0
 800552e:	f040 80b5 	bne.w	800569c <_dtoa_r+0x6c4>
 8005532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005534:	429d      	cmp	r5, r3
 8005536:	d081      	beq.n	800543c <_dtoa_r+0x464>
 8005538:	4b30      	ldr	r3, [pc, #192]	; (80055fc <_dtoa_r+0x624>)
 800553a:	2200      	movs	r2, #0
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	f7fb f862 	bl	8000608 <__aeabi_dmul>
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <_dtoa_r+0x624>)
 8005546:	4682      	mov	sl, r0
 8005548:	468b      	mov	fp, r1
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	2200      	movs	r2, #0
 8005550:	f7fb f85a 	bl	8000608 <__aeabi_dmul>
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	e7c6      	b.n	80054e8 <_dtoa_r+0x510>
 800555a:	4650      	mov	r0, sl
 800555c:	4659      	mov	r1, fp
 800555e:	f7fb f853 	bl	8000608 <__aeabi_dmul>
 8005562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005564:	9d01      	ldr	r5, [sp, #4]
 8005566:	930f      	str	r3, [sp, #60]	; 0x3c
 8005568:	4682      	mov	sl, r0
 800556a:	468b      	mov	fp, r1
 800556c:	4649      	mov	r1, r9
 800556e:	4640      	mov	r0, r8
 8005570:	f7fb fafa 	bl	8000b68 <__aeabi_d2iz>
 8005574:	4606      	mov	r6, r0
 8005576:	f7fa ffdd 	bl	8000534 <__aeabi_i2d>
 800557a:	3630      	adds	r6, #48	; 0x30
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f7fa fe88 	bl	8000298 <__aeabi_dsub>
 8005588:	f805 6b01 	strb.w	r6, [r5], #1
 800558c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800558e:	429d      	cmp	r5, r3
 8005590:	4680      	mov	r8, r0
 8005592:	4689      	mov	r9, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	d124      	bne.n	80055e4 <_dtoa_r+0x60c>
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <_dtoa_r+0x630>)
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	f7fa fe7c 	bl	800029c <__adddf3>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fb fabc 	bl	8000b28 <__aeabi_dcmpgt>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d173      	bne.n	800569c <_dtoa_r+0x6c4>
 80055b4:	4652      	mov	r2, sl
 80055b6:	465b      	mov	r3, fp
 80055b8:	4913      	ldr	r1, [pc, #76]	; (8005608 <_dtoa_r+0x630>)
 80055ba:	2000      	movs	r0, #0
 80055bc:	f7fa fe6c 	bl	8000298 <__aeabi_dsub>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4640      	mov	r0, r8
 80055c6:	4649      	mov	r1, r9
 80055c8:	f7fb fa90 	bl	8000aec <__aeabi_dcmplt>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f43f af35 	beq.w	800543c <_dtoa_r+0x464>
 80055d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80055d4:	1e6b      	subs	r3, r5, #1
 80055d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d0f8      	beq.n	80055d2 <_dtoa_r+0x5fa>
 80055e0:	9700      	str	r7, [sp, #0]
 80055e2:	e049      	b.n	8005678 <_dtoa_r+0x6a0>
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <_dtoa_r+0x624>)
 80055e6:	f7fb f80f 	bl	8000608 <__aeabi_dmul>
 80055ea:	4680      	mov	r8, r0
 80055ec:	4689      	mov	r9, r1
 80055ee:	e7bd      	b.n	800556c <_dtoa_r+0x594>
 80055f0:	080075a0 	.word	0x080075a0
 80055f4:	08007578 	.word	0x08007578
 80055f8:	3ff00000 	.word	0x3ff00000
 80055fc:	40240000 	.word	0x40240000
 8005600:	401c0000 	.word	0x401c0000
 8005604:	40140000 	.word	0x40140000
 8005608:	3fe00000 	.word	0x3fe00000
 800560c:	9d01      	ldr	r5, [sp, #4]
 800560e:	4656      	mov	r6, sl
 8005610:	465f      	mov	r7, fp
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	4630      	mov	r0, r6
 8005618:	4639      	mov	r1, r7
 800561a:	f7fb f91f 	bl	800085c <__aeabi_ddiv>
 800561e:	f7fb faa3 	bl	8000b68 <__aeabi_d2iz>
 8005622:	4682      	mov	sl, r0
 8005624:	f7fa ff86 	bl	8000534 <__aeabi_i2d>
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	f7fa ffec 	bl	8000608 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800563c:	f7fa fe2c 	bl	8000298 <__aeabi_dsub>
 8005640:	f805 6b01 	strb.w	r6, [r5], #1
 8005644:	9e01      	ldr	r6, [sp, #4]
 8005646:	9f03      	ldr	r7, [sp, #12]
 8005648:	1bae      	subs	r6, r5, r6
 800564a:	42b7      	cmp	r7, r6
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	d135      	bne.n	80056be <_dtoa_r+0x6e6>
 8005652:	f7fa fe23 	bl	800029c <__adddf3>
 8005656:	4642      	mov	r2, r8
 8005658:	464b      	mov	r3, r9
 800565a:	4606      	mov	r6, r0
 800565c:	460f      	mov	r7, r1
 800565e:	f7fb fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8005662:	b9d0      	cbnz	r0, 800569a <_dtoa_r+0x6c2>
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4630      	mov	r0, r6
 800566a:	4639      	mov	r1, r7
 800566c:	f7fb fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8005670:	b110      	cbz	r0, 8005678 <_dtoa_r+0x6a0>
 8005672:	f01a 0f01 	tst.w	sl, #1
 8005676:	d110      	bne.n	800569a <_dtoa_r+0x6c2>
 8005678:	4620      	mov	r0, r4
 800567a:	ee18 1a10 	vmov	r1, s16
 800567e:	f000 faf3 	bl	8005c68 <_Bfree>
 8005682:	2300      	movs	r3, #0
 8005684:	9800      	ldr	r0, [sp, #0]
 8005686:	702b      	strb	r3, [r5, #0]
 8005688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800568a:	3001      	adds	r0, #1
 800568c:	6018      	str	r0, [r3, #0]
 800568e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005690:	2b00      	cmp	r3, #0
 8005692:	f43f acf1 	beq.w	8005078 <_dtoa_r+0xa0>
 8005696:	601d      	str	r5, [r3, #0]
 8005698:	e4ee      	b.n	8005078 <_dtoa_r+0xa0>
 800569a:	9f00      	ldr	r7, [sp, #0]
 800569c:	462b      	mov	r3, r5
 800569e:	461d      	mov	r5, r3
 80056a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a4:	2a39      	cmp	r2, #57	; 0x39
 80056a6:	d106      	bne.n	80056b6 <_dtoa_r+0x6de>
 80056a8:	9a01      	ldr	r2, [sp, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d1f7      	bne.n	800569e <_dtoa_r+0x6c6>
 80056ae:	9901      	ldr	r1, [sp, #4]
 80056b0:	2230      	movs	r2, #48	; 0x30
 80056b2:	3701      	adds	r7, #1
 80056b4:	700a      	strb	r2, [r1, #0]
 80056b6:	781a      	ldrb	r2, [r3, #0]
 80056b8:	3201      	adds	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e790      	b.n	80055e0 <_dtoa_r+0x608>
 80056be:	4ba6      	ldr	r3, [pc, #664]	; (8005958 <_dtoa_r+0x980>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	f7fa ffa1 	bl	8000608 <__aeabi_dmul>
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	f7fb fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d09d      	beq.n	8005612 <_dtoa_r+0x63a>
 80056d6:	e7cf      	b.n	8005678 <_dtoa_r+0x6a0>
 80056d8:	9a08      	ldr	r2, [sp, #32]
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 80d7 	beq.w	800588e <_dtoa_r+0x8b6>
 80056e0:	9a06      	ldr	r2, [sp, #24]
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	f300 80ba 	bgt.w	800585c <_dtoa_r+0x884>
 80056e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	f000 80b2 	beq.w	8005854 <_dtoa_r+0x87c>
 80056f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056f4:	9e07      	ldr	r6, [sp, #28]
 80056f6:	9d04      	ldr	r5, [sp, #16]
 80056f8:	9a04      	ldr	r2, [sp, #16]
 80056fa:	441a      	add	r2, r3
 80056fc:	9204      	str	r2, [sp, #16]
 80056fe:	9a05      	ldr	r2, [sp, #20]
 8005700:	2101      	movs	r1, #1
 8005702:	441a      	add	r2, r3
 8005704:	4620      	mov	r0, r4
 8005706:	9205      	str	r2, [sp, #20]
 8005708:	f000 fb66 	bl	8005dd8 <__i2b>
 800570c:	4607      	mov	r7, r0
 800570e:	2d00      	cmp	r5, #0
 8005710:	dd0c      	ble.n	800572c <_dtoa_r+0x754>
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd09      	ble.n	800572c <_dtoa_r+0x754>
 8005718:	42ab      	cmp	r3, r5
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	bfa8      	it	ge
 800571e:	462b      	movge	r3, r5
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	9204      	str	r2, [sp, #16]
 8005724:	9a05      	ldr	r2, [sp, #20]
 8005726:	1aed      	subs	r5, r5, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	9305      	str	r3, [sp, #20]
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	b31b      	cbz	r3, 8005778 <_dtoa_r+0x7a0>
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80af 	beq.w	8005896 <_dtoa_r+0x8be>
 8005738:	2e00      	cmp	r6, #0
 800573a:	dd13      	ble.n	8005764 <_dtoa_r+0x78c>
 800573c:	4639      	mov	r1, r7
 800573e:	4632      	mov	r2, r6
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fc09 	bl	8005f58 <__pow5mult>
 8005746:	ee18 2a10 	vmov	r2, s16
 800574a:	4601      	mov	r1, r0
 800574c:	4607      	mov	r7, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fb58 	bl	8005e04 <__multiply>
 8005754:	ee18 1a10 	vmov	r1, s16
 8005758:	4680      	mov	r8, r0
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fa84 	bl	8005c68 <_Bfree>
 8005760:	ee08 8a10 	vmov	s16, r8
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	1b9a      	subs	r2, r3, r6
 8005768:	d006      	beq.n	8005778 <_dtoa_r+0x7a0>
 800576a:	ee18 1a10 	vmov	r1, s16
 800576e:	4620      	mov	r0, r4
 8005770:	f000 fbf2 	bl	8005f58 <__pow5mult>
 8005774:	ee08 0a10 	vmov	s16, r0
 8005778:	2101      	movs	r1, #1
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fb2c 	bl	8005dd8 <__i2b>
 8005780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	4606      	mov	r6, r0
 8005786:	f340 8088 	ble.w	800589a <_dtoa_r+0x8c2>
 800578a:	461a      	mov	r2, r3
 800578c:	4601      	mov	r1, r0
 800578e:	4620      	mov	r0, r4
 8005790:	f000 fbe2 	bl	8005f58 <__pow5mult>
 8005794:	9b06      	ldr	r3, [sp, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	4606      	mov	r6, r0
 800579a:	f340 8081 	ble.w	80058a0 <_dtoa_r+0x8c8>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	6933      	ldr	r3, [r6, #16]
 80057a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057a8:	6918      	ldr	r0, [r3, #16]
 80057aa:	f000 fac5 	bl	8005d38 <__hi0bits>
 80057ae:	f1c0 0020 	rsb	r0, r0, #32
 80057b2:	9b05      	ldr	r3, [sp, #20]
 80057b4:	4418      	add	r0, r3
 80057b6:	f010 001f 	ands.w	r0, r0, #31
 80057ba:	f000 8092 	beq.w	80058e2 <_dtoa_r+0x90a>
 80057be:	f1c0 0320 	rsb	r3, r0, #32
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	f340 808a 	ble.w	80058dc <_dtoa_r+0x904>
 80057c8:	f1c0 001c 	rsb	r0, r0, #28
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	4403      	add	r3, r0
 80057d0:	9304      	str	r3, [sp, #16]
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	4403      	add	r3, r0
 80057d6:	4405      	add	r5, r0
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	9b04      	ldr	r3, [sp, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd07      	ble.n	80057f0 <_dtoa_r+0x818>
 80057e0:	ee18 1a10 	vmov	r1, s16
 80057e4:	461a      	mov	r2, r3
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 fc10 	bl	800600c <__lshift>
 80057ec:	ee08 0a10 	vmov	s16, r0
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dd05      	ble.n	8005802 <_dtoa_r+0x82a>
 80057f6:	4631      	mov	r1, r6
 80057f8:	461a      	mov	r2, r3
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fc06 	bl	800600c <__lshift>
 8005800:	4606      	mov	r6, r0
 8005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d06e      	beq.n	80058e6 <_dtoa_r+0x90e>
 8005808:	ee18 0a10 	vmov	r0, s16
 800580c:	4631      	mov	r1, r6
 800580e:	f000 fc6d 	bl	80060ec <__mcmp>
 8005812:	2800      	cmp	r0, #0
 8005814:	da67      	bge.n	80058e6 <_dtoa_r+0x90e>
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	ee18 1a10 	vmov	r1, s16
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	220a      	movs	r2, #10
 8005822:	2300      	movs	r3, #0
 8005824:	4620      	mov	r0, r4
 8005826:	f000 fa41 	bl	8005cac <__multadd>
 800582a:	9b08      	ldr	r3, [sp, #32]
 800582c:	ee08 0a10 	vmov	s16, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81b1 	beq.w	8005b98 <_dtoa_r+0xbc0>
 8005836:	2300      	movs	r3, #0
 8005838:	4639      	mov	r1, r7
 800583a:	220a      	movs	r2, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f000 fa35 	bl	8005cac <__multadd>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	4607      	mov	r7, r0
 8005848:	f300 808e 	bgt.w	8005968 <_dtoa_r+0x990>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	2b02      	cmp	r3, #2
 8005850:	dc51      	bgt.n	80058f6 <_dtoa_r+0x91e>
 8005852:	e089      	b.n	8005968 <_dtoa_r+0x990>
 8005854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800585a:	e74b      	b.n	80056f4 <_dtoa_r+0x71c>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	1e5e      	subs	r6, r3, #1
 8005860:	9b07      	ldr	r3, [sp, #28]
 8005862:	42b3      	cmp	r3, r6
 8005864:	bfbf      	itttt	lt
 8005866:	9b07      	ldrlt	r3, [sp, #28]
 8005868:	9607      	strlt	r6, [sp, #28]
 800586a:	1af2      	sublt	r2, r6, r3
 800586c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800586e:	bfb6      	itet	lt
 8005870:	189b      	addlt	r3, r3, r2
 8005872:	1b9e      	subge	r6, r3, r6
 8005874:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005876:	9b03      	ldr	r3, [sp, #12]
 8005878:	bfb8      	it	lt
 800587a:	2600      	movlt	r6, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	bfb7      	itett	lt
 8005880:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005884:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005888:	1a9d      	sublt	r5, r3, r2
 800588a:	2300      	movlt	r3, #0
 800588c:	e734      	b.n	80056f8 <_dtoa_r+0x720>
 800588e:	9e07      	ldr	r6, [sp, #28]
 8005890:	9d04      	ldr	r5, [sp, #16]
 8005892:	9f08      	ldr	r7, [sp, #32]
 8005894:	e73b      	b.n	800570e <_dtoa_r+0x736>
 8005896:	9a07      	ldr	r2, [sp, #28]
 8005898:	e767      	b.n	800576a <_dtoa_r+0x792>
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	2b01      	cmp	r3, #1
 800589e:	dc18      	bgt.n	80058d2 <_dtoa_r+0x8fa>
 80058a0:	f1ba 0f00 	cmp.w	sl, #0
 80058a4:	d115      	bne.n	80058d2 <_dtoa_r+0x8fa>
 80058a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058aa:	b993      	cbnz	r3, 80058d2 <_dtoa_r+0x8fa>
 80058ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058b0:	0d1b      	lsrs	r3, r3, #20
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	b183      	cbz	r3, 80058d8 <_dtoa_r+0x900>
 80058b6:	9b04      	ldr	r3, [sp, #16]
 80058b8:	3301      	adds	r3, #1
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	9b05      	ldr	r3, [sp, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	f04f 0801 	mov.w	r8, #1
 80058c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af6a 	bne.w	80057a2 <_dtoa_r+0x7ca>
 80058ce:	2001      	movs	r0, #1
 80058d0:	e76f      	b.n	80057b2 <_dtoa_r+0x7da>
 80058d2:	f04f 0800 	mov.w	r8, #0
 80058d6:	e7f6      	b.n	80058c6 <_dtoa_r+0x8ee>
 80058d8:	4698      	mov	r8, r3
 80058da:	e7f4      	b.n	80058c6 <_dtoa_r+0x8ee>
 80058dc:	f43f af7d 	beq.w	80057da <_dtoa_r+0x802>
 80058e0:	4618      	mov	r0, r3
 80058e2:	301c      	adds	r0, #28
 80058e4:	e772      	b.n	80057cc <_dtoa_r+0x7f4>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc37      	bgt.n	800595c <_dtoa_r+0x984>
 80058ec:	9b06      	ldr	r3, [sp, #24]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	dd34      	ble.n	800595c <_dtoa_r+0x984>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	b96b      	cbnz	r3, 8005916 <_dtoa_r+0x93e>
 80058fa:	4631      	mov	r1, r6
 80058fc:	2205      	movs	r2, #5
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 f9d4 	bl	8005cac <__multadd>
 8005904:	4601      	mov	r1, r0
 8005906:	4606      	mov	r6, r0
 8005908:	ee18 0a10 	vmov	r0, s16
 800590c:	f000 fbee 	bl	80060ec <__mcmp>
 8005910:	2800      	cmp	r0, #0
 8005912:	f73f adbb 	bgt.w	800548c <_dtoa_r+0x4b4>
 8005916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005918:	9d01      	ldr	r5, [sp, #4]
 800591a:	43db      	mvns	r3, r3
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	4631      	mov	r1, r6
 8005924:	4620      	mov	r0, r4
 8005926:	f000 f99f 	bl	8005c68 <_Bfree>
 800592a:	2f00      	cmp	r7, #0
 800592c:	f43f aea4 	beq.w	8005678 <_dtoa_r+0x6a0>
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	d005      	beq.n	8005942 <_dtoa_r+0x96a>
 8005936:	45b8      	cmp	r8, r7
 8005938:	d003      	beq.n	8005942 <_dtoa_r+0x96a>
 800593a:	4641      	mov	r1, r8
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f993 	bl	8005c68 <_Bfree>
 8005942:	4639      	mov	r1, r7
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f98f 	bl	8005c68 <_Bfree>
 800594a:	e695      	b.n	8005678 <_dtoa_r+0x6a0>
 800594c:	2600      	movs	r6, #0
 800594e:	4637      	mov	r7, r6
 8005950:	e7e1      	b.n	8005916 <_dtoa_r+0x93e>
 8005952:	9700      	str	r7, [sp, #0]
 8005954:	4637      	mov	r7, r6
 8005956:	e599      	b.n	800548c <_dtoa_r+0x4b4>
 8005958:	40240000 	.word	0x40240000
 800595c:	9b08      	ldr	r3, [sp, #32]
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80ca 	beq.w	8005af8 <_dtoa_r+0xb20>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	2d00      	cmp	r5, #0
 800596a:	dd05      	ble.n	8005978 <_dtoa_r+0x9a0>
 800596c:	4639      	mov	r1, r7
 800596e:	462a      	mov	r2, r5
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fb4b 	bl	800600c <__lshift>
 8005976:	4607      	mov	r7, r0
 8005978:	f1b8 0f00 	cmp.w	r8, #0
 800597c:	d05b      	beq.n	8005a36 <_dtoa_r+0xa5e>
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4620      	mov	r0, r4
 8005982:	f000 f931 	bl	8005be8 <_Balloc>
 8005986:	4605      	mov	r5, r0
 8005988:	b928      	cbnz	r0, 8005996 <_dtoa_r+0x9be>
 800598a:	4b87      	ldr	r3, [pc, #540]	; (8005ba8 <_dtoa_r+0xbd0>)
 800598c:	4602      	mov	r2, r0
 800598e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005992:	f7ff bb3b 	b.w	800500c <_dtoa_r+0x34>
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	3202      	adds	r2, #2
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	f107 010c 	add.w	r1, r7, #12
 80059a0:	300c      	adds	r0, #12
 80059a2:	f000 f913 	bl	8005bcc <memcpy>
 80059a6:	2201      	movs	r2, #1
 80059a8:	4629      	mov	r1, r5
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 fb2e 	bl	800600c <__lshift>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f103 0901 	add.w	r9, r3, #1
 80059b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	f00a 0301 	and.w	r3, sl, #1
 80059c2:	46b8      	mov	r8, r7
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	4607      	mov	r7, r0
 80059c8:	4631      	mov	r1, r6
 80059ca:	ee18 0a10 	vmov	r0, s16
 80059ce:	f7ff fa78 	bl	8004ec2 <quorem>
 80059d2:	4641      	mov	r1, r8
 80059d4:	9002      	str	r0, [sp, #8]
 80059d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059da:	ee18 0a10 	vmov	r0, s16
 80059de:	f000 fb85 	bl	80060ec <__mcmp>
 80059e2:	463a      	mov	r2, r7
 80059e4:	9003      	str	r0, [sp, #12]
 80059e6:	4631      	mov	r1, r6
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fb9b 	bl	8006124 <__mdiff>
 80059ee:	68c2      	ldr	r2, [r0, #12]
 80059f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80059f4:	4605      	mov	r5, r0
 80059f6:	bb02      	cbnz	r2, 8005a3a <_dtoa_r+0xa62>
 80059f8:	4601      	mov	r1, r0
 80059fa:	ee18 0a10 	vmov	r0, s16
 80059fe:	f000 fb75 	bl	80060ec <__mcmp>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	9207      	str	r2, [sp, #28]
 8005a0a:	f000 f92d 	bl	8005c68 <_Bfree>
 8005a0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005a12:	ea43 0102 	orr.w	r1, r3, r2
 8005a16:	9b04      	ldr	r3, [sp, #16]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	464d      	mov	r5, r9
 8005a1c:	d10f      	bne.n	8005a3e <_dtoa_r+0xa66>
 8005a1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a22:	d02a      	beq.n	8005a7a <_dtoa_r+0xaa2>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dd02      	ble.n	8005a30 <_dtoa_r+0xa58>
 8005a2a:	9b02      	ldr	r3, [sp, #8]
 8005a2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005a30:	f88b a000 	strb.w	sl, [fp]
 8005a34:	e775      	b.n	8005922 <_dtoa_r+0x94a>
 8005a36:	4638      	mov	r0, r7
 8005a38:	e7ba      	b.n	80059b0 <_dtoa_r+0x9d8>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	e7e2      	b.n	8005a04 <_dtoa_r+0xa2c>
 8005a3e:	9b03      	ldr	r3, [sp, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db04      	blt.n	8005a4e <_dtoa_r+0xa76>
 8005a44:	9906      	ldr	r1, [sp, #24]
 8005a46:	430b      	orrs	r3, r1
 8005a48:	9904      	ldr	r1, [sp, #16]
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	d122      	bne.n	8005a94 <_dtoa_r+0xabc>
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	ddee      	ble.n	8005a30 <_dtoa_r+0xa58>
 8005a52:	ee18 1a10 	vmov	r1, s16
 8005a56:	2201      	movs	r2, #1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 fad7 	bl	800600c <__lshift>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	ee08 0a10 	vmov	s16, r0
 8005a64:	f000 fb42 	bl	80060ec <__mcmp>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	dc03      	bgt.n	8005a74 <_dtoa_r+0xa9c>
 8005a6c:	d1e0      	bne.n	8005a30 <_dtoa_r+0xa58>
 8005a6e:	f01a 0f01 	tst.w	sl, #1
 8005a72:	d0dd      	beq.n	8005a30 <_dtoa_r+0xa58>
 8005a74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a78:	d1d7      	bne.n	8005a2a <_dtoa_r+0xa52>
 8005a7a:	2339      	movs	r3, #57	; 0x39
 8005a7c:	f88b 3000 	strb.w	r3, [fp]
 8005a80:	462b      	mov	r3, r5
 8005a82:	461d      	mov	r5, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a8a:	2a39      	cmp	r2, #57	; 0x39
 8005a8c:	d071      	beq.n	8005b72 <_dtoa_r+0xb9a>
 8005a8e:	3201      	adds	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e746      	b.n	8005922 <_dtoa_r+0x94a>
 8005a94:	2a00      	cmp	r2, #0
 8005a96:	dd07      	ble.n	8005aa8 <_dtoa_r+0xad0>
 8005a98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a9c:	d0ed      	beq.n	8005a7a <_dtoa_r+0xaa2>
 8005a9e:	f10a 0301 	add.w	r3, sl, #1
 8005aa2:	f88b 3000 	strb.w	r3, [fp]
 8005aa6:	e73c      	b.n	8005922 <_dtoa_r+0x94a>
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005aae:	4599      	cmp	r9, r3
 8005ab0:	d047      	beq.n	8005b42 <_dtoa_r+0xb6a>
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	220a      	movs	r2, #10
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f8f6 	bl	8005cac <__multadd>
 8005ac0:	45b8      	cmp	r8, r7
 8005ac2:	ee08 0a10 	vmov	s16, r0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	f04f 020a 	mov.w	r2, #10
 8005ace:	4641      	mov	r1, r8
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	d106      	bne.n	8005ae2 <_dtoa_r+0xb0a>
 8005ad4:	f000 f8ea 	bl	8005cac <__multadd>
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4607      	mov	r7, r0
 8005adc:	f109 0901 	add.w	r9, r9, #1
 8005ae0:	e772      	b.n	80059c8 <_dtoa_r+0x9f0>
 8005ae2:	f000 f8e3 	bl	8005cac <__multadd>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4680      	mov	r8, r0
 8005aea:	2300      	movs	r3, #0
 8005aec:	220a      	movs	r2, #10
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f8dc 	bl	8005cac <__multadd>
 8005af4:	4607      	mov	r7, r0
 8005af6:	e7f1      	b.n	8005adc <_dtoa_r+0xb04>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	9302      	str	r3, [sp, #8]
 8005afc:	9d01      	ldr	r5, [sp, #4]
 8005afe:	ee18 0a10 	vmov	r0, s16
 8005b02:	4631      	mov	r1, r6
 8005b04:	f7ff f9dd 	bl	8004ec2 <quorem>
 8005b08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b0c:	9b01      	ldr	r3, [sp, #4]
 8005b0e:	f805 ab01 	strb.w	sl, [r5], #1
 8005b12:	1aea      	subs	r2, r5, r3
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	dd09      	ble.n	8005b2e <_dtoa_r+0xb56>
 8005b1a:	ee18 1a10 	vmov	r1, s16
 8005b1e:	2300      	movs	r3, #0
 8005b20:	220a      	movs	r2, #10
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f8c2 	bl	8005cac <__multadd>
 8005b28:	ee08 0a10 	vmov	s16, r0
 8005b2c:	e7e7      	b.n	8005afe <_dtoa_r+0xb26>
 8005b2e:	9b02      	ldr	r3, [sp, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bfc8      	it	gt
 8005b34:	461d      	movgt	r5, r3
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	bfd8      	it	le
 8005b3a:	2501      	movle	r5, #1
 8005b3c:	441d      	add	r5, r3
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	ee18 1a10 	vmov	r1, s16
 8005b46:	2201      	movs	r2, #1
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fa5f 	bl	800600c <__lshift>
 8005b4e:	4631      	mov	r1, r6
 8005b50:	ee08 0a10 	vmov	s16, r0
 8005b54:	f000 faca 	bl	80060ec <__mcmp>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dc91      	bgt.n	8005a80 <_dtoa_r+0xaa8>
 8005b5c:	d102      	bne.n	8005b64 <_dtoa_r+0xb8c>
 8005b5e:	f01a 0f01 	tst.w	sl, #1
 8005b62:	d18d      	bne.n	8005a80 <_dtoa_r+0xaa8>
 8005b64:	462b      	mov	r3, r5
 8005b66:	461d      	mov	r5, r3
 8005b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b6c:	2a30      	cmp	r2, #48	; 0x30
 8005b6e:	d0fa      	beq.n	8005b66 <_dtoa_r+0xb8e>
 8005b70:	e6d7      	b.n	8005922 <_dtoa_r+0x94a>
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d184      	bne.n	8005a82 <_dtoa_r+0xaaa>
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	2331      	movs	r3, #49	; 0x31
 8005b80:	7013      	strb	r3, [r2, #0]
 8005b82:	e6ce      	b.n	8005922 <_dtoa_r+0x94a>
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <_dtoa_r+0xbd4>)
 8005b86:	f7ff ba95 	b.w	80050b4 <_dtoa_r+0xdc>
 8005b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f47f aa6e 	bne.w	800506e <_dtoa_r+0x96>
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <_dtoa_r+0xbd8>)
 8005b94:	f7ff ba8e 	b.w	80050b4 <_dtoa_r+0xdc>
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dcae      	bgt.n	8005afc <_dtoa_r+0xb24>
 8005b9e:	9b06      	ldr	r3, [sp, #24]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	f73f aea8 	bgt.w	80058f6 <_dtoa_r+0x91e>
 8005ba6:	e7a9      	b.n	8005afc <_dtoa_r+0xb24>
 8005ba8:	08007507 	.word	0x08007507
 8005bac:	08007464 	.word	0x08007464
 8005bb0:	08007488 	.word	0x08007488

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	; (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	20000160 	.word	0x20000160

08005bbc <malloc>:
 8005bbc:	4b02      	ldr	r3, [pc, #8]	; (8005bc8 <malloc+0xc>)
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	f000 bc17 	b.w	80063f4 <_malloc_r>
 8005bc6:	bf00      	nop
 8005bc8:	2000000c 	.word	0x2000000c

08005bcc <memcpy>:
 8005bcc:	440a      	add	r2, r1
 8005bce:	4291      	cmp	r1, r2
 8005bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd4:	d100      	bne.n	8005bd8 <memcpy+0xc>
 8005bd6:	4770      	bx	lr
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be2:	4291      	cmp	r1, r2
 8005be4:	d1f9      	bne.n	8005bda <memcpy+0xe>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <_Balloc>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bec:	4604      	mov	r4, r0
 8005bee:	460d      	mov	r5, r1
 8005bf0:	b976      	cbnz	r6, 8005c10 <_Balloc+0x28>
 8005bf2:	2010      	movs	r0, #16
 8005bf4:	f7ff ffe2 	bl	8005bbc <malloc>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8005bfc:	b920      	cbnz	r0, 8005c08 <_Balloc+0x20>
 8005bfe:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <_Balloc+0x78>)
 8005c00:	4818      	ldr	r0, [pc, #96]	; (8005c64 <_Balloc+0x7c>)
 8005c02:	2166      	movs	r1, #102	; 0x66
 8005c04:	f000 fdd6 	bl	80067b4 <__assert_func>
 8005c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c0c:	6006      	str	r6, [r0, #0]
 8005c0e:	60c6      	str	r6, [r0, #12]
 8005c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c12:	68f3      	ldr	r3, [r6, #12]
 8005c14:	b183      	cbz	r3, 8005c38 <_Balloc+0x50>
 8005c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c1e:	b9b8      	cbnz	r0, 8005c50 <_Balloc+0x68>
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f605 	lsl.w	r6, r1, r5
 8005c26:	1d72      	adds	r2, r6, #5
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fb60 	bl	80062f0 <_calloc_r>
 8005c30:	b160      	cbz	r0, 8005c4c <_Balloc+0x64>
 8005c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c36:	e00e      	b.n	8005c56 <_Balloc+0x6e>
 8005c38:	2221      	movs	r2, #33	; 0x21
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fb57 	bl	80062f0 <_calloc_r>
 8005c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c44:	60f0      	str	r0, [r6, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e4      	bne.n	8005c16 <_Balloc+0x2e>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	6802      	ldr	r2, [r0, #0]
 8005c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c56:	2300      	movs	r3, #0
 8005c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c5c:	e7f7      	b.n	8005c4e <_Balloc+0x66>
 8005c5e:	bf00      	nop
 8005c60:	08007495 	.word	0x08007495
 8005c64:	08007518 	.word	0x08007518

08005c68 <_Bfree>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	b976      	cbnz	r6, 8005c90 <_Bfree+0x28>
 8005c72:	2010      	movs	r0, #16
 8005c74:	f7ff ffa2 	bl	8005bbc <malloc>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8005c7c:	b920      	cbnz	r0, 8005c88 <_Bfree+0x20>
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <_Bfree+0x3c>)
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <_Bfree+0x40>)
 8005c82:	218a      	movs	r1, #138	; 0x8a
 8005c84:	f000 fd96 	bl	80067b4 <__assert_func>
 8005c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c8c:	6006      	str	r6, [r0, #0]
 8005c8e:	60c6      	str	r6, [r0, #12]
 8005c90:	b13c      	cbz	r4, 8005ca2 <_Bfree+0x3a>
 8005c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c94:	6862      	ldr	r2, [r4, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c9c:	6021      	str	r1, [r4, #0]
 8005c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	08007495 	.word	0x08007495
 8005ca8:	08007518 	.word	0x08007518

08005cac <__multadd>:
 8005cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb0:	690d      	ldr	r5, [r1, #16]
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	461e      	mov	r6, r3
 8005cb8:	f101 0c14 	add.w	ip, r1, #20
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8005cc8:	0c1e      	lsrs	r6, r3, #16
 8005cca:	0c0b      	lsrs	r3, r1, #16
 8005ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8005cd0:	b289      	uxth	r1, r1
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cd8:	4285      	cmp	r5, r0
 8005cda:	f84c 1b04 	str.w	r1, [ip], #4
 8005cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ce2:	dcec      	bgt.n	8005cbe <__multadd+0x12>
 8005ce4:	b30e      	cbz	r6, 8005d2a <__multadd+0x7e>
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	dc19      	bgt.n	8005d20 <__multadd+0x74>
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	4638      	mov	r0, r7
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	f7ff ff79 	bl	8005be8 <_Balloc>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	b928      	cbnz	r0, 8005d06 <__multadd+0x5a>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <__multadd+0x84>)
 8005cfe:	480d      	ldr	r0, [pc, #52]	; (8005d34 <__multadd+0x88>)
 8005d00:	21b5      	movs	r1, #181	; 0xb5
 8005d02:	f000 fd57 	bl	80067b4 <__assert_func>
 8005d06:	6922      	ldr	r2, [r4, #16]
 8005d08:	3202      	adds	r2, #2
 8005d0a:	f104 010c 	add.w	r1, r4, #12
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	300c      	adds	r0, #12
 8005d12:	f7ff ff5b 	bl	8005bcc <memcpy>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ffa5 	bl	8005c68 <_Bfree>
 8005d1e:	4644      	mov	r4, r8
 8005d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d24:	3501      	adds	r5, #1
 8005d26:	615e      	str	r6, [r3, #20]
 8005d28:	6125      	str	r5, [r4, #16]
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d30:	08007507 	.word	0x08007507
 8005d34:	08007518 	.word	0x08007518

08005d38 <__hi0bits>:
 8005d38:	0c03      	lsrs	r3, r0, #16
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	b9d3      	cbnz	r3, 8005d74 <__hi0bits+0x3c>
 8005d3e:	0400      	lsls	r0, r0, #16
 8005d40:	2310      	movs	r3, #16
 8005d42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d46:	bf04      	itt	eq
 8005d48:	0200      	lsleq	r0, r0, #8
 8005d4a:	3308      	addeq	r3, #8
 8005d4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d50:	bf04      	itt	eq
 8005d52:	0100      	lsleq	r0, r0, #4
 8005d54:	3304      	addeq	r3, #4
 8005d56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d5a:	bf04      	itt	eq
 8005d5c:	0080      	lsleq	r0, r0, #2
 8005d5e:	3302      	addeq	r3, #2
 8005d60:	2800      	cmp	r0, #0
 8005d62:	db05      	blt.n	8005d70 <__hi0bits+0x38>
 8005d64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d68:	f103 0301 	add.w	r3, r3, #1
 8005d6c:	bf08      	it	eq
 8005d6e:	2320      	moveq	r3, #32
 8005d70:	4618      	mov	r0, r3
 8005d72:	4770      	bx	lr
 8005d74:	2300      	movs	r3, #0
 8005d76:	e7e4      	b.n	8005d42 <__hi0bits+0xa>

08005d78 <__lo0bits>:
 8005d78:	6803      	ldr	r3, [r0, #0]
 8005d7a:	f013 0207 	ands.w	r2, r3, #7
 8005d7e:	4601      	mov	r1, r0
 8005d80:	d00b      	beq.n	8005d9a <__lo0bits+0x22>
 8005d82:	07da      	lsls	r2, r3, #31
 8005d84:	d423      	bmi.n	8005dce <__lo0bits+0x56>
 8005d86:	0798      	lsls	r0, r3, #30
 8005d88:	bf49      	itett	mi
 8005d8a:	085b      	lsrmi	r3, r3, #1
 8005d8c:	089b      	lsrpl	r3, r3, #2
 8005d8e:	2001      	movmi	r0, #1
 8005d90:	600b      	strmi	r3, [r1, #0]
 8005d92:	bf5c      	itt	pl
 8005d94:	600b      	strpl	r3, [r1, #0]
 8005d96:	2002      	movpl	r0, #2
 8005d98:	4770      	bx	lr
 8005d9a:	b298      	uxth	r0, r3
 8005d9c:	b9a8      	cbnz	r0, 8005dca <__lo0bits+0x52>
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	2010      	movs	r0, #16
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	b90a      	cbnz	r2, 8005daa <__lo0bits+0x32>
 8005da6:	3008      	adds	r0, #8
 8005da8:	0a1b      	lsrs	r3, r3, #8
 8005daa:	071a      	lsls	r2, r3, #28
 8005dac:	bf04      	itt	eq
 8005dae:	091b      	lsreq	r3, r3, #4
 8005db0:	3004      	addeq	r0, #4
 8005db2:	079a      	lsls	r2, r3, #30
 8005db4:	bf04      	itt	eq
 8005db6:	089b      	lsreq	r3, r3, #2
 8005db8:	3002      	addeq	r0, #2
 8005dba:	07da      	lsls	r2, r3, #31
 8005dbc:	d403      	bmi.n	8005dc6 <__lo0bits+0x4e>
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	f100 0001 	add.w	r0, r0, #1
 8005dc4:	d005      	beq.n	8005dd2 <__lo0bits+0x5a>
 8005dc6:	600b      	str	r3, [r1, #0]
 8005dc8:	4770      	bx	lr
 8005dca:	4610      	mov	r0, r2
 8005dcc:	e7e9      	b.n	8005da2 <__lo0bits+0x2a>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	4770      	bx	lr
 8005dd2:	2020      	movs	r0, #32
 8005dd4:	4770      	bx	lr
	...

08005dd8 <__i2b>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	460c      	mov	r4, r1
 8005ddc:	2101      	movs	r1, #1
 8005dde:	f7ff ff03 	bl	8005be8 <_Balloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	b928      	cbnz	r0, 8005df2 <__i2b+0x1a>
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <__i2b+0x24>)
 8005de8:	4805      	ldr	r0, [pc, #20]	; (8005e00 <__i2b+0x28>)
 8005dea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005dee:	f000 fce1 	bl	80067b4 <__assert_func>
 8005df2:	2301      	movs	r3, #1
 8005df4:	6144      	str	r4, [r0, #20]
 8005df6:	6103      	str	r3, [r0, #16]
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08007507 	.word	0x08007507
 8005e00:	08007518 	.word	0x08007518

08005e04 <__multiply>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	4691      	mov	r9, r2
 8005e0a:	690a      	ldr	r2, [r1, #16]
 8005e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	bfb8      	it	lt
 8005e14:	460b      	movlt	r3, r1
 8005e16:	460c      	mov	r4, r1
 8005e18:	bfbc      	itt	lt
 8005e1a:	464c      	movlt	r4, r9
 8005e1c:	4699      	movlt	r9, r3
 8005e1e:	6927      	ldr	r7, [r4, #16]
 8005e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	6861      	ldr	r1, [r4, #4]
 8005e28:	eb07 060a 	add.w	r6, r7, sl
 8005e2c:	42b3      	cmp	r3, r6
 8005e2e:	b085      	sub	sp, #20
 8005e30:	bfb8      	it	lt
 8005e32:	3101      	addlt	r1, #1
 8005e34:	f7ff fed8 	bl	8005be8 <_Balloc>
 8005e38:	b930      	cbnz	r0, 8005e48 <__multiply+0x44>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <__multiply+0x14c>)
 8005e3e:	4845      	ldr	r0, [pc, #276]	; (8005f54 <__multiply+0x150>)
 8005e40:	f240 115d 	movw	r1, #349	; 0x15d
 8005e44:	f000 fcb6 	bl	80067b4 <__assert_func>
 8005e48:	f100 0514 	add.w	r5, r0, #20
 8005e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e50:	462b      	mov	r3, r5
 8005e52:	2200      	movs	r2, #0
 8005e54:	4543      	cmp	r3, r8
 8005e56:	d321      	bcc.n	8005e9c <__multiply+0x98>
 8005e58:	f104 0314 	add.w	r3, r4, #20
 8005e5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e60:	f109 0314 	add.w	r3, r9, #20
 8005e64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e68:	9202      	str	r2, [sp, #8]
 8005e6a:	1b3a      	subs	r2, r7, r4
 8005e6c:	3a15      	subs	r2, #21
 8005e6e:	f022 0203 	bic.w	r2, r2, #3
 8005e72:	3204      	adds	r2, #4
 8005e74:	f104 0115 	add.w	r1, r4, #21
 8005e78:	428f      	cmp	r7, r1
 8005e7a:	bf38      	it	cc
 8005e7c:	2204      	movcc	r2, #4
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	9a02      	ldr	r2, [sp, #8]
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d80c      	bhi.n	8005ea2 <__multiply+0x9e>
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	dd03      	ble.n	8005e94 <__multiply+0x90>
 8005e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05a      	beq.n	8005f4a <__multiply+0x146>
 8005e94:	6106      	str	r6, [r0, #16]
 8005e96:	b005      	add	sp, #20
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	f843 2b04 	str.w	r2, [r3], #4
 8005ea0:	e7d8      	b.n	8005e54 <__multiply+0x50>
 8005ea2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	d024      	beq.n	8005ef6 <__multiply+0xf2>
 8005eac:	f104 0e14 	add.w	lr, r4, #20
 8005eb0:	46a9      	mov	r9, r5
 8005eb2:	f04f 0c00 	mov.w	ip, #0
 8005eb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005eba:	f8d9 1000 	ldr.w	r1, [r9]
 8005ebe:	fa1f fb82 	uxth.w	fp, r2
 8005ec2:	b289      	uxth	r1, r1
 8005ec4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ed0:	4461      	add	r1, ip
 8005ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ed6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ee4:	4577      	cmp	r7, lr
 8005ee6:	f849 1b04 	str.w	r1, [r9], #4
 8005eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005eee:	d8e2      	bhi.n	8005eb6 <__multiply+0xb2>
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	f845 c002 	str.w	ip, [r5, r2]
 8005ef6:	9a03      	ldr	r2, [sp, #12]
 8005ef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005efc:	3304      	adds	r3, #4
 8005efe:	f1b9 0f00 	cmp.w	r9, #0
 8005f02:	d020      	beq.n	8005f46 <__multiply+0x142>
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	f104 0c14 	add.w	ip, r4, #20
 8005f0a:	46ae      	mov	lr, r5
 8005f0c:	f04f 0a00 	mov.w	sl, #0
 8005f10:	f8bc b000 	ldrh.w	fp, [ip]
 8005f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f18:	fb09 220b 	mla	r2, r9, fp, r2
 8005f1c:	4492      	add	sl, r2
 8005f1e:	b289      	uxth	r1, r1
 8005f20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f24:	f84e 1b04 	str.w	r1, [lr], #4
 8005f28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f2c:	f8be 1000 	ldrh.w	r1, [lr]
 8005f30:	0c12      	lsrs	r2, r2, #16
 8005f32:	fb09 1102 	mla	r1, r9, r2, r1
 8005f36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f3a:	4567      	cmp	r7, ip
 8005f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f40:	d8e6      	bhi.n	8005f10 <__multiply+0x10c>
 8005f42:	9a01      	ldr	r2, [sp, #4]
 8005f44:	50a9      	str	r1, [r5, r2]
 8005f46:	3504      	adds	r5, #4
 8005f48:	e79a      	b.n	8005e80 <__multiply+0x7c>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	e79c      	b.n	8005e88 <__multiply+0x84>
 8005f4e:	bf00      	nop
 8005f50:	08007507 	.word	0x08007507
 8005f54:	08007518 	.word	0x08007518

08005f58 <__pow5mult>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	f012 0203 	ands.w	r2, r2, #3
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	d007      	beq.n	8005f78 <__pow5mult+0x20>
 8005f68:	4c25      	ldr	r4, [pc, #148]	; (8006000 <__pow5mult+0xa8>)
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f72:	f7ff fe9b 	bl	8005cac <__multadd>
 8005f76:	4607      	mov	r7, r0
 8005f78:	10ad      	asrs	r5, r5, #2
 8005f7a:	d03d      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f7e:	b97c      	cbnz	r4, 8005fa0 <__pow5mult+0x48>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7ff fe1b 	bl	8005bbc <malloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6270      	str	r0, [r6, #36]	; 0x24
 8005f8a:	b928      	cbnz	r0, 8005f98 <__pow5mult+0x40>
 8005f8c:	4b1d      	ldr	r3, [pc, #116]	; (8006004 <__pow5mult+0xac>)
 8005f8e:	481e      	ldr	r0, [pc, #120]	; (8006008 <__pow5mult+0xb0>)
 8005f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f94:	f000 fc0e 	bl	80067b4 <__assert_func>
 8005f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f9c:	6004      	str	r4, [r0, #0]
 8005f9e:	60c4      	str	r4, [r0, #12]
 8005fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fa8:	b94c      	cbnz	r4, 8005fbe <__pow5mult+0x66>
 8005faa:	f240 2171 	movw	r1, #625	; 0x271
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f7ff ff12 	bl	8005dd8 <__i2b>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fba:	4604      	mov	r4, r0
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	f04f 0900 	mov.w	r9, #0
 8005fc2:	07eb      	lsls	r3, r5, #31
 8005fc4:	d50a      	bpl.n	8005fdc <__pow5mult+0x84>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff1a 	bl	8005e04 <__multiply>
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff fe47 	bl	8005c68 <_Bfree>
 8005fda:	4647      	mov	r7, r8
 8005fdc:	106d      	asrs	r5, r5, #1
 8005fde:	d00b      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	b938      	cbnz	r0, 8005ff4 <__pow5mult+0x9c>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ff0b 	bl	8005e04 <__multiply>
 8005fee:	6020      	str	r0, [r4, #0]
 8005ff0:	f8c0 9000 	str.w	r9, [r0]
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	e7e4      	b.n	8005fc2 <__pow5mult+0x6a>
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	bf00      	nop
 8006000:	08007668 	.word	0x08007668
 8006004:	08007495 	.word	0x08007495
 8006008:	08007518 	.word	0x08007518

0800600c <__lshift>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460c      	mov	r4, r1
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	4607      	mov	r7, r0
 800601e:	4691      	mov	r9, r2
 8006020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006024:	f108 0601 	add.w	r6, r8, #1
 8006028:	42b3      	cmp	r3, r6
 800602a:	db0b      	blt.n	8006044 <__lshift+0x38>
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff fddb 	bl	8005be8 <_Balloc>
 8006032:	4605      	mov	r5, r0
 8006034:	b948      	cbnz	r0, 800604a <__lshift+0x3e>
 8006036:	4602      	mov	r2, r0
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <__lshift+0xd8>)
 800603a:	482b      	ldr	r0, [pc, #172]	; (80060e8 <__lshift+0xdc>)
 800603c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006040:	f000 fbb8 	bl	80067b4 <__assert_func>
 8006044:	3101      	adds	r1, #1
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	e7ee      	b.n	8006028 <__lshift+0x1c>
 800604a:	2300      	movs	r3, #0
 800604c:	f100 0114 	add.w	r1, r0, #20
 8006050:	f100 0210 	add.w	r2, r0, #16
 8006054:	4618      	mov	r0, r3
 8006056:	4553      	cmp	r3, sl
 8006058:	db37      	blt.n	80060ca <__lshift+0xbe>
 800605a:	6920      	ldr	r0, [r4, #16]
 800605c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006060:	f104 0314 	add.w	r3, r4, #20
 8006064:	f019 091f 	ands.w	r9, r9, #31
 8006068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800606c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006070:	d02f      	beq.n	80060d2 <__lshift+0xc6>
 8006072:	f1c9 0e20 	rsb	lr, r9, #32
 8006076:	468a      	mov	sl, r1
 8006078:	f04f 0c00 	mov.w	ip, #0
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	fa02 f209 	lsl.w	r2, r2, r9
 8006082:	ea42 020c 	orr.w	r2, r2, ip
 8006086:	f84a 2b04 	str.w	r2, [sl], #4
 800608a:	f853 2b04 	ldr.w	r2, [r3], #4
 800608e:	4298      	cmp	r0, r3
 8006090:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006094:	d8f2      	bhi.n	800607c <__lshift+0x70>
 8006096:	1b03      	subs	r3, r0, r4
 8006098:	3b15      	subs	r3, #21
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	3304      	adds	r3, #4
 80060a0:	f104 0215 	add.w	r2, r4, #21
 80060a4:	4290      	cmp	r0, r2
 80060a6:	bf38      	it	cc
 80060a8:	2304      	movcc	r3, #4
 80060aa:	f841 c003 	str.w	ip, [r1, r3]
 80060ae:	f1bc 0f00 	cmp.w	ip, #0
 80060b2:	d001      	beq.n	80060b8 <__lshift+0xac>
 80060b4:	f108 0602 	add.w	r6, r8, #2
 80060b8:	3e01      	subs	r6, #1
 80060ba:	4638      	mov	r0, r7
 80060bc:	612e      	str	r6, [r5, #16]
 80060be:	4621      	mov	r1, r4
 80060c0:	f7ff fdd2 	bl	8005c68 <_Bfree>
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7c1      	b.n	8006056 <__lshift+0x4a>
 80060d2:	3904      	subs	r1, #4
 80060d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80060dc:	4298      	cmp	r0, r3
 80060de:	d8f9      	bhi.n	80060d4 <__lshift+0xc8>
 80060e0:	e7ea      	b.n	80060b8 <__lshift+0xac>
 80060e2:	bf00      	nop
 80060e4:	08007507 	.word	0x08007507
 80060e8:	08007518 	.word	0x08007518

080060ec <__mcmp>:
 80060ec:	b530      	push	{r4, r5, lr}
 80060ee:	6902      	ldr	r2, [r0, #16]
 80060f0:	690c      	ldr	r4, [r1, #16]
 80060f2:	1b12      	subs	r2, r2, r4
 80060f4:	d10e      	bne.n	8006114 <__mcmp+0x28>
 80060f6:	f100 0314 	add.w	r3, r0, #20
 80060fa:	3114      	adds	r1, #20
 80060fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800610c:	42a5      	cmp	r5, r4
 800610e:	d003      	beq.n	8006118 <__mcmp+0x2c>
 8006110:	d305      	bcc.n	800611e <__mcmp+0x32>
 8006112:	2201      	movs	r2, #1
 8006114:	4610      	mov	r0, r2
 8006116:	bd30      	pop	{r4, r5, pc}
 8006118:	4283      	cmp	r3, r0
 800611a:	d3f3      	bcc.n	8006104 <__mcmp+0x18>
 800611c:	e7fa      	b.n	8006114 <__mcmp+0x28>
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	e7f7      	b.n	8006114 <__mcmp+0x28>

08006124 <__mdiff>:
 8006124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006128:	460c      	mov	r4, r1
 800612a:	4606      	mov	r6, r0
 800612c:	4611      	mov	r1, r2
 800612e:	4620      	mov	r0, r4
 8006130:	4690      	mov	r8, r2
 8006132:	f7ff ffdb 	bl	80060ec <__mcmp>
 8006136:	1e05      	subs	r5, r0, #0
 8006138:	d110      	bne.n	800615c <__mdiff+0x38>
 800613a:	4629      	mov	r1, r5
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fd53 	bl	8005be8 <_Balloc>
 8006142:	b930      	cbnz	r0, 8006152 <__mdiff+0x2e>
 8006144:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <__mdiff+0x10c>)
 8006146:	4602      	mov	r2, r0
 8006148:	f240 2132 	movw	r1, #562	; 0x232
 800614c:	4839      	ldr	r0, [pc, #228]	; (8006234 <__mdiff+0x110>)
 800614e:	f000 fb31 	bl	80067b4 <__assert_func>
 8006152:	2301      	movs	r3, #1
 8006154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	bfa4      	itt	ge
 800615e:	4643      	movge	r3, r8
 8006160:	46a0      	movge	r8, r4
 8006162:	4630      	mov	r0, r6
 8006164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006168:	bfa6      	itte	ge
 800616a:	461c      	movge	r4, r3
 800616c:	2500      	movge	r5, #0
 800616e:	2501      	movlt	r5, #1
 8006170:	f7ff fd3a 	bl	8005be8 <_Balloc>
 8006174:	b920      	cbnz	r0, 8006180 <__mdiff+0x5c>
 8006176:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <__mdiff+0x10c>)
 8006178:	4602      	mov	r2, r0
 800617a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800617e:	e7e5      	b.n	800614c <__mdiff+0x28>
 8006180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006184:	6926      	ldr	r6, [r4, #16]
 8006186:	60c5      	str	r5, [r0, #12]
 8006188:	f104 0914 	add.w	r9, r4, #20
 800618c:	f108 0514 	add.w	r5, r8, #20
 8006190:	f100 0e14 	add.w	lr, r0, #20
 8006194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800619c:	f108 0210 	add.w	r2, r8, #16
 80061a0:	46f2      	mov	sl, lr
 80061a2:	2100      	movs	r1, #0
 80061a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80061a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061ac:	fa1f f883 	uxth.w	r8, r3
 80061b0:	fa11 f18b 	uxtah	r1, r1, fp
 80061b4:	0c1b      	lsrs	r3, r3, #16
 80061b6:	eba1 0808 	sub.w	r8, r1, r8
 80061ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061c2:	fa1f f888 	uxth.w	r8, r8
 80061c6:	1419      	asrs	r1, r3, #16
 80061c8:	454e      	cmp	r6, r9
 80061ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061ce:	f84a 3b04 	str.w	r3, [sl], #4
 80061d2:	d8e7      	bhi.n	80061a4 <__mdiff+0x80>
 80061d4:	1b33      	subs	r3, r6, r4
 80061d6:	3b15      	subs	r3, #21
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	3304      	adds	r3, #4
 80061de:	3415      	adds	r4, #21
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	bf38      	it	cc
 80061e4:	2304      	movcc	r3, #4
 80061e6:	441d      	add	r5, r3
 80061e8:	4473      	add	r3, lr
 80061ea:	469e      	mov	lr, r3
 80061ec:	462e      	mov	r6, r5
 80061ee:	4566      	cmp	r6, ip
 80061f0:	d30e      	bcc.n	8006210 <__mdiff+0xec>
 80061f2:	f10c 0203 	add.w	r2, ip, #3
 80061f6:	1b52      	subs	r2, r2, r5
 80061f8:	f022 0203 	bic.w	r2, r2, #3
 80061fc:	3d03      	subs	r5, #3
 80061fe:	45ac      	cmp	ip, r5
 8006200:	bf38      	it	cc
 8006202:	2200      	movcc	r2, #0
 8006204:	441a      	add	r2, r3
 8006206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800620a:	b17b      	cbz	r3, 800622c <__mdiff+0x108>
 800620c:	6107      	str	r7, [r0, #16]
 800620e:	e7a3      	b.n	8006158 <__mdiff+0x34>
 8006210:	f856 8b04 	ldr.w	r8, [r6], #4
 8006214:	fa11 f288 	uxtah	r2, r1, r8
 8006218:	1414      	asrs	r4, r2, #16
 800621a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800621e:	b292      	uxth	r2, r2
 8006220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006224:	f84e 2b04 	str.w	r2, [lr], #4
 8006228:	1421      	asrs	r1, r4, #16
 800622a:	e7e0      	b.n	80061ee <__mdiff+0xca>
 800622c:	3f01      	subs	r7, #1
 800622e:	e7ea      	b.n	8006206 <__mdiff+0xe2>
 8006230:	08007507 	.word	0x08007507
 8006234:	08007518 	.word	0x08007518

08006238 <__d2b>:
 8006238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800623c:	4689      	mov	r9, r1
 800623e:	2101      	movs	r1, #1
 8006240:	ec57 6b10 	vmov	r6, r7, d0
 8006244:	4690      	mov	r8, r2
 8006246:	f7ff fccf 	bl	8005be8 <_Balloc>
 800624a:	4604      	mov	r4, r0
 800624c:	b930      	cbnz	r0, 800625c <__d2b+0x24>
 800624e:	4602      	mov	r2, r0
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <__d2b+0xb0>)
 8006252:	4826      	ldr	r0, [pc, #152]	; (80062ec <__d2b+0xb4>)
 8006254:	f240 310a 	movw	r1, #778	; 0x30a
 8006258:	f000 faac 	bl	80067b4 <__assert_func>
 800625c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006264:	bb35      	cbnz	r5, 80062b4 <__d2b+0x7c>
 8006266:	2e00      	cmp	r6, #0
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	d028      	beq.n	80062be <__d2b+0x86>
 800626c:	4668      	mov	r0, sp
 800626e:	9600      	str	r6, [sp, #0]
 8006270:	f7ff fd82 	bl	8005d78 <__lo0bits>
 8006274:	9900      	ldr	r1, [sp, #0]
 8006276:	b300      	cbz	r0, 80062ba <__d2b+0x82>
 8006278:	9a01      	ldr	r2, [sp, #4]
 800627a:	f1c0 0320 	rsb	r3, r0, #32
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	430b      	orrs	r3, r1
 8006284:	40c2      	lsrs	r2, r0
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	9201      	str	r2, [sp, #4]
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	61a3      	str	r3, [r4, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf14      	ite	ne
 8006292:	2202      	movne	r2, #2
 8006294:	2201      	moveq	r2, #1
 8006296:	6122      	str	r2, [r4, #16]
 8006298:	b1d5      	cbz	r5, 80062d0 <__d2b+0x98>
 800629a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800629e:	4405      	add	r5, r0
 80062a0:	f8c9 5000 	str.w	r5, [r9]
 80062a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062a8:	f8c8 0000 	str.w	r0, [r8]
 80062ac:	4620      	mov	r0, r4
 80062ae:	b003      	add	sp, #12
 80062b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b8:	e7d5      	b.n	8006266 <__d2b+0x2e>
 80062ba:	6161      	str	r1, [r4, #20]
 80062bc:	e7e5      	b.n	800628a <__d2b+0x52>
 80062be:	a801      	add	r0, sp, #4
 80062c0:	f7ff fd5a 	bl	8005d78 <__lo0bits>
 80062c4:	9b01      	ldr	r3, [sp, #4]
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	2201      	movs	r2, #1
 80062ca:	6122      	str	r2, [r4, #16]
 80062cc:	3020      	adds	r0, #32
 80062ce:	e7e3      	b.n	8006298 <__d2b+0x60>
 80062d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062d8:	f8c9 0000 	str.w	r0, [r9]
 80062dc:	6918      	ldr	r0, [r3, #16]
 80062de:	f7ff fd2b 	bl	8005d38 <__hi0bits>
 80062e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062e6:	e7df      	b.n	80062a8 <__d2b+0x70>
 80062e8:	08007507 	.word	0x08007507
 80062ec:	08007518 	.word	0x08007518

080062f0 <_calloc_r>:
 80062f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062f2:	fba1 2402 	umull	r2, r4, r1, r2
 80062f6:	b94c      	cbnz	r4, 800630c <_calloc_r+0x1c>
 80062f8:	4611      	mov	r1, r2
 80062fa:	9201      	str	r2, [sp, #4]
 80062fc:	f000 f87a 	bl	80063f4 <_malloc_r>
 8006300:	9a01      	ldr	r2, [sp, #4]
 8006302:	4605      	mov	r5, r0
 8006304:	b930      	cbnz	r0, 8006314 <_calloc_r+0x24>
 8006306:	4628      	mov	r0, r5
 8006308:	b003      	add	sp, #12
 800630a:	bd30      	pop	{r4, r5, pc}
 800630c:	220c      	movs	r2, #12
 800630e:	6002      	str	r2, [r0, #0]
 8006310:	2500      	movs	r5, #0
 8006312:	e7f8      	b.n	8006306 <_calloc_r+0x16>
 8006314:	4621      	mov	r1, r4
 8006316:	f7fe f92b 	bl	8004570 <memset>
 800631a:	e7f4      	b.n	8006306 <_calloc_r+0x16>

0800631c <_free_r>:
 800631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631e:	2900      	cmp	r1, #0
 8006320:	d044      	beq.n	80063ac <_free_r+0x90>
 8006322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006326:	9001      	str	r0, [sp, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f1a1 0404 	sub.w	r4, r1, #4
 800632e:	bfb8      	it	lt
 8006330:	18e4      	addlt	r4, r4, r3
 8006332:	f000 fa9b 	bl	800686c <__malloc_lock>
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <_free_r+0x94>)
 8006338:	9801      	ldr	r0, [sp, #4]
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	b933      	cbnz	r3, 800634c <_free_r+0x30>
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	6014      	str	r4, [r2, #0]
 8006342:	b003      	add	sp, #12
 8006344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006348:	f000 ba96 	b.w	8006878 <__malloc_unlock>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d908      	bls.n	8006362 <_free_r+0x46>
 8006350:	6825      	ldr	r5, [r4, #0]
 8006352:	1961      	adds	r1, r4, r5
 8006354:	428b      	cmp	r3, r1
 8006356:	bf01      	itttt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	1949      	addeq	r1, r1, r5
 800635e:	6021      	streq	r1, [r4, #0]
 8006360:	e7ed      	b.n	800633e <_free_r+0x22>
 8006362:	461a      	mov	r2, r3
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b10b      	cbz	r3, 800636c <_free_r+0x50>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d9fa      	bls.n	8006362 <_free_r+0x46>
 800636c:	6811      	ldr	r1, [r2, #0]
 800636e:	1855      	adds	r5, r2, r1
 8006370:	42a5      	cmp	r5, r4
 8006372:	d10b      	bne.n	800638c <_free_r+0x70>
 8006374:	6824      	ldr	r4, [r4, #0]
 8006376:	4421      	add	r1, r4
 8006378:	1854      	adds	r4, r2, r1
 800637a:	42a3      	cmp	r3, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	d1e0      	bne.n	8006342 <_free_r+0x26>
 8006380:	681c      	ldr	r4, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	6053      	str	r3, [r2, #4]
 8006386:	4421      	add	r1, r4
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	e7da      	b.n	8006342 <_free_r+0x26>
 800638c:	d902      	bls.n	8006394 <_free_r+0x78>
 800638e:	230c      	movs	r3, #12
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	e7d6      	b.n	8006342 <_free_r+0x26>
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1961      	adds	r1, r4, r5
 8006398:	428b      	cmp	r3, r1
 800639a:	bf04      	itt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	bf04      	itt	eq
 80063a4:	1949      	addeq	r1, r1, r5
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	6054      	str	r4, [r2, #4]
 80063aa:	e7ca      	b.n	8006342 <_free_r+0x26>
 80063ac:	b003      	add	sp, #12
 80063ae:	bd30      	pop	{r4, r5, pc}
 80063b0:	200002dc 	.word	0x200002dc

080063b4 <sbrk_aligned>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4e0e      	ldr	r6, [pc, #56]	; (80063f0 <sbrk_aligned+0x3c>)
 80063b8:	460c      	mov	r4, r1
 80063ba:	6831      	ldr	r1, [r6, #0]
 80063bc:	4605      	mov	r5, r0
 80063be:	b911      	cbnz	r1, 80063c6 <sbrk_aligned+0x12>
 80063c0:	f000 f9e8 	bl	8006794 <_sbrk_r>
 80063c4:	6030      	str	r0, [r6, #0]
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f9e3 	bl	8006794 <_sbrk_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d00a      	beq.n	80063e8 <sbrk_aligned+0x34>
 80063d2:	1cc4      	adds	r4, r0, #3
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d007      	beq.n	80063ec <sbrk_aligned+0x38>
 80063dc:	1a21      	subs	r1, r4, r0
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f9d8 	bl	8006794 <_sbrk_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d101      	bne.n	80063ec <sbrk_aligned+0x38>
 80063e8:	f04f 34ff 	mov.w	r4, #4294967295
 80063ec:	4620      	mov	r0, r4
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	200002e0 	.word	0x200002e0

080063f4 <_malloc_r>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	1ccd      	adds	r5, r1, #3
 80063fa:	f025 0503 	bic.w	r5, r5, #3
 80063fe:	3508      	adds	r5, #8
 8006400:	2d0c      	cmp	r5, #12
 8006402:	bf38      	it	cc
 8006404:	250c      	movcc	r5, #12
 8006406:	2d00      	cmp	r5, #0
 8006408:	4607      	mov	r7, r0
 800640a:	db01      	blt.n	8006410 <_malloc_r+0x1c>
 800640c:	42a9      	cmp	r1, r5
 800640e:	d905      	bls.n	800641c <_malloc_r+0x28>
 8006410:	230c      	movs	r3, #12
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	2600      	movs	r6, #0
 8006416:	4630      	mov	r0, r6
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	4e2e      	ldr	r6, [pc, #184]	; (80064d8 <_malloc_r+0xe4>)
 800641e:	f000 fa25 	bl	800686c <__malloc_lock>
 8006422:	6833      	ldr	r3, [r6, #0]
 8006424:	461c      	mov	r4, r3
 8006426:	bb34      	cbnz	r4, 8006476 <_malloc_r+0x82>
 8006428:	4629      	mov	r1, r5
 800642a:	4638      	mov	r0, r7
 800642c:	f7ff ffc2 	bl	80063b4 <sbrk_aligned>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	4604      	mov	r4, r0
 8006434:	d14d      	bne.n	80064d2 <_malloc_r+0xde>
 8006436:	6834      	ldr	r4, [r6, #0]
 8006438:	4626      	mov	r6, r4
 800643a:	2e00      	cmp	r6, #0
 800643c:	d140      	bne.n	80064c0 <_malloc_r+0xcc>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4631      	mov	r1, r6
 8006442:	4638      	mov	r0, r7
 8006444:	eb04 0803 	add.w	r8, r4, r3
 8006448:	f000 f9a4 	bl	8006794 <_sbrk_r>
 800644c:	4580      	cmp	r8, r0
 800644e:	d13a      	bne.n	80064c6 <_malloc_r+0xd2>
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	3503      	adds	r5, #3
 8006454:	1a6d      	subs	r5, r5, r1
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	4629      	mov	r1, r5
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa5 	bl	80063b4 <sbrk_aligned>
 800646a:	3001      	adds	r0, #1
 800646c:	d02b      	beq.n	80064c6 <_malloc_r+0xd2>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	442b      	add	r3, r5
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	e00e      	b.n	8006494 <_malloc_r+0xa0>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	1b52      	subs	r2, r2, r5
 800647a:	d41e      	bmi.n	80064ba <_malloc_r+0xc6>
 800647c:	2a0b      	cmp	r2, #11
 800647e:	d916      	bls.n	80064ae <_malloc_r+0xba>
 8006480:	1961      	adds	r1, r4, r5
 8006482:	42a3      	cmp	r3, r4
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	bf18      	it	ne
 8006488:	6059      	strne	r1, [r3, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	bf08      	it	eq
 800648e:	6031      	streq	r1, [r6, #0]
 8006490:	5162      	str	r2, [r4, r5]
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	4638      	mov	r0, r7
 8006496:	f104 060b 	add.w	r6, r4, #11
 800649a:	f000 f9ed 	bl	8006878 <__malloc_unlock>
 800649e:	f026 0607 	bic.w	r6, r6, #7
 80064a2:	1d23      	adds	r3, r4, #4
 80064a4:	1af2      	subs	r2, r6, r3
 80064a6:	d0b6      	beq.n	8006416 <_malloc_r+0x22>
 80064a8:	1b9b      	subs	r3, r3, r6
 80064aa:	50a3      	str	r3, [r4, r2]
 80064ac:	e7b3      	b.n	8006416 <_malloc_r+0x22>
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	bf0c      	ite	eq
 80064b4:	6032      	streq	r2, [r6, #0]
 80064b6:	605a      	strne	r2, [r3, #4]
 80064b8:	e7ec      	b.n	8006494 <_malloc_r+0xa0>
 80064ba:	4623      	mov	r3, r4
 80064bc:	6864      	ldr	r4, [r4, #4]
 80064be:	e7b2      	b.n	8006426 <_malloc_r+0x32>
 80064c0:	4634      	mov	r4, r6
 80064c2:	6876      	ldr	r6, [r6, #4]
 80064c4:	e7b9      	b.n	800643a <_malloc_r+0x46>
 80064c6:	230c      	movs	r3, #12
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	4638      	mov	r0, r7
 80064cc:	f000 f9d4 	bl	8006878 <__malloc_unlock>
 80064d0:	e7a1      	b.n	8006416 <_malloc_r+0x22>
 80064d2:	6025      	str	r5, [r4, #0]
 80064d4:	e7de      	b.n	8006494 <_malloc_r+0xa0>
 80064d6:	bf00      	nop
 80064d8:	200002dc 	.word	0x200002dc

080064dc <__ssputs_r>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	688e      	ldr	r6, [r1, #8]
 80064e2:	429e      	cmp	r6, r3
 80064e4:	4682      	mov	sl, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	461f      	mov	r7, r3
 80064ec:	d838      	bhi.n	8006560 <__ssputs_r+0x84>
 80064ee:	898a      	ldrh	r2, [r1, #12]
 80064f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064f4:	d032      	beq.n	800655c <__ssputs_r+0x80>
 80064f6:	6825      	ldr	r5, [r4, #0]
 80064f8:	6909      	ldr	r1, [r1, #16]
 80064fa:	eba5 0901 	sub.w	r9, r5, r1
 80064fe:	6965      	ldr	r5, [r4, #20]
 8006500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006508:	3301      	adds	r3, #1
 800650a:	444b      	add	r3, r9
 800650c:	106d      	asrs	r5, r5, #1
 800650e:	429d      	cmp	r5, r3
 8006510:	bf38      	it	cc
 8006512:	461d      	movcc	r5, r3
 8006514:	0553      	lsls	r3, r2, #21
 8006516:	d531      	bpl.n	800657c <__ssputs_r+0xa0>
 8006518:	4629      	mov	r1, r5
 800651a:	f7ff ff6b 	bl	80063f4 <_malloc_r>
 800651e:	4606      	mov	r6, r0
 8006520:	b950      	cbnz	r0, 8006538 <__ssputs_r+0x5c>
 8006522:	230c      	movs	r3, #12
 8006524:	f8ca 3000 	str.w	r3, [sl]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	6921      	ldr	r1, [r4, #16]
 800653a:	464a      	mov	r2, r9
 800653c:	f7ff fb46 	bl	8005bcc <memcpy>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	6126      	str	r6, [r4, #16]
 800654e:	6165      	str	r5, [r4, #20]
 8006550:	444e      	add	r6, r9
 8006552:	eba5 0509 	sub.w	r5, r5, r9
 8006556:	6026      	str	r6, [r4, #0]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	463e      	mov	r6, r7
 800655c:	42be      	cmp	r6, r7
 800655e:	d900      	bls.n	8006562 <__ssputs_r+0x86>
 8006560:	463e      	mov	r6, r7
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	4632      	mov	r2, r6
 8006566:	4641      	mov	r1, r8
 8006568:	f000 f966 	bl	8006838 <memmove>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	1b9b      	subs	r3, r3, r6
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	4433      	add	r3, r6
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2000      	movs	r0, #0
 800657a:	e7db      	b.n	8006534 <__ssputs_r+0x58>
 800657c:	462a      	mov	r2, r5
 800657e:	f000 f981 	bl	8006884 <_realloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	2800      	cmp	r0, #0
 8006586:	d1e1      	bne.n	800654c <__ssputs_r+0x70>
 8006588:	6921      	ldr	r1, [r4, #16]
 800658a:	4650      	mov	r0, sl
 800658c:	f7ff fec6 	bl	800631c <_free_r>
 8006590:	e7c7      	b.n	8006522 <__ssputs_r+0x46>
	...

08006594 <_svfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4698      	mov	r8, r3
 800659a:	898b      	ldrh	r3, [r1, #12]
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	b09d      	sub	sp, #116	; 0x74
 80065a0:	4607      	mov	r7, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	d50e      	bpl.n	80065c6 <_svfiprintf_r+0x32>
 80065a8:	690b      	ldr	r3, [r1, #16]
 80065aa:	b963      	cbnz	r3, 80065c6 <_svfiprintf_r+0x32>
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	f7ff ff21 	bl	80063f4 <_malloc_r>
 80065b2:	6028      	str	r0, [r5, #0]
 80065b4:	6128      	str	r0, [r5, #16]
 80065b6:	b920      	cbnz	r0, 80065c2 <_svfiprintf_r+0x2e>
 80065b8:	230c      	movs	r3, #12
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e0d1      	b.n	8006766 <_svfiprintf_r+0x1d2>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	616b      	str	r3, [r5, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	2320      	movs	r3, #32
 80065cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006780 <_svfiprintf_r+0x1ec>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065de:	f04f 0901 	mov.w	r9, #1
 80065e2:	4623      	mov	r3, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	b10a      	cbz	r2, 80065f0 <_svfiprintf_r+0x5c>
 80065ec:	2a25      	cmp	r2, #37	; 0x25
 80065ee:	d1f9      	bne.n	80065e4 <_svfiprintf_r+0x50>
 80065f0:	ebba 0b04 	subs.w	fp, sl, r4
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x7a>
 80065f6:	465b      	mov	r3, fp
 80065f8:	4622      	mov	r2, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff6d 	bl	80064dc <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80aa 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	445a      	add	r2, fp
 800660c:	9209      	str	r2, [sp, #36]	; 0x24
 800660e:	f89a 3000 	ldrb.w	r3, [sl]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80a2 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662e:	931a      	str	r3, [sp, #104]	; 0x68
 8006630:	4654      	mov	r4, sl
 8006632:	2205      	movs	r2, #5
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	4851      	ldr	r0, [pc, #324]	; (8006780 <_svfiprintf_r+0x1ec>)
 800663a:	f7f9 fdd9 	bl	80001f0 <memchr>
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	b9d8      	cbnz	r0, 800667a <_svfiprintf_r+0xe6>
 8006642:	06d0      	lsls	r0, r2, #27
 8006644:	bf44      	itt	mi
 8006646:	2320      	movmi	r3, #32
 8006648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664c:	0711      	lsls	r1, r2, #28
 800664e:	bf44      	itt	mi
 8006650:	232b      	movmi	r3, #43	; 0x2b
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d015      	beq.n	800668a <_svfiprintf_r+0xf6>
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	4654      	mov	r4, sl
 8006662:	2000      	movs	r0, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4621      	mov	r1, r4
 800666a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666e:	3b30      	subs	r3, #48	; 0x30
 8006670:	2b09      	cmp	r3, #9
 8006672:	d94e      	bls.n	8006712 <_svfiprintf_r+0x17e>
 8006674:	b1b0      	cbz	r0, 80066a4 <_svfiprintf_r+0x110>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e014      	b.n	80066a4 <_svfiprintf_r+0x110>
 800667a:	eba0 0308 	sub.w	r3, r0, r8
 800667e:	fa09 f303 	lsl.w	r3, r9, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	46a2      	mov	sl, r4
 8006688:	e7d2      	b.n	8006630 <_svfiprintf_r+0x9c>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	9103      	str	r1, [sp, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbb      	ittet	lt
 8006696:	425b      	neglt	r3, r3
 8006698:	f042 0202 	orrlt.w	r2, r2, #2
 800669c:	9307      	strge	r3, [sp, #28]
 800669e:	9307      	strlt	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	9204      	strlt	r2, [sp, #16]
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	2b2e      	cmp	r3, #46	; 0x2e
 80066a8:	d10c      	bne.n	80066c4 <_svfiprintf_r+0x130>
 80066aa:	7863      	ldrb	r3, [r4, #1]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d135      	bne.n	800671c <_svfiprintf_r+0x188>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfb8      	it	lt
 80066bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c0:	3402      	adds	r4, #2
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006790 <_svfiprintf_r+0x1fc>
 80066c8:	7821      	ldrb	r1, [r4, #0]
 80066ca:	2203      	movs	r2, #3
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7f9 fd8f 	bl	80001f0 <memchr>
 80066d2:	b140      	cbz	r0, 80066e6 <_svfiprintf_r+0x152>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	eba0 000a 	sub.w	r0, r0, sl
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	4303      	orrs	r3, r0
 80066e2:	3401      	adds	r4, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	4826      	ldr	r0, [pc, #152]	; (8006784 <_svfiprintf_r+0x1f0>)
 80066ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f0:	2206      	movs	r2, #6
 80066f2:	f7f9 fd7d 	bl	80001f0 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1d8>
 80066fa:	4b23      	ldr	r3, [pc, #140]	; (8006788 <_svfiprintf_r+0x1f4>)
 80066fc:	bb1b      	cbnz	r3, 8006746 <_svfiprintf_r+0x1b2>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	4433      	add	r3, r6
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e767      	b.n	80065e2 <_svfiprintf_r+0x4e>
 8006712:	fb0c 3202 	mla	r2, ip, r2, r3
 8006716:	460c      	mov	r4, r1
 8006718:	2001      	movs	r0, #1
 800671a:	e7a5      	b.n	8006668 <_svfiprintf_r+0xd4>
 800671c:	2300      	movs	r3, #0
 800671e:	3401      	adds	r4, #1
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	4619      	mov	r1, r3
 8006724:	f04f 0c0a 	mov.w	ip, #10
 8006728:	4620      	mov	r0, r4
 800672a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672e:	3a30      	subs	r2, #48	; 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d903      	bls.n	800673c <_svfiprintf_r+0x1a8>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0c5      	beq.n	80066c4 <_svfiprintf_r+0x130>
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	e7c3      	b.n	80066c4 <_svfiprintf_r+0x130>
 800673c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006740:	4604      	mov	r4, r0
 8006742:	2301      	movs	r3, #1
 8006744:	e7f0      	b.n	8006728 <_svfiprintf_r+0x194>
 8006746:	ab03      	add	r3, sp, #12
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	462a      	mov	r2, r5
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <_svfiprintf_r+0x1f8>)
 800674e:	a904      	add	r1, sp, #16
 8006750:	4638      	mov	r0, r7
 8006752:	f7fd ffb5 	bl	80046c0 <_printf_float>
 8006756:	1c42      	adds	r2, r0, #1
 8006758:	4606      	mov	r6, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x176>
 800675c:	89ab      	ldrh	r3, [r5, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af2c 	bmi.w	80065bc <_svfiprintf_r+0x28>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <_svfiprintf_r+0x1f8>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4638      	mov	r0, r7
 8006778:	f7fe fa46 	bl	8004c08 <_printf_i>
 800677c:	e7eb      	b.n	8006756 <_svfiprintf_r+0x1c2>
 800677e:	bf00      	nop
 8006780:	08007674 	.word	0x08007674
 8006784:	0800767e 	.word	0x0800767e
 8006788:	080046c1 	.word	0x080046c1
 800678c:	080064dd 	.word	0x080064dd
 8006790:	0800767a 	.word	0x0800767a

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fb f806 	bl	80017b0 <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	200002e4 	.word	0x200002e4

080067b4 <__assert_func>:
 80067b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067b6:	4614      	mov	r4, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <__assert_func+0x2c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	68d8      	ldr	r0, [r3, #12]
 80067c2:	b14c      	cbz	r4, 80067d8 <__assert_func+0x24>
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <__assert_func+0x30>)
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067cc:	4906      	ldr	r1, [pc, #24]	; (80067e8 <__assert_func+0x34>)
 80067ce:	462b      	mov	r3, r5
 80067d0:	f000 f80e 	bl	80067f0 <fiprintf>
 80067d4:	f000 faac 	bl	8006d30 <abort>
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <__assert_func+0x38>)
 80067da:	461c      	mov	r4, r3
 80067dc:	e7f3      	b.n	80067c6 <__assert_func+0x12>
 80067de:	bf00      	nop
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	08007685 	.word	0x08007685
 80067e8:	08007692 	.word	0x08007692
 80067ec:	080076c0 	.word	0x080076c0

080067f0 <fiprintf>:
 80067f0:	b40e      	push	{r1, r2, r3}
 80067f2:	b503      	push	{r0, r1, lr}
 80067f4:	4601      	mov	r1, r0
 80067f6:	ab03      	add	r3, sp, #12
 80067f8:	4805      	ldr	r0, [pc, #20]	; (8006810 <fiprintf+0x20>)
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	6800      	ldr	r0, [r0, #0]
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	f000 f897 	bl	8006934 <_vfiprintf_r>
 8006806:	b002      	add	sp, #8
 8006808:	f85d eb04 	ldr.w	lr, [sp], #4
 800680c:	b003      	add	sp, #12
 800680e:	4770      	bx	lr
 8006810:	2000000c 	.word	0x2000000c

08006814 <__ascii_mbtowc>:
 8006814:	b082      	sub	sp, #8
 8006816:	b901      	cbnz	r1, 800681a <__ascii_mbtowc+0x6>
 8006818:	a901      	add	r1, sp, #4
 800681a:	b142      	cbz	r2, 800682e <__ascii_mbtowc+0x1a>
 800681c:	b14b      	cbz	r3, 8006832 <__ascii_mbtowc+0x1e>
 800681e:	7813      	ldrb	r3, [r2, #0]
 8006820:	600b      	str	r3, [r1, #0]
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	1e10      	subs	r0, r2, #0
 8006826:	bf18      	it	ne
 8006828:	2001      	movne	r0, #1
 800682a:	b002      	add	sp, #8
 800682c:	4770      	bx	lr
 800682e:	4610      	mov	r0, r2
 8006830:	e7fb      	b.n	800682a <__ascii_mbtowc+0x16>
 8006832:	f06f 0001 	mvn.w	r0, #1
 8006836:	e7f8      	b.n	800682a <__ascii_mbtowc+0x16>

08006838 <memmove>:
 8006838:	4288      	cmp	r0, r1
 800683a:	b510      	push	{r4, lr}
 800683c:	eb01 0402 	add.w	r4, r1, r2
 8006840:	d902      	bls.n	8006848 <memmove+0x10>
 8006842:	4284      	cmp	r4, r0
 8006844:	4623      	mov	r3, r4
 8006846:	d807      	bhi.n	8006858 <memmove+0x20>
 8006848:	1e43      	subs	r3, r0, #1
 800684a:	42a1      	cmp	r1, r4
 800684c:	d008      	beq.n	8006860 <memmove+0x28>
 800684e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006856:	e7f8      	b.n	800684a <memmove+0x12>
 8006858:	4402      	add	r2, r0
 800685a:	4601      	mov	r1, r0
 800685c:	428a      	cmp	r2, r1
 800685e:	d100      	bne.n	8006862 <memmove+0x2a>
 8006860:	bd10      	pop	{r4, pc}
 8006862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800686a:	e7f7      	b.n	800685c <memmove+0x24>

0800686c <__malloc_lock>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__malloc_lock+0x8>)
 800686e:	f000 bc1f 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	200002e8 	.word	0x200002e8

08006878 <__malloc_unlock>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__malloc_unlock+0x8>)
 800687a:	f000 bc1a 	b.w	80070b2 <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	200002e8 	.word	0x200002e8

08006884 <_realloc_r>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	4680      	mov	r8, r0
 800688a:	4614      	mov	r4, r2
 800688c:	460e      	mov	r6, r1
 800688e:	b921      	cbnz	r1, 800689a <_realloc_r+0x16>
 8006890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	4611      	mov	r1, r2
 8006896:	f7ff bdad 	b.w	80063f4 <_malloc_r>
 800689a:	b92a      	cbnz	r2, 80068a8 <_realloc_r+0x24>
 800689c:	f7ff fd3e 	bl	800631c <_free_r>
 80068a0:	4625      	mov	r5, r4
 80068a2:	4628      	mov	r0, r5
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	f000 fc6a 	bl	8007180 <_malloc_usable_size_r>
 80068ac:	4284      	cmp	r4, r0
 80068ae:	4607      	mov	r7, r0
 80068b0:	d802      	bhi.n	80068b8 <_realloc_r+0x34>
 80068b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068b6:	d812      	bhi.n	80068de <_realloc_r+0x5a>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4640      	mov	r0, r8
 80068bc:	f7ff fd9a 	bl	80063f4 <_malloc_r>
 80068c0:	4605      	mov	r5, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0ed      	beq.n	80068a2 <_realloc_r+0x1e>
 80068c6:	42bc      	cmp	r4, r7
 80068c8:	4622      	mov	r2, r4
 80068ca:	4631      	mov	r1, r6
 80068cc:	bf28      	it	cs
 80068ce:	463a      	movcs	r2, r7
 80068d0:	f7ff f97c 	bl	8005bcc <memcpy>
 80068d4:	4631      	mov	r1, r6
 80068d6:	4640      	mov	r0, r8
 80068d8:	f7ff fd20 	bl	800631c <_free_r>
 80068dc:	e7e1      	b.n	80068a2 <_realloc_r+0x1e>
 80068de:	4635      	mov	r5, r6
 80068e0:	e7df      	b.n	80068a2 <_realloc_r+0x1e>

080068e2 <__sfputc_r>:
 80068e2:	6893      	ldr	r3, [r2, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	b410      	push	{r4}
 80068ea:	6093      	str	r3, [r2, #8]
 80068ec:	da08      	bge.n	8006900 <__sfputc_r+0x1e>
 80068ee:	6994      	ldr	r4, [r2, #24]
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	db01      	blt.n	80068f8 <__sfputc_r+0x16>
 80068f4:	290a      	cmp	r1, #10
 80068f6:	d103      	bne.n	8006900 <__sfputc_r+0x1e>
 80068f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068fc:	f000 b94a 	b.w	8006b94 <__swbuf_r>
 8006900:	6813      	ldr	r3, [r2, #0]
 8006902:	1c58      	adds	r0, r3, #1
 8006904:	6010      	str	r0, [r2, #0]
 8006906:	7019      	strb	r1, [r3, #0]
 8006908:	4608      	mov	r0, r1
 800690a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690e:	4770      	bx	lr

08006910 <__sfputs_r>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	4606      	mov	r6, r0
 8006914:	460f      	mov	r7, r1
 8006916:	4614      	mov	r4, r2
 8006918:	18d5      	adds	r5, r2, r3
 800691a:	42ac      	cmp	r4, r5
 800691c:	d101      	bne.n	8006922 <__sfputs_r+0x12>
 800691e:	2000      	movs	r0, #0
 8006920:	e007      	b.n	8006932 <__sfputs_r+0x22>
 8006922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006926:	463a      	mov	r2, r7
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff ffda 	bl	80068e2 <__sfputc_r>
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	d1f3      	bne.n	800691a <__sfputs_r+0xa>
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006934 <_vfiprintf_r>:
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	460d      	mov	r5, r1
 800693a:	b09d      	sub	sp, #116	; 0x74
 800693c:	4614      	mov	r4, r2
 800693e:	4698      	mov	r8, r3
 8006940:	4606      	mov	r6, r0
 8006942:	b118      	cbz	r0, 800694c <_vfiprintf_r+0x18>
 8006944:	6983      	ldr	r3, [r0, #24]
 8006946:	b90b      	cbnz	r3, 800694c <_vfiprintf_r+0x18>
 8006948:	f000 fb14 	bl	8006f74 <__sinit>
 800694c:	4b89      	ldr	r3, [pc, #548]	; (8006b74 <_vfiprintf_r+0x240>)
 800694e:	429d      	cmp	r5, r3
 8006950:	d11b      	bne.n	800698a <_vfiprintf_r+0x56>
 8006952:	6875      	ldr	r5, [r6, #4]
 8006954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006956:	07d9      	lsls	r1, r3, #31
 8006958:	d405      	bmi.n	8006966 <_vfiprintf_r+0x32>
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	059a      	lsls	r2, r3, #22
 800695e:	d402      	bmi.n	8006966 <_vfiprintf_r+0x32>
 8006960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006962:	f000 fba5 	bl	80070b0 <__retarget_lock_acquire_recursive>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	071b      	lsls	r3, r3, #28
 800696a:	d501      	bpl.n	8006970 <_vfiprintf_r+0x3c>
 800696c:	692b      	ldr	r3, [r5, #16]
 800696e:	b9eb      	cbnz	r3, 80069ac <_vfiprintf_r+0x78>
 8006970:	4629      	mov	r1, r5
 8006972:	4630      	mov	r0, r6
 8006974:	f000 f96e 	bl	8006c54 <__swsetup_r>
 8006978:	b1c0      	cbz	r0, 80069ac <_vfiprintf_r+0x78>
 800697a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800697c:	07dc      	lsls	r4, r3, #31
 800697e:	d50e      	bpl.n	800699e <_vfiprintf_r+0x6a>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	b01d      	add	sp, #116	; 0x74
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <_vfiprintf_r+0x244>)
 800698c:	429d      	cmp	r5, r3
 800698e:	d101      	bne.n	8006994 <_vfiprintf_r+0x60>
 8006990:	68b5      	ldr	r5, [r6, #8]
 8006992:	e7df      	b.n	8006954 <_vfiprintf_r+0x20>
 8006994:	4b79      	ldr	r3, [pc, #484]	; (8006b7c <_vfiprintf_r+0x248>)
 8006996:	429d      	cmp	r5, r3
 8006998:	bf08      	it	eq
 800699a:	68f5      	ldreq	r5, [r6, #12]
 800699c:	e7da      	b.n	8006954 <_vfiprintf_r+0x20>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	0598      	lsls	r0, r3, #22
 80069a2:	d4ed      	bmi.n	8006980 <_vfiprintf_r+0x4c>
 80069a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a6:	f000 fb84 	bl	80070b2 <__retarget_lock_release_recursive>
 80069aa:	e7e9      	b.n	8006980 <_vfiprintf_r+0x4c>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	2320      	movs	r3, #32
 80069b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ba:	2330      	movs	r3, #48	; 0x30
 80069bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b80 <_vfiprintf_r+0x24c>
 80069c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c4:	f04f 0901 	mov.w	r9, #1
 80069c8:	4623      	mov	r3, r4
 80069ca:	469a      	mov	sl, r3
 80069cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d0:	b10a      	cbz	r2, 80069d6 <_vfiprintf_r+0xa2>
 80069d2:	2a25      	cmp	r2, #37	; 0x25
 80069d4:	d1f9      	bne.n	80069ca <_vfiprintf_r+0x96>
 80069d6:	ebba 0b04 	subs.w	fp, sl, r4
 80069da:	d00b      	beq.n	80069f4 <_vfiprintf_r+0xc0>
 80069dc:	465b      	mov	r3, fp
 80069de:	4622      	mov	r2, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff94 	bl	8006910 <__sfputs_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	f000 80aa 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	445a      	add	r2, fp
 80069f2:	9209      	str	r2, [sp, #36]	; 0x24
 80069f4:	f89a 3000 	ldrb.w	r3, [sl]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a2 	beq.w	8006b42 <_vfiprintf_r+0x20e>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a14:	931a      	str	r3, [sp, #104]	; 0x68
 8006a16:	4654      	mov	r4, sl
 8006a18:	2205      	movs	r2, #5
 8006a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1e:	4858      	ldr	r0, [pc, #352]	; (8006b80 <_vfiprintf_r+0x24c>)
 8006a20:	f7f9 fbe6 	bl	80001f0 <memchr>
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	b9d8      	cbnz	r0, 8006a60 <_vfiprintf_r+0x12c>
 8006a28:	06d1      	lsls	r1, r2, #27
 8006a2a:	bf44      	itt	mi
 8006a2c:	2320      	movmi	r3, #32
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a32:	0713      	lsls	r3, r2, #28
 8006a34:	bf44      	itt	mi
 8006a36:	232b      	movmi	r3, #43	; 0x2b
 8006a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a40:	2b2a      	cmp	r3, #42	; 0x2a
 8006a42:	d015      	beq.n	8006a70 <_vfiprintf_r+0x13c>
 8006a44:	9a07      	ldr	r2, [sp, #28]
 8006a46:	4654      	mov	r4, sl
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4621      	mov	r1, r4
 8006a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a54:	3b30      	subs	r3, #48	; 0x30
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d94e      	bls.n	8006af8 <_vfiprintf_r+0x1c4>
 8006a5a:	b1b0      	cbz	r0, 8006a8a <_vfiprintf_r+0x156>
 8006a5c:	9207      	str	r2, [sp, #28]
 8006a5e:	e014      	b.n	8006a8a <_vfiprintf_r+0x156>
 8006a60:	eba0 0308 	sub.w	r3, r0, r8
 8006a64:	fa09 f303 	lsl.w	r3, r9, r3
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	46a2      	mov	sl, r4
 8006a6e:	e7d2      	b.n	8006a16 <_vfiprintf_r+0xe2>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9103      	str	r1, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbb      	ittet	lt
 8006a7c:	425b      	neglt	r3, r3
 8006a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a82:	9307      	strge	r3, [sp, #28]
 8006a84:	9307      	strlt	r3, [sp, #28]
 8006a86:	bfb8      	it	lt
 8006a88:	9204      	strlt	r2, [sp, #16]
 8006a8a:	7823      	ldrb	r3, [r4, #0]
 8006a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8e:	d10c      	bne.n	8006aaa <_vfiprintf_r+0x176>
 8006a90:	7863      	ldrb	r3, [r4, #1]
 8006a92:	2b2a      	cmp	r3, #42	; 0x2a
 8006a94:	d135      	bne.n	8006b02 <_vfiprintf_r+0x1ce>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfb8      	it	lt
 8006aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aa6:	3402      	adds	r4, #2
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b90 <_vfiprintf_r+0x25c>
 8006aae:	7821      	ldrb	r1, [r4, #0]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	4650      	mov	r0, sl
 8006ab4:	f7f9 fb9c 	bl	80001f0 <memchr>
 8006ab8:	b140      	cbz	r0, 8006acc <_vfiprintf_r+0x198>
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	eba0 000a 	sub.w	r0, r0, sl
 8006ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	4303      	orrs	r3, r0
 8006ac8:	3401      	adds	r4, #1
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	482c      	ldr	r0, [pc, #176]	; (8006b84 <_vfiprintf_r+0x250>)
 8006ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad6:	2206      	movs	r2, #6
 8006ad8:	f7f9 fb8a 	bl	80001f0 <memchr>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d03f      	beq.n	8006b60 <_vfiprintf_r+0x22c>
 8006ae0:	4b29      	ldr	r3, [pc, #164]	; (8006b88 <_vfiprintf_r+0x254>)
 8006ae2:	bb1b      	cbnz	r3, 8006b2c <_vfiprintf_r+0x1f8>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	f023 0307 	bic.w	r3, r3, #7
 8006aec:	3308      	adds	r3, #8
 8006aee:	9303      	str	r3, [sp, #12]
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	443b      	add	r3, r7
 8006af4:	9309      	str	r3, [sp, #36]	; 0x24
 8006af6:	e767      	b.n	80069c8 <_vfiprintf_r+0x94>
 8006af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006afc:	460c      	mov	r4, r1
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7a5      	b.n	8006a4e <_vfiprintf_r+0x11a>
 8006b02:	2300      	movs	r3, #0
 8006b04:	3401      	adds	r4, #1
 8006b06:	9305      	str	r3, [sp, #20]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f04f 0c0a 	mov.w	ip, #10
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b14:	3a30      	subs	r2, #48	; 0x30
 8006b16:	2a09      	cmp	r2, #9
 8006b18:	d903      	bls.n	8006b22 <_vfiprintf_r+0x1ee>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c5      	beq.n	8006aaa <_vfiprintf_r+0x176>
 8006b1e:	9105      	str	r1, [sp, #20]
 8006b20:	e7c3      	b.n	8006aaa <_vfiprintf_r+0x176>
 8006b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b26:	4604      	mov	r4, r0
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e7f0      	b.n	8006b0e <_vfiprintf_r+0x1da>
 8006b2c:	ab03      	add	r3, sp, #12
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b34:	a904      	add	r1, sp, #16
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7fd fdc2 	bl	80046c0 <_printf_float>
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	1c78      	adds	r0, r7, #1
 8006b40:	d1d6      	bne.n	8006af0 <_vfiprintf_r+0x1bc>
 8006b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b44:	07d9      	lsls	r1, r3, #31
 8006b46:	d405      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b48:	89ab      	ldrh	r3, [r5, #12]
 8006b4a:	059a      	lsls	r2, r3, #22
 8006b4c:	d402      	bmi.n	8006b54 <_vfiprintf_r+0x220>
 8006b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b50:	f000 faaf 	bl	80070b2 <__retarget_lock_release_recursive>
 8006b54:	89ab      	ldrh	r3, [r5, #12]
 8006b56:	065b      	lsls	r3, r3, #25
 8006b58:	f53f af12 	bmi.w	8006980 <_vfiprintf_r+0x4c>
 8006b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5e:	e711      	b.n	8006984 <_vfiprintf_r+0x50>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_vfiprintf_r+0x258>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7fe f84c 	bl	8004c08 <_printf_i>
 8006b70:	e7e4      	b.n	8006b3c <_vfiprintf_r+0x208>
 8006b72:	bf00      	nop
 8006b74:	080077ec 	.word	0x080077ec
 8006b78:	0800780c 	.word	0x0800780c
 8006b7c:	080077cc 	.word	0x080077cc
 8006b80:	08007674 	.word	0x08007674
 8006b84:	0800767e 	.word	0x0800767e
 8006b88:	080046c1 	.word	0x080046c1
 8006b8c:	08006911 	.word	0x08006911
 8006b90:	0800767a 	.word	0x0800767a

08006b94 <__swbuf_r>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	460e      	mov	r6, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	4605      	mov	r5, r0
 8006b9c:	b118      	cbz	r0, 8006ba6 <__swbuf_r+0x12>
 8006b9e:	6983      	ldr	r3, [r0, #24]
 8006ba0:	b90b      	cbnz	r3, 8006ba6 <__swbuf_r+0x12>
 8006ba2:	f000 f9e7 	bl	8006f74 <__sinit>
 8006ba6:	4b21      	ldr	r3, [pc, #132]	; (8006c2c <__swbuf_r+0x98>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d12b      	bne.n	8006c04 <__swbuf_r+0x70>
 8006bac:	686c      	ldr	r4, [r5, #4]
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	071a      	lsls	r2, r3, #28
 8006bb6:	d52f      	bpl.n	8006c18 <__swbuf_r+0x84>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	b36b      	cbz	r3, 8006c18 <__swbuf_r+0x84>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6820      	ldr	r0, [r4, #0]
 8006bc0:	1ac0      	subs	r0, r0, r3
 8006bc2:	6963      	ldr	r3, [r4, #20]
 8006bc4:	b2f6      	uxtb	r6, r6
 8006bc6:	4283      	cmp	r3, r0
 8006bc8:	4637      	mov	r7, r6
 8006bca:	dc04      	bgt.n	8006bd6 <__swbuf_r+0x42>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f93c 	bl	8006e4c <_fflush_r>
 8006bd4:	bb30      	cbnz	r0, 8006c24 <__swbuf_r+0x90>
 8006bd6:	68a3      	ldr	r3, [r4, #8]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	701e      	strb	r6, [r3, #0]
 8006be4:	6963      	ldr	r3, [r4, #20]
 8006be6:	3001      	adds	r0, #1
 8006be8:	4283      	cmp	r3, r0
 8006bea:	d004      	beq.n	8006bf6 <__swbuf_r+0x62>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	07db      	lsls	r3, r3, #31
 8006bf0:	d506      	bpl.n	8006c00 <__swbuf_r+0x6c>
 8006bf2:	2e0a      	cmp	r6, #10
 8006bf4:	d104      	bne.n	8006c00 <__swbuf_r+0x6c>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f927 	bl	8006e4c <_fflush_r>
 8006bfe:	b988      	cbnz	r0, 8006c24 <__swbuf_r+0x90>
 8006c00:	4638      	mov	r0, r7
 8006c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <__swbuf_r+0x9c>)
 8006c06:	429c      	cmp	r4, r3
 8006c08:	d101      	bne.n	8006c0e <__swbuf_r+0x7a>
 8006c0a:	68ac      	ldr	r4, [r5, #8]
 8006c0c:	e7cf      	b.n	8006bae <__swbuf_r+0x1a>
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <__swbuf_r+0xa0>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	bf08      	it	eq
 8006c14:	68ec      	ldreq	r4, [r5, #12]
 8006c16:	e7ca      	b.n	8006bae <__swbuf_r+0x1a>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f81a 	bl	8006c54 <__swsetup_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d0cb      	beq.n	8006bbc <__swbuf_r+0x28>
 8006c24:	f04f 37ff 	mov.w	r7, #4294967295
 8006c28:	e7ea      	b.n	8006c00 <__swbuf_r+0x6c>
 8006c2a:	bf00      	nop
 8006c2c:	080077ec 	.word	0x080077ec
 8006c30:	0800780c 	.word	0x0800780c
 8006c34:	080077cc 	.word	0x080077cc

08006c38 <__ascii_wctomb>:
 8006c38:	b149      	cbz	r1, 8006c4e <__ascii_wctomb+0x16>
 8006c3a:	2aff      	cmp	r2, #255	; 0xff
 8006c3c:	bf85      	ittet	hi
 8006c3e:	238a      	movhi	r3, #138	; 0x8a
 8006c40:	6003      	strhi	r3, [r0, #0]
 8006c42:	700a      	strbls	r2, [r1, #0]
 8006c44:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c48:	bf98      	it	ls
 8006c4a:	2001      	movls	r0, #1
 8006c4c:	4770      	bx	lr
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4770      	bx	lr
	...

08006c54 <__swsetup_r>:
 8006c54:	4b32      	ldr	r3, [pc, #200]	; (8006d20 <__swsetup_r+0xcc>)
 8006c56:	b570      	push	{r4, r5, r6, lr}
 8006c58:	681d      	ldr	r5, [r3, #0]
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	b125      	cbz	r5, 8006c6a <__swsetup_r+0x16>
 8006c60:	69ab      	ldr	r3, [r5, #24]
 8006c62:	b913      	cbnz	r3, 8006c6a <__swsetup_r+0x16>
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 f985 	bl	8006f74 <__sinit>
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <__swsetup_r+0xd0>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d10f      	bne.n	8006c90 <__swsetup_r+0x3c>
 8006c70:	686c      	ldr	r4, [r5, #4]
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c78:	0719      	lsls	r1, r3, #28
 8006c7a:	d42c      	bmi.n	8006cd6 <__swsetup_r+0x82>
 8006c7c:	06dd      	lsls	r5, r3, #27
 8006c7e:	d411      	bmi.n	8006ca4 <__swsetup_r+0x50>
 8006c80:	2309      	movs	r3, #9
 8006c82:	6033      	str	r3, [r6, #0]
 8006c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e03e      	b.n	8006d0e <__swsetup_r+0xba>
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <__swsetup_r+0xd4>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d101      	bne.n	8006c9a <__swsetup_r+0x46>
 8006c96:	68ac      	ldr	r4, [r5, #8]
 8006c98:	e7eb      	b.n	8006c72 <__swsetup_r+0x1e>
 8006c9a:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <__swsetup_r+0xd8>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	bf08      	it	eq
 8006ca0:	68ec      	ldreq	r4, [r5, #12]
 8006ca2:	e7e6      	b.n	8006c72 <__swsetup_r+0x1e>
 8006ca4:	0758      	lsls	r0, r3, #29
 8006ca6:	d512      	bpl.n	8006cce <__swsetup_r+0x7a>
 8006ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006caa:	b141      	cbz	r1, 8006cbe <__swsetup_r+0x6a>
 8006cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d002      	beq.n	8006cba <__swsetup_r+0x66>
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7ff fb31 	bl	800631c <_free_r>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6063      	str	r3, [r4, #4]
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f043 0308 	orr.w	r3, r3, #8
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	b94b      	cbnz	r3, 8006cee <__swsetup_r+0x9a>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce4:	d003      	beq.n	8006cee <__swsetup_r+0x9a>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 fa09 	bl	8007100 <__smakebuf_r>
 8006cee:	89a0      	ldrh	r0, [r4, #12]
 8006cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf4:	f010 0301 	ands.w	r3, r0, #1
 8006cf8:	d00a      	beq.n	8006d10 <__swsetup_r+0xbc>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6963      	ldr	r3, [r4, #20]
 8006d00:	425b      	negs	r3, r3
 8006d02:	61a3      	str	r3, [r4, #24]
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	b943      	cbnz	r3, 8006d1a <__swsetup_r+0xc6>
 8006d08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d0c:	d1ba      	bne.n	8006c84 <__swsetup_r+0x30>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	0781      	lsls	r1, r0, #30
 8006d12:	bf58      	it	pl
 8006d14:	6963      	ldrpl	r3, [r4, #20]
 8006d16:	60a3      	str	r3, [r4, #8]
 8006d18:	e7f4      	b.n	8006d04 <__swsetup_r+0xb0>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e7f7      	b.n	8006d0e <__swsetup_r+0xba>
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c
 8006d24:	080077ec 	.word	0x080077ec
 8006d28:	0800780c 	.word	0x0800780c
 8006d2c:	080077cc 	.word	0x080077cc

08006d30 <abort>:
 8006d30:	b508      	push	{r3, lr}
 8006d32:	2006      	movs	r0, #6
 8006d34:	f000 fa54 	bl	80071e0 <raise>
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f7fa fcc1 	bl	80016c0 <_exit>
	...

08006d40 <__sflush_r>:
 8006d40:	898a      	ldrh	r2, [r1, #12]
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	4605      	mov	r5, r0
 8006d48:	0710      	lsls	r0, r2, #28
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	d458      	bmi.n	8006e00 <__sflush_r+0xc0>
 8006d4e:	684b      	ldr	r3, [r1, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dc05      	bgt.n	8006d60 <__sflush_r+0x20>
 8006d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dc02      	bgt.n	8006d60 <__sflush_r+0x20>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d0f9      	beq.n	8006d5a <__sflush_r+0x1a>
 8006d66:	2300      	movs	r3, #0
 8006d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d6c:	682f      	ldr	r7, [r5, #0]
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	d032      	beq.n	8006dd8 <__sflush_r+0x98>
 8006d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	075a      	lsls	r2, r3, #29
 8006d78:	d505      	bpl.n	8006d86 <__sflush_r+0x46>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	1ac0      	subs	r0, r0, r3
 8006d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d80:	b10b      	cbz	r3, 8006d86 <__sflush_r+0x46>
 8006d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d84:	1ac0      	subs	r0, r0, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d8c:	6a21      	ldr	r1, [r4, #32]
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b0      	blx	r6
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	d106      	bne.n	8006da6 <__sflush_r+0x66>
 8006d98:	6829      	ldr	r1, [r5, #0]
 8006d9a:	291d      	cmp	r1, #29
 8006d9c:	d82c      	bhi.n	8006df8 <__sflush_r+0xb8>
 8006d9e:	4a2a      	ldr	r2, [pc, #168]	; (8006e48 <__sflush_r+0x108>)
 8006da0:	40ca      	lsrs	r2, r1
 8006da2:	07d6      	lsls	r6, r2, #31
 8006da4:	d528      	bpl.n	8006df8 <__sflush_r+0xb8>
 8006da6:	2200      	movs	r2, #0
 8006da8:	6062      	str	r2, [r4, #4]
 8006daa:	04d9      	lsls	r1, r3, #19
 8006dac:	6922      	ldr	r2, [r4, #16]
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	d504      	bpl.n	8006dbc <__sflush_r+0x7c>
 8006db2:	1c42      	adds	r2, r0, #1
 8006db4:	d101      	bne.n	8006dba <__sflush_r+0x7a>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	b903      	cbnz	r3, 8006dbc <__sflush_r+0x7c>
 8006dba:	6560      	str	r0, [r4, #84]	; 0x54
 8006dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dbe:	602f      	str	r7, [r5, #0]
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	d0ca      	beq.n	8006d5a <__sflush_r+0x1a>
 8006dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	d002      	beq.n	8006dd2 <__sflush_r+0x92>
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f7ff faa5 	bl	800631c <_free_r>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8006dd6:	e7c1      	b.n	8006d5c <__sflush_r+0x1c>
 8006dd8:	6a21      	ldr	r1, [r4, #32]
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b0      	blx	r6
 8006de0:	1c41      	adds	r1, r0, #1
 8006de2:	d1c7      	bne.n	8006d74 <__sflush_r+0x34>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0c4      	beq.n	8006d74 <__sflush_r+0x34>
 8006dea:	2b1d      	cmp	r3, #29
 8006dec:	d001      	beq.n	8006df2 <__sflush_r+0xb2>
 8006dee:	2b16      	cmp	r3, #22
 8006df0:	d101      	bne.n	8006df6 <__sflush_r+0xb6>
 8006df2:	602f      	str	r7, [r5, #0]
 8006df4:	e7b1      	b.n	8006d5a <__sflush_r+0x1a>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	e7ad      	b.n	8006d5c <__sflush_r+0x1c>
 8006e00:	690f      	ldr	r7, [r1, #16]
 8006e02:	2f00      	cmp	r7, #0
 8006e04:	d0a9      	beq.n	8006d5a <__sflush_r+0x1a>
 8006e06:	0793      	lsls	r3, r2, #30
 8006e08:	680e      	ldr	r6, [r1, #0]
 8006e0a:	bf08      	it	eq
 8006e0c:	694b      	ldreq	r3, [r1, #20]
 8006e0e:	600f      	str	r7, [r1, #0]
 8006e10:	bf18      	it	ne
 8006e12:	2300      	movne	r3, #0
 8006e14:	eba6 0807 	sub.w	r8, r6, r7
 8006e18:	608b      	str	r3, [r1, #8]
 8006e1a:	f1b8 0f00 	cmp.w	r8, #0
 8006e1e:	dd9c      	ble.n	8006d5a <__sflush_r+0x1a>
 8006e20:	6a21      	ldr	r1, [r4, #32]
 8006e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e24:	4643      	mov	r3, r8
 8006e26:	463a      	mov	r2, r7
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b0      	blx	r6
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dc06      	bgt.n	8006e3e <__sflush_r+0xfe>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	e78e      	b.n	8006d5c <__sflush_r+0x1c>
 8006e3e:	4407      	add	r7, r0
 8006e40:	eba8 0800 	sub.w	r8, r8, r0
 8006e44:	e7e9      	b.n	8006e1a <__sflush_r+0xda>
 8006e46:	bf00      	nop
 8006e48:	20400001 	.word	0x20400001

08006e4c <_fflush_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	4605      	mov	r5, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	b913      	cbnz	r3, 8006e5c <_fflush_r+0x10>
 8006e56:	2500      	movs	r5, #0
 8006e58:	4628      	mov	r0, r5
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	b118      	cbz	r0, 8006e66 <_fflush_r+0x1a>
 8006e5e:	6983      	ldr	r3, [r0, #24]
 8006e60:	b90b      	cbnz	r3, 8006e66 <_fflush_r+0x1a>
 8006e62:	f000 f887 	bl	8006f74 <__sinit>
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <_fflush_r+0x6c>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d11b      	bne.n	8006ea4 <_fflush_r+0x58>
 8006e6c:	686c      	ldr	r4, [r5, #4]
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0ef      	beq.n	8006e56 <_fflush_r+0xa>
 8006e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d404      	bmi.n	8006e86 <_fflush_r+0x3a>
 8006e7c:	0599      	lsls	r1, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_fflush_r+0x3a>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f000 f915 	bl	80070b0 <__retarget_lock_acquire_recursive>
 8006e86:	4628      	mov	r0, r5
 8006e88:	4621      	mov	r1, r4
 8006e8a:	f7ff ff59 	bl	8006d40 <__sflush_r>
 8006e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e90:	07da      	lsls	r2, r3, #31
 8006e92:	4605      	mov	r5, r0
 8006e94:	d4e0      	bmi.n	8006e58 <_fflush_r+0xc>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	059b      	lsls	r3, r3, #22
 8006e9a:	d4dd      	bmi.n	8006e58 <_fflush_r+0xc>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e9e:	f000 f908 	bl	80070b2 <__retarget_lock_release_recursive>
 8006ea2:	e7d9      	b.n	8006e58 <_fflush_r+0xc>
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <_fflush_r+0x70>)
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d101      	bne.n	8006eae <_fflush_r+0x62>
 8006eaa:	68ac      	ldr	r4, [r5, #8]
 8006eac:	e7df      	b.n	8006e6e <_fflush_r+0x22>
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <_fflush_r+0x74>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	bf08      	it	eq
 8006eb4:	68ec      	ldreq	r4, [r5, #12]
 8006eb6:	e7da      	b.n	8006e6e <_fflush_r+0x22>
 8006eb8:	080077ec 	.word	0x080077ec
 8006ebc:	0800780c 	.word	0x0800780c
 8006ec0:	080077cc 	.word	0x080077cc

08006ec4 <std>:
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	4604      	mov	r4, r0
 8006eca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ed2:	6083      	str	r3, [r0, #8]
 8006ed4:	8181      	strh	r1, [r0, #12]
 8006ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ed8:	81c2      	strh	r2, [r0, #14]
 8006eda:	6183      	str	r3, [r0, #24]
 8006edc:	4619      	mov	r1, r3
 8006ede:	2208      	movs	r2, #8
 8006ee0:	305c      	adds	r0, #92	; 0x5c
 8006ee2:	f7fd fb45 	bl	8004570 <memset>
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <std+0x38>)
 8006ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <std+0x3c>)
 8006eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <std+0x40>)
 8006ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <std+0x44>)
 8006ef4:	6224      	str	r4, [r4, #32]
 8006ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	bf00      	nop
 8006efc:	08007219 	.word	0x08007219
 8006f00:	0800723b 	.word	0x0800723b
 8006f04:	08007273 	.word	0x08007273
 8006f08:	08007297 	.word	0x08007297

08006f0c <_cleanup_r>:
 8006f0c:	4901      	ldr	r1, [pc, #4]	; (8006f14 <_cleanup_r+0x8>)
 8006f0e:	f000 b8af 	b.w	8007070 <_fwalk_reent>
 8006f12:	bf00      	nop
 8006f14:	08006e4d 	.word	0x08006e4d

08006f18 <__sfmoreglue>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	2268      	movs	r2, #104	; 0x68
 8006f1c:	1e4d      	subs	r5, r1, #1
 8006f1e:	4355      	muls	r5, r2
 8006f20:	460e      	mov	r6, r1
 8006f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f26:	f7ff fa65 	bl	80063f4 <_malloc_r>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	b140      	cbz	r0, 8006f40 <__sfmoreglue+0x28>
 8006f2e:	2100      	movs	r1, #0
 8006f30:	e9c0 1600 	strd	r1, r6, [r0]
 8006f34:	300c      	adds	r0, #12
 8006f36:	60a0      	str	r0, [r4, #8]
 8006f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f3c:	f7fd fb18 	bl	8004570 <memset>
 8006f40:	4620      	mov	r0, r4
 8006f42:	bd70      	pop	{r4, r5, r6, pc}

08006f44 <__sfp_lock_acquire>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__sfp_lock_acquire+0x8>)
 8006f46:	f000 b8b3 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	200002e9 	.word	0x200002e9

08006f50 <__sfp_lock_release>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__sfp_lock_release+0x8>)
 8006f52:	f000 b8ae 	b.w	80070b2 <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	200002e9 	.word	0x200002e9

08006f5c <__sinit_lock_acquire>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__sinit_lock_acquire+0x8>)
 8006f5e:	f000 b8a7 	b.w	80070b0 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	200002ea 	.word	0x200002ea

08006f68 <__sinit_lock_release>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__sinit_lock_release+0x8>)
 8006f6a:	f000 b8a2 	b.w	80070b2 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	200002ea 	.word	0x200002ea

08006f74 <__sinit>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	4604      	mov	r4, r0
 8006f78:	f7ff fff0 	bl	8006f5c <__sinit_lock_acquire>
 8006f7c:	69a3      	ldr	r3, [r4, #24]
 8006f7e:	b11b      	cbz	r3, 8006f88 <__sinit+0x14>
 8006f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f84:	f7ff bff0 	b.w	8006f68 <__sinit_lock_release>
 8006f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <__sinit+0x68>)
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <__sinit+0x6c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	bf04      	itt	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	61a3      	streq	r3, [r4, #24]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 f820 	bl	8006fe4 <__sfp>
 8006fa4:	6060      	str	r0, [r4, #4]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f81c 	bl	8006fe4 <__sfp>
 8006fac:	60a0      	str	r0, [r4, #8]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f818 	bl	8006fe4 <__sfp>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	60e0      	str	r0, [r4, #12]
 8006fb8:	2104      	movs	r1, #4
 8006fba:	6860      	ldr	r0, [r4, #4]
 8006fbc:	f7ff ff82 	bl	8006ec4 <std>
 8006fc0:	68a0      	ldr	r0, [r4, #8]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	2109      	movs	r1, #9
 8006fc6:	f7ff ff7d 	bl	8006ec4 <std>
 8006fca:	68e0      	ldr	r0, [r4, #12]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	2112      	movs	r1, #18
 8006fd0:	f7ff ff78 	bl	8006ec4 <std>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	e7d2      	b.n	8006f80 <__sinit+0xc>
 8006fda:	bf00      	nop
 8006fdc:	08007450 	.word	0x08007450
 8006fe0:	08006f0d 	.word	0x08006f0d

08006fe4 <__sfp>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f7ff ffac 	bl	8006f44 <__sfp_lock_acquire>
 8006fec:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <__sfp+0x84>)
 8006fee:	681e      	ldr	r6, [r3, #0]
 8006ff0:	69b3      	ldr	r3, [r6, #24]
 8006ff2:	b913      	cbnz	r3, 8006ffa <__sfp+0x16>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff ffbd 	bl	8006f74 <__sinit>
 8006ffa:	3648      	adds	r6, #72	; 0x48
 8006ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007000:	3b01      	subs	r3, #1
 8007002:	d503      	bpl.n	800700c <__sfp+0x28>
 8007004:	6833      	ldr	r3, [r6, #0]
 8007006:	b30b      	cbz	r3, 800704c <__sfp+0x68>
 8007008:	6836      	ldr	r6, [r6, #0]
 800700a:	e7f7      	b.n	8006ffc <__sfp+0x18>
 800700c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007010:	b9d5      	cbnz	r5, 8007048 <__sfp+0x64>
 8007012:	4b16      	ldr	r3, [pc, #88]	; (800706c <__sfp+0x88>)
 8007014:	60e3      	str	r3, [r4, #12]
 8007016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800701a:	6665      	str	r5, [r4, #100]	; 0x64
 800701c:	f000 f847 	bl	80070ae <__retarget_lock_init_recursive>
 8007020:	f7ff ff96 	bl	8006f50 <__sfp_lock_release>
 8007024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800702c:	6025      	str	r5, [r4, #0]
 800702e:	61a5      	str	r5, [r4, #24]
 8007030:	2208      	movs	r2, #8
 8007032:	4629      	mov	r1, r5
 8007034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007038:	f7fd fa9a 	bl	8004570 <memset>
 800703c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007044:	4620      	mov	r0, r4
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007048:	3468      	adds	r4, #104	; 0x68
 800704a:	e7d9      	b.n	8007000 <__sfp+0x1c>
 800704c:	2104      	movs	r1, #4
 800704e:	4638      	mov	r0, r7
 8007050:	f7ff ff62 	bl	8006f18 <__sfmoreglue>
 8007054:	4604      	mov	r4, r0
 8007056:	6030      	str	r0, [r6, #0]
 8007058:	2800      	cmp	r0, #0
 800705a:	d1d5      	bne.n	8007008 <__sfp+0x24>
 800705c:	f7ff ff78 	bl	8006f50 <__sfp_lock_release>
 8007060:	230c      	movs	r3, #12
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	e7ee      	b.n	8007044 <__sfp+0x60>
 8007066:	bf00      	nop
 8007068:	08007450 	.word	0x08007450
 800706c:	ffff0001 	.word	0xffff0001

08007070 <_fwalk_reent>:
 8007070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007074:	4606      	mov	r6, r0
 8007076:	4688      	mov	r8, r1
 8007078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800707c:	2700      	movs	r7, #0
 800707e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007082:	f1b9 0901 	subs.w	r9, r9, #1
 8007086:	d505      	bpl.n	8007094 <_fwalk_reent+0x24>
 8007088:	6824      	ldr	r4, [r4, #0]
 800708a:	2c00      	cmp	r4, #0
 800708c:	d1f7      	bne.n	800707e <_fwalk_reent+0xe>
 800708e:	4638      	mov	r0, r7
 8007090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007094:	89ab      	ldrh	r3, [r5, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d907      	bls.n	80070aa <_fwalk_reent+0x3a>
 800709a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800709e:	3301      	adds	r3, #1
 80070a0:	d003      	beq.n	80070aa <_fwalk_reent+0x3a>
 80070a2:	4629      	mov	r1, r5
 80070a4:	4630      	mov	r0, r6
 80070a6:	47c0      	blx	r8
 80070a8:	4307      	orrs	r7, r0
 80070aa:	3568      	adds	r5, #104	; 0x68
 80070ac:	e7e9      	b.n	8007082 <_fwalk_reent+0x12>

080070ae <__retarget_lock_init_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <__retarget_lock_acquire_recursive>:
 80070b0:	4770      	bx	lr

080070b2 <__retarget_lock_release_recursive>:
 80070b2:	4770      	bx	lr

080070b4 <__swhatbuf_r>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	460e      	mov	r6, r1
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	2900      	cmp	r1, #0
 80070be:	b096      	sub	sp, #88	; 0x58
 80070c0:	4614      	mov	r4, r2
 80070c2:	461d      	mov	r5, r3
 80070c4:	da08      	bge.n	80070d8 <__swhatbuf_r+0x24>
 80070c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	061a      	lsls	r2, r3, #24
 80070d0:	d410      	bmi.n	80070f4 <__swhatbuf_r+0x40>
 80070d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d6:	e00e      	b.n	80070f6 <__swhatbuf_r+0x42>
 80070d8:	466a      	mov	r2, sp
 80070da:	f000 f903 	bl	80072e4 <_fstat_r>
 80070de:	2800      	cmp	r0, #0
 80070e0:	dbf1      	blt.n	80070c6 <__swhatbuf_r+0x12>
 80070e2:	9a01      	ldr	r2, [sp, #4]
 80070e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070ec:	425a      	negs	r2, r3
 80070ee:	415a      	adcs	r2, r3
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	e7ee      	b.n	80070d2 <__swhatbuf_r+0x1e>
 80070f4:	2340      	movs	r3, #64	; 0x40
 80070f6:	2000      	movs	r0, #0
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	b016      	add	sp, #88	; 0x58
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007100 <__smakebuf_r>:
 8007100:	898b      	ldrh	r3, [r1, #12]
 8007102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007104:	079d      	lsls	r5, r3, #30
 8007106:	4606      	mov	r6, r0
 8007108:	460c      	mov	r4, r1
 800710a:	d507      	bpl.n	800711c <__smakebuf_r+0x1c>
 800710c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	6123      	str	r3, [r4, #16]
 8007114:	2301      	movs	r3, #1
 8007116:	6163      	str	r3, [r4, #20]
 8007118:	b002      	add	sp, #8
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	ab01      	add	r3, sp, #4
 800711e:	466a      	mov	r2, sp
 8007120:	f7ff ffc8 	bl	80070b4 <__swhatbuf_r>
 8007124:	9900      	ldr	r1, [sp, #0]
 8007126:	4605      	mov	r5, r0
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff f963 	bl	80063f4 <_malloc_r>
 800712e:	b948      	cbnz	r0, 8007144 <__smakebuf_r+0x44>
 8007130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007134:	059a      	lsls	r2, r3, #22
 8007136:	d4ef      	bmi.n	8007118 <__smakebuf_r+0x18>
 8007138:	f023 0303 	bic.w	r3, r3, #3
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	e7e3      	b.n	800710c <__smakebuf_r+0xc>
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <__smakebuf_r+0x7c>)
 8007146:	62b3      	str	r3, [r6, #40]	; 0x28
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	6020      	str	r0, [r4, #0]
 800714c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	9b00      	ldr	r3, [sp, #0]
 8007154:	6163      	str	r3, [r4, #20]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	6120      	str	r0, [r4, #16]
 800715a:	b15b      	cbz	r3, 8007174 <__smakebuf_r+0x74>
 800715c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007160:	4630      	mov	r0, r6
 8007162:	f000 f8d1 	bl	8007308 <_isatty_r>
 8007166:	b128      	cbz	r0, 8007174 <__smakebuf_r+0x74>
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	89a0      	ldrh	r0, [r4, #12]
 8007176:	4305      	orrs	r5, r0
 8007178:	81a5      	strh	r5, [r4, #12]
 800717a:	e7cd      	b.n	8007118 <__smakebuf_r+0x18>
 800717c:	08006f0d 	.word	0x08006f0d

08007180 <_malloc_usable_size_r>:
 8007180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007184:	1f18      	subs	r0, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfbc      	itt	lt
 800718a:	580b      	ldrlt	r3, [r1, r0]
 800718c:	18c0      	addlt	r0, r0, r3
 800718e:	4770      	bx	lr

08007190 <_raise_r>:
 8007190:	291f      	cmp	r1, #31
 8007192:	b538      	push	{r3, r4, r5, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	460d      	mov	r5, r1
 8007198:	d904      	bls.n	80071a4 <_raise_r+0x14>
 800719a:	2316      	movs	r3, #22
 800719c:	6003      	str	r3, [r0, #0]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071a6:	b112      	cbz	r2, 80071ae <_raise_r+0x1e>
 80071a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ac:	b94b      	cbnz	r3, 80071c2 <_raise_r+0x32>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f830 	bl	8007214 <_getpid_r>
 80071b4:	462a      	mov	r2, r5
 80071b6:	4601      	mov	r1, r0
 80071b8:	4620      	mov	r0, r4
 80071ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071be:	f000 b817 	b.w	80071f0 <_kill_r>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d00a      	beq.n	80071dc <_raise_r+0x4c>
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	d103      	bne.n	80071d2 <_raise_r+0x42>
 80071ca:	2316      	movs	r3, #22
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7e7      	b.n	80071a2 <_raise_r+0x12>
 80071d2:	2400      	movs	r4, #0
 80071d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071d8:	4628      	mov	r0, r5
 80071da:	4798      	blx	r3
 80071dc:	2000      	movs	r0, #0
 80071de:	e7e0      	b.n	80071a2 <_raise_r+0x12>

080071e0 <raise>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <raise+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f7ff bfd3 	b.w	8007190 <_raise_r>
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <_kill_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	; (8007210 <_kill_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7fa fa4f 	bl	80016a0 <_kill>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_kill_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_kill_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	200002e4 	.word	0x200002e4

08007214 <_getpid_r>:
 8007214:	f7fa ba3c 	b.w	8001690 <_getpid>

08007218 <__sread>:
 8007218:	b510      	push	{r4, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	f000 f894 	bl	800734c <_read_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	bfab      	itete	ge
 8007228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800722a:	89a3      	ldrhlt	r3, [r4, #12]
 800722c:	181b      	addge	r3, r3, r0
 800722e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007232:	bfac      	ite	ge
 8007234:	6563      	strge	r3, [r4, #84]	; 0x54
 8007236:	81a3      	strhlt	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__swrite>:
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	461f      	mov	r7, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	05db      	lsls	r3, r3, #23
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4616      	mov	r6, r2
 800724a:	d505      	bpl.n	8007258 <__swrite+0x1e>
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	f000 f868 	bl	8007328 <_lseek_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	f000 b817 	b.w	80072a0 <_write_r>

08007272 <__sseek>:
 8007272:	b510      	push	{r4, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 f855 	bl	8007328 <_lseek_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	bf15      	itete	ne
 8007284:	6560      	strne	r0, [r4, #84]	; 0x54
 8007286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800728a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800728e:	81a3      	strheq	r3, [r4, #12]
 8007290:	bf18      	it	ne
 8007292:	81a3      	strhne	r3, [r4, #12]
 8007294:	bd10      	pop	{r4, pc}

08007296 <__sclose>:
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 b813 	b.w	80072c4 <_close_r>
	...

080072a0 <_write_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	; (80072c0 <_write_r+0x20>)
 80072a4:	4604      	mov	r4, r0
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7fa fa2d 	bl	800170e <_write>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_write_r+0x1e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_write_r+0x1e>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	200002e4 	.word	0x200002e4

080072c4 <_close_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d06      	ldr	r5, [pc, #24]	; (80072e0 <_close_r+0x1c>)
 80072c8:	2300      	movs	r3, #0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	f7fa fa39 	bl	8001746 <_close>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_close_r+0x1a>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_close_r+0x1a>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	200002e4 	.word	0x200002e4

080072e4 <_fstat_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4d07      	ldr	r5, [pc, #28]	; (8007304 <_fstat_r+0x20>)
 80072e8:	2300      	movs	r3, #0
 80072ea:	4604      	mov	r4, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	f7fa fa34 	bl	800175e <_fstat>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	d102      	bne.n	8007300 <_fstat_r+0x1c>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	b103      	cbz	r3, 8007300 <_fstat_r+0x1c>
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	bd38      	pop	{r3, r4, r5, pc}
 8007302:	bf00      	nop
 8007304:	200002e4 	.word	0x200002e4

08007308 <_isatty_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d06      	ldr	r5, [pc, #24]	; (8007324 <_isatty_r+0x1c>)
 800730c:	2300      	movs	r3, #0
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	f7fa fa33 	bl	800177e <_isatty>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_isatty_r+0x1a>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_isatty_r+0x1a>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	200002e4 	.word	0x200002e4

08007328 <_lseek_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	; (8007348 <_lseek_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7fa fa2c 	bl	8001794 <_lseek>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_lseek_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_lseek_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	200002e4 	.word	0x200002e4

0800734c <_read_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_read_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7fa f9ba 	bl	80016d4 <_read>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_read_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_read_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	200002e4 	.word	0x200002e4

08007370 <_init>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

0800737c <_fini>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr
