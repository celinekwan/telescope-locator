
hrz-to-equ-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a274  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e40  0800a418  0800a418  0001a418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c258  0800c258  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c258  0800c258  0001c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c260  0800c260  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c264  0800c264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001e0  0800c444  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  0800c444  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d988  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002262  00000000  00000000  0002db94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00030a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021df0  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e33f  00000000  00000000  000532f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1b06  00000000  00000000  0006162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000455c  00000000  00000000  00133188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  001376e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3fc 	.word	0x0800a3fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a3fc 	.word	0x0800a3fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <get_dynamical_diff_sh1>:
    };
 					

/* Stephenson and Houlden  for years prior to 948 A.D.*/
static double get_dynamical_diff_sh1 (double JD)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	ed87 0b00 	vstr	d0, [r7]
    double TD,E;
    
    /* number of centuries from 948 */
    E = (JD - 2067314.5) / 36525.0;
 8000f0a:	a326      	add	r3, pc, #152	; (adr r3, 8000fa4 <get_dynamical_diff_sh1+0xa4>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f14:	f7ff f9c0 	bl	8000298 <__aeabi_dsub>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	a322      	add	r3, pc, #136	; (adr r3, 8000fac <get_dynamical_diff_sh1+0xac>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff fc99 	bl	800085c <__aeabi_ddiv>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 1830.0 - 405.0 * E + 46.5 * E * E;
 8000f32:	a320      	add	r3, pc, #128	; (adr r3, 8000fb4 <get_dynamical_diff_sh1+0xb4>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f3c:	f7ff fb64 	bl	8000608 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	a11d      	add	r1, pc, #116	; (adr r1, 8000fbc <get_dynamical_diff_sh1+0xbc>)
 8000f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f4a:	f7ff f9a5 	bl	8000298 <__aeabi_dsub>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4614      	mov	r4, r2
 8000f54:	461d      	mov	r5, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <get_dynamical_diff_sh1+0xa0>)
 8000f5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f60:	f7ff fb52 	bl	8000608 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f70:	f7ff fb4a 	bl	8000608 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f98e 	bl	800029c <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (TD);
 8000f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f90:	eeb0 0a47 	vmov.f32	s0, s14
 8000f94:	eef0 0a67 	vmov.f32	s1, s15
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40474000 	.word	0x40474000
 8000fa4:	80000000 	.word	0x80000000
 8000fa8:	413f8b72 	.word	0x413f8b72
 8000fac:	00000000 	.word	0x00000000
 8000fb0:	40e1d5a0 	.word	0x40e1d5a0
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	40795000 	.word	0x40795000
 8000fbc:	00000000 	.word	0x00000000
 8000fc0:	409c9800 	.word	0x409c9800
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <get_dynamical_diff_sh2>:

/* Stephenson and Houlden for years between 948 A.D. and 1600 A.D.*/
static double get_dynamical_diff_sh2 (double JD)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0b00 	vstr	d0, [r7]
    double TD,t;
    
    /* number of centuries from 1850 */
    t = (JD - 2396758.5) / 36525.0;
 8000fd2:	a31a      	add	r3, pc, #104	; (adr r3, 800103c <get_dynamical_diff_sh2+0x74>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fdc:	f7ff f95c 	bl	8000298 <__aeabi_dsub>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	a316      	add	r3, pc, #88	; (adr r3, 8001044 <get_dynamical_diff_sh2+0x7c>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc35 	bl	800085c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 22.5 * t * t;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <get_dynamical_diff_sh2+0x70>)
 8001000:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001004:	f7ff fb00 	bl	8000608 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001010:	f7ff fafa 	bl	8000608 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return TD;
 800101c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001020:	ec43 2b17 	vmov	d7, r2, r3
}
 8001024:	eeb0 0a47 	vmov.f32	s0, s14
 8001028:	eef0 0a67 	vmov.f32	s1, s15
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	40368000 	.word	0x40368000
 800103c:	40000000 	.word	0x40000000
 8001040:	4142492b 	.word	0x4142492b
 8001044:	00000000 	.word	0x00000000
 8001048:	40e1d5a0 	.word	0x40e1d5a0
 800104c:	00000000 	.word	0x00000000

08001050 <get_dynamical_diff_table>:

/* Table 9.a pg 72 for years 1600..1992.*/
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_table (double JD)
{
 8001050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001054:	b08e      	sub	sp, #56	; 0x38
 8001056:	af00      	add	r7, sp, #0
 8001058:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a,b,c,n;
    int i;
    
    /* get no days since 1620 and divide by 2 years */
    i = (int)((JD - 2312752.5) / 730.5);
 8001068:	a35d      	add	r3, pc, #372	; (adr r3, 80011e0 <get_dynamical_diff_table+0x190>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001072:	f7ff f911 	bl	8000298 <__aeabi_dsub>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	a356      	add	r3, pc, #344	; (adr r3, 80011d8 <get_dynamical_diff_table+0x188>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd6a 	bl	8000b68 <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* get the base interpolation factor in the table */
    if (i > (TERMS - 2))
 8001098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109a:	2bbe      	cmp	r3, #190	; 0xbe
 800109c:	dd01      	ble.n	80010a2 <get_dynamical_diff_table+0x52>
        i = TERMS - 2;
 800109e:	23be      	movs	r3, #190	; 0xbe
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* calc a,b,c,n */
	a = delta_t[i+1] - delta_t[i];
 80010a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <get_dynamical_diff_table+0x198>)
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b0:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <get_dynamical_diff_table+0x198>)
 80010b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4413      	add	r3, r2
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f8ec 	bl	8000298 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = delta_t[i+2] - delta_t[i+1];
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ca:	3302      	adds	r3, #2
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <get_dynamical_diff_table+0x198>)
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	3301      	adds	r3, #1
 80010da:	4a43      	ldr	r2, [pc, #268]	; (80011e8 <get_dynamical_diff_table+0x198>)
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f8d8 	bl	8000298 <__aeabi_dsub>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	c = a - b;
 80010f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010f8:	f7ff f8ce 	bl	8000298 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
	n = ((JD - (2312752.5 + (730.5 * i))) / 730.5);
 8001104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001106:	f7ff fa15 	bl	8000534 <__aeabi_i2d>
 800110a:	a333      	add	r3, pc, #204	; (adr r3, 80011d8 <get_dynamical_diff_table+0x188>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa7a 	bl	8000608 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	a330      	add	r3, pc, #192	; (adr r3, 80011e0 <get_dynamical_diff_table+0x190>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f8bb 	bl	800029c <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112e:	f7ff f8b3 	bl	8000298 <__aeabi_dsub>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	a327      	add	r3, pc, #156	; (adr r3, 80011d8 <get_dynamical_diff_table+0x188>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f7ff fb8c 	bl	800085c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	TD = delta_t[i+1] + n / 2 * (a + b + n * c);
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114e:	3301      	adds	r3, #1
 8001150:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <get_dynamical_diff_table+0x198>)
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	e9d3 4500 	ldrd	r4, r5, [r3]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001166:	f7ff fb79 	bl	800085c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4690      	mov	r8, r2
 8001170:	4699      	mov	r9, r3
 8001172:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001176:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800117a:	f7ff f88f 	bl	800029c <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4692      	mov	sl, r2
 8001184:	469b      	mov	fp, r3
 8001186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800118e:	f7ff fa3b 	bl	8000608 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4650      	mov	r0, sl
 8001198:	4659      	mov	r1, fp
 800119a:	f7ff f87f 	bl	800029c <__adddf3>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4640      	mov	r0, r8
 80011a4:	4649      	mov	r1, r9
 80011a6:	f7ff fa2f 	bl	8000608 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f873 	bl	800029c <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    return TD;
 80011be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80011c6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ca:	eef0 0a67 	vmov.f32	s1, s15
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011d6:	bf00      	nop
 80011d8:	00000000 	.word	0x00000000
 80011dc:	4086d400 	.word	0x4086d400
 80011e0:	40000000 	.word	0x40000000
 80011e4:	4141a518 	.word	0x4141a518
 80011e8:	0800a430 	.word	0x0800a430
 80011ec:	00000000 	.word	0x00000000

080011f0 <get_dynamical_diff_near>:

/* get the dynamical time diff in the near past / future 1992 .. 2010 */
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_near (double JD)
{
 80011f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f4:	b092      	sub	sp, #72	; 0x48
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    /* TD for 1990, 2000, 2010 */
    double delta_T[3] = {56.86, 63.83, 70.0};
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <get_dynamical_diff_near+0x120>)
 800120a:	f107 0408 	add.w	r4, r7, #8
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001218:	e884 0003 	stmia.w	r4, {r0, r1}
    double a,b,c,n;
         
    /* calculate TD by interpolating value */
    a = delta_T[1] - delta_T[0];
 800121c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001224:	f7ff f838 	bl	8000298 <__aeabi_dsub>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    b = delta_T[2] - delta_T[1];
 8001230:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001234:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001238:	f7ff f82e 	bl	8000298 <__aeabi_dsub>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    c = b - a;
 8001244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001248:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    
    /* get number of days since 2000 and divide by 10 years */
	n = (JD - 2451544.5) / 3652.5; 
 8001258:	a329      	add	r3, pc, #164	; (adr r3, 8001300 <get_dynamical_diff_near+0x110>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001262:	f7ff f819 	bl	8000298 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	a326      	add	r3, pc, #152	; (adr r3, 8001308 <get_dynamical_diff_near+0x118>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff faf2 	bl	800085c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	TD = delta_T[1] + (n / 2) * (a + b + n * c);
 8001280:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800128c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001290:	f7ff fae4 	bl	800085c <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4690      	mov	r8, r2
 800129a:	4699      	mov	r9, r3
 800129c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80012a4:	f7fe fffa 	bl	800029c <__adddf3>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4692      	mov	sl, r2
 80012ae:	469b      	mov	fp, r3
 80012b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012b8:	f7ff f9a6 	bl	8000608 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4650      	mov	r0, sl
 80012c2:	4659      	mov	r1, fp
 80012c4:	f7fe ffea 	bl	800029c <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4640      	mov	r0, r8
 80012ce:	4649      	mov	r1, r9
 80012d0:	f7ff f99a 	bl	8000608 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7fe ffde 	bl	800029c <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	     
    return TD;
 80012e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012ec:	ec43 2b17 	vmov	d7, r2, r3
} 
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	eef0 0a67 	vmov.f32	s1, s15
 80012f8:	3748      	adds	r7, #72	; 0x48
 80012fa:	46bd      	mov	sp, r7
 80012fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001300:	40000000 	.word	0x40000000
 8001304:	4142b42c 	.word	0x4142b42c
 8001308:	00000000 	.word	0x00000000
 800130c:	40ac8900 	.word	0x40ac8900
 8001310:	0800a418 	.word	0x0800a418
 8001314:	00000000 	.word	0x00000000

08001318 <get_dynamical_diff_other>:

/* uses equation 9.1 pg 73 to calc JDE for othe JD values */          
static double get_dynamical_diff_other (double JD)
{     
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0b00 	vstr	d0, [r7]
    double TD;
    double a;
    
    a = (JD - 2382148);
 8001322:	a31c      	add	r3, pc, #112	; (adr r3, 8001394 <get_dynamical_diff_other+0x7c>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800132c:	f7fe ffb4 	bl	8000298 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9c7 2304 	strd	r2, r3, [r7, #16]
    a *= a;
 8001338:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800133c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001340:	f7ff f962 	bl	8000608 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TD = -15 + a / 41048480;
 800134c:	a313      	add	r3, pc, #76	; (adr r3, 800139c <get_dynamical_diff_other+0x84>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001356:	f7ff fa81 	bl	800085c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <get_dynamical_diff_other+0x78>)
 8001368:	f7fe ff96 	bl	8000298 <__aeabi_dsub>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 2302 	strd	r2, r3, [r7, #8]
       
    return (TD);
 8001374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001378:	ec43 2b17 	vmov	d7, r2, r3
}  
 800137c:	eeb0 0a47 	vmov.f32	s0, s14
 8001380:	eef0 0a67 	vmov.f32	s1, s15
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	402e0000 	.word	0x402e0000
 8001394:	00000000 	.word	0x00000000
 8001398:	41422ca2 	.word	0x41422ca2
 800139c:	00000000 	.word	0x00000000
 80013a0:	418392cd 	.word	0x418392cd
 80013a4:	00000000 	.word	0x00000000

080013a8 <ln_get_dynamical_time_diff>:
* universal time.
*/
/* Equation 9.1 on pg 73.
*/
double ln_get_dynamical_time_diff (double JD)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0b00 	vstr	d0, [r7]
    double TD;

    /* check when JD is, and use corresponding formula */
    /* check for date < 948 A.D. */
    if ( JD < 2067314.5 )
 80013b2:	a339      	add	r3, pc, #228	; (adr r3, 8001498 <ln_get_dynamical_time_diff+0xf0>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013bc:	f7ff fb96 	bl	8000aec <__aeabi_dcmplt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <ln_get_dynamical_time_diff+0x2c>
        /* Stephenson and Houlden */
	    TD = get_dynamical_diff_sh1 (JD);
 80013c6:	ed97 0b00 	vldr	d0, [r7]
 80013ca:	f7ff fd99 	bl	8000f00 <get_dynamical_diff_sh1>
 80013ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80013d2:	e056      	b.n	8001482 <ln_get_dynamical_time_diff+0xda>
    else if ( JD >= 2067314.5 && JD < 2305447.5 )
 80013d4:	a330      	add	r3, pc, #192	; (adr r3, 8001498 <ln_get_dynamical_time_diff+0xf0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013de:	f7ff fb99 	bl	8000b14 <__aeabi_dcmpge>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d010      	beq.n	800140a <ln_get_dynamical_time_diff+0x62>
 80013e8:	a32d      	add	r3, pc, #180	; (adr r3, 80014a0 <ln_get_dynamical_time_diff+0xf8>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f2:	f7ff fb7b 	bl	8000aec <__aeabi_dcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <ln_get_dynamical_time_diff+0x62>
	    /* check for date 948..1600 A.D. Stephenson and Houlden */
    	TD = get_dynamical_diff_sh2 (JD);
 80013fc:	ed97 0b00 	vldr	d0, [r7]
 8001400:	f7ff fde2 	bl	8000fc8 <get_dynamical_diff_sh2>
 8001404:	ed87 0b02 	vstr	d0, [r7, #8]
 8001408:	e03b      	b.n	8001482 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2312752.5 && JD < 2448622.5 )
 800140a:	a327      	add	r3, pc, #156	; (adr r3, 80014a8 <ln_get_dynamical_time_diff+0x100>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001414:	f7ff fb7e 	bl	8000b14 <__aeabi_dcmpge>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d010      	beq.n	8001440 <ln_get_dynamical_time_diff+0x98>
 800141e:	a324      	add	r3, pc, #144	; (adr r3, 80014b0 <ln_get_dynamical_time_diff+0x108>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001428:	f7ff fb60 	bl	8000aec <__aeabi_dcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <ln_get_dynamical_time_diff+0x98>
		/* check for value in table 1620..1992  interpolation of table */
		TD = get_dynamical_diff_table (JD);
 8001432:	ed97 0b00 	vldr	d0, [r7]
 8001436:	f7ff fe0b 	bl	8001050 <get_dynamical_diff_table>
 800143a:	ed87 0b02 	vstr	d0, [r7, #8]
 800143e:	e020      	b.n	8001482 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2448622.5 && JD <= 2455197.5 )
 8001440:	a31b      	add	r3, pc, #108	; (adr r3, 80014b0 <ln_get_dynamical_time_diff+0x108>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144a:	f7ff fb63 	bl	8000b14 <__aeabi_dcmpge>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d010      	beq.n	8001476 <ln_get_dynamical_time_diff+0xce>
 8001454:	a318      	add	r3, pc, #96	; (adr r3, 80014b8 <ln_get_dynamical_time_diff+0x110>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800145e:	f7ff fb4f 	bl	8000b00 <__aeabi_dcmple>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <ln_get_dynamical_time_diff+0xce>
		/* check for near future 1992..2010 interpolation */
		TD = get_dynamical_diff_near (JD);       
 8001468:	ed97 0b00 	vldr	d0, [r7]
 800146c:	f7ff fec0 	bl	80011f0 <get_dynamical_diff_near>
 8001470:	ed87 0b02 	vstr	d0, [r7, #8]
 8001474:	e005      	b.n	8001482 <ln_get_dynamical_time_diff+0xda>
	else
	    /* other time period outside */
	    TD = get_dynamical_diff_other (JD);   	    
 8001476:	ed97 0b00 	vldr	d0, [r7]
 800147a:	f7ff ff4d 	bl	8001318 <get_dynamical_diff_other>
 800147e:	ed87 0b02 	vstr	d0, [r7, #8]
		    
	return TD;
 8001482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001486:	ec43 2b17 	vmov	d7, r2, r3
}
 800148a:	eeb0 0a47 	vmov.f32	s0, s14
 800148e:	eef0 0a67 	vmov.f32	s1, s15
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80000000 	.word	0x80000000
 800149c:	413f8b72 	.word	0x413f8b72
 80014a0:	c0000000 	.word	0xc0000000
 80014a4:	414196d3 	.word	0x414196d3
 80014a8:	40000000 	.word	0x40000000
 80014ac:	4141a518 	.word	0x4141a518
 80014b0:	40000000 	.word	0x40000000
 80014b4:	4142ae77 	.word	0x4142ae77
 80014b8:	c0000000 	.word	0xc0000000
 80014bc:	4142bb4e 	.word	0x4142bb4e

080014c0 <ln_get_jde>:
*     
* Calculates the Julian Ephemeris Day (JDE) from the given julian day
*/     
    
double ln_get_jde (double JD)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0b00 	vstr	d0, [r7]
    double JDE;
    double secs_in_day = 24 * 60 * 60;
 80014ca:	a313      	add	r3, pc, #76	; (adr r3, 8001518 <ln_get_jde+0x58>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    JDE = JD +  ln_get_dynamical_time_diff (JD) / secs_in_day;
 80014d4:	ed97 0b00 	vldr	d0, [r7]
 80014d8:	f7ff ff66 	bl	80013a8 <ln_get_dynamical_time_diff>
 80014dc:	ec51 0b10 	vmov	r0, r1, d0
 80014e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014e4:	f7ff f9ba 	bl	800085c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f0:	f7fe fed4 	bl	800029c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return JDE;
 80014fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001500:	ec43 2b17 	vmov	d7, r2, r3
}
 8001504:	eeb0 0a47 	vmov.f32	s0, s14
 8001508:	eef0 0a67 	vmov.f32	s1, s15
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40f51800 	.word	0x40f51800

08001520 <ln_get_julian_day>:
* Valid for positive and negative years but not for negative JD.
*/
/* Formula 7.1 on pg 61 
*/
double ln_get_julian_day (struct ln_date * date)
{
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    double days;
    int a,b;
    struct ln_date local_date;
		
	/* create local copy */
    memcpy (&local_date, date, sizeof (struct ln_date));
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2220      	movs	r2, #32
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 ff5d 	bl	80053f0 <memcpy>
		
    /* check for month = January or February */
    if (local_date.months < 3 ) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b02      	cmp	r3, #2
 800153a:	dc05      	bgt.n	8001548 <ln_get_julian_day+0x28>
        local_date.years--;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3b01      	subs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
	    local_date.months += 12;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	60fb      	str	r3, [r7, #12]
	}
	
	a = local_date.years / 100;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <ln_get_julian_day+0x1b8>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1152      	asrs	r2, r2, #5
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
	
	/* check for Julian or Gregorian calendar (starts Oct 4th 1582) */
	if (local_date.years > 1582 || 
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f240 622e 	movw	r2, #1582	; 0x62e
 800155e:	4293      	cmp	r3, r2
 8001560:	dc0d      	bgt.n	800157e <ln_get_julian_day+0x5e>
		(local_date.years == 1582 && 
 8001562:	68bb      	ldr	r3, [r7, #8]
	if (local_date.years > 1582 || 
 8001564:	f240 622e 	movw	r2, #1582	; 0x62e
 8001568:	4293      	cmp	r3, r2
 800156a:	d113      	bne.n	8001594 <ln_get_julian_day+0x74>
		(local_date.months > 10 || 
 800156c:	68fb      	ldr	r3, [r7, #12]
		(local_date.years == 1582 && 
 800156e:	2b0a      	cmp	r3, #10
 8001570:	dc05      	bgt.n	800157e <ln_get_julian_day+0x5e>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8001572:	68fb      	ldr	r3, [r7, #12]
		(local_date.months > 10 || 
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d10d      	bne.n	8001594 <ln_get_julian_day+0x74>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	2b03      	cmp	r3, #3
 800157c:	dd0a      	ble.n	8001594 <ln_get_julian_day+0x74>
	    /* Gregorian calendar */    
	    b = 2 - a + (a / 4);
 800157e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001580:	f1c3 0202 	rsb	r2, r3, #2
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	2b00      	cmp	r3, #0
 8001588:	da00      	bge.n	800158c <ln_get_julian_day+0x6c>
 800158a:	3303      	adds	r3, #3
 800158c:	109b      	asrs	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001592:	e001      	b.n	8001598 <ln_get_julian_day+0x78>
	} else {
	    /* Julian calendar */
	    b = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	
	/* add a fraction of hours, minutes and secs to days*/
	days = local_date.days + (double)(local_date.hours / 24.0) + (double)(local_date.minutes / 1440.0) + (double)(local_date.seconds /  86400.0);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffca 	bl	8000534 <__aeabi_i2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffc4 	bl	8000534 <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <ln_get_julian_day+0x1bc>)
 80015b2:	f7ff f953 	bl	800085c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7fe fe6d 	bl	800029c <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffb1 	bl	8000534 <__aeabi_i2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <ln_get_julian_day+0x1c0>)
 80015d8:	f7ff f940 	bl	800085c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fe5a 	bl	800029c <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015f4:	a330      	add	r3, pc, #192	; (adr r3, 80016b8 <ln_get_julian_day+0x198>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f92f 	bl	800085c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe fe49 	bl	800029c <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* now get the JD */
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 8001618:	330c      	adds	r3, #12
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff8a 	bl	8000534 <__aeabi_i2d>
 8001620:	a327      	add	r3, pc, #156	; (adr r3, 80016c0 <ln_get_julian_day+0x1a0>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ffef 	bl	8000608 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa99 	bl	8000b68 <__aeabi_d2iz>
 8001636:	4604      	mov	r4, r0
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff79 	bl	8000534 <__aeabi_i2d>
 8001642:	a321      	add	r3, pc, #132	; (adr r3, 80016c8 <ln_get_julian_day+0x1a8>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffde 	bl	8000608 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa88 	bl	8000b68 <__aeabi_d2iz>
 8001658:	4603      	mov	r3, r0
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 800165a:	4423      	add	r3, r4
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff69 	bl	8000534 <__aeabi_i2d>
 8001662:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001666:	f7fe fe19 	bl	800029c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4614      	mov	r4, r2
 8001670:	461d      	mov	r5, r3
 8001672:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001674:	f7fe ff5e 	bl	8000534 <__aeabi_i2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fe0c 	bl	800029c <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 800168c:	a310      	add	r3, pc, #64	; (adr r3, 80016d0 <ln_get_julian_day+0x1b0>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe fe01 	bl	8000298 <__aeabi_dsub>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
	return JD;
 800169e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80016a6:	eeb0 0a47 	vmov.f32	s0, s14
 80016aa:	eef0 0a67 	vmov.f32	s1, s15
 80016ae:	3740      	adds	r7, #64	; 0x40
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdb0      	pop	{r4, r5, r7, pc}
 80016b4:	f3af 8000 	nop.w
 80016b8:	00000000 	.word	0x00000000
 80016bc:	40f51800 	.word	0x40f51800
 80016c0:	00000000 	.word	0x00000000
 80016c4:	4076d400 	.word	0x4076d400
 80016c8:	27525461 	.word	0x27525461
 80016cc:	403e99a0 	.word	0x403e99a0
 80016d0:	00000000 	.word	0x00000000
 80016d4:	4097d200 	.word	0x4097d200
 80016d8:	51eb851f 	.word	0x51eb851f
 80016dc:	40380000 	.word	0x40380000
 80016e0:	40968000 	.word	0x40968000
 80016e4:	00000000 	.word	0x00000000

080016e8 <ln_get_nutation>:
*/
/* Chapter 21 pg 131-134 Using Table 21A 
*/

void ln_get_nutation (double JD, struct ln_nutation * nutation)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b09e      	sub	sp, #120	; 0x78
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80016f2:	6078      	str	r0, [r7, #4]
	long double coeff_sine, coeff_cos;
	long double argument;
	int i;

	/* should we bother recalculating nutation */
	if (fabs(JD - c_JD) > LN_NUTATION_EPOCH_THRESHOLD) {
 80016f4:	4bd2      	ldr	r3, [pc, #840]	; (8001a40 <ln_get_nutation+0x358>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016fe:	f7fe fdcb 	bl	8000298 <__aeabi_dsub>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4614      	mov	r4, r2
 8001708:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800170c:	a39e      	add	r3, pc, #632	; (adr r3, 8001988 <ln_get_nutation+0x2a0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7ff fa07 	bl	8000b28 <__aeabi_dcmpgt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8308 	beq.w	8001d32 <ln_get_nutation+0x64a>
		/* set the new epoch */
		c_JD = JD;
 8001722:	49c7      	ldr	r1, [pc, #796]	; (8001a40 <ln_get_nutation+0x358>)
 8001724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001728:	e9c1 2300 	strd	r2, r3, [r1]

		/* get julian ephemeris day */
		JDE = ln_get_jde (JD);
 800172c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001730:	f7ff fec6 	bl	80014c0 <ln_get_jde>
 8001734:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
		
		/* calc T */
		T = (JDE - 2451545.0)/36525;
 8001738:	a395      	add	r3, pc, #596	; (adr r3, 8001990 <ln_get_nutation+0x2a8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001742:	f7fe fda9 	bl	8000298 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	a392      	add	r3, pc, #584	; (adr r3, 8001998 <ln_get_nutation+0x2b0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7ff f882 	bl	800085c <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		T2 = T * T;
 8001760:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001764:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001768:	f7fe ff4e 	bl	8000608 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		T3 = T2 * T;
 8001774:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001778:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800177c:	f7fe ff44 	bl	8000608 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		/* calculate D,M,M',F and Omega */
		D = 297.85036 + 445267.111480 * T - 0.0019142 * T2 + T3 / 189474.0;
 8001788:	a385      	add	r3, pc, #532	; (adr r3, 80019a0 <ln_get_nutation+0x2b8>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001792:	f7fe ff39 	bl	8000608 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	a382      	add	r3, pc, #520	; (adr r3, 80019a8 <ln_get_nutation+0x2c0>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fd7a 	bl	800029c <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	461d      	mov	r5, r3
 80017b0:	a37f      	add	r3, pc, #508	; (adr r3, 80019b0 <ln_get_nutation+0x2c8>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80017ba:	f7fe ff25 	bl	8000608 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd67 	bl	8000298 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	a379      	add	r3, pc, #484	; (adr r3, 80019b8 <ln_get_nutation+0x2d0>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017dc:	f7ff f83e 	bl	800085c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd58 	bl	800029c <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		M = 357.52772 + 35999.050340 * T - 0.0001603 * T2 - T3 / 300000.0;
 80017f4:	a372      	add	r3, pc, #456	; (adr r3, 80019c0 <ln_get_nutation+0x2d8>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017fe:	f7fe ff03 	bl	8000608 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	a36f      	add	r3, pc, #444	; (adr r3, 80019c8 <ln_get_nutation+0x2e0>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fd44 	bl	800029c <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	a36c      	add	r3, pc, #432	; (adr r3, 80019d0 <ln_get_nutation+0x2e8>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001826:	f7fe feef 	bl	8000608 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fd31 	bl	8000298 <__aeabi_dsub>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	461d      	mov	r5, r3
 800183e:	a366      	add	r3, pc, #408	; (adr r3, 80019d8 <ln_get_nutation+0x2f0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001848:	f7ff f808 	bl	800085c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4620      	mov	r0, r4
 8001852:	4629      	mov	r1, r5
 8001854:	f7fe fd20 	bl	8000298 <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		MM = 134.96298 + 477198.867398 * T + 0.0086972 * T2 + T3 / 56250.0;
 8001860:	a35f      	add	r3, pc, #380	; (adr r3, 80019e0 <ln_get_nutation+0x2f8>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800186a:	f7fe fecd 	bl	8000608 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	a35c      	add	r3, pc, #368	; (adr r3, 80019e8 <ln_get_nutation+0x300>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fd0e 	bl	800029c <__adddf3>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	a359      	add	r3, pc, #356	; (adr r3, 80019f0 <ln_get_nutation+0x308>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001892:	f7fe feb9 	bl	8000608 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fcfd 	bl	800029c <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	461d      	mov	r5, r3
 80018aa:	a353      	add	r3, pc, #332	; (adr r3, 80019f8 <ln_get_nutation+0x310>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018b4:	f7fe ffd2 	bl	800085c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fcec 	bl	800029c <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		F = 93.2719100 + 483202.017538 * T - 0.0036825 * T2 + T3 / 327270.0;
 80018cc:	a34c      	add	r3, pc, #304	; (adr r3, 8001a00 <ln_get_nutation+0x318>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018d6:	f7fe fe97 	bl	8000608 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	a349      	add	r3, pc, #292	; (adr r3, 8001a08 <ln_get_nutation+0x320>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fcd8 	bl	800029c <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	a346      	add	r3, pc, #280	; (adr r3, 8001a10 <ln_get_nutation+0x328>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018fe:	f7fe fe83 	bl	8000608 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fcc5 	bl	8000298 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	a340      	add	r3, pc, #256	; (adr r3, 8001a18 <ln_get_nutation+0x330>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001920:	f7fe ff9c 	bl	800085c <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fcb6 	bl	800029c <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		O = 125.04452 - 1934.136261 * T + 0.0020708 * T2 + T3 / 450000.0;
 8001938:	a339      	add	r3, pc, #228	; (adr r3, 8001a20 <ln_get_nutation+0x338>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001942:	f7fe fe61 	bl	8000608 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	a137      	add	r1, pc, #220	; (adr r1, 8001a28 <ln_get_nutation+0x340>)
 800194c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001950:	f7fe fca2 	bl	8000298 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	a334      	add	r3, pc, #208	; (adr r3, 8001a30 <ln_get_nutation+0x348>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001966:	f7fe fe4f 	bl	8000608 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fc93 	bl	800029c <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	a32e      	add	r3, pc, #184	; (adr r3, 8001a38 <ln_get_nutation+0x350>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	e05e      	b.n	8001a44 <ln_get_nutation+0x35c>
 8001986:	bf00      	nop
 8001988:	9999999a 	.word	0x9999999a
 800198c:	3fb99999 	.word	0x3fb99999
 8001990:	80000000 	.word	0x80000000
 8001994:	4142b42c 	.word	0x4142b42c
 8001998:	00000000 	.word	0x00000000
 800199c:	40e1d5a0 	.word	0x40e1d5a0
 80019a0:	7227d029 	.word	0x7227d029
 80019a4:	411b2d4c 	.word	0x411b2d4c
 80019a8:	13165d3a 	.word	0x13165d3a
 80019ac:	40729d9b 	.word	0x40729d9b
 80019b0:	9978e26a 	.word	0x9978e26a
 80019b4:	3f5f5cbc 	.word	0x3f5f5cbc
 80019b8:	00000000 	.word	0x00000000
 80019bc:	41072110 	.word	0x41072110
 80019c0:	9c62a1b6 	.word	0x9c62a1b6
 80019c4:	40e193e1 	.word	0x40e193e1
 80019c8:	8a86d71f 	.word	0x8a86d71f
 80019cc:	40765871 	.word	0x40765871
 80019d0:	83dd6fb2 	.word	0x83dd6fb2
 80019d4:	3f2502c6 	.word	0x3f2502c6
 80019d8:	00000000 	.word	0x00000000
 80019dc:	41124f80 	.word	0x41124f80
 80019e0:	78372e6a 	.word	0x78372e6a
 80019e4:	411d203b 	.word	0x411d203b
 80019e8:	bb6ed677 	.word	0xbb6ed677
 80019ec:	4060ded0 	.word	0x4060ded0
 80019f0:	6c88bf57 	.word	0x6c88bf57
 80019f4:	3f81cfd6 	.word	0x3f81cfd6
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40eb7740 	.word	0x40eb7740
 8001a00:	11f57b42 	.word	0x11f57b42
 8001a04:	411d7e08 	.word	0x411d7e08
 8001a08:	f9335d25 	.word	0xf9335d25
 8001a0c:	40575166 	.word	0x40575166
 8001a10:	22291fb4 	.word	0x22291fb4
 8001a14:	3f6e2ac3 	.word	0x3f6e2ac3
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	4113f998 	.word	0x4113f998
 8001a20:	8800eae2 	.word	0x8800eae2
 8001a24:	409e388b 	.word	0x409e388b
 8001a28:	6a6a0126 	.word	0x6a6a0126
 8001a2c:	405f42d9 	.word	0x405f42d9
 8001a30:	48d98da5 	.word	0x48d98da5
 8001a34:	3f60f6c8 	.word	0x3f60f6c8
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	411b7740 	.word	0x411b7740
 8001a40:	20000200 	.word	0x20000200
 8001a44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a48:	f7fe ff08 	bl	800085c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fc22 	bl	800029c <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
		/* convert to radians */
		D = ln_deg_to_rad (D);
 8001a60:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001a64:	f000 fdb4 	bl	80025d0 <ln_deg_to_rad>
 8001a68:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		M = ln_deg_to_rad (M);
 8001a6c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001a70:	f000 fdae 	bl	80025d0 <ln_deg_to_rad>
 8001a74:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		MM = ln_deg_to_rad (MM);
 8001a78:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001a7c:	f000 fda8 	bl	80025d0 <ln_deg_to_rad>
 8001a80:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		F = ln_deg_to_rad (F);
 8001a84:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001a88:	f000 fda2 	bl	80025d0 <ln_deg_to_rad>
 8001a8c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
		O = ln_deg_to_rad (O);
 8001a90:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001a94:	f000 fd9c 	bl	80025d0 <ln_deg_to_rad>
 8001a98:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

		/* calc sum of terms in table 21A */
		for (i=0; i< TERMS; i++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	677b      	str	r3, [r7, #116]	; 0x74
 8001aa0:	e0da      	b.n	8001c58 <ln_get_nutation+0x570>
			/* calc coefficients of sine and cosine */
			coeff_sine = (coefficients[i].longitude1 + (coefficients[i].longitude2 * T));
 8001aa2:	4abb      	ldr	r2, [pc, #748]	; (8001d90 <ln_get_nutation+0x6a8>)
 8001aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	4413      	add	r3, r2
 8001aaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aae:	4ab8      	ldr	r2, [pc, #736]	; (8001d90 <ln_get_nutation+0x6a8>)
 8001ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ac0:	f7fe fda2 	bl	8000608 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fbe6 	bl	800029c <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			coeff_cos = (coefficients[i].obliquity1 + (coefficients[i].obliquity2 * T));
 8001ad8:	4aad      	ldr	r2, [pc, #692]	; (8001d90 <ln_get_nutation+0x6a8>)
 8001ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	4413      	add	r3, r2
 8001ae0:	3310      	adds	r3, #16
 8001ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ae6:	4aaa      	ldr	r2, [pc, #680]	; (8001d90 <ln_get_nutation+0x6a8>)
 8001ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	4413      	add	r3, r2
 8001aee:	3318      	adds	r3, #24
 8001af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001af8:	f7fe fd86 	bl	8000608 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fbca 	bl	800029c <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

			argument = arguments[i].D * D 
 8001b10:	49a0      	ldr	r1, [pc, #640]	; (8001d94 <ln_get_nutation+0x6ac>)
 8001b12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4614      	mov	r4, r2
 8001b30:	461d      	mov	r5, r3
				+ arguments[i].M * M 
 8001b32:	4998      	ldr	r1, [pc, #608]	; (8001d94 <ln_get_nutation+0x6ac>)
 8001b34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3308      	adds	r3, #8
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b4a:	f7fe fd5d 	bl	8000608 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fba1 	bl	800029c <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
				+ arguments[i].MM * MM 
 8001b62:	498c      	ldr	r1, [pc, #560]	; (8001d94 <ln_get_nutation+0x6ac>)
 8001b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3310      	adds	r3, #16
 8001b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b7a:	f7fe fd45 	bl	8000608 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fb89 	bl	800029c <__adddf3>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4614      	mov	r4, r2
 8001b90:	461d      	mov	r5, r3
				+ arguments[i].F * F
 8001b92:	4980      	ldr	r1, [pc, #512]	; (8001d94 <ln_get_nutation+0x6ac>)
 8001b94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001baa:	f7fe fd2d 	bl	8000608 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe fb71 	bl	800029c <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
				+ arguments[i].O * O;
 8001bc2:	4974      	ldr	r1, [pc, #464]	; (8001d94 <ln_get_nutation+0x6ac>)
 8001bc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3320      	adds	r3, #32
 8001bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bda:	f7fe fd15 	bl	8000608 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
			argument = arguments[i].D * D 
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fb59 	bl	800029c <__adddf3>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c7 2304 	strd	r2, r3, [r7, #16]
            
			c_longitude += coeff_sine * sin(argument);
 8001bf2:	ed97 0b04 	vldr	d0, [r7, #16]
 8001bf6:	f006 fb9f 	bl	8008338 <sin>
 8001bfa:	ec51 0b10 	vmov	r0, r1, d0
 8001bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c02:	f7fe fd01 	bl	8000608 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fb42 	bl	800029c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	495e      	ldr	r1, [pc, #376]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
			c_obliquity += coeff_cos * cos(argument);
 8001c22:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c26:	f006 faa7 	bl	8008178 <cos>
 8001c2a:	ec51 0b10 	vmov	r0, r1, d0
 8001c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c32:	f7fe fce9 	bl	8000608 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fb2a 	bl	800029c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4953      	ldr	r1, [pc, #332]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001c4e:	e9c1 2300 	strd	r2, r3, [r1]
		for (i=0; i< TERMS; i++) {
 8001c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c54:	3301      	adds	r3, #1
 8001c56:	677b      	str	r3, [r7, #116]	; 0x74
 8001c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c5c:	f77f af21 	ble.w	8001aa2 <ln_get_nutation+0x3ba>
		}

		/* change to arcsecs */
		c_longitude /= 10000;
 8001c60:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c66:	a33e      	add	r3, pc, #248	; (adr r3, 8001d60 <ln_get_nutation+0x678>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fdf6 	bl	800085c <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4948      	ldr	r1, [pc, #288]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001c76:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= 10000;
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c80:	a337      	add	r3, pc, #220	; (adr r3, 8001d60 <ln_get_nutation+0x678>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fde9 	bl	800085c <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4943      	ldr	r1, [pc, #268]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001c90:	e9c1 2300 	strd	r2, r3, [r1]

		/* change to degrees */
		c_longitude /= (60 * 60);
 8001c94:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c9a:	a333      	add	r3, pc, #204	; (adr r3, 8001d68 <ln_get_nutation+0x680>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fddc 	bl	800085c <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	493b      	ldr	r1, [pc, #236]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001caa:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= (60 * 60);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	a32c      	add	r3, pc, #176	; (adr r3, 8001d68 <ln_get_nutation+0x680>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fdcf 	bl	800085c <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4936      	ldr	r1, [pc, #216]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001cc4:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* calculate mean ecliptic - Meeus 2nd edition, eq. 22.2 */
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
                   - 46.8150/3600 * T
 8001cc8:	a329      	add	r3, pc, #164	; (adr r3, 8001d70 <ln_get_nutation+0x688>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cd2:	f7fe fc99 	bl	8000608 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	a127      	add	r1, pc, #156	; (adr r1, 8001d78 <ln_get_nutation+0x690>)
 8001cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ce0:	f7fe fada 	bl	8000298 <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
                   - 0.00059/3600 * T2
 8001cec:	a324      	add	r3, pc, #144	; (adr r3, 8001d80 <ln_get_nutation+0x698>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fac9 	bl	8000298 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
                   + 0.001813/3600 * T3;
 8001d0e:	a31e      	add	r3, pc, #120	; (adr r3, 8001d88 <ln_get_nutation+0x6a0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d18:	f7fe fc76 	bl	8000608 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	f7fe faba 	bl	800029c <__adddf3>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
 8001d2c:	491c      	ldr	r1, [pc, #112]	; (8001da0 <ln_get_nutation+0x6b8>)
 8001d2e:	e9c1 2300 	strd	r2, r3, [r1]
                                         return true obliquity rather than
                                         mean obliquity */
	}

	/* return results */
	nutation->longitude = c_longitude;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <ln_get_nutation+0x6b0>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	e9c1 2300 	strd	r2, r3, [r1]
	nutation->obliquity = c_obliquity;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <ln_get_nutation+0x6b4>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	e9c1 2302 	strd	r2, r3, [r1, #8]
	nutation->ecliptic = c_ecliptic;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <ln_get_nutation+0x6b8>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001d56:	bf00      	nop
 8001d58:	e024      	b.n	8001da4 <ln_get_nutation+0x6bc>
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40c38800 	.word	0x40c38800
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	40ac2000 	.word	0x40ac2000
 8001d70:	b45c4be9 	.word	0xb45c4be9
 8001d74:	3f8aa1ed 	.word	0x3f8aa1ed
 8001d78:	61dba54e 	.word	0x61dba54e
 8001d7c:	40377075 	.word	0x40377075
 8001d80:	e9770fa3 	.word	0xe9770fa3
 8001d84:	3e85ff2d 	.word	0x3e85ff2d
 8001d88:	8b8ade58 	.word	0x8b8ade58
 8001d8c:	3ea0e5fc 	.word	0x3ea0e5fc
 8001d90:	0800b408 	.word	0x0800b408
 8001d94:	0800aa30 	.word	0x0800aa30
 8001d98:	20000208 	.word	0x20000208
 8001d9c:	20000210 	.word	0x20000210
 8001da0:	20000218 	.word	0x20000218
 8001da4:	3778      	adds	r7, #120	; 0x78
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <ln_get_mean_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_mean_sidereal_time (double JD)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0b00 	vstr	d0, [r7]
    long double sidereal;
    long double T;
    
    T = (JD - 2451545.0) / 36525.0;
 8001dba:	a343      	add	r3, pc, #268	; (adr r3, 8001ec8 <ln_get_mean_sidereal_time+0x118>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dc4:	f7fe fa68 	bl	8000298 <__aeabi_dsub>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	a33f      	add	r3, pc, #252	; (adr r3, 8001ed0 <ln_get_mean_sidereal_time+0x120>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fd41 	bl	800085c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2304 	strd	r2, r3, [r7, #16]
        
    /* calc mean angle */
    sidereal = 280.46061837 + (360.98564736629 * (JD - 2451545.0)) + (0.000387933 * T * T) - (T * T * T / 38710000.0);
 8001de2:	a339      	add	r3, pc, #228	; (adr r3, 8001ec8 <ln_get_mean_sidereal_time+0x118>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dec:	f7fe fa54 	bl	8000298 <__aeabi_dsub>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	a337      	add	r3, pc, #220	; (adr r3, 8001ed8 <ln_get_mean_sidereal_time+0x128>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc03 	bl	8000608 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	a335      	add	r3, pc, #212	; (adr r3, 8001ee0 <ln_get_mean_sidereal_time+0x130>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fa44 	bl	800029c <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4614      	mov	r4, r2
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	a332      	add	r3, pc, #200	; (adr r3, 8001ee8 <ln_get_mean_sidereal_time+0x138>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e26:	f7fe fbef 	bl	8000608 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e36:	f7fe fbe7 	bl	8000608 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4620      	mov	r0, r4
 8001e40:	4629      	mov	r1, r5
 8001e42:	f7fe fa2b 	bl	800029c <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e56:	f7fe fbd7 	bl	8000608 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e66:	f7fe fbcf 	bl	8000608 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	a31f      	add	r3, pc, #124	; (adr r3, 8001ef0 <ln_get_mean_sidereal_time+0x140>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fcf0 	bl	800085c <__aeabi_ddiv>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fa08 	bl	8000298 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    /* add a convenient multiple of 360 degrees */
    sidereal = ln_range_degrees (sidereal);
 8001e90:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e94:	f000 fd02 	bl	800289c <ln_range_degrees>
 8001e98:	ed87 0b02 	vstr	d0, [r7, #8]
    
    /* change to hours */
    sidereal *= 24.0 / 360.0;
 8001e9c:	a316      	add	r3, pc, #88	; (adr r3, 8001ef8 <ln_get_mean_sidereal_time+0x148>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea6:	f7fe fbaf 	bl	8000608 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	e9c7 2302 	strd	r2, r3, [r7, #8]
        
    return sidereal;
 8001eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb6:	ec43 2b17 	vmov	d7, r2, r3
} 
 8001eba:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebe:	eef0 0a67 	vmov.f32	s1, s15
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec8:	80000000 	.word	0x80000000
 8001ecc:	4142b42c 	.word	0x4142b42c
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40e1d5a0 	.word	0x40e1d5a0
 8001ed8:	362c39aa 	.word	0x362c39aa
 8001edc:	40768fc5 	.word	0x40768fc5
 8001ee0:	b15e3164 	.word	0xb15e3164
 8001ee4:	4071875e 	.word	0x4071875e
 8001ee8:	8c4c4b7f 	.word	0x8c4c4b7f
 8001eec:	3f396c6f 	.word	0x3f396c6f
 8001ef0:	80000000 	.word	0x80000000
 8001ef4:	41827557 	.word	0x41827557
 8001ef8:	11111111 	.word	0x11111111
 8001efc:	3fb11111 	.word	0x3fb11111

08001f00 <ln_get_apparent_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_apparent_sidereal_time (double JD)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	ed87 0b00 	vstr	d0, [r7]
   double correction, sidereal;
   struct ln_nutation nutation;  
   
   /* get the mean sidereal time */
   sidereal = ln_get_mean_sidereal_time (JD);
 8001f0a:	ed97 0b00 	vldr	d0, [r7]
 8001f0e:	f7ff ff4f 	bl	8001db0 <ln_get_mean_sidereal_time>
 8001f12:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
        
   /* add corrections for nutation in longitude and for the true obliquity of 
   the ecliptic */   
   ln_get_nutation (JD, &nutation); 
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	ed97 0b00 	vldr	d0, [r7]
 8001f20:	f7ff fbe2 	bl	80016e8 <ln_get_nutation>
    
   correction = (nutation.longitude / 15.0 * cos (ln_deg_to_rad(nutation.obliquity)));
 8001f24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <ln_get_apparent_sidereal_time+0x9c>)
 8001f2e:	f7fe fc95 	bl	800085c <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4614      	mov	r4, r2
 8001f38:	461d      	mov	r5, r3
 8001f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f42:	eef0 0a67 	vmov.f32	s1, s15
 8001f46:	f000 fb43 	bl	80025d0 <ln_deg_to_rad>
 8001f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4e:	eef0 7a60 	vmov.f32	s15, s1
 8001f52:	eeb0 0a47 	vmov.f32	s0, s14
 8001f56:	eef0 0a67 	vmov.f32	s1, s15
 8001f5a:	f006 f90d 	bl	8008178 <cos>
 8001f5e:	ec53 2b10 	vmov	r2, r3, d0
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe fb4f 	bl	8000608 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  
   sidereal += correction;
 8001f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f7a:	f7fe f98f 	bl	800029c <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   
   return sidereal;
 8001f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f92:	eef0 0a67 	vmov.f32	s1, s15
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9c:	402e0000 	.word	0x402e0000

08001fa0 <ln_get_hrz_from_equ>:
* TODO:
* Transform horizontal coordinates to galactic coordinates.
*/

void ln_get_hrz_from_equ (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_hrz_posn * position)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6178      	str	r0, [r7, #20]
 8001fa8:	6139      	str	r1, [r7, #16]
 8001faa:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	double sidereal;
	
	/* get mean sidereal time in hours*/
	sidereal = ln_get_mean_sidereal_time (JD);
 8001fb0:	ed97 0b02 	vldr	d0, [r7, #8]
 8001fb4:	f7ff fefc 	bl	8001db0 <ln_get_mean_sidereal_time>
 8001fb8:	ed87 0b06 	vstr	d0, [r7, #24]
	ln_get_hrz_from_equ_sidereal_time (object, observer, sidereal, position);
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	ed97 0b06 	vldr	d0, [r7, #24]
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f000 f807 	bl	8001fd8 <ln_get_hrz_from_equ_sidereal_time>
}
 8001fca:	bf00      	nop
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	0000      	movs	r0, r0
 8001fd4:	0000      	movs	r0, r0
	...

08001fd8 <ln_get_hrz_from_equ_sidereal_time>:


void ln_get_hrz_from_equ_sidereal_time (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double sidereal, struct ln_hrz_posn * position)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b09a      	sub	sp, #104	; 0x68
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6178      	str	r0, [r7, #20]
 8001fe2:	6139      	str	r1, [r7, #16]
 8001fe4:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
	long double H, ra, latitude, declination, A, Ac, As, h, Z, Zs;

	/* change sidereal_time from hours to radians*/
	sidereal *= 2.0 * M_PI / 24.0;
 8001fea:	a3e0      	add	r3, pc, #896	; (adr r3, 800236c <ln_get_hrz_from_equ_sidereal_time+0x394>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff4:	f7fe fb08 	bl	8000608 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* calculate hour angle of object at observers position */
	ra = ln_deg_to_rad (object->ra);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	ed93 7b00 	vldr	d7, [r3]
 8002006:	eeb0 0a47 	vmov.f32	s0, s14
 800200a:	eef0 0a67 	vmov.f32	s1, s15
 800200e:	f000 fadf 	bl	80025d0 <ln_deg_to_rad>
 8002012:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
	H = sidereal + ln_deg_to_rad (observer->lng) - ra;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	ed93 7b00 	vldr	d7, [r3]
 800201c:	eeb0 0a47 	vmov.f32	s0, s14
 8002020:	eef0 0a67 	vmov.f32	s1, s15
 8002024:	f000 fad4 	bl	80025d0 <ln_deg_to_rad>
 8002028:	ec51 0b10 	vmov	r0, r1, d0
 800202c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002030:	f7fe f934 	bl	800029c <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002040:	f7fe f92a 	bl	8000298 <__aeabi_dsub>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	/* hence formula 12.5 and 12.6 give */
	/* convert to radians - hour angle, observers latitude, object declination */
	latitude = ln_deg_to_rad (observer->lat);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002052:	eeb0 0a47 	vmov.f32	s0, s14
 8002056:	eef0 0a67 	vmov.f32	s1, s15
 800205a:	f000 fab9 	bl	80025d0 <ln_deg_to_rad>
 800205e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	declination = ln_deg_to_rad (object->dec);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	ed93 7b02 	vldr	d7, [r3, #8]
 8002068:	eeb0 0a47 	vmov.f32	s0, s14
 800206c:	eef0 0a67 	vmov.f32	s1, s15
 8002070:	f000 faae 	bl	80025d0 <ln_deg_to_rad>
 8002074:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

	/* formula 12.6 *; missuse of A (you have been warned) */
	A = sin (latitude) * sin (declination) + cos (latitude) * cos (declination) * cos (H);
 8002078:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800207c:	f006 f95c 	bl	8008338 <sin>
 8002080:	ec59 8b10 	vmov	r8, r9, d0
 8002084:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002088:	f006 f956 	bl	8008338 <sin>
 800208c:	ec53 2b10 	vmov	r2, r3, d0
 8002090:	4640      	mov	r0, r8
 8002092:	4649      	mov	r1, r9
 8002094:	f7fe fab8 	bl	8000608 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4690      	mov	r8, r2
 800209e:	4699      	mov	r9, r3
 80020a0:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80020a4:	f006 f868 	bl	8008178 <cos>
 80020a8:	ec5b ab10 	vmov	sl, fp, d0
 80020ac:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80020b0:	f006 f862 	bl	8008178 <cos>
 80020b4:	ec53 2b10 	vmov	r2, r3, d0
 80020b8:	4650      	mov	r0, sl
 80020ba:	4659      	mov	r1, fp
 80020bc:	f7fe faa4 	bl	8000608 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4692      	mov	sl, r2
 80020c6:	469b      	mov	fp, r3
 80020c8:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80020cc:	f006 f854 	bl	8008178 <cos>
 80020d0:	ec53 2b10 	vmov	r2, r3, d0
 80020d4:	4650      	mov	r0, sl
 80020d6:	4659      	mov	r1, fp
 80020d8:	f7fe fa96 	bl	8000608 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4640      	mov	r0, r8
 80020e2:	4649      	mov	r1, r9
 80020e4:	f7fe f8da 	bl	800029c <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	h = asin (A);
 80020f0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80020f4:	f006 f9e0 	bl	80084b8 <asin>
 80020f8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

	/* convert back to degrees */
	position->alt = ln_rad_to_deg (h);   
 80020fc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002100:	f000 fa4a 	bl	8002598 <ln_rad_to_deg>
 8002104:	eeb0 7a40 	vmov.f32	s14, s0
 8002108:	eef0 7a60 	vmov.f32	s15, s1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	ed83 7b02 	vstr	d7, [r3, #8]

	/* zenith distance, Telescope Control 6.8a */
	Z = acos (A);
 8002112:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002116:	f006 f99b 	bl	8008450 <acos>
 800211a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* is'n there better way to compute that? */
	Zs = sin (Z);
 800211e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002122:	f006 f909 	bl	8008338 <sin>
 8002126:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* sane check for zenith distance; don't try to divide by 0 */
	if (fabs(Zs) < 1e-5) {
 800212a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002132:	a390      	add	r3, pc, #576	; (adr r3, 8002374 <ln_get_hrz_from_equ_sidereal_time+0x39c>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe fcd6 	bl	8000aec <__aeabi_dcmplt>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d057      	beq.n	80021f6 <ln_get_hrz_from_equ_sidereal_time+0x21e>
		if (object->dec > 0)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	f7fe fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <ln_get_hrz_from_equ_sidereal_time+0x194>
			position->az = 180;
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 8002166:	e9c1 2300 	strd	r2, r3, [r1]
 800216a:	e006      	b.n	800217a <ln_get_hrz_from_equ_sidereal_time+0x1a2>
		else
			position->az = 0;
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	e9c1 2300 	strd	r2, r3, [r1]
		if ((object->dec > 0 && observer->lat > 0)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f7fe fcce 	bl	8000b28 <__aeabi_dcmpgt>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <ln_get_hrz_from_equ_sidereal_time+0x1d2>
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f7fe fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d117      	bne.n	80021da <ln_get_hrz_from_equ_sidereal_time+0x202>
		   || (object->dec < 0 && observer->lat < 0))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	f7fe fc98 	bl	8000aec <__aeabi_dcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <ln_get_hrz_from_equ_sidereal_time+0x210>
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f7fe fc8c 	bl	8000aec <__aeabi_dcmplt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <ln_get_hrz_from_equ_sidereal_time+0x210>
		  	position->alt = 90;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b60      	ldr	r3, [pc, #384]	; (8002364 <ln_get_hrz_from_equ_sidereal_time+0x38c>)
 80021e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		else
		  	position->alt = -90;
		return;
 80021e6:	e0b4      	b.n	8002352 <ln_get_hrz_from_equ_sidereal_time+0x37a>
		  	position->alt = -90;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <ln_get_hrz_from_equ_sidereal_time+0x390>)
 80021f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 80021f4:	e0ad      	b.n	8002352 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}

	/* formulas TC 6.8d Taff 1991, pp. 2 and 13 - vector transformations */
	As = (cos (declination) * sin (H)) / Zs;
 80021f6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80021fa:	f005 ffbd 	bl	8008178 <cos>
 80021fe:	ec55 4b10 	vmov	r4, r5, d0
 8002202:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8002206:	f006 f897 	bl	8008338 <sin>
 800220a:	ec53 2b10 	vmov	r2, r3, d0
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fe f9f9 	bl	8000608 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002222:	f7fe fb1b 	bl	800085c <__aeabi_ddiv>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Ac = (sin (latitude) * cos (declination) * cos (H) - cos (latitude) * sin (declination)) / Zs;
 800222e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8002232:	f006 f881 	bl	8008338 <sin>
 8002236:	ec55 4b10 	vmov	r4, r5, d0
 800223a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800223e:	f005 ff9b 	bl	8008178 <cos>
 8002242:	ec53 2b10 	vmov	r2, r3, d0
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fe f9dd 	bl	8000608 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4614      	mov	r4, r2
 8002254:	461d      	mov	r5, r3
 8002256:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800225a:	f005 ff8d 	bl	8008178 <cos>
 800225e:	ec53 2b10 	vmov	r2, r3, d0
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fe f9cf 	bl	8000608 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4614      	mov	r4, r2
 8002270:	461d      	mov	r5, r3
 8002272:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8002276:	f005 ff7f 	bl	8008178 <cos>
 800227a:	ec59 8b10 	vmov	r8, r9, d0
 800227e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002282:	f006 f859 	bl	8008338 <sin>
 8002286:	ec53 2b10 	vmov	r2, r3, d0
 800228a:	4640      	mov	r0, r8
 800228c:	4649      	mov	r1, r9
 800228e:	f7fe f9bb 	bl	8000608 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fd fffd 	bl	8000298 <__aeabi_dsub>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022aa:	f7fe fad7 	bl	800085c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// don't blom at atan2
	if (Ac == 0 && As == 0) {
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022c2:	f7fe fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d025      	beq.n	8002318 <ln_get_hrz_from_equ_sidereal_time+0x340>
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022d8:	f7fe fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01a      	beq.n	8002318 <ln_get_hrz_from_equ_sidereal_time+0x340>
	        if (object->dec > 0)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f7fe fc1a 	bl	8000b28 <__aeabi_dcmpgt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <ln_get_hrz_from_equ_sidereal_time+0x330>
			position->az = 180.0;
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 8002302:	e9c1 2300 	strd	r2, r3, [r1]
		else
			position->az = 0.0;
		return;
 8002306:	e024      	b.n	8002352 <ln_get_hrz_from_equ_sidereal_time+0x37a>
			position->az = 0.0;
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 8002316:	e01c      	b.n	8002352 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}
	A = atan2 (As, Ac);
 8002318:	ed97 1b06 	vldr	d1, [r7, #24]
 800231c:	ed97 0b08 	vldr	d0, [r7, #32]
 8002320:	f006 f8fe 	bl	8008520 <atan2>
 8002324:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* convert back to degrees */
	position->az = ln_range_degrees(ln_rad_to_deg (A));
 8002328:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800232c:	f000 f934 	bl	8002598 <ln_rad_to_deg>
 8002330:	eeb0 7a40 	vmov.f32	s14, s0
 8002334:	eef0 7a60 	vmov.f32	s15, s1
 8002338:	eeb0 0a47 	vmov.f32	s0, s14
 800233c:	eef0 0a67 	vmov.f32	s1, s15
 8002340:	f000 faac 	bl	800289c <ln_range_degrees>
 8002344:	eeb0 7a40 	vmov.f32	s14, s0
 8002348:	eef0 7a60 	vmov.f32	s15, s1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	ed83 7b00 	vstr	d7, [r3]
}
 8002352:	3768      	adds	r7, #104	; 0x68
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	40668000 	.word	0x40668000
 8002364:	40568000 	.word	0x40568000
 8002368:	c0568000 	.word	0xc0568000
 800236c:	382d7365 	.word	0x382d7365
 8002370:	3fd0c152 	.word	0x3fd0c152
 8002374:	88e368f1 	.word	0x88e368f1
 8002378:	3ee4f8b5 	.word	0x3ee4f8b5
 800237c:	00000000 	.word	0x00000000

08002380 <ln_get_equ_from_hrz>:
*
* Transform an objects horizontal coordinates into equatorial coordinates
* for the given julian day and observers position.
*/
void ln_get_equ_from_hrz (struct ln_hrz_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_equ_posn * position)
{
 8002380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002384:	ed2d 8b02 	vpush	{d8}
 8002388:	b094      	sub	sp, #80	; 0x50
 800238a:	af00      	add	r7, sp, #0
 800238c:	6178      	str	r0, [r7, #20]
 800238e:	6139      	str	r1, [r7, #16]
 8002390:	ed87 0b02 	vstr	d0, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
	long double H, longitude, declination, latitude, A, h, sidereal;

	/* change observer/object position into radians */

	/* object alt/az */
	A = ln_deg_to_rad (object->az);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	ed93 7b00 	vldr	d7, [r3]
 800239c:	eeb0 0a47 	vmov.f32	s0, s14
 80023a0:	eef0 0a67 	vmov.f32	s1, s15
 80023a4:	f000 f914 	bl	80025d0 <ln_deg_to_rad>
 80023a8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	h = ln_deg_to_rad (object->alt);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80023b2:	eeb0 0a47 	vmov.f32	s0, s14
 80023b6:	eef0 0a67 	vmov.f32	s1, s15
 80023ba:	f000 f909 	bl	80025d0 <ln_deg_to_rad>
 80023be:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* observer long / lat */
	longitude = ln_deg_to_rad (observer->lng);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	ed93 7b00 	vldr	d7, [r3]
 80023c8:	eeb0 0a47 	vmov.f32	s0, s14
 80023cc:	eef0 0a67 	vmov.f32	s1, s15
 80023d0:	f000 f8fe 	bl	80025d0 <ln_deg_to_rad>
 80023d4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	latitude = ln_deg_to_rad (observer->lat);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	ed93 7b02 	vldr	d7, [r3, #8]
 80023de:	eeb0 0a47 	vmov.f32	s0, s14
 80023e2:	eef0 0a67 	vmov.f32	s1, s15
 80023e6:	f000 f8f3 	bl	80025d0 <ln_deg_to_rad>
 80023ea:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* equ on pg89 */
	H = atan2 (sin (A), ( cos(A) * sin (latitude) + tan(h) * cos (latitude)));
 80023ee:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80023f2:	f005 ffa1 	bl	8008338 <sin>
 80023f6:	eeb0 8a40 	vmov.f32	s16, s0
 80023fa:	eef0 8a60 	vmov.f32	s17, s1
 80023fe:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002402:	f005 feb9 	bl	8008178 <cos>
 8002406:	ec55 4b10 	vmov	r4, r5, d0
 800240a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800240e:	f005 ff93 	bl	8008338 <sin>
 8002412:	ec53 2b10 	vmov	r2, r3, d0
 8002416:	4620      	mov	r0, r4
 8002418:	4629      	mov	r1, r5
 800241a:	f7fe f8f5 	bl	8000608 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4614      	mov	r4, r2
 8002424:	461d      	mov	r5, r3
 8002426:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800242a:	f005 ffdd 	bl	80083e8 <tan>
 800242e:	ec59 8b10 	vmov	r8, r9, d0
 8002432:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002436:	f005 fe9f 	bl	8008178 <cos>
 800243a:	ec53 2b10 	vmov	r2, r3, d0
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fe f8e1 	bl	8000608 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	f7fd ff25 	bl	800029c <__adddf3>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	ec43 2b17 	vmov	d7, r2, r3
 800245a:	eeb0 1a47 	vmov.f32	s2, s14
 800245e:	eef0 1a67 	vmov.f32	s3, s15
 8002462:	eeb0 0a48 	vmov.f32	s0, s16
 8002466:	eef0 0a68 	vmov.f32	s1, s17
 800246a:	f006 f859 	bl	8008520 <atan2>
 800246e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	declination = sin(latitude) * sin(h) - cos(latitude) * cos(h) * cos(A);
 8002472:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002476:	f005 ff5f 	bl	8008338 <sin>
 800247a:	ec55 4b10 	vmov	r4, r5, d0
 800247e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002482:	f005 ff59 	bl	8008338 <sin>
 8002486:	ec53 2b10 	vmov	r2, r3, d0
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fe f8bb 	bl	8000608 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4614      	mov	r4, r2
 8002498:	461d      	mov	r5, r3
 800249a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800249e:	f005 fe6b 	bl	8008178 <cos>
 80024a2:	ec59 8b10 	vmov	r8, r9, d0
 80024a6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80024aa:	f005 fe65 	bl	8008178 <cos>
 80024ae:	ec53 2b10 	vmov	r2, r3, d0
 80024b2:	4640      	mov	r0, r8
 80024b4:	4649      	mov	r1, r9
 80024b6:	f7fe f8a7 	bl	8000608 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4690      	mov	r8, r2
 80024c0:	4699      	mov	r9, r3
 80024c2:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80024c6:	f005 fe57 	bl	8008178 <cos>
 80024ca:	ec53 2b10 	vmov	r2, r3, d0
 80024ce:	4640      	mov	r0, r8
 80024d0:	4649      	mov	r1, r9
 80024d2:	f7fe f899 	bl	8000608 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fedb 	bl	8000298 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	declination = asin (declination);
 80024ea:	ed97 0b08 	vldr	d0, [r7, #32]
 80024ee:	f005 ffe3 	bl	80084b8 <asin>
 80024f2:	ed87 0b08 	vstr	d0, [r7, #32]

	/* get ra = sidereal - longitude + H and change sidereal to radians*/
	sidereal = ln_get_apparent_sidereal_time(JD);
 80024f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80024fa:	f7ff fd01 	bl	8001f00 <ln_get_apparent_sidereal_time>
 80024fe:	ed87 0b06 	vstr	d0, [r7, #24]
	sidereal *= 2.0 * M_PI / 24.0;
 8002502:	a323      	add	r3, pc, #140	; (adr r3, 8002590 <ln_get_equ_from_hrz+0x210>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800250c:	f7fe f87c 	bl	8000608 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position->ra = ln_range_degrees(ln_rad_to_deg (sidereal - H + longitude));
 8002518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800251c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002520:	f7fd feba 	bl	8000298 <__aeabi_dsub>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002530:	f7fd feb4 	bl	800029c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	ec43 2b17 	vmov	d7, r2, r3
 800253c:	eeb0 0a47 	vmov.f32	s0, s14
 8002540:	eef0 0a67 	vmov.f32	s1, s15
 8002544:	f000 f828 	bl	8002598 <ln_rad_to_deg>
 8002548:	eeb0 7a40 	vmov.f32	s14, s0
 800254c:	eef0 7a60 	vmov.f32	s15, s1
 8002550:	eeb0 0a47 	vmov.f32	s0, s14
 8002554:	eef0 0a67 	vmov.f32	s1, s15
 8002558:	f000 f9a0 	bl	800289c <ln_range_degrees>
 800255c:	eeb0 7a40 	vmov.f32	s14, s0
 8002560:	eef0 7a60 	vmov.f32	s15, s1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed83 7b00 	vstr	d7, [r3]
	position->dec = ln_rad_to_deg (declination);
 800256a:	ed97 0b08 	vldr	d0, [r7, #32]
 800256e:	f000 f813 	bl	8002598 <ln_rad_to_deg>
 8002572:	eeb0 7a40 	vmov.f32	s14, s0
 8002576:	eef0 7a60 	vmov.f32	s15, s1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3750      	adds	r7, #80	; 0x50
 8002584:	46bd      	mov	sp, r7
 8002586:	ecbd 8b02 	vpop	{d8}
 800258a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800258e:	bf00      	nop
 8002590:	382d7365 	.word	0x382d7365
 8002594:	3fd0c152 	.word	0x3fd0c152

08002598 <ln_rad_to_deg>:
}


/* convert radians to degrees */
double ln_rad_to_deg (double radians)
{   
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0b00 	vstr	d0, [r7]
	return (radians * R2D);
 80025a2:	a309      	add	r3, pc, #36	; (adr r3, 80025c8 <ln_rad_to_deg+0x30>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ac:	f7fe f82c 	bl	8000608 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	ec43 2b17 	vmov	d7, r2, r3
}    
 80025b8:	eeb0 0a47 	vmov.f32	s0, s14
 80025bc:	eef0 0a67 	vmov.f32	s1, s15
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	1a63c1f8 	.word	0x1a63c1f8
 80025cc:	404ca5dc 	.word	0x404ca5dc

080025d0 <ln_deg_to_rad>:

/* convert degrees to radians */
double ln_deg_to_rad (double degrees)
{   
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	ed87 0b00 	vstr	d0, [r7]
	return (degrees * D2R);
 80025da:	a309      	add	r3, pc, #36	; (adr r3, 8002600 <ln_deg_to_rad+0x30>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e4:	f7fe f810 	bl	8000608 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	ec43 2b17 	vmov	d7, r2, r3
}    
 80025f0:	eeb0 0a47 	vmov.f32	s0, s14
 80025f4:	eef0 0a67 	vmov.f32	s1, s15
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	a2529d39 	.word	0xa2529d39
 8002604:	3f91df46 	.word	0x3f91df46

08002608 <ln_hms_to_deg>:

/* convert hours:mins:secs to degrees */
double ln_hms_to_deg (struct ln_hms *hms)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees = ((double)hms->hours / 24) * 360;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff7d 	bl	8000514 <__aeabi_ui2d>
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <ln_hms_to_deg+0xbc>)
 8002620:	f7fe f91c 	bl	800085c <__aeabi_ddiv>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <ln_hms_to_deg+0xc0>)
 8002632:	f7fd ffe9 	bl	8000608 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->minutes / 60) * 15;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	885b      	ldrh	r3, [r3, #2]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff66 	bl	8000514 <__aeabi_ui2d>
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <ln_hms_to_deg+0xc4>)
 800264e:	f7fe f905 	bl	800085c <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <ln_hms_to_deg+0xc8>)
 8002660:	f7fd ffd2 	bl	8000608 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800266c:	f7fd fe16 	bl	800029c <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->seconds / 60) * 0.25;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <ln_hms_to_deg+0xc4>)
 8002684:	f7fe f8ea 	bl	800085c <__aeabi_ddiv>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <ln_hms_to_deg+0xcc>)
 8002696:	f7fd ffb7 	bl	8000608 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026a2:	f7fd fdfb 	bl	800029c <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return degrees;
 80026ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80026b6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ba:	eef0 0a67 	vmov.f32	s1, s15
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40380000 	.word	0x40380000
 80026c8:	40768000 	.word	0x40768000
 80026cc:	404e0000 	.word	0x404e0000
 80026d0:	402e0000 	.word	0x402e0000
 80026d4:	3fd00000 	.word	0x3fd00000

080026d8 <ln_dms_to_deg>:
}


/* convert dms to degrees */
double ln_dms_to_deg (struct ln_dms *dms)
{
 80026d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees =  fabs((double)dms->degrees);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	885b      	ldrh	r3, [r3, #2]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd ff14 	bl	8000514 <__aeabi_ui2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->minutes / 60);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	889b      	ldrh	r3, [r3, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ff0b 	bl	8000514 <__aeabi_ui2d>
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <ln_dms_to_deg+0xa8>)
 8002704:	f7fe f8aa 	bl	800085c <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002710:	f7fd fdc4 	bl	800029c <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->seconds / 3600);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002722:	a315      	add	r3, pc, #84	; (adr r3, 8002778 <ln_dms_to_deg+0xa0>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fe f898 	bl	800085c <__aeabi_ddiv>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4690      	mov	r8, r2
 8002732:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002736:	4642      	mov	r2, r8
 8002738:	464b      	mov	r3, r9
 800273a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800273e:	f7fd fdad 	bl	800029c <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// negative ?
	if (dms->neg)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <ln_dms_to_deg+0x86>
		degrees *= -1.0;
 8002752:	68bc      	ldr	r4, [r7, #8]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800275a:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return degrees;
 800275e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002762:	ec43 2b17 	vmov	d7, r2, r3
}
 8002766:	eeb0 0a47 	vmov.f32	s0, s14
 800276a:	eef0 0a67 	vmov.f32	s1, s15
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002776:	bf00      	nop
 8002778:	00000000 	.word	0x00000000
 800277c:	40ac2000 	.word	0x40ac2000
 8002780:	404e0000 	.word	0x404e0000

08002784 <ln_deg_to_dms>:
    return radians;
}

/* convert degrees to dms */
void ln_deg_to_dms (double degrees, struct ln_dms * dms)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	ed87 0b02 	vstr	d0, [r7, #8]
 800278e:	6078      	str	r0, [r7, #4]
    double dtemp;

    if (degrees >= 0) 
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800279c:	f7fe f9ba 	bl	8000b14 <__aeabi_dcmpge>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <ln_deg_to_dms+0x2a>
		dms->neg = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	e002      	b.n	80027b4 <ln_deg_to_dms+0x30>
	else
		dms->neg = 1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	801a      	strh	r2, [r3, #0]

	degrees = fabs(degrees);
 80027b4:	68bc      	ldr	r4, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80027bc:	e9c7 4502 	strd	r4, r5, [r7, #8]
	dms->degrees = (int)degrees;
 80027c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027c4:	f7fe f9d0 	bl	8000b68 <__aeabi_d2iz>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	805a      	strh	r2, [r3, #2]
	
    /* multiply remainder by 60 to get minutes */
    dtemp = 60*(degrees - dms->degrees);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fead 	bl	8000534 <__aeabi_i2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027e2:	f7fd fd59 	bl	8000298 <__aeabi_dsub>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <ln_deg_to_dms+0x110>)
 80027f4:	f7fd ff08 	bl	8000608 <__aeabi_dmul>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dms->minutes = (unsigned short)dtemp;
 8002800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002804:	f7fe f9d8 	bl	8000bb8 <__aeabi_d2uiz>
 8002808:	4603      	mov	r3, r0
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	809a      	strh	r2, [r3, #4]
    
    /* multiply remainder by 60 to get seconds */
    dms->seconds = 60*(dtemp - dms->minutes);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	889b      	ldrh	r3, [r3, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe8d 	bl	8000534 <__aeabi_i2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002822:	f7fd fd39 	bl	8000298 <__aeabi_dsub>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <ln_deg_to_dms+0x110>)
 8002834:	f7fd fee8 	bl	8000608 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    
    /* catch any overflows */
    if (dms->seconds > 59) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <ln_deg_to_dms+0x114>)
 800284e:	f7fe f96b 	bl	8000b28 <__aeabi_dcmpgt>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00c      	beq.n	8002872 <ln_deg_to_dms+0xee>
    	dms->seconds = 0;
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	dms->minutes ++;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	889b      	ldrh	r3, [r3, #4]
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	809a      	strh	r2, [r3, #4]
    }
    if (dms->minutes > 59) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	2b3b      	cmp	r3, #59	; 0x3b
 8002878:	d908      	bls.n	800288c <ln_deg_to_dms+0x108>
    	dms->minutes = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	809a      	strh	r2, [r3, #4]
    	dms->degrees ++;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	885b      	ldrh	r3, [r3, #2]
 8002884:	3301      	adds	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	805a      	strh	r2, [r3, #2]
    }
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bdb0      	pop	{r4, r5, r7, pc}
 8002894:	404e0000 	.word	0x404e0000
 8002898:	404d8000 	.word	0x404d8000

0800289c <ln_range_degrees>:
}


/* puts a large angle in the correct range 0 - 360 degrees */
double ln_range_degrees (double angle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	ed87 0b00 	vstr	d0, [r7]
    double temp;
    
    if (angle >= 0.0 && angle < 360.0)
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028b2:	f7fe f92f 	bl	8000b14 <__aeabi_dcmpge>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00c      	beq.n	80028d6 <ln_range_degrees+0x3a>
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <ln_range_degrees+0xc8>)
 80028c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028c6:	f7fe f911 	bl	8000aec <__aeabi_dcmplt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <ln_range_degrees+0x3a>
    	return angle;
 80028d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028d4:	e03d      	b.n	8002952 <ln_range_degrees+0xb6>
 
	temp = (int)(angle / 360);
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <ln_range_degrees+0xc8>)
 80028dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028e0:	f7fd ffbc 	bl	800085c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f93c 	bl	8000b68 <__aeabi_d2iz>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe1e 	bl	8000534 <__aeabi_i2d>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (angle < 0.0)
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290c:	f7fe f8ee 	bl	8000aec <__aeabi_dcmplt>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <ln_range_degrees+0x90>
	   	temp --;
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <ln_range_degrees+0xcc>)
 800291c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002920:	f7fd fcba 	bl	8000298 <__aeabi_dsub>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp *= 360;
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <ln_range_degrees+0xc8>)
 8002932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002936:	f7fd fe67 	bl	8000608 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return angle - temp;
 8002942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800294a:	f7fd fca5 	bl	8000298 <__aeabi_dsub>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
}
 8002952:	ec43 2b17 	vmov	d7, r2, r3
 8002956:	eeb0 0a47 	vmov.f32	s0, s14
 800295a:	eef0 0a67 	vmov.f32	s1, s15
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40768000 	.word	0x40768000
 8002968:	3ff00000 	.word	0x3ff00000

0800296c <ln_hequ_to_equ>:
/*! \fn void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
* \brief human readable equatorial position to double equatorial position
* \ingroup conversion
*/
void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
	pos->ra = ln_hms_to_deg (&hpos->ra);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe45 	bl	8002608 <ln_hms_to_deg>
 800297e:	eeb0 7a40 	vmov.f32	s14, s0
 8002982:	eef0 7a60 	vmov.f32	s15, s1
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	ed83 7b00 	vstr	d7, [r3]
	pos->dec = ln_dms_to_deg (&hpos->dec);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fea1 	bl	80026d8 <ln_dms_to_deg>
 8002996:	eeb0 7a40 	vmov.f32	s14, s0
 800299a:	eef0 7a60 	vmov.f32	s15, s1
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <ln_hrz_to_hhrz>:
/*! \fn void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
* \brief double horizontal position to human readable horizontal position
* \ingroup conversion
*/
void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	ln_deg_to_dms (pos->alt, &hpos->alt);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	eeb0 0a47 	vmov.f32	s0, s14
 80029c6:	eef0 0a67 	vmov.f32	s1, s15
 80029ca:	f7ff fedb 	bl	8002784 <ln_deg_to_dms>
	ln_deg_to_dms (pos->az, &hpos->az);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	ed93 7b00 	vldr	d7, [r3]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	eeb0 0a47 	vmov.f32	s0, s14
 80029dc:	eef0 0a67 	vmov.f32	s1, s15
 80029e0:	f7ff fed0 	bl	8002784 <ln_deg_to_dms>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <ln_hlnlat_to_lnlat>:
/*! \fn void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
* \brief human readable long/lat position to double long/lat position
* \ingroup conversion
*/
void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	pos->lng = ln_dms_to_deg (&hpos->lng);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe6d 	bl	80026d8 <ln_dms_to_deg>
 80029fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002a02:	eef0 7a60 	vmov.f32	s15, s1
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	ed83 7b00 	vstr	d7, [r3]
	pos->lat = ln_dms_to_deg (&hpos->lat);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe61 	bl	80026d8 <ln_dms_to_deg>
 8002a16:	eeb0 7a40 	vmov.f32	s14, s0
 8002a1a:	eef0 7a60 	vmov.f32	s15, s1
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0bc      	sub	sp, #240	; 0xf0
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a32:	f000 fb39 	bl	80030a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a36:	f000 f89d 	bl	8002b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a3a:	f000 f91d 	bl	8002c78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a3e:	f000 f8eb 	bl	8002c18 <MX_USART2_UART_Init>
	 * lat: 43.659822
	 * lng: -79.397056
	 * DMS lat: 43° 39' 35.3592'' N
	 * DMS lng: 79° 23' 49.4016'' W
	 */
	hobserver.lng.neg = 1; //1
 8002a42:	2301      	movs	r3, #1
 8002a44:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	hobserver.lng.degrees = 79; //-79
 8002a48:	234f      	movs	r3, #79	; 0x4f
 8002a4a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	hobserver.lng.minutes = 23; //-14
 8002a4e:	2317      	movs	r3, #23
 8002a50:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	hobserver.lng.seconds = 54; //-16
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <main+0x134>)
 8002a5a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	hobserver.lat.neg = 0; //0
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	hobserver.lat.degrees = 43; //43
 8002a64:	232b      	movs	r3, #43	; 0x2b
 8002a66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	hobserver.lat.minutes = 39; //23
 8002a6a:	2327      	movs	r3, #39	; 0x27
 8002a6c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	hobserver.lat.seconds = 35; //44
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <main+0x138>)
 8002a76:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	/* Alnilam
	 * RA: 05h 36m 12s
	 * DEC: -01° 12' 06"
	 */
	hobject.ra.hours = 5;
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	hobject.ra.minutes = 36;
 8002a80:	2324      	movs	r3, #36	; 0x24
 8002a82:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	hobject.ra.seconds = 12;
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <main+0x13c>)
 8002a8c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	hobject.dec.neg = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
	hobject.dec.degrees = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	hobject.dec.minutes = 12;
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	hobject.dec.seconds = 6;
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <main+0x140>)
 8002aa8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

	/* UT date and time */
	date.years = 2023;
 8002aac:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8002ab0:	603b      	str	r3, [r7, #0]
	date.months = 6;
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	607b      	str	r3, [r7, #4]
	date.days = 13;
 8002ab6:	230d      	movs	r3, #13
 8002ab8:	60bb      	str	r3, [r7, #8]
	date.hours = 21;
 8002aba:	2315      	movs	r3, #21
 8002abc:	60fb      	str	r3, [r7, #12]
	date.minutes = 6;
 8002abe:	2306      	movs	r3, #6
 8002ac0:	613b      	str	r3, [r7, #16]
	date.seconds = 45;
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <main+0x144>)
 8002ac8:	e9c7 2306 	strd	r2, r3, [r7, #24]

	JD = ln_get_julian_day (&date);
 8002acc:	463b      	mov	r3, r7
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fd26 	bl	8001520 <ln_get_julian_day>
 8002ad4:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	ln_hequ_to_equ (&hobject, &object);
 8002ad8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002adc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff42 	bl	800296c <ln_hequ_to_equ>
	ln_hlnlat_to_lnlat (&hobserver, &observer);
 8002ae8:	f107 0220 	add.w	r2, r7, #32
 8002aec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff7a 	bl	80029ec <ln_hlnlat_to_lnlat>

	ln_get_hrz_from_equ (&object, &observer, JD, &hrz);
 8002af8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002afc:	f107 0120 	add.w	r1, r7, #32
 8002b00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b04:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa49 	bl	8001fa0 <ln_get_hrz_from_equ>
	ln_hrz_to_hhrz(&hrz, &hhrz);
 8002b0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff47 	bl	80029ac <ln_hrz_to_hhrz>

	ln_get_equ_from_hrz (&hrz, &observer, JD, &equ); // <-- check this
 8002b1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b22:	f107 0120 	add.w	r1, r7, #32
 8002b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b2a:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fc26 	bl	8002380 <ln_get_equ_from_hrz>


	/* random code */
	int count = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	for (int i=0; i<5;i++) {
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b40:	e009      	b.n	8002b56 <main+0x12a>
	  count++;
 8002b42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	for (int i=0; i<5;i++) {
 8002b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b50:	3301      	adds	r3, #1
 8002b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	ddf1      	ble.n	8002b42 <main+0x116>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b5e:	e7fe      	b.n	8002b5e <main+0x132>
 8002b60:	404b0000 	.word	0x404b0000
 8002b64:	40418000 	.word	0x40418000
 8002b68:	40280000 	.word	0x40280000
 8002b6c:	40180000 	.word	0x40180000
 8002b70:	40468000 	.word	0x40468000

08002b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b096      	sub	sp, #88	; 0x58
 8002b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	2244      	movs	r2, #68	; 0x44
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 fc42 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b88:	463b      	mov	r3, r7
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b9a:	f000 fd87 	bl	80036ac <HAL_PWREx_ControlVoltageScaling>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ba4:	f000 f8ce 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002bc2:	230a      	movs	r3, #10
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fdbe 	bl	8003758 <HAL_RCC_OscConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002be2:	f000 f8af 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be6:	230f      	movs	r3, #15
 8002be8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bea:	2303      	movs	r3, #3
 8002bec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f9be 	bl	8003f80 <HAL_RCC_ClockConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002c0a:	f000 f89b 	bl	8002d44 <Error_Handler>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3758      	adds	r7, #88	; 0x58
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <MX_USART2_UART_Init+0x5c>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_USART2_UART_Init+0x58>)
 8002c5c:	f001 ff12 	bl	8004a84 <HAL_UART_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c66:	f000 f86d 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000220 	.word	0x20000220
 8002c74:	40004400 	.word	0x40004400

08002c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca6:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <MX_GPIO_Init+0xc4>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2120      	movs	r1, #32
 8002cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf6:	f000 fcb3 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <MX_GPIO_Init+0xc8>)
 8002d12:	f000 fb2b 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8002d16:	2320      	movs	r3, #32
 8002d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d30:	f000 fb1c 	bl	800336c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000800 	.word	0x48000800

08002d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <Error_Handler+0x8>
	...

08002d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_MspInit+0x44>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_MspInit+0x44>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6613      	str	r3, [r2, #96]	; 0x60
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_MspInit+0x44>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_MspInit+0x44>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_MspInit+0x44>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_MspInit+0x44>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b0a4      	sub	sp, #144	; 0x90
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2268      	movs	r2, #104	; 0x68
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fb27 	bl	800540c <memset>
  if(huart->Instance==USART2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <HAL_UART_MspInit+0xb0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d13a      	bne.n	8002e3e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 faf7 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002de0:	f7ff ffb0 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dee:	6593      	str	r3, [r2, #88]	; 0x58
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_UART_MspInit+0xb4>)
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e14:	230c      	movs	r3, #12
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f000 fa97 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3790      	adds	r7, #144	; 0x90
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40004400 	.word	0x40004400
 8002e4c:	40021000 	.word	0x40021000

08002e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e54:	e7fe      	b.n	8002e54 <NMI_Handler+0x4>

08002e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5a:	e7fe      	b.n	8002e5a <HardFault_Handler+0x4>

08002e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <MemManage_Handler+0x4>

08002e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <BusFault_Handler+0x4>

08002e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <UsageFault_Handler+0x4>

08002e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e9c:	f000 f960 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return 1;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_kill>:

int _kill(int pid, int sig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ebe:	f002 fa65 	bl	800538c <__errno>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2216      	movs	r2, #22
 8002ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_exit>:

void _exit (int status)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffe7 	bl	8002eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee6:	e7fe      	b.n	8002ee6 <_exit+0x12>

08002ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e00a      	b.n	8002f10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002efa:	f3af 8000 	nop.w
 8002efe:	4601      	mov	r1, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60ba      	str	r2, [r7, #8]
 8002f06:	b2ca      	uxtb	r2, r1
 8002f08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbf0      	blt.n	8002efa <_read+0x12>
  }

  return len;
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e009      	b.n	8002f48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dbf1      	blt.n	8002f34 <_write+0x12>
  }
  return len;
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_close>:

int _close(int file)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f82:	605a      	str	r2, [r3, #4]
  return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_isatty>:

int _isatty(int file)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f9a:	2301      	movs	r3, #1
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <_sbrk+0x5c>)
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <_sbrk+0x60>)
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <_sbrk+0x64>)
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <_sbrk+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d207      	bcs.n	8003004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff4:	f002 f9ca 	bl	800538c <__errno>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	e009      	b.n	8003018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <_sbrk+0x64>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <_sbrk+0x64>)
 8003014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20028000 	.word	0x20028000
 8003024:	00000400 	.word	0x00000400
 8003028:	200002a4 	.word	0x200002a4
 800302c:	200002c0 	.word	0x200002c0

08003030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <SystemInit+0x20>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <SystemInit+0x20>)
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800308c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003058:	f7ff ffea 	bl	8003030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <LoopForever+0x6>)
  ldr r1, =_edata
 800305e:	490d      	ldr	r1, [pc, #52]	; (8003094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <LoopForever+0xe>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <LoopForever+0x16>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f002 f989 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003086:	f7ff fcd1 	bl	8002a2c <main>

0800308a <LoopForever>:

LoopForever:
    b LoopForever
 800308a:	e7fe      	b.n	800308a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800308c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003094:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003098:	0800c268 	.word	0x0800c268
  ldr r2, =_sbss
 800309c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80030a0:	200002bc 	.word	0x200002bc

080030a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC1_IRQHandler>
	...

080030a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_Init+0x3c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_Init+0x3c>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030be:	2003      	movs	r0, #3
 80030c0:	f000 f920 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c4:	2000      	movs	r0, #0
 80030c6:	f000 f80f 	bl	80030e8 <HAL_InitTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	71fb      	strb	r3, [r7, #7]
 80030d4:	e001      	b.n	80030da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030d6:	f7ff fe3b 	bl	8002d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030da:	79fb      	ldrb	r3, [r7, #7]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_InitTick+0x6c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d023      	beq.n	8003144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_InitTick+0x70>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_InitTick+0x6c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f91d 	bl	8003352 <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d809      	bhi.n	8003138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f000 f8f5 	bl	800331a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_InitTick+0x74>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e007      	b.n	8003148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e004      	b.n	8003148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e001      	b.n	8003148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000008 	.word	0x20000008
 8003158:	20000000 	.word	0x20000000
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008
 8003184:	200002a8 	.word	0x200002a8

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	200002a8 	.word	0x200002a8

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff47 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff5c 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffb0 	bl	80032c0 <SysTick_Config>
 8003360:	4603      	mov	r3, r0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337a:	e154      	b.n	8003626 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2101      	movs	r1, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	4013      	ands	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8146 	beq.w	8003620 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d005      	beq.n	80033ac <HAL_GPIO_Init+0x40>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d130      	bne.n	800340e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e2:	2201      	movs	r2, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 0201 	and.w	r2, r3, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b03      	cmp	r3, #3
 8003418:	d017      	beq.n	800344a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d123      	bne.n	800349e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	08da      	lsrs	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	6939      	ldr	r1, [r7, #16]
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80a0 	beq.w	8003620 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e0:	4b58      	ldr	r3, [pc, #352]	; (8003644 <HAL_GPIO_Init+0x2d8>)
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	4a57      	ldr	r2, [pc, #348]	; (8003644 <HAL_GPIO_Init+0x2d8>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6613      	str	r3, [r2, #96]	; 0x60
 80034ec:	4b55      	ldr	r3, [pc, #340]	; (8003644 <HAL_GPIO_Init+0x2d8>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f8:	4a53      	ldr	r2, [pc, #332]	; (8003648 <HAL_GPIO_Init+0x2dc>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3302      	adds	r3, #2
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003522:	d019      	beq.n	8003558 <HAL_GPIO_Init+0x1ec>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a49      	ldr	r2, [pc, #292]	; (800364c <HAL_GPIO_Init+0x2e0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_GPIO_Init+0x1e8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a48      	ldr	r2, [pc, #288]	; (8003650 <HAL_GPIO_Init+0x2e4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_GPIO_Init+0x1e4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_GPIO_Init+0x2e8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0x1e0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a46      	ldr	r2, [pc, #280]	; (8003658 <HAL_GPIO_Init+0x2ec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_GPIO_Init+0x1dc>
 8003544:	2304      	movs	r3, #4
 8003546:	e008      	b.n	800355a <HAL_GPIO_Init+0x1ee>
 8003548:	2307      	movs	r3, #7
 800354a:	e006      	b.n	800355a <HAL_GPIO_Init+0x1ee>
 800354c:	2303      	movs	r3, #3
 800354e:	e004      	b.n	800355a <HAL_GPIO_Init+0x1ee>
 8003550:	2302      	movs	r3, #2
 8003552:	e002      	b.n	800355a <HAL_GPIO_Init+0x1ee>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_GPIO_Init+0x1ee>
 8003558:	2300      	movs	r3, #0
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	f002 0203 	and.w	r2, r2, #3
 8003560:	0092      	lsls	r2, r2, #2
 8003562:	4093      	lsls	r3, r2
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800356a:	4937      	ldr	r1, [pc, #220]	; (8003648 <HAL_GPIO_Init+0x2dc>)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_GPIO_Init+0x2f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_GPIO_Init+0x2f0>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035a2:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_GPIO_Init+0x2f0>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_GPIO_Init+0x2f0>)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_GPIO_Init+0x2f0>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_GPIO_Init+0x2f0>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_GPIO_Init+0x2f0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_GPIO_Init+0x2f0>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3301      	adds	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	f47f aea3 	bne.w	800337c <HAL_GPIO_Init+0x10>
  }
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40021000 	.word	0x40021000
 8003648:	40010000 	.word	0x40010000
 800364c:	48000400 	.word	0x48000400
 8003650:	48000800 	.word	0x48000800
 8003654:	48000c00 	.word	0x48000c00
 8003658:	48001000 	.word	0x48001000
 800365c:	40010400 	.word	0x40010400

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800367c:	e002      	b.n	8003684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40007000 	.word	0x40007000

080036ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d130      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d038      	beq.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2232      	movs	r2, #50	; 0x32
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	3301      	adds	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f0:	e002      	b.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003704:	d102      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f2      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d110      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d007      	beq.n	800373c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003734:	4a05      	ldr	r2, [pc, #20]	; (800374c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40007000 	.word	0x40007000
 8003750:	20000000 	.word	0x20000000
 8003754:	431bde83 	.word	0x431bde83

08003758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 bc02 	b.w	8003f70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376c:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003776:	4b94      	ldr	r3, [pc, #592]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80e4 	beq.w	8003956 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4c>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	f040 808b 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 8087 	bne.w	80038b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x64>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e3d9      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_OscConfig+0x7e>
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d4:	e005      	b.n	80037e2 <HAL_RCC_OscConfig+0x8a>
 80037d6:	4b7c      	ldr	r3, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d223      	bcs.n	800382e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd8c 	bl	8004308 <RCC_SetFlashLatencyFromMSIRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e3ba      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fa:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a72      	ldr	r2, [pc, #456]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	496d      	ldr	r1, [pc, #436]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4b6b      	ldr	r3, [pc, #428]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	4968      	ldr	r1, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e025      	b.n	800387a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382e:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4960      	ldr	r1, [pc, #384]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384c:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	495b      	ldr	r1, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fd4c 	bl	8004308 <RCC_SetFlashLatencyFromMSIRange>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e37a      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800387a:	f000 fc81 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4950      	ldr	r1, [pc, #320]	; (80039cc <HAL_RCC_OscConfig+0x274>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <HAL_RCC_OscConfig+0x278>)
 8003898:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fc22 	bl	80030e8 <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d052      	beq.n	8003954 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	e35e      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d032      	beq.n	8003920 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a42      	ldr	r2, [pc, #264]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038c6:	f7ff fc5f 	bl	8003188 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ce:	f7ff fc5b 	bl	8003188 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e347      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4930      	ldr	r1, [pc, #192]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	492b      	ldr	r1, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e01a      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392c:	f7ff fc2c 	bl	8003188 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003934:	f7ff fc28 	bl	8003188 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e314      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1dc>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d073      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x21c>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d10e      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d063      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d15f      	bne.n	8003a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e2f1      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x24c>
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e025      	b.n	80039f0 <HAL_RCC_OscConfig+0x298>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d114      	bne.n	80039d8 <HAL_RCC_OscConfig+0x280>
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a02      	ldr	r2, [pc, #8]	; (80039c8 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e013      	b.n	80039f0 <HAL_RCC_OscConfig+0x298>
 80039c8:	40021000 	.word	0x40021000
 80039cc:	0800bbe8 	.word	0x0800bbe8
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000004 	.word	0x20000004
 80039d8:	4ba0      	ldr	r3, [pc, #640]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a9f      	ldr	r2, [pc, #636]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b9d      	ldr	r3, [pc, #628]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a9c      	ldr	r2, [pc, #624]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7ff fbc6 	bl	8003188 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff fbc2 	bl	8003188 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e2ae      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	4b92      	ldr	r3, [pc, #584]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x2a8>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff fbb2 	bl	8003188 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7ff fbae 	bl	8003188 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e29a      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3a:	4b88      	ldr	r3, [pc, #544]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x2d0>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d060      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_OscConfig+0x310>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d116      	bne.n	8003a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_OscConfig+0x328>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e277      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4973      	ldr	r1, [pc, #460]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	e040      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d023      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7ff fb6d 	bl	8003188 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7ff fb69 	bl	8003188 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e255      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac4:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	495f      	ldr	r1, [pc, #380]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
 8003ae4:	e018      	b.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae6:	4b5d      	ldr	r3, [pc, #372]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7ff fb49 	bl	8003188 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7ff fb45 	bl	8003188 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e231      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b0c:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d03c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b32:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7ff fb24 	bl	8003188 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7ff fb20 	bl	8003188 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e20c      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b56:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
 8003b64:	e01b      	b.n	8003b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	4a3b      	ldr	r2, [pc, #236]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7ff fb07 	bl	8003188 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7ff fb03 	bl	8003188 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e1ef      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ef      	bne.n	8003b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80a6 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d118      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf0:	f7ff faca 	bl	8003188 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7ff fac6 	bl	8003188 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1b2      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_RCC_OscConfig+0x508>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4d8>
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2e:	e029      	b.n	8003c84 <HAL_RCC_OscConfig+0x52c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	d115      	bne.n	8003c64 <HAL_RCC_OscConfig+0x50c>
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <HAL_RCC_OscConfig+0x504>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x52c>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	4b9a      	ldr	r3, [pc, #616]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	4a99      	ldr	r2, [pc, #612]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c74:	4b96      	ldr	r3, [pc, #600]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a95      	ldr	r2, [pc, #596]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7ff fa7c 	bl	8003188 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7ff fa78 	bl	8003188 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e162      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ed      	beq.n	8003c94 <HAL_RCC_OscConfig+0x53c>
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7ff fa65 	bl	8003188 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7ff fa61 	bl	8003188 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e14b      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd8:	4b7d      	ldr	r3, [pc, #500]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ed      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce6:	7ffb      	ldrb	r3, [r7, #31]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cec:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0c:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d12:	4a6f      	ldr	r2, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7ff fa34 	bl	8003188 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d24:	f7ff fa30 	bl	8003188 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e11c      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d36:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCC_OscConfig+0x5cc>
 8003d44:	e01b      	b.n	8003d7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4c:	4a60      	ldr	r2, [pc, #384]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7ff fa17 	bl	8003188 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d5e:	f7ff fa13 	bl	8003188 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0ff      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d70:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80f3 	beq.w	8003f6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	f040 80c9 	bne.w	8003f24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d92:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d12c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	3b01      	subs	r3, #1
 8003db2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d123      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d113      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d109      	bne.n	8003e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d06b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d062      	beq.n	8003ecc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e06:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0ac      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e22:	f7ff f9b1 	bl	8003188 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7ff f9ad 	bl	8003188 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e099      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <HAL_RCC_OscConfig+0x77c>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e62:	0212      	lsls	r2, r2, #8
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e6a:	0852      	lsrs	r2, r2, #1
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	0552      	lsls	r2, r2, #21
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0652      	lsls	r2, r2, #25
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e82:	06d2      	lsls	r2, r2, #27
 8003e84:	430a      	orrs	r2, r1
 8003e86:	4912      	ldr	r1, [pc, #72]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ea4:	f7ff f970 	bl	8003188 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7ff f96c 	bl	8003188 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e058      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <HAL_RCC_OscConfig+0x778>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eca:	e050      	b.n	8003f6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e04f      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d144      	bne.n	8003f6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efc:	f7ff f944 	bl	8003188 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7ff f940 	bl	8003188 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e02c      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x7ac>
 8003f22:	e024      	b.n	8003f6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d01f      	beq.n	8003f6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7ff f927 	bl	8003188 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7ff f923 	bl	8003188 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e00f      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	4905      	ldr	r1, [pc, #20]	; (8003f78 <HAL_RCC_OscConfig+0x820>)
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_OscConfig+0x824>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
 8003f68:	e001      	b.n	8003f6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	feeefffc 	.word	0xfeeefffc

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0e7      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b75      	ldr	r3, [pc, #468]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d910      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b72      	ldr	r3, [pc, #456]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 0207 	bic.w	r2, r3, #7
 8003faa:	4970      	ldr	r1, [pc, #448]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b6e      	ldr	r3, [pc, #440]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0cf      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d010      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d908      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4960      	ldr	r1, [pc, #384]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04c      	beq.n	8004098 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004006:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d121      	bne.n	8004056 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0a6      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401e:	4b54      	ldr	r3, [pc, #336]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d115      	bne.n	8004056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e09a      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004036:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e08e      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e086      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4943      	ldr	r1, [pc, #268]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7ff f88e 	bl	8003188 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7ff f88a 	bl	8003188 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e06e      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d010      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d208      	bcs.n	80040c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	492b      	ldr	r1, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d210      	bcs.n	80040f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	4923      	ldr	r1, [pc, #140]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e4:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e036      	b.n	8004164 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4918      	ldr	r1, [pc, #96]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4910      	ldr	r1, [pc, #64]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004134:	f000 f824 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	490b      	ldr	r1, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1fc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ffc5 	bl	80030e8 <HAL_InitTick>
 800415e:	4603      	mov	r3, r0
 8004160:	72fb      	strb	r3, [r7, #11]

  return status;
 8004162:	7afb      	ldrb	r3, [r7, #11]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40022000 	.word	0x40022000
 8004170:	40021000 	.word	0x40021000
 8004174:	0800bbe8 	.word	0x0800bbe8
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418e:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004198:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d121      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d11e      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e005      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041d0:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e004      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d101      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <HAL_RCC_GetSysClockFreq+0x114>)
 8004206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d134      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0xa6>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d003      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xac>
 8004224:	e005      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 8004228:	617b      	str	r3, [r7, #20]
      break;
 800422a:	e005      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_GetSysClockFreq+0x114>)
 800422e:	617b      	str	r3, [r7, #20]
      break;
 8004230:	e002      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	617b      	str	r3, [r7, #20]
      break;
 8004236:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004238:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	fb03 f202 	mul.w	r2, r3, r2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	0e5b      	lsrs	r3, r3, #25
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	3301      	adds	r3, #1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004278:	69bb      	ldr	r3, [r7, #24]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	; 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	0800bc00 	.word	0x0800bc00
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_GetHCLKFreq+0x14>)
 800429e:	681b      	ldr	r3, [r3, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042b4:	f7ff fff0 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	0800bbf8 	.word	0x0800bbf8

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042e0:	f7ff ffda 	bl	8004298 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0adb      	lsrs	r3, r3, #11
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4904      	ldr	r1, [pc, #16]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800bbf8 	.word	0x0800bbf8

08004308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004314:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004320:	f7ff f9b6 	bl	8003690 <HAL_PWREx_GetVoltageRange>
 8004324:	6178      	str	r0, [r7, #20]
 8004326:	e014      	b.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004332:	6593      	str	r3, [r2, #88]	; 0x58
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004340:	f7ff f9a6 	bl	8003690 <HAL_PWREx_GetVoltageRange>
 8004344:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d10b      	bne.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d919      	bls.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2ba0      	cmp	r3, #160	; 0xa0
 8004364:	d902      	bls.n	800436c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004366:	2302      	movs	r3, #2
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	e013      	b.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800436c:	2301      	movs	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e010      	b.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d902      	bls.n	800437e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004378:	2303      	movs	r3, #3
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	e00a      	b.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d102      	bne.n	800438a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004384:	2302      	movs	r3, #2
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	e004      	b.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b70      	cmp	r3, #112	; 0x70
 800438e:	d101      	bne.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004390:	2301      	movs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 0207 	bic.w	r2, r3, #7
 800439c:	4909      	ldr	r1, [pc, #36]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40022000 	.word	0x40022000

080043c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d0:	2300      	movs	r3, #0
 80043d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043d4:	2300      	movs	r3, #0
 80043d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d031      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ec:	d01a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043f2:	d814      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fc:	d10f      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a5c      	ldr	r2, [pc, #368]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800440a:	e00c      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa44 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	74fb      	strb	r3, [r7, #19]
      break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442c:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	494e      	ldr	r1, [pc, #312]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 809e 	beq.w	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b40      	ldr	r3, [pc, #256]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	; 0x58
 800447c:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	4b3a      	ldr	r3, [pc, #232]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a39      	ldr	r2, [pc, #228]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004498:	f7fe fe76 	bl	8003188 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fe fe72 	bl	8003188 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	74fb      	strb	r3, [r7, #19]
        break;
 80044b2:	e005      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b4:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15a      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d019      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d016      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe fe32 	bl	8003188 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	e00b      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fe fe2e 	bl	8003188 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d902      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	74fb      	strb	r3, [r7, #19]
            break;
 800453e:	e006      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ec      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004562:	4904      	ldr	r1, [pc, #16]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800456a:	e009      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	74bb      	strb	r3, [r7, #18]
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004580:	7c7b      	ldrb	r3, [r7, #17]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004586:	4b9e      	ldr	r3, [pc, #632]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	4a9d      	ldr	r2, [pc, #628]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800459e:	4b98      	ldr	r3, [pc, #608]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f023 0203 	bic.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4994      	ldr	r1, [pc, #592]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c0:	4b8f      	ldr	r3, [pc, #572]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 020c 	bic.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	498c      	ldr	r1, [pc, #560]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e2:	4b87      	ldr	r3, [pc, #540]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	4983      	ldr	r1, [pc, #524]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004604:	4b7e      	ldr	r3, [pc, #504]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	497b      	ldr	r1, [pc, #492]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004626:	4b76      	ldr	r3, [pc, #472]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4972      	ldr	r1, [pc, #456]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004648:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	496a      	ldr	r1, [pc, #424]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	4961      	ldr	r1, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800468c:	4b5c      	ldr	r3, [pc, #368]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	4959      	ldr	r1, [pc, #356]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ae:	4b54      	ldr	r3, [pc, #336]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4950      	ldr	r1, [pc, #320]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d0:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	4948      	ldr	r1, [pc, #288]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f8:	f023 0203 	bic.w	r2, r3, #3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	493f      	ldr	r1, [pc, #252]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d028      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004714:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004732:	d106      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004734:	4b32      	ldr	r3, [pc, #200]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a31      	ldr	r2, [pc, #196]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800473a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473e:	60d3      	str	r3, [r2, #12]
 8004740:	e011      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800474a:	d10c      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f8a4 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d028      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	491f      	ldr	r1, [pc, #124]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004790:	d106      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479c:	60d3      	str	r3, [r2, #12]
 800479e:	e011      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f875 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02b      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ee:	d109      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a02      	ldr	r2, [pc, #8]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
 80047fc:	e014      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f843 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004834:	4b19      	ldr	r3, [pc, #100]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	4916      	ldr	r1, [pc, #88]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004852:	d10c      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	2102      	movs	r1, #2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f820 	bl	80048a0 <RCCEx_PLLSAI1_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004890:	7cbb      	ldrb	r3, [r7, #18]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000

080048a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ba:	4b71      	ldr	r3, [pc, #452]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
       ||
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048d2:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
       ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d047      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e044      	b.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d018      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x86>
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d825      	bhi.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x62>
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d009      	beq.n	8004914 <RCCEx_PLLSAI1_Config+0x74>
 8004900:	e020      	b.n	8004944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004902:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004912:	e01a      	b.n	800494a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004914:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e013      	b.n	800494e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004926:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004932:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004942:	e006      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e004      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004952:	bf00      	nop
    }

    if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800495a:	4b49      	ldr	r3, [pc, #292]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	430b      	orrs	r3, r1
 8004970:	4943      	ldr	r1, [pc, #268]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d17c      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fe fbfe 	bl	8003188 <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800498e:	e009      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004990:	f7fe fbfa 	bl	8003188 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	73fb      	strb	r3, [r7, #15]
        break;
 80049a2:	e005      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a4:	4b36      	ldr	r3, [pc, #216]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ef      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15f      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d110      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049bc:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	06d2      	lsls	r2, r2, #27
 80049d4:	430a      	orrs	r2, r1
 80049d6:	492a      	ldr	r1, [pc, #168]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
 80049dc:	e027      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d112      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e4:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6892      	ldr	r2, [r2, #8]
 80049f4:	0211      	lsls	r1, r2, #8
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6912      	ldr	r2, [r2, #16]
 80049fa:	0852      	lsrs	r2, r2, #1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0552      	lsls	r2, r2, #21
 8004a00:	430a      	orrs	r2, r1
 8004a02:	491f      	ldr	r1, [pc, #124]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]
 8004a08:	e011      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	0211      	lsls	r1, r2, #8
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6952      	ldr	r2, [r2, #20]
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0652      	lsls	r2, r2, #25
 8004a26:	430a      	orrs	r2, r1
 8004a28:	4915      	ldr	r1, [pc, #84]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fe fba5 	bl	8003188 <HAL_GetTick>
 8004a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a40:	e009      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a42:	f7fe fba1 	bl	8003188 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d902      	bls.n	8004a56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	73fb      	strb	r3, [r7, #15]
          break;
 8004a54:	e005      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e040      	b.n	8004b18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe f976 	bl	8002d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f82c 	bl	8004b20 <UART_SetConfig>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e022      	b.n	8004b18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 faa6 	bl	800502c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb2d 	bl	8005170 <UART_CheckIdleState>
 8004b16:	4603      	mov	r3, r0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b08a      	sub	sp, #40	; 0x28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4ba5      	ldr	r3, [pc, #660]	; (8004de4 <UART_SetConfig+0x2c4>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a9a      	ldr	r2, [pc, #616]	; (8004de8 <UART_SetConfig+0x2c8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a91      	ldr	r2, [pc, #580]	; (8004dec <UART_SetConfig+0x2cc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d126      	bne.n	8004bf8 <UART_SetConfig+0xd8>
 8004baa:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d81b      	bhi.n	8004bf0 <UART_SetConfig+0xd0>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0xa0>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bd1 	.word	0x08004bd1
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e0d6      	b.n	8004d86 <UART_SetConfig+0x266>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bde:	e0d2      	b.n	8004d86 <UART_SetConfig+0x266>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be6:	e0ce      	b.n	8004d86 <UART_SetConfig+0x266>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e0ca      	b.n	8004d86 <UART_SetConfig+0x266>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf6:	e0c6      	b.n	8004d86 <UART_SetConfig+0x266>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a7d      	ldr	r2, [pc, #500]	; (8004df4 <UART_SetConfig+0x2d4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d138      	bne.n	8004c74 <UART_SetConfig+0x154>
 8004c02:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d82d      	bhi.n	8004c6c <UART_SetConfig+0x14c>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0xf8>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004c6d 	.word	0x08004c6d
 8004c20:	08004c6d 	.word	0x08004c6d
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c6d 	.word	0x08004c6d
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c55 	.word	0x08004c55
 8004c3c:	08004c6d 	.word	0x08004c6d
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c65 	.word	0x08004c65
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e098      	b.n	8004d86 <UART_SetConfig+0x266>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e094      	b.n	8004d86 <UART_SetConfig+0x266>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e090      	b.n	8004d86 <UART_SetConfig+0x266>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e08c      	b.n	8004d86 <UART_SetConfig+0x266>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e088      	b.n	8004d86 <UART_SetConfig+0x266>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5f      	ldr	r2, [pc, #380]	; (8004df8 <UART_SetConfig+0x2d8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d125      	bne.n	8004cca <UART_SetConfig+0x1aa>
 8004c7e:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d016      	beq.n	8004cba <UART_SetConfig+0x19a>
 8004c8c:	2b30      	cmp	r3, #48	; 0x30
 8004c8e:	d818      	bhi.n	8004cc2 <UART_SetConfig+0x1a2>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d00a      	beq.n	8004caa <UART_SetConfig+0x18a>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d814      	bhi.n	8004cc2 <UART_SetConfig+0x1a2>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <UART_SetConfig+0x182>
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d008      	beq.n	8004cb2 <UART_SetConfig+0x192>
 8004ca0:	e00f      	b.n	8004cc2 <UART_SetConfig+0x1a2>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca8:	e06d      	b.n	8004d86 <UART_SetConfig+0x266>
 8004caa:	2302      	movs	r3, #2
 8004cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb0:	e069      	b.n	8004d86 <UART_SetConfig+0x266>
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb8:	e065      	b.n	8004d86 <UART_SetConfig+0x266>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc0:	e061      	b.n	8004d86 <UART_SetConfig+0x266>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc8:	e05d      	b.n	8004d86 <UART_SetConfig+0x266>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <UART_SetConfig+0x2dc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d125      	bne.n	8004d20 <UART_SetConfig+0x200>
 8004cd4:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cde:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce0:	d016      	beq.n	8004d10 <UART_SetConfig+0x1f0>
 8004ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce4:	d818      	bhi.n	8004d18 <UART_SetConfig+0x1f8>
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d00a      	beq.n	8004d00 <UART_SetConfig+0x1e0>
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d814      	bhi.n	8004d18 <UART_SetConfig+0x1f8>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <UART_SetConfig+0x1d8>
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x1e8>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x1f8>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e042      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e03e      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e03a      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e036      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e032      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a30      	ldr	r2, [pc, #192]	; (8004de8 <UART_SetConfig+0x2c8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d12a      	bne.n	8004d80 <UART_SetConfig+0x260>
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <UART_SetConfig+0x2d0>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d38:	d01a      	beq.n	8004d70 <UART_SetConfig+0x250>
 8004d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0x258>
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d44:	d00c      	beq.n	8004d60 <UART_SetConfig+0x240>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4a:	d815      	bhi.n	8004d78 <UART_SetConfig+0x258>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <UART_SetConfig+0x238>
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x248>
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x258>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e012      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e00e      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e00a      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e006      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e002      	b.n	8004d86 <UART_SetConfig+0x266>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <UART_SetConfig+0x2c8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	f040 808b 	bne.w	8004ea8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d834      	bhi.n	8004e04 <UART_SetConfig+0x2e4>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x280>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004e05 	.word	0x08004e05
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004dd3 	.word	0x08004dd3
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e05 	.word	0x08004e05
 8004dbc:	08004e05 	.word	0x08004e05
 8004dc0:	08004ddb 	.word	0x08004ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7ff fa74 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	61f8      	str	r0, [r7, #28]
        break;
 8004dca:	e021      	b.n	8004e10 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <UART_SetConfig+0x2e0>)
 8004dce:	61fb      	str	r3, [r7, #28]
        break;
 8004dd0:	e01e      	b.n	8004e10 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd2:	f7ff f9d5 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004dd6:	61f8      	str	r0, [r7, #28]
        break;
 8004dd8:	e01a      	b.n	8004e10 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dde:	61fb      	str	r3, [r7, #28]
        break;
 8004de0:	e016      	b.n	8004e10 <UART_SetConfig+0x2f0>
 8004de2:	bf00      	nop
 8004de4:	efff69f3 	.word	0xefff69f3
 8004de8:	40008000 	.word	0x40008000
 8004dec:	40013800 	.word	0x40013800
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40004400 	.word	0x40004400
 8004df8:	40004800 	.word	0x40004800
 8004dfc:	40004c00 	.word	0x40004c00
 8004e00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80fa 	beq.w	800500c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d305      	bcc.n	8004e34 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d903      	bls.n	8004e3c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e3a:	e0e7      	b.n	800500c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	461c      	mov	r4, r3
 8004e42:	4615      	mov	r5, r2
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	022b      	lsls	r3, r5, #8
 8004e4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e52:	0222      	lsls	r2, r4, #8
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	6849      	ldr	r1, [r1, #4]
 8004e58:	0849      	lsrs	r1, r1, #1
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	4688      	mov	r8, r1
 8004e5e:	4681      	mov	r9, r0
 8004e60:	eb12 0a08 	adds.w	sl, r2, r8
 8004e64:	eb43 0b09 	adc.w	fp, r3, r9
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e76:	4650      	mov	r0, sl
 8004e78:	4659      	mov	r1, fp
 8004e7a:	f7fb febd 	bl	8000bf8 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4613      	mov	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8c:	d308      	bcc.n	8004ea0 <UART_SetConfig+0x380>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e94:	d204      	bcs.n	8004ea0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e0b5      	b.n	800500c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea6:	e0b1      	b.n	800500c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	d15d      	bne.n	8004f6e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d827      	bhi.n	8004f0a <UART_SetConfig+0x3ea>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x3a0>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0b 	.word	0x08004f0b
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f0b 	.word	0x08004f0b
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7ff f9e4 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	61f8      	str	r0, [r7, #28]
        break;
 8004eea:	e014      	b.n	8004f16 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7ff f9f6 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8004ef0:	61f8      	str	r0, [r7, #28]
        break;
 8004ef2:	e010      	b.n	8004f16 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <UART_SetConfig+0x508>)
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e00d      	b.n	8004f16 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7ff f941 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004efe:	61f8      	str	r0, [r7, #28]
        break;
 8004f00:	e009      	b.n	8004f16 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	61fb      	str	r3, [r7, #28]
        break;
 8004f08:	e005      	b.n	8004f16 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d077      	beq.n	800500c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	005a      	lsls	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b0f      	cmp	r3, #15
 8004f36:	d916      	bls.n	8004f66 <UART_SetConfig+0x446>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3e:	d212      	bcs.n	8004f66 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f023 030f 	bic.w	r3, r3, #15
 8004f48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	8afb      	ldrh	r3, [r7, #22]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	8afa      	ldrh	r2, [r7, #22]
 8004f62:	60da      	str	r2, [r3, #12]
 8004f64:	e052      	b.n	800500c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f6c:	e04e      	b.n	800500c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d827      	bhi.n	8004fc6 <UART_SetConfig+0x4a6>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x45c>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7ff f986 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61f8      	str	r0, [r7, #28]
        break;
 8004fa6:	e014      	b.n	8004fd2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7ff f998 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e010      	b.n	8004fd2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <UART_SetConfig+0x508>)
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7ff f8e3 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004fba:	61f8      	str	r0, [r7, #28]
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	61fb      	str	r3, [r7, #28]
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d019      	beq.n	800500c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	085a      	lsrs	r2, r3, #1
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	441a      	add	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d909      	bls.n	8005006 <UART_SetConfig+0x4e6>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff8:	d205      	bcs.n	8005006 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e002      	b.n	800500c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005018:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	; 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005026:	bf00      	nop
 8005028:	00f42400 	.word	0x00f42400

0800502c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01a      	beq.n	8005142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512a:	d10a      	bne.n	8005142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005180:	f7fe f802 	bl	8003188 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d10e      	bne.n	80051b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f82d 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e023      	b.n	80051fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d10e      	bne.n	80051de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f817 	bl	8005202 <UART_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e00d      	b.n	80051fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b09c      	sub	sp, #112	; 0x70
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005212:	e0a5      	b.n	8005360 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	f000 80a1 	beq.w	8005360 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fd ffb3 	bl	8003188 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <UART_WaitOnFlagUntilTimeout+0x32>
 800522e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005230:	2b00      	cmp	r3, #0
 8005232:	d13e      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005248:	667b      	str	r3, [r7, #100]	; 0x64
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005254:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e6      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	663b      	str	r3, [r7, #96]	; 0x60
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005286:	64ba      	str	r2, [r7, #72]	; 0x48
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800528c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e067      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d04f      	beq.n	8005360 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ce:	d147      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
 80052fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3308      	adds	r3, #8
 8005312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	613b      	str	r3, [r7, #16]
   return(result);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	66bb      	str	r3, [r7, #104]	; 0x68
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800532c:	623a      	str	r2, [r7, #32]
 800532e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	6a3a      	ldr	r2, [r7, #32]
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	61bb      	str	r3, [r7, #24]
   return(result);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e010      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4013      	ands	r3, r2
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	429a      	cmp	r2, r3
 800537c:	f43f af4a 	beq.w	8005214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3770      	adds	r7, #112	; 0x70
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	2000000c 	.word	0x2000000c

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f005 f826 	bl	800a3fc <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	0800c260 	.word	0x0800c260
 80053d4:	0800c260 	.word	0x0800c260
 80053d8:	0800c260 	.word	0x0800c260
 80053dc:	0800c264 	.word	0x0800c264

080053e0 <malloc>:
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <malloc+0xc>)
 80053e2:	4601      	mov	r1, r0
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f000 b885 	b.w	80054f4 <_malloc_r>
 80053ea:	bf00      	nop
 80053ec:	2000000c 	.word	0x2000000c

080053f0 <memcpy>:
 80053f0:	440a      	add	r2, r1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f8:	d100      	bne.n	80053fc <memcpy+0xc>
 80053fa:	4770      	bx	lr
 80053fc:	b510      	push	{r4, lr}
 80053fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005406:	4291      	cmp	r1, r2
 8005408:	d1f9      	bne.n	80053fe <memcpy+0xe>
 800540a:	bd10      	pop	{r4, pc}

0800540c <memset>:
 800540c:	4402      	add	r2, r0
 800540e:	4603      	mov	r3, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <_free_r>:
 800541c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800541e:	2900      	cmp	r1, #0
 8005420:	d044      	beq.n	80054ac <_free_r+0x90>
 8005422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005426:	9001      	str	r0, [sp, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f1a1 0404 	sub.w	r4, r1, #4
 800542e:	bfb8      	it	lt
 8005430:	18e4      	addlt	r4, r4, r3
 8005432:	f001 fc0f 	bl	8006c54 <__malloc_lock>
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <_free_r+0x94>)
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	b933      	cbnz	r3, 800544c <_free_r+0x30>
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	6014      	str	r4, [r2, #0]
 8005442:	b003      	add	sp, #12
 8005444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005448:	f001 bc0a 	b.w	8006c60 <__malloc_unlock>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d908      	bls.n	8005462 <_free_r+0x46>
 8005450:	6825      	ldr	r5, [r4, #0]
 8005452:	1961      	adds	r1, r4, r5
 8005454:	428b      	cmp	r3, r1
 8005456:	bf01      	itttt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	1949      	addeq	r1, r1, r5
 800545e:	6021      	streq	r1, [r4, #0]
 8005460:	e7ed      	b.n	800543e <_free_r+0x22>
 8005462:	461a      	mov	r2, r3
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b10b      	cbz	r3, 800546c <_free_r+0x50>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d9fa      	bls.n	8005462 <_free_r+0x46>
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	1855      	adds	r5, r2, r1
 8005470:	42a5      	cmp	r5, r4
 8005472:	d10b      	bne.n	800548c <_free_r+0x70>
 8005474:	6824      	ldr	r4, [r4, #0]
 8005476:	4421      	add	r1, r4
 8005478:	1854      	adds	r4, r2, r1
 800547a:	42a3      	cmp	r3, r4
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	d1e0      	bne.n	8005442 <_free_r+0x26>
 8005480:	681c      	ldr	r4, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	6053      	str	r3, [r2, #4]
 8005486:	4421      	add	r1, r4
 8005488:	6011      	str	r1, [r2, #0]
 800548a:	e7da      	b.n	8005442 <_free_r+0x26>
 800548c:	d902      	bls.n	8005494 <_free_r+0x78>
 800548e:	230c      	movs	r3, #12
 8005490:	6003      	str	r3, [r0, #0]
 8005492:	e7d6      	b.n	8005442 <_free_r+0x26>
 8005494:	6825      	ldr	r5, [r4, #0]
 8005496:	1961      	adds	r1, r4, r5
 8005498:	428b      	cmp	r3, r1
 800549a:	bf04      	itt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	bf04      	itt	eq
 80054a4:	1949      	addeq	r1, r1, r5
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	6054      	str	r4, [r2, #4]
 80054aa:	e7ca      	b.n	8005442 <_free_r+0x26>
 80054ac:	b003      	add	sp, #12
 80054ae:	bd30      	pop	{r4, r5, pc}
 80054b0:	200002ac 	.word	0x200002ac

080054b4 <sbrk_aligned>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4e0e      	ldr	r6, [pc, #56]	; (80054f0 <sbrk_aligned+0x3c>)
 80054b8:	460c      	mov	r4, r1
 80054ba:	6831      	ldr	r1, [r6, #0]
 80054bc:	4605      	mov	r5, r0
 80054be:	b911      	cbnz	r1, 80054c6 <sbrk_aligned+0x12>
 80054c0:	f000 fcf6 	bl	8005eb0 <_sbrk_r>
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f000 fcf1 	bl	8005eb0 <_sbrk_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d00a      	beq.n	80054e8 <sbrk_aligned+0x34>
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d007      	beq.n	80054ec <sbrk_aligned+0x38>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fce6 	bl	8005eb0 <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d101      	bne.n	80054ec <sbrk_aligned+0x38>
 80054e8:	f04f 34ff 	mov.w	r4, #4294967295
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	200002b0 	.word	0x200002b0

080054f4 <_malloc_r>:
 80054f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f8:	1ccd      	adds	r5, r1, #3
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	2d00      	cmp	r5, #0
 8005508:	4607      	mov	r7, r0
 800550a:	db01      	blt.n	8005510 <_malloc_r+0x1c>
 800550c:	42a9      	cmp	r1, r5
 800550e:	d905      	bls.n	800551c <_malloc_r+0x28>
 8005510:	230c      	movs	r3, #12
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	2600      	movs	r6, #0
 8005516:	4630      	mov	r0, r6
 8005518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551c:	4e2e      	ldr	r6, [pc, #184]	; (80055d8 <_malloc_r+0xe4>)
 800551e:	f001 fb99 	bl	8006c54 <__malloc_lock>
 8005522:	6833      	ldr	r3, [r6, #0]
 8005524:	461c      	mov	r4, r3
 8005526:	bb34      	cbnz	r4, 8005576 <_malloc_r+0x82>
 8005528:	4629      	mov	r1, r5
 800552a:	4638      	mov	r0, r7
 800552c:	f7ff ffc2 	bl	80054b4 <sbrk_aligned>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	4604      	mov	r4, r0
 8005534:	d14d      	bne.n	80055d2 <_malloc_r+0xde>
 8005536:	6834      	ldr	r4, [r6, #0]
 8005538:	4626      	mov	r6, r4
 800553a:	2e00      	cmp	r6, #0
 800553c:	d140      	bne.n	80055c0 <_malloc_r+0xcc>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	4631      	mov	r1, r6
 8005542:	4638      	mov	r0, r7
 8005544:	eb04 0803 	add.w	r8, r4, r3
 8005548:	f000 fcb2 	bl	8005eb0 <_sbrk_r>
 800554c:	4580      	cmp	r8, r0
 800554e:	d13a      	bne.n	80055c6 <_malloc_r+0xd2>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	3503      	adds	r5, #3
 8005554:	1a6d      	subs	r5, r5, r1
 8005556:	f025 0503 	bic.w	r5, r5, #3
 800555a:	3508      	adds	r5, #8
 800555c:	2d0c      	cmp	r5, #12
 800555e:	bf38      	it	cc
 8005560:	250c      	movcc	r5, #12
 8005562:	4629      	mov	r1, r5
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff ffa5 	bl	80054b4 <sbrk_aligned>
 800556a:	3001      	adds	r0, #1
 800556c:	d02b      	beq.n	80055c6 <_malloc_r+0xd2>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	442b      	add	r3, r5
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	e00e      	b.n	8005594 <_malloc_r+0xa0>
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	1b52      	subs	r2, r2, r5
 800557a:	d41e      	bmi.n	80055ba <_malloc_r+0xc6>
 800557c:	2a0b      	cmp	r2, #11
 800557e:	d916      	bls.n	80055ae <_malloc_r+0xba>
 8005580:	1961      	adds	r1, r4, r5
 8005582:	42a3      	cmp	r3, r4
 8005584:	6025      	str	r5, [r4, #0]
 8005586:	bf18      	it	ne
 8005588:	6059      	strne	r1, [r3, #4]
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	bf08      	it	eq
 800558e:	6031      	streq	r1, [r6, #0]
 8005590:	5162      	str	r2, [r4, r5]
 8005592:	604b      	str	r3, [r1, #4]
 8005594:	4638      	mov	r0, r7
 8005596:	f104 060b 	add.w	r6, r4, #11
 800559a:	f001 fb61 	bl	8006c60 <__malloc_unlock>
 800559e:	f026 0607 	bic.w	r6, r6, #7
 80055a2:	1d23      	adds	r3, r4, #4
 80055a4:	1af2      	subs	r2, r6, r3
 80055a6:	d0b6      	beq.n	8005516 <_malloc_r+0x22>
 80055a8:	1b9b      	subs	r3, r3, r6
 80055aa:	50a3      	str	r3, [r4, r2]
 80055ac:	e7b3      	b.n	8005516 <_malloc_r+0x22>
 80055ae:	6862      	ldr	r2, [r4, #4]
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	bf0c      	ite	eq
 80055b4:	6032      	streq	r2, [r6, #0]
 80055b6:	605a      	strne	r2, [r3, #4]
 80055b8:	e7ec      	b.n	8005594 <_malloc_r+0xa0>
 80055ba:	4623      	mov	r3, r4
 80055bc:	6864      	ldr	r4, [r4, #4]
 80055be:	e7b2      	b.n	8005526 <_malloc_r+0x32>
 80055c0:	4634      	mov	r4, r6
 80055c2:	6876      	ldr	r6, [r6, #4]
 80055c4:	e7b9      	b.n	800553a <_malloc_r+0x46>
 80055c6:	230c      	movs	r3, #12
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4638      	mov	r0, r7
 80055cc:	f001 fb48 	bl	8006c60 <__malloc_unlock>
 80055d0:	e7a1      	b.n	8005516 <_malloc_r+0x22>
 80055d2:	6025      	str	r5, [r4, #0]
 80055d4:	e7de      	b.n	8005594 <_malloc_r+0xa0>
 80055d6:	bf00      	nop
 80055d8:	200002ac 	.word	0x200002ac

080055dc <__cvt>:
 80055dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	ec55 4b10 	vmov	r4, r5, d0
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	460e      	mov	r6, r1
 80055e8:	4619      	mov	r1, r3
 80055ea:	462b      	mov	r3, r5
 80055ec:	bfbb      	ittet	lt
 80055ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055f2:	461d      	movlt	r5, r3
 80055f4:	2300      	movge	r3, #0
 80055f6:	232d      	movlt	r3, #45	; 0x2d
 80055f8:	700b      	strb	r3, [r1, #0]
 80055fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005600:	4691      	mov	r9, r2
 8005602:	f023 0820 	bic.w	r8, r3, #32
 8005606:	bfbc      	itt	lt
 8005608:	4622      	movlt	r2, r4
 800560a:	4614      	movlt	r4, r2
 800560c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005610:	d005      	beq.n	800561e <__cvt+0x42>
 8005612:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005616:	d100      	bne.n	800561a <__cvt+0x3e>
 8005618:	3601      	adds	r6, #1
 800561a:	2102      	movs	r1, #2
 800561c:	e000      	b.n	8005620 <__cvt+0x44>
 800561e:	2103      	movs	r1, #3
 8005620:	ab03      	add	r3, sp, #12
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	ab02      	add	r3, sp, #8
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	ec45 4b10 	vmov	d0, r4, r5
 800562c:	4653      	mov	r3, sl
 800562e:	4632      	mov	r2, r6
 8005630:	f000 fcfa 	bl	8006028 <_dtoa_r>
 8005634:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005638:	4607      	mov	r7, r0
 800563a:	d102      	bne.n	8005642 <__cvt+0x66>
 800563c:	f019 0f01 	tst.w	r9, #1
 8005640:	d022      	beq.n	8005688 <__cvt+0xac>
 8005642:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005646:	eb07 0906 	add.w	r9, r7, r6
 800564a:	d110      	bne.n	800566e <__cvt+0x92>
 800564c:	783b      	ldrb	r3, [r7, #0]
 800564e:	2b30      	cmp	r3, #48	; 0x30
 8005650:	d10a      	bne.n	8005668 <__cvt+0x8c>
 8005652:	2200      	movs	r2, #0
 8005654:	2300      	movs	r3, #0
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb fa3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800565e:	b918      	cbnz	r0, 8005668 <__cvt+0x8c>
 8005660:	f1c6 0601 	rsb	r6, r6, #1
 8005664:	f8ca 6000 	str.w	r6, [sl]
 8005668:	f8da 3000 	ldr.w	r3, [sl]
 800566c:	4499      	add	r9, r3
 800566e:	2200      	movs	r2, #0
 8005670:	2300      	movs	r3, #0
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f7fb fa2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800567a:	b108      	cbz	r0, 8005680 <__cvt+0xa4>
 800567c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005680:	2230      	movs	r2, #48	; 0x30
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	454b      	cmp	r3, r9
 8005686:	d307      	bcc.n	8005698 <__cvt+0xbc>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800568c:	1bdb      	subs	r3, r3, r7
 800568e:	4638      	mov	r0, r7
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	b004      	add	sp, #16
 8005694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	9103      	str	r1, [sp, #12]
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e7f0      	b.n	8005682 <__cvt+0xa6>

080056a0 <__exponent>:
 80056a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a2:	4603      	mov	r3, r0
 80056a4:	2900      	cmp	r1, #0
 80056a6:	bfb8      	it	lt
 80056a8:	4249      	neglt	r1, r1
 80056aa:	f803 2b02 	strb.w	r2, [r3], #2
 80056ae:	bfb4      	ite	lt
 80056b0:	222d      	movlt	r2, #45	; 0x2d
 80056b2:	222b      	movge	r2, #43	; 0x2b
 80056b4:	2909      	cmp	r1, #9
 80056b6:	7042      	strb	r2, [r0, #1]
 80056b8:	dd2a      	ble.n	8005710 <__exponent+0x70>
 80056ba:	f10d 0407 	add.w	r4, sp, #7
 80056be:	46a4      	mov	ip, r4
 80056c0:	270a      	movs	r7, #10
 80056c2:	46a6      	mov	lr, r4
 80056c4:	460a      	mov	r2, r1
 80056c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80056ca:	fb07 1516 	mls	r5, r7, r6, r1
 80056ce:	3530      	adds	r5, #48	; 0x30
 80056d0:	2a63      	cmp	r2, #99	; 0x63
 80056d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80056d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056da:	4631      	mov	r1, r6
 80056dc:	dcf1      	bgt.n	80056c2 <__exponent+0x22>
 80056de:	3130      	adds	r1, #48	; 0x30
 80056e0:	f1ae 0502 	sub.w	r5, lr, #2
 80056e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056e8:	1c44      	adds	r4, r0, #1
 80056ea:	4629      	mov	r1, r5
 80056ec:	4561      	cmp	r1, ip
 80056ee:	d30a      	bcc.n	8005706 <__exponent+0x66>
 80056f0:	f10d 0209 	add.w	r2, sp, #9
 80056f4:	eba2 020e 	sub.w	r2, r2, lr
 80056f8:	4565      	cmp	r5, ip
 80056fa:	bf88      	it	hi
 80056fc:	2200      	movhi	r2, #0
 80056fe:	4413      	add	r3, r2
 8005700:	1a18      	subs	r0, r3, r0
 8005702:	b003      	add	sp, #12
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800570e:	e7ed      	b.n	80056ec <__exponent+0x4c>
 8005710:	2330      	movs	r3, #48	; 0x30
 8005712:	3130      	adds	r1, #48	; 0x30
 8005714:	7083      	strb	r3, [r0, #2]
 8005716:	70c1      	strb	r1, [r0, #3]
 8005718:	1d03      	adds	r3, r0, #4
 800571a:	e7f1      	b.n	8005700 <__exponent+0x60>

0800571c <_printf_float>:
 800571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	ed2d 8b02 	vpush	{d8}
 8005724:	b08d      	sub	sp, #52	; 0x34
 8005726:	460c      	mov	r4, r1
 8005728:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800572c:	4616      	mov	r6, r2
 800572e:	461f      	mov	r7, r3
 8005730:	4605      	mov	r5, r0
 8005732:	f001 fa79 	bl	8006c28 <_localeconv_r>
 8005736:	f8d0 a000 	ldr.w	sl, [r0]
 800573a:	4650      	mov	r0, sl
 800573c:	f7fa fd50 	bl	80001e0 <strlen>
 8005740:	2300      	movs	r3, #0
 8005742:	930a      	str	r3, [sp, #40]	; 0x28
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	9305      	str	r3, [sp, #20]
 8005748:	f8d8 3000 	ldr.w	r3, [r8]
 800574c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005750:	3307      	adds	r3, #7
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	f8c8 2000 	str.w	r2, [r8]
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005766:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800576a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	f8cd 8018 	str.w	r8, [sp, #24]
 8005774:	ee08 0a10 	vmov	s16, r0
 8005778:	4b9f      	ldr	r3, [pc, #636]	; (80059f8 <_printf_float+0x2dc>)
 800577a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	f7fb f9db 	bl	8000b3c <__aeabi_dcmpun>
 8005786:	bb88      	cbnz	r0, 80057ec <_printf_float+0xd0>
 8005788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800578c:	4b9a      	ldr	r3, [pc, #616]	; (80059f8 <_printf_float+0x2dc>)
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	f7fb f9b5 	bl	8000b00 <__aeabi_dcmple>
 8005796:	bb48      	cbnz	r0, 80057ec <_printf_float+0xd0>
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	4640      	mov	r0, r8
 800579e:	4649      	mov	r1, r9
 80057a0:	f7fb f9a4 	bl	8000aec <__aeabi_dcmplt>
 80057a4:	b110      	cbz	r0, 80057ac <_printf_float+0x90>
 80057a6:	232d      	movs	r3, #45	; 0x2d
 80057a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ac:	4b93      	ldr	r3, [pc, #588]	; (80059fc <_printf_float+0x2e0>)
 80057ae:	4894      	ldr	r0, [pc, #592]	; (8005a00 <_printf_float+0x2e4>)
 80057b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057b4:	bf94      	ite	ls
 80057b6:	4698      	movls	r8, r3
 80057b8:	4680      	movhi	r8, r0
 80057ba:	2303      	movs	r3, #3
 80057bc:	6123      	str	r3, [r4, #16]
 80057be:	9b05      	ldr	r3, [sp, #20]
 80057c0:	f023 0204 	bic.w	r2, r3, #4
 80057c4:	6022      	str	r2, [r4, #0]
 80057c6:	f04f 0900 	mov.w	r9, #0
 80057ca:	9700      	str	r7, [sp, #0]
 80057cc:	4633      	mov	r3, r6
 80057ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f9d8 	bl	8005b88 <_printf_common>
 80057d8:	3001      	adds	r0, #1
 80057da:	f040 8090 	bne.w	80058fe <_printf_float+0x1e2>
 80057de:	f04f 30ff 	mov.w	r0, #4294967295
 80057e2:	b00d      	add	sp, #52	; 0x34
 80057e4:	ecbd 8b02 	vpop	{d8}
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	4642      	mov	r2, r8
 80057ee:	464b      	mov	r3, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fb f9a2 	bl	8000b3c <__aeabi_dcmpun>
 80057f8:	b140      	cbz	r0, 800580c <_printf_float+0xf0>
 80057fa:	464b      	mov	r3, r9
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bfbc      	itt	lt
 8005800:	232d      	movlt	r3, #45	; 0x2d
 8005802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005806:	487f      	ldr	r0, [pc, #508]	; (8005a04 <_printf_float+0x2e8>)
 8005808:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <_printf_float+0x2ec>)
 800580a:	e7d1      	b.n	80057b0 <_printf_float+0x94>
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005812:	9206      	str	r2, [sp, #24]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	d13f      	bne.n	8005898 <_printf_float+0x17c>
 8005818:	2306      	movs	r3, #6
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	6861      	ldr	r1, [r4, #4]
 8005820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005824:	2300      	movs	r3, #0
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	ab0a      	add	r3, sp, #40	; 0x28
 800582a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800582e:	ab09      	add	r3, sp, #36	; 0x24
 8005830:	ec49 8b10 	vmov	d0, r8, r9
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800583c:	4628      	mov	r0, r5
 800583e:	f7ff fecd 	bl	80055dc <__cvt>
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005846:	2b47      	cmp	r3, #71	; 0x47
 8005848:	4680      	mov	r8, r0
 800584a:	d108      	bne.n	800585e <_printf_float+0x142>
 800584c:	1cc8      	adds	r0, r1, #3
 800584e:	db02      	blt.n	8005856 <_printf_float+0x13a>
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	4299      	cmp	r1, r3
 8005854:	dd41      	ble.n	80058da <_printf_float+0x1be>
 8005856:	f1ab 0b02 	sub.w	fp, fp, #2
 800585a:	fa5f fb8b 	uxtb.w	fp, fp
 800585e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005862:	d820      	bhi.n	80058a6 <_printf_float+0x18a>
 8005864:	3901      	subs	r1, #1
 8005866:	465a      	mov	r2, fp
 8005868:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800586c:	9109      	str	r1, [sp, #36]	; 0x24
 800586e:	f7ff ff17 	bl	80056a0 <__exponent>
 8005872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005874:	1813      	adds	r3, r2, r0
 8005876:	2a01      	cmp	r2, #1
 8005878:	4681      	mov	r9, r0
 800587a:	6123      	str	r3, [r4, #16]
 800587c:	dc02      	bgt.n	8005884 <_printf_float+0x168>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	07d2      	lsls	r2, r2, #31
 8005882:	d501      	bpl.n	8005888 <_printf_float+0x16c>
 8005884:	3301      	adds	r3, #1
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800588c:	2b00      	cmp	r3, #0
 800588e:	d09c      	beq.n	80057ca <_printf_float+0xae>
 8005890:	232d      	movs	r3, #45	; 0x2d
 8005892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005896:	e798      	b.n	80057ca <_printf_float+0xae>
 8005898:	9a06      	ldr	r2, [sp, #24]
 800589a:	2a47      	cmp	r2, #71	; 0x47
 800589c:	d1be      	bne.n	800581c <_printf_float+0x100>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1bc      	bne.n	800581c <_printf_float+0x100>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e7b9      	b.n	800581a <_printf_float+0xfe>
 80058a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058aa:	d118      	bne.n	80058de <_printf_float+0x1c2>
 80058ac:	2900      	cmp	r1, #0
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	dd0b      	ble.n	80058ca <_printf_float+0x1ae>
 80058b2:	6121      	str	r1, [r4, #16]
 80058b4:	b913      	cbnz	r3, 80058bc <_printf_float+0x1a0>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	07d0      	lsls	r0, r2, #31
 80058ba:	d502      	bpl.n	80058c2 <_printf_float+0x1a6>
 80058bc:	3301      	adds	r3, #1
 80058be:	440b      	add	r3, r1
 80058c0:	6123      	str	r3, [r4, #16]
 80058c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80058c4:	f04f 0900 	mov.w	r9, #0
 80058c8:	e7de      	b.n	8005888 <_printf_float+0x16c>
 80058ca:	b913      	cbnz	r3, 80058d2 <_printf_float+0x1b6>
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	07d2      	lsls	r2, r2, #31
 80058d0:	d501      	bpl.n	80058d6 <_printf_float+0x1ba>
 80058d2:	3302      	adds	r3, #2
 80058d4:	e7f4      	b.n	80058c0 <_printf_float+0x1a4>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7f2      	b.n	80058c0 <_printf_float+0x1a4>
 80058da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	4299      	cmp	r1, r3
 80058e2:	db05      	blt.n	80058f0 <_printf_float+0x1d4>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	6121      	str	r1, [r4, #16]
 80058e8:	07d8      	lsls	r0, r3, #31
 80058ea:	d5ea      	bpl.n	80058c2 <_printf_float+0x1a6>
 80058ec:	1c4b      	adds	r3, r1, #1
 80058ee:	e7e7      	b.n	80058c0 <_printf_float+0x1a4>
 80058f0:	2900      	cmp	r1, #0
 80058f2:	bfd4      	ite	le
 80058f4:	f1c1 0202 	rsble	r2, r1, #2
 80058f8:	2201      	movgt	r2, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	e7e0      	b.n	80058c0 <_printf_float+0x1a4>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	055a      	lsls	r2, r3, #21
 8005902:	d407      	bmi.n	8005914 <_printf_float+0x1f8>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	4642      	mov	r2, r8
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	d12c      	bne.n	800596c <_printf_float+0x250>
 8005912:	e764      	b.n	80057de <_printf_float+0xc2>
 8005914:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005918:	f240 80e0 	bls.w	8005adc <_printf_float+0x3c0>
 800591c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005920:	2200      	movs	r2, #0
 8005922:	2300      	movs	r3, #0
 8005924:	f7fb f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005928:	2800      	cmp	r0, #0
 800592a:	d034      	beq.n	8005996 <_printf_float+0x27a>
 800592c:	4a37      	ldr	r2, [pc, #220]	; (8005a0c <_printf_float+0x2f0>)
 800592e:	2301      	movs	r3, #1
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f af51 	beq.w	80057de <_printf_float+0xc2>
 800593c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005940:	429a      	cmp	r2, r3
 8005942:	db02      	blt.n	800594a <_printf_float+0x22e>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	07d8      	lsls	r0, r3, #31
 8005948:	d510      	bpl.n	800596c <_printf_float+0x250>
 800594a:	ee18 3a10 	vmov	r3, s16
 800594e:	4652      	mov	r2, sl
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	f43f af41 	beq.w	80057de <_printf_float+0xc2>
 800595c:	f04f 0800 	mov.w	r8, #0
 8005960:	f104 091a 	add.w	r9, r4, #26
 8005964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005966:	3b01      	subs	r3, #1
 8005968:	4543      	cmp	r3, r8
 800596a:	dc09      	bgt.n	8005980 <_printf_float+0x264>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	079b      	lsls	r3, r3, #30
 8005970:	f100 8105 	bmi.w	8005b7e <_printf_float+0x462>
 8005974:	68e0      	ldr	r0, [r4, #12]
 8005976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005978:	4298      	cmp	r0, r3
 800597a:	bfb8      	it	lt
 800597c:	4618      	movlt	r0, r3
 800597e:	e730      	b.n	80057e2 <_printf_float+0xc6>
 8005980:	2301      	movs	r3, #1
 8005982:	464a      	mov	r2, r9
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f af27 	beq.w	80057de <_printf_float+0xc2>
 8005990:	f108 0801 	add.w	r8, r8, #1
 8005994:	e7e6      	b.n	8005964 <_printf_float+0x248>
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc39      	bgt.n	8005a10 <_printf_float+0x2f4>
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <_printf_float+0x2f0>)
 800599e:	2301      	movs	r3, #1
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af19 	beq.w	80057de <_printf_float+0xc2>
 80059ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d102      	bne.n	80059ba <_printf_float+0x29e>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07d9      	lsls	r1, r3, #31
 80059b8:	d5d8      	bpl.n	800596c <_printf_float+0x250>
 80059ba:	ee18 3a10 	vmov	r3, s16
 80059be:	4652      	mov	r2, sl
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f af09 	beq.w	80057de <_printf_float+0xc2>
 80059cc:	f04f 0900 	mov.w	r9, #0
 80059d0:	f104 0a1a 	add.w	sl, r4, #26
 80059d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d6:	425b      	negs	r3, r3
 80059d8:	454b      	cmp	r3, r9
 80059da:	dc01      	bgt.n	80059e0 <_printf_float+0x2c4>
 80059dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059de:	e792      	b.n	8005906 <_printf_float+0x1ea>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4652      	mov	r2, sl
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f aef7 	beq.w	80057de <_printf_float+0xc2>
 80059f0:	f109 0901 	add.w	r9, r9, #1
 80059f4:	e7ee      	b.n	80059d4 <_printf_float+0x2b8>
 80059f6:	bf00      	nop
 80059f8:	7fefffff 	.word	0x7fefffff
 80059fc:	0800bd38 	.word	0x0800bd38
 8005a00:	0800bd3c 	.word	0x0800bd3c
 8005a04:	0800bd44 	.word	0x0800bd44
 8005a08:	0800bd40 	.word	0x0800bd40
 8005a0c:	0800bd48 	.word	0x0800bd48
 8005a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a14:	429a      	cmp	r2, r3
 8005a16:	bfa8      	it	ge
 8005a18:	461a      	movge	r2, r3
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	4691      	mov	r9, r2
 8005a1e:	dc37      	bgt.n	8005a90 <_printf_float+0x374>
 8005a20:	f04f 0b00 	mov.w	fp, #0
 8005a24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a28:	f104 021a 	add.w	r2, r4, #26
 8005a2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	eba3 0309 	sub.w	r3, r3, r9
 8005a34:	455b      	cmp	r3, fp
 8005a36:	dc33      	bgt.n	8005aa0 <_printf_float+0x384>
 8005a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	db3b      	blt.n	8005ab8 <_printf_float+0x39c>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	07da      	lsls	r2, r3, #31
 8005a44:	d438      	bmi.n	8005ab8 <_printf_float+0x39c>
 8005a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a48:	9a05      	ldr	r2, [sp, #20]
 8005a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a4c:	1a9a      	subs	r2, r3, r2
 8005a4e:	eba3 0901 	sub.w	r9, r3, r1
 8005a52:	4591      	cmp	r9, r2
 8005a54:	bfa8      	it	ge
 8005a56:	4691      	movge	r9, r2
 8005a58:	f1b9 0f00 	cmp.w	r9, #0
 8005a5c:	dc35      	bgt.n	8005aca <_printf_float+0x3ae>
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a66:	f104 0a1a 	add.w	sl, r4, #26
 8005a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	eba3 0309 	sub.w	r3, r3, r9
 8005a74:	4543      	cmp	r3, r8
 8005a76:	f77f af79 	ble.w	800596c <_printf_float+0x250>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f aeaa 	beq.w	80057de <_printf_float+0xc2>
 8005a8a:	f108 0801 	add.w	r8, r8, #1
 8005a8e:	e7ec      	b.n	8005a6a <_printf_float+0x34e>
 8005a90:	4613      	mov	r3, r2
 8005a92:	4631      	mov	r1, r6
 8005a94:	4642      	mov	r2, r8
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d1c0      	bne.n	8005a20 <_printf_float+0x304>
 8005a9e:	e69e      	b.n	80057de <_printf_float+0xc2>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	9205      	str	r2, [sp, #20]
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f43f ae97 	beq.w	80057de <_printf_float+0xc2>
 8005ab0:	9a05      	ldr	r2, [sp, #20]
 8005ab2:	f10b 0b01 	add.w	fp, fp, #1
 8005ab6:	e7b9      	b.n	8005a2c <_printf_float+0x310>
 8005ab8:	ee18 3a10 	vmov	r3, s16
 8005abc:	4652      	mov	r2, sl
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d1be      	bne.n	8005a46 <_printf_float+0x32a>
 8005ac8:	e689      	b.n	80057de <_printf_float+0xc2>
 8005aca:	9a05      	ldr	r2, [sp, #20]
 8005acc:	464b      	mov	r3, r9
 8005ace:	4442      	add	r2, r8
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d1c1      	bne.n	8005a5e <_printf_float+0x342>
 8005ada:	e680      	b.n	80057de <_printf_float+0xc2>
 8005adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ade:	2a01      	cmp	r2, #1
 8005ae0:	dc01      	bgt.n	8005ae6 <_printf_float+0x3ca>
 8005ae2:	07db      	lsls	r3, r3, #31
 8005ae4:	d538      	bpl.n	8005b58 <_printf_float+0x43c>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4642      	mov	r2, r8
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f ae74 	beq.w	80057de <_printf_float+0xc2>
 8005af6:	ee18 3a10 	vmov	r3, s16
 8005afa:	4652      	mov	r2, sl
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f ae6b 	beq.w	80057de <_printf_float+0xc2>
 8005b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f7fa ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b14:	b9d8      	cbnz	r0, 8005b4e <_printf_float+0x432>
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	f108 0201 	add.w	r2, r8, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	d10e      	bne.n	8005b46 <_printf_float+0x42a>
 8005b28:	e659      	b.n	80057de <_printf_float+0xc2>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f ae52 	beq.w	80057de <_printf_float+0xc2>
 8005b3a:	f108 0801 	add.w	r8, r8, #1
 8005b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	4543      	cmp	r3, r8
 8005b44:	dcf1      	bgt.n	8005b2a <_printf_float+0x40e>
 8005b46:	464b      	mov	r3, r9
 8005b48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b4c:	e6dc      	b.n	8005908 <_printf_float+0x1ec>
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	f104 0a1a 	add.w	sl, r4, #26
 8005b56:	e7f2      	b.n	8005b3e <_printf_float+0x422>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	e7df      	b.n	8005b1e <_printf_float+0x402>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	464a      	mov	r2, r9
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f ae38 	beq.w	80057de <_printf_float+0xc2>
 8005b6e:	f108 0801 	add.w	r8, r8, #1
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	4543      	cmp	r3, r8
 8005b7a:	dcf0      	bgt.n	8005b5e <_printf_float+0x442>
 8005b7c:	e6fa      	b.n	8005974 <_printf_float+0x258>
 8005b7e:	f04f 0800 	mov.w	r8, #0
 8005b82:	f104 0919 	add.w	r9, r4, #25
 8005b86:	e7f4      	b.n	8005b72 <_printf_float+0x456>

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	4699      	mov	r9, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b10a      	cbz	r2, 8005bae <_printf_common+0x26>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0699      	lsls	r1, r3, #26
 8005bb2:	bf42      	ittt	mi
 8005bb4:	6833      	ldrmi	r3, [r6, #0]
 8005bb6:	3302      	addmi	r3, #2
 8005bb8:	6033      	strmi	r3, [r6, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d106      	bne.n	8005bd0 <_printf_common+0x48>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	6832      	ldr	r2, [r6, #0]
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dc26      	bgt.n	8005c1e <_printf_common+0x96>
 8005bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bd4:	1e13      	subs	r3, r2, #0
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	bf18      	it	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	0692      	lsls	r2, r2, #26
 8005bde:	d42b      	bmi.n	8005c38 <_printf_common+0xb0>
 8005be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d01e      	beq.n	8005c2c <_printf_common+0xa4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	68e5      	ldr	r5, [r4, #12]
 8005bf2:	6832      	ldr	r2, [r6, #0]
 8005bf4:	f003 0306 	and.w	r3, r3, #6
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	bf08      	it	eq
 8005bfc:	1aad      	subeq	r5, r5, r2
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	bf0c      	ite	eq
 8005c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c08:	2500      	movne	r5, #0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bfc4      	itt	gt
 8005c0e:	1a9b      	subgt	r3, r3, r2
 8005c10:	18ed      	addgt	r5, r5, r3
 8005c12:	2600      	movs	r6, #0
 8005c14:	341a      	adds	r4, #26
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	d11a      	bne.n	8005c50 <_printf_common+0xc8>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e008      	b.n	8005c30 <_printf_common+0xa8>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4649      	mov	r1, r9
 8005c24:	4638      	mov	r0, r7
 8005c26:	47c0      	blx	r8
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d103      	bne.n	8005c34 <_printf_common+0xac>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7c6      	b.n	8005bc6 <_printf_common+0x3e>
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	2030      	movs	r0, #48	; 0x30
 8005c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c42:	4422      	add	r2, r4
 8005c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	e7c7      	b.n	8005be0 <_printf_common+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4622      	mov	r2, r4
 8005c54:	4649      	mov	r1, r9
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d0e6      	beq.n	8005c2c <_printf_common+0xa4>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7d9      	b.n	8005c16 <_printf_common+0x8e>
	...

08005c64 <_printf_i>:
 8005c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	7e0f      	ldrb	r7, [r1, #24]
 8005c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c6c:	2f78      	cmp	r7, #120	; 0x78
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4680      	mov	r8, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	469a      	mov	sl, r3
 8005c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c7a:	d807      	bhi.n	8005c8c <_printf_i+0x28>
 8005c7c:	2f62      	cmp	r7, #98	; 0x62
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x32>
 8005c80:	2f00      	cmp	r7, #0
 8005c82:	f000 80d8 	beq.w	8005e36 <_printf_i+0x1d2>
 8005c86:	2f58      	cmp	r7, #88	; 0x58
 8005c88:	f000 80a3 	beq.w	8005dd2 <_printf_i+0x16e>
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c94:	e03a      	b.n	8005d0c <_printf_i+0xa8>
 8005c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c9a:	2b15      	cmp	r3, #21
 8005c9c:	d8f6      	bhi.n	8005c8c <_printf_i+0x28>
 8005c9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ca4 <_printf_i+0x40>)
 8005ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005c8d 	.word	0x08005c8d
 8005cb0:	08005c8d 	.word	0x08005c8d
 8005cb4:	08005c8d 	.word	0x08005c8d
 8005cb8:	08005c8d 	.word	0x08005c8d
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005c8d 	.word	0x08005c8d
 8005cc4:	08005c8d 	.word	0x08005c8d
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005e1d 	.word	0x08005e1d
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005dff 	.word	0x08005dff
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e3f 	.word	0x08005e3f
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005e07 	.word	0x08005e07
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a3      	b.n	8005e58 <_printf_i+0x1f4>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	6829      	ldr	r1, [r5, #0]
 8005d14:	0606      	lsls	r6, r0, #24
 8005d16:	f101 0304 	add.w	r3, r1, #4
 8005d1a:	d50a      	bpl.n	8005d32 <_printf_i+0xce>
 8005d1c:	680e      	ldr	r6, [r1, #0]
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_i+0xc8>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	4276      	negs	r6, r6
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	485e      	ldr	r0, [pc, #376]	; (8005ea8 <_printf_i+0x244>)
 8005d2e:	230a      	movs	r3, #10
 8005d30:	e019      	b.n	8005d66 <_printf_i+0x102>
 8005d32:	680e      	ldr	r6, [r1, #0]
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d3a:	bf18      	it	ne
 8005d3c:	b236      	sxthne	r6, r6
 8005d3e:	e7ef      	b.n	8005d20 <_printf_i+0xbc>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	1d19      	adds	r1, r3, #4
 8005d46:	6029      	str	r1, [r5, #0]
 8005d48:	0601      	lsls	r1, r0, #24
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0xec>
 8005d4c:	681e      	ldr	r6, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0xf2>
 8005d50:	0646      	lsls	r6, r0, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0xe8>
 8005d54:	881e      	ldrh	r6, [r3, #0]
 8005d56:	4854      	ldr	r0, [pc, #336]	; (8005ea8 <_printf_i+0x244>)
 8005d58:	2f6f      	cmp	r7, #111	; 0x6f
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2308      	moveq	r3, #8
 8005d5e:	230a      	movne	r3, #10
 8005d60:	2100      	movs	r1, #0
 8005d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d66:	6865      	ldr	r5, [r4, #4]
 8005d68:	60a5      	str	r5, [r4, #8]
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	bfa2      	ittt	ge
 8005d6e:	6821      	ldrge	r1, [r4, #0]
 8005d70:	f021 0104 	bicge.w	r1, r1, #4
 8005d74:	6021      	strge	r1, [r4, #0]
 8005d76:	b90e      	cbnz	r6, 8005d7c <_printf_i+0x118>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	d04d      	beq.n	8005e18 <_printf_i+0x1b4>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d82:	fb03 6711 	mls	r7, r3, r1, r6
 8005d86:	5dc7      	ldrb	r7, [r0, r7]
 8005d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d8c:	4637      	mov	r7, r6
 8005d8e:	42bb      	cmp	r3, r7
 8005d90:	460e      	mov	r6, r1
 8005d92:	d9f4      	bls.n	8005d7e <_printf_i+0x11a>
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d10b      	bne.n	8005db0 <_printf_i+0x14c>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	07de      	lsls	r6, r3, #31
 8005d9c:	d508      	bpl.n	8005db0 <_printf_i+0x14c>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6861      	ldr	r1, [r4, #4]
 8005da2:	4299      	cmp	r1, r3
 8005da4:	bfde      	ittt	le
 8005da6:	2330      	movle	r3, #48	; 0x30
 8005da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005db0:	1b52      	subs	r2, r2, r5
 8005db2:	6122      	str	r2, [r4, #16]
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	464b      	mov	r3, r9
 8005dba:	aa03      	add	r2, sp, #12
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff fee2 	bl	8005b88 <_printf_common>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d14c      	bne.n	8005e62 <_printf_i+0x1fe>
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	b004      	add	sp, #16
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	4835      	ldr	r0, [pc, #212]	; (8005ea8 <_printf_i+0x244>)
 8005dd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd8:	6829      	ldr	r1, [r5, #0]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005de0:	6029      	str	r1, [r5, #0]
 8005de2:	061d      	lsls	r5, r3, #24
 8005de4:	d514      	bpl.n	8005e10 <_printf_i+0x1ac>
 8005de6:	07df      	lsls	r7, r3, #31
 8005de8:	bf44      	itt	mi
 8005dea:	f043 0320 	orrmi.w	r3, r3, #32
 8005dee:	6023      	strmi	r3, [r4, #0]
 8005df0:	b91e      	cbnz	r6, 8005dfa <_printf_i+0x196>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f023 0320 	bic.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e7b0      	b.n	8005d60 <_printf_i+0xfc>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2378      	movs	r3, #120	; 0x78
 8005e08:	4828      	ldr	r0, [pc, #160]	; (8005eac <_printf_i+0x248>)
 8005e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e0e:	e7e3      	b.n	8005dd8 <_printf_i+0x174>
 8005e10:	0659      	lsls	r1, r3, #25
 8005e12:	bf48      	it	mi
 8005e14:	b2b6      	uxthmi	r6, r6
 8005e16:	e7e6      	b.n	8005de6 <_printf_i+0x182>
 8005e18:	4615      	mov	r5, r2
 8005e1a:	e7bb      	b.n	8005d94 <_printf_i+0x130>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	6826      	ldr	r6, [r4, #0]
 8005e20:	6961      	ldr	r1, [r4, #20]
 8005e22:	1d18      	adds	r0, r3, #4
 8005e24:	6028      	str	r0, [r5, #0]
 8005e26:	0635      	lsls	r5, r6, #24
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0x1cc>
 8005e2c:	6019      	str	r1, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0x1d2>
 8005e30:	0670      	lsls	r0, r6, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0x1c8>
 8005e34:	8019      	strh	r1, [r3, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	e7ba      	b.n	8005db4 <_printf_i+0x150>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	681d      	ldr	r5, [r3, #0]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7fa f9d0 	bl	80001f0 <memchr>
 8005e50:	b108      	cbz	r0, 8005e56 <_printf_i+0x1f2>
 8005e52:	1b40      	subs	r0, r0, r5
 8005e54:	6060      	str	r0, [r4, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e60:	e7a8      	b.n	8005db4 <_printf_i+0x150>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	462a      	mov	r2, r5
 8005e66:	4649      	mov	r1, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	47d0      	blx	sl
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d0ab      	beq.n	8005dc8 <_printf_i+0x164>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	d413      	bmi.n	8005e9e <_printf_i+0x23a>
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	bfb8      	it	lt
 8005e7e:	4618      	movlt	r0, r3
 8005e80:	e7a4      	b.n	8005dcc <_printf_i+0x168>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4632      	mov	r2, r6
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d09b      	beq.n	8005dc8 <_printf_i+0x164>
 8005e90:	3501      	adds	r5, #1
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dcf2      	bgt.n	8005e82 <_printf_i+0x21e>
 8005e9c:	e7eb      	b.n	8005e76 <_printf_i+0x212>
 8005e9e:	2500      	movs	r5, #0
 8005ea0:	f104 0619 	add.w	r6, r4, #25
 8005ea4:	e7f5      	b.n	8005e92 <_printf_i+0x22e>
 8005ea6:	bf00      	nop
 8005ea8:	0800bd4a 	.word	0x0800bd4a
 8005eac:	0800bd5b 	.word	0x0800bd5b

08005eb0 <_sbrk_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_sbrk_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fd f882 	bl	8002fc4 <_sbrk>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_sbrk_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_sbrk_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200002b4 	.word	0x200002b4

08005ed0 <__assert_func>:
 8005ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <__assert_func+0x2c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4605      	mov	r5, r0
 8005edc:	68d8      	ldr	r0, [r3, #12]
 8005ede:	b14c      	cbz	r4, 8005ef4 <__assert_func+0x24>
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <__assert_func+0x30>)
 8005ee2:	9100      	str	r1, [sp, #0]
 8005ee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ee8:	4906      	ldr	r1, [pc, #24]	; (8005f04 <__assert_func+0x34>)
 8005eea:	462b      	mov	r3, r5
 8005eec:	f000 fe8a 	bl	8006c04 <fiprintf>
 8005ef0:	f001 fc88 	bl	8007804 <abort>
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <__assert_func+0x38>)
 8005ef6:	461c      	mov	r4, r3
 8005ef8:	e7f3      	b.n	8005ee2 <__assert_func+0x12>
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c
 8005f00:	0800bd6c 	.word	0x0800bd6c
 8005f04:	0800bd79 	.word	0x0800bd79
 8005f08:	0800bda7 	.word	0x0800bda7

08005f0c <quorem>:
 8005f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	6903      	ldr	r3, [r0, #16]
 8005f12:	690c      	ldr	r4, [r1, #16]
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	4607      	mov	r7, r0
 8005f18:	f2c0 8081 	blt.w	800601e <quorem+0x112>
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	f101 0814 	add.w	r8, r1, #20
 8005f22:	f100 0514 	add.w	r5, r0, #20
 8005f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f34:	3301      	adds	r3, #1
 8005f36:	429a      	cmp	r2, r3
 8005f38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f44:	d331      	bcc.n	8005faa <quorem+0x9e>
 8005f46:	f04f 0e00 	mov.w	lr, #0
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	46ac      	mov	ip, r5
 8005f4e:	46f2      	mov	sl, lr
 8005f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f54:	b293      	uxth	r3, r2
 8005f56:	fb06 e303 	mla	r3, r6, r3, lr
 8005f5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ebaa 0303 	sub.w	r3, sl, r3
 8005f64:	f8dc a000 	ldr.w	sl, [ip]
 8005f68:	0c12      	lsrs	r2, r2, #16
 8005f6a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f84:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f88:	4581      	cmp	r9, r0
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f96:	d2db      	bcs.n	8005f50 <quorem+0x44>
 8005f98:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f9c:	b92b      	cbnz	r3, 8005faa <quorem+0x9e>
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	3b04      	subs	r3, #4
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	d32e      	bcc.n	8006006 <quorem+0xfa>
 8005fa8:	613c      	str	r4, [r7, #16]
 8005faa:	4638      	mov	r0, r7
 8005fac:	f001 f8e0 	bl	8007170 <__mcmp>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	db24      	blt.n	8005ffe <quorem+0xf2>
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f04f 0c00 	mov.w	ip, #0
 8005fbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8005fc4:	b293      	uxth	r3, r2
 8005fc6:	ebac 0303 	sub.w	r3, ip, r3
 8005fca:	0c12      	lsrs	r2, r2, #16
 8005fcc:	fa13 f38e 	uxtah	r3, r3, lr
 8005fd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fde:	45c1      	cmp	r9, r8
 8005fe0:	f840 3b04 	str.w	r3, [r0], #4
 8005fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fe8:	d2e8      	bcs.n	8005fbc <quorem+0xb0>
 8005fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff2:	b922      	cbnz	r2, 8005ffe <quorem+0xf2>
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	d30a      	bcc.n	8006012 <quorem+0x106>
 8005ffc:	613c      	str	r4, [r7, #16]
 8005ffe:	4630      	mov	r0, r6
 8006000:	b003      	add	sp, #12
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	3b04      	subs	r3, #4
 800600a:	2a00      	cmp	r2, #0
 800600c:	d1cc      	bne.n	8005fa8 <quorem+0x9c>
 800600e:	3c01      	subs	r4, #1
 8006010:	e7c7      	b.n	8005fa2 <quorem+0x96>
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	3b04      	subs	r3, #4
 8006016:	2a00      	cmp	r2, #0
 8006018:	d1f0      	bne.n	8005ffc <quorem+0xf0>
 800601a:	3c01      	subs	r4, #1
 800601c:	e7eb      	b.n	8005ff6 <quorem+0xea>
 800601e:	2000      	movs	r0, #0
 8006020:	e7ee      	b.n	8006000 <quorem+0xf4>
 8006022:	0000      	movs	r0, r0
 8006024:	0000      	movs	r0, r0
	...

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b04 	vpush	{d8-d9}
 8006030:	ec57 6b10 	vmov	r6, r7, d0
 8006034:	b093      	sub	sp, #76	; 0x4c
 8006036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800603c:	9106      	str	r1, [sp, #24]
 800603e:	ee10 aa10 	vmov	sl, s0
 8006042:	4604      	mov	r4, r0
 8006044:	9209      	str	r2, [sp, #36]	; 0x24
 8006046:	930c      	str	r3, [sp, #48]	; 0x30
 8006048:	46bb      	mov	fp, r7
 800604a:	b975      	cbnz	r5, 800606a <_dtoa_r+0x42>
 800604c:	2010      	movs	r0, #16
 800604e:	f7ff f9c7 	bl	80053e0 <malloc>
 8006052:	4602      	mov	r2, r0
 8006054:	6260      	str	r0, [r4, #36]	; 0x24
 8006056:	b920      	cbnz	r0, 8006062 <_dtoa_r+0x3a>
 8006058:	4ba7      	ldr	r3, [pc, #668]	; (80062f8 <_dtoa_r+0x2d0>)
 800605a:	21ea      	movs	r1, #234	; 0xea
 800605c:	48a7      	ldr	r0, [pc, #668]	; (80062fc <_dtoa_r+0x2d4>)
 800605e:	f7ff ff37 	bl	8005ed0 <__assert_func>
 8006062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006066:	6005      	str	r5, [r0, #0]
 8006068:	60c5      	str	r5, [r0, #12]
 800606a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800606c:	6819      	ldr	r1, [r3, #0]
 800606e:	b151      	cbz	r1, 8006086 <_dtoa_r+0x5e>
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	604a      	str	r2, [r1, #4]
 8006074:	2301      	movs	r3, #1
 8006076:	4093      	lsls	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fe36 	bl	8006cec <_Bfree>
 8006080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	1e3b      	subs	r3, r7, #0
 8006088:	bfaa      	itet	ge
 800608a:	2300      	movge	r3, #0
 800608c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006090:	f8c8 3000 	strge.w	r3, [r8]
 8006094:	4b9a      	ldr	r3, [pc, #616]	; (8006300 <_dtoa_r+0x2d8>)
 8006096:	bfbc      	itt	lt
 8006098:	2201      	movlt	r2, #1
 800609a:	f8c8 2000 	strlt.w	r2, [r8]
 800609e:	ea33 030b 	bics.w	r3, r3, fp
 80060a2:	d11b      	bne.n	80060dc <_dtoa_r+0xb4>
 80060a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060b0:	4333      	orrs	r3, r6
 80060b2:	f000 8592 	beq.w	8006bda <_dtoa_r+0xbb2>
 80060b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b8:	b963      	cbnz	r3, 80060d4 <_dtoa_r+0xac>
 80060ba:	4b92      	ldr	r3, [pc, #584]	; (8006304 <_dtoa_r+0x2dc>)
 80060bc:	e022      	b.n	8006104 <_dtoa_r+0xdc>
 80060be:	4b92      	ldr	r3, [pc, #584]	; (8006308 <_dtoa_r+0x2e0>)
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	3308      	adds	r3, #8
 80060c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	9801      	ldr	r0, [sp, #4]
 80060ca:	b013      	add	sp, #76	; 0x4c
 80060cc:	ecbd 8b04 	vpop	{d8-d9}
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	4b8b      	ldr	r3, [pc, #556]	; (8006304 <_dtoa_r+0x2dc>)
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	3303      	adds	r3, #3
 80060da:	e7f3      	b.n	80060c4 <_dtoa_r+0x9c>
 80060dc:	2200      	movs	r2, #0
 80060de:	2300      	movs	r3, #0
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	f7fa fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e8:	ec4b ab19 	vmov	d9, sl, fp
 80060ec:	4680      	mov	r8, r0
 80060ee:	b158      	cbz	r0, 8006108 <_dtoa_r+0xe0>
 80060f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060f2:	2301      	movs	r3, #1
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 856b 	beq.w	8006bd4 <_dtoa_r+0xbac>
 80060fe:	4883      	ldr	r0, [pc, #524]	; (800630c <_dtoa_r+0x2e4>)
 8006100:	6018      	str	r0, [r3, #0]
 8006102:	1e43      	subs	r3, r0, #1
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	e7df      	b.n	80060c8 <_dtoa_r+0xa0>
 8006108:	ec4b ab10 	vmov	d0, sl, fp
 800610c:	aa10      	add	r2, sp, #64	; 0x40
 800610e:	a911      	add	r1, sp, #68	; 0x44
 8006110:	4620      	mov	r0, r4
 8006112:	f001 f8d3 	bl	80072bc <__d2b>
 8006116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800611a:	ee08 0a10 	vmov	s16, r0
 800611e:	2d00      	cmp	r5, #0
 8006120:	f000 8084 	beq.w	800622c <_dtoa_r+0x204>
 8006124:	ee19 3a90 	vmov	r3, s19
 8006128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800612c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006130:	4656      	mov	r6, sl
 8006132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800613a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800613e:	4b74      	ldr	r3, [pc, #464]	; (8006310 <_dtoa_r+0x2e8>)
 8006140:	2200      	movs	r2, #0
 8006142:	4630      	mov	r0, r6
 8006144:	4639      	mov	r1, r7
 8006146:	f7fa f8a7 	bl	8000298 <__aeabi_dsub>
 800614a:	a365      	add	r3, pc, #404	; (adr r3, 80062e0 <_dtoa_r+0x2b8>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	a364      	add	r3, pc, #400	; (adr r3, 80062e8 <_dtoa_r+0x2c0>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4606      	mov	r6, r0
 8006160:	4628      	mov	r0, r5
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa f9e6 	bl	8000534 <__aeabi_i2d>
 8006168:	a361      	add	r3, pc, #388	; (adr r3, 80062f0 <_dtoa_r+0x2c8>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa fa4b 	bl	8000608 <__aeabi_dmul>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa f88f 	bl	800029c <__adddf3>
 800617e:	4606      	mov	r6, r0
 8006180:	460f      	mov	r7, r1
 8006182:	f7fa fcf1 	bl	8000b68 <__aeabi_d2iz>
 8006186:	2200      	movs	r2, #0
 8006188:	9000      	str	r0, [sp, #0]
 800618a:	2300      	movs	r3, #0
 800618c:	4630      	mov	r0, r6
 800618e:	4639      	mov	r1, r7
 8006190:	f7fa fcac 	bl	8000aec <__aeabi_dcmplt>
 8006194:	b150      	cbz	r0, 80061ac <_dtoa_r+0x184>
 8006196:	9800      	ldr	r0, [sp, #0]
 8006198:	f7fa f9cc 	bl	8000534 <__aeabi_i2d>
 800619c:	4632      	mov	r2, r6
 800619e:	463b      	mov	r3, r7
 80061a0:	f7fa fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80061a4:	b910      	cbnz	r0, 80061ac <_dtoa_r+0x184>
 80061a6:	9b00      	ldr	r3, [sp, #0]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b16      	cmp	r3, #22
 80061b0:	d85a      	bhi.n	8006268 <_dtoa_r+0x240>
 80061b2:	9a00      	ldr	r2, [sp, #0]
 80061b4:	4b57      	ldr	r3, [pc, #348]	; (8006314 <_dtoa_r+0x2ec>)
 80061b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	ec51 0b19 	vmov	r0, r1, d9
 80061c2:	f7fa fc93 	bl	8000aec <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d050      	beq.n	800626c <_dtoa_r+0x244>
 80061ca:	9b00      	ldr	r3, [sp, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061d6:	1b5d      	subs	r5, r3, r5
 80061d8:	1e6b      	subs	r3, r5, #1
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	bf45      	ittet	mi
 80061de:	f1c5 0301 	rsbmi	r3, r5, #1
 80061e2:	9304      	strmi	r3, [sp, #16]
 80061e4:	2300      	movpl	r3, #0
 80061e6:	2300      	movmi	r3, #0
 80061e8:	bf4c      	ite	mi
 80061ea:	9305      	strmi	r3, [sp, #20]
 80061ec:	9304      	strpl	r3, [sp, #16]
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	db3d      	blt.n	8006270 <_dtoa_r+0x248>
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	9a00      	ldr	r2, [sp, #0]
 80061f8:	920a      	str	r2, [sp, #40]	; 0x28
 80061fa:	4413      	add	r3, r2
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	2300      	movs	r3, #0
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	2b09      	cmp	r3, #9
 8006206:	f200 8089 	bhi.w	800631c <_dtoa_r+0x2f4>
 800620a:	2b05      	cmp	r3, #5
 800620c:	bfc4      	itt	gt
 800620e:	3b04      	subgt	r3, #4
 8006210:	9306      	strgt	r3, [sp, #24]
 8006212:	9b06      	ldr	r3, [sp, #24]
 8006214:	f1a3 0302 	sub.w	r3, r3, #2
 8006218:	bfcc      	ite	gt
 800621a:	2500      	movgt	r5, #0
 800621c:	2501      	movle	r5, #1
 800621e:	2b03      	cmp	r3, #3
 8006220:	f200 8087 	bhi.w	8006332 <_dtoa_r+0x30a>
 8006224:	e8df f003 	tbb	[pc, r3]
 8006228:	59383a2d 	.word	0x59383a2d
 800622c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006230:	441d      	add	r5, r3
 8006232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006236:	2b20      	cmp	r3, #32
 8006238:	bfc1      	itttt	gt
 800623a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800623e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006242:	fa0b f303 	lslgt.w	r3, fp, r3
 8006246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800624a:	bfda      	itte	le
 800624c:	f1c3 0320 	rsble	r3, r3, #32
 8006250:	fa06 f003 	lslle.w	r0, r6, r3
 8006254:	4318      	orrgt	r0, r3
 8006256:	f7fa f95d 	bl	8000514 <__aeabi_ui2d>
 800625a:	2301      	movs	r3, #1
 800625c:	4606      	mov	r6, r0
 800625e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006262:	3d01      	subs	r5, #1
 8006264:	930e      	str	r3, [sp, #56]	; 0x38
 8006266:	e76a      	b.n	800613e <_dtoa_r+0x116>
 8006268:	2301      	movs	r3, #1
 800626a:	e7b2      	b.n	80061d2 <_dtoa_r+0x1aa>
 800626c:	900b      	str	r0, [sp, #44]	; 0x2c
 800626e:	e7b1      	b.n	80061d4 <_dtoa_r+0x1ac>
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	9a00      	ldr	r2, [sp, #0]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	9304      	str	r3, [sp, #16]
 8006278:	4253      	negs	r3, r2
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	2300      	movs	r3, #0
 800627e:	930a      	str	r3, [sp, #40]	; 0x28
 8006280:	e7bf      	b.n	8006202 <_dtoa_r+0x1da>
 8006282:	2300      	movs	r3, #0
 8006284:	9308      	str	r3, [sp, #32]
 8006286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc55      	bgt.n	8006338 <_dtoa_r+0x310>
 800628c:	2301      	movs	r3, #1
 800628e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006292:	461a      	mov	r2, r3
 8006294:	9209      	str	r2, [sp, #36]	; 0x24
 8006296:	e00c      	b.n	80062b2 <_dtoa_r+0x28a>
 8006298:	2301      	movs	r3, #1
 800629a:	e7f3      	b.n	8006284 <_dtoa_r+0x25c>
 800629c:	2300      	movs	r3, #0
 800629e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a0:	9308      	str	r3, [sp, #32]
 80062a2:	9b00      	ldr	r3, [sp, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	9302      	str	r3, [sp, #8]
 80062a8:	3301      	adds	r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	bfb8      	it	lt
 80062b0:	2301      	movlt	r3, #1
 80062b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062b4:	2200      	movs	r2, #0
 80062b6:	6042      	str	r2, [r0, #4]
 80062b8:	2204      	movs	r2, #4
 80062ba:	f102 0614 	add.w	r6, r2, #20
 80062be:	429e      	cmp	r6, r3
 80062c0:	6841      	ldr	r1, [r0, #4]
 80062c2:	d93d      	bls.n	8006340 <_dtoa_r+0x318>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fcd1 	bl	8006c6c <_Balloc>
 80062ca:	9001      	str	r0, [sp, #4]
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d13b      	bne.n	8006348 <_dtoa_r+0x320>
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <_dtoa_r+0x2f0>)
 80062d2:	4602      	mov	r2, r0
 80062d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062d8:	e6c0      	b.n	800605c <_dtoa_r+0x34>
 80062da:	2301      	movs	r3, #1
 80062dc:	e7df      	b.n	800629e <_dtoa_r+0x276>
 80062de:	bf00      	nop
 80062e0:	636f4361 	.word	0x636f4361
 80062e4:	3fd287a7 	.word	0x3fd287a7
 80062e8:	8b60c8b3 	.word	0x8b60c8b3
 80062ec:	3fc68a28 	.word	0x3fc68a28
 80062f0:	509f79fb 	.word	0x509f79fb
 80062f4:	3fd34413 	.word	0x3fd34413
 80062f8:	0800bdb5 	.word	0x0800bdb5
 80062fc:	0800bdcc 	.word	0x0800bdcc
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	0800bdb1 	.word	0x0800bdb1
 8006308:	0800bda8 	.word	0x0800bda8
 800630c:	0800bd49 	.word	0x0800bd49
 8006310:	3ff80000 	.word	0x3ff80000
 8006314:	0800bec8 	.word	0x0800bec8
 8006318:	0800be27 	.word	0x0800be27
 800631c:	2501      	movs	r5, #1
 800631e:	2300      	movs	r3, #0
 8006320:	9306      	str	r3, [sp, #24]
 8006322:	9508      	str	r5, [sp, #32]
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	2312      	movs	r3, #18
 8006330:	e7b0      	b.n	8006294 <_dtoa_r+0x26c>
 8006332:	2301      	movs	r3, #1
 8006334:	9308      	str	r3, [sp, #32]
 8006336:	e7f5      	b.n	8006324 <_dtoa_r+0x2fc>
 8006338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800633e:	e7b8      	b.n	80062b2 <_dtoa_r+0x28a>
 8006340:	3101      	adds	r1, #1
 8006342:	6041      	str	r1, [r0, #4]
 8006344:	0052      	lsls	r2, r2, #1
 8006346:	e7b8      	b.n	80062ba <_dtoa_r+0x292>
 8006348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634a:	9a01      	ldr	r2, [sp, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	2b0e      	cmp	r3, #14
 8006352:	f200 809d 	bhi.w	8006490 <_dtoa_r+0x468>
 8006356:	2d00      	cmp	r5, #0
 8006358:	f000 809a 	beq.w	8006490 <_dtoa_r+0x468>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd32      	ble.n	80063c8 <_dtoa_r+0x3a0>
 8006362:	4ab7      	ldr	r2, [pc, #732]	; (8006640 <_dtoa_r+0x618>)
 8006364:	f003 030f 	and.w	r3, r3, #15
 8006368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800636c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006370:	9b00      	ldr	r3, [sp, #0]
 8006372:	05d8      	lsls	r0, r3, #23
 8006374:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006378:	d516      	bpl.n	80063a8 <_dtoa_r+0x380>
 800637a:	4bb2      	ldr	r3, [pc, #712]	; (8006644 <_dtoa_r+0x61c>)
 800637c:	ec51 0b19 	vmov	r0, r1, d9
 8006380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006384:	f7fa fa6a 	bl	800085c <__aeabi_ddiv>
 8006388:	f007 070f 	and.w	r7, r7, #15
 800638c:	4682      	mov	sl, r0
 800638e:	468b      	mov	fp, r1
 8006390:	2503      	movs	r5, #3
 8006392:	4eac      	ldr	r6, [pc, #688]	; (8006644 <_dtoa_r+0x61c>)
 8006394:	b957      	cbnz	r7, 80063ac <_dtoa_r+0x384>
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	4650      	mov	r0, sl
 800639c:	4659      	mov	r1, fp
 800639e:	f7fa fa5d 	bl	800085c <__aeabi_ddiv>
 80063a2:	4682      	mov	sl, r0
 80063a4:	468b      	mov	fp, r1
 80063a6:	e028      	b.n	80063fa <_dtoa_r+0x3d2>
 80063a8:	2502      	movs	r5, #2
 80063aa:	e7f2      	b.n	8006392 <_dtoa_r+0x36a>
 80063ac:	07f9      	lsls	r1, r7, #31
 80063ae:	d508      	bpl.n	80063c2 <_dtoa_r+0x39a>
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063b8:	f7fa f926 	bl	8000608 <__aeabi_dmul>
 80063bc:	3501      	adds	r5, #1
 80063be:	4680      	mov	r8, r0
 80063c0:	4689      	mov	r9, r1
 80063c2:	107f      	asrs	r7, r7, #1
 80063c4:	3608      	adds	r6, #8
 80063c6:	e7e5      	b.n	8006394 <_dtoa_r+0x36c>
 80063c8:	f000 809b 	beq.w	8006502 <_dtoa_r+0x4da>
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	4f9d      	ldr	r7, [pc, #628]	; (8006644 <_dtoa_r+0x61c>)
 80063d0:	425e      	negs	r6, r3
 80063d2:	4b9b      	ldr	r3, [pc, #620]	; (8006640 <_dtoa_r+0x618>)
 80063d4:	f006 020f 	and.w	r2, r6, #15
 80063d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	ec51 0b19 	vmov	r0, r1, d9
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	1136      	asrs	r6, r6, #4
 80063ea:	4682      	mov	sl, r0
 80063ec:	468b      	mov	fp, r1
 80063ee:	2300      	movs	r3, #0
 80063f0:	2502      	movs	r5, #2
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d17a      	bne.n	80064ec <_dtoa_r+0x4c4>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1d3      	bne.n	80063a2 <_dtoa_r+0x37a>
 80063fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8082 	beq.w	8006506 <_dtoa_r+0x4de>
 8006402:	4b91      	ldr	r3, [pc, #580]	; (8006648 <_dtoa_r+0x620>)
 8006404:	2200      	movs	r2, #0
 8006406:	4650      	mov	r0, sl
 8006408:	4659      	mov	r1, fp
 800640a:	f7fa fb6f 	bl	8000aec <__aeabi_dcmplt>
 800640e:	2800      	cmp	r0, #0
 8006410:	d079      	beq.n	8006506 <_dtoa_r+0x4de>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d076      	beq.n	8006506 <_dtoa_r+0x4de>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	dd36      	ble.n	800648c <_dtoa_r+0x464>
 800641e:	9b00      	ldr	r3, [sp, #0]
 8006420:	4650      	mov	r0, sl
 8006422:	4659      	mov	r1, fp
 8006424:	1e5f      	subs	r7, r3, #1
 8006426:	2200      	movs	r2, #0
 8006428:	4b88      	ldr	r3, [pc, #544]	; (800664c <_dtoa_r+0x624>)
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	9e02      	ldr	r6, [sp, #8]
 8006430:	4682      	mov	sl, r0
 8006432:	468b      	mov	fp, r1
 8006434:	3501      	adds	r5, #1
 8006436:	4628      	mov	r0, r5
 8006438:	f7fa f87c 	bl	8000534 <__aeabi_i2d>
 800643c:	4652      	mov	r2, sl
 800643e:	465b      	mov	r3, fp
 8006440:	f7fa f8e2 	bl	8000608 <__aeabi_dmul>
 8006444:	4b82      	ldr	r3, [pc, #520]	; (8006650 <_dtoa_r+0x628>)
 8006446:	2200      	movs	r2, #0
 8006448:	f7f9 ff28 	bl	800029c <__adddf3>
 800644c:	46d0      	mov	r8, sl
 800644e:	46d9      	mov	r9, fp
 8006450:	4682      	mov	sl, r0
 8006452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006456:	2e00      	cmp	r6, #0
 8006458:	d158      	bne.n	800650c <_dtoa_r+0x4e4>
 800645a:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <_dtoa_r+0x62c>)
 800645c:	2200      	movs	r2, #0
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7f9 ff19 	bl	8000298 <__aeabi_dsub>
 8006466:	4652      	mov	r2, sl
 8006468:	465b      	mov	r3, fp
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	f7fa fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006472:	2800      	cmp	r0, #0
 8006474:	f040 8295 	bne.w	80069a2 <_dtoa_r+0x97a>
 8006478:	4652      	mov	r2, sl
 800647a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f7fa fb33 	bl	8000aec <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	f040 8289 	bne.w	800699e <_dtoa_r+0x976>
 800648c:	ec5b ab19 	vmov	sl, fp, d9
 8006490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006492:	2b00      	cmp	r3, #0
 8006494:	f2c0 8148 	blt.w	8006728 <_dtoa_r+0x700>
 8006498:	9a00      	ldr	r2, [sp, #0]
 800649a:	2a0e      	cmp	r2, #14
 800649c:	f300 8144 	bgt.w	8006728 <_dtoa_r+0x700>
 80064a0:	4b67      	ldr	r3, [pc, #412]	; (8006640 <_dtoa_r+0x618>)
 80064a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f280 80d5 	bge.w	800665c <_dtoa_r+0x634>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f300 80d1 	bgt.w	800665c <_dtoa_r+0x634>
 80064ba:	f040 826f 	bne.w	800699c <_dtoa_r+0x974>
 80064be:	4b65      	ldr	r3, [pc, #404]	; (8006654 <_dtoa_r+0x62c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7fa f89f 	bl	8000608 <__aeabi_dmul>
 80064ca:	4652      	mov	r2, sl
 80064cc:	465b      	mov	r3, fp
 80064ce:	f7fa fb21 	bl	8000b14 <__aeabi_dcmpge>
 80064d2:	9e03      	ldr	r6, [sp, #12]
 80064d4:	4637      	mov	r7, r6
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f040 8245 	bne.w	8006966 <_dtoa_r+0x93e>
 80064dc:	9d01      	ldr	r5, [sp, #4]
 80064de:	2331      	movs	r3, #49	; 0x31
 80064e0:	f805 3b01 	strb.w	r3, [r5], #1
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	e240      	b.n	800696e <_dtoa_r+0x946>
 80064ec:	07f2      	lsls	r2, r6, #31
 80064ee:	d505      	bpl.n	80064fc <_dtoa_r+0x4d4>
 80064f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f4:	f7fa f888 	bl	8000608 <__aeabi_dmul>
 80064f8:	3501      	adds	r5, #1
 80064fa:	2301      	movs	r3, #1
 80064fc:	1076      	asrs	r6, r6, #1
 80064fe:	3708      	adds	r7, #8
 8006500:	e777      	b.n	80063f2 <_dtoa_r+0x3ca>
 8006502:	2502      	movs	r5, #2
 8006504:	e779      	b.n	80063fa <_dtoa_r+0x3d2>
 8006506:	9f00      	ldr	r7, [sp, #0]
 8006508:	9e03      	ldr	r6, [sp, #12]
 800650a:	e794      	b.n	8006436 <_dtoa_r+0x40e>
 800650c:	9901      	ldr	r1, [sp, #4]
 800650e:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <_dtoa_r+0x618>)
 8006510:	4431      	add	r1, r6
 8006512:	910d      	str	r1, [sp, #52]	; 0x34
 8006514:	9908      	ldr	r1, [sp, #32]
 8006516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800651a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800651e:	2900      	cmp	r1, #0
 8006520:	d043      	beq.n	80065aa <_dtoa_r+0x582>
 8006522:	494d      	ldr	r1, [pc, #308]	; (8006658 <_dtoa_r+0x630>)
 8006524:	2000      	movs	r0, #0
 8006526:	f7fa f999 	bl	800085c <__aeabi_ddiv>
 800652a:	4652      	mov	r2, sl
 800652c:	465b      	mov	r3, fp
 800652e:	f7f9 feb3 	bl	8000298 <__aeabi_dsub>
 8006532:	9d01      	ldr	r5, [sp, #4]
 8006534:	4682      	mov	sl, r0
 8006536:	468b      	mov	fp, r1
 8006538:	4649      	mov	r1, r9
 800653a:	4640      	mov	r0, r8
 800653c:	f7fa fb14 	bl	8000b68 <__aeabi_d2iz>
 8006540:	4606      	mov	r6, r0
 8006542:	f7f9 fff7 	bl	8000534 <__aeabi_i2d>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	f7f9 fea3 	bl	8000298 <__aeabi_dsub>
 8006552:	3630      	adds	r6, #48	; 0x30
 8006554:	f805 6b01 	strb.w	r6, [r5], #1
 8006558:	4652      	mov	r2, sl
 800655a:	465b      	mov	r3, fp
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	f7fa fac4 	bl	8000aec <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d163      	bne.n	8006630 <_dtoa_r+0x608>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	4936      	ldr	r1, [pc, #216]	; (8006648 <_dtoa_r+0x620>)
 800656e:	2000      	movs	r0, #0
 8006570:	f7f9 fe92 	bl	8000298 <__aeabi_dsub>
 8006574:	4652      	mov	r2, sl
 8006576:	465b      	mov	r3, fp
 8006578:	f7fa fab8 	bl	8000aec <__aeabi_dcmplt>
 800657c:	2800      	cmp	r0, #0
 800657e:	f040 80b5 	bne.w	80066ec <_dtoa_r+0x6c4>
 8006582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006584:	429d      	cmp	r5, r3
 8006586:	d081      	beq.n	800648c <_dtoa_r+0x464>
 8006588:	4b30      	ldr	r3, [pc, #192]	; (800664c <_dtoa_r+0x624>)
 800658a:	2200      	movs	r2, #0
 800658c:	4650      	mov	r0, sl
 800658e:	4659      	mov	r1, fp
 8006590:	f7fa f83a 	bl	8000608 <__aeabi_dmul>
 8006594:	4b2d      	ldr	r3, [pc, #180]	; (800664c <_dtoa_r+0x624>)
 8006596:	4682      	mov	sl, r0
 8006598:	468b      	mov	fp, r1
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	2200      	movs	r2, #0
 80065a0:	f7fa f832 	bl	8000608 <__aeabi_dmul>
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	e7c6      	b.n	8006538 <_dtoa_r+0x510>
 80065aa:	4650      	mov	r0, sl
 80065ac:	4659      	mov	r1, fp
 80065ae:	f7fa f82b 	bl	8000608 <__aeabi_dmul>
 80065b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065b4:	9d01      	ldr	r5, [sp, #4]
 80065b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b8:	4682      	mov	sl, r0
 80065ba:	468b      	mov	fp, r1
 80065bc:	4649      	mov	r1, r9
 80065be:	4640      	mov	r0, r8
 80065c0:	f7fa fad2 	bl	8000b68 <__aeabi_d2iz>
 80065c4:	4606      	mov	r6, r0
 80065c6:	f7f9 ffb5 	bl	8000534 <__aeabi_i2d>
 80065ca:	3630      	adds	r6, #48	; 0x30
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4640      	mov	r0, r8
 80065d2:	4649      	mov	r1, r9
 80065d4:	f7f9 fe60 	bl	8000298 <__aeabi_dsub>
 80065d8:	f805 6b01 	strb.w	r6, [r5], #1
 80065dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065de:	429d      	cmp	r5, r3
 80065e0:	4680      	mov	r8, r0
 80065e2:	4689      	mov	r9, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	d124      	bne.n	8006634 <_dtoa_r+0x60c>
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <_dtoa_r+0x630>)
 80065ec:	4650      	mov	r0, sl
 80065ee:	4659      	mov	r1, fp
 80065f0:	f7f9 fe54 	bl	800029c <__adddf3>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fa fa94 	bl	8000b28 <__aeabi_dcmpgt>
 8006600:	2800      	cmp	r0, #0
 8006602:	d173      	bne.n	80066ec <_dtoa_r+0x6c4>
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	4913      	ldr	r1, [pc, #76]	; (8006658 <_dtoa_r+0x630>)
 800660a:	2000      	movs	r0, #0
 800660c:	f7f9 fe44 	bl	8000298 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7fa fa68 	bl	8000aec <__aeabi_dcmplt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f43f af35 	beq.w	800648c <_dtoa_r+0x464>
 8006622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006624:	1e6b      	subs	r3, r5, #1
 8006626:	930f      	str	r3, [sp, #60]	; 0x3c
 8006628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800662c:	2b30      	cmp	r3, #48	; 0x30
 800662e:	d0f8      	beq.n	8006622 <_dtoa_r+0x5fa>
 8006630:	9700      	str	r7, [sp, #0]
 8006632:	e049      	b.n	80066c8 <_dtoa_r+0x6a0>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_dtoa_r+0x624>)
 8006636:	f7f9 ffe7 	bl	8000608 <__aeabi_dmul>
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
 800663e:	e7bd      	b.n	80065bc <_dtoa_r+0x594>
 8006640:	0800bec8 	.word	0x0800bec8
 8006644:	0800bea0 	.word	0x0800bea0
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	40240000 	.word	0x40240000
 8006650:	401c0000 	.word	0x401c0000
 8006654:	40140000 	.word	0x40140000
 8006658:	3fe00000 	.word	0x3fe00000
 800665c:	9d01      	ldr	r5, [sp, #4]
 800665e:	4656      	mov	r6, sl
 8006660:	465f      	mov	r7, fp
 8006662:	4642      	mov	r2, r8
 8006664:	464b      	mov	r3, r9
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7fa f8f7 	bl	800085c <__aeabi_ddiv>
 800666e:	f7fa fa7b 	bl	8000b68 <__aeabi_d2iz>
 8006672:	4682      	mov	sl, r0
 8006674:	f7f9 ff5e 	bl	8000534 <__aeabi_i2d>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	f7f9 ffc4 	bl	8000608 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800668c:	f7f9 fe04 	bl	8000298 <__aeabi_dsub>
 8006690:	f805 6b01 	strb.w	r6, [r5], #1
 8006694:	9e01      	ldr	r6, [sp, #4]
 8006696:	9f03      	ldr	r7, [sp, #12]
 8006698:	1bae      	subs	r6, r5, r6
 800669a:	42b7      	cmp	r7, r6
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	d135      	bne.n	800670e <_dtoa_r+0x6e6>
 80066a2:	f7f9 fdfb 	bl	800029c <__adddf3>
 80066a6:	4642      	mov	r2, r8
 80066a8:	464b      	mov	r3, r9
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	f7fa fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80066b2:	b9d0      	cbnz	r0, 80066ea <_dtoa_r+0x6c2>
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7fa fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c0:	b110      	cbz	r0, 80066c8 <_dtoa_r+0x6a0>
 80066c2:	f01a 0f01 	tst.w	sl, #1
 80066c6:	d110      	bne.n	80066ea <_dtoa_r+0x6c2>
 80066c8:	4620      	mov	r0, r4
 80066ca:	ee18 1a10 	vmov	r1, s16
 80066ce:	f000 fb0d 	bl	8006cec <_Bfree>
 80066d2:	2300      	movs	r3, #0
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	702b      	strb	r3, [r5, #0]
 80066d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066da:	3001      	adds	r0, #1
 80066dc:	6018      	str	r0, [r3, #0]
 80066de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f43f acf1 	beq.w	80060c8 <_dtoa_r+0xa0>
 80066e6:	601d      	str	r5, [r3, #0]
 80066e8:	e4ee      	b.n	80060c8 <_dtoa_r+0xa0>
 80066ea:	9f00      	ldr	r7, [sp, #0]
 80066ec:	462b      	mov	r3, r5
 80066ee:	461d      	mov	r5, r3
 80066f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066f4:	2a39      	cmp	r2, #57	; 0x39
 80066f6:	d106      	bne.n	8006706 <_dtoa_r+0x6de>
 80066f8:	9a01      	ldr	r2, [sp, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d1f7      	bne.n	80066ee <_dtoa_r+0x6c6>
 80066fe:	9901      	ldr	r1, [sp, #4]
 8006700:	2230      	movs	r2, #48	; 0x30
 8006702:	3701      	adds	r7, #1
 8006704:	700a      	strb	r2, [r1, #0]
 8006706:	781a      	ldrb	r2, [r3, #0]
 8006708:	3201      	adds	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e790      	b.n	8006630 <_dtoa_r+0x608>
 800670e:	4ba6      	ldr	r3, [pc, #664]	; (80069a8 <_dtoa_r+0x980>)
 8006710:	2200      	movs	r2, #0
 8006712:	f7f9 ff79 	bl	8000608 <__aeabi_dmul>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	f7fa f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 8006722:	2800      	cmp	r0, #0
 8006724:	d09d      	beq.n	8006662 <_dtoa_r+0x63a>
 8006726:	e7cf      	b.n	80066c8 <_dtoa_r+0x6a0>
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	2a00      	cmp	r2, #0
 800672c:	f000 80d7 	beq.w	80068de <_dtoa_r+0x8b6>
 8006730:	9a06      	ldr	r2, [sp, #24]
 8006732:	2a01      	cmp	r2, #1
 8006734:	f300 80ba 	bgt.w	80068ac <_dtoa_r+0x884>
 8006738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800673a:	2a00      	cmp	r2, #0
 800673c:	f000 80b2 	beq.w	80068a4 <_dtoa_r+0x87c>
 8006740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006744:	9e07      	ldr	r6, [sp, #28]
 8006746:	9d04      	ldr	r5, [sp, #16]
 8006748:	9a04      	ldr	r2, [sp, #16]
 800674a:	441a      	add	r2, r3
 800674c:	9204      	str	r2, [sp, #16]
 800674e:	9a05      	ldr	r2, [sp, #20]
 8006750:	2101      	movs	r1, #1
 8006752:	441a      	add	r2, r3
 8006754:	4620      	mov	r0, r4
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	f000 fb80 	bl	8006e5c <__i2b>
 800675c:	4607      	mov	r7, r0
 800675e:	2d00      	cmp	r5, #0
 8006760:	dd0c      	ble.n	800677c <_dtoa_r+0x754>
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd09      	ble.n	800677c <_dtoa_r+0x754>
 8006768:	42ab      	cmp	r3, r5
 800676a:	9a04      	ldr	r2, [sp, #16]
 800676c:	bfa8      	it	ge
 800676e:	462b      	movge	r3, r5
 8006770:	1ad2      	subs	r2, r2, r3
 8006772:	9204      	str	r2, [sp, #16]
 8006774:	9a05      	ldr	r2, [sp, #20]
 8006776:	1aed      	subs	r5, r5, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	9b07      	ldr	r3, [sp, #28]
 800677e:	b31b      	cbz	r3, 80067c8 <_dtoa_r+0x7a0>
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80af 	beq.w	80068e6 <_dtoa_r+0x8be>
 8006788:	2e00      	cmp	r6, #0
 800678a:	dd13      	ble.n	80067b4 <_dtoa_r+0x78c>
 800678c:	4639      	mov	r1, r7
 800678e:	4632      	mov	r2, r6
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fc23 	bl	8006fdc <__pow5mult>
 8006796:	ee18 2a10 	vmov	r2, s16
 800679a:	4601      	mov	r1, r0
 800679c:	4607      	mov	r7, r0
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 fb72 	bl	8006e88 <__multiply>
 80067a4:	ee18 1a10 	vmov	r1, s16
 80067a8:	4680      	mov	r8, r0
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fa9e 	bl	8006cec <_Bfree>
 80067b0:	ee08 8a10 	vmov	s16, r8
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	1b9a      	subs	r2, r3, r6
 80067b8:	d006      	beq.n	80067c8 <_dtoa_r+0x7a0>
 80067ba:	ee18 1a10 	vmov	r1, s16
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fc0c 	bl	8006fdc <__pow5mult>
 80067c4:	ee08 0a10 	vmov	s16, r0
 80067c8:	2101      	movs	r1, #1
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fb46 	bl	8006e5c <__i2b>
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	4606      	mov	r6, r0
 80067d6:	f340 8088 	ble.w	80068ea <_dtoa_r+0x8c2>
 80067da:	461a      	mov	r2, r3
 80067dc:	4601      	mov	r1, r0
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fbfc 	bl	8006fdc <__pow5mult>
 80067e4:	9b06      	ldr	r3, [sp, #24]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	4606      	mov	r6, r0
 80067ea:	f340 8081 	ble.w	80068f0 <_dtoa_r+0x8c8>
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	6933      	ldr	r3, [r6, #16]
 80067f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067f8:	6918      	ldr	r0, [r3, #16]
 80067fa:	f000 fadf 	bl	8006dbc <__hi0bits>
 80067fe:	f1c0 0020 	rsb	r0, r0, #32
 8006802:	9b05      	ldr	r3, [sp, #20]
 8006804:	4418      	add	r0, r3
 8006806:	f010 001f 	ands.w	r0, r0, #31
 800680a:	f000 8092 	beq.w	8006932 <_dtoa_r+0x90a>
 800680e:	f1c0 0320 	rsb	r3, r0, #32
 8006812:	2b04      	cmp	r3, #4
 8006814:	f340 808a 	ble.w	800692c <_dtoa_r+0x904>
 8006818:	f1c0 001c 	rsb	r0, r0, #28
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	4403      	add	r3, r0
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9b05      	ldr	r3, [sp, #20]
 8006824:	4403      	add	r3, r0
 8006826:	4405      	add	r5, r0
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dd07      	ble.n	8006840 <_dtoa_r+0x818>
 8006830:	ee18 1a10 	vmov	r1, s16
 8006834:	461a      	mov	r2, r3
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fc2a 	bl	8007090 <__lshift>
 800683c:	ee08 0a10 	vmov	s16, r0
 8006840:	9b05      	ldr	r3, [sp, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd05      	ble.n	8006852 <_dtoa_r+0x82a>
 8006846:	4631      	mov	r1, r6
 8006848:	461a      	mov	r2, r3
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fc20 	bl	8007090 <__lshift>
 8006850:	4606      	mov	r6, r0
 8006852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d06e      	beq.n	8006936 <_dtoa_r+0x90e>
 8006858:	ee18 0a10 	vmov	r0, s16
 800685c:	4631      	mov	r1, r6
 800685e:	f000 fc87 	bl	8007170 <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	da67      	bge.n	8006936 <_dtoa_r+0x90e>
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	3b01      	subs	r3, #1
 800686a:	ee18 1a10 	vmov	r1, s16
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	220a      	movs	r2, #10
 8006872:	2300      	movs	r3, #0
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fa5b 	bl	8006d30 <__multadd>
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	ee08 0a10 	vmov	s16, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 81b1 	beq.w	8006be8 <_dtoa_r+0xbc0>
 8006886:	2300      	movs	r3, #0
 8006888:	4639      	mov	r1, r7
 800688a:	220a      	movs	r2, #10
 800688c:	4620      	mov	r0, r4
 800688e:	f000 fa4f 	bl	8006d30 <__multadd>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	4607      	mov	r7, r0
 8006898:	f300 808e 	bgt.w	80069b8 <_dtoa_r+0x990>
 800689c:	9b06      	ldr	r3, [sp, #24]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	dc51      	bgt.n	8006946 <_dtoa_r+0x91e>
 80068a2:	e089      	b.n	80069b8 <_dtoa_r+0x990>
 80068a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068aa:	e74b      	b.n	8006744 <_dtoa_r+0x71c>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	1e5e      	subs	r6, r3, #1
 80068b0:	9b07      	ldr	r3, [sp, #28]
 80068b2:	42b3      	cmp	r3, r6
 80068b4:	bfbf      	itttt	lt
 80068b6:	9b07      	ldrlt	r3, [sp, #28]
 80068b8:	9607      	strlt	r6, [sp, #28]
 80068ba:	1af2      	sublt	r2, r6, r3
 80068bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068be:	bfb6      	itet	lt
 80068c0:	189b      	addlt	r3, r3, r2
 80068c2:	1b9e      	subge	r6, r3, r6
 80068c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	bfb8      	it	lt
 80068ca:	2600      	movlt	r6, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfb7      	itett	lt
 80068d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80068d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80068d8:	1a9d      	sublt	r5, r3, r2
 80068da:	2300      	movlt	r3, #0
 80068dc:	e734      	b.n	8006748 <_dtoa_r+0x720>
 80068de:	9e07      	ldr	r6, [sp, #28]
 80068e0:	9d04      	ldr	r5, [sp, #16]
 80068e2:	9f08      	ldr	r7, [sp, #32]
 80068e4:	e73b      	b.n	800675e <_dtoa_r+0x736>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	e767      	b.n	80067ba <_dtoa_r+0x792>
 80068ea:	9b06      	ldr	r3, [sp, #24]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	dc18      	bgt.n	8006922 <_dtoa_r+0x8fa>
 80068f0:	f1ba 0f00 	cmp.w	sl, #0
 80068f4:	d115      	bne.n	8006922 <_dtoa_r+0x8fa>
 80068f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068fa:	b993      	cbnz	r3, 8006922 <_dtoa_r+0x8fa>
 80068fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006900:	0d1b      	lsrs	r3, r3, #20
 8006902:	051b      	lsls	r3, r3, #20
 8006904:	b183      	cbz	r3, 8006928 <_dtoa_r+0x900>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	3301      	adds	r3, #1
 8006910:	9305      	str	r3, [sp, #20]
 8006912:	f04f 0801 	mov.w	r8, #1
 8006916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	f47f af6a 	bne.w	80067f2 <_dtoa_r+0x7ca>
 800691e:	2001      	movs	r0, #1
 8006920:	e76f      	b.n	8006802 <_dtoa_r+0x7da>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	e7f6      	b.n	8006916 <_dtoa_r+0x8ee>
 8006928:	4698      	mov	r8, r3
 800692a:	e7f4      	b.n	8006916 <_dtoa_r+0x8ee>
 800692c:	f43f af7d 	beq.w	800682a <_dtoa_r+0x802>
 8006930:	4618      	mov	r0, r3
 8006932:	301c      	adds	r0, #28
 8006934:	e772      	b.n	800681c <_dtoa_r+0x7f4>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dc37      	bgt.n	80069ac <_dtoa_r+0x984>
 800693c:	9b06      	ldr	r3, [sp, #24]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dd34      	ble.n	80069ac <_dtoa_r+0x984>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	9302      	str	r3, [sp, #8]
 8006946:	9b02      	ldr	r3, [sp, #8]
 8006948:	b96b      	cbnz	r3, 8006966 <_dtoa_r+0x93e>
 800694a:	4631      	mov	r1, r6
 800694c:	2205      	movs	r2, #5
 800694e:	4620      	mov	r0, r4
 8006950:	f000 f9ee 	bl	8006d30 <__multadd>
 8006954:	4601      	mov	r1, r0
 8006956:	4606      	mov	r6, r0
 8006958:	ee18 0a10 	vmov	r0, s16
 800695c:	f000 fc08 	bl	8007170 <__mcmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	f73f adbb 	bgt.w	80064dc <_dtoa_r+0x4b4>
 8006966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006968:	9d01      	ldr	r5, [sp, #4]
 800696a:	43db      	mvns	r3, r3
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	f04f 0800 	mov.w	r8, #0
 8006972:	4631      	mov	r1, r6
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f9b9 	bl	8006cec <_Bfree>
 800697a:	2f00      	cmp	r7, #0
 800697c:	f43f aea4 	beq.w	80066c8 <_dtoa_r+0x6a0>
 8006980:	f1b8 0f00 	cmp.w	r8, #0
 8006984:	d005      	beq.n	8006992 <_dtoa_r+0x96a>
 8006986:	45b8      	cmp	r8, r7
 8006988:	d003      	beq.n	8006992 <_dtoa_r+0x96a>
 800698a:	4641      	mov	r1, r8
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f9ad 	bl	8006cec <_Bfree>
 8006992:	4639      	mov	r1, r7
 8006994:	4620      	mov	r0, r4
 8006996:	f000 f9a9 	bl	8006cec <_Bfree>
 800699a:	e695      	b.n	80066c8 <_dtoa_r+0x6a0>
 800699c:	2600      	movs	r6, #0
 800699e:	4637      	mov	r7, r6
 80069a0:	e7e1      	b.n	8006966 <_dtoa_r+0x93e>
 80069a2:	9700      	str	r7, [sp, #0]
 80069a4:	4637      	mov	r7, r6
 80069a6:	e599      	b.n	80064dc <_dtoa_r+0x4b4>
 80069a8:	40240000 	.word	0x40240000
 80069ac:	9b08      	ldr	r3, [sp, #32]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80ca 	beq.w	8006b48 <_dtoa_r+0xb20>
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	dd05      	ble.n	80069c8 <_dtoa_r+0x9a0>
 80069bc:	4639      	mov	r1, r7
 80069be:	462a      	mov	r2, r5
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fb65 	bl	8007090 <__lshift>
 80069c6:	4607      	mov	r7, r0
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	d05b      	beq.n	8006a86 <_dtoa_r+0xa5e>
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 f94b 	bl	8006c6c <_Balloc>
 80069d6:	4605      	mov	r5, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <_dtoa_r+0x9be>
 80069da:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <_dtoa_r+0xbd0>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069e2:	f7ff bb3b 	b.w	800605c <_dtoa_r+0x34>
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	f107 010c 	add.w	r1, r7, #12
 80069f0:	300c      	adds	r0, #12
 80069f2:	f7fe fcfd 	bl	80053f0 <memcpy>
 80069f6:	2201      	movs	r2, #1
 80069f8:	4629      	mov	r1, r5
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb48 	bl	8007090 <__lshift>
 8006a00:	9b01      	ldr	r3, [sp, #4]
 8006a02:	f103 0901 	add.w	r9, r3, #1
 8006a06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	f00a 0301 	and.w	r3, sl, #1
 8006a12:	46b8      	mov	r8, r7
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	4607      	mov	r7, r0
 8006a18:	4631      	mov	r1, r6
 8006a1a:	ee18 0a10 	vmov	r0, s16
 8006a1e:	f7ff fa75 	bl	8005f0c <quorem>
 8006a22:	4641      	mov	r1, r8
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a2a:	ee18 0a10 	vmov	r0, s16
 8006a2e:	f000 fb9f 	bl	8007170 <__mcmp>
 8006a32:	463a      	mov	r2, r7
 8006a34:	9003      	str	r0, [sp, #12]
 8006a36:	4631      	mov	r1, r6
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fbb5 	bl	80071a8 <__mdiff>
 8006a3e:	68c2      	ldr	r2, [r0, #12]
 8006a40:	f109 3bff 	add.w	fp, r9, #4294967295
 8006a44:	4605      	mov	r5, r0
 8006a46:	bb02      	cbnz	r2, 8006a8a <_dtoa_r+0xa62>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	ee18 0a10 	vmov	r0, s16
 8006a4e:	f000 fb8f 	bl	8007170 <__mcmp>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4629      	mov	r1, r5
 8006a56:	4620      	mov	r0, r4
 8006a58:	9207      	str	r2, [sp, #28]
 8006a5a:	f000 f947 	bl	8006cec <_Bfree>
 8006a5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a62:	ea43 0102 	orr.w	r1, r3, r2
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	464d      	mov	r5, r9
 8006a6c:	d10f      	bne.n	8006a8e <_dtoa_r+0xa66>
 8006a6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a72:	d02a      	beq.n	8006aca <_dtoa_r+0xaa2>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dd02      	ble.n	8006a80 <_dtoa_r+0xa58>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a80:	f88b a000 	strb.w	sl, [fp]
 8006a84:	e775      	b.n	8006972 <_dtoa_r+0x94a>
 8006a86:	4638      	mov	r0, r7
 8006a88:	e7ba      	b.n	8006a00 <_dtoa_r+0x9d8>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	e7e2      	b.n	8006a54 <_dtoa_r+0xa2c>
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db04      	blt.n	8006a9e <_dtoa_r+0xa76>
 8006a94:	9906      	ldr	r1, [sp, #24]
 8006a96:	430b      	orrs	r3, r1
 8006a98:	9904      	ldr	r1, [sp, #16]
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	d122      	bne.n	8006ae4 <_dtoa_r+0xabc>
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	ddee      	ble.n	8006a80 <_dtoa_r+0xa58>
 8006aa2:	ee18 1a10 	vmov	r1, s16
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 faf1 	bl	8007090 <__lshift>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	ee08 0a10 	vmov	s16, r0
 8006ab4:	f000 fb5c 	bl	8007170 <__mcmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	dc03      	bgt.n	8006ac4 <_dtoa_r+0xa9c>
 8006abc:	d1e0      	bne.n	8006a80 <_dtoa_r+0xa58>
 8006abe:	f01a 0f01 	tst.w	sl, #1
 8006ac2:	d0dd      	beq.n	8006a80 <_dtoa_r+0xa58>
 8006ac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ac8:	d1d7      	bne.n	8006a7a <_dtoa_r+0xa52>
 8006aca:	2339      	movs	r3, #57	; 0x39
 8006acc:	f88b 3000 	strb.w	r3, [fp]
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ada:	2a39      	cmp	r2, #57	; 0x39
 8006adc:	d071      	beq.n	8006bc2 <_dtoa_r+0xb9a>
 8006ade:	3201      	adds	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e746      	b.n	8006972 <_dtoa_r+0x94a>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	dd07      	ble.n	8006af8 <_dtoa_r+0xad0>
 8006ae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aec:	d0ed      	beq.n	8006aca <_dtoa_r+0xaa2>
 8006aee:	f10a 0301 	add.w	r3, sl, #1
 8006af2:	f88b 3000 	strb.w	r3, [fp]
 8006af6:	e73c      	b.n	8006972 <_dtoa_r+0x94a>
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006afe:	4599      	cmp	r9, r3
 8006b00:	d047      	beq.n	8006b92 <_dtoa_r+0xb6a>
 8006b02:	ee18 1a10 	vmov	r1, s16
 8006b06:	2300      	movs	r3, #0
 8006b08:	220a      	movs	r2, #10
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f910 	bl	8006d30 <__multadd>
 8006b10:	45b8      	cmp	r8, r7
 8006b12:	ee08 0a10 	vmov	s16, r0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	f04f 020a 	mov.w	r2, #10
 8006b1e:	4641      	mov	r1, r8
 8006b20:	4620      	mov	r0, r4
 8006b22:	d106      	bne.n	8006b32 <_dtoa_r+0xb0a>
 8006b24:	f000 f904 	bl	8006d30 <__multadd>
 8006b28:	4680      	mov	r8, r0
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	e772      	b.n	8006a18 <_dtoa_r+0x9f0>
 8006b32:	f000 f8fd 	bl	8006d30 <__multadd>
 8006b36:	4639      	mov	r1, r7
 8006b38:	4680      	mov	r8, r0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	220a      	movs	r2, #10
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f8f6 	bl	8006d30 <__multadd>
 8006b44:	4607      	mov	r7, r0
 8006b46:	e7f1      	b.n	8006b2c <_dtoa_r+0xb04>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	9d01      	ldr	r5, [sp, #4]
 8006b4e:	ee18 0a10 	vmov	r0, s16
 8006b52:	4631      	mov	r1, r6
 8006b54:	f7ff f9da 	bl	8005f0c <quorem>
 8006b58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006b62:	1aea      	subs	r2, r5, r3
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	dd09      	ble.n	8006b7e <_dtoa_r+0xb56>
 8006b6a:	ee18 1a10 	vmov	r1, s16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	220a      	movs	r2, #10
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f8dc 	bl	8006d30 <__multadd>
 8006b78:	ee08 0a10 	vmov	s16, r0
 8006b7c:	e7e7      	b.n	8006b4e <_dtoa_r+0xb26>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bfc8      	it	gt
 8006b84:	461d      	movgt	r5, r3
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	bfd8      	it	le
 8006b8a:	2501      	movle	r5, #1
 8006b8c:	441d      	add	r5, r3
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	ee18 1a10 	vmov	r1, s16
 8006b96:	2201      	movs	r2, #1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fa79 	bl	8007090 <__lshift>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	ee08 0a10 	vmov	s16, r0
 8006ba4:	f000 fae4 	bl	8007170 <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dc91      	bgt.n	8006ad0 <_dtoa_r+0xaa8>
 8006bac:	d102      	bne.n	8006bb4 <_dtoa_r+0xb8c>
 8006bae:	f01a 0f01 	tst.w	sl, #1
 8006bb2:	d18d      	bne.n	8006ad0 <_dtoa_r+0xaa8>
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bbc:	2a30      	cmp	r2, #48	; 0x30
 8006bbe:	d0fa      	beq.n	8006bb6 <_dtoa_r+0xb8e>
 8006bc0:	e6d7      	b.n	8006972 <_dtoa_r+0x94a>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d184      	bne.n	8006ad2 <_dtoa_r+0xaaa>
 8006bc8:	9b00      	ldr	r3, [sp, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2331      	movs	r3, #49	; 0x31
 8006bd0:	7013      	strb	r3, [r2, #0]
 8006bd2:	e6ce      	b.n	8006972 <_dtoa_r+0x94a>
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <_dtoa_r+0xbd4>)
 8006bd6:	f7ff ba95 	b.w	8006104 <_dtoa_r+0xdc>
 8006bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f aa6e 	bne.w	80060be <_dtoa_r+0x96>
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <_dtoa_r+0xbd8>)
 8006be4:	f7ff ba8e 	b.w	8006104 <_dtoa_r+0xdc>
 8006be8:	9b02      	ldr	r3, [sp, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dcae      	bgt.n	8006b4c <_dtoa_r+0xb24>
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	f73f aea8 	bgt.w	8006946 <_dtoa_r+0x91e>
 8006bf6:	e7a9      	b.n	8006b4c <_dtoa_r+0xb24>
 8006bf8:	0800be27 	.word	0x0800be27
 8006bfc:	0800bd48 	.word	0x0800bd48
 8006c00:	0800bda8 	.word	0x0800bda8

08006c04 <fiprintf>:
 8006c04:	b40e      	push	{r1, r2, r3}
 8006c06:	b503      	push	{r0, r1, lr}
 8006c08:	4601      	mov	r1, r0
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	4805      	ldr	r0, [pc, #20]	; (8006c24 <fiprintf+0x20>)
 8006c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c12:	6800      	ldr	r0, [r0, #0]
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f000 fbed 	bl	80073f4 <_vfiprintf_r>
 8006c1a:	b002      	add	sp, #8
 8006c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c20:	b003      	add	sp, #12
 8006c22:	4770      	bx	lr
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <_localeconv_r>:
 8006c28:	4800      	ldr	r0, [pc, #0]	; (8006c2c <_localeconv_r+0x4>)
 8006c2a:	4770      	bx	lr
 8006c2c:	20000160 	.word	0x20000160

08006c30 <__ascii_mbtowc>:
 8006c30:	b082      	sub	sp, #8
 8006c32:	b901      	cbnz	r1, 8006c36 <__ascii_mbtowc+0x6>
 8006c34:	a901      	add	r1, sp, #4
 8006c36:	b142      	cbz	r2, 8006c4a <__ascii_mbtowc+0x1a>
 8006c38:	b14b      	cbz	r3, 8006c4e <__ascii_mbtowc+0x1e>
 8006c3a:	7813      	ldrb	r3, [r2, #0]
 8006c3c:	600b      	str	r3, [r1, #0]
 8006c3e:	7812      	ldrb	r2, [r2, #0]
 8006c40:	1e10      	subs	r0, r2, #0
 8006c42:	bf18      	it	ne
 8006c44:	2001      	movne	r0, #1
 8006c46:	b002      	add	sp, #8
 8006c48:	4770      	bx	lr
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	e7fb      	b.n	8006c46 <__ascii_mbtowc+0x16>
 8006c4e:	f06f 0001 	mvn.w	r0, #1
 8006c52:	e7f8      	b.n	8006c46 <__ascii_mbtowc+0x16>

08006c54 <__malloc_lock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__malloc_lock+0x8>)
 8006c56:	f000 bf95 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	200002b8 	.word	0x200002b8

08006c60 <__malloc_unlock>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__malloc_unlock+0x8>)
 8006c62:	f000 bf90 	b.w	8007b86 <__retarget_lock_release_recursive>
 8006c66:	bf00      	nop
 8006c68:	200002b8 	.word	0x200002b8

08006c6c <_Balloc>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	b976      	cbnz	r6, 8006c94 <_Balloc+0x28>
 8006c76:	2010      	movs	r0, #16
 8006c78:	f7fe fbb2 	bl	80053e0 <malloc>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6260      	str	r0, [r4, #36]	; 0x24
 8006c80:	b920      	cbnz	r0, 8006c8c <_Balloc+0x20>
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <_Balloc+0x78>)
 8006c84:	4818      	ldr	r0, [pc, #96]	; (8006ce8 <_Balloc+0x7c>)
 8006c86:	2166      	movs	r1, #102	; 0x66
 8006c88:	f7ff f922 	bl	8005ed0 <__assert_func>
 8006c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c90:	6006      	str	r6, [r0, #0]
 8006c92:	60c6      	str	r6, [r0, #12]
 8006c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c96:	68f3      	ldr	r3, [r6, #12]
 8006c98:	b183      	cbz	r3, 8006cbc <_Balloc+0x50>
 8006c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ca2:	b9b8      	cbnz	r0, 8006cd4 <_Balloc+0x68>
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f605 	lsl.w	r6, r1, r5
 8006caa:	1d72      	adds	r2, r6, #5
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fb60 	bl	8007374 <_calloc_r>
 8006cb4:	b160      	cbz	r0, 8006cd0 <_Balloc+0x64>
 8006cb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cba:	e00e      	b.n	8006cda <_Balloc+0x6e>
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fb57 	bl	8007374 <_calloc_r>
 8006cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc8:	60f0      	str	r0, [r6, #12]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <_Balloc+0x2e>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ce0:	e7f7      	b.n	8006cd2 <_Balloc+0x66>
 8006ce2:	bf00      	nop
 8006ce4:	0800bdb5 	.word	0x0800bdb5
 8006ce8:	0800be42 	.word	0x0800be42

08006cec <_Bfree>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b976      	cbnz	r6, 8006d14 <_Bfree+0x28>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f7fe fb72 	bl	80053e0 <malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6268      	str	r0, [r5, #36]	; 0x24
 8006d00:	b920      	cbnz	r0, 8006d0c <_Bfree+0x20>
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <_Bfree+0x3c>)
 8006d04:	4809      	ldr	r0, [pc, #36]	; (8006d2c <_Bfree+0x40>)
 8006d06:	218a      	movs	r1, #138	; 0x8a
 8006d08:	f7ff f8e2 	bl	8005ed0 <__assert_func>
 8006d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d10:	6006      	str	r6, [r0, #0]
 8006d12:	60c6      	str	r6, [r0, #12]
 8006d14:	b13c      	cbz	r4, 8006d26 <_Bfree+0x3a>
 8006d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d18:	6862      	ldr	r2, [r4, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d20:	6021      	str	r1, [r4, #0]
 8006d22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	0800bdb5 	.word	0x0800bdb5
 8006d2c:	0800be42 	.word	0x0800be42

08006d30 <__multadd>:
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	690d      	ldr	r5, [r1, #16]
 8006d36:	4607      	mov	r7, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	461e      	mov	r6, r3
 8006d3c:	f101 0c14 	add.w	ip, r1, #20
 8006d40:	2000      	movs	r0, #0
 8006d42:	f8dc 3000 	ldr.w	r3, [ip]
 8006d46:	b299      	uxth	r1, r3
 8006d48:	fb02 6101 	mla	r1, r2, r1, r6
 8006d4c:	0c1e      	lsrs	r6, r3, #16
 8006d4e:	0c0b      	lsrs	r3, r1, #16
 8006d50:	fb02 3306 	mla	r3, r2, r6, r3
 8006d54:	b289      	uxth	r1, r1
 8006d56:	3001      	adds	r0, #1
 8006d58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d5c:	4285      	cmp	r5, r0
 8006d5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006d62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d66:	dcec      	bgt.n	8006d42 <__multadd+0x12>
 8006d68:	b30e      	cbz	r6, 8006dae <__multadd+0x7e>
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dc19      	bgt.n	8006da4 <__multadd+0x74>
 8006d70:	6861      	ldr	r1, [r4, #4]
 8006d72:	4638      	mov	r0, r7
 8006d74:	3101      	adds	r1, #1
 8006d76:	f7ff ff79 	bl	8006c6c <_Balloc>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	b928      	cbnz	r0, 8006d8a <__multadd+0x5a>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <__multadd+0x84>)
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <__multadd+0x88>)
 8006d84:	21b5      	movs	r1, #181	; 0xb5
 8006d86:	f7ff f8a3 	bl	8005ed0 <__assert_func>
 8006d8a:	6922      	ldr	r2, [r4, #16]
 8006d8c:	3202      	adds	r2, #2
 8006d8e:	f104 010c 	add.w	r1, r4, #12
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	300c      	adds	r0, #12
 8006d96:	f7fe fb2b 	bl	80053f0 <memcpy>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff ffa5 	bl	8006cec <_Bfree>
 8006da2:	4644      	mov	r4, r8
 8006da4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006da8:	3501      	adds	r5, #1
 8006daa:	615e      	str	r6, [r3, #20]
 8006dac:	6125      	str	r5, [r4, #16]
 8006dae:	4620      	mov	r0, r4
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	0800be27 	.word	0x0800be27
 8006db8:	0800be42 	.word	0x0800be42

08006dbc <__hi0bits>:
 8006dbc:	0c03      	lsrs	r3, r0, #16
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	b9d3      	cbnz	r3, 8006df8 <__hi0bits+0x3c>
 8006dc2:	0400      	lsls	r0, r0, #16
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dca:	bf04      	itt	eq
 8006dcc:	0200      	lsleq	r0, r0, #8
 8006dce:	3308      	addeq	r3, #8
 8006dd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dd4:	bf04      	itt	eq
 8006dd6:	0100      	lsleq	r0, r0, #4
 8006dd8:	3304      	addeq	r3, #4
 8006dda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006dde:	bf04      	itt	eq
 8006de0:	0080      	lsleq	r0, r0, #2
 8006de2:	3302      	addeq	r3, #2
 8006de4:	2800      	cmp	r0, #0
 8006de6:	db05      	blt.n	8006df4 <__hi0bits+0x38>
 8006de8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006dec:	f103 0301 	add.w	r3, r3, #1
 8006df0:	bf08      	it	eq
 8006df2:	2320      	moveq	r3, #32
 8006df4:	4618      	mov	r0, r3
 8006df6:	4770      	bx	lr
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e7e4      	b.n	8006dc6 <__hi0bits+0xa>

08006dfc <__lo0bits>:
 8006dfc:	6803      	ldr	r3, [r0, #0]
 8006dfe:	f013 0207 	ands.w	r2, r3, #7
 8006e02:	4601      	mov	r1, r0
 8006e04:	d00b      	beq.n	8006e1e <__lo0bits+0x22>
 8006e06:	07da      	lsls	r2, r3, #31
 8006e08:	d423      	bmi.n	8006e52 <__lo0bits+0x56>
 8006e0a:	0798      	lsls	r0, r3, #30
 8006e0c:	bf49      	itett	mi
 8006e0e:	085b      	lsrmi	r3, r3, #1
 8006e10:	089b      	lsrpl	r3, r3, #2
 8006e12:	2001      	movmi	r0, #1
 8006e14:	600b      	strmi	r3, [r1, #0]
 8006e16:	bf5c      	itt	pl
 8006e18:	600b      	strpl	r3, [r1, #0]
 8006e1a:	2002      	movpl	r0, #2
 8006e1c:	4770      	bx	lr
 8006e1e:	b298      	uxth	r0, r3
 8006e20:	b9a8      	cbnz	r0, 8006e4e <__lo0bits+0x52>
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	2010      	movs	r0, #16
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	b90a      	cbnz	r2, 8006e2e <__lo0bits+0x32>
 8006e2a:	3008      	adds	r0, #8
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	071a      	lsls	r2, r3, #28
 8006e30:	bf04      	itt	eq
 8006e32:	091b      	lsreq	r3, r3, #4
 8006e34:	3004      	addeq	r0, #4
 8006e36:	079a      	lsls	r2, r3, #30
 8006e38:	bf04      	itt	eq
 8006e3a:	089b      	lsreq	r3, r3, #2
 8006e3c:	3002      	addeq	r0, #2
 8006e3e:	07da      	lsls	r2, r3, #31
 8006e40:	d403      	bmi.n	8006e4a <__lo0bits+0x4e>
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	f100 0001 	add.w	r0, r0, #1
 8006e48:	d005      	beq.n	8006e56 <__lo0bits+0x5a>
 8006e4a:	600b      	str	r3, [r1, #0]
 8006e4c:	4770      	bx	lr
 8006e4e:	4610      	mov	r0, r2
 8006e50:	e7e9      	b.n	8006e26 <__lo0bits+0x2a>
 8006e52:	2000      	movs	r0, #0
 8006e54:	4770      	bx	lr
 8006e56:	2020      	movs	r0, #32
 8006e58:	4770      	bx	lr
	...

08006e5c <__i2b>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	460c      	mov	r4, r1
 8006e60:	2101      	movs	r1, #1
 8006e62:	f7ff ff03 	bl	8006c6c <_Balloc>
 8006e66:	4602      	mov	r2, r0
 8006e68:	b928      	cbnz	r0, 8006e76 <__i2b+0x1a>
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <__i2b+0x24>)
 8006e6c:	4805      	ldr	r0, [pc, #20]	; (8006e84 <__i2b+0x28>)
 8006e6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e72:	f7ff f82d 	bl	8005ed0 <__assert_func>
 8006e76:	2301      	movs	r3, #1
 8006e78:	6144      	str	r4, [r0, #20]
 8006e7a:	6103      	str	r3, [r0, #16]
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	bf00      	nop
 8006e80:	0800be27 	.word	0x0800be27
 8006e84:	0800be42 	.word	0x0800be42

08006e88 <__multiply>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	4691      	mov	r9, r2
 8006e8e:	690a      	ldr	r2, [r1, #16]
 8006e90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bfb8      	it	lt
 8006e98:	460b      	movlt	r3, r1
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	bfbc      	itt	lt
 8006e9e:	464c      	movlt	r4, r9
 8006ea0:	4699      	movlt	r9, r3
 8006ea2:	6927      	ldr	r7, [r4, #16]
 8006ea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ea8:	68a3      	ldr	r3, [r4, #8]
 8006eaa:	6861      	ldr	r1, [r4, #4]
 8006eac:	eb07 060a 	add.w	r6, r7, sl
 8006eb0:	42b3      	cmp	r3, r6
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	bfb8      	it	lt
 8006eb6:	3101      	addlt	r1, #1
 8006eb8:	f7ff fed8 	bl	8006c6c <_Balloc>
 8006ebc:	b930      	cbnz	r0, 8006ecc <__multiply+0x44>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b44      	ldr	r3, [pc, #272]	; (8006fd4 <__multiply+0x14c>)
 8006ec2:	4845      	ldr	r0, [pc, #276]	; (8006fd8 <__multiply+0x150>)
 8006ec4:	f240 115d 	movw	r1, #349	; 0x15d
 8006ec8:	f7ff f802 	bl	8005ed0 <__assert_func>
 8006ecc:	f100 0514 	add.w	r5, r0, #20
 8006ed0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4543      	cmp	r3, r8
 8006eda:	d321      	bcc.n	8006f20 <__multiply+0x98>
 8006edc:	f104 0314 	add.w	r3, r4, #20
 8006ee0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ee4:	f109 0314 	add.w	r3, r9, #20
 8006ee8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006eec:	9202      	str	r2, [sp, #8]
 8006eee:	1b3a      	subs	r2, r7, r4
 8006ef0:	3a15      	subs	r2, #21
 8006ef2:	f022 0203 	bic.w	r2, r2, #3
 8006ef6:	3204      	adds	r2, #4
 8006ef8:	f104 0115 	add.w	r1, r4, #21
 8006efc:	428f      	cmp	r7, r1
 8006efe:	bf38      	it	cc
 8006f00:	2204      	movcc	r2, #4
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	9a02      	ldr	r2, [sp, #8]
 8006f06:	9303      	str	r3, [sp, #12]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d80c      	bhi.n	8006f26 <__multiply+0x9e>
 8006f0c:	2e00      	cmp	r6, #0
 8006f0e:	dd03      	ble.n	8006f18 <__multiply+0x90>
 8006f10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05a      	beq.n	8006fce <__multiply+0x146>
 8006f18:	6106      	str	r6, [r0, #16]
 8006f1a:	b005      	add	sp, #20
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	f843 2b04 	str.w	r2, [r3], #4
 8006f24:	e7d8      	b.n	8006ed8 <__multiply+0x50>
 8006f26:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f2a:	f1ba 0f00 	cmp.w	sl, #0
 8006f2e:	d024      	beq.n	8006f7a <__multiply+0xf2>
 8006f30:	f104 0e14 	add.w	lr, r4, #20
 8006f34:	46a9      	mov	r9, r5
 8006f36:	f04f 0c00 	mov.w	ip, #0
 8006f3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f3e:	f8d9 1000 	ldr.w	r1, [r9]
 8006f42:	fa1f fb82 	uxth.w	fp, r2
 8006f46:	b289      	uxth	r1, r1
 8006f48:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f50:	f8d9 2000 	ldr.w	r2, [r9]
 8006f54:	4461      	add	r1, ip
 8006f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f62:	b289      	uxth	r1, r1
 8006f64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f68:	4577      	cmp	r7, lr
 8006f6a:	f849 1b04 	str.w	r1, [r9], #4
 8006f6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f72:	d8e2      	bhi.n	8006f3a <__multiply+0xb2>
 8006f74:	9a01      	ldr	r2, [sp, #4]
 8006f76:	f845 c002 	str.w	ip, [r5, r2]
 8006f7a:	9a03      	ldr	r2, [sp, #12]
 8006f7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f80:	3304      	adds	r3, #4
 8006f82:	f1b9 0f00 	cmp.w	r9, #0
 8006f86:	d020      	beq.n	8006fca <__multiply+0x142>
 8006f88:	6829      	ldr	r1, [r5, #0]
 8006f8a:	f104 0c14 	add.w	ip, r4, #20
 8006f8e:	46ae      	mov	lr, r5
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	f8bc b000 	ldrh.w	fp, [ip]
 8006f98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006f9c:	fb09 220b 	mla	r2, r9, fp, r2
 8006fa0:	4492      	add	sl, r2
 8006fa2:	b289      	uxth	r1, r1
 8006fa4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fa8:	f84e 1b04 	str.w	r1, [lr], #4
 8006fac:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fb0:	f8be 1000 	ldrh.w	r1, [lr]
 8006fb4:	0c12      	lsrs	r2, r2, #16
 8006fb6:	fb09 1102 	mla	r1, r9, r2, r1
 8006fba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fbe:	4567      	cmp	r7, ip
 8006fc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fc4:	d8e6      	bhi.n	8006f94 <__multiply+0x10c>
 8006fc6:	9a01      	ldr	r2, [sp, #4]
 8006fc8:	50a9      	str	r1, [r5, r2]
 8006fca:	3504      	adds	r5, #4
 8006fcc:	e79a      	b.n	8006f04 <__multiply+0x7c>
 8006fce:	3e01      	subs	r6, #1
 8006fd0:	e79c      	b.n	8006f0c <__multiply+0x84>
 8006fd2:	bf00      	nop
 8006fd4:	0800be27 	.word	0x0800be27
 8006fd8:	0800be42 	.word	0x0800be42

08006fdc <__pow5mult>:
 8006fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	f012 0203 	ands.w	r2, r2, #3
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	d007      	beq.n	8006ffc <__pow5mult+0x20>
 8006fec:	4c25      	ldr	r4, [pc, #148]	; (8007084 <__pow5mult+0xa8>)
 8006fee:	3a01      	subs	r2, #1
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ff6:	f7ff fe9b 	bl	8006d30 <__multadd>
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	10ad      	asrs	r5, r5, #2
 8006ffe:	d03d      	beq.n	800707c <__pow5mult+0xa0>
 8007000:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007002:	b97c      	cbnz	r4, 8007024 <__pow5mult+0x48>
 8007004:	2010      	movs	r0, #16
 8007006:	f7fe f9eb 	bl	80053e0 <malloc>
 800700a:	4602      	mov	r2, r0
 800700c:	6270      	str	r0, [r6, #36]	; 0x24
 800700e:	b928      	cbnz	r0, 800701c <__pow5mult+0x40>
 8007010:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <__pow5mult+0xac>)
 8007012:	481e      	ldr	r0, [pc, #120]	; (800708c <__pow5mult+0xb0>)
 8007014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007018:	f7fe ff5a 	bl	8005ed0 <__assert_func>
 800701c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007020:	6004      	str	r4, [r0, #0]
 8007022:	60c4      	str	r4, [r0, #12]
 8007024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800702c:	b94c      	cbnz	r4, 8007042 <__pow5mult+0x66>
 800702e:	f240 2171 	movw	r1, #625	; 0x271
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff ff12 	bl	8006e5c <__i2b>
 8007038:	2300      	movs	r3, #0
 800703a:	f8c8 0008 	str.w	r0, [r8, #8]
 800703e:	4604      	mov	r4, r0
 8007040:	6003      	str	r3, [r0, #0]
 8007042:	f04f 0900 	mov.w	r9, #0
 8007046:	07eb      	lsls	r3, r5, #31
 8007048:	d50a      	bpl.n	8007060 <__pow5mult+0x84>
 800704a:	4639      	mov	r1, r7
 800704c:	4622      	mov	r2, r4
 800704e:	4630      	mov	r0, r6
 8007050:	f7ff ff1a 	bl	8006e88 <__multiply>
 8007054:	4639      	mov	r1, r7
 8007056:	4680      	mov	r8, r0
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff fe47 	bl	8006cec <_Bfree>
 800705e:	4647      	mov	r7, r8
 8007060:	106d      	asrs	r5, r5, #1
 8007062:	d00b      	beq.n	800707c <__pow5mult+0xa0>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	b938      	cbnz	r0, 8007078 <__pow5mult+0x9c>
 8007068:	4622      	mov	r2, r4
 800706a:	4621      	mov	r1, r4
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ff0b 	bl	8006e88 <__multiply>
 8007072:	6020      	str	r0, [r4, #0]
 8007074:	f8c0 9000 	str.w	r9, [r0]
 8007078:	4604      	mov	r4, r0
 800707a:	e7e4      	b.n	8007046 <__pow5mult+0x6a>
 800707c:	4638      	mov	r0, r7
 800707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007082:	bf00      	nop
 8007084:	0800bf90 	.word	0x0800bf90
 8007088:	0800bdb5 	.word	0x0800bdb5
 800708c:	0800be42 	.word	0x0800be42

08007090 <__lshift>:
 8007090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	6849      	ldr	r1, [r1, #4]
 8007098:	6923      	ldr	r3, [r4, #16]
 800709a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	4607      	mov	r7, r0
 80070a2:	4691      	mov	r9, r2
 80070a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070a8:	f108 0601 	add.w	r6, r8, #1
 80070ac:	42b3      	cmp	r3, r6
 80070ae:	db0b      	blt.n	80070c8 <__lshift+0x38>
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff fddb 	bl	8006c6c <_Balloc>
 80070b6:	4605      	mov	r5, r0
 80070b8:	b948      	cbnz	r0, 80070ce <__lshift+0x3e>
 80070ba:	4602      	mov	r2, r0
 80070bc:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <__lshift+0xd8>)
 80070be:	482b      	ldr	r0, [pc, #172]	; (800716c <__lshift+0xdc>)
 80070c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070c4:	f7fe ff04 	bl	8005ed0 <__assert_func>
 80070c8:	3101      	adds	r1, #1
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	e7ee      	b.n	80070ac <__lshift+0x1c>
 80070ce:	2300      	movs	r3, #0
 80070d0:	f100 0114 	add.w	r1, r0, #20
 80070d4:	f100 0210 	add.w	r2, r0, #16
 80070d8:	4618      	mov	r0, r3
 80070da:	4553      	cmp	r3, sl
 80070dc:	db37      	blt.n	800714e <__lshift+0xbe>
 80070de:	6920      	ldr	r0, [r4, #16]
 80070e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070e4:	f104 0314 	add.w	r3, r4, #20
 80070e8:	f019 091f 	ands.w	r9, r9, #31
 80070ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070f4:	d02f      	beq.n	8007156 <__lshift+0xc6>
 80070f6:	f1c9 0e20 	rsb	lr, r9, #32
 80070fa:	468a      	mov	sl, r1
 80070fc:	f04f 0c00 	mov.w	ip, #0
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	fa02 f209 	lsl.w	r2, r2, r9
 8007106:	ea42 020c 	orr.w	r2, r2, ip
 800710a:	f84a 2b04 	str.w	r2, [sl], #4
 800710e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007112:	4298      	cmp	r0, r3
 8007114:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007118:	d8f2      	bhi.n	8007100 <__lshift+0x70>
 800711a:	1b03      	subs	r3, r0, r4
 800711c:	3b15      	subs	r3, #21
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	3304      	adds	r3, #4
 8007124:	f104 0215 	add.w	r2, r4, #21
 8007128:	4290      	cmp	r0, r2
 800712a:	bf38      	it	cc
 800712c:	2304      	movcc	r3, #4
 800712e:	f841 c003 	str.w	ip, [r1, r3]
 8007132:	f1bc 0f00 	cmp.w	ip, #0
 8007136:	d001      	beq.n	800713c <__lshift+0xac>
 8007138:	f108 0602 	add.w	r6, r8, #2
 800713c:	3e01      	subs	r6, #1
 800713e:	4638      	mov	r0, r7
 8007140:	612e      	str	r6, [r5, #16]
 8007142:	4621      	mov	r1, r4
 8007144:	f7ff fdd2 	bl	8006cec <_Bfree>
 8007148:	4628      	mov	r0, r5
 800714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007152:	3301      	adds	r3, #1
 8007154:	e7c1      	b.n	80070da <__lshift+0x4a>
 8007156:	3904      	subs	r1, #4
 8007158:	f853 2b04 	ldr.w	r2, [r3], #4
 800715c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007160:	4298      	cmp	r0, r3
 8007162:	d8f9      	bhi.n	8007158 <__lshift+0xc8>
 8007164:	e7ea      	b.n	800713c <__lshift+0xac>
 8007166:	bf00      	nop
 8007168:	0800be27 	.word	0x0800be27
 800716c:	0800be42 	.word	0x0800be42

08007170 <__mcmp>:
 8007170:	b530      	push	{r4, r5, lr}
 8007172:	6902      	ldr	r2, [r0, #16]
 8007174:	690c      	ldr	r4, [r1, #16]
 8007176:	1b12      	subs	r2, r2, r4
 8007178:	d10e      	bne.n	8007198 <__mcmp+0x28>
 800717a:	f100 0314 	add.w	r3, r0, #20
 800717e:	3114      	adds	r1, #20
 8007180:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007184:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007188:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800718c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007190:	42a5      	cmp	r5, r4
 8007192:	d003      	beq.n	800719c <__mcmp+0x2c>
 8007194:	d305      	bcc.n	80071a2 <__mcmp+0x32>
 8007196:	2201      	movs	r2, #1
 8007198:	4610      	mov	r0, r2
 800719a:	bd30      	pop	{r4, r5, pc}
 800719c:	4283      	cmp	r3, r0
 800719e:	d3f3      	bcc.n	8007188 <__mcmp+0x18>
 80071a0:	e7fa      	b.n	8007198 <__mcmp+0x28>
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295
 80071a6:	e7f7      	b.n	8007198 <__mcmp+0x28>

080071a8 <__mdiff>:
 80071a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4606      	mov	r6, r0
 80071b0:	4611      	mov	r1, r2
 80071b2:	4620      	mov	r0, r4
 80071b4:	4690      	mov	r8, r2
 80071b6:	f7ff ffdb 	bl	8007170 <__mcmp>
 80071ba:	1e05      	subs	r5, r0, #0
 80071bc:	d110      	bne.n	80071e0 <__mdiff+0x38>
 80071be:	4629      	mov	r1, r5
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7ff fd53 	bl	8006c6c <_Balloc>
 80071c6:	b930      	cbnz	r0, 80071d6 <__mdiff+0x2e>
 80071c8:	4b3a      	ldr	r3, [pc, #232]	; (80072b4 <__mdiff+0x10c>)
 80071ca:	4602      	mov	r2, r0
 80071cc:	f240 2132 	movw	r1, #562	; 0x232
 80071d0:	4839      	ldr	r0, [pc, #228]	; (80072b8 <__mdiff+0x110>)
 80071d2:	f7fe fe7d 	bl	8005ed0 <__assert_func>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	bfa4      	itt	ge
 80071e2:	4643      	movge	r3, r8
 80071e4:	46a0      	movge	r8, r4
 80071e6:	4630      	mov	r0, r6
 80071e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071ec:	bfa6      	itte	ge
 80071ee:	461c      	movge	r4, r3
 80071f0:	2500      	movge	r5, #0
 80071f2:	2501      	movlt	r5, #1
 80071f4:	f7ff fd3a 	bl	8006c6c <_Balloc>
 80071f8:	b920      	cbnz	r0, 8007204 <__mdiff+0x5c>
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <__mdiff+0x10c>)
 80071fc:	4602      	mov	r2, r0
 80071fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007202:	e7e5      	b.n	80071d0 <__mdiff+0x28>
 8007204:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007208:	6926      	ldr	r6, [r4, #16]
 800720a:	60c5      	str	r5, [r0, #12]
 800720c:	f104 0914 	add.w	r9, r4, #20
 8007210:	f108 0514 	add.w	r5, r8, #20
 8007214:	f100 0e14 	add.w	lr, r0, #20
 8007218:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800721c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007220:	f108 0210 	add.w	r2, r8, #16
 8007224:	46f2      	mov	sl, lr
 8007226:	2100      	movs	r1, #0
 8007228:	f859 3b04 	ldr.w	r3, [r9], #4
 800722c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007230:	fa1f f883 	uxth.w	r8, r3
 8007234:	fa11 f18b 	uxtah	r1, r1, fp
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	eba1 0808 	sub.w	r8, r1, r8
 800723e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007242:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007246:	fa1f f888 	uxth.w	r8, r8
 800724a:	1419      	asrs	r1, r3, #16
 800724c:	454e      	cmp	r6, r9
 800724e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007252:	f84a 3b04 	str.w	r3, [sl], #4
 8007256:	d8e7      	bhi.n	8007228 <__mdiff+0x80>
 8007258:	1b33      	subs	r3, r6, r4
 800725a:	3b15      	subs	r3, #21
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	3304      	adds	r3, #4
 8007262:	3415      	adds	r4, #21
 8007264:	42a6      	cmp	r6, r4
 8007266:	bf38      	it	cc
 8007268:	2304      	movcc	r3, #4
 800726a:	441d      	add	r5, r3
 800726c:	4473      	add	r3, lr
 800726e:	469e      	mov	lr, r3
 8007270:	462e      	mov	r6, r5
 8007272:	4566      	cmp	r6, ip
 8007274:	d30e      	bcc.n	8007294 <__mdiff+0xec>
 8007276:	f10c 0203 	add.w	r2, ip, #3
 800727a:	1b52      	subs	r2, r2, r5
 800727c:	f022 0203 	bic.w	r2, r2, #3
 8007280:	3d03      	subs	r5, #3
 8007282:	45ac      	cmp	ip, r5
 8007284:	bf38      	it	cc
 8007286:	2200      	movcc	r2, #0
 8007288:	441a      	add	r2, r3
 800728a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800728e:	b17b      	cbz	r3, 80072b0 <__mdiff+0x108>
 8007290:	6107      	str	r7, [r0, #16]
 8007292:	e7a3      	b.n	80071dc <__mdiff+0x34>
 8007294:	f856 8b04 	ldr.w	r8, [r6], #4
 8007298:	fa11 f288 	uxtah	r2, r1, r8
 800729c:	1414      	asrs	r4, r2, #16
 800729e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072a2:	b292      	uxth	r2, r2
 80072a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072a8:	f84e 2b04 	str.w	r2, [lr], #4
 80072ac:	1421      	asrs	r1, r4, #16
 80072ae:	e7e0      	b.n	8007272 <__mdiff+0xca>
 80072b0:	3f01      	subs	r7, #1
 80072b2:	e7ea      	b.n	800728a <__mdiff+0xe2>
 80072b4:	0800be27 	.word	0x0800be27
 80072b8:	0800be42 	.word	0x0800be42

080072bc <__d2b>:
 80072bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	4689      	mov	r9, r1
 80072c2:	2101      	movs	r1, #1
 80072c4:	ec57 6b10 	vmov	r6, r7, d0
 80072c8:	4690      	mov	r8, r2
 80072ca:	f7ff fccf 	bl	8006c6c <_Balloc>
 80072ce:	4604      	mov	r4, r0
 80072d0:	b930      	cbnz	r0, 80072e0 <__d2b+0x24>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b25      	ldr	r3, [pc, #148]	; (800736c <__d2b+0xb0>)
 80072d6:	4826      	ldr	r0, [pc, #152]	; (8007370 <__d2b+0xb4>)
 80072d8:	f240 310a 	movw	r1, #778	; 0x30a
 80072dc:	f7fe fdf8 	bl	8005ed0 <__assert_func>
 80072e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072e8:	bb35      	cbnz	r5, 8007338 <__d2b+0x7c>
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	d028      	beq.n	8007342 <__d2b+0x86>
 80072f0:	4668      	mov	r0, sp
 80072f2:	9600      	str	r6, [sp, #0]
 80072f4:	f7ff fd82 	bl	8006dfc <__lo0bits>
 80072f8:	9900      	ldr	r1, [sp, #0]
 80072fa:	b300      	cbz	r0, 800733e <__d2b+0x82>
 80072fc:	9a01      	ldr	r2, [sp, #4]
 80072fe:	f1c0 0320 	rsb	r3, r0, #32
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	430b      	orrs	r3, r1
 8007308:	40c2      	lsrs	r2, r0
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	9201      	str	r2, [sp, #4]
 800730e:	9b01      	ldr	r3, [sp, #4]
 8007310:	61a3      	str	r3, [r4, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf14      	ite	ne
 8007316:	2202      	movne	r2, #2
 8007318:	2201      	moveq	r2, #1
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	b1d5      	cbz	r5, 8007354 <__d2b+0x98>
 800731e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007322:	4405      	add	r5, r0
 8007324:	f8c9 5000 	str.w	r5, [r9]
 8007328:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800732c:	f8c8 0000 	str.w	r0, [r8]
 8007330:	4620      	mov	r0, r4
 8007332:	b003      	add	sp, #12
 8007334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800733c:	e7d5      	b.n	80072ea <__d2b+0x2e>
 800733e:	6161      	str	r1, [r4, #20]
 8007340:	e7e5      	b.n	800730e <__d2b+0x52>
 8007342:	a801      	add	r0, sp, #4
 8007344:	f7ff fd5a 	bl	8006dfc <__lo0bits>
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	2201      	movs	r2, #1
 800734e:	6122      	str	r2, [r4, #16]
 8007350:	3020      	adds	r0, #32
 8007352:	e7e3      	b.n	800731c <__d2b+0x60>
 8007354:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007358:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800735c:	f8c9 0000 	str.w	r0, [r9]
 8007360:	6918      	ldr	r0, [r3, #16]
 8007362:	f7ff fd2b 	bl	8006dbc <__hi0bits>
 8007366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800736a:	e7df      	b.n	800732c <__d2b+0x70>
 800736c:	0800be27 	.word	0x0800be27
 8007370:	0800be42 	.word	0x0800be42

08007374 <_calloc_r>:
 8007374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007376:	fba1 2402 	umull	r2, r4, r1, r2
 800737a:	b94c      	cbnz	r4, 8007390 <_calloc_r+0x1c>
 800737c:	4611      	mov	r1, r2
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	f7fe f8b8 	bl	80054f4 <_malloc_r>
 8007384:	9a01      	ldr	r2, [sp, #4]
 8007386:	4605      	mov	r5, r0
 8007388:	b930      	cbnz	r0, 8007398 <_calloc_r+0x24>
 800738a:	4628      	mov	r0, r5
 800738c:	b003      	add	sp, #12
 800738e:	bd30      	pop	{r4, r5, pc}
 8007390:	220c      	movs	r2, #12
 8007392:	6002      	str	r2, [r0, #0]
 8007394:	2500      	movs	r5, #0
 8007396:	e7f8      	b.n	800738a <_calloc_r+0x16>
 8007398:	4621      	mov	r1, r4
 800739a:	f7fe f837 	bl	800540c <memset>
 800739e:	e7f4      	b.n	800738a <_calloc_r+0x16>

080073a0 <__sfputc_r>:
 80073a0:	6893      	ldr	r3, [r2, #8]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	b410      	push	{r4}
 80073a8:	6093      	str	r3, [r2, #8]
 80073aa:	da08      	bge.n	80073be <__sfputc_r+0x1e>
 80073ac:	6994      	ldr	r4, [r2, #24]
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	db01      	blt.n	80073b6 <__sfputc_r+0x16>
 80073b2:	290a      	cmp	r1, #10
 80073b4:	d103      	bne.n	80073be <__sfputc_r+0x1e>
 80073b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ba:	f000 b955 	b.w	8007668 <__swbuf_r>
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	1c58      	adds	r0, r3, #1
 80073c2:	6010      	str	r0, [r2, #0]
 80073c4:	7019      	strb	r1, [r3, #0]
 80073c6:	4608      	mov	r0, r1
 80073c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <__sfputs_r>:
 80073ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d0:	4606      	mov	r6, r0
 80073d2:	460f      	mov	r7, r1
 80073d4:	4614      	mov	r4, r2
 80073d6:	18d5      	adds	r5, r2, r3
 80073d8:	42ac      	cmp	r4, r5
 80073da:	d101      	bne.n	80073e0 <__sfputs_r+0x12>
 80073dc:	2000      	movs	r0, #0
 80073de:	e007      	b.n	80073f0 <__sfputs_r+0x22>
 80073e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e4:	463a      	mov	r2, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ffda 	bl	80073a0 <__sfputc_r>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d1f3      	bne.n	80073d8 <__sfputs_r+0xa>
 80073f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f4 <_vfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	b09d      	sub	sp, #116	; 0x74
 80073fc:	4614      	mov	r4, r2
 80073fe:	4698      	mov	r8, r3
 8007400:	4606      	mov	r6, r0
 8007402:	b118      	cbz	r0, 800740c <_vfiprintf_r+0x18>
 8007404:	6983      	ldr	r3, [r0, #24]
 8007406:	b90b      	cbnz	r3, 800740c <_vfiprintf_r+0x18>
 8007408:	f000 fb1e 	bl	8007a48 <__sinit>
 800740c:	4b89      	ldr	r3, [pc, #548]	; (8007634 <_vfiprintf_r+0x240>)
 800740e:	429d      	cmp	r5, r3
 8007410:	d11b      	bne.n	800744a <_vfiprintf_r+0x56>
 8007412:	6875      	ldr	r5, [r6, #4]
 8007414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d405      	bmi.n	8007426 <_vfiprintf_r+0x32>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	059a      	lsls	r2, r3, #22
 800741e:	d402      	bmi.n	8007426 <_vfiprintf_r+0x32>
 8007420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007422:	f000 fbaf 	bl	8007b84 <__retarget_lock_acquire_recursive>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	071b      	lsls	r3, r3, #28
 800742a:	d501      	bpl.n	8007430 <_vfiprintf_r+0x3c>
 800742c:	692b      	ldr	r3, [r5, #16]
 800742e:	b9eb      	cbnz	r3, 800746c <_vfiprintf_r+0x78>
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f978 	bl	8007728 <__swsetup_r>
 8007438:	b1c0      	cbz	r0, 800746c <_vfiprintf_r+0x78>
 800743a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743c:	07dc      	lsls	r4, r3, #31
 800743e:	d50e      	bpl.n	800745e <_vfiprintf_r+0x6a>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b01d      	add	sp, #116	; 0x74
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <_vfiprintf_r+0x244>)
 800744c:	429d      	cmp	r5, r3
 800744e:	d101      	bne.n	8007454 <_vfiprintf_r+0x60>
 8007450:	68b5      	ldr	r5, [r6, #8]
 8007452:	e7df      	b.n	8007414 <_vfiprintf_r+0x20>
 8007454:	4b79      	ldr	r3, [pc, #484]	; (800763c <_vfiprintf_r+0x248>)
 8007456:	429d      	cmp	r5, r3
 8007458:	bf08      	it	eq
 800745a:	68f5      	ldreq	r5, [r6, #12]
 800745c:	e7da      	b.n	8007414 <_vfiprintf_r+0x20>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	0598      	lsls	r0, r3, #22
 8007462:	d4ed      	bmi.n	8007440 <_vfiprintf_r+0x4c>
 8007464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007466:	f000 fb8e 	bl	8007b86 <__retarget_lock_release_recursive>
 800746a:	e7e9      	b.n	8007440 <_vfiprintf_r+0x4c>
 800746c:	2300      	movs	r3, #0
 800746e:	9309      	str	r3, [sp, #36]	; 0x24
 8007470:	2320      	movs	r3, #32
 8007472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007476:	f8cd 800c 	str.w	r8, [sp, #12]
 800747a:	2330      	movs	r3, #48	; 0x30
 800747c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007640 <_vfiprintf_r+0x24c>
 8007480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007484:	f04f 0901 	mov.w	r9, #1
 8007488:	4623      	mov	r3, r4
 800748a:	469a      	mov	sl, r3
 800748c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007490:	b10a      	cbz	r2, 8007496 <_vfiprintf_r+0xa2>
 8007492:	2a25      	cmp	r2, #37	; 0x25
 8007494:	d1f9      	bne.n	800748a <_vfiprintf_r+0x96>
 8007496:	ebba 0b04 	subs.w	fp, sl, r4
 800749a:	d00b      	beq.n	80074b4 <_vfiprintf_r+0xc0>
 800749c:	465b      	mov	r3, fp
 800749e:	4622      	mov	r2, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff ff93 	bl	80073ce <__sfputs_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	f000 80aa 	beq.w	8007602 <_vfiprintf_r+0x20e>
 80074ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b0:	445a      	add	r2, fp
 80074b2:	9209      	str	r2, [sp, #36]	; 0x24
 80074b4:	f89a 3000 	ldrb.w	r3, [sl]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80a2 	beq.w	8007602 <_vfiprintf_r+0x20e>
 80074be:	2300      	movs	r3, #0
 80074c0:	f04f 32ff 	mov.w	r2, #4294967295
 80074c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c8:	f10a 0a01 	add.w	sl, sl, #1
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d4:	931a      	str	r3, [sp, #104]	; 0x68
 80074d6:	4654      	mov	r4, sl
 80074d8:	2205      	movs	r2, #5
 80074da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074de:	4858      	ldr	r0, [pc, #352]	; (8007640 <_vfiprintf_r+0x24c>)
 80074e0:	f7f8 fe86 	bl	80001f0 <memchr>
 80074e4:	9a04      	ldr	r2, [sp, #16]
 80074e6:	b9d8      	cbnz	r0, 8007520 <_vfiprintf_r+0x12c>
 80074e8:	06d1      	lsls	r1, r2, #27
 80074ea:	bf44      	itt	mi
 80074ec:	2320      	movmi	r3, #32
 80074ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f2:	0713      	lsls	r3, r2, #28
 80074f4:	bf44      	itt	mi
 80074f6:	232b      	movmi	r3, #43	; 0x2b
 80074f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007500:	2b2a      	cmp	r3, #42	; 0x2a
 8007502:	d015      	beq.n	8007530 <_vfiprintf_r+0x13c>
 8007504:	9a07      	ldr	r2, [sp, #28]
 8007506:	4654      	mov	r4, sl
 8007508:	2000      	movs	r0, #0
 800750a:	f04f 0c0a 	mov.w	ip, #10
 800750e:	4621      	mov	r1, r4
 8007510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007514:	3b30      	subs	r3, #48	; 0x30
 8007516:	2b09      	cmp	r3, #9
 8007518:	d94e      	bls.n	80075b8 <_vfiprintf_r+0x1c4>
 800751a:	b1b0      	cbz	r0, 800754a <_vfiprintf_r+0x156>
 800751c:	9207      	str	r2, [sp, #28]
 800751e:	e014      	b.n	800754a <_vfiprintf_r+0x156>
 8007520:	eba0 0308 	sub.w	r3, r0, r8
 8007524:	fa09 f303 	lsl.w	r3, r9, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	46a2      	mov	sl, r4
 800752e:	e7d2      	b.n	80074d6 <_vfiprintf_r+0xe2>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	1d19      	adds	r1, r3, #4
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	9103      	str	r1, [sp, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfbb      	ittet	lt
 800753c:	425b      	neglt	r3, r3
 800753e:	f042 0202 	orrlt.w	r2, r2, #2
 8007542:	9307      	strge	r3, [sp, #28]
 8007544:	9307      	strlt	r3, [sp, #28]
 8007546:	bfb8      	it	lt
 8007548:	9204      	strlt	r2, [sp, #16]
 800754a:	7823      	ldrb	r3, [r4, #0]
 800754c:	2b2e      	cmp	r3, #46	; 0x2e
 800754e:	d10c      	bne.n	800756a <_vfiprintf_r+0x176>
 8007550:	7863      	ldrb	r3, [r4, #1]
 8007552:	2b2a      	cmp	r3, #42	; 0x2a
 8007554:	d135      	bne.n	80075c2 <_vfiprintf_r+0x1ce>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9203      	str	r2, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfb8      	it	lt
 8007562:	f04f 33ff 	movlt.w	r3, #4294967295
 8007566:	3402      	adds	r4, #2
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007650 <_vfiprintf_r+0x25c>
 800756e:	7821      	ldrb	r1, [r4, #0]
 8007570:	2203      	movs	r2, #3
 8007572:	4650      	mov	r0, sl
 8007574:	f7f8 fe3c 	bl	80001f0 <memchr>
 8007578:	b140      	cbz	r0, 800758c <_vfiprintf_r+0x198>
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	eba0 000a 	sub.w	r0, r0, sl
 8007580:	fa03 f000 	lsl.w	r0, r3, r0
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	4303      	orrs	r3, r0
 8007588:	3401      	adds	r4, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007590:	482c      	ldr	r0, [pc, #176]	; (8007644 <_vfiprintf_r+0x250>)
 8007592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007596:	2206      	movs	r2, #6
 8007598:	f7f8 fe2a 	bl	80001f0 <memchr>
 800759c:	2800      	cmp	r0, #0
 800759e:	d03f      	beq.n	8007620 <_vfiprintf_r+0x22c>
 80075a0:	4b29      	ldr	r3, [pc, #164]	; (8007648 <_vfiprintf_r+0x254>)
 80075a2:	bb1b      	cbnz	r3, 80075ec <_vfiprintf_r+0x1f8>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	3307      	adds	r3, #7
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	3308      	adds	r3, #8
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b2:	443b      	add	r3, r7
 80075b4:	9309      	str	r3, [sp, #36]	; 0x24
 80075b6:	e767      	b.n	8007488 <_vfiprintf_r+0x94>
 80075b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075bc:	460c      	mov	r4, r1
 80075be:	2001      	movs	r0, #1
 80075c0:	e7a5      	b.n	800750e <_vfiprintf_r+0x11a>
 80075c2:	2300      	movs	r3, #0
 80075c4:	3401      	adds	r4, #1
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	4619      	mov	r1, r3
 80075ca:	f04f 0c0a 	mov.w	ip, #10
 80075ce:	4620      	mov	r0, r4
 80075d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d4:	3a30      	subs	r2, #48	; 0x30
 80075d6:	2a09      	cmp	r2, #9
 80075d8:	d903      	bls.n	80075e2 <_vfiprintf_r+0x1ee>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0c5      	beq.n	800756a <_vfiprintf_r+0x176>
 80075de:	9105      	str	r1, [sp, #20]
 80075e0:	e7c3      	b.n	800756a <_vfiprintf_r+0x176>
 80075e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e6:	4604      	mov	r4, r0
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f0      	b.n	80075ce <_vfiprintf_r+0x1da>
 80075ec:	ab03      	add	r3, sp, #12
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	462a      	mov	r2, r5
 80075f2:	4b16      	ldr	r3, [pc, #88]	; (800764c <_vfiprintf_r+0x258>)
 80075f4:	a904      	add	r1, sp, #16
 80075f6:	4630      	mov	r0, r6
 80075f8:	f7fe f890 	bl	800571c <_printf_float>
 80075fc:	4607      	mov	r7, r0
 80075fe:	1c78      	adds	r0, r7, #1
 8007600:	d1d6      	bne.n	80075b0 <_vfiprintf_r+0x1bc>
 8007602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007604:	07d9      	lsls	r1, r3, #31
 8007606:	d405      	bmi.n	8007614 <_vfiprintf_r+0x220>
 8007608:	89ab      	ldrh	r3, [r5, #12]
 800760a:	059a      	lsls	r2, r3, #22
 800760c:	d402      	bmi.n	8007614 <_vfiprintf_r+0x220>
 800760e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007610:	f000 fab9 	bl	8007b86 <__retarget_lock_release_recursive>
 8007614:	89ab      	ldrh	r3, [r5, #12]
 8007616:	065b      	lsls	r3, r3, #25
 8007618:	f53f af12 	bmi.w	8007440 <_vfiprintf_r+0x4c>
 800761c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800761e:	e711      	b.n	8007444 <_vfiprintf_r+0x50>
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	462a      	mov	r2, r5
 8007626:	4b09      	ldr	r3, [pc, #36]	; (800764c <_vfiprintf_r+0x258>)
 8007628:	a904      	add	r1, sp, #16
 800762a:	4630      	mov	r0, r6
 800762c:	f7fe fb1a 	bl	8005c64 <_printf_i>
 8007630:	e7e4      	b.n	80075fc <_vfiprintf_r+0x208>
 8007632:	bf00      	nop
 8007634:	0800bfd0 	.word	0x0800bfd0
 8007638:	0800bff0 	.word	0x0800bff0
 800763c:	0800bfb0 	.word	0x0800bfb0
 8007640:	0800bf9c 	.word	0x0800bf9c
 8007644:	0800bfa6 	.word	0x0800bfa6
 8007648:	0800571d 	.word	0x0800571d
 800764c:	080073cf 	.word	0x080073cf
 8007650:	0800bfa2 	.word	0x0800bfa2
 8007654:	00000000 	.word	0x00000000

08007658 <nan>:
 8007658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007660 <nan+0x8>
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	00000000 	.word	0x00000000
 8007664:	7ff80000 	.word	0x7ff80000

08007668 <__swbuf_r>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	460e      	mov	r6, r1
 800766c:	4614      	mov	r4, r2
 800766e:	4605      	mov	r5, r0
 8007670:	b118      	cbz	r0, 800767a <__swbuf_r+0x12>
 8007672:	6983      	ldr	r3, [r0, #24]
 8007674:	b90b      	cbnz	r3, 800767a <__swbuf_r+0x12>
 8007676:	f000 f9e7 	bl	8007a48 <__sinit>
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <__swbuf_r+0x98>)
 800767c:	429c      	cmp	r4, r3
 800767e:	d12b      	bne.n	80076d8 <__swbuf_r+0x70>
 8007680:	686c      	ldr	r4, [r5, #4]
 8007682:	69a3      	ldr	r3, [r4, #24]
 8007684:	60a3      	str	r3, [r4, #8]
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	071a      	lsls	r2, r3, #28
 800768a:	d52f      	bpl.n	80076ec <__swbuf_r+0x84>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	b36b      	cbz	r3, 80076ec <__swbuf_r+0x84>
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	1ac0      	subs	r0, r0, r3
 8007696:	6963      	ldr	r3, [r4, #20]
 8007698:	b2f6      	uxtb	r6, r6
 800769a:	4283      	cmp	r3, r0
 800769c:	4637      	mov	r7, r6
 800769e:	dc04      	bgt.n	80076aa <__swbuf_r+0x42>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 f93c 	bl	8007920 <_fflush_r>
 80076a8:	bb30      	cbnz	r0, 80076f8 <__swbuf_r+0x90>
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	60a3      	str	r3, [r4, #8]
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	701e      	strb	r6, [r3, #0]
 80076b8:	6963      	ldr	r3, [r4, #20]
 80076ba:	3001      	adds	r0, #1
 80076bc:	4283      	cmp	r3, r0
 80076be:	d004      	beq.n	80076ca <__swbuf_r+0x62>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	07db      	lsls	r3, r3, #31
 80076c4:	d506      	bpl.n	80076d4 <__swbuf_r+0x6c>
 80076c6:	2e0a      	cmp	r6, #10
 80076c8:	d104      	bne.n	80076d4 <__swbuf_r+0x6c>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f927 	bl	8007920 <_fflush_r>
 80076d2:	b988      	cbnz	r0, 80076f8 <__swbuf_r+0x90>
 80076d4:	4638      	mov	r0, r7
 80076d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <__swbuf_r+0x9c>)
 80076da:	429c      	cmp	r4, r3
 80076dc:	d101      	bne.n	80076e2 <__swbuf_r+0x7a>
 80076de:	68ac      	ldr	r4, [r5, #8]
 80076e0:	e7cf      	b.n	8007682 <__swbuf_r+0x1a>
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <__swbuf_r+0xa0>)
 80076e4:	429c      	cmp	r4, r3
 80076e6:	bf08      	it	eq
 80076e8:	68ec      	ldreq	r4, [r5, #12]
 80076ea:	e7ca      	b.n	8007682 <__swbuf_r+0x1a>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 f81a 	bl	8007728 <__swsetup_r>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d0cb      	beq.n	8007690 <__swbuf_r+0x28>
 80076f8:	f04f 37ff 	mov.w	r7, #4294967295
 80076fc:	e7ea      	b.n	80076d4 <__swbuf_r+0x6c>
 80076fe:	bf00      	nop
 8007700:	0800bfd0 	.word	0x0800bfd0
 8007704:	0800bff0 	.word	0x0800bff0
 8007708:	0800bfb0 	.word	0x0800bfb0

0800770c <__ascii_wctomb>:
 800770c:	b149      	cbz	r1, 8007722 <__ascii_wctomb+0x16>
 800770e:	2aff      	cmp	r2, #255	; 0xff
 8007710:	bf85      	ittet	hi
 8007712:	238a      	movhi	r3, #138	; 0x8a
 8007714:	6003      	strhi	r3, [r0, #0]
 8007716:	700a      	strbls	r2, [r1, #0]
 8007718:	f04f 30ff 	movhi.w	r0, #4294967295
 800771c:	bf98      	it	ls
 800771e:	2001      	movls	r0, #1
 8007720:	4770      	bx	lr
 8007722:	4608      	mov	r0, r1
 8007724:	4770      	bx	lr
	...

08007728 <__swsetup_r>:
 8007728:	4b32      	ldr	r3, [pc, #200]	; (80077f4 <__swsetup_r+0xcc>)
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	681d      	ldr	r5, [r3, #0]
 800772e:	4606      	mov	r6, r0
 8007730:	460c      	mov	r4, r1
 8007732:	b125      	cbz	r5, 800773e <__swsetup_r+0x16>
 8007734:	69ab      	ldr	r3, [r5, #24]
 8007736:	b913      	cbnz	r3, 800773e <__swsetup_r+0x16>
 8007738:	4628      	mov	r0, r5
 800773a:	f000 f985 	bl	8007a48 <__sinit>
 800773e:	4b2e      	ldr	r3, [pc, #184]	; (80077f8 <__swsetup_r+0xd0>)
 8007740:	429c      	cmp	r4, r3
 8007742:	d10f      	bne.n	8007764 <__swsetup_r+0x3c>
 8007744:	686c      	ldr	r4, [r5, #4]
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800774c:	0719      	lsls	r1, r3, #28
 800774e:	d42c      	bmi.n	80077aa <__swsetup_r+0x82>
 8007750:	06dd      	lsls	r5, r3, #27
 8007752:	d411      	bmi.n	8007778 <__swsetup_r+0x50>
 8007754:	2309      	movs	r3, #9
 8007756:	6033      	str	r3, [r6, #0]
 8007758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	f04f 30ff 	mov.w	r0, #4294967295
 8007762:	e03e      	b.n	80077e2 <__swsetup_r+0xba>
 8007764:	4b25      	ldr	r3, [pc, #148]	; (80077fc <__swsetup_r+0xd4>)
 8007766:	429c      	cmp	r4, r3
 8007768:	d101      	bne.n	800776e <__swsetup_r+0x46>
 800776a:	68ac      	ldr	r4, [r5, #8]
 800776c:	e7eb      	b.n	8007746 <__swsetup_r+0x1e>
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <__swsetup_r+0xd8>)
 8007770:	429c      	cmp	r4, r3
 8007772:	bf08      	it	eq
 8007774:	68ec      	ldreq	r4, [r5, #12]
 8007776:	e7e6      	b.n	8007746 <__swsetup_r+0x1e>
 8007778:	0758      	lsls	r0, r3, #29
 800777a:	d512      	bpl.n	80077a2 <__swsetup_r+0x7a>
 800777c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777e:	b141      	cbz	r1, 8007792 <__swsetup_r+0x6a>
 8007780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007784:	4299      	cmp	r1, r3
 8007786:	d002      	beq.n	800778e <__swsetup_r+0x66>
 8007788:	4630      	mov	r0, r6
 800778a:	f7fd fe47 	bl	800541c <_free_r>
 800778e:	2300      	movs	r3, #0
 8007790:	6363      	str	r3, [r4, #52]	; 0x34
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	2300      	movs	r3, #0
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f043 0308 	orr.w	r3, r3, #8
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	b94b      	cbnz	r3, 80077c2 <__swsetup_r+0x9a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b8:	d003      	beq.n	80077c2 <__swsetup_r+0x9a>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 fa09 	bl	8007bd4 <__smakebuf_r>
 80077c2:	89a0      	ldrh	r0, [r4, #12]
 80077c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077c8:	f010 0301 	ands.w	r3, r0, #1
 80077cc:	d00a      	beq.n	80077e4 <__swsetup_r+0xbc>
 80077ce:	2300      	movs	r3, #0
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	6963      	ldr	r3, [r4, #20]
 80077d4:	425b      	negs	r3, r3
 80077d6:	61a3      	str	r3, [r4, #24]
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b943      	cbnz	r3, 80077ee <__swsetup_r+0xc6>
 80077dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077e0:	d1ba      	bne.n	8007758 <__swsetup_r+0x30>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	0781      	lsls	r1, r0, #30
 80077e6:	bf58      	it	pl
 80077e8:	6963      	ldrpl	r3, [r4, #20]
 80077ea:	60a3      	str	r3, [r4, #8]
 80077ec:	e7f4      	b.n	80077d8 <__swsetup_r+0xb0>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e7f7      	b.n	80077e2 <__swsetup_r+0xba>
 80077f2:	bf00      	nop
 80077f4:	2000000c 	.word	0x2000000c
 80077f8:	0800bfd0 	.word	0x0800bfd0
 80077fc:	0800bff0 	.word	0x0800bff0
 8007800:	0800bfb0 	.word	0x0800bfb0

08007804 <abort>:
 8007804:	b508      	push	{r3, lr}
 8007806:	2006      	movs	r0, #6
 8007808:	f000 fa4c 	bl	8007ca4 <raise>
 800780c:	2001      	movs	r0, #1
 800780e:	f7fb fb61 	bl	8002ed4 <_exit>
	...

08007814 <__sflush_r>:
 8007814:	898a      	ldrh	r2, [r1, #12]
 8007816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	0710      	lsls	r0, r2, #28
 800781e:	460c      	mov	r4, r1
 8007820:	d458      	bmi.n	80078d4 <__sflush_r+0xc0>
 8007822:	684b      	ldr	r3, [r1, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	dc05      	bgt.n	8007834 <__sflush_r+0x20>
 8007828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	dc02      	bgt.n	8007834 <__sflush_r+0x20>
 800782e:	2000      	movs	r0, #0
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007836:	2e00      	cmp	r6, #0
 8007838:	d0f9      	beq.n	800782e <__sflush_r+0x1a>
 800783a:	2300      	movs	r3, #0
 800783c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007840:	682f      	ldr	r7, [r5, #0]
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	d032      	beq.n	80078ac <__sflush_r+0x98>
 8007846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	075a      	lsls	r2, r3, #29
 800784c:	d505      	bpl.n	800785a <__sflush_r+0x46>
 800784e:	6863      	ldr	r3, [r4, #4]
 8007850:	1ac0      	subs	r0, r0, r3
 8007852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007854:	b10b      	cbz	r3, 800785a <__sflush_r+0x46>
 8007856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007858:	1ac0      	subs	r0, r0, r3
 800785a:	2300      	movs	r3, #0
 800785c:	4602      	mov	r2, r0
 800785e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007860:	6a21      	ldr	r1, [r4, #32]
 8007862:	4628      	mov	r0, r5
 8007864:	47b0      	blx	r6
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	d106      	bne.n	800787a <__sflush_r+0x66>
 800786c:	6829      	ldr	r1, [r5, #0]
 800786e:	291d      	cmp	r1, #29
 8007870:	d82c      	bhi.n	80078cc <__sflush_r+0xb8>
 8007872:	4a2a      	ldr	r2, [pc, #168]	; (800791c <__sflush_r+0x108>)
 8007874:	40ca      	lsrs	r2, r1
 8007876:	07d6      	lsls	r6, r2, #31
 8007878:	d528      	bpl.n	80078cc <__sflush_r+0xb8>
 800787a:	2200      	movs	r2, #0
 800787c:	6062      	str	r2, [r4, #4]
 800787e:	04d9      	lsls	r1, r3, #19
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	6022      	str	r2, [r4, #0]
 8007884:	d504      	bpl.n	8007890 <__sflush_r+0x7c>
 8007886:	1c42      	adds	r2, r0, #1
 8007888:	d101      	bne.n	800788e <__sflush_r+0x7a>
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	b903      	cbnz	r3, 8007890 <__sflush_r+0x7c>
 800788e:	6560      	str	r0, [r4, #84]	; 0x54
 8007890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007892:	602f      	str	r7, [r5, #0]
 8007894:	2900      	cmp	r1, #0
 8007896:	d0ca      	beq.n	800782e <__sflush_r+0x1a>
 8007898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <__sflush_r+0x92>
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7fd fdbb 	bl	800541c <_free_r>
 80078a6:	2000      	movs	r0, #0
 80078a8:	6360      	str	r0, [r4, #52]	; 0x34
 80078aa:	e7c1      	b.n	8007830 <__sflush_r+0x1c>
 80078ac:	6a21      	ldr	r1, [r4, #32]
 80078ae:	2301      	movs	r3, #1
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b0      	blx	r6
 80078b4:	1c41      	adds	r1, r0, #1
 80078b6:	d1c7      	bne.n	8007848 <__sflush_r+0x34>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c4      	beq.n	8007848 <__sflush_r+0x34>
 80078be:	2b1d      	cmp	r3, #29
 80078c0:	d001      	beq.n	80078c6 <__sflush_r+0xb2>
 80078c2:	2b16      	cmp	r3, #22
 80078c4:	d101      	bne.n	80078ca <__sflush_r+0xb6>
 80078c6:	602f      	str	r7, [r5, #0]
 80078c8:	e7b1      	b.n	800782e <__sflush_r+0x1a>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	e7ad      	b.n	8007830 <__sflush_r+0x1c>
 80078d4:	690f      	ldr	r7, [r1, #16]
 80078d6:	2f00      	cmp	r7, #0
 80078d8:	d0a9      	beq.n	800782e <__sflush_r+0x1a>
 80078da:	0793      	lsls	r3, r2, #30
 80078dc:	680e      	ldr	r6, [r1, #0]
 80078de:	bf08      	it	eq
 80078e0:	694b      	ldreq	r3, [r1, #20]
 80078e2:	600f      	str	r7, [r1, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2300      	movne	r3, #0
 80078e8:	eba6 0807 	sub.w	r8, r6, r7
 80078ec:	608b      	str	r3, [r1, #8]
 80078ee:	f1b8 0f00 	cmp.w	r8, #0
 80078f2:	dd9c      	ble.n	800782e <__sflush_r+0x1a>
 80078f4:	6a21      	ldr	r1, [r4, #32]
 80078f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078f8:	4643      	mov	r3, r8
 80078fa:	463a      	mov	r2, r7
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b0      	blx	r6
 8007900:	2800      	cmp	r0, #0
 8007902:	dc06      	bgt.n	8007912 <__sflush_r+0xfe>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e78e      	b.n	8007830 <__sflush_r+0x1c>
 8007912:	4407      	add	r7, r0
 8007914:	eba8 0800 	sub.w	r8, r8, r0
 8007918:	e7e9      	b.n	80078ee <__sflush_r+0xda>
 800791a:	bf00      	nop
 800791c:	20400001 	.word	0x20400001

08007920 <_fflush_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	690b      	ldr	r3, [r1, #16]
 8007924:	4605      	mov	r5, r0
 8007926:	460c      	mov	r4, r1
 8007928:	b913      	cbnz	r3, 8007930 <_fflush_r+0x10>
 800792a:	2500      	movs	r5, #0
 800792c:	4628      	mov	r0, r5
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	b118      	cbz	r0, 800793a <_fflush_r+0x1a>
 8007932:	6983      	ldr	r3, [r0, #24]
 8007934:	b90b      	cbnz	r3, 800793a <_fflush_r+0x1a>
 8007936:	f000 f887 	bl	8007a48 <__sinit>
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <_fflush_r+0x6c>)
 800793c:	429c      	cmp	r4, r3
 800793e:	d11b      	bne.n	8007978 <_fflush_r+0x58>
 8007940:	686c      	ldr	r4, [r5, #4]
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0ef      	beq.n	800792a <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x3a>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x3a>
 8007954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007956:	f000 f915 	bl	8007b84 <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff59 	bl	8007814 <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007964:	07da      	lsls	r2, r3, #31
 8007966:	4605      	mov	r5, r0
 8007968:	d4e0      	bmi.n	800792c <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4dd      	bmi.n	800792c <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007972:	f000 f908 	bl	8007b86 <__retarget_lock_release_recursive>
 8007976:	e7d9      	b.n	800792c <_fflush_r+0xc>
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <_fflush_r+0x70>)
 800797a:	429c      	cmp	r4, r3
 800797c:	d101      	bne.n	8007982 <_fflush_r+0x62>
 800797e:	68ac      	ldr	r4, [r5, #8]
 8007980:	e7df      	b.n	8007942 <_fflush_r+0x22>
 8007982:	4b04      	ldr	r3, [pc, #16]	; (8007994 <_fflush_r+0x74>)
 8007984:	429c      	cmp	r4, r3
 8007986:	bf08      	it	eq
 8007988:	68ec      	ldreq	r4, [r5, #12]
 800798a:	e7da      	b.n	8007942 <_fflush_r+0x22>
 800798c:	0800bfd0 	.word	0x0800bfd0
 8007990:	0800bff0 	.word	0x0800bff0
 8007994:	0800bfb0 	.word	0x0800bfb0

08007998 <std>:
 8007998:	2300      	movs	r3, #0
 800799a:	b510      	push	{r4, lr}
 800799c:	4604      	mov	r4, r0
 800799e:	e9c0 3300 	strd	r3, r3, [r0]
 80079a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079a6:	6083      	str	r3, [r0, #8]
 80079a8:	8181      	strh	r1, [r0, #12]
 80079aa:	6643      	str	r3, [r0, #100]	; 0x64
 80079ac:	81c2      	strh	r2, [r0, #14]
 80079ae:	6183      	str	r3, [r0, #24]
 80079b0:	4619      	mov	r1, r3
 80079b2:	2208      	movs	r2, #8
 80079b4:	305c      	adds	r0, #92	; 0x5c
 80079b6:	f7fd fd29 	bl	800540c <memset>
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <std+0x38>)
 80079bc:	6263      	str	r3, [r4, #36]	; 0x24
 80079be:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <std+0x3c>)
 80079c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <std+0x40>)
 80079c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <std+0x44>)
 80079c8:	6224      	str	r4, [r4, #32]
 80079ca:	6323      	str	r3, [r4, #48]	; 0x30
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	08007cdd 	.word	0x08007cdd
 80079d4:	08007cff 	.word	0x08007cff
 80079d8:	08007d37 	.word	0x08007d37
 80079dc:	08007d5b 	.word	0x08007d5b

080079e0 <_cleanup_r>:
 80079e0:	4901      	ldr	r1, [pc, #4]	; (80079e8 <_cleanup_r+0x8>)
 80079e2:	f000 b8af 	b.w	8007b44 <_fwalk_reent>
 80079e6:	bf00      	nop
 80079e8:	08007921 	.word	0x08007921

080079ec <__sfmoreglue>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	2268      	movs	r2, #104	; 0x68
 80079f0:	1e4d      	subs	r5, r1, #1
 80079f2:	4355      	muls	r5, r2
 80079f4:	460e      	mov	r6, r1
 80079f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079fa:	f7fd fd7b 	bl	80054f4 <_malloc_r>
 80079fe:	4604      	mov	r4, r0
 8007a00:	b140      	cbz	r0, 8007a14 <__sfmoreglue+0x28>
 8007a02:	2100      	movs	r1, #0
 8007a04:	e9c0 1600 	strd	r1, r6, [r0]
 8007a08:	300c      	adds	r0, #12
 8007a0a:	60a0      	str	r0, [r4, #8]
 8007a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a10:	f7fd fcfc 	bl	800540c <memset>
 8007a14:	4620      	mov	r0, r4
 8007a16:	bd70      	pop	{r4, r5, r6, pc}

08007a18 <__sfp_lock_acquire>:
 8007a18:	4801      	ldr	r0, [pc, #4]	; (8007a20 <__sfp_lock_acquire+0x8>)
 8007a1a:	f000 b8b3 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	200002b9 	.word	0x200002b9

08007a24 <__sfp_lock_release>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_release+0x8>)
 8007a26:	f000 b8ae 	b.w	8007b86 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	200002b9 	.word	0x200002b9

08007a30 <__sinit_lock_acquire>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sinit_lock_acquire+0x8>)
 8007a32:	f000 b8a7 	b.w	8007b84 <__retarget_lock_acquire_recursive>
 8007a36:	bf00      	nop
 8007a38:	200002ba 	.word	0x200002ba

08007a3c <__sinit_lock_release>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sinit_lock_release+0x8>)
 8007a3e:	f000 b8a2 	b.w	8007b86 <__retarget_lock_release_recursive>
 8007a42:	bf00      	nop
 8007a44:	200002ba 	.word	0x200002ba

08007a48 <__sinit>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	f7ff fff0 	bl	8007a30 <__sinit_lock_acquire>
 8007a50:	69a3      	ldr	r3, [r4, #24]
 8007a52:	b11b      	cbz	r3, 8007a5c <__sinit+0x14>
 8007a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a58:	f7ff bff0 	b.w	8007a3c <__sinit_lock_release>
 8007a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a60:	6523      	str	r3, [r4, #80]	; 0x50
 8007a62:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <__sinit+0x68>)
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <__sinit+0x6c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	bf04      	itt	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	61a3      	streq	r3, [r4, #24]
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f820 	bl	8007ab8 <__sfp>
 8007a78:	6060      	str	r0, [r4, #4]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f81c 	bl	8007ab8 <__sfp>
 8007a80:	60a0      	str	r0, [r4, #8]
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f818 	bl	8007ab8 <__sfp>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60e0      	str	r0, [r4, #12]
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	6860      	ldr	r0, [r4, #4]
 8007a90:	f7ff ff82 	bl	8007998 <std>
 8007a94:	68a0      	ldr	r0, [r4, #8]
 8007a96:	2201      	movs	r2, #1
 8007a98:	2109      	movs	r1, #9
 8007a9a:	f7ff ff7d 	bl	8007998 <std>
 8007a9e:	68e0      	ldr	r0, [r4, #12]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	2112      	movs	r1, #18
 8007aa4:	f7ff ff78 	bl	8007998 <std>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	61a3      	str	r3, [r4, #24]
 8007aac:	e7d2      	b.n	8007a54 <__sinit+0xc>
 8007aae:	bf00      	nop
 8007ab0:	0800bd34 	.word	0x0800bd34
 8007ab4:	080079e1 	.word	0x080079e1

08007ab8 <__sfp>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	4607      	mov	r7, r0
 8007abc:	f7ff ffac 	bl	8007a18 <__sfp_lock_acquire>
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <__sfp+0x84>)
 8007ac2:	681e      	ldr	r6, [r3, #0]
 8007ac4:	69b3      	ldr	r3, [r6, #24]
 8007ac6:	b913      	cbnz	r3, 8007ace <__sfp+0x16>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff ffbd 	bl	8007a48 <__sinit>
 8007ace:	3648      	adds	r6, #72	; 0x48
 8007ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	d503      	bpl.n	8007ae0 <__sfp+0x28>
 8007ad8:	6833      	ldr	r3, [r6, #0]
 8007ada:	b30b      	cbz	r3, 8007b20 <__sfp+0x68>
 8007adc:	6836      	ldr	r6, [r6, #0]
 8007ade:	e7f7      	b.n	8007ad0 <__sfp+0x18>
 8007ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ae4:	b9d5      	cbnz	r5, 8007b1c <__sfp+0x64>
 8007ae6:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <__sfp+0x88>)
 8007ae8:	60e3      	str	r3, [r4, #12]
 8007aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007aee:	6665      	str	r5, [r4, #100]	; 0x64
 8007af0:	f000 f847 	bl	8007b82 <__retarget_lock_init_recursive>
 8007af4:	f7ff ff96 	bl	8007a24 <__sfp_lock_release>
 8007af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b00:	6025      	str	r5, [r4, #0]
 8007b02:	61a5      	str	r5, [r4, #24]
 8007b04:	2208      	movs	r2, #8
 8007b06:	4629      	mov	r1, r5
 8007b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b0c:	f7fd fc7e 	bl	800540c <memset>
 8007b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b18:	4620      	mov	r0, r4
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	3468      	adds	r4, #104	; 0x68
 8007b1e:	e7d9      	b.n	8007ad4 <__sfp+0x1c>
 8007b20:	2104      	movs	r1, #4
 8007b22:	4638      	mov	r0, r7
 8007b24:	f7ff ff62 	bl	80079ec <__sfmoreglue>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	6030      	str	r0, [r6, #0]
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d1d5      	bne.n	8007adc <__sfp+0x24>
 8007b30:	f7ff ff78 	bl	8007a24 <__sfp_lock_release>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	e7ee      	b.n	8007b18 <__sfp+0x60>
 8007b3a:	bf00      	nop
 8007b3c:	0800bd34 	.word	0x0800bd34
 8007b40:	ffff0001 	.word	0xffff0001

08007b44 <_fwalk_reent>:
 8007b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	4606      	mov	r6, r0
 8007b4a:	4688      	mov	r8, r1
 8007b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b50:	2700      	movs	r7, #0
 8007b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b56:	f1b9 0901 	subs.w	r9, r9, #1
 8007b5a:	d505      	bpl.n	8007b68 <_fwalk_reent+0x24>
 8007b5c:	6824      	ldr	r4, [r4, #0]
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	d1f7      	bne.n	8007b52 <_fwalk_reent+0xe>
 8007b62:	4638      	mov	r0, r7
 8007b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b68:	89ab      	ldrh	r3, [r5, #12]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d907      	bls.n	8007b7e <_fwalk_reent+0x3a>
 8007b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b72:	3301      	adds	r3, #1
 8007b74:	d003      	beq.n	8007b7e <_fwalk_reent+0x3a>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4630      	mov	r0, r6
 8007b7a:	47c0      	blx	r8
 8007b7c:	4307      	orrs	r7, r0
 8007b7e:	3568      	adds	r5, #104	; 0x68
 8007b80:	e7e9      	b.n	8007b56 <_fwalk_reent+0x12>

08007b82 <__retarget_lock_init_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <__retarget_lock_acquire_recursive>:
 8007b84:	4770      	bx	lr

08007b86 <__retarget_lock_release_recursive>:
 8007b86:	4770      	bx	lr

08007b88 <__swhatbuf_r>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	460e      	mov	r6, r1
 8007b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b90:	2900      	cmp	r1, #0
 8007b92:	b096      	sub	sp, #88	; 0x58
 8007b94:	4614      	mov	r4, r2
 8007b96:	461d      	mov	r5, r3
 8007b98:	da08      	bge.n	8007bac <__swhatbuf_r+0x24>
 8007b9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	061a      	lsls	r2, r3, #24
 8007ba4:	d410      	bmi.n	8007bc8 <__swhatbuf_r+0x40>
 8007ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007baa:	e00e      	b.n	8007bca <__swhatbuf_r+0x42>
 8007bac:	466a      	mov	r2, sp
 8007bae:	f000 f8fb 	bl	8007da8 <_fstat_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	dbf1      	blt.n	8007b9a <__swhatbuf_r+0x12>
 8007bb6:	9a01      	ldr	r2, [sp, #4]
 8007bb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bc0:	425a      	negs	r2, r3
 8007bc2:	415a      	adcs	r2, r3
 8007bc4:	602a      	str	r2, [r5, #0]
 8007bc6:	e7ee      	b.n	8007ba6 <__swhatbuf_r+0x1e>
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	2000      	movs	r0, #0
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	b016      	add	sp, #88	; 0x58
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bd4 <__smakebuf_r>:
 8007bd4:	898b      	ldrh	r3, [r1, #12]
 8007bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bd8:	079d      	lsls	r5, r3, #30
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	d507      	bpl.n	8007bf0 <__smakebuf_r+0x1c>
 8007be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	6123      	str	r3, [r4, #16]
 8007be8:	2301      	movs	r3, #1
 8007bea:	6163      	str	r3, [r4, #20]
 8007bec:	b002      	add	sp, #8
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	ab01      	add	r3, sp, #4
 8007bf2:	466a      	mov	r2, sp
 8007bf4:	f7ff ffc8 	bl	8007b88 <__swhatbuf_r>
 8007bf8:	9900      	ldr	r1, [sp, #0]
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7fd fc79 	bl	80054f4 <_malloc_r>
 8007c02:	b948      	cbnz	r0, 8007c18 <__smakebuf_r+0x44>
 8007c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c08:	059a      	lsls	r2, r3, #22
 8007c0a:	d4ef      	bmi.n	8007bec <__smakebuf_r+0x18>
 8007c0c:	f023 0303 	bic.w	r3, r3, #3
 8007c10:	f043 0302 	orr.w	r3, r3, #2
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	e7e3      	b.n	8007be0 <__smakebuf_r+0xc>
 8007c18:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <__smakebuf_r+0x7c>)
 8007c1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	9b00      	ldr	r3, [sp, #0]
 8007c28:	6163      	str	r3, [r4, #20]
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	6120      	str	r0, [r4, #16]
 8007c2e:	b15b      	cbz	r3, 8007c48 <__smakebuf_r+0x74>
 8007c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 f8c9 	bl	8007dcc <_isatty_r>
 8007c3a:	b128      	cbz	r0, 8007c48 <__smakebuf_r+0x74>
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	89a0      	ldrh	r0, [r4, #12]
 8007c4a:	4305      	orrs	r5, r0
 8007c4c:	81a5      	strh	r5, [r4, #12]
 8007c4e:	e7cd      	b.n	8007bec <__smakebuf_r+0x18>
 8007c50:	080079e1 	.word	0x080079e1

08007c54 <_raise_r>:
 8007c54:	291f      	cmp	r1, #31
 8007c56:	b538      	push	{r3, r4, r5, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	d904      	bls.n	8007c68 <_raise_r+0x14>
 8007c5e:	2316      	movs	r3, #22
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c6a:	b112      	cbz	r2, 8007c72 <_raise_r+0x1e>
 8007c6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c70:	b94b      	cbnz	r3, 8007c86 <_raise_r+0x32>
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 f830 	bl	8007cd8 <_getpid_r>
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c82:	f000 b817 	b.w	8007cb4 <_kill_r>
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d00a      	beq.n	8007ca0 <_raise_r+0x4c>
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	d103      	bne.n	8007c96 <_raise_r+0x42>
 8007c8e:	2316      	movs	r3, #22
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7e7      	b.n	8007c66 <_raise_r+0x12>
 8007c96:	2400      	movs	r4, #0
 8007c98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	4798      	blx	r3
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7e0      	b.n	8007c66 <_raise_r+0x12>

08007ca4 <raise>:
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <raise+0xc>)
 8007ca6:	4601      	mov	r1, r0
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	f7ff bfd3 	b.w	8007c54 <_raise_r>
 8007cae:	bf00      	nop
 8007cb0:	2000000c 	.word	0x2000000c

08007cb4 <_kill_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d07      	ldr	r5, [pc, #28]	; (8007cd4 <_kill_r+0x20>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f7fb f8f7 	bl	8002eb4 <_kill>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d102      	bne.n	8007cd0 <_kill_r+0x1c>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	b103      	cbz	r3, 8007cd0 <_kill_r+0x1c>
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200002b4 	.word	0x200002b4

08007cd8 <_getpid_r>:
 8007cd8:	f7fb b8e4 	b.w	8002ea4 <_getpid>

08007cdc <__sread>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce4:	f000 f894 	bl	8007e10 <_read_r>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	bfab      	itete	ge
 8007cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cee:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf0:	181b      	addge	r3, r3, r0
 8007cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cf6:	bfac      	ite	ge
 8007cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cfa:	81a3      	strhlt	r3, [r4, #12]
 8007cfc:	bd10      	pop	{r4, pc}

08007cfe <__swrite>:
 8007cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d02:	461f      	mov	r7, r3
 8007d04:	898b      	ldrh	r3, [r1, #12]
 8007d06:	05db      	lsls	r3, r3, #23
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	4616      	mov	r6, r2
 8007d0e:	d505      	bpl.n	8007d1c <__swrite+0x1e>
 8007d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d14:	2302      	movs	r3, #2
 8007d16:	2200      	movs	r2, #0
 8007d18:	f000 f868 	bl	8007dec <_lseek_r>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	4632      	mov	r2, r6
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d32:	f000 b817 	b.w	8007d64 <_write_r>

08007d36 <__sseek>:
 8007d36:	b510      	push	{r4, lr}
 8007d38:	460c      	mov	r4, r1
 8007d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3e:	f000 f855 	bl	8007dec <_lseek_r>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	bf15      	itete	ne
 8007d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d52:	81a3      	strheq	r3, [r4, #12]
 8007d54:	bf18      	it	ne
 8007d56:	81a3      	strhne	r3, [r4, #12]
 8007d58:	bd10      	pop	{r4, pc}

08007d5a <__sclose>:
 8007d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5e:	f000 b813 	b.w	8007d88 <_close_r>
	...

08007d64 <_write_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4d07      	ldr	r5, [pc, #28]	; (8007d84 <_write_r+0x20>)
 8007d68:	4604      	mov	r4, r0
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	602a      	str	r2, [r5, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f7fb f8d5 	bl	8002f22 <_write>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_write_r+0x1e>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_write_r+0x1e>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	200002b4 	.word	0x200002b4

08007d88 <_close_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	; (8007da4 <_close_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7fb f8e1 	bl	8002f5a <_close>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_close_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_close_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	200002b4 	.word	0x200002b4

08007da8 <_fstat_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	; (8007dc8 <_fstat_r+0x20>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	4611      	mov	r1, r2
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	f7fb f8dc 	bl	8002f72 <_fstat>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d102      	bne.n	8007dc4 <_fstat_r+0x1c>
 8007dbe:	682b      	ldr	r3, [r5, #0]
 8007dc0:	b103      	cbz	r3, 8007dc4 <_fstat_r+0x1c>
 8007dc2:	6023      	str	r3, [r4, #0]
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
 8007dc6:	bf00      	nop
 8007dc8:	200002b4 	.word	0x200002b4

08007dcc <_isatty_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d06      	ldr	r5, [pc, #24]	; (8007de8 <_isatty_r+0x1c>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7fb f8db 	bl	8002f92 <_isatty>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_isatty_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_isatty_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	200002b4 	.word	0x200002b4

08007dec <_lseek_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	; (8007e0c <_lseek_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7fb f8d4 	bl	8002fa8 <_lseek>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_lseek_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_lseek_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	200002b4 	.word	0x200002b4

08007e10 <_read_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d07      	ldr	r5, [pc, #28]	; (8007e30 <_read_r+0x20>)
 8007e14:	4604      	mov	r4, r0
 8007e16:	4608      	mov	r0, r1
 8007e18:	4611      	mov	r1, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7fb f862 	bl	8002ee8 <_read>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_read_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_read_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	200002b4 	.word	0x200002b4
 8007e34:	00000000 	.word	0x00000000

08007e38 <atan>:
 8007e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ec55 4b10 	vmov	r4, r5, d0
 8007e40:	4bc3      	ldr	r3, [pc, #780]	; (8008150 <atan+0x318>)
 8007e42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e46:	429e      	cmp	r6, r3
 8007e48:	46ab      	mov	fp, r5
 8007e4a:	dd18      	ble.n	8007e7e <atan+0x46>
 8007e4c:	4bc1      	ldr	r3, [pc, #772]	; (8008154 <atan+0x31c>)
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	dc01      	bgt.n	8007e56 <atan+0x1e>
 8007e52:	d109      	bne.n	8007e68 <atan+0x30>
 8007e54:	b144      	cbz	r4, 8007e68 <atan+0x30>
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fa1d 	bl	800029c <__adddf3>
 8007e62:	4604      	mov	r4, r0
 8007e64:	460d      	mov	r5, r1
 8007e66:	e006      	b.n	8007e76 <atan+0x3e>
 8007e68:	f1bb 0f00 	cmp.w	fp, #0
 8007e6c:	f300 8131 	bgt.w	80080d2 <atan+0x29a>
 8007e70:	a59b      	add	r5, pc, #620	; (adr r5, 80080e0 <atan+0x2a8>)
 8007e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e76:	ec45 4b10 	vmov	d0, r4, r5
 8007e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	4bb6      	ldr	r3, [pc, #728]	; (8008158 <atan+0x320>)
 8007e80:	429e      	cmp	r6, r3
 8007e82:	dc14      	bgt.n	8007eae <atan+0x76>
 8007e84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007e88:	429e      	cmp	r6, r3
 8007e8a:	dc0d      	bgt.n	8007ea8 <atan+0x70>
 8007e8c:	a396      	add	r3, pc, #600	; (adr r3, 80080e8 <atan+0x2b0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	ee10 0a10 	vmov	r0, s0
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fa00 	bl	800029c <__adddf3>
 8007e9c:	4baf      	ldr	r3, [pc, #700]	; (800815c <atan+0x324>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f7f8 fe42 	bl	8000b28 <__aeabi_dcmpgt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d1e6      	bne.n	8007e76 <atan+0x3e>
 8007ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8007eac:	e02b      	b.n	8007f06 <atan+0xce>
 8007eae:	f000 f9b7 	bl	8008220 <fabs>
 8007eb2:	4bab      	ldr	r3, [pc, #684]	; (8008160 <atan+0x328>)
 8007eb4:	429e      	cmp	r6, r3
 8007eb6:	ec55 4b10 	vmov	r4, r5, d0
 8007eba:	f300 80bf 	bgt.w	800803c <atan+0x204>
 8007ebe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ec2:	429e      	cmp	r6, r3
 8007ec4:	f300 80a0 	bgt.w	8008008 <atan+0x1d0>
 8007ec8:	ee10 2a10 	vmov	r2, s0
 8007ecc:	ee10 0a10 	vmov	r0, s0
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 f9e2 	bl	800029c <__adddf3>
 8007ed8:	4ba0      	ldr	r3, [pc, #640]	; (800815c <atan+0x324>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 f9dc 	bl	8000298 <__aeabi_dsub>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460f      	mov	r7, r1
 8007ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 f9d5 	bl	800029c <__adddf3>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	4639      	mov	r1, r7
 8007efa:	f7f8 fcaf 	bl	800085c <__aeabi_ddiv>
 8007efe:	f04f 0a00 	mov.w	sl, #0
 8007f02:	4604      	mov	r4, r0
 8007f04:	460d      	mov	r5, r1
 8007f06:	4622      	mov	r2, r4
 8007f08:	462b      	mov	r3, r5
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 fb7b 	bl	8000608 <__aeabi_dmul>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4680      	mov	r8, r0
 8007f18:	4689      	mov	r9, r1
 8007f1a:	f7f8 fb75 	bl	8000608 <__aeabi_dmul>
 8007f1e:	a374      	add	r3, pc, #464	; (adr r3, 80080f0 <atan+0x2b8>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	4606      	mov	r6, r0
 8007f26:	460f      	mov	r7, r1
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	a372      	add	r3, pc, #456	; (adr r3, 80080f8 <atan+0x2c0>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	4632      	mov	r2, r6
 8007f38:	463b      	mov	r3, r7
 8007f3a:	f7f8 fb65 	bl	8000608 <__aeabi_dmul>
 8007f3e:	a370      	add	r3, pc, #448	; (adr r3, 8008100 <atan+0x2c8>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 f9aa 	bl	800029c <__adddf3>
 8007f48:	4632      	mov	r2, r6
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	f7f8 fb5c 	bl	8000608 <__aeabi_dmul>
 8007f50:	a36d      	add	r3, pc, #436	; (adr r3, 8008108 <atan+0x2d0>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 f9a1 	bl	800029c <__adddf3>
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	f7f8 fb53 	bl	8000608 <__aeabi_dmul>
 8007f62:	a36b      	add	r3, pc, #428	; (adr r3, 8008110 <atan+0x2d8>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 f998 	bl	800029c <__adddf3>
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	f7f8 fb4a 	bl	8000608 <__aeabi_dmul>
 8007f74:	a368      	add	r3, pc, #416	; (adr r3, 8008118 <atan+0x2e0>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	f7f8 f98f 	bl	800029c <__adddf3>
 8007f7e:	4642      	mov	r2, r8
 8007f80:	464b      	mov	r3, r9
 8007f82:	f7f8 fb41 	bl	8000608 <__aeabi_dmul>
 8007f86:	a366      	add	r3, pc, #408	; (adr r3, 8008120 <atan+0x2e8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	a363      	add	r3, pc, #396	; (adr r3, 8008128 <atan+0x2f0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	f7f8 fb2f 	bl	8000608 <__aeabi_dmul>
 8007faa:	a361      	add	r3, pc, #388	; (adr r3, 8008130 <atan+0x2f8>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 f972 	bl	8000298 <__aeabi_dsub>
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	f7f8 fb26 	bl	8000608 <__aeabi_dmul>
 8007fbc:	a35e      	add	r3, pc, #376	; (adr r3, 8008138 <atan+0x300>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f969 	bl	8000298 <__aeabi_dsub>
 8007fc6:	4632      	mov	r2, r6
 8007fc8:	463b      	mov	r3, r7
 8007fca:	f7f8 fb1d 	bl	8000608 <__aeabi_dmul>
 8007fce:	a35c      	add	r3, pc, #368	; (adr r3, 8008140 <atan+0x308>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 f960 	bl	8000298 <__aeabi_dsub>
 8007fd8:	4632      	mov	r2, r6
 8007fda:	463b      	mov	r3, r7
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 f958 	bl	800029c <__adddf3>
 8007fec:	4622      	mov	r2, r4
 8007fee:	462b      	mov	r3, r5
 8007ff0:	f7f8 fb0a 	bl	8000608 <__aeabi_dmul>
 8007ff4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	d14b      	bne.n	8008096 <atan+0x25e>
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 f949 	bl	8000298 <__aeabi_dsub>
 8008006:	e72c      	b.n	8007e62 <atan+0x2a>
 8008008:	ee10 0a10 	vmov	r0, s0
 800800c:	4b53      	ldr	r3, [pc, #332]	; (800815c <atan+0x324>)
 800800e:	2200      	movs	r2, #0
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 f941 	bl	8000298 <__aeabi_dsub>
 8008016:	4b51      	ldr	r3, [pc, #324]	; (800815c <atan+0x324>)
 8008018:	4606      	mov	r6, r0
 800801a:	460f      	mov	r7, r1
 800801c:	2200      	movs	r2, #0
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f93b 	bl	800029c <__adddf3>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4630      	mov	r0, r6
 800802c:	4639      	mov	r1, r7
 800802e:	f7f8 fc15 	bl	800085c <__aeabi_ddiv>
 8008032:	f04f 0a01 	mov.w	sl, #1
 8008036:	4604      	mov	r4, r0
 8008038:	460d      	mov	r5, r1
 800803a:	e764      	b.n	8007f06 <atan+0xce>
 800803c:	4b49      	ldr	r3, [pc, #292]	; (8008164 <atan+0x32c>)
 800803e:	429e      	cmp	r6, r3
 8008040:	da1d      	bge.n	800807e <atan+0x246>
 8008042:	ee10 0a10 	vmov	r0, s0
 8008046:	4b48      	ldr	r3, [pc, #288]	; (8008168 <atan+0x330>)
 8008048:	2200      	movs	r2, #0
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f924 	bl	8000298 <__aeabi_dsub>
 8008050:	4b45      	ldr	r3, [pc, #276]	; (8008168 <atan+0x330>)
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	2200      	movs	r2, #0
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 fad4 	bl	8000608 <__aeabi_dmul>
 8008060:	4b3e      	ldr	r3, [pc, #248]	; (800815c <atan+0x324>)
 8008062:	2200      	movs	r2, #0
 8008064:	f7f8 f91a 	bl	800029c <__adddf3>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 fbf4 	bl	800085c <__aeabi_ddiv>
 8008074:	f04f 0a02 	mov.w	sl, #2
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	e743      	b.n	8007f06 <atan+0xce>
 800807e:	462b      	mov	r3, r5
 8008080:	ee10 2a10 	vmov	r2, s0
 8008084:	4939      	ldr	r1, [pc, #228]	; (800816c <atan+0x334>)
 8008086:	2000      	movs	r0, #0
 8008088:	f7f8 fbe8 	bl	800085c <__aeabi_ddiv>
 800808c:	f04f 0a03 	mov.w	sl, #3
 8008090:	4604      	mov	r4, r0
 8008092:	460d      	mov	r5, r1
 8008094:	e737      	b.n	8007f06 <atan+0xce>
 8008096:	4b36      	ldr	r3, [pc, #216]	; (8008170 <atan+0x338>)
 8008098:	4e36      	ldr	r6, [pc, #216]	; (8008174 <atan+0x33c>)
 800809a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800809e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80080a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	4622      	mov	r2, r4
 80080ac:	462b      	mov	r3, r5
 80080ae:	f7f8 f8f3 	bl	8000298 <__aeabi_dsub>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080ba:	f7f8 f8ed 	bl	8000298 <__aeabi_dsub>
 80080be:	f1bb 0f00 	cmp.w	fp, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	f6bf aed6 	bge.w	8007e76 <atan+0x3e>
 80080ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ce:	461d      	mov	r5, r3
 80080d0:	e6d1      	b.n	8007e76 <atan+0x3e>
 80080d2:	a51d      	add	r5, pc, #116	; (adr r5, 8008148 <atan+0x310>)
 80080d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080d8:	e6cd      	b.n	8007e76 <atan+0x3e>
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w
 80080e0:	54442d18 	.word	0x54442d18
 80080e4:	bff921fb 	.word	0xbff921fb
 80080e8:	8800759c 	.word	0x8800759c
 80080ec:	7e37e43c 	.word	0x7e37e43c
 80080f0:	e322da11 	.word	0xe322da11
 80080f4:	3f90ad3a 	.word	0x3f90ad3a
 80080f8:	24760deb 	.word	0x24760deb
 80080fc:	3fa97b4b 	.word	0x3fa97b4b
 8008100:	a0d03d51 	.word	0xa0d03d51
 8008104:	3fb10d66 	.word	0x3fb10d66
 8008108:	c54c206e 	.word	0xc54c206e
 800810c:	3fb745cd 	.word	0x3fb745cd
 8008110:	920083ff 	.word	0x920083ff
 8008114:	3fc24924 	.word	0x3fc24924
 8008118:	5555550d 	.word	0x5555550d
 800811c:	3fd55555 	.word	0x3fd55555
 8008120:	2c6a6c2f 	.word	0x2c6a6c2f
 8008124:	bfa2b444 	.word	0xbfa2b444
 8008128:	52defd9a 	.word	0x52defd9a
 800812c:	3fadde2d 	.word	0x3fadde2d
 8008130:	af749a6d 	.word	0xaf749a6d
 8008134:	3fb3b0f2 	.word	0x3fb3b0f2
 8008138:	fe231671 	.word	0xfe231671
 800813c:	3fbc71c6 	.word	0x3fbc71c6
 8008140:	9998ebc4 	.word	0x9998ebc4
 8008144:	3fc99999 	.word	0x3fc99999
 8008148:	54442d18 	.word	0x54442d18
 800814c:	3ff921fb 	.word	0x3ff921fb
 8008150:	440fffff 	.word	0x440fffff
 8008154:	7ff00000 	.word	0x7ff00000
 8008158:	3fdbffff 	.word	0x3fdbffff
 800815c:	3ff00000 	.word	0x3ff00000
 8008160:	3ff2ffff 	.word	0x3ff2ffff
 8008164:	40038000 	.word	0x40038000
 8008168:	3ff80000 	.word	0x3ff80000
 800816c:	bff00000 	.word	0xbff00000
 8008170:	0800c030 	.word	0x0800c030
 8008174:	0800c010 	.word	0x0800c010

08008178 <cos>:
 8008178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800817a:	ec53 2b10 	vmov	r2, r3, d0
 800817e:	4826      	ldr	r0, [pc, #152]	; (8008218 <cos+0xa0>)
 8008180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008184:	4281      	cmp	r1, r0
 8008186:	dc06      	bgt.n	8008196 <cos+0x1e>
 8008188:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008210 <cos+0x98>
 800818c:	b005      	add	sp, #20
 800818e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008192:	f001 b9c9 	b.w	8009528 <__kernel_cos>
 8008196:	4821      	ldr	r0, [pc, #132]	; (800821c <cos+0xa4>)
 8008198:	4281      	cmp	r1, r0
 800819a:	dd09      	ble.n	80081b0 <cos+0x38>
 800819c:	ee10 0a10 	vmov	r0, s0
 80081a0:	4619      	mov	r1, r3
 80081a2:	f7f8 f879 	bl	8000298 <__aeabi_dsub>
 80081a6:	ec41 0b10 	vmov	d0, r0, r1
 80081aa:	b005      	add	sp, #20
 80081ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80081b0:	4668      	mov	r0, sp
 80081b2:	f000 fef9 	bl	8008fa8 <__ieee754_rem_pio2>
 80081b6:	f000 0003 	and.w	r0, r0, #3
 80081ba:	2801      	cmp	r0, #1
 80081bc:	d00b      	beq.n	80081d6 <cos+0x5e>
 80081be:	2802      	cmp	r0, #2
 80081c0:	d016      	beq.n	80081f0 <cos+0x78>
 80081c2:	b9e0      	cbnz	r0, 80081fe <cos+0x86>
 80081c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081c8:	ed9d 0b00 	vldr	d0, [sp]
 80081cc:	f001 f9ac 	bl	8009528 <__kernel_cos>
 80081d0:	ec51 0b10 	vmov	r0, r1, d0
 80081d4:	e7e7      	b.n	80081a6 <cos+0x2e>
 80081d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081da:	ed9d 0b00 	vldr	d0, [sp]
 80081de:	f001 fdbb 	bl	8009d58 <__kernel_sin>
 80081e2:	ec53 2b10 	vmov	r2, r3, d0
 80081e6:	ee10 0a10 	vmov	r0, s0
 80081ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80081ee:	e7da      	b.n	80081a6 <cos+0x2e>
 80081f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80081f4:	ed9d 0b00 	vldr	d0, [sp]
 80081f8:	f001 f996 	bl	8009528 <__kernel_cos>
 80081fc:	e7f1      	b.n	80081e2 <cos+0x6a>
 80081fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008202:	ed9d 0b00 	vldr	d0, [sp]
 8008206:	2001      	movs	r0, #1
 8008208:	f001 fda6 	bl	8009d58 <__kernel_sin>
 800820c:	e7e0      	b.n	80081d0 <cos+0x58>
 800820e:	bf00      	nop
	...
 8008218:	3fe921fb 	.word	0x3fe921fb
 800821c:	7fefffff 	.word	0x7fefffff

08008220 <fabs>:
 8008220:	ec51 0b10 	vmov	r0, r1, d0
 8008224:	ee10 2a10 	vmov	r2, s0
 8008228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800822c:	ec43 2b10 	vmov	d0, r2, r3
 8008230:	4770      	bx	lr
 8008232:	0000      	movs	r0, r0
 8008234:	0000      	movs	r0, r0
	...

08008238 <floor>:
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008248:	2e13      	cmp	r6, #19
 800824a:	ee10 5a10 	vmov	r5, s0
 800824e:	ee10 8a10 	vmov	r8, s0
 8008252:	460c      	mov	r4, r1
 8008254:	dc32      	bgt.n	80082bc <floor+0x84>
 8008256:	2e00      	cmp	r6, #0
 8008258:	da14      	bge.n	8008284 <floor+0x4c>
 800825a:	a333      	add	r3, pc, #204	; (adr r3, 8008328 <floor+0xf0>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f81c 	bl	800029c <__adddf3>
 8008264:	2200      	movs	r2, #0
 8008266:	2300      	movs	r3, #0
 8008268:	f7f8 fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800826c:	b138      	cbz	r0, 800827e <floor+0x46>
 800826e:	2c00      	cmp	r4, #0
 8008270:	da57      	bge.n	8008322 <floor+0xea>
 8008272:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008276:	431d      	orrs	r5, r3
 8008278:	d001      	beq.n	800827e <floor+0x46>
 800827a:	4c2d      	ldr	r4, [pc, #180]	; (8008330 <floor+0xf8>)
 800827c:	2500      	movs	r5, #0
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	e025      	b.n	80082d0 <floor+0x98>
 8008284:	4f2b      	ldr	r7, [pc, #172]	; (8008334 <floor+0xfc>)
 8008286:	4137      	asrs	r7, r6
 8008288:	ea01 0307 	and.w	r3, r1, r7
 800828c:	4303      	orrs	r3, r0
 800828e:	d01f      	beq.n	80082d0 <floor+0x98>
 8008290:	a325      	add	r3, pc, #148	; (adr r3, 8008328 <floor+0xf0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f801 	bl	800029c <__adddf3>
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	f7f8 fc43 	bl	8000b28 <__aeabi_dcmpgt>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0eb      	beq.n	800827e <floor+0x46>
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	bfbe      	ittt	lt
 80082aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80082b2:	19a4      	addlt	r4, r4, r6
 80082b4:	ea24 0407 	bic.w	r4, r4, r7
 80082b8:	2500      	movs	r5, #0
 80082ba:	e7e0      	b.n	800827e <floor+0x46>
 80082bc:	2e33      	cmp	r6, #51	; 0x33
 80082be:	dd0b      	ble.n	80082d8 <floor+0xa0>
 80082c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082c4:	d104      	bne.n	80082d0 <floor+0x98>
 80082c6:	ee10 2a10 	vmov	r2, s0
 80082ca:	460b      	mov	r3, r1
 80082cc:	f7f7 ffe6 	bl	800029c <__adddf3>
 80082d0:	ec41 0b10 	vmov	d0, r0, r1
 80082d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80082dc:	f04f 33ff 	mov.w	r3, #4294967295
 80082e0:	fa23 f707 	lsr.w	r7, r3, r7
 80082e4:	4207      	tst	r7, r0
 80082e6:	d0f3      	beq.n	80082d0 <floor+0x98>
 80082e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008328 <floor+0xf0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ffd5 	bl	800029c <__adddf3>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	f7f8 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0bf      	beq.n	800827e <floor+0x46>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	da02      	bge.n	8008308 <floor+0xd0>
 8008302:	2e14      	cmp	r6, #20
 8008304:	d103      	bne.n	800830e <floor+0xd6>
 8008306:	3401      	adds	r4, #1
 8008308:	ea25 0507 	bic.w	r5, r5, r7
 800830c:	e7b7      	b.n	800827e <floor+0x46>
 800830e:	2301      	movs	r3, #1
 8008310:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008314:	fa03 f606 	lsl.w	r6, r3, r6
 8008318:	4435      	add	r5, r6
 800831a:	4545      	cmp	r5, r8
 800831c:	bf38      	it	cc
 800831e:	18e4      	addcc	r4, r4, r3
 8008320:	e7f2      	b.n	8008308 <floor+0xd0>
 8008322:	2500      	movs	r5, #0
 8008324:	462c      	mov	r4, r5
 8008326:	e7aa      	b.n	800827e <floor+0x46>
 8008328:	8800759c 	.word	0x8800759c
 800832c:	7e37e43c 	.word	0x7e37e43c
 8008330:	bff00000 	.word	0xbff00000
 8008334:	000fffff 	.word	0x000fffff

08008338 <sin>:
 8008338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800833a:	ec53 2b10 	vmov	r2, r3, d0
 800833e:	4828      	ldr	r0, [pc, #160]	; (80083e0 <sin+0xa8>)
 8008340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008344:	4281      	cmp	r1, r0
 8008346:	dc07      	bgt.n	8008358 <sin+0x20>
 8008348:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80083d8 <sin+0xa0>
 800834c:	2000      	movs	r0, #0
 800834e:	b005      	add	sp, #20
 8008350:	f85d eb04 	ldr.w	lr, [sp], #4
 8008354:	f001 bd00 	b.w	8009d58 <__kernel_sin>
 8008358:	4822      	ldr	r0, [pc, #136]	; (80083e4 <sin+0xac>)
 800835a:	4281      	cmp	r1, r0
 800835c:	dd09      	ble.n	8008372 <sin+0x3a>
 800835e:	ee10 0a10 	vmov	r0, s0
 8008362:	4619      	mov	r1, r3
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	ec41 0b10 	vmov	d0, r0, r1
 800836c:	b005      	add	sp, #20
 800836e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008372:	4668      	mov	r0, sp
 8008374:	f000 fe18 	bl	8008fa8 <__ieee754_rem_pio2>
 8008378:	f000 0003 	and.w	r0, r0, #3
 800837c:	2801      	cmp	r0, #1
 800837e:	d00c      	beq.n	800839a <sin+0x62>
 8008380:	2802      	cmp	r0, #2
 8008382:	d011      	beq.n	80083a8 <sin+0x70>
 8008384:	b9f0      	cbnz	r0, 80083c4 <sin+0x8c>
 8008386:	ed9d 1b02 	vldr	d1, [sp, #8]
 800838a:	ed9d 0b00 	vldr	d0, [sp]
 800838e:	2001      	movs	r0, #1
 8008390:	f001 fce2 	bl	8009d58 <__kernel_sin>
 8008394:	ec51 0b10 	vmov	r0, r1, d0
 8008398:	e7e6      	b.n	8008368 <sin+0x30>
 800839a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800839e:	ed9d 0b00 	vldr	d0, [sp]
 80083a2:	f001 f8c1 	bl	8009528 <__kernel_cos>
 80083a6:	e7f5      	b.n	8008394 <sin+0x5c>
 80083a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083ac:	ed9d 0b00 	vldr	d0, [sp]
 80083b0:	2001      	movs	r0, #1
 80083b2:	f001 fcd1 	bl	8009d58 <__kernel_sin>
 80083b6:	ec53 2b10 	vmov	r2, r3, d0
 80083ba:	ee10 0a10 	vmov	r0, s0
 80083be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083c2:	e7d1      	b.n	8008368 <sin+0x30>
 80083c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083c8:	ed9d 0b00 	vldr	d0, [sp]
 80083cc:	f001 f8ac 	bl	8009528 <__kernel_cos>
 80083d0:	e7f1      	b.n	80083b6 <sin+0x7e>
 80083d2:	bf00      	nop
 80083d4:	f3af 8000 	nop.w
	...
 80083e0:	3fe921fb 	.word	0x3fe921fb
 80083e4:	7fefffff 	.word	0x7fefffff

080083e8 <tan>:
 80083e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ea:	ec53 2b10 	vmov	r2, r3, d0
 80083ee:	4816      	ldr	r0, [pc, #88]	; (8008448 <tan+0x60>)
 80083f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083f4:	4281      	cmp	r1, r0
 80083f6:	dc07      	bgt.n	8008408 <tan+0x20>
 80083f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8008440 <tan+0x58>
 80083fc:	2001      	movs	r0, #1
 80083fe:	b005      	add	sp, #20
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	f001 bd68 	b.w	8009ed8 <__kernel_tan>
 8008408:	4810      	ldr	r0, [pc, #64]	; (800844c <tan+0x64>)
 800840a:	4281      	cmp	r1, r0
 800840c:	dd09      	ble.n	8008422 <tan+0x3a>
 800840e:	ee10 0a10 	vmov	r0, s0
 8008412:	4619      	mov	r1, r3
 8008414:	f7f7 ff40 	bl	8000298 <__aeabi_dsub>
 8008418:	ec41 0b10 	vmov	d0, r0, r1
 800841c:	b005      	add	sp, #20
 800841e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008422:	4668      	mov	r0, sp
 8008424:	f000 fdc0 	bl	8008fa8 <__ieee754_rem_pio2>
 8008428:	0040      	lsls	r0, r0, #1
 800842a:	f000 0002 	and.w	r0, r0, #2
 800842e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008432:	ed9d 0b00 	vldr	d0, [sp]
 8008436:	f1c0 0001 	rsb	r0, r0, #1
 800843a:	f001 fd4d 	bl	8009ed8 <__kernel_tan>
 800843e:	e7ed      	b.n	800841c <tan+0x34>
	...
 8008448:	3fe921fb 	.word	0x3fe921fb
 800844c:	7fefffff 	.word	0x7fefffff

08008450 <acos>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	ed2d 8b02 	vpush	{d8}
 8008456:	ec55 4b10 	vmov	r4, r5, d0
 800845a:	f000 f865 	bl	8008528 <__ieee754_acos>
 800845e:	4622      	mov	r2, r4
 8008460:	462b      	mov	r3, r5
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	eeb0 8a40 	vmov.f32	s16, s0
 800846a:	eef0 8a60 	vmov.f32	s17, s1
 800846e:	f7f8 fb65 	bl	8000b3c <__aeabi_dcmpun>
 8008472:	b9a8      	cbnz	r0, 80084a0 <acos+0x50>
 8008474:	ec45 4b10 	vmov	d0, r4, r5
 8008478:	f7ff fed2 	bl	8008220 <fabs>
 800847c:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <acos+0x60>)
 800847e:	ec51 0b10 	vmov	r0, r1, d0
 8008482:	2200      	movs	r2, #0
 8008484:	f7f8 fb50 	bl	8000b28 <__aeabi_dcmpgt>
 8008488:	b150      	cbz	r0, 80084a0 <acos+0x50>
 800848a:	f7fc ff7f 	bl	800538c <__errno>
 800848e:	ecbd 8b02 	vpop	{d8}
 8008492:	2321      	movs	r3, #33	; 0x21
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849a:	4806      	ldr	r0, [pc, #24]	; (80084b4 <acos+0x64>)
 800849c:	f7ff b8dc 	b.w	8007658 <nan>
 80084a0:	eeb0 0a48 	vmov.f32	s0, s16
 80084a4:	eef0 0a68 	vmov.f32	s1, s17
 80084a8:	ecbd 8b02 	vpop	{d8}
 80084ac:	bd38      	pop	{r3, r4, r5, pc}
 80084ae:	bf00      	nop
 80084b0:	3ff00000 	.word	0x3ff00000
 80084b4:	0800bda7 	.word	0x0800bda7

080084b8 <asin>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	ed2d 8b02 	vpush	{d8}
 80084be:	ec55 4b10 	vmov	r4, r5, d0
 80084c2:	f000 fa91 	bl	80089e8 <__ieee754_asin>
 80084c6:	4622      	mov	r2, r4
 80084c8:	462b      	mov	r3, r5
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	eeb0 8a40 	vmov.f32	s16, s0
 80084d2:	eef0 8a60 	vmov.f32	s17, s1
 80084d6:	f7f8 fb31 	bl	8000b3c <__aeabi_dcmpun>
 80084da:	b9a8      	cbnz	r0, 8008508 <asin+0x50>
 80084dc:	ec45 4b10 	vmov	d0, r4, r5
 80084e0:	f7ff fe9e 	bl	8008220 <fabs>
 80084e4:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <asin+0x60>)
 80084e6:	ec51 0b10 	vmov	r0, r1, d0
 80084ea:	2200      	movs	r2, #0
 80084ec:	f7f8 fb1c 	bl	8000b28 <__aeabi_dcmpgt>
 80084f0:	b150      	cbz	r0, 8008508 <asin+0x50>
 80084f2:	f7fc ff4b 	bl	800538c <__errno>
 80084f6:	ecbd 8b02 	vpop	{d8}
 80084fa:	2321      	movs	r3, #33	; 0x21
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008502:	4806      	ldr	r0, [pc, #24]	; (800851c <asin+0x64>)
 8008504:	f7ff b8a8 	b.w	8007658 <nan>
 8008508:	eeb0 0a48 	vmov.f32	s0, s16
 800850c:	eef0 0a68 	vmov.f32	s1, s17
 8008510:	ecbd 8b02 	vpop	{d8}
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	bf00      	nop
 8008518:	3ff00000 	.word	0x3ff00000
 800851c:	0800bda7 	.word	0x0800bda7

08008520 <atan2>:
 8008520:	f000 bc76 	b.w	8008e10 <__ieee754_atan2>
 8008524:	0000      	movs	r0, r0
	...

08008528 <__ieee754_acos>:
 8008528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	ec55 4b10 	vmov	r4, r5, d0
 8008530:	49b7      	ldr	r1, [pc, #732]	; (8008810 <__ieee754_acos+0x2e8>)
 8008532:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008536:	428b      	cmp	r3, r1
 8008538:	dd1b      	ble.n	8008572 <__ieee754_acos+0x4a>
 800853a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800853e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008542:	4323      	orrs	r3, r4
 8008544:	d106      	bne.n	8008554 <__ieee754_acos+0x2c>
 8008546:	2d00      	cmp	r5, #0
 8008548:	f300 8211 	bgt.w	800896e <__ieee754_acos+0x446>
 800854c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80087a8 <__ieee754_acos+0x280>
 8008550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	ee10 2a10 	vmov	r2, s0
 8008558:	462b      	mov	r3, r5
 800855a:	ee10 0a10 	vmov	r0, s0
 800855e:	4629      	mov	r1, r5
 8008560:	f7f7 fe9a 	bl	8000298 <__aeabi_dsub>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	f7f8 f978 	bl	800085c <__aeabi_ddiv>
 800856c:	ec41 0b10 	vmov	d0, r0, r1
 8008570:	e7ee      	b.n	8008550 <__ieee754_acos+0x28>
 8008572:	49a8      	ldr	r1, [pc, #672]	; (8008814 <__ieee754_acos+0x2ec>)
 8008574:	428b      	cmp	r3, r1
 8008576:	f300 8087 	bgt.w	8008688 <__ieee754_acos+0x160>
 800857a:	4aa7      	ldr	r2, [pc, #668]	; (8008818 <__ieee754_acos+0x2f0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	f340 81f9 	ble.w	8008974 <__ieee754_acos+0x44c>
 8008582:	ee10 2a10 	vmov	r2, s0
 8008586:	ee10 0a10 	vmov	r0, s0
 800858a:	462b      	mov	r3, r5
 800858c:	4629      	mov	r1, r5
 800858e:	f7f8 f83b 	bl	8000608 <__aeabi_dmul>
 8008592:	a387      	add	r3, pc, #540	; (adr r3, 80087b0 <__ieee754_acos+0x288>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	a385      	add	r3, pc, #532	; (adr r3, 80087b8 <__ieee754_acos+0x290>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 fe79 	bl	800029c <__adddf3>
 80085aa:	4632      	mov	r2, r6
 80085ac:	463b      	mov	r3, r7
 80085ae:	f7f8 f82b 	bl	8000608 <__aeabi_dmul>
 80085b2:	a383      	add	r3, pc, #524	; (adr r3, 80087c0 <__ieee754_acos+0x298>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 fe6e 	bl	8000298 <__aeabi_dsub>
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	f7f8 f822 	bl	8000608 <__aeabi_dmul>
 80085c4:	a380      	add	r3, pc, #512	; (adr r3, 80087c8 <__ieee754_acos+0x2a0>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe67 	bl	800029c <__adddf3>
 80085ce:	4632      	mov	r2, r6
 80085d0:	463b      	mov	r3, r7
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	a37e      	add	r3, pc, #504	; (adr r3, 80087d0 <__ieee754_acos+0x2a8>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f7f7 fe5c 	bl	8000298 <__aeabi_dsub>
 80085e0:	4632      	mov	r2, r6
 80085e2:	463b      	mov	r3, r7
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	a37b      	add	r3, pc, #492	; (adr r3, 80087d8 <__ieee754_acos+0x2b0>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f7 fe55 	bl	800029c <__adddf3>
 80085f2:	4632      	mov	r2, r6
 80085f4:	463b      	mov	r3, r7
 80085f6:	f7f8 f807 	bl	8000608 <__aeabi_dmul>
 80085fa:	a379      	add	r3, pc, #484	; (adr r3, 80087e0 <__ieee754_acos+0x2b8>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 fffe 	bl	8000608 <__aeabi_dmul>
 800860c:	a376      	add	r3, pc, #472	; (adr r3, 80087e8 <__ieee754_acos+0x2c0>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fe41 	bl	8000298 <__aeabi_dsub>
 8008616:	4632      	mov	r2, r6
 8008618:	463b      	mov	r3, r7
 800861a:	f7f7 fff5 	bl	8000608 <__aeabi_dmul>
 800861e:	a374      	add	r3, pc, #464	; (adr r3, 80087f0 <__ieee754_acos+0x2c8>)
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f7 fe3a 	bl	800029c <__adddf3>
 8008628:	4632      	mov	r2, r6
 800862a:	463b      	mov	r3, r7
 800862c:	f7f7 ffec 	bl	8000608 <__aeabi_dmul>
 8008630:	a371      	add	r3, pc, #452	; (adr r3, 80087f8 <__ieee754_acos+0x2d0>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f7 fe2f 	bl	8000298 <__aeabi_dsub>
 800863a:	4632      	mov	r2, r6
 800863c:	463b      	mov	r3, r7
 800863e:	f7f7 ffe3 	bl	8000608 <__aeabi_dmul>
 8008642:	4b76      	ldr	r3, [pc, #472]	; (800881c <__ieee754_acos+0x2f4>)
 8008644:	2200      	movs	r2, #0
 8008646:	f7f7 fe29 	bl	800029c <__adddf3>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4640      	mov	r0, r8
 8008650:	4649      	mov	r1, r9
 8008652:	f7f8 f903 	bl	800085c <__aeabi_ddiv>
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	f7f7 ffd5 	bl	8000608 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	a167      	add	r1, pc, #412	; (adr r1, 8008800 <__ieee754_acos+0x2d8>)
 8008664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008668:	f7f7 fe16 	bl	8000298 <__aeabi_dsub>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	f7f7 fe10 	bl	8000298 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	a162      	add	r1, pc, #392	; (adr r1, 8008808 <__ieee754_acos+0x2e0>)
 800867e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008682:	f7f7 fe09 	bl	8000298 <__aeabi_dsub>
 8008686:	e771      	b.n	800856c <__ieee754_acos+0x44>
 8008688:	2d00      	cmp	r5, #0
 800868a:	f280 80cb 	bge.w	8008824 <__ieee754_acos+0x2fc>
 800868e:	ee10 0a10 	vmov	r0, s0
 8008692:	4b62      	ldr	r3, [pc, #392]	; (800881c <__ieee754_acos+0x2f4>)
 8008694:	2200      	movs	r2, #0
 8008696:	4629      	mov	r1, r5
 8008698:	f7f7 fe00 	bl	800029c <__adddf3>
 800869c:	4b60      	ldr	r3, [pc, #384]	; (8008820 <__ieee754_acos+0x2f8>)
 800869e:	2200      	movs	r2, #0
 80086a0:	f7f7 ffb2 	bl	8000608 <__aeabi_dmul>
 80086a4:	a342      	add	r3, pc, #264	; (adr r3, 80087b0 <__ieee754_acos+0x288>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	a341      	add	r3, pc, #260	; (adr r3, 80087b8 <__ieee754_acos+0x290>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 fdf0 	bl	800029c <__adddf3>
 80086bc:	4622      	mov	r2, r4
 80086be:	462b      	mov	r3, r5
 80086c0:	f7f7 ffa2 	bl	8000608 <__aeabi_dmul>
 80086c4:	a33e      	add	r3, pc, #248	; (adr r3, 80087c0 <__ieee754_acos+0x298>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	f7f7 fde5 	bl	8000298 <__aeabi_dsub>
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	f7f7 ff99 	bl	8000608 <__aeabi_dmul>
 80086d6:	a33c      	add	r3, pc, #240	; (adr r3, 80087c8 <__ieee754_acos+0x2a0>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fdde 	bl	800029c <__adddf3>
 80086e0:	4622      	mov	r2, r4
 80086e2:	462b      	mov	r3, r5
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	a339      	add	r3, pc, #228	; (adr r3, 80087d0 <__ieee754_acos+0x2a8>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	4622      	mov	r2, r4
 80086f4:	462b      	mov	r3, r5
 80086f6:	f7f7 ff87 	bl	8000608 <__aeabi_dmul>
 80086fa:	a337      	add	r3, pc, #220	; (adr r3, 80087d8 <__ieee754_acos+0x2b0>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	4622      	mov	r2, r4
 8008706:	462b      	mov	r3, r5
 8008708:	f7f7 ff7e 	bl	8000608 <__aeabi_dmul>
 800870c:	ec45 4b10 	vmov	d0, r4, r5
 8008710:	4680      	mov	r8, r0
 8008712:	4689      	mov	r9, r1
 8008714:	f000 fe54 	bl	80093c0 <__ieee754_sqrt>
 8008718:	a331      	add	r3, pc, #196	; (adr r3, 80087e0 <__ieee754_acos+0x2b8>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	ec57 6b10 	vmov	r6, r7, d0
 8008726:	f7f7 ff6f 	bl	8000608 <__aeabi_dmul>
 800872a:	a32f      	add	r3, pc, #188	; (adr r3, 80087e8 <__ieee754_acos+0x2c0>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 fdb2 	bl	8000298 <__aeabi_dsub>
 8008734:	4622      	mov	r2, r4
 8008736:	462b      	mov	r3, r5
 8008738:	f7f7 ff66 	bl	8000608 <__aeabi_dmul>
 800873c:	a32c      	add	r3, pc, #176	; (adr r3, 80087f0 <__ieee754_acos+0x2c8>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fdab 	bl	800029c <__adddf3>
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	f7f7 ff5d 	bl	8000608 <__aeabi_dmul>
 800874e:	a32a      	add	r3, pc, #168	; (adr r3, 80087f8 <__ieee754_acos+0x2d0>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 fda0 	bl	8000298 <__aeabi_dsub>
 8008758:	4622      	mov	r2, r4
 800875a:	462b      	mov	r3, r5
 800875c:	f7f7 ff54 	bl	8000608 <__aeabi_dmul>
 8008760:	4b2e      	ldr	r3, [pc, #184]	; (800881c <__ieee754_acos+0x2f4>)
 8008762:	2200      	movs	r2, #0
 8008764:	f7f7 fd9a 	bl	800029c <__adddf3>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4640      	mov	r0, r8
 800876e:	4649      	mov	r1, r9
 8008770:	f7f8 f874 	bl	800085c <__aeabi_ddiv>
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	f7f7 ff46 	bl	8000608 <__aeabi_dmul>
 800877c:	a320      	add	r3, pc, #128	; (adr r3, 8008800 <__ieee754_acos+0x2d8>)
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f7f7 fd89 	bl	8000298 <__aeabi_dsub>
 8008786:	4632      	mov	r2, r6
 8008788:	463b      	mov	r3, r7
 800878a:	f7f7 fd87 	bl	800029c <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	f7f7 fd83 	bl	800029c <__adddf3>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	a103      	add	r1, pc, #12	; (adr r1, 80087a8 <__ieee754_acos+0x280>)
 800879c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a0:	e76f      	b.n	8008682 <__ieee754_acos+0x15a>
 80087a2:	bf00      	nop
 80087a4:	f3af 8000 	nop.w
 80087a8:	54442d18 	.word	0x54442d18
 80087ac:	400921fb 	.word	0x400921fb
 80087b0:	0dfdf709 	.word	0x0dfdf709
 80087b4:	3f023de1 	.word	0x3f023de1
 80087b8:	7501b288 	.word	0x7501b288
 80087bc:	3f49efe0 	.word	0x3f49efe0
 80087c0:	b5688f3b 	.word	0xb5688f3b
 80087c4:	3fa48228 	.word	0x3fa48228
 80087c8:	0e884455 	.word	0x0e884455
 80087cc:	3fc9c155 	.word	0x3fc9c155
 80087d0:	03eb6f7d 	.word	0x03eb6f7d
 80087d4:	3fd4d612 	.word	0x3fd4d612
 80087d8:	55555555 	.word	0x55555555
 80087dc:	3fc55555 	.word	0x3fc55555
 80087e0:	b12e9282 	.word	0xb12e9282
 80087e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80087e8:	1b8d0159 	.word	0x1b8d0159
 80087ec:	3fe6066c 	.word	0x3fe6066c
 80087f0:	9c598ac8 	.word	0x9c598ac8
 80087f4:	40002ae5 	.word	0x40002ae5
 80087f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80087fc:	40033a27 	.word	0x40033a27
 8008800:	33145c07 	.word	0x33145c07
 8008804:	3c91a626 	.word	0x3c91a626
 8008808:	54442d18 	.word	0x54442d18
 800880c:	3ff921fb 	.word	0x3ff921fb
 8008810:	3fefffff 	.word	0x3fefffff
 8008814:	3fdfffff 	.word	0x3fdfffff
 8008818:	3c600000 	.word	0x3c600000
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	3fe00000 	.word	0x3fe00000
 8008824:	ee10 2a10 	vmov	r2, s0
 8008828:	462b      	mov	r3, r5
 800882a:	496d      	ldr	r1, [pc, #436]	; (80089e0 <__ieee754_acos+0x4b8>)
 800882c:	2000      	movs	r0, #0
 800882e:	f7f7 fd33 	bl	8000298 <__aeabi_dsub>
 8008832:	4b6c      	ldr	r3, [pc, #432]	; (80089e4 <__ieee754_acos+0x4bc>)
 8008834:	2200      	movs	r2, #0
 8008836:	f7f7 fee7 	bl	8000608 <__aeabi_dmul>
 800883a:	4604      	mov	r4, r0
 800883c:	460d      	mov	r5, r1
 800883e:	ec45 4b10 	vmov	d0, r4, r5
 8008842:	f000 fdbd 	bl	80093c0 <__ieee754_sqrt>
 8008846:	a34e      	add	r3, pc, #312	; (adr r3, 8008980 <__ieee754_acos+0x458>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	4620      	mov	r0, r4
 800884e:	4629      	mov	r1, r5
 8008850:	ec59 8b10 	vmov	r8, r9, d0
 8008854:	f7f7 fed8 	bl	8000608 <__aeabi_dmul>
 8008858:	a34b      	add	r3, pc, #300	; (adr r3, 8008988 <__ieee754_acos+0x460>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fd1d 	bl	800029c <__adddf3>
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	f7f7 fecf 	bl	8000608 <__aeabi_dmul>
 800886a:	a349      	add	r3, pc, #292	; (adr r3, 8008990 <__ieee754_acos+0x468>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f7f7 fd12 	bl	8000298 <__aeabi_dsub>
 8008874:	4622      	mov	r2, r4
 8008876:	462b      	mov	r3, r5
 8008878:	f7f7 fec6 	bl	8000608 <__aeabi_dmul>
 800887c:	a346      	add	r3, pc, #280	; (adr r3, 8008998 <__ieee754_acos+0x470>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 fd0b 	bl	800029c <__adddf3>
 8008886:	4622      	mov	r2, r4
 8008888:	462b      	mov	r3, r5
 800888a:	f7f7 febd 	bl	8000608 <__aeabi_dmul>
 800888e:	a344      	add	r3, pc, #272	; (adr r3, 80089a0 <__ieee754_acos+0x478>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f7 fd00 	bl	8000298 <__aeabi_dsub>
 8008898:	4622      	mov	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	f7f7 feb4 	bl	8000608 <__aeabi_dmul>
 80088a0:	a341      	add	r3, pc, #260	; (adr r3, 80089a8 <__ieee754_acos+0x480>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fcf9 	bl	800029c <__adddf3>
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	f7f7 feab 	bl	8000608 <__aeabi_dmul>
 80088b2:	a33f      	add	r3, pc, #252	; (adr r3, 80089b0 <__ieee754_acos+0x488>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	4682      	mov	sl, r0
 80088ba:	468b      	mov	fp, r1
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f7 fea2 	bl	8000608 <__aeabi_dmul>
 80088c4:	a33c      	add	r3, pc, #240	; (adr r3, 80089b8 <__ieee754_acos+0x490>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fce5 	bl	8000298 <__aeabi_dsub>
 80088ce:	4622      	mov	r2, r4
 80088d0:	462b      	mov	r3, r5
 80088d2:	f7f7 fe99 	bl	8000608 <__aeabi_dmul>
 80088d6:	a33a      	add	r3, pc, #232	; (adr r3, 80089c0 <__ieee754_acos+0x498>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fcde 	bl	800029c <__adddf3>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	f7f7 fe90 	bl	8000608 <__aeabi_dmul>
 80088e8:	a337      	add	r3, pc, #220	; (adr r3, 80089c8 <__ieee754_acos+0x4a0>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fcd3 	bl	8000298 <__aeabi_dsub>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	f7f7 fe87 	bl	8000608 <__aeabi_dmul>
 80088fa:	4b39      	ldr	r3, [pc, #228]	; (80089e0 <__ieee754_acos+0x4b8>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	f7f7 fccd 	bl	800029c <__adddf3>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4650      	mov	r0, sl
 8008908:	4659      	mov	r1, fp
 800890a:	f7f7 ffa7 	bl	800085c <__aeabi_ddiv>
 800890e:	4642      	mov	r2, r8
 8008910:	464b      	mov	r3, r9
 8008912:	f7f7 fe79 	bl	8000608 <__aeabi_dmul>
 8008916:	2600      	movs	r6, #0
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	4632      	mov	r2, r6
 800891e:	464b      	mov	r3, r9
 8008920:	4630      	mov	r0, r6
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fe70 	bl	8000608 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fcb2 	bl	8000298 <__aeabi_dsub>
 8008934:	4632      	mov	r2, r6
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
 800893a:	464b      	mov	r3, r9
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f7 fcac 	bl	800029c <__adddf3>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4620      	mov	r0, r4
 800894a:	4629      	mov	r1, r5
 800894c:	f7f7 ff86 	bl	800085c <__aeabi_ddiv>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4650      	mov	r0, sl
 8008956:	4659      	mov	r1, fp
 8008958:	f7f7 fca0 	bl	800029c <__adddf3>
 800895c:	4632      	mov	r2, r6
 800895e:	464b      	mov	r3, r9
 8008960:	f7f7 fc9c 	bl	800029c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	f7f7 fc98 	bl	800029c <__adddf3>
 800896c:	e5fe      	b.n	800856c <__ieee754_acos+0x44>
 800896e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80089d0 <__ieee754_acos+0x4a8>
 8008972:	e5ed      	b.n	8008550 <__ieee754_acos+0x28>
 8008974:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80089d8 <__ieee754_acos+0x4b0>
 8008978:	e5ea      	b.n	8008550 <__ieee754_acos+0x28>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	0dfdf709 	.word	0x0dfdf709
 8008984:	3f023de1 	.word	0x3f023de1
 8008988:	7501b288 	.word	0x7501b288
 800898c:	3f49efe0 	.word	0x3f49efe0
 8008990:	b5688f3b 	.word	0xb5688f3b
 8008994:	3fa48228 	.word	0x3fa48228
 8008998:	0e884455 	.word	0x0e884455
 800899c:	3fc9c155 	.word	0x3fc9c155
 80089a0:	03eb6f7d 	.word	0x03eb6f7d
 80089a4:	3fd4d612 	.word	0x3fd4d612
 80089a8:	55555555 	.word	0x55555555
 80089ac:	3fc55555 	.word	0x3fc55555
 80089b0:	b12e9282 	.word	0xb12e9282
 80089b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80089b8:	1b8d0159 	.word	0x1b8d0159
 80089bc:	3fe6066c 	.word	0x3fe6066c
 80089c0:	9c598ac8 	.word	0x9c598ac8
 80089c4:	40002ae5 	.word	0x40002ae5
 80089c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80089cc:	40033a27 	.word	0x40033a27
	...
 80089d8:	54442d18 	.word	0x54442d18
 80089dc:	3ff921fb 	.word	0x3ff921fb
 80089e0:	3ff00000 	.word	0x3ff00000
 80089e4:	3fe00000 	.word	0x3fe00000

080089e8 <__ieee754_asin>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	ed2d 8b04 	vpush	{d8-d9}
 80089f0:	ec55 4b10 	vmov	r4, r5, d0
 80089f4:	4bcc      	ldr	r3, [pc, #816]	; (8008d28 <__ieee754_asin+0x340>)
 80089f6:	b083      	sub	sp, #12
 80089f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80089fc:	4598      	cmp	r8, r3
 80089fe:	9501      	str	r5, [sp, #4]
 8008a00:	dd35      	ble.n	8008a6e <__ieee754_asin+0x86>
 8008a02:	ee10 3a10 	vmov	r3, s0
 8008a06:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8008a0a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8008a0e:	ea58 0303 	orrs.w	r3, r8, r3
 8008a12:	d117      	bne.n	8008a44 <__ieee754_asin+0x5c>
 8008a14:	a3aa      	add	r3, pc, #680	; (adr r3, 8008cc0 <__ieee754_asin+0x2d8>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	ee10 0a10 	vmov	r0, s0
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	a3a8      	add	r3, pc, #672	; (adr r3, 8008cc8 <__ieee754_asin+0x2e0>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fde9 	bl	8000608 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	f7f7 fc2d 	bl	800029c <__adddf3>
 8008a42:	e00b      	b.n	8008a5c <__ieee754_asin+0x74>
 8008a44:	ee10 2a10 	vmov	r2, s0
 8008a48:	462b      	mov	r3, r5
 8008a4a:	ee10 0a10 	vmov	r0, s0
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fc22 	bl	8000298 <__aeabi_dsub>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	f7f7 ff00 	bl	800085c <__aeabi_ddiv>
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	ec45 4b10 	vmov	d0, r4, r5
 8008a64:	b003      	add	sp, #12
 8008a66:	ecbd 8b04 	vpop	{d8-d9}
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	4baf      	ldr	r3, [pc, #700]	; (8008d2c <__ieee754_asin+0x344>)
 8008a70:	4598      	cmp	r8, r3
 8008a72:	dc11      	bgt.n	8008a98 <__ieee754_asin+0xb0>
 8008a74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008a78:	f280 80ae 	bge.w	8008bd8 <__ieee754_asin+0x1f0>
 8008a7c:	a394      	add	r3, pc, #592	; (adr r3, 8008cd0 <__ieee754_asin+0x2e8>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	ee10 0a10 	vmov	r0, s0
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fc08 	bl	800029c <__adddf3>
 8008a8c:	4ba8      	ldr	r3, [pc, #672]	; (8008d30 <__ieee754_asin+0x348>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f7f8 f84a 	bl	8000b28 <__aeabi_dcmpgt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d1e3      	bne.n	8008a60 <__ieee754_asin+0x78>
 8008a98:	ec45 4b10 	vmov	d0, r4, r5
 8008a9c:	f7ff fbc0 	bl	8008220 <fabs>
 8008aa0:	49a3      	ldr	r1, [pc, #652]	; (8008d30 <__ieee754_asin+0x348>)
 8008aa2:	ec53 2b10 	vmov	r2, r3, d0
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f7f7 fbf6 	bl	8000298 <__aeabi_dsub>
 8008aac:	4ba1      	ldr	r3, [pc, #644]	; (8008d34 <__ieee754_asin+0x34c>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f7f7 fdaa 	bl	8000608 <__aeabi_dmul>
 8008ab4:	a388      	add	r3, pc, #544	; (adr r3, 8008cd8 <__ieee754_asin+0x2f0>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	a387      	add	r3, pc, #540	; (adr r3, 8008ce0 <__ieee754_asin+0x2f8>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fbe8 	bl	800029c <__adddf3>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fd9a 	bl	8000608 <__aeabi_dmul>
 8008ad4:	a384      	add	r3, pc, #528	; (adr r3, 8008ce8 <__ieee754_asin+0x300>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fbdd 	bl	8000298 <__aeabi_dsub>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	f7f7 fd91 	bl	8000608 <__aeabi_dmul>
 8008ae6:	a382      	add	r3, pc, #520	; (adr r3, 8008cf0 <__ieee754_asin+0x308>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fbd6 	bl	800029c <__adddf3>
 8008af0:	4622      	mov	r2, r4
 8008af2:	462b      	mov	r3, r5
 8008af4:	f7f7 fd88 	bl	8000608 <__aeabi_dmul>
 8008af8:	a37f      	add	r3, pc, #508	; (adr r3, 8008cf8 <__ieee754_asin+0x310>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fbcb 	bl	8000298 <__aeabi_dsub>
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	f7f7 fd7f 	bl	8000608 <__aeabi_dmul>
 8008b0a:	a37d      	add	r3, pc, #500	; (adr r3, 8008d00 <__ieee754_asin+0x318>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fbc4 	bl	800029c <__adddf3>
 8008b14:	4622      	mov	r2, r4
 8008b16:	462b      	mov	r3, r5
 8008b18:	f7f7 fd76 	bl	8000608 <__aeabi_dmul>
 8008b1c:	a37a      	add	r3, pc, #488	; (adr r3, 8008d08 <__ieee754_asin+0x320>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	ec41 0b18 	vmov	d8, r0, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fd6d 	bl	8000608 <__aeabi_dmul>
 8008b2e:	a378      	add	r3, pc, #480	; (adr r3, 8008d10 <__ieee754_asin+0x328>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fbb0 	bl	8000298 <__aeabi_dsub>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	f7f7 fd64 	bl	8000608 <__aeabi_dmul>
 8008b40:	a375      	add	r3, pc, #468	; (adr r3, 8008d18 <__ieee754_asin+0x330>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fba9 	bl	800029c <__adddf3>
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	f7f7 fd5b 	bl	8000608 <__aeabi_dmul>
 8008b52:	a373      	add	r3, pc, #460	; (adr r3, 8008d20 <__ieee754_asin+0x338>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fb9e 	bl	8000298 <__aeabi_dsub>
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	462b      	mov	r3, r5
 8008b60:	f7f7 fd52 	bl	8000608 <__aeabi_dmul>
 8008b64:	4b72      	ldr	r3, [pc, #456]	; (8008d30 <__ieee754_asin+0x348>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	f7f7 fb98 	bl	800029c <__adddf3>
 8008b6c:	ec45 4b10 	vmov	d0, r4, r5
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	f000 fc24 	bl	80093c0 <__ieee754_sqrt>
 8008b78:	4b6f      	ldr	r3, [pc, #444]	; (8008d38 <__ieee754_asin+0x350>)
 8008b7a:	4598      	cmp	r8, r3
 8008b7c:	ec5b ab10 	vmov	sl, fp, d0
 8008b80:	f340 80dc 	ble.w	8008d3c <__ieee754_asin+0x354>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	ec51 0b18 	vmov	r0, r1, d8
 8008b8c:	f7f7 fe66 	bl	800085c <__aeabi_ddiv>
 8008b90:	4652      	mov	r2, sl
 8008b92:	465b      	mov	r3, fp
 8008b94:	f7f7 fd38 	bl	8000608 <__aeabi_dmul>
 8008b98:	4652      	mov	r2, sl
 8008b9a:	465b      	mov	r3, fp
 8008b9c:	f7f7 fb7e 	bl	800029c <__adddf3>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	f7f7 fb7a 	bl	800029c <__adddf3>
 8008ba8:	a347      	add	r3, pc, #284	; (adr r3, 8008cc8 <__ieee754_asin+0x2e0>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb73 	bl	8000298 <__aeabi_dsub>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	a142      	add	r1, pc, #264	; (adr r1, 8008cc0 <__ieee754_asin+0x2d8>)
 8008bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bbc:	f7f7 fb6c 	bl	8000298 <__aeabi_dsub>
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfdc      	itt	le
 8008bc6:	4602      	movle	r2, r0
 8008bc8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	bfdc      	itt	le
 8008bd2:	4614      	movle	r4, r2
 8008bd4:	461d      	movle	r5, r3
 8008bd6:	e743      	b.n	8008a60 <__ieee754_asin+0x78>
 8008bd8:	ee10 2a10 	vmov	r2, s0
 8008bdc:	ee10 0a10 	vmov	r0, s0
 8008be0:	462b      	mov	r3, r5
 8008be2:	4629      	mov	r1, r5
 8008be4:	f7f7 fd10 	bl	8000608 <__aeabi_dmul>
 8008be8:	a33b      	add	r3, pc, #236	; (adr r3, 8008cd8 <__ieee754_asin+0x2f0>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	f7f7 fd09 	bl	8000608 <__aeabi_dmul>
 8008bf6:	a33a      	add	r3, pc, #232	; (adr r3, 8008ce0 <__ieee754_asin+0x2f8>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fb4e 	bl	800029c <__adddf3>
 8008c00:	4632      	mov	r2, r6
 8008c02:	463b      	mov	r3, r7
 8008c04:	f7f7 fd00 	bl	8000608 <__aeabi_dmul>
 8008c08:	a337      	add	r3, pc, #220	; (adr r3, 8008ce8 <__ieee754_asin+0x300>)
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fb43 	bl	8000298 <__aeabi_dsub>
 8008c12:	4632      	mov	r2, r6
 8008c14:	463b      	mov	r3, r7
 8008c16:	f7f7 fcf7 	bl	8000608 <__aeabi_dmul>
 8008c1a:	a335      	add	r3, pc, #212	; (adr r3, 8008cf0 <__ieee754_asin+0x308>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fb3c 	bl	800029c <__adddf3>
 8008c24:	4632      	mov	r2, r6
 8008c26:	463b      	mov	r3, r7
 8008c28:	f7f7 fcee 	bl	8000608 <__aeabi_dmul>
 8008c2c:	a332      	add	r3, pc, #200	; (adr r3, 8008cf8 <__ieee754_asin+0x310>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	f7f7 fb31 	bl	8000298 <__aeabi_dsub>
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	a330      	add	r3, pc, #192	; (adr r3, 8008d00 <__ieee754_asin+0x318>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 fb2a 	bl	800029c <__adddf3>
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	a32d      	add	r3, pc, #180	; (adr r3, 8008d08 <__ieee754_asin+0x320>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	4680      	mov	r8, r0
 8008c58:	4689      	mov	r9, r1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fcd3 	bl	8000608 <__aeabi_dmul>
 8008c62:	a32b      	add	r3, pc, #172	; (adr r3, 8008d10 <__ieee754_asin+0x328>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f7f7 fb16 	bl	8000298 <__aeabi_dsub>
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	463b      	mov	r3, r7
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	a328      	add	r3, pc, #160	; (adr r3, 8008d18 <__ieee754_asin+0x330>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fb0f 	bl	800029c <__adddf3>
 8008c7e:	4632      	mov	r2, r6
 8008c80:	463b      	mov	r3, r7
 8008c82:	f7f7 fcc1 	bl	8000608 <__aeabi_dmul>
 8008c86:	a326      	add	r3, pc, #152	; (adr r3, 8008d20 <__ieee754_asin+0x338>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fb04 	bl	8000298 <__aeabi_dsub>
 8008c90:	4632      	mov	r2, r6
 8008c92:	463b      	mov	r3, r7
 8008c94:	f7f7 fcb8 	bl	8000608 <__aeabi_dmul>
 8008c98:	4b25      	ldr	r3, [pc, #148]	; (8008d30 <__ieee754_asin+0x348>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f7f7 fafe 	bl	800029c <__adddf3>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 fdd8 	bl	800085c <__aeabi_ddiv>
 8008cac:	4622      	mov	r2, r4
 8008cae:	462b      	mov	r3, r5
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	4629      	mov	r1, r5
 8008cbc:	e6bf      	b.n	8008a3e <__ieee754_asin+0x56>
 8008cbe:	bf00      	nop
 8008cc0:	54442d18 	.word	0x54442d18
 8008cc4:	3ff921fb 	.word	0x3ff921fb
 8008cc8:	33145c07 	.word	0x33145c07
 8008ccc:	3c91a626 	.word	0x3c91a626
 8008cd0:	8800759c 	.word	0x8800759c
 8008cd4:	7e37e43c 	.word	0x7e37e43c
 8008cd8:	0dfdf709 	.word	0x0dfdf709
 8008cdc:	3f023de1 	.word	0x3f023de1
 8008ce0:	7501b288 	.word	0x7501b288
 8008ce4:	3f49efe0 	.word	0x3f49efe0
 8008ce8:	b5688f3b 	.word	0xb5688f3b
 8008cec:	3fa48228 	.word	0x3fa48228
 8008cf0:	0e884455 	.word	0x0e884455
 8008cf4:	3fc9c155 	.word	0x3fc9c155
 8008cf8:	03eb6f7d 	.word	0x03eb6f7d
 8008cfc:	3fd4d612 	.word	0x3fd4d612
 8008d00:	55555555 	.word	0x55555555
 8008d04:	3fc55555 	.word	0x3fc55555
 8008d08:	b12e9282 	.word	0xb12e9282
 8008d0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008d10:	1b8d0159 	.word	0x1b8d0159
 8008d14:	3fe6066c 	.word	0x3fe6066c
 8008d18:	9c598ac8 	.word	0x9c598ac8
 8008d1c:	40002ae5 	.word	0x40002ae5
 8008d20:	1c8a2d4b 	.word	0x1c8a2d4b
 8008d24:	40033a27 	.word	0x40033a27
 8008d28:	3fefffff 	.word	0x3fefffff
 8008d2c:	3fdfffff 	.word	0x3fdfffff
 8008d30:	3ff00000 	.word	0x3ff00000
 8008d34:	3fe00000 	.word	0x3fe00000
 8008d38:	3fef3332 	.word	0x3fef3332
 8008d3c:	ee10 2a10 	vmov	r2, s0
 8008d40:	ee10 0a10 	vmov	r0, s0
 8008d44:	465b      	mov	r3, fp
 8008d46:	4659      	mov	r1, fp
 8008d48:	f7f7 faa8 	bl	800029c <__adddf3>
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	ec41 0b19 	vmov	d9, r0, r1
 8008d54:	ec51 0b18 	vmov	r0, r1, d8
 8008d58:	f7f7 fd80 	bl	800085c <__aeabi_ddiv>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	ec51 0b19 	vmov	r0, r1, d9
 8008d64:	f7f7 fc50 	bl	8000608 <__aeabi_dmul>
 8008d68:	f04f 0800 	mov.w	r8, #0
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	4642      	mov	r2, r8
 8008d72:	465b      	mov	r3, fp
 8008d74:	4640      	mov	r0, r8
 8008d76:	4659      	mov	r1, fp
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4620      	mov	r0, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	f7f7 fa88 	bl	8000298 <__aeabi_dsub>
 8008d88:	4642      	mov	r2, r8
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	465b      	mov	r3, fp
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	f7f7 fa82 	bl	800029c <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fd5c 	bl	800085c <__aeabi_ddiv>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	f7f7 fa78 	bl	800029c <__adddf3>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	a113      	add	r1, pc, #76	; (adr r1, 8008e00 <__ieee754_asin+0x418>)
 8008db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db6:	f7f7 fa6f 	bl	8000298 <__aeabi_dsub>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	f7f7 fa69 	bl	8000298 <__aeabi_dsub>
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	465b      	mov	r3, fp
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	f7f7 fa63 	bl	800029c <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	a10b      	add	r1, pc, #44	; (adr r1, 8008e08 <__ieee754_asin+0x420>)
 8008ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de0:	f7f7 fa5a 	bl	8000298 <__aeabi_dsub>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fa54 	bl	8000298 <__aeabi_dsub>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	a104      	add	r1, pc, #16	; (adr r1, 8008e08 <__ieee754_asin+0x420>)
 8008df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfa:	e6df      	b.n	8008bbc <__ieee754_asin+0x1d4>
 8008dfc:	f3af 8000 	nop.w
 8008e00:	33145c07 	.word	0x33145c07
 8008e04:	3c91a626 	.word	0x3c91a626
 8008e08:	54442d18 	.word	0x54442d18
 8008e0c:	3fe921fb 	.word	0x3fe921fb

08008e10 <__ieee754_atan2>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	ec57 6b11 	vmov	r6, r7, d1
 8008e18:	4273      	negs	r3, r6
 8008e1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008fa0 <__ieee754_atan2+0x190>
 8008e1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008e22:	4333      	orrs	r3, r6
 8008e24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e28:	4573      	cmp	r3, lr
 8008e2a:	ec51 0b10 	vmov	r0, r1, d0
 8008e2e:	ee11 8a10 	vmov	r8, s2
 8008e32:	d80a      	bhi.n	8008e4a <__ieee754_atan2+0x3a>
 8008e34:	4244      	negs	r4, r0
 8008e36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e3a:	4304      	orrs	r4, r0
 8008e3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008e40:	4574      	cmp	r4, lr
 8008e42:	ee10 9a10 	vmov	r9, s0
 8008e46:	468c      	mov	ip, r1
 8008e48:	d907      	bls.n	8008e5a <__ieee754_atan2+0x4a>
 8008e4a:	4632      	mov	r2, r6
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	f7f7 fa25 	bl	800029c <__adddf3>
 8008e52:	ec41 0b10 	vmov	d0, r0, r1
 8008e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e62:	4334      	orrs	r4, r6
 8008e64:	d103      	bne.n	8008e6e <__ieee754_atan2+0x5e>
 8008e66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e6a:	f7fe bfe5 	b.w	8007e38 <atan>
 8008e6e:	17bc      	asrs	r4, r7, #30
 8008e70:	f004 0402 	and.w	r4, r4, #2
 8008e74:	ea53 0909 	orrs.w	r9, r3, r9
 8008e78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e7c:	d107      	bne.n	8008e8e <__ieee754_atan2+0x7e>
 8008e7e:	2c02      	cmp	r4, #2
 8008e80:	d060      	beq.n	8008f44 <__ieee754_atan2+0x134>
 8008e82:	2c03      	cmp	r4, #3
 8008e84:	d1e5      	bne.n	8008e52 <__ieee754_atan2+0x42>
 8008e86:	a142      	add	r1, pc, #264	; (adr r1, 8008f90 <__ieee754_atan2+0x180>)
 8008e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e8c:	e7e1      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008e8e:	ea52 0808 	orrs.w	r8, r2, r8
 8008e92:	d106      	bne.n	8008ea2 <__ieee754_atan2+0x92>
 8008e94:	f1bc 0f00 	cmp.w	ip, #0
 8008e98:	da5f      	bge.n	8008f5a <__ieee754_atan2+0x14a>
 8008e9a:	a13f      	add	r1, pc, #252	; (adr r1, 8008f98 <__ieee754_atan2+0x188>)
 8008e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea0:	e7d7      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008ea2:	4572      	cmp	r2, lr
 8008ea4:	d10f      	bne.n	8008ec6 <__ieee754_atan2+0xb6>
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	f104 34ff 	add.w	r4, r4, #4294967295
 8008eac:	d107      	bne.n	8008ebe <__ieee754_atan2+0xae>
 8008eae:	2c02      	cmp	r4, #2
 8008eb0:	d84c      	bhi.n	8008f4c <__ieee754_atan2+0x13c>
 8008eb2:	4b35      	ldr	r3, [pc, #212]	; (8008f88 <__ieee754_atan2+0x178>)
 8008eb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008eb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008ebc:	e7c9      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008ebe:	2c02      	cmp	r4, #2
 8008ec0:	d848      	bhi.n	8008f54 <__ieee754_atan2+0x144>
 8008ec2:	4b32      	ldr	r3, [pc, #200]	; (8008f8c <__ieee754_atan2+0x17c>)
 8008ec4:	e7f6      	b.n	8008eb4 <__ieee754_atan2+0xa4>
 8008ec6:	4573      	cmp	r3, lr
 8008ec8:	d0e4      	beq.n	8008e94 <__ieee754_atan2+0x84>
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008ed0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ed4:	da1e      	bge.n	8008f14 <__ieee754_atan2+0x104>
 8008ed6:	2f00      	cmp	r7, #0
 8008ed8:	da01      	bge.n	8008ede <__ieee754_atan2+0xce>
 8008eda:	323c      	adds	r2, #60	; 0x3c
 8008edc:	db1e      	blt.n	8008f1c <__ieee754_atan2+0x10c>
 8008ede:	4632      	mov	r2, r6
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	f7f7 fcbb 	bl	800085c <__aeabi_ddiv>
 8008ee6:	ec41 0b10 	vmov	d0, r0, r1
 8008eea:	f7ff f999 	bl	8008220 <fabs>
 8008eee:	f7fe ffa3 	bl	8007e38 <atan>
 8008ef2:	ec51 0b10 	vmov	r0, r1, d0
 8008ef6:	2c01      	cmp	r4, #1
 8008ef8:	d013      	beq.n	8008f22 <__ieee754_atan2+0x112>
 8008efa:	2c02      	cmp	r4, #2
 8008efc:	d015      	beq.n	8008f2a <__ieee754_atan2+0x11a>
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d0a7      	beq.n	8008e52 <__ieee754_atan2+0x42>
 8008f02:	a319      	add	r3, pc, #100	; (adr r3, 8008f68 <__ieee754_atan2+0x158>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 f9c6 	bl	8000298 <__aeabi_dsub>
 8008f0c:	a318      	add	r3, pc, #96	; (adr r3, 8008f70 <__ieee754_atan2+0x160>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	e014      	b.n	8008f3e <__ieee754_atan2+0x12e>
 8008f14:	a118      	add	r1, pc, #96	; (adr r1, 8008f78 <__ieee754_atan2+0x168>)
 8008f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1a:	e7ec      	b.n	8008ef6 <__ieee754_atan2+0xe6>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	e7e9      	b.n	8008ef6 <__ieee754_atan2+0xe6>
 8008f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f26:	4619      	mov	r1, r3
 8008f28:	e793      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f2a:	a30f      	add	r3, pc, #60	; (adr r3, 8008f68 <__ieee754_atan2+0x158>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 f9b2 	bl	8000298 <__aeabi_dsub>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	a10d      	add	r1, pc, #52	; (adr r1, 8008f70 <__ieee754_atan2+0x160>)
 8008f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3e:	f7f7 f9ab 	bl	8000298 <__aeabi_dsub>
 8008f42:	e786      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f44:	a10a      	add	r1, pc, #40	; (adr r1, 8008f70 <__ieee754_atan2+0x160>)
 8008f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f4a:	e782      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f4c:	a10c      	add	r1, pc, #48	; (adr r1, 8008f80 <__ieee754_atan2+0x170>)
 8008f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f52:	e77e      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f54:	2000      	movs	r0, #0
 8008f56:	2100      	movs	r1, #0
 8008f58:	e77b      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f5a:	a107      	add	r1, pc, #28	; (adr r1, 8008f78 <__ieee754_atan2+0x168>)
 8008f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f60:	e777      	b.n	8008e52 <__ieee754_atan2+0x42>
 8008f62:	bf00      	nop
 8008f64:	f3af 8000 	nop.w
 8008f68:	33145c07 	.word	0x33145c07
 8008f6c:	3ca1a626 	.word	0x3ca1a626
 8008f70:	54442d18 	.word	0x54442d18
 8008f74:	400921fb 	.word	0x400921fb
 8008f78:	54442d18 	.word	0x54442d18
 8008f7c:	3ff921fb 	.word	0x3ff921fb
 8008f80:	54442d18 	.word	0x54442d18
 8008f84:	3fe921fb 	.word	0x3fe921fb
 8008f88:	0800c050 	.word	0x0800c050
 8008f8c:	0800c068 	.word	0x0800c068
 8008f90:	54442d18 	.word	0x54442d18
 8008f94:	c00921fb 	.word	0xc00921fb
 8008f98:	54442d18 	.word	0x54442d18
 8008f9c:	bff921fb 	.word	0xbff921fb
 8008fa0:	7ff00000 	.word	0x7ff00000
 8008fa4:	00000000 	.word	0x00000000

08008fa8 <__ieee754_rem_pio2>:
 8008fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	ed2d 8b02 	vpush	{d8}
 8008fb0:	ec55 4b10 	vmov	r4, r5, d0
 8008fb4:	4bca      	ldr	r3, [pc, #808]	; (80092e0 <__ieee754_rem_pio2+0x338>)
 8008fb6:	b08b      	sub	sp, #44	; 0x2c
 8008fb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008fbc:	4598      	cmp	r8, r3
 8008fbe:	4682      	mov	sl, r0
 8008fc0:	9502      	str	r5, [sp, #8]
 8008fc2:	dc08      	bgt.n	8008fd6 <__ieee754_rem_pio2+0x2e>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	ed80 0b00 	vstr	d0, [r0]
 8008fcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008fd0:	f04f 0b00 	mov.w	fp, #0
 8008fd4:	e028      	b.n	8009028 <__ieee754_rem_pio2+0x80>
 8008fd6:	4bc3      	ldr	r3, [pc, #780]	; (80092e4 <__ieee754_rem_pio2+0x33c>)
 8008fd8:	4598      	cmp	r8, r3
 8008fda:	dc78      	bgt.n	80090ce <__ieee754_rem_pio2+0x126>
 8008fdc:	9b02      	ldr	r3, [sp, #8]
 8008fde:	4ec2      	ldr	r6, [pc, #776]	; (80092e8 <__ieee754_rem_pio2+0x340>)
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	ee10 0a10 	vmov	r0, s0
 8008fe6:	a3b0      	add	r3, pc, #704	; (adr r3, 80092a8 <__ieee754_rem_pio2+0x300>)
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	4629      	mov	r1, r5
 8008fee:	dd39      	ble.n	8009064 <__ieee754_rem_pio2+0xbc>
 8008ff0:	f7f7 f952 	bl	8000298 <__aeabi_dsub>
 8008ff4:	45b0      	cmp	r8, r6
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	d01b      	beq.n	8009034 <__ieee754_rem_pio2+0x8c>
 8008ffc:	a3ac      	add	r3, pc, #688	; (adr r3, 80092b0 <__ieee754_rem_pio2+0x308>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f949 	bl	8000298 <__aeabi_dsub>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	e9ca 2300 	strd	r2, r3, [sl]
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 f941 	bl	8000298 <__aeabi_dsub>
 8009016:	a3a6      	add	r3, pc, #664	; (adr r3, 80092b0 <__ieee754_rem_pio2+0x308>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f93c 	bl	8000298 <__aeabi_dsub>
 8009020:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009024:	f04f 0b01 	mov.w	fp, #1
 8009028:	4658      	mov	r0, fp
 800902a:	b00b      	add	sp, #44	; 0x2c
 800902c:	ecbd 8b02 	vpop	{d8}
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	a3a0      	add	r3, pc, #640	; (adr r3, 80092b8 <__ieee754_rem_pio2+0x310>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f92d 	bl	8000298 <__aeabi_dsub>
 800903e:	a3a0      	add	r3, pc, #640	; (adr r3, 80092c0 <__ieee754_rem_pio2+0x318>)
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	4604      	mov	r4, r0
 8009046:	460d      	mov	r5, r1
 8009048:	f7f7 f926 	bl	8000298 <__aeabi_dsub>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	e9ca 2300 	strd	r2, r3, [sl]
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 f91e 	bl	8000298 <__aeabi_dsub>
 800905c:	a398      	add	r3, pc, #608	; (adr r3, 80092c0 <__ieee754_rem_pio2+0x318>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	e7db      	b.n	800901c <__ieee754_rem_pio2+0x74>
 8009064:	f7f7 f91a 	bl	800029c <__adddf3>
 8009068:	45b0      	cmp	r8, r6
 800906a:	4604      	mov	r4, r0
 800906c:	460d      	mov	r5, r1
 800906e:	d016      	beq.n	800909e <__ieee754_rem_pio2+0xf6>
 8009070:	a38f      	add	r3, pc, #572	; (adr r3, 80092b0 <__ieee754_rem_pio2+0x308>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 f911 	bl	800029c <__adddf3>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	e9ca 2300 	strd	r2, r3, [sl]
 8009082:	4620      	mov	r0, r4
 8009084:	4629      	mov	r1, r5
 8009086:	f7f7 f907 	bl	8000298 <__aeabi_dsub>
 800908a:	a389      	add	r3, pc, #548	; (adr r3, 80092b0 <__ieee754_rem_pio2+0x308>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f904 	bl	800029c <__adddf3>
 8009094:	f04f 3bff 	mov.w	fp, #4294967295
 8009098:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800909c:	e7c4      	b.n	8009028 <__ieee754_rem_pio2+0x80>
 800909e:	a386      	add	r3, pc, #536	; (adr r3, 80092b8 <__ieee754_rem_pio2+0x310>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 f8fa 	bl	800029c <__adddf3>
 80090a8:	a385      	add	r3, pc, #532	; (adr r3, 80092c0 <__ieee754_rem_pio2+0x318>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	f7f7 f8f3 	bl	800029c <__adddf3>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	e9ca 2300 	strd	r2, r3, [sl]
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 f8e9 	bl	8000298 <__aeabi_dsub>
 80090c6:	a37e      	add	r3, pc, #504	; (adr r3, 80092c0 <__ieee754_rem_pio2+0x318>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	e7e0      	b.n	8009090 <__ieee754_rem_pio2+0xe8>
 80090ce:	4b87      	ldr	r3, [pc, #540]	; (80092ec <__ieee754_rem_pio2+0x344>)
 80090d0:	4598      	cmp	r8, r3
 80090d2:	f300 80d9 	bgt.w	8009288 <__ieee754_rem_pio2+0x2e0>
 80090d6:	f7ff f8a3 	bl	8008220 <fabs>
 80090da:	ec55 4b10 	vmov	r4, r5, d0
 80090de:	ee10 0a10 	vmov	r0, s0
 80090e2:	a379      	add	r3, pc, #484	; (adr r3, 80092c8 <__ieee754_rem_pio2+0x320>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 fa8d 	bl	8000608 <__aeabi_dmul>
 80090ee:	4b80      	ldr	r3, [pc, #512]	; (80092f0 <__ieee754_rem_pio2+0x348>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 f8d3 	bl	800029c <__adddf3>
 80090f6:	f7f7 fd37 	bl	8000b68 <__aeabi_d2iz>
 80090fa:	4683      	mov	fp, r0
 80090fc:	f7f7 fa1a 	bl	8000534 <__aeabi_i2d>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	ec43 2b18 	vmov	d8, r2, r3
 8009108:	a367      	add	r3, pc, #412	; (adr r3, 80092a8 <__ieee754_rem_pio2+0x300>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa7b 	bl	8000608 <__aeabi_dmul>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 f8bd 	bl	8000298 <__aeabi_dsub>
 800911e:	a364      	add	r3, pc, #400	; (adr r3, 80092b0 <__ieee754_rem_pio2+0x308>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	ec51 0b18 	vmov	r0, r1, d8
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	f1bb 0f1f 	cmp.w	fp, #31
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	dc0d      	bgt.n	8009156 <__ieee754_rem_pio2+0x1ae>
 800913a:	4b6e      	ldr	r3, [pc, #440]	; (80092f4 <__ieee754_rem_pio2+0x34c>)
 800913c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009144:	4543      	cmp	r3, r8
 8009146:	d006      	beq.n	8009156 <__ieee754_rem_pio2+0x1ae>
 8009148:	4622      	mov	r2, r4
 800914a:	462b      	mov	r3, r5
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 f8a2 	bl	8000298 <__aeabi_dsub>
 8009154:	e00f      	b.n	8009176 <__ieee754_rem_pio2+0x1ce>
 8009156:	462b      	mov	r3, r5
 8009158:	4622      	mov	r2, r4
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 f89b 	bl	8000298 <__aeabi_dsub>
 8009162:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800916c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009170:	f1b8 0f10 	cmp.w	r8, #16
 8009174:	dc02      	bgt.n	800917c <__ieee754_rem_pio2+0x1d4>
 8009176:	e9ca 0100 	strd	r0, r1, [sl]
 800917a:	e039      	b.n	80091f0 <__ieee754_rem_pio2+0x248>
 800917c:	a34e      	add	r3, pc, #312	; (adr r3, 80092b8 <__ieee754_rem_pio2+0x310>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	ec51 0b18 	vmov	r0, r1, d8
 8009186:	f7f7 fa3f 	bl	8000608 <__aeabi_dmul>
 800918a:	4604      	mov	r4, r0
 800918c:	460d      	mov	r5, r1
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4630      	mov	r0, r6
 8009194:	4639      	mov	r1, r7
 8009196:	f7f7 f87f 	bl	8000298 <__aeabi_dsub>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4680      	mov	r8, r0
 80091a0:	4689      	mov	r9, r1
 80091a2:	4630      	mov	r0, r6
 80091a4:	4639      	mov	r1, r7
 80091a6:	f7f7 f877 	bl	8000298 <__aeabi_dsub>
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	f7f7 f873 	bl	8000298 <__aeabi_dsub>
 80091b2:	a343      	add	r3, pc, #268	; (adr r3, 80092c0 <__ieee754_rem_pio2+0x318>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	4604      	mov	r4, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	ec51 0b18 	vmov	r0, r1, d8
 80091c0:	f7f7 fa22 	bl	8000608 <__aeabi_dmul>
 80091c4:	4622      	mov	r2, r4
 80091c6:	462b      	mov	r3, r5
 80091c8:	f7f7 f866 	bl	8000298 <__aeabi_dsub>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4604      	mov	r4, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 f85e 	bl	8000298 <__aeabi_dsub>
 80091dc:	9a03      	ldr	r2, [sp, #12]
 80091de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b31      	cmp	r3, #49	; 0x31
 80091e6:	dc24      	bgt.n	8009232 <__ieee754_rem_pio2+0x28a>
 80091e8:	e9ca 0100 	strd	r0, r1, [sl]
 80091ec:	4646      	mov	r6, r8
 80091ee:	464f      	mov	r7, r9
 80091f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80091f4:	4630      	mov	r0, r6
 80091f6:	4642      	mov	r2, r8
 80091f8:	464b      	mov	r3, r9
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f84c 	bl	8000298 <__aeabi_dsub>
 8009200:	462b      	mov	r3, r5
 8009202:	4622      	mov	r2, r4
 8009204:	f7f7 f848 	bl	8000298 <__aeabi_dsub>
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009210:	f6bf af0a 	bge.w	8009028 <__ieee754_rem_pio2+0x80>
 8009214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009218:	f8ca 3004 	str.w	r3, [sl, #4]
 800921c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009220:	f8ca 8000 	str.w	r8, [sl]
 8009224:	f8ca 0008 	str.w	r0, [sl, #8]
 8009228:	f8ca 300c 	str.w	r3, [sl, #12]
 800922c:	f1cb 0b00 	rsb	fp, fp, #0
 8009230:	e6fa      	b.n	8009028 <__ieee754_rem_pio2+0x80>
 8009232:	a327      	add	r3, pc, #156	; (adr r3, 80092d0 <__ieee754_rem_pio2+0x328>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	ec51 0b18 	vmov	r0, r1, d8
 800923c:	f7f7 f9e4 	bl	8000608 <__aeabi_dmul>
 8009240:	4604      	mov	r4, r0
 8009242:	460d      	mov	r5, r1
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4640      	mov	r0, r8
 800924a:	4649      	mov	r1, r9
 800924c:	f7f7 f824 	bl	8000298 <__aeabi_dsub>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	4606      	mov	r6, r0
 8009256:	460f      	mov	r7, r1
 8009258:	4640      	mov	r0, r8
 800925a:	4649      	mov	r1, r9
 800925c:	f7f7 f81c 	bl	8000298 <__aeabi_dsub>
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	f7f7 f818 	bl	8000298 <__aeabi_dsub>
 8009268:	a31b      	add	r3, pc, #108	; (adr r3, 80092d8 <__ieee754_rem_pio2+0x330>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	ec51 0b18 	vmov	r0, r1, d8
 8009276:	f7f7 f9c7 	bl	8000608 <__aeabi_dmul>
 800927a:	4622      	mov	r2, r4
 800927c:	462b      	mov	r3, r5
 800927e:	f7f7 f80b 	bl	8000298 <__aeabi_dsub>
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
 8009286:	e75f      	b.n	8009148 <__ieee754_rem_pio2+0x1a0>
 8009288:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <__ieee754_rem_pio2+0x350>)
 800928a:	4598      	cmp	r8, r3
 800928c:	dd36      	ble.n	80092fc <__ieee754_rem_pio2+0x354>
 800928e:	ee10 2a10 	vmov	r2, s0
 8009292:	462b      	mov	r3, r5
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f6 fffe 	bl	8000298 <__aeabi_dsub>
 800929c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092a0:	e9ca 0100 	strd	r0, r1, [sl]
 80092a4:	e694      	b.n	8008fd0 <__ieee754_rem_pio2+0x28>
 80092a6:	bf00      	nop
 80092a8:	54400000 	.word	0x54400000
 80092ac:	3ff921fb 	.word	0x3ff921fb
 80092b0:	1a626331 	.word	0x1a626331
 80092b4:	3dd0b461 	.word	0x3dd0b461
 80092b8:	1a600000 	.word	0x1a600000
 80092bc:	3dd0b461 	.word	0x3dd0b461
 80092c0:	2e037073 	.word	0x2e037073
 80092c4:	3ba3198a 	.word	0x3ba3198a
 80092c8:	6dc9c883 	.word	0x6dc9c883
 80092cc:	3fe45f30 	.word	0x3fe45f30
 80092d0:	2e000000 	.word	0x2e000000
 80092d4:	3ba3198a 	.word	0x3ba3198a
 80092d8:	252049c1 	.word	0x252049c1
 80092dc:	397b839a 	.word	0x397b839a
 80092e0:	3fe921fb 	.word	0x3fe921fb
 80092e4:	4002d97b 	.word	0x4002d97b
 80092e8:	3ff921fb 	.word	0x3ff921fb
 80092ec:	413921fb 	.word	0x413921fb
 80092f0:	3fe00000 	.word	0x3fe00000
 80092f4:	0800c080 	.word	0x0800c080
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009300:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009304:	ee10 0a10 	vmov	r0, s0
 8009308:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800930c:	ee10 6a10 	vmov	r6, s0
 8009310:	460f      	mov	r7, r1
 8009312:	f7f7 fc29 	bl	8000b68 <__aeabi_d2iz>
 8009316:	f7f7 f90d 	bl	8000534 <__aeabi_i2d>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4630      	mov	r0, r6
 8009320:	4639      	mov	r1, r7
 8009322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009326:	f7f6 ffb7 	bl	8000298 <__aeabi_dsub>
 800932a:	4b23      	ldr	r3, [pc, #140]	; (80093b8 <__ieee754_rem_pio2+0x410>)
 800932c:	2200      	movs	r2, #0
 800932e:	f7f7 f96b 	bl	8000608 <__aeabi_dmul>
 8009332:	460f      	mov	r7, r1
 8009334:	4606      	mov	r6, r0
 8009336:	f7f7 fc17 	bl	8000b68 <__aeabi_d2iz>
 800933a:	f7f7 f8fb 	bl	8000534 <__aeabi_i2d>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4630      	mov	r0, r6
 8009344:	4639      	mov	r1, r7
 8009346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800934a:	f7f6 ffa5 	bl	8000298 <__aeabi_dsub>
 800934e:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <__ieee754_rem_pio2+0x410>)
 8009350:	2200      	movs	r2, #0
 8009352:	f7f7 f959 	bl	8000608 <__aeabi_dmul>
 8009356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800935a:	ad04      	add	r5, sp, #16
 800935c:	f04f 0803 	mov.w	r8, #3
 8009360:	46a9      	mov	r9, r5
 8009362:	2600      	movs	r6, #0
 8009364:	2700      	movs	r7, #0
 8009366:	4632      	mov	r2, r6
 8009368:	463b      	mov	r3, r7
 800936a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800936e:	46c3      	mov	fp, r8
 8009370:	3d08      	subs	r5, #8
 8009372:	f108 38ff 	add.w	r8, r8, #4294967295
 8009376:	f7f7 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800937a:	2800      	cmp	r0, #0
 800937c:	d1f3      	bne.n	8009366 <__ieee754_rem_pio2+0x3be>
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <__ieee754_rem_pio2+0x414>)
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	2302      	movs	r3, #2
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4622      	mov	r2, r4
 8009388:	465b      	mov	r3, fp
 800938a:	4651      	mov	r1, sl
 800938c:	4648      	mov	r0, r9
 800938e:	f000 f993 	bl	80096b8 <__kernel_rem_pio2>
 8009392:	9b02      	ldr	r3, [sp, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	4683      	mov	fp, r0
 8009398:	f6bf ae46 	bge.w	8009028 <__ieee754_rem_pio2+0x80>
 800939c:	e9da 2100 	ldrd	r2, r1, [sl]
 80093a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093a4:	e9ca 2300 	strd	r2, r3, [sl]
 80093a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80093ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80093b4:	e73a      	b.n	800922c <__ieee754_rem_pio2+0x284>
 80093b6:	bf00      	nop
 80093b8:	41700000 	.word	0x41700000
 80093bc:	0800c100 	.word	0x0800c100

080093c0 <__ieee754_sqrt>:
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	ec55 4b10 	vmov	r4, r5, d0
 80093c8:	4e55      	ldr	r6, [pc, #340]	; (8009520 <__ieee754_sqrt+0x160>)
 80093ca:	43ae      	bics	r6, r5
 80093cc:	ee10 0a10 	vmov	r0, s0
 80093d0:	ee10 3a10 	vmov	r3, s0
 80093d4:	462a      	mov	r2, r5
 80093d6:	4629      	mov	r1, r5
 80093d8:	d110      	bne.n	80093fc <__ieee754_sqrt+0x3c>
 80093da:	ee10 2a10 	vmov	r2, s0
 80093de:	462b      	mov	r3, r5
 80093e0:	f7f7 f912 	bl	8000608 <__aeabi_dmul>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4620      	mov	r0, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	f7f6 ff56 	bl	800029c <__adddf3>
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	ec45 4b10 	vmov	d0, r4, r5
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	dc10      	bgt.n	8009422 <__ieee754_sqrt+0x62>
 8009400:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009404:	4330      	orrs	r0, r6
 8009406:	d0f5      	beq.n	80093f4 <__ieee754_sqrt+0x34>
 8009408:	b15d      	cbz	r5, 8009422 <__ieee754_sqrt+0x62>
 800940a:	ee10 2a10 	vmov	r2, s0
 800940e:	462b      	mov	r3, r5
 8009410:	ee10 0a10 	vmov	r0, s0
 8009414:	f7f6 ff40 	bl	8000298 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	f7f7 fa1e 	bl	800085c <__aeabi_ddiv>
 8009420:	e7e6      	b.n	80093f0 <__ieee754_sqrt+0x30>
 8009422:	1512      	asrs	r2, r2, #20
 8009424:	d074      	beq.n	8009510 <__ieee754_sqrt+0x150>
 8009426:	07d4      	lsls	r4, r2, #31
 8009428:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800942c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009430:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009434:	bf5e      	ittt	pl
 8009436:	0fda      	lsrpl	r2, r3, #31
 8009438:	005b      	lslpl	r3, r3, #1
 800943a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800943e:	2400      	movs	r4, #0
 8009440:	0fda      	lsrs	r2, r3, #31
 8009442:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009446:	107f      	asrs	r7, r7, #1
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	2516      	movs	r5, #22
 800944c:	4620      	mov	r0, r4
 800944e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009452:	1886      	adds	r6, r0, r2
 8009454:	428e      	cmp	r6, r1
 8009456:	bfde      	ittt	le
 8009458:	1b89      	suble	r1, r1, r6
 800945a:	18b0      	addle	r0, r6, r2
 800945c:	18a4      	addle	r4, r4, r2
 800945e:	0049      	lsls	r1, r1, #1
 8009460:	3d01      	subs	r5, #1
 8009462:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009466:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800946a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800946e:	d1f0      	bne.n	8009452 <__ieee754_sqrt+0x92>
 8009470:	462a      	mov	r2, r5
 8009472:	f04f 0e20 	mov.w	lr, #32
 8009476:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800947a:	4281      	cmp	r1, r0
 800947c:	eb06 0c05 	add.w	ip, r6, r5
 8009480:	dc02      	bgt.n	8009488 <__ieee754_sqrt+0xc8>
 8009482:	d113      	bne.n	80094ac <__ieee754_sqrt+0xec>
 8009484:	459c      	cmp	ip, r3
 8009486:	d811      	bhi.n	80094ac <__ieee754_sqrt+0xec>
 8009488:	f1bc 0f00 	cmp.w	ip, #0
 800948c:	eb0c 0506 	add.w	r5, ip, r6
 8009490:	da43      	bge.n	800951a <__ieee754_sqrt+0x15a>
 8009492:	2d00      	cmp	r5, #0
 8009494:	db41      	blt.n	800951a <__ieee754_sqrt+0x15a>
 8009496:	f100 0801 	add.w	r8, r0, #1
 800949a:	1a09      	subs	r1, r1, r0
 800949c:	459c      	cmp	ip, r3
 800949e:	bf88      	it	hi
 80094a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80094a4:	eba3 030c 	sub.w	r3, r3, ip
 80094a8:	4432      	add	r2, r6
 80094aa:	4640      	mov	r0, r8
 80094ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80094b0:	f1be 0e01 	subs.w	lr, lr, #1
 80094b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80094b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80094c0:	d1db      	bne.n	800947a <__ieee754_sqrt+0xba>
 80094c2:	430b      	orrs	r3, r1
 80094c4:	d006      	beq.n	80094d4 <__ieee754_sqrt+0x114>
 80094c6:	1c50      	adds	r0, r2, #1
 80094c8:	bf13      	iteet	ne
 80094ca:	3201      	addne	r2, #1
 80094cc:	3401      	addeq	r4, #1
 80094ce:	4672      	moveq	r2, lr
 80094d0:	f022 0201 	bicne.w	r2, r2, #1
 80094d4:	1063      	asrs	r3, r4, #1
 80094d6:	0852      	lsrs	r2, r2, #1
 80094d8:	07e1      	lsls	r1, r4, #31
 80094da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80094e2:	bf48      	it	mi
 80094e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80094e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80094ec:	4614      	mov	r4, r2
 80094ee:	e781      	b.n	80093f4 <__ieee754_sqrt+0x34>
 80094f0:	0ad9      	lsrs	r1, r3, #11
 80094f2:	3815      	subs	r0, #21
 80094f4:	055b      	lsls	r3, r3, #21
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d0fa      	beq.n	80094f0 <__ieee754_sqrt+0x130>
 80094fa:	02cd      	lsls	r5, r1, #11
 80094fc:	d50a      	bpl.n	8009514 <__ieee754_sqrt+0x154>
 80094fe:	f1c2 0420 	rsb	r4, r2, #32
 8009502:	fa23 f404 	lsr.w	r4, r3, r4
 8009506:	1e55      	subs	r5, r2, #1
 8009508:	4093      	lsls	r3, r2
 800950a:	4321      	orrs	r1, r4
 800950c:	1b42      	subs	r2, r0, r5
 800950e:	e78a      	b.n	8009426 <__ieee754_sqrt+0x66>
 8009510:	4610      	mov	r0, r2
 8009512:	e7f0      	b.n	80094f6 <__ieee754_sqrt+0x136>
 8009514:	0049      	lsls	r1, r1, #1
 8009516:	3201      	adds	r2, #1
 8009518:	e7ef      	b.n	80094fa <__ieee754_sqrt+0x13a>
 800951a:	4680      	mov	r8, r0
 800951c:	e7bd      	b.n	800949a <__ieee754_sqrt+0xda>
 800951e:	bf00      	nop
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	00000000 	.word	0x00000000

08009528 <__kernel_cos>:
 8009528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	ec57 6b10 	vmov	r6, r7, d0
 8009530:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009534:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009538:	ed8d 1b00 	vstr	d1, [sp]
 800953c:	da07      	bge.n	800954e <__kernel_cos+0x26>
 800953e:	ee10 0a10 	vmov	r0, s0
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 fb10 	bl	8000b68 <__aeabi_d2iz>
 8009548:	2800      	cmp	r0, #0
 800954a:	f000 8088 	beq.w	800965e <__kernel_cos+0x136>
 800954e:	4632      	mov	r2, r6
 8009550:	463b      	mov	r3, r7
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 f857 	bl	8000608 <__aeabi_dmul>
 800955a:	4b51      	ldr	r3, [pc, #324]	; (80096a0 <__kernel_cos+0x178>)
 800955c:	2200      	movs	r2, #0
 800955e:	4604      	mov	r4, r0
 8009560:	460d      	mov	r5, r1
 8009562:	f7f7 f851 	bl	8000608 <__aeabi_dmul>
 8009566:	a340      	add	r3, pc, #256	; (adr r3, 8009668 <__kernel_cos+0x140>)
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	4682      	mov	sl, r0
 800956e:	468b      	mov	fp, r1
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f7f7 f848 	bl	8000608 <__aeabi_dmul>
 8009578:	a33d      	add	r3, pc, #244	; (adr r3, 8009670 <__kernel_cos+0x148>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f6 fe8d 	bl	800029c <__adddf3>
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	f7f7 f83f 	bl	8000608 <__aeabi_dmul>
 800958a:	a33b      	add	r3, pc, #236	; (adr r3, 8009678 <__kernel_cos+0x150>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f6 fe82 	bl	8000298 <__aeabi_dsub>
 8009594:	4622      	mov	r2, r4
 8009596:	462b      	mov	r3, r5
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	a338      	add	r3, pc, #224	; (adr r3, 8009680 <__kernel_cos+0x158>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f6 fe7b 	bl	800029c <__adddf3>
 80095a6:	4622      	mov	r2, r4
 80095a8:	462b      	mov	r3, r5
 80095aa:	f7f7 f82d 	bl	8000608 <__aeabi_dmul>
 80095ae:	a336      	add	r3, pc, #216	; (adr r3, 8009688 <__kernel_cos+0x160>)
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f6 fe70 	bl	8000298 <__aeabi_dsub>
 80095b8:	4622      	mov	r2, r4
 80095ba:	462b      	mov	r3, r5
 80095bc:	f7f7 f824 	bl	8000608 <__aeabi_dmul>
 80095c0:	a333      	add	r3, pc, #204	; (adr r3, 8009690 <__kernel_cos+0x168>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f6 fe69 	bl	800029c <__adddf3>
 80095ca:	4622      	mov	r2, r4
 80095cc:	462b      	mov	r3, r5
 80095ce:	f7f7 f81b 	bl	8000608 <__aeabi_dmul>
 80095d2:	4622      	mov	r2, r4
 80095d4:	462b      	mov	r3, r5
 80095d6:	f7f7 f817 	bl	8000608 <__aeabi_dmul>
 80095da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f7 f80f 	bl	8000608 <__aeabi_dmul>
 80095ea:	460b      	mov	r3, r1
 80095ec:	4602      	mov	r2, r0
 80095ee:	4629      	mov	r1, r5
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7f6 fe51 	bl	8000298 <__aeabi_dsub>
 80095f6:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <__kernel_cos+0x17c>)
 80095f8:	4598      	cmp	r8, r3
 80095fa:	4606      	mov	r6, r0
 80095fc:	460f      	mov	r7, r1
 80095fe:	dc10      	bgt.n	8009622 <__kernel_cos+0xfa>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4650      	mov	r0, sl
 8009606:	4659      	mov	r1, fp
 8009608:	f7f6 fe46 	bl	8000298 <__aeabi_dsub>
 800960c:	460b      	mov	r3, r1
 800960e:	4926      	ldr	r1, [pc, #152]	; (80096a8 <__kernel_cos+0x180>)
 8009610:	4602      	mov	r2, r0
 8009612:	2000      	movs	r0, #0
 8009614:	f7f6 fe40 	bl	8000298 <__aeabi_dsub>
 8009618:	ec41 0b10 	vmov	d0, r0, r1
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	4b22      	ldr	r3, [pc, #136]	; (80096ac <__kernel_cos+0x184>)
 8009624:	4920      	ldr	r1, [pc, #128]	; (80096a8 <__kernel_cos+0x180>)
 8009626:	4598      	cmp	r8, r3
 8009628:	bfcc      	ite	gt
 800962a:	4d21      	ldrgt	r5, [pc, #132]	; (80096b0 <__kernel_cos+0x188>)
 800962c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009630:	2400      	movs	r4, #0
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	2000      	movs	r0, #0
 8009638:	f7f6 fe2e 	bl	8000298 <__aeabi_dsub>
 800963c:	4622      	mov	r2, r4
 800963e:	4680      	mov	r8, r0
 8009640:	4689      	mov	r9, r1
 8009642:	462b      	mov	r3, r5
 8009644:	4650      	mov	r0, sl
 8009646:	4659      	mov	r1, fp
 8009648:	f7f6 fe26 	bl	8000298 <__aeabi_dsub>
 800964c:	4632      	mov	r2, r6
 800964e:	463b      	mov	r3, r7
 8009650:	f7f6 fe22 	bl	8000298 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4640      	mov	r0, r8
 800965a:	4649      	mov	r1, r9
 800965c:	e7da      	b.n	8009614 <__kernel_cos+0xec>
 800965e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009698 <__kernel_cos+0x170>
 8009662:	e7db      	b.n	800961c <__kernel_cos+0xf4>
 8009664:	f3af 8000 	nop.w
 8009668:	be8838d4 	.word	0xbe8838d4
 800966c:	bda8fae9 	.word	0xbda8fae9
 8009670:	bdb4b1c4 	.word	0xbdb4b1c4
 8009674:	3e21ee9e 	.word	0x3e21ee9e
 8009678:	809c52ad 	.word	0x809c52ad
 800967c:	3e927e4f 	.word	0x3e927e4f
 8009680:	19cb1590 	.word	0x19cb1590
 8009684:	3efa01a0 	.word	0x3efa01a0
 8009688:	16c15177 	.word	0x16c15177
 800968c:	3f56c16c 	.word	0x3f56c16c
 8009690:	5555554c 	.word	0x5555554c
 8009694:	3fa55555 	.word	0x3fa55555
 8009698:	00000000 	.word	0x00000000
 800969c:	3ff00000 	.word	0x3ff00000
 80096a0:	3fe00000 	.word	0x3fe00000
 80096a4:	3fd33332 	.word	0x3fd33332
 80096a8:	3ff00000 	.word	0x3ff00000
 80096ac:	3fe90000 	.word	0x3fe90000
 80096b0:	3fd20000 	.word	0x3fd20000
 80096b4:	00000000 	.word	0x00000000

080096b8 <__kernel_rem_pio2>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	ed2d 8b02 	vpush	{d8}
 80096c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80096c4:	f112 0f14 	cmn.w	r2, #20
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	9101      	str	r1, [sp, #4]
 80096cc:	4bc4      	ldr	r3, [pc, #784]	; (80099e0 <__kernel_rem_pio2+0x328>)
 80096ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80096d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80096d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	f103 33ff 	add.w	r3, r3, #4294967295
 80096de:	bfa8      	it	ge
 80096e0:	1ed4      	subge	r4, r2, #3
 80096e2:	9306      	str	r3, [sp, #24]
 80096e4:	bfb2      	itee	lt
 80096e6:	2400      	movlt	r4, #0
 80096e8:	2318      	movge	r3, #24
 80096ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80096ee:	f06f 0317 	mvn.w	r3, #23
 80096f2:	fb04 3303 	mla	r3, r4, r3, r3
 80096f6:	eb03 0a02 	add.w	sl, r3, r2
 80096fa:	9b02      	ldr	r3, [sp, #8]
 80096fc:	9a06      	ldr	r2, [sp, #24]
 80096fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80099d0 <__kernel_rem_pio2+0x318>
 8009702:	eb03 0802 	add.w	r8, r3, r2
 8009706:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009708:	1aa7      	subs	r7, r4, r2
 800970a:	ae22      	add	r6, sp, #136	; 0x88
 800970c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009710:	2500      	movs	r5, #0
 8009712:	4545      	cmp	r5, r8
 8009714:	dd13      	ble.n	800973e <__kernel_rem_pio2+0x86>
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80099d0 <__kernel_rem_pio2+0x318>
 800971c:	aa22      	add	r2, sp, #136	; 0x88
 800971e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009722:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	4598      	cmp	r8, r3
 800972e:	dc2f      	bgt.n	8009790 <__kernel_rem_pio2+0xd8>
 8009730:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009734:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009738:	462f      	mov	r7, r5
 800973a:	2600      	movs	r6, #0
 800973c:	e01b      	b.n	8009776 <__kernel_rem_pio2+0xbe>
 800973e:	42ef      	cmn	r7, r5
 8009740:	d407      	bmi.n	8009752 <__kernel_rem_pio2+0x9a>
 8009742:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009746:	f7f6 fef5 	bl	8000534 <__aeabi_i2d>
 800974a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800974e:	3501      	adds	r5, #1
 8009750:	e7df      	b.n	8009712 <__kernel_rem_pio2+0x5a>
 8009752:	ec51 0b18 	vmov	r0, r1, d8
 8009756:	e7f8      	b.n	800974a <__kernel_rem_pio2+0x92>
 8009758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009760:	f7f6 ff52 	bl	8000608 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800976c:	f7f6 fd96 	bl	800029c <__adddf3>
 8009770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009774:	3601      	adds	r6, #1
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	429e      	cmp	r6, r3
 800977a:	f1a7 0708 	sub.w	r7, r7, #8
 800977e:	ddeb      	ble.n	8009758 <__kernel_rem_pio2+0xa0>
 8009780:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009784:	f108 0801 	add.w	r8, r8, #1
 8009788:	ecab 7b02 	vstmia	fp!, {d7}
 800978c:	3508      	adds	r5, #8
 800978e:	e7cc      	b.n	800972a <__kernel_rem_pio2+0x72>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	aa0e      	add	r2, sp, #56	; 0x38
 8009794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009798:	930d      	str	r3, [sp, #52]	; 0x34
 800979a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800979c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80097a0:	9c02      	ldr	r4, [sp, #8]
 80097a2:	930c      	str	r3, [sp, #48]	; 0x30
 80097a4:	00e3      	lsls	r3, r4, #3
 80097a6:	930a      	str	r3, [sp, #40]	; 0x28
 80097a8:	ab9a      	add	r3, sp, #616	; 0x268
 80097aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80097b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80097b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80097b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80097bc:	46c3      	mov	fp, r8
 80097be:	46a1      	mov	r9, r4
 80097c0:	f1b9 0f00 	cmp.w	r9, #0
 80097c4:	f1a5 0508 	sub.w	r5, r5, #8
 80097c8:	dc77      	bgt.n	80098ba <__kernel_rem_pio2+0x202>
 80097ca:	ec47 6b10 	vmov	d0, r6, r7
 80097ce:	4650      	mov	r0, sl
 80097d0:	f000 fd8e 	bl	800a2f0 <scalbn>
 80097d4:	ec57 6b10 	vmov	r6, r7, d0
 80097d8:	2200      	movs	r2, #0
 80097da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80097de:	ee10 0a10 	vmov	r0, s0
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f6 ff10 	bl	8000608 <__aeabi_dmul>
 80097e8:	ec41 0b10 	vmov	d0, r0, r1
 80097ec:	f7fe fd24 	bl	8008238 <floor>
 80097f0:	4b7c      	ldr	r3, [pc, #496]	; (80099e4 <__kernel_rem_pio2+0x32c>)
 80097f2:	ec51 0b10 	vmov	r0, r1, d0
 80097f6:	2200      	movs	r2, #0
 80097f8:	f7f6 ff06 	bl	8000608 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4630      	mov	r0, r6
 8009802:	4639      	mov	r1, r7
 8009804:	f7f6 fd48 	bl	8000298 <__aeabi_dsub>
 8009808:	460f      	mov	r7, r1
 800980a:	4606      	mov	r6, r0
 800980c:	f7f7 f9ac 	bl	8000b68 <__aeabi_d2iz>
 8009810:	9004      	str	r0, [sp, #16]
 8009812:	f7f6 fe8f 	bl	8000534 <__aeabi_i2d>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4630      	mov	r0, r6
 800981c:	4639      	mov	r1, r7
 800981e:	f7f6 fd3b 	bl	8000298 <__aeabi_dsub>
 8009822:	f1ba 0f00 	cmp.w	sl, #0
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	dd6d      	ble.n	8009908 <__kernel_rem_pio2+0x250>
 800982c:	1e62      	subs	r2, r4, #1
 800982e:	ab0e      	add	r3, sp, #56	; 0x38
 8009830:	9d04      	ldr	r5, [sp, #16]
 8009832:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009836:	f1ca 0118 	rsb	r1, sl, #24
 800983a:	fa40 f301 	asr.w	r3, r0, r1
 800983e:	441d      	add	r5, r3
 8009840:	408b      	lsls	r3, r1
 8009842:	1ac0      	subs	r0, r0, r3
 8009844:	ab0e      	add	r3, sp, #56	; 0x38
 8009846:	9504      	str	r5, [sp, #16]
 8009848:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800984c:	f1ca 0317 	rsb	r3, sl, #23
 8009850:	fa40 fb03 	asr.w	fp, r0, r3
 8009854:	f1bb 0f00 	cmp.w	fp, #0
 8009858:	dd65      	ble.n	8009926 <__kernel_rem_pio2+0x26e>
 800985a:	9b04      	ldr	r3, [sp, #16]
 800985c:	2200      	movs	r2, #0
 800985e:	3301      	adds	r3, #1
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	4615      	mov	r5, r2
 8009864:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009868:	4294      	cmp	r4, r2
 800986a:	f300 809c 	bgt.w	80099a6 <__kernel_rem_pio2+0x2ee>
 800986e:	f1ba 0f00 	cmp.w	sl, #0
 8009872:	dd07      	ble.n	8009884 <__kernel_rem_pio2+0x1cc>
 8009874:	f1ba 0f01 	cmp.w	sl, #1
 8009878:	f000 80c0 	beq.w	80099fc <__kernel_rem_pio2+0x344>
 800987c:	f1ba 0f02 	cmp.w	sl, #2
 8009880:	f000 80c6 	beq.w	8009a10 <__kernel_rem_pio2+0x358>
 8009884:	f1bb 0f02 	cmp.w	fp, #2
 8009888:	d14d      	bne.n	8009926 <__kernel_rem_pio2+0x26e>
 800988a:	4632      	mov	r2, r6
 800988c:	463b      	mov	r3, r7
 800988e:	4956      	ldr	r1, [pc, #344]	; (80099e8 <__kernel_rem_pio2+0x330>)
 8009890:	2000      	movs	r0, #0
 8009892:	f7f6 fd01 	bl	8000298 <__aeabi_dsub>
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	2d00      	cmp	r5, #0
 800989c:	d043      	beq.n	8009926 <__kernel_rem_pio2+0x26e>
 800989e:	4650      	mov	r0, sl
 80098a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80099d8 <__kernel_rem_pio2+0x320>
 80098a4:	f000 fd24 	bl	800a2f0 <scalbn>
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	ec53 2b10 	vmov	r2, r3, d0
 80098b0:	f7f6 fcf2 	bl	8000298 <__aeabi_dsub>
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	e035      	b.n	8009926 <__kernel_rem_pio2+0x26e>
 80098ba:	4b4c      	ldr	r3, [pc, #304]	; (80099ec <__kernel_rem_pio2+0x334>)
 80098bc:	2200      	movs	r2, #0
 80098be:	4630      	mov	r0, r6
 80098c0:	4639      	mov	r1, r7
 80098c2:	f7f6 fea1 	bl	8000608 <__aeabi_dmul>
 80098c6:	f7f7 f94f 	bl	8000b68 <__aeabi_d2iz>
 80098ca:	f7f6 fe33 	bl	8000534 <__aeabi_i2d>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	ec43 2b18 	vmov	d8, r2, r3
 80098d6:	4b46      	ldr	r3, [pc, #280]	; (80099f0 <__kernel_rem_pio2+0x338>)
 80098d8:	2200      	movs	r2, #0
 80098da:	f7f6 fe95 	bl	8000608 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f6 fcd7 	bl	8000298 <__aeabi_dsub>
 80098ea:	f7f7 f93d 	bl	8000b68 <__aeabi_d2iz>
 80098ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098f2:	f84b 0b04 	str.w	r0, [fp], #4
 80098f6:	ec51 0b18 	vmov	r0, r1, d8
 80098fa:	f7f6 fccf 	bl	800029c <__adddf3>
 80098fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	e75b      	b.n	80097c0 <__kernel_rem_pio2+0x108>
 8009908:	d106      	bne.n	8009918 <__kernel_rem_pio2+0x260>
 800990a:	1e63      	subs	r3, r4, #1
 800990c:	aa0e      	add	r2, sp, #56	; 0x38
 800990e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009912:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009916:	e79d      	b.n	8009854 <__kernel_rem_pio2+0x19c>
 8009918:	4b36      	ldr	r3, [pc, #216]	; (80099f4 <__kernel_rem_pio2+0x33c>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f7 f8fa 	bl	8000b14 <__aeabi_dcmpge>
 8009920:	2800      	cmp	r0, #0
 8009922:	d13d      	bne.n	80099a0 <__kernel_rem_pio2+0x2e8>
 8009924:	4683      	mov	fp, r0
 8009926:	2200      	movs	r2, #0
 8009928:	2300      	movs	r3, #0
 800992a:	4630      	mov	r0, r6
 800992c:	4639      	mov	r1, r7
 800992e:	f7f7 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009932:	2800      	cmp	r0, #0
 8009934:	f000 80c0 	beq.w	8009ab8 <__kernel_rem_pio2+0x400>
 8009938:	1e65      	subs	r5, r4, #1
 800993a:	462b      	mov	r3, r5
 800993c:	2200      	movs	r2, #0
 800993e:	9902      	ldr	r1, [sp, #8]
 8009940:	428b      	cmp	r3, r1
 8009942:	da6c      	bge.n	8009a1e <__kernel_rem_pio2+0x366>
 8009944:	2a00      	cmp	r2, #0
 8009946:	f000 8089 	beq.w	8009a5c <__kernel_rem_pio2+0x3a4>
 800994a:	ab0e      	add	r3, sp, #56	; 0x38
 800994c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009950:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80ad 	beq.w	8009ab4 <__kernel_rem_pio2+0x3fc>
 800995a:	4650      	mov	r0, sl
 800995c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80099d8 <__kernel_rem_pio2+0x320>
 8009960:	f000 fcc6 	bl	800a2f0 <scalbn>
 8009964:	ab9a      	add	r3, sp, #616	; 0x268
 8009966:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800996a:	ec57 6b10 	vmov	r6, r7, d0
 800996e:	00ec      	lsls	r4, r5, #3
 8009970:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009974:	46aa      	mov	sl, r5
 8009976:	f1ba 0f00 	cmp.w	sl, #0
 800997a:	f280 80d6 	bge.w	8009b2a <__kernel_rem_pio2+0x472>
 800997e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80099d0 <__kernel_rem_pio2+0x318>
 8009982:	462e      	mov	r6, r5
 8009984:	2e00      	cmp	r6, #0
 8009986:	f2c0 8104 	blt.w	8009b92 <__kernel_rem_pio2+0x4da>
 800998a:	ab72      	add	r3, sp, #456	; 0x1c8
 800998c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009990:	f8df a064 	ldr.w	sl, [pc, #100]	; 80099f8 <__kernel_rem_pio2+0x340>
 8009994:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009998:	f04f 0800 	mov.w	r8, #0
 800999c:	1baf      	subs	r7, r5, r6
 800999e:	e0ea      	b.n	8009b76 <__kernel_rem_pio2+0x4be>
 80099a0:	f04f 0b02 	mov.w	fp, #2
 80099a4:	e759      	b.n	800985a <__kernel_rem_pio2+0x1a2>
 80099a6:	f8d8 3000 	ldr.w	r3, [r8]
 80099aa:	b955      	cbnz	r5, 80099c2 <__kernel_rem_pio2+0x30a>
 80099ac:	b123      	cbz	r3, 80099b8 <__kernel_rem_pio2+0x300>
 80099ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80099b2:	f8c8 3000 	str.w	r3, [r8]
 80099b6:	2301      	movs	r3, #1
 80099b8:	3201      	adds	r2, #1
 80099ba:	f108 0804 	add.w	r8, r8, #4
 80099be:	461d      	mov	r5, r3
 80099c0:	e752      	b.n	8009868 <__kernel_rem_pio2+0x1b0>
 80099c2:	1acb      	subs	r3, r1, r3
 80099c4:	f8c8 3000 	str.w	r3, [r8]
 80099c8:	462b      	mov	r3, r5
 80099ca:	e7f5      	b.n	80099b8 <__kernel_rem_pio2+0x300>
 80099cc:	f3af 8000 	nop.w
	...
 80099dc:	3ff00000 	.word	0x3ff00000
 80099e0:	0800c248 	.word	0x0800c248
 80099e4:	40200000 	.word	0x40200000
 80099e8:	3ff00000 	.word	0x3ff00000
 80099ec:	3e700000 	.word	0x3e700000
 80099f0:	41700000 	.word	0x41700000
 80099f4:	3fe00000 	.word	0x3fe00000
 80099f8:	0800c208 	.word	0x0800c208
 80099fc:	1e62      	subs	r2, r4, #1
 80099fe:	ab0e      	add	r3, sp, #56	; 0x38
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a08:	a90e      	add	r1, sp, #56	; 0x38
 8009a0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a0e:	e739      	b.n	8009884 <__kernel_rem_pio2+0x1cc>
 8009a10:	1e62      	subs	r2, r4, #1
 8009a12:	ab0e      	add	r3, sp, #56	; 0x38
 8009a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a1c:	e7f4      	b.n	8009a08 <__kernel_rem_pio2+0x350>
 8009a1e:	a90e      	add	r1, sp, #56	; 0x38
 8009a20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	430a      	orrs	r2, r1
 8009a28:	e789      	b.n	800993e <__kernel_rem_pio2+0x286>
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0fa      	beq.n	8009a2a <__kernel_rem_pio2+0x372>
 8009a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009a3a:	446a      	add	r2, sp
 8009a3c:	3a98      	subs	r2, #152	; 0x98
 8009a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8009a40:	9a08      	ldr	r2, [sp, #32]
 8009a42:	18e3      	adds	r3, r4, r3
 8009a44:	18a5      	adds	r5, r4, r2
 8009a46:	aa22      	add	r2, sp, #136	; 0x88
 8009a48:	f104 0801 	add.w	r8, r4, #1
 8009a4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	4543      	cmp	r3, r8
 8009a56:	da04      	bge.n	8009a62 <__kernel_rem_pio2+0x3aa>
 8009a58:	461c      	mov	r4, r3
 8009a5a:	e6a3      	b.n	80097a4 <__kernel_rem_pio2+0xec>
 8009a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e7e4      	b.n	8009a2c <__kernel_rem_pio2+0x374>
 8009a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a68:	f7f6 fd64 	bl	8000534 <__aeabi_i2d>
 8009a6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a72:	46ab      	mov	fp, r5
 8009a74:	461c      	mov	r4, r3
 8009a76:	f04f 0900 	mov.w	r9, #0
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	2700      	movs	r7, #0
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	4599      	cmp	r9, r3
 8009a82:	dd06      	ble.n	8009a92 <__kernel_rem_pio2+0x3da>
 8009a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a86:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009a8a:	f108 0801 	add.w	r8, r8, #1
 8009a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a90:	e7df      	b.n	8009a52 <__kernel_rem_pio2+0x39a>
 8009a92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009a96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009a9a:	f7f6 fdb5 	bl	8000608 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f6 fbf9 	bl	800029c <__adddf3>
 8009aaa:	f109 0901 	add.w	r9, r9, #1
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	e7e4      	b.n	8009a7e <__kernel_rem_pio2+0x3c6>
 8009ab4:	3d01      	subs	r5, #1
 8009ab6:	e748      	b.n	800994a <__kernel_rem_pio2+0x292>
 8009ab8:	ec47 6b10 	vmov	d0, r6, r7
 8009abc:	f1ca 0000 	rsb	r0, sl, #0
 8009ac0:	f000 fc16 	bl	800a2f0 <scalbn>
 8009ac4:	ec57 6b10 	vmov	r6, r7, d0
 8009ac8:	4ba0      	ldr	r3, [pc, #640]	; (8009d4c <__kernel_rem_pio2+0x694>)
 8009aca:	ee10 0a10 	vmov	r0, s0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f7 f81f 	bl	8000b14 <__aeabi_dcmpge>
 8009ad6:	b1f8      	cbz	r0, 8009b18 <__kernel_rem_pio2+0x460>
 8009ad8:	4b9d      	ldr	r3, [pc, #628]	; (8009d50 <__kernel_rem_pio2+0x698>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f6 fd92 	bl	8000608 <__aeabi_dmul>
 8009ae4:	f7f7 f840 	bl	8000b68 <__aeabi_d2iz>
 8009ae8:	4680      	mov	r8, r0
 8009aea:	f7f6 fd23 	bl	8000534 <__aeabi_i2d>
 8009aee:	4b97      	ldr	r3, [pc, #604]	; (8009d4c <__kernel_rem_pio2+0x694>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	f7f6 fd89 	bl	8000608 <__aeabi_dmul>
 8009af6:	460b      	mov	r3, r1
 8009af8:	4602      	mov	r2, r0
 8009afa:	4639      	mov	r1, r7
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7f6 fbcb 	bl	8000298 <__aeabi_dsub>
 8009b02:	f7f7 f831 	bl	8000b68 <__aeabi_d2iz>
 8009b06:	1c65      	adds	r5, r4, #1
 8009b08:	ab0e      	add	r3, sp, #56	; 0x38
 8009b0a:	f10a 0a18 	add.w	sl, sl, #24
 8009b0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b12:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b16:	e720      	b.n	800995a <__kernel_rem_pio2+0x2a2>
 8009b18:	4630      	mov	r0, r6
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	f7f7 f824 	bl	8000b68 <__aeabi_d2iz>
 8009b20:	ab0e      	add	r3, sp, #56	; 0x38
 8009b22:	4625      	mov	r5, r4
 8009b24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b28:	e717      	b.n	800995a <__kernel_rem_pio2+0x2a2>
 8009b2a:	ab0e      	add	r3, sp, #56	; 0x38
 8009b2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009b30:	f7f6 fd00 	bl	8000534 <__aeabi_i2d>
 8009b34:	4632      	mov	r2, r6
 8009b36:	463b      	mov	r3, r7
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	4b84      	ldr	r3, [pc, #528]	; (8009d50 <__kernel_rem_pio2+0x698>)
 8009b3e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009b42:	2200      	movs	r2, #0
 8009b44:	4630      	mov	r0, r6
 8009b46:	4639      	mov	r1, r7
 8009b48:	f7f6 fd5e 	bl	8000608 <__aeabi_dmul>
 8009b4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b50:	4606      	mov	r6, r0
 8009b52:	460f      	mov	r7, r1
 8009b54:	e70f      	b.n	8009976 <__kernel_rem_pio2+0x2be>
 8009b56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009b5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009b5e:	f7f6 fd53 	bl	8000608 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b6a:	f7f6 fb97 	bl	800029c <__adddf3>
 8009b6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b72:	f108 0801 	add.w	r8, r8, #1
 8009b76:	9b02      	ldr	r3, [sp, #8]
 8009b78:	4598      	cmp	r8, r3
 8009b7a:	dc01      	bgt.n	8009b80 <__kernel_rem_pio2+0x4c8>
 8009b7c:	45b8      	cmp	r8, r7
 8009b7e:	ddea      	ble.n	8009b56 <__kernel_rem_pio2+0x49e>
 8009b80:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009b84:	ab4a      	add	r3, sp, #296	; 0x128
 8009b86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b8a:	ed87 7b00 	vstr	d7, [r7]
 8009b8e:	3e01      	subs	r6, #1
 8009b90:	e6f8      	b.n	8009984 <__kernel_rem_pio2+0x2cc>
 8009b92:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	dc0b      	bgt.n	8009bb0 <__kernel_rem_pio2+0x4f8>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc35      	bgt.n	8009c08 <__kernel_rem_pio2+0x550>
 8009b9c:	d059      	beq.n	8009c52 <__kernel_rem_pio2+0x59a>
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	f003 0007 	and.w	r0, r3, #7
 8009ba4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009ba8:	ecbd 8b02 	vpop	{d8}
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d1f3      	bne.n	8009b9e <__kernel_rem_pio2+0x4e6>
 8009bb6:	ab4a      	add	r3, sp, #296	; 0x128
 8009bb8:	4423      	add	r3, r4
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	461c      	mov	r4, r3
 8009bbe:	469a      	mov	sl, r3
 8009bc0:	9502      	str	r5, [sp, #8]
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f1aa 0a08 	sub.w	sl, sl, #8
 8009bca:	dc6b      	bgt.n	8009ca4 <__kernel_rem_pio2+0x5ec>
 8009bcc:	46aa      	mov	sl, r5
 8009bce:	f1ba 0f01 	cmp.w	sl, #1
 8009bd2:	f1a4 0408 	sub.w	r4, r4, #8
 8009bd6:	f300 8085 	bgt.w	8009ce4 <__kernel_rem_pio2+0x62c>
 8009bda:	9c06      	ldr	r4, [sp, #24]
 8009bdc:	2000      	movs	r0, #0
 8009bde:	3408      	adds	r4, #8
 8009be0:	2100      	movs	r1, #0
 8009be2:	2d01      	cmp	r5, #1
 8009be4:	f300 809d 	bgt.w	8009d22 <__kernel_rem_pio2+0x66a>
 8009be8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009bec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	f040 809b 	bne.w	8009d2e <__kernel_rem_pio2+0x676>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	e9c3 5600 	strd	r5, r6, [r3]
 8009bfe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009c02:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c06:	e7ca      	b.n	8009b9e <__kernel_rem_pio2+0x4e6>
 8009c08:	3408      	adds	r4, #8
 8009c0a:	ab4a      	add	r3, sp, #296	; 0x128
 8009c0c:	441c      	add	r4, r3
 8009c0e:	462e      	mov	r6, r5
 8009c10:	2000      	movs	r0, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	2e00      	cmp	r6, #0
 8009c16:	da36      	bge.n	8009c86 <__kernel_rem_pio2+0x5ce>
 8009c18:	f1bb 0f00 	cmp.w	fp, #0
 8009c1c:	d039      	beq.n	8009c92 <__kernel_rem_pio2+0x5da>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c24:	9c01      	ldr	r4, [sp, #4]
 8009c26:	e9c4 2300 	strd	r2, r3, [r4]
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009c32:	f7f6 fb31 	bl	8000298 <__aeabi_dsub>
 8009c36:	ae4c      	add	r6, sp, #304	; 0x130
 8009c38:	2401      	movs	r4, #1
 8009c3a:	42a5      	cmp	r5, r4
 8009c3c:	da2c      	bge.n	8009c98 <__kernel_rem_pio2+0x5e0>
 8009c3e:	f1bb 0f00 	cmp.w	fp, #0
 8009c42:	d002      	beq.n	8009c4a <__kernel_rem_pio2+0x592>
 8009c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c48:	4619      	mov	r1, r3
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009c50:	e7a5      	b.n	8009b9e <__kernel_rem_pio2+0x4e6>
 8009c52:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009c56:	eb0d 0403 	add.w	r4, sp, r3
 8009c5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009c5e:	2000      	movs	r0, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	da09      	bge.n	8009c7a <__kernel_rem_pio2+0x5c2>
 8009c66:	f1bb 0f00 	cmp.w	fp, #0
 8009c6a:	d002      	beq.n	8009c72 <__kernel_rem_pio2+0x5ba>
 8009c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c70:	4619      	mov	r1, r3
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	e9c3 0100 	strd	r0, r1, [r3]
 8009c78:	e791      	b.n	8009b9e <__kernel_rem_pio2+0x4e6>
 8009c7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c7e:	f7f6 fb0d 	bl	800029c <__adddf3>
 8009c82:	3d01      	subs	r5, #1
 8009c84:	e7ed      	b.n	8009c62 <__kernel_rem_pio2+0x5aa>
 8009c86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c8a:	f7f6 fb07 	bl	800029c <__adddf3>
 8009c8e:	3e01      	subs	r6, #1
 8009c90:	e7c0      	b.n	8009c14 <__kernel_rem_pio2+0x55c>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e7c5      	b.n	8009c24 <__kernel_rem_pio2+0x56c>
 8009c98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009c9c:	f7f6 fafe 	bl	800029c <__adddf3>
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	e7ca      	b.n	8009c3a <__kernel_rem_pio2+0x582>
 8009ca4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ca8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	9302      	str	r3, [sp, #8]
 8009cb2:	4632      	mov	r2, r6
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 faef 	bl	800029c <__adddf3>
 8009cbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	4649      	mov	r1, r9
 8009cca:	f7f6 fae5 	bl	8000298 <__aeabi_dsub>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	f7f6 fae3 	bl	800029c <__adddf3>
 8009cd6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009cda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cde:	ed8a 7b00 	vstr	d7, [sl]
 8009ce2:	e76e      	b.n	8009bc2 <__kernel_rem_pio2+0x50a>
 8009ce4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009ce8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009cec:	4640      	mov	r0, r8
 8009cee:	4632      	mov	r2, r6
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fad2 	bl	800029c <__adddf3>
 8009cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4640      	mov	r0, r8
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 fac8 	bl	8000298 <__aeabi_dsub>
 8009d08:	4632      	mov	r2, r6
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	f7f6 fac6 	bl	800029c <__adddf3>
 8009d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d18:	ed84 7b00 	vstr	d7, [r4]
 8009d1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d20:	e755      	b.n	8009bce <__kernel_rem_pio2+0x516>
 8009d22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d26:	f7f6 fab9 	bl	800029c <__adddf3>
 8009d2a:	3d01      	subs	r5, #1
 8009d2c:	e759      	b.n	8009be2 <__kernel_rem_pio2+0x52a>
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	601d      	str	r5, [r3, #0]
 8009d34:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009d38:	605c      	str	r4, [r3, #4]
 8009d3a:	609f      	str	r7, [r3, #8]
 8009d3c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009d40:	60d3      	str	r3, [r2, #12]
 8009d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d46:	6110      	str	r0, [r2, #16]
 8009d48:	6153      	str	r3, [r2, #20]
 8009d4a:	e728      	b.n	8009b9e <__kernel_rem_pio2+0x4e6>
 8009d4c:	41700000 	.word	0x41700000
 8009d50:	3e700000 	.word	0x3e700000
 8009d54:	00000000 	.word	0x00000000

08009d58 <__kernel_sin>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	ed2d 8b04 	vpush	{d8-d9}
 8009d60:	eeb0 8a41 	vmov.f32	s16, s2
 8009d64:	eef0 8a61 	vmov.f32	s17, s3
 8009d68:	ec55 4b10 	vmov	r4, r5, d0
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009d76:	9001      	str	r0, [sp, #4]
 8009d78:	da06      	bge.n	8009d88 <__kernel_sin+0x30>
 8009d7a:	ee10 0a10 	vmov	r0, s0
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fef2 	bl	8000b68 <__aeabi_d2iz>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d051      	beq.n	8009e2c <__kernel_sin+0xd4>
 8009d88:	4622      	mov	r2, r4
 8009d8a:	462b      	mov	r3, r5
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fc3a 	bl	8000608 <__aeabi_dmul>
 8009d94:	4682      	mov	sl, r0
 8009d96:	468b      	mov	fp, r1
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fc32 	bl	8000608 <__aeabi_dmul>
 8009da4:	a341      	add	r3, pc, #260	; (adr r3, 8009eac <__kernel_sin+0x154>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	4680      	mov	r8, r0
 8009dac:	4689      	mov	r9, r1
 8009dae:	4650      	mov	r0, sl
 8009db0:	4659      	mov	r1, fp
 8009db2:	f7f6 fc29 	bl	8000608 <__aeabi_dmul>
 8009db6:	a33f      	add	r3, pc, #252	; (adr r3, 8009eb4 <__kernel_sin+0x15c>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 fa6c 	bl	8000298 <__aeabi_dsub>
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	f7f6 fc20 	bl	8000608 <__aeabi_dmul>
 8009dc8:	a33c      	add	r3, pc, #240	; (adr r3, 8009ebc <__kernel_sin+0x164>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fa65 	bl	800029c <__adddf3>
 8009dd2:	4652      	mov	r2, sl
 8009dd4:	465b      	mov	r3, fp
 8009dd6:	f7f6 fc17 	bl	8000608 <__aeabi_dmul>
 8009dda:	a33a      	add	r3, pc, #232	; (adr r3, 8009ec4 <__kernel_sin+0x16c>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fa5a 	bl	8000298 <__aeabi_dsub>
 8009de4:	4652      	mov	r2, sl
 8009de6:	465b      	mov	r3, fp
 8009de8:	f7f6 fc0e 	bl	8000608 <__aeabi_dmul>
 8009dec:	a337      	add	r3, pc, #220	; (adr r3, 8009ecc <__kernel_sin+0x174>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fa53 	bl	800029c <__adddf3>
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	4606      	mov	r6, r0
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	b9eb      	cbnz	r3, 8009e3a <__kernel_sin+0xe2>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4650      	mov	r0, sl
 8009e04:	4659      	mov	r1, fp
 8009e06:	f7f6 fbff 	bl	8000608 <__aeabi_dmul>
 8009e0a:	a325      	add	r3, pc, #148	; (adr r3, 8009ea0 <__kernel_sin+0x148>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f7f6 fa42 	bl	8000298 <__aeabi_dsub>
 8009e14:	4642      	mov	r2, r8
 8009e16:	464b      	mov	r3, r9
 8009e18:	f7f6 fbf6 	bl	8000608 <__aeabi_dmul>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4620      	mov	r0, r4
 8009e22:	4629      	mov	r1, r5
 8009e24:	f7f6 fa3a 	bl	800029c <__adddf3>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	ec45 4b10 	vmov	d0, r4, r5
 8009e30:	b003      	add	sp, #12
 8009e32:	ecbd 8b04 	vpop	{d8-d9}
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ea8 <__kernel_sin+0x150>)
 8009e3c:	ec51 0b18 	vmov	r0, r1, d8
 8009e40:	2200      	movs	r2, #0
 8009e42:	f7f6 fbe1 	bl	8000608 <__aeabi_dmul>
 8009e46:	4632      	mov	r2, r6
 8009e48:	ec41 0b19 	vmov	d9, r0, r1
 8009e4c:	463b      	mov	r3, r7
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fbd9 	bl	8000608 <__aeabi_dmul>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	ec51 0b19 	vmov	r0, r1, d9
 8009e5e:	f7f6 fa1b 	bl	8000298 <__aeabi_dsub>
 8009e62:	4652      	mov	r2, sl
 8009e64:	465b      	mov	r3, fp
 8009e66:	f7f6 fbcf 	bl	8000608 <__aeabi_dmul>
 8009e6a:	ec53 2b18 	vmov	r2, r3, d8
 8009e6e:	f7f6 fa13 	bl	8000298 <__aeabi_dsub>
 8009e72:	a30b      	add	r3, pc, #44	; (adr r3, 8009ea0 <__kernel_sin+0x148>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	4606      	mov	r6, r0
 8009e7a:	460f      	mov	r7, r1
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	4649      	mov	r1, r9
 8009e80:	f7f6 fbc2 	bl	8000608 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fa06 	bl	800029c <__adddf3>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4620      	mov	r0, r4
 8009e96:	4629      	mov	r1, r5
 8009e98:	f7f6 f9fe 	bl	8000298 <__aeabi_dsub>
 8009e9c:	e7c4      	b.n	8009e28 <__kernel_sin+0xd0>
 8009e9e:	bf00      	nop
 8009ea0:	55555549 	.word	0x55555549
 8009ea4:	3fc55555 	.word	0x3fc55555
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	5acfd57c 	.word	0x5acfd57c
 8009eb0:	3de5d93a 	.word	0x3de5d93a
 8009eb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009eb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009ebc:	57b1fe7d 	.word	0x57b1fe7d
 8009ec0:	3ec71de3 	.word	0x3ec71de3
 8009ec4:	19c161d5 	.word	0x19c161d5
 8009ec8:	3f2a01a0 	.word	0x3f2a01a0
 8009ecc:	1110f8a6 	.word	0x1110f8a6
 8009ed0:	3f811111 	.word	0x3f811111
 8009ed4:	00000000 	.word	0x00000000

08009ed8 <__kernel_tan>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	ed2d 8b06 	vpush	{d8-d10}
 8009ee0:	ec5b ab10 	vmov	sl, fp, d0
 8009ee4:	4be0      	ldr	r3, [pc, #896]	; (800a268 <__kernel_tan+0x390>)
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009eec:	429f      	cmp	r7, r3
 8009eee:	ec59 8b11 	vmov	r8, r9, d1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	f8cd b000 	str.w	fp, [sp]
 8009ef8:	dc61      	bgt.n	8009fbe <__kernel_tan+0xe6>
 8009efa:	ee10 0a10 	vmov	r0, s0
 8009efe:	4659      	mov	r1, fp
 8009f00:	f7f6 fe32 	bl	8000b68 <__aeabi_d2iz>
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f040 8083 	bne.w	800a012 <__kernel_tan+0x13a>
 8009f0c:	1c73      	adds	r3, r6, #1
 8009f0e:	4652      	mov	r2, sl
 8009f10:	4313      	orrs	r3, r2
 8009f12:	433b      	orrs	r3, r7
 8009f14:	d112      	bne.n	8009f3c <__kernel_tan+0x64>
 8009f16:	ec4b ab10 	vmov	d0, sl, fp
 8009f1a:	f7fe f981 	bl	8008220 <fabs>
 8009f1e:	49d3      	ldr	r1, [pc, #844]	; (800a26c <__kernel_tan+0x394>)
 8009f20:	ec53 2b10 	vmov	r2, r3, d0
 8009f24:	2000      	movs	r0, #0
 8009f26:	f7f6 fc99 	bl	800085c <__aeabi_ddiv>
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	468b      	mov	fp, r1
 8009f2e:	ec4b ab10 	vmov	d0, sl, fp
 8009f32:	b003      	add	sp, #12
 8009f34:	ecbd 8b06 	vpop	{d8-d10}
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	2e01      	cmp	r6, #1
 8009f3e:	d0f6      	beq.n	8009f2e <__kernel_tan+0x56>
 8009f40:	4642      	mov	r2, r8
 8009f42:	464b      	mov	r3, r9
 8009f44:	4650      	mov	r0, sl
 8009f46:	4659      	mov	r1, fp
 8009f48:	f7f6 f9a8 	bl	800029c <__adddf3>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	460f      	mov	r7, r1
 8009f52:	2000      	movs	r0, #0
 8009f54:	49c6      	ldr	r1, [pc, #792]	; (800a270 <__kernel_tan+0x398>)
 8009f56:	f7f6 fc81 	bl	800085c <__aeabi_ddiv>
 8009f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f62:	462e      	mov	r6, r5
 8009f64:	4652      	mov	r2, sl
 8009f66:	462c      	mov	r4, r5
 8009f68:	4630      	mov	r0, r6
 8009f6a:	461d      	mov	r5, r3
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	465b      	mov	r3, fp
 8009f70:	f7f6 f992 	bl	8000298 <__aeabi_dsub>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	f7f6 f98c 	bl	8000298 <__aeabi_dsub>
 8009f80:	4632      	mov	r2, r6
 8009f82:	462b      	mov	r3, r5
 8009f84:	f7f6 fb40 	bl	8000608 <__aeabi_dmul>
 8009f88:	4632      	mov	r2, r6
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4689      	mov	r9, r1
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fb38 	bl	8000608 <__aeabi_dmul>
 8009f98:	4bb4      	ldr	r3, [pc, #720]	; (800a26c <__kernel_tan+0x394>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 f97e 	bl	800029c <__adddf3>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 f978 	bl	800029c <__adddf3>
 8009fac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb0:	f7f6 fb2a 	bl	8000608 <__aeabi_dmul>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	f7f6 f970 	bl	800029c <__adddf3>
 8009fbc:	e7b5      	b.n	8009f2a <__kernel_tan+0x52>
 8009fbe:	4bad      	ldr	r3, [pc, #692]	; (800a274 <__kernel_tan+0x39c>)
 8009fc0:	429f      	cmp	r7, r3
 8009fc2:	dd26      	ble.n	800a012 <__kernel_tan+0x13a>
 8009fc4:	9b00      	ldr	r3, [sp, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da09      	bge.n	8009fde <__kernel_tan+0x106>
 8009fca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009fce:	469b      	mov	fp, r3
 8009fd0:	ee10 aa10 	vmov	sl, s0
 8009fd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fd8:	ee11 8a10 	vmov	r8, s2
 8009fdc:	4699      	mov	r9, r3
 8009fde:	4652      	mov	r2, sl
 8009fe0:	465b      	mov	r3, fp
 8009fe2:	a183      	add	r1, pc, #524	; (adr r1, 800a1f0 <__kernel_tan+0x318>)
 8009fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe8:	f7f6 f956 	bl	8000298 <__aeabi_dsub>
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	a180      	add	r1, pc, #512	; (adr r1, 800a1f8 <__kernel_tan+0x320>)
 8009ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffa:	f7f6 f94d 	bl	8000298 <__aeabi_dsub>
 8009ffe:	4622      	mov	r2, r4
 800a000:	462b      	mov	r3, r5
 800a002:	f7f6 f94b 	bl	800029c <__adddf3>
 800a006:	f04f 0800 	mov.w	r8, #0
 800a00a:	4682      	mov	sl, r0
 800a00c:	468b      	mov	fp, r1
 800a00e:	f04f 0900 	mov.w	r9, #0
 800a012:	4652      	mov	r2, sl
 800a014:	465b      	mov	r3, fp
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	f7f6 faf5 	bl	8000608 <__aeabi_dmul>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	ec43 2b18 	vmov	d8, r2, r3
 800a026:	f7f6 faef 	bl	8000608 <__aeabi_dmul>
 800a02a:	ec53 2b18 	vmov	r2, r3, d8
 800a02e:	4604      	mov	r4, r0
 800a030:	460d      	mov	r5, r1
 800a032:	4650      	mov	r0, sl
 800a034:	4659      	mov	r1, fp
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	a371      	add	r3, pc, #452	; (adr r3, 800a200 <__kernel_tan+0x328>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	ec41 0b19 	vmov	d9, r0, r1
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	a36e      	add	r3, pc, #440	; (adr r3, 800a208 <__kernel_tan+0x330>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f7f6 f923 	bl	800029c <__adddf3>
 800a056:	4622      	mov	r2, r4
 800a058:	462b      	mov	r3, r5
 800a05a:	f7f6 fad5 	bl	8000608 <__aeabi_dmul>
 800a05e:	a36c      	add	r3, pc, #432	; (adr r3, 800a210 <__kernel_tan+0x338>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f7f6 f91a 	bl	800029c <__adddf3>
 800a068:	4622      	mov	r2, r4
 800a06a:	462b      	mov	r3, r5
 800a06c:	f7f6 facc 	bl	8000608 <__aeabi_dmul>
 800a070:	a369      	add	r3, pc, #420	; (adr r3, 800a218 <__kernel_tan+0x340>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 f911 	bl	800029c <__adddf3>
 800a07a:	4622      	mov	r2, r4
 800a07c:	462b      	mov	r3, r5
 800a07e:	f7f6 fac3 	bl	8000608 <__aeabi_dmul>
 800a082:	a367      	add	r3, pc, #412	; (adr r3, 800a220 <__kernel_tan+0x348>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 f908 	bl	800029c <__adddf3>
 800a08c:	4622      	mov	r2, r4
 800a08e:	462b      	mov	r3, r5
 800a090:	f7f6 faba 	bl	8000608 <__aeabi_dmul>
 800a094:	a364      	add	r3, pc, #400	; (adr r3, 800a228 <__kernel_tan+0x350>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 f8ff 	bl	800029c <__adddf3>
 800a09e:	ec53 2b18 	vmov	r2, r3, d8
 800a0a2:	f7f6 fab1 	bl	8000608 <__aeabi_dmul>
 800a0a6:	a362      	add	r3, pc, #392	; (adr r3, 800a230 <__kernel_tan+0x358>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	ec41 0b1a 	vmov	d10, r0, r1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 faa8 	bl	8000608 <__aeabi_dmul>
 800a0b8:	a35f      	add	r3, pc, #380	; (adr r3, 800a238 <__kernel_tan+0x360>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f8ed 	bl	800029c <__adddf3>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	f7f6 fa9f 	bl	8000608 <__aeabi_dmul>
 800a0ca:	a35d      	add	r3, pc, #372	; (adr r3, 800a240 <__kernel_tan+0x368>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f8e4 	bl	800029c <__adddf3>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f7f6 fa96 	bl	8000608 <__aeabi_dmul>
 800a0dc:	a35a      	add	r3, pc, #360	; (adr r3, 800a248 <__kernel_tan+0x370>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f8db 	bl	800029c <__adddf3>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 fa8d 	bl	8000608 <__aeabi_dmul>
 800a0ee:	a358      	add	r3, pc, #352	; (adr r3, 800a250 <__kernel_tan+0x378>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f8d2 	bl	800029c <__adddf3>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	f7f6 fa84 	bl	8000608 <__aeabi_dmul>
 800a100:	a355      	add	r3, pc, #340	; (adr r3, 800a258 <__kernel_tan+0x380>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f8c9 	bl	800029c <__adddf3>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	ec51 0b1a 	vmov	r0, r1, d10
 800a112:	f7f6 f8c3 	bl	800029c <__adddf3>
 800a116:	ec53 2b19 	vmov	r2, r3, d9
 800a11a:	f7f6 fa75 	bl	8000608 <__aeabi_dmul>
 800a11e:	4642      	mov	r2, r8
 800a120:	464b      	mov	r3, r9
 800a122:	f7f6 f8bb 	bl	800029c <__adddf3>
 800a126:	ec53 2b18 	vmov	r2, r3, d8
 800a12a:	f7f6 fa6d 	bl	8000608 <__aeabi_dmul>
 800a12e:	4642      	mov	r2, r8
 800a130:	464b      	mov	r3, r9
 800a132:	f7f6 f8b3 	bl	800029c <__adddf3>
 800a136:	a34a      	add	r3, pc, #296	; (adr r3, 800a260 <__kernel_tan+0x388>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	ec51 0b19 	vmov	r0, r1, d9
 800a144:	f7f6 fa60 	bl	8000608 <__aeabi_dmul>
 800a148:	4622      	mov	r2, r4
 800a14a:	462b      	mov	r3, r5
 800a14c:	f7f6 f8a6 	bl	800029c <__adddf3>
 800a150:	460b      	mov	r3, r1
 800a152:	ec41 0b18 	vmov	d8, r0, r1
 800a156:	4602      	mov	r2, r0
 800a158:	4659      	mov	r1, fp
 800a15a:	4650      	mov	r0, sl
 800a15c:	f7f6 f89e 	bl	800029c <__adddf3>
 800a160:	4b44      	ldr	r3, [pc, #272]	; (800a274 <__kernel_tan+0x39c>)
 800a162:	429f      	cmp	r7, r3
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	f340 8086 	ble.w	800a278 <__kernel_tan+0x3a0>
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7f6 f9e1 	bl	8000534 <__aeabi_i2d>
 800a172:	4622      	mov	r2, r4
 800a174:	4680      	mov	r8, r0
 800a176:	4689      	mov	r9, r1
 800a178:	462b      	mov	r3, r5
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 fa43 	bl	8000608 <__aeabi_dmul>
 800a182:	4642      	mov	r2, r8
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	464b      	mov	r3, r9
 800a18a:	4620      	mov	r0, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 f885 	bl	800029c <__adddf3>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fb5f 	bl	800085c <__aeabi_ddiv>
 800a19e:	ec53 2b18 	vmov	r2, r3, d8
 800a1a2:	f7f6 f879 	bl	8000298 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	f7f6 f873 	bl	8000298 <__aeabi_dsub>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	f7f6 f871 	bl	800029c <__adddf3>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4640      	mov	r0, r8
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	f7f6 f869 	bl	8000298 <__aeabi_dsub>
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800a1cc:	f00a 0a02 	and.w	sl, sl, #2
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	f1ca 0001 	rsb	r0, sl, #1
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	f7f6 f9ac 	bl	8000534 <__aeabi_i2d>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 fa10 	bl	8000608 <__aeabi_dmul>
 800a1e8:	e69f      	b.n	8009f2a <__kernel_tan+0x52>
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w
 800a1f0:	54442d18 	.word	0x54442d18
 800a1f4:	3fe921fb 	.word	0x3fe921fb
 800a1f8:	33145c07 	.word	0x33145c07
 800a1fc:	3c81a626 	.word	0x3c81a626
 800a200:	74bf7ad4 	.word	0x74bf7ad4
 800a204:	3efb2a70 	.word	0x3efb2a70
 800a208:	32f0a7e9 	.word	0x32f0a7e9
 800a20c:	3f12b80f 	.word	0x3f12b80f
 800a210:	1a8d1068 	.word	0x1a8d1068
 800a214:	3f3026f7 	.word	0x3f3026f7
 800a218:	fee08315 	.word	0xfee08315
 800a21c:	3f57dbc8 	.word	0x3f57dbc8
 800a220:	e96e8493 	.word	0xe96e8493
 800a224:	3f8226e3 	.word	0x3f8226e3
 800a228:	1bb341fe 	.word	0x1bb341fe
 800a22c:	3faba1ba 	.word	0x3faba1ba
 800a230:	db605373 	.word	0xdb605373
 800a234:	bef375cb 	.word	0xbef375cb
 800a238:	a03792a6 	.word	0xa03792a6
 800a23c:	3f147e88 	.word	0x3f147e88
 800a240:	f2f26501 	.word	0xf2f26501
 800a244:	3f4344d8 	.word	0x3f4344d8
 800a248:	c9560328 	.word	0xc9560328
 800a24c:	3f6d6d22 	.word	0x3f6d6d22
 800a250:	8406d637 	.word	0x8406d637
 800a254:	3f9664f4 	.word	0x3f9664f4
 800a258:	1110fe7a 	.word	0x1110fe7a
 800a25c:	3fc11111 	.word	0x3fc11111
 800a260:	55555563 	.word	0x55555563
 800a264:	3fd55555 	.word	0x3fd55555
 800a268:	3e2fffff 	.word	0x3e2fffff
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	bff00000 	.word	0xbff00000
 800a274:	3fe59427 	.word	0x3fe59427
 800a278:	2e01      	cmp	r6, #1
 800a27a:	d02f      	beq.n	800a2dc <__kernel_tan+0x404>
 800a27c:	460f      	mov	r7, r1
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4689      	mov	r9, r1
 800a284:	2000      	movs	r0, #0
 800a286:	4917      	ldr	r1, [pc, #92]	; (800a2e4 <__kernel_tan+0x40c>)
 800a288:	f7f6 fae8 	bl	800085c <__aeabi_ddiv>
 800a28c:	2600      	movs	r6, #0
 800a28e:	e9cd 0100 	strd	r0, r1, [sp]
 800a292:	4652      	mov	r2, sl
 800a294:	465b      	mov	r3, fp
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f5 fffd 	bl	8000298 <__aeabi_dsub>
 800a29e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	ec51 0b18 	vmov	r0, r1, d8
 800a2aa:	f7f5 fff5 	bl	8000298 <__aeabi_dsub>
 800a2ae:	4632      	mov	r2, r6
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	f7f6 f9a9 	bl	8000608 <__aeabi_dmul>
 800a2b6:	46b0      	mov	r8, r6
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	4642      	mov	r2, r8
 800a2bc:	462b      	mov	r3, r5
 800a2be:	4634      	mov	r4, r6
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	f7f6 f99f 	bl	8000608 <__aeabi_dmul>
 800a2ca:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <__kernel_tan+0x410>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f7f5 ffe5 	bl	800029c <__adddf3>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4639      	mov	r1, r7
 800a2da:	e665      	b.n	8009fa8 <__kernel_tan+0xd0>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	e625      	b.n	8009f2e <__kernel_tan+0x56>
 800a2e2:	bf00      	nop
 800a2e4:	bff00000 	.word	0xbff00000
 800a2e8:	3ff00000 	.word	0x3ff00000
 800a2ec:	00000000 	.word	0x00000000

0800a2f0 <scalbn>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	ec55 4b10 	vmov	r4, r5, d0
 800a2f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	b99a      	cbnz	r2, 800a328 <scalbn+0x38>
 800a300:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a304:	4323      	orrs	r3, r4
 800a306:	d036      	beq.n	800a376 <scalbn+0x86>
 800a308:	4b39      	ldr	r3, [pc, #228]	; (800a3f0 <scalbn+0x100>)
 800a30a:	4629      	mov	r1, r5
 800a30c:	ee10 0a10 	vmov	r0, s0
 800a310:	2200      	movs	r2, #0
 800a312:	f7f6 f979 	bl	8000608 <__aeabi_dmul>
 800a316:	4b37      	ldr	r3, [pc, #220]	; (800a3f4 <scalbn+0x104>)
 800a318:	429e      	cmp	r6, r3
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	da10      	bge.n	800a342 <scalbn+0x52>
 800a320:	a32b      	add	r3, pc, #172	; (adr r3, 800a3d0 <scalbn+0xe0>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	e03a      	b.n	800a39e <scalbn+0xae>
 800a328:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a32c:	428a      	cmp	r2, r1
 800a32e:	d10c      	bne.n	800a34a <scalbn+0x5a>
 800a330:	ee10 2a10 	vmov	r2, s0
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f5 ffb0 	bl	800029c <__adddf3>
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	e019      	b.n	800a376 <scalbn+0x86>
 800a342:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a346:	460b      	mov	r3, r1
 800a348:	3a36      	subs	r2, #54	; 0x36
 800a34a:	4432      	add	r2, r6
 800a34c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a350:	428a      	cmp	r2, r1
 800a352:	dd08      	ble.n	800a366 <scalbn+0x76>
 800a354:	2d00      	cmp	r5, #0
 800a356:	a120      	add	r1, pc, #128	; (adr r1, 800a3d8 <scalbn+0xe8>)
 800a358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35c:	da1c      	bge.n	800a398 <scalbn+0xa8>
 800a35e:	a120      	add	r1, pc, #128	; (adr r1, 800a3e0 <scalbn+0xf0>)
 800a360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a364:	e018      	b.n	800a398 <scalbn+0xa8>
 800a366:	2a00      	cmp	r2, #0
 800a368:	dd08      	ble.n	800a37c <scalbn+0x8c>
 800a36a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a36e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a372:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a376:	ec45 4b10 	vmov	d0, r4, r5
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a380:	da19      	bge.n	800a3b6 <scalbn+0xc6>
 800a382:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a386:	429e      	cmp	r6, r3
 800a388:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a38c:	dd0a      	ble.n	800a3a4 <scalbn+0xb4>
 800a38e:	a112      	add	r1, pc, #72	; (adr r1, 800a3d8 <scalbn+0xe8>)
 800a390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e2      	bne.n	800a35e <scalbn+0x6e>
 800a398:	a30f      	add	r3, pc, #60	; (adr r3, 800a3d8 <scalbn+0xe8>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7f6 f933 	bl	8000608 <__aeabi_dmul>
 800a3a2:	e7cb      	b.n	800a33c <scalbn+0x4c>
 800a3a4:	a10a      	add	r1, pc, #40	; (adr r1, 800a3d0 <scalbn+0xe0>)
 800a3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0b8      	beq.n	800a320 <scalbn+0x30>
 800a3ae:	a10e      	add	r1, pc, #56	; (adr r1, 800a3e8 <scalbn+0xf8>)
 800a3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b4:	e7b4      	b.n	800a320 <scalbn+0x30>
 800a3b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3ba:	3236      	adds	r2, #54	; 0x36
 800a3bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <scalbn+0x108>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	e7e8      	b.n	800a39e <scalbn+0xae>
 800a3cc:	f3af 8000 	nop.w
 800a3d0:	c2f8f359 	.word	0xc2f8f359
 800a3d4:	01a56e1f 	.word	0x01a56e1f
 800a3d8:	8800759c 	.word	0x8800759c
 800a3dc:	7e37e43c 	.word	0x7e37e43c
 800a3e0:	8800759c 	.word	0x8800759c
 800a3e4:	fe37e43c 	.word	0xfe37e43c
 800a3e8:	c2f8f359 	.word	0xc2f8f359
 800a3ec:	81a56e1f 	.word	0x81a56e1f
 800a3f0:	43500000 	.word	0x43500000
 800a3f4:	ffff3cb0 	.word	0xffff3cb0
 800a3f8:	3c900000 	.word	0x3c900000

0800a3fc <_init>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr

0800a408 <_fini>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	bf00      	nop
 800a40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40e:	bc08      	pop	{r3}
 800a410:	469e      	mov	lr, r3
 800a412:	4770      	bx	lr
