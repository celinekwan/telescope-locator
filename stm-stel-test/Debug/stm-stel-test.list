
stm-stel-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006cc8  08006cc8  00016cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007114  08007114  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800711c  0800711c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001dc  08007300  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08007300  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1ac  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001974  00000000  00000000  0002b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225ca  00000000  00000000  0002df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af8e  00000000  00000000  00050512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceb86  00000000  00000000  0005b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  0012a078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cb0 	.word	0x08006cb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006cb0 	.word	0x08006cb0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <init_buf123>:
/* USER CODE BEGIN PFP */
int result1;
int result2;

// init buffer elements to all 0
void init_buf123() {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  	temp = sizeof(buf1_stel);
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <init_buf123+0x50>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
  	for (int i=0; i<sizeof(buf1_stel); i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	e014      	b.n	8000f18 <init_buf123+0x3c>
  		buf1_stel[i] = 0;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <init_buf123+0x54>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
  		buf2_stel[i] = 0;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <init_buf123+0x58>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
  		buf3_stel[i] = 0;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <init_buf123+0x5c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  	for (int i=0; i<sizeof(buf1_stel); i++) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d9e7      	bls.n	8000eee <init_buf123+0x12>
  	}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	200002a8 	.word	0x200002a8
 8000f30:	20000294 	.word	0x20000294
 8000f34:	20000298 	.word	0x20000298
 8000f38:	2000029c 	.word	0x2000029c
 8000f3c:	00000000 	.word	0x00000000

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b08d      	sub	sp, #52	; 0x34
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fc9d 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 fa01 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fa81 	bl	8001454 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fa4f 	bl	80013f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	buf1_stel = malloc(128);
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	f002 ff96 	bl	8003e88 <malloc>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4bab      	ldr	r3, [pc, #684]	; (8001210 <main+0x2d0>)
 8000f62:	601a      	str	r2, [r3, #0]
  	buf2_stel = malloc(128);
 8000f64:	2080      	movs	r0, #128	; 0x80
 8000f66:	f002 ff8f 	bl	8003e88 <malloc>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4ba9      	ldr	r3, [pc, #676]	; (8001214 <main+0x2d4>)
 8000f70:	601a      	str	r2, [r3, #0]
  	buf3_stel = malloc(128);
 8000f72:	2080      	movs	r0, #128	; 0x80
 8000f74:	f002 ff88 	bl	8003e88 <malloc>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <main+0x2d8>)
 8000f7e:	601a      	str	r2, [r3, #0]

  	char *pound = "#";
 8000f80:	4ba6      	ldr	r3, [pc, #664]	; (800121c <main+0x2dc>)
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  	char *pos = "+";
 8000f84:	4ba6      	ldr	r3, [pc, #664]	; (8001220 <main+0x2e0>)
 8000f86:	623b      	str	r3, [r7, #32]
  	char *neg = "-";
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <main+0x2e4>)
 8000f8a:	61fb      	str	r3, [r7, #28]

  	init_buf123();
 8000f8c:	f7ff ffa6 	bl	8000edc <init_buf123>

	// HH MM SS for RA
	unsigned short ra_hh = 19;
 8000f90:	2313      	movs	r3, #19
 8000f92:	837b      	strh	r3, [r7, #26]
	unsigned short ra_mm = 50;
 8000f94:	2332      	movs	r3, #50	; 0x32
 8000f96:	85fb      	strh	r3, [r7, #46]	; 0x2e
	double ra_ss = 49.1324;
 8000f98:	a399      	add	r3, pc, #612	; (adr r3, 8001200 <main+0x2c0>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// DD MM SS for DEC
	unsigned short dec_neg = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81fb      	strh	r3, [r7, #14]
	unsigned short dec_dd = 8;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	81bb      	strh	r3, [r7, #12]
	unsigned short dec_mm = 52;
 8000faa:	2334      	movs	r3, #52	; 0x34
 8000fac:	85bb      	strh	r3, [r7, #44]	; 0x2c
	double dec_ss = 15.235;
 8000fae:	a396      	add	r3, pc, #600	; (adr r3, 8001208 <main+0x2c8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// concatenate to the full RA string
	snprintf(buf1_stel, 128, "%u", ra_hh);
 8000fb8:	4b95      	ldr	r3, [pc, #596]	; (8001210 <main+0x2d0>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	8b7b      	ldrh	r3, [r7, #26]
 8000fbe:	4a9a      	ldr	r2, [pc, #616]	; (8001228 <main+0x2e8>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	f003 fccb 	bl	800495c <sniprintf>
	snprintf(buf2_stel, 128, "%u", ra_mm);
 8000fc6:	4b93      	ldr	r3, [pc, #588]	; (8001214 <main+0x2d4>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fcc:	4a96      	ldr	r2, [pc, #600]	; (8001228 <main+0x2e8>)
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	f003 fcc4 	bl	800495c <sniprintf>
	//	snprintf(buf3, 128, "% .4f", ra_ss);
	snprintf(buf3_stel, 128, "%u", (short)ra_ss);
 8000fd4:	4b90      	ldr	r3, [pc, #576]	; (8001218 <main+0x2d8>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
 8000fd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fdc:	f7ff fdd4 	bl	8000b88 <__aeabi_d2iz>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4a90      	ldr	r2, [pc, #576]	; (8001228 <main+0x2e8>)
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f003 fcb7 	bl	800495c <sniprintf>

	if (ra_hh < 10) { strcat(ra_str,"0");}
 8000fee:	8b7b      	ldrh	r3, [r7, #26]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d80b      	bhi.n	800100c <main+0xcc>
 8000ff4:	488d      	ldr	r0, [pc, #564]	; (800122c <main+0x2ec>)
 8000ff6:	f7ff f8fd 	bl	80001f4 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	; (800122c <main+0x2ec>)
 8001000:	4413      	add	r3, r2
 8001002:	498b      	ldr	r1, [pc, #556]	; (8001230 <main+0x2f0>)
 8001004:	461a      	mov	r2, r3
 8001006:	460b      	mov	r3, r1
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	8013      	strh	r3, [r2, #0]
	strcpy(ra_str,buf1_stel);
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <main+0x2d0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4886      	ldr	r0, [pc, #536]	; (800122c <main+0x2ec>)
 8001014:	f003 fce5 	bl	80049e2 <strcpy>
	strcat(ra_str,":");
 8001018:	4884      	ldr	r0, [pc, #528]	; (800122c <main+0x2ec>)
 800101a:	f7ff f8eb 	bl	80001f4 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <main+0x2ec>)
 8001024:	4413      	add	r3, r2
 8001026:	4983      	ldr	r1, [pc, #524]	; (8001234 <main+0x2f4>)
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	8013      	strh	r3, [r2, #0]
	if (ra_mm < 10) { strcat(ra_str,"0");}
 8001030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001032:	2b09      	cmp	r3, #9
 8001034:	d80b      	bhi.n	800104e <main+0x10e>
 8001036:	487d      	ldr	r0, [pc, #500]	; (800122c <main+0x2ec>)
 8001038:	f7ff f8dc 	bl	80001f4 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b7a      	ldr	r3, [pc, #488]	; (800122c <main+0x2ec>)
 8001042:	4413      	add	r3, r2
 8001044:	497a      	ldr	r1, [pc, #488]	; (8001230 <main+0x2f0>)
 8001046:	461a      	mov	r2, r3
 8001048:	460b      	mov	r3, r1
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	8013      	strh	r3, [r2, #0]
	strcat(ra_str,buf2_stel);
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <main+0x2d4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4875      	ldr	r0, [pc, #468]	; (800122c <main+0x2ec>)
 8001056:	f003 fcb5 	bl	80049c4 <strcat>
	strcat(ra_str,":");
 800105a:	4874      	ldr	r0, [pc, #464]	; (800122c <main+0x2ec>)
 800105c:	f7ff f8ca 	bl	80001f4 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b71      	ldr	r3, [pc, #452]	; (800122c <main+0x2ec>)
 8001066:	4413      	add	r3, r2
 8001068:	4972      	ldr	r1, [pc, #456]	; (8001234 <main+0x2f4>)
 800106a:	461a      	mov	r2, r3
 800106c:	460b      	mov	r3, r1
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	8013      	strh	r3, [r2, #0]
	if (ra_ss < 10) { strcat(ra_str,"0");}
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b70      	ldr	r3, [pc, #448]	; (8001238 <main+0x2f8>)
 8001078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107c:	f7ff fd46 	bl	8000b0c <__aeabi_dcmplt>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <main+0x15e>
 8001086:	4869      	ldr	r0, [pc, #420]	; (800122c <main+0x2ec>)
 8001088:	f7ff f8b4 	bl	80001f4 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <main+0x2ec>)
 8001092:	4413      	add	r3, r2
 8001094:	4966      	ldr	r1, [pc, #408]	; (8001230 <main+0x2f0>)
 8001096:	461a      	mov	r2, r3
 8001098:	460b      	mov	r3, r1
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	8013      	strh	r3, [r2, #0]
	strcat(ra_str,buf3_stel);
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <main+0x2d8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4861      	ldr	r0, [pc, #388]	; (800122c <main+0x2ec>)
 80010a6:	f003 fc8d 	bl	80049c4 <strcat>
	strcat(ra_str,pound);
 80010aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ac:	485f      	ldr	r0, [pc, #380]	; (800122c <main+0x2ec>)
 80010ae:	f003 fc89 	bl	80049c4 <strcat>

	// clear buffers
	init_buf123();
 80010b2:	f7ff ff13 	bl	8000edc <init_buf123>

	// concatenate to the full DEC string
	snprintf(buf1_stel, 128, "%u", dec_dd);
 80010b6:	4b56      	ldr	r3, [pc, #344]	; (8001210 <main+0x2d0>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	89bb      	ldrh	r3, [r7, #12]
 80010bc:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <main+0x2e8>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	f003 fc4c 	bl	800495c <sniprintf>
	snprintf(buf2_stel, 128, "%u", dec_mm);
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <main+0x2d4>)
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ca:	4a57      	ldr	r2, [pc, #348]	; (8001228 <main+0x2e8>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	f003 fc45 	bl	800495c <sniprintf>
	snprintf(buf3_stel, 128, "%u", (short)dec_ss);
 80010d2:	4b51      	ldr	r3, [pc, #324]	; (8001218 <main+0x2d8>)
 80010d4:	681c      	ldr	r4, [r3, #0]
 80010d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010da:	f7ff fd55 	bl	8000b88 <__aeabi_d2iz>
 80010de:	4603      	mov	r3, r0
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4a51      	ldr	r2, [pc, #324]	; (8001228 <main+0x2e8>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	4620      	mov	r0, r4
 80010e8:	f003 fc38 	bl	800495c <sniprintf>

	if (dec_neg == 0) { strcpy(dec_str,pos); }
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <main+0x1bc>
 80010f2:	6a39      	ldr	r1, [r7, #32]
 80010f4:	4851      	ldr	r0, [pc, #324]	; (800123c <main+0x2fc>)
 80010f6:	f003 fc74 	bl	80049e2 <strcpy>
 80010fa:	e003      	b.n	8001104 <main+0x1c4>
	else { strcpy(dec_str,neg); }
 80010fc:	69f9      	ldr	r1, [r7, #28]
 80010fe:	484f      	ldr	r0, [pc, #316]	; (800123c <main+0x2fc>)
 8001100:	f003 fc6f 	bl	80049e2 <strcpy>
	if (dec_dd < 10) { strcat(dec_str,"0");}
 8001104:	89bb      	ldrh	r3, [r7, #12]
 8001106:	2b09      	cmp	r3, #9
 8001108:	d80b      	bhi.n	8001122 <main+0x1e2>
 800110a:	484c      	ldr	r0, [pc, #304]	; (800123c <main+0x2fc>)
 800110c:	f7ff f872 	bl	80001f4 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b49      	ldr	r3, [pc, #292]	; (800123c <main+0x2fc>)
 8001116:	4413      	add	r3, r2
 8001118:	4945      	ldr	r1, [pc, #276]	; (8001230 <main+0x2f0>)
 800111a:	461a      	mov	r2, r3
 800111c:	460b      	mov	r3, r1
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	8013      	strh	r3, [r2, #0]
	strcat(dec_str,buf1_stel);
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <main+0x2d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	4844      	ldr	r0, [pc, #272]	; (800123c <main+0x2fc>)
 800112a:	f003 fc4b 	bl	80049c4 <strcat>
	strcat(dec_str,"\'");
 800112e:	4843      	ldr	r0, [pc, #268]	; (800123c <main+0x2fc>)
 8001130:	f7ff f860 	bl	80001f4 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <main+0x2fc>)
 800113a:	4413      	add	r3, r2
 800113c:	4940      	ldr	r1, [pc, #256]	; (8001240 <main+0x300>)
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	8013      	strh	r3, [r2, #0]
	if (dec_mm < 10) { strcat(dec_str,"0");}
 8001146:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001148:	2b09      	cmp	r3, #9
 800114a:	d80b      	bhi.n	8001164 <main+0x224>
 800114c:	483b      	ldr	r0, [pc, #236]	; (800123c <main+0x2fc>)
 800114e:	f7ff f851 	bl	80001f4 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <main+0x2fc>)
 8001158:	4413      	add	r3, r2
 800115a:	4935      	ldr	r1, [pc, #212]	; (8001230 <main+0x2f0>)
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	8013      	strh	r3, [r2, #0]
	strcat(dec_str,buf2_stel);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <main+0x2d4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4834      	ldr	r0, [pc, #208]	; (800123c <main+0x2fc>)
 800116c:	f003 fc2a 	bl	80049c4 <strcat>
	strcat(dec_str,":");
 8001170:	4832      	ldr	r0, [pc, #200]	; (800123c <main+0x2fc>)
 8001172:	f7ff f83f 	bl	80001f4 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <main+0x2fc>)
 800117c:	4413      	add	r3, r2
 800117e:	492d      	ldr	r1, [pc, #180]	; (8001234 <main+0x2f4>)
 8001180:	461a      	mov	r2, r3
 8001182:	460b      	mov	r3, r1
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	8013      	strh	r3, [r2, #0]
	if (dec_ss < 10) { strcat(dec_str,"0");}
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <main+0x2f8>)
 800118e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001192:	f7ff fcbb 	bl	8000b0c <__aeabi_dcmplt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <main+0x274>
 800119c:	4827      	ldr	r0, [pc, #156]	; (800123c <main+0x2fc>)
 800119e:	f7ff f829 	bl	80001f4 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <main+0x2fc>)
 80011a8:	4413      	add	r3, r2
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <main+0x2f0>)
 80011ac:	461a      	mov	r2, r3
 80011ae:	460b      	mov	r3, r1
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	8013      	strh	r3, [r2, #0]
	strcat(dec_str,buf3_stel);
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <main+0x2d8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4820      	ldr	r0, [pc, #128]	; (800123c <main+0x2fc>)
 80011bc:	f003 fc02 	bl	80049c4 <strcat>
	strcat(dec_str,pound);
 80011c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011c2:	481e      	ldr	r0, [pc, #120]	; (800123c <main+0x2fc>)
 80011c4:	f003 fbfe 	bl	80049c4 <strcat>

	  // Detect commands from Stellarium *****************************************************************
	  status = HAL_UART_Receive(&huart2, (uint8_t*)stel_cmds, sizeof(stel_cmds), 1000);
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	2205      	movs	r2, #5
 80011ce:	491d      	ldr	r1, [pc, #116]	; (8001244 <main+0x304>)
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <main+0x308>)
 80011d2:	f002 f927 	bl	8003424 <HAL_UART_Receive>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <main+0x30c>)
 80011dc:	701a      	strb	r2, [r3, #0]
	  random_counter++;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <main+0x310>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <main+0x310>)
 80011e6:	6013      	str	r3, [r2, #0]

	  if (status == HAL_TIMEOUT) {
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <main+0x30c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d131      	bne.n	8001254 <main+0x314>
		  random_counter++; // for breakpoint/debugging
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <main+0x310>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <main+0x310>)
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e080      	b.n	80012fe <main+0x3be>
 80011fc:	f3af 8000 	nop.w
 8001200:	7bb2fec5 	.word	0x7bb2fec5
 8001204:	404890f2 	.word	0x404890f2
 8001208:	eb851eb8 	.word	0xeb851eb8
 800120c:	402e7851 	.word	0x402e7851
 8001210:	20000294 	.word	0x20000294
 8001214:	20000298 	.word	0x20000298
 8001218:	2000029c 	.word	0x2000029c
 800121c:	08006cc8 	.word	0x08006cc8
 8001220:	08006ccc 	.word	0x08006ccc
 8001224:	08006cd0 	.word	0x08006cd0
 8001228:	08006cd4 	.word	0x08006cd4
 800122c:	2000027c 	.word	0x2000027c
 8001230:	08006cd8 	.word	0x08006cd8
 8001234:	08006cdc 	.word	0x08006cdc
 8001238:	40240000 	.word	0x40240000
 800123c:	20000288 	.word	0x20000288
 8001240:	08006ce0 	.word	0x08006ce0
 8001244:	200002a0 	.word	0x200002a0
 8001248:	200001f8 	.word	0x200001f8
 800124c:	200002ac 	.word	0x200002ac
 8001250:	200002b0 	.word	0x200002b0
	  } else if (status == HAL_ERROR) {
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <main+0x3dc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <main+0x328>
		  random_counter++;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <main+0x3e0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <main+0x3e0>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e04a      	b.n	80012fe <main+0x3be>
	  } else if (status == HAL_BUSY) {
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <main+0x3dc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d105      	bne.n	800127c <main+0x33c>
		  random_counter++;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <main+0x3e0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <main+0x3e0>)
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e040      	b.n	80012fe <main+0x3be>
	  } else if (status == HAL_OK) {
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <main+0x3dc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d13c      	bne.n	80012fe <main+0x3be>

		  result1 = strcmp(stel_cmds, "#:GR#");
 8001284:	4927      	ldr	r1, [pc, #156]	; (8001324 <main+0x3e4>)
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <main+0x3e8>)
 8001288:	f7fe ffaa 	bl	80001e0 <strcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <main+0x3ec>)
 8001290:	6013      	str	r3, [r2, #0]
		  result2 = strcmp(stel_cmds, "#:GD#");
 8001292:	4927      	ldr	r1, [pc, #156]	; (8001330 <main+0x3f0>)
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <main+0x3e8>)
 8001296:	f7fe ffa3 	bl	80001e0 <strcmp>
 800129a:	4603      	mov	r3, r0
 800129c:	4a25      	ldr	r2, [pc, #148]	; (8001334 <main+0x3f4>)
 800129e:	6013      	str	r3, [r2, #0]

		  sizeof_ra = sizeof(ra_str);
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <main+0x3f8>)
 80012a2:	2209      	movs	r2, #9
 80012a4:	601a      	str	r2, [r3, #0]

		  if (result1==0) {
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <main+0x3ec>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <main+0x392>
			  status_transmit_ra = HAL_UART_Transmit(&huart2, (uint8_t*)ra_str, sizeof(ra_str), 10);
 80012ae:	230a      	movs	r3, #10
 80012b0:	2209      	movs	r2, #9
 80012b2:	4922      	ldr	r1, [pc, #136]	; (800133c <main+0x3fc>)
 80012b4:	4822      	ldr	r0, [pc, #136]	; (8001340 <main+0x400>)
 80012b6:	f002 f821 	bl	80032fc <HAL_UART_Transmit>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <main+0x404>)
 80012c0:	701a      	strb	r2, [r3, #0]
			  ra_mm += 5;
 80012c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012c4:	3305      	adds	r3, #5
 80012c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
			  random_counter ++ ;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <main+0x3e0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <main+0x3e0>)
 80012d0:	6013      	str	r3, [r2, #0]
		  }

		  if (result2==0) {
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <main+0x3f4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d111      	bne.n	80012fe <main+0x3be>
			  status_transmit_dec = HAL_UART_Transmit(&huart2, (uint8_t*)dec_str, sizeof(dec_str), 10);
 80012da:	230a      	movs	r3, #10
 80012dc:	220a      	movs	r2, #10
 80012de:	491a      	ldr	r1, [pc, #104]	; (8001348 <main+0x408>)
 80012e0:	4817      	ldr	r0, [pc, #92]	; (8001340 <main+0x400>)
 80012e2:	f002 f80b 	bl	80032fc <HAL_UART_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <main+0x40c>)
 80012ec:	701a      	strb	r2, [r3, #0]
			  dec_mm += 5;
 80012ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012f0:	3305      	adds	r3, #5
 80012f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  random_counter ++ ;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <main+0x3e0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <main+0x3e0>)
 80012fc:	6013      	str	r3, [r2, #0]
		  }

	  }

	  // clear buffer
	  for (int i=0; i<5; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
 8001302:	e007      	b.n	8001314 <main+0x3d4>
		  stel_cmds[i] = 0;
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <main+0x3e8>)
 8001306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001308:	4413      	add	r3, r2
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<5; i++) {
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	3301      	adds	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	2b04      	cmp	r3, #4
 8001318:	ddf4      	ble.n	8001304 <main+0x3c4>
	snprintf(buf1_stel, 128, "%u", ra_hh);
 800131a:	e64d      	b.n	8000fb8 <main+0x78>
 800131c:	200002ac 	.word	0x200002ac
 8001320:	200002b0 	.word	0x200002b0
 8001324:	08006ce4 	.word	0x08006ce4
 8001328:	200002a0 	.word	0x200002a0
 800132c:	200002b8 	.word	0x200002b8
 8001330:	08006cec 	.word	0x08006cec
 8001334:	200002bc 	.word	0x200002bc
 8001338:	200002b4 	.word	0x200002b4
 800133c:	2000027c 	.word	0x2000027c
 8001340:	200001f8 	.word	0x200001f8
 8001344:	200002ad 	.word	0x200002ad
 8001348:	20000288 	.word	0x20000288
 800134c:	200002ae 	.word	0x200002ae

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2244      	movs	r2, #68	; 0x44
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fd9a 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001376:	f000 fd87 	bl	8001e88 <HAL_PWREx_ControlVoltageScaling>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001380:	f000 f8ce 	bl	8001520 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138e:	2340      	movs	r3, #64	; 0x40
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001396:	2302      	movs	r3, #2
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800139e:	230a      	movs	r3, #10
 80013a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013a2:	2307      	movs	r3, #7
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fdbe 	bl	8001f34 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013be:	f000 f8af 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c2:	230f      	movs	r3, #15
 80013c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c6:	2303      	movs	r3, #3
 80013c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	2104      	movs	r1, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f9be 	bl	800275c <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013e6:	f000 f89b 	bl	8001520 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3758      	adds	r7, #88	; 0x58
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USART2_UART_Init+0x58>)
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <MX_USART2_UART_Init+0x5c>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART2_UART_Init+0x58>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART2_UART_Init+0x58>)
 8001438:	f001 ff12 	bl	8003260 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 f86d 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200001f8 	.word	0x200001f8
 8001450:	40004400 	.word	0x40004400

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_GPIO_Init+0xc4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <MX_GPIO_Init+0xc4>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <MX_GPIO_Init+0xc4>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <MX_GPIO_Init+0xc4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <MX_GPIO_Init+0xc4>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_GPIO_Init+0xc4>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_GPIO_Init+0xc4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_GPIO_Init+0xc4>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_GPIO_Init+0xc4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_GPIO_Init+0xc4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_GPIO_Init+0xc4>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_GPIO_Init+0xc4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f000 fcb3 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <MX_GPIO_Init+0xc8>)
 80014ee:	f000 fb2b 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80014f2:	2320      	movs	r3, #32
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f000 fb1c 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a4      	sub	sp, #144	; 0x90
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2268      	movs	r2, #104	; 0x68
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fc7f 	bl	8003e98 <memset>
  if(huart->Instance==USART2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <HAL_UART_MspInit+0xb0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13a      	bne.n	800161a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 faf7 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015bc:	f7ff ffb0 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ca:	6593      	str	r3, [r2, #88]	; 0x58
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_UART_MspInit+0xb4>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f0:	230c      	movs	r3, #12
 80015f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001606:	2307      	movs	r3, #7
 8001608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f000 fa97 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3790      	adds	r7, #144	; 0x90
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f960 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_kill>:

int _kill(int pid, int sig)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169a:	f002 fbcb 	bl	8003e34 <__errno>
 800169e:	4603      	mov	r3, r0
 80016a0:	2216      	movs	r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_exit>:

void _exit (int status)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffe7 	bl	8001690 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c2:	e7fe      	b.n	80016c2 <_exit+0x12>

080016c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
  }

  return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
  }
  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
  return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f002 fb30 	bl	8003e34 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20028000 	.word	0x20028000
 8001800:	00000400 	.word	0x00000400
 8001804:	200002c0 	.word	0x200002c0
 8001808:	200002d8 	.word	0x200002d8

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f002 faef 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fb6d 	bl	8000f40 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001874:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8001878:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800187c:	200002d8 	.word	0x200002d8

08001880 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_IRQHandler>
	...

08001884 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_Init+0x3c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x3c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f000 f920 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f80f 	bl	80018c4 <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	e001      	b.n	80018b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b2:	f7ff fe3b 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_InitTick+0x6c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_InitTick+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_InitTick+0x6c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f91d 	bl	8001b2e <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d809      	bhi.n	8001914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f8f5 	bl	8001af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_InitTick+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e007      	b.n	8001924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e004      	b.n	8001924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e001      	b.n	8001924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	200002c4 	.word	0x200002c4

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200002c4 	.word	0x200002c4

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff47 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff5c 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffb0 	bl	8001a9c <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e154      	b.n	8001e02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8146 	beq.w	8001dfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x40>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a0 	beq.w	8001dfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d019      	beq.n	8001d34 <HAL_GPIO_Init+0x1ec>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1e8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1dc>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e008      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d24:	2307      	movs	r3, #7
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e004      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d34:	2300      	movs	r3, #0
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	f002 0203 	and.w	r2, r2, #3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d46:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f47f aea3 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	48000c00 	.word	0x48000c00
 8001e34:	48001000 	.word	0x48001000
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e96:	d130      	bne.n	8001efa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea4:	d038      	beq.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9b      	lsrs	r3, r3, #18
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ecc:	e002      	b.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	d102      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f2      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef4:	d110      	bne.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e00f      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d007      	beq.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	431bde83 	.word	0x431bde83

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f000 bc02 	b.w	800274c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f52:	4b94      	ldr	r3, [pc, #592]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80e4 	beq.w	8002132 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4c>
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	f040 808b 	bne.w	800208e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	f040 8087 	bne.w	800208e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f80:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x64>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e3d9      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x7e>
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	e005      	b.n	8001fbe <HAL_RCC_OscConfig+0x8a>
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d223      	bcs.n	800200a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fd8c 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e3ba      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	496d      	ldr	r1, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	4968      	ldr	r1, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e025      	b.n	8002056 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4960      	ldr	r1, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	495b      	ldr	r1, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fd4c 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e37a      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002056:	f000 fc81 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4950      	ldr	r1, [pc, #320]	; (80021a8 <HAL_RCC_OscConfig+0x274>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_RCC_OscConfig+0x278>)
 8002074:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002076:	4b4e      	ldr	r3, [pc, #312]	; (80021b0 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fc22 	bl	80018c4 <HAL_InitTick>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d052      	beq.n	8002130 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	e35e      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d032      	beq.n	80020fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fc5f 	bl	8001964 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020aa:	f7ff fc5b 	bl	8001964 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e347      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4930      	ldr	r1, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	492b      	ldr	r1, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e01a      	b.n	8002132 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc2c 	bl	8001964 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002110:	f7ff fc28 	bl	8001964 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e314      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1dc>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d073      	beq.n	8002226 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x21c>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d10e      	bne.n	8002168 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d063      	beq.n	8002224 <HAL_RCC_OscConfig+0x2f0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d15f      	bne.n	8002224 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e2f1      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d106      	bne.n	8002180 <HAL_RCC_OscConfig+0x24c>
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e025      	b.n	80021cc <HAL_RCC_OscConfig+0x298>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d114      	bne.n	80021b4 <HAL_RCC_OscConfig+0x280>
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a02      	ldr	r2, [pc, #8]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x298>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08006cf4 	.word	0x08006cf4
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004
 80021b4:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a9f      	ldr	r2, [pc, #636]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a9c      	ldr	r2, [pc, #624]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbc6 	bl	8001964 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fbc2 	bl	8001964 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e2ae      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x2a8>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fbb2 	bl	8001964 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fbae 	bl	8001964 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e29a      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d0>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d060      	beq.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x310>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d119      	bne.n	8002272 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d116      	bne.n	8002272 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x328>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e277      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	4973      	ldr	r1, [pc, #460]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002270:	e040      	b.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d023      	beq.n	80022c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227a:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff fb6d 	bl	8001964 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fb69 	bl	8001964 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e255      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	495f      	ldr	r1, [pc, #380]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	e018      	b.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff fb49 	bl	8001964 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fb45 	bl	8001964 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e231      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230e:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fb24 	bl	8001964 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fb20 	bl	8001964 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e20c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x3ec>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fb07 	bl	8001964 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff fb03 	bl	8001964 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1ef      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800236e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a6 	beq.w	80024d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d118      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023cc:	f7ff faca 	bl	8001964 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7ff fac6 	bl	8001964 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1b2      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x508>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x4d8>
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240a:	e029      	b.n	8002460 <HAL_RCC_OscConfig+0x52c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d115      	bne.n	8002440 <HAL_RCC_OscConfig+0x50c>
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_OscConfig+0x504>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x52c>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	4a99      	ldr	r2, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	4a95      	ldr	r2, [pc, #596]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d016      	beq.n	8002496 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7ff fa7c 	bl	8001964 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fa78 	bl	8001964 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e162      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ed      	beq.n	8002470 <HAL_RCC_OscConfig+0x53c>
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff fa65 	bl	8001964 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fa61 	bl	8001964 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e14b      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b4:	4b7d      	ldr	r3, [pc, #500]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1ed      	bne.n	800249e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03c      	beq.n	800255a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01c      	beq.n	8002522 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e8:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ee:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff fa34 	bl	8001964 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002500:	f7ff fa30 	bl	8001964 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e11c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ef      	beq.n	8002500 <HAL_RCC_OscConfig+0x5cc>
 8002520:	e01b      	b.n	800255a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002528:	4a60      	ldr	r2, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7ff fa17 	bl	8001964 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800253a:	f7ff fa13 	bl	8001964 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ff      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800254c:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800254e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80f3 	beq.w	800274a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	2b02      	cmp	r3, #2
 800256a:	f040 80c9 	bne.w	8002700 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800256e:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	429a      	cmp	r2, r3
 8002580:	d12c      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	3b01      	subs	r3, #1
 800258e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d123      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d11b      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d113      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d06b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d062      	beq.n	80026a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0ac      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 80025f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025fe:	f7ff f9b1 	bl	8001964 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff f9ad 	bl	8001964 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e099      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x77c>)
 800262a:	4013      	ands	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002634:	3a01      	subs	r2, #1
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	4311      	orrs	r1, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800263e:	0212      	lsls	r2, r2, #8
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	3a01      	subs	r2, #1
 800264a:	0552      	lsls	r2, r2, #21
 800264c:	4311      	orrs	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002652:	0852      	lsrs	r2, r2, #1
 8002654:	3a01      	subs	r2, #1
 8002656:	0652      	lsls	r2, r2, #25
 8002658:	4311      	orrs	r1, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265e:	06d2      	lsls	r2, r2, #27
 8002660:	430a      	orrs	r2, r1
 8002662:	4912      	ldr	r1, [pc, #72]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002680:	f7ff f970 	bl	8001964 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f96c 	bl	8001964 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e058      	b.n	800274c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_OscConfig+0x778>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a6:	e050      	b.n	800274a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e04f      	b.n	800274c <HAL_RCC_OscConfig+0x818>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d144      	bne.n	800274a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a23      	ldr	r2, [pc, #140]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d8:	f7ff f944 	bl	8001964 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f940 	bl	8001964 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e02c      	b.n	800274c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x7ac>
 80026fe:	e024      	b.n	800274a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d01f      	beq.n	8002746 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800270c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7ff f927 	bl	8001964 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7ff f923 	bl	8001964 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4905      	ldr	r1, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x820>)
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x824>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e001      	b.n	800274a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	feeefffc 	.word	0xfeeefffc

0800275c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0e7      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4970      	ldr	r1, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cf      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d908      	bls.n	80027ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4960      	ldr	r1, [pc, #384]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04c      	beq.n	8002874 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0a6      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d115      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e09a      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e08e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e086      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4943      	ldr	r1, [pc, #268]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7ff f88e 	bl	8001964 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7ff f88a 	bl	8001964 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e06e      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	429a      	cmp	r2, r3
 800288e:	d208      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b2e      	ldr	r3, [pc, #184]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	492b      	ldr	r1, [pc, #172]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d210      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 0207 	bic.w	r2, r3, #7
 80028b8:	4923      	ldr	r1, [pc, #140]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x1ec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e036      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4918      	ldr	r1, [pc, #96]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4910      	ldr	r1, [pc, #64]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002910:	f000 f824 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	490b      	ldr	r1, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1f4>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1fc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe ffc5 	bl	80018c4 <HAL_InitTick>
 800293a:	4603      	mov	r3, r0
 800293c:	72fb      	strb	r3, [r7, #11]

  return status;
 800293e:	7afb      	ldrb	r3, [r7, #11]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	08006cf4 	.word	0x08006cf4
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x34>
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d121      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d11e      	bne.n	80029ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d102      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	e004      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d134      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa6>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d003      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0xac>
 8002a00:	e005      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a04:	617b      	str	r3, [r7, #20]
      break;
 8002a06:	e005      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0a:	617b      	str	r3, [r7, #20]
      break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	617b      	str	r3, [r7, #20]
      break;
 8002a12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	fb03 f202 	mul.w	r2, r3, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0e5b      	lsrs	r3, r3, #25
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	3301      	adds	r3, #1
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08006d0c 	.word	0x08006d0c
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a90:	f7ff fff0 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08006d04 	.word	0x08006d04

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002abc:	f7ff ffda 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08006d04 	.word	0x08006d04

08002ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002afc:	f7ff f9b6 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002b00:	6178      	str	r0, [r7, #20]
 8002b02:	e014      	b.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b1c:	f7ff f9a6 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d10b      	bne.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d919      	bls.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b40:	d902      	bls.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b42:	2302      	movs	r3, #2
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e013      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b48:	2301      	movs	r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e010      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d902      	bls.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b54:	2303      	movs	r3, #3
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e00a      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d102      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b60:	2302      	movs	r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e004      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b70      	cmp	r3, #112	; 0x70
 8002b6a:	d101      	bne.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40022000 	.word	0x40022000

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bac:	2300      	movs	r3, #0
 8002bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d031      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc8:	d01a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bce:	d814      	bhi.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bd8:	d10f      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be6:	e00c      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fa44 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf8:	e003      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	74fb      	strb	r3, [r7, #19]
      break;
 8002bfe:	e000      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c08:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	494e      	ldr	r1, [pc, #312]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c1e:	e001      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 809e 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c36:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a3f      	ldr	r2, [pc, #252]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
 8002c58:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a39      	ldr	r2, [pc, #228]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c74:	f7fe fe76 	bl	8001964 <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c7a:	e009      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe fe72 	bl	8001964 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d15a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d019      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fe32 	bl	8001964 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d02:	e00b      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fe2e 	bl	8001964 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d902      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	74fb      	strb	r3, [r7, #19]
            break;
 8002d1a:	e006      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ec      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3e:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d46:	e009      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
 8002d4c:	e006      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5c:	7c7b      	ldrb	r3, [r7, #17]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b9e      	ldr	r3, [pc, #632]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a9d      	ldr	r2, [pc, #628]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7a:	4b98      	ldr	r3, [pc, #608]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 0203 	bic.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4994      	ldr	r1, [pc, #592]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 020c 	bic.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	498c      	ldr	r1, [pc, #560]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbe:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	4983      	ldr	r1, [pc, #524]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de0:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	497b      	ldr	r1, [pc, #492]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e02:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4972      	ldr	r1, [pc, #456]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e24:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	496a      	ldr	r1, [pc, #424]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e54:	4961      	ldr	r1, [pc, #388]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e68:	4b5c      	ldr	r3, [pc, #368]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	4959      	ldr	r1, [pc, #356]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	4950      	ldr	r1, [pc, #320]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	4948      	ldr	r1, [pc, #288]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ed4:	f023 0203 	bic.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	493f      	ldr	r1, [pc, #252]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d028      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	4937      	ldr	r1, [pc, #220]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a31      	ldr	r2, [pc, #196]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]
 8002f1c:	e011      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f8a4 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4e:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f78:	60d3      	str	r3, [r2, #12]
 8002f7a:	e011      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f875 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e014      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f843 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01c      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800302e:	d10c      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	2102      	movs	r1, #2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f820 	bl	800307c <RCCEx_PLLSAI1_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800306c:	7cbb      	ldrb	r3, [r7, #18]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308a:	4b74      	ldr	r3, [pc, #464]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003096:	4b71      	ldr	r3, [pc, #452]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
       ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ae:	4b6b      	ldr	r3, [pc, #428]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
       ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d047      	beq.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e044      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d018      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x86>
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d825      	bhi.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <RCCEx_PLLSAI1_Config+0x62>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d009      	beq.n	80030f0 <RCCEx_PLLSAI1_Config+0x74>
 80030dc:	e020      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11d      	bne.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e01a      	b.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f0:	4b5a      	ldr	r3, [pc, #360]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e013      	b.n	800312a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310e:	4b53      	ldr	r3, [pc, #332]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311e:	e006      	b.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e004      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	430b      	orrs	r3, r1
 800314c:	4943      	ldr	r1, [pc, #268]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d17c      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3f      	ldr	r2, [pc, #252]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800315e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe fbfe 	bl	8001964 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fe fbfa 	bl	8001964 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d15f      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d110      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	06d2      	lsls	r2, r2, #27
 80031b0:	430a      	orrs	r2, r1
 80031b2:	492a      	ldr	r1, [pc, #168]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	610b      	str	r3, [r1, #16]
 80031b8:	e027      	b.n	800320a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d112      	bne.n	80031e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c0:	4b26      	ldr	r3, [pc, #152]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6892      	ldr	r2, [r2, #8]
 80031d0:	0211      	lsls	r1, r2, #8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6912      	ldr	r2, [r2, #16]
 80031d6:	0852      	lsrs	r2, r2, #1
 80031d8:	3a01      	subs	r2, #1
 80031da:	0552      	lsls	r2, r2, #21
 80031dc:	430a      	orrs	r2, r1
 80031de:	491f      	ldr	r1, [pc, #124]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	610b      	str	r3, [r1, #16]
 80031e4:	e011      	b.n	800320a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6892      	ldr	r2, [r2, #8]
 80031f6:	0211      	lsls	r1, r2, #8
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6952      	ldr	r2, [r2, #20]
 80031fc:	0852      	lsrs	r2, r2, #1
 80031fe:	3a01      	subs	r2, #1
 8003200:	0652      	lsls	r2, r2, #25
 8003202:	430a      	orrs	r2, r1
 8003204:	4915      	ldr	r1, [pc, #84]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003210:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003214:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe fba5 	bl	8001964 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321c:	e009      	b.n	8003232 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800321e:	f7fe fba1 	bl	8001964 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d902      	bls.n	8003232 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	73fb      	strb	r3, [r7, #15]
          break;
 8003230:	e005      	b.n	800323e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ef      	beq.n	800321e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <RCCEx_PLLSAI1_Config+0x1e0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e040      	b.n	80032f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe f976 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f992 	bl	80035c8 <UART_SetConfig>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e022      	b.n	80032f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fc0c 	bl	8003ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fc93 	bl	8003c18 <UART_CheckIdleState>
 80032f2:	4603      	mov	r3, r0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 8082 	bne.w	800341a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_UART_Transmit+0x26>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07a      	b.n	800341c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UART_Transmit+0x38>
 8003330:	2302      	movs	r3, #2
 8003332:	e073      	b.n	800341c <HAL_UART_Transmit+0x120>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	; 0x21
 8003348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fe fb0b 	bl	8001964 <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d108      	bne.n	800337c <HAL_UART_Transmit+0x80>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800338c:	e02d      	b.n	80033ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fc86 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e039      	b.n	800341c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ba:	b292      	uxth	r2, r2
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3302      	adds	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e008      	b.n	80033d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b292      	uxth	r2, r2
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1cb      	bne.n	800338e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2140      	movs	r1, #64	; 0x40
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fc52 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e005      	b.n	800341c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003438:	2b20      	cmp	r3, #32
 800343a:	f040 80bf 	bne.w	80035bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Receive+0x26>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0b7      	b.n	80035be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Receive+0x38>
 8003458:	2302      	movs	r3, #2
 800345a:	e0b0      	b.n	80035be <HAL_UART_Receive+0x19a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003478:	f7fe fa74 	bl	8001964 <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d10e      	bne.n	80034b6 <HAL_UART_Receive+0x92>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_UART_Receive+0x88>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034aa:	e02d      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034b4:	e028      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_UART_Receive+0xb6>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_UART_Receive+0xac>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ce:	e01b      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	227f      	movs	r2, #127	; 0x7f
 80034d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d8:	e016      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e2:	d10d      	bne.n	8003500 <HAL_UART_Receive+0xdc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_UART_Receive+0xd2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	227f      	movs	r2, #127	; 0x7f
 80034f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034f4:	e008      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	223f      	movs	r2, #63	; 0x3f
 80034fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034fe:	e003      	b.n	8003508 <HAL_UART_Receive+0xe4>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800350e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d108      	bne.n	800352c <HAL_UART_Receive+0x108>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e003      	b.n	8003534 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800353c:	e033      	b.n	80035a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2120      	movs	r1, #32
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fbae 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e032      	b.n	80035be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003564:	b29a      	uxth	r2, r3
 8003566:	8a7b      	ldrh	r3, [r7, #18]
 8003568:	4013      	ands	r3, r2
 800356a:	b29a      	uxth	r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	3302      	adds	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e00d      	b.n	8003594 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800357e:	b29b      	uxth	r3, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	8a7b      	ldrh	r3, [r7, #18]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4013      	ands	r3, r2
 8003588:	b2da      	uxtb	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1c5      	bne.n	800353e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035cc:	b08a      	sub	sp, #40	; 0x28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4ba5      	ldr	r3, [pc, #660]	; (800388c <UART_SetConfig+0x2c4>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a9a      	ldr	r2, [pc, #616]	; (8003890 <UART_SetConfig+0x2c8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	4313      	orrs	r3, r2
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	430a      	orrs	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a91      	ldr	r2, [pc, #580]	; (8003894 <UART_SetConfig+0x2cc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d126      	bne.n	80036a0 <UART_SetConfig+0xd8>
 8003652:	4b91      	ldr	r3, [pc, #580]	; (8003898 <UART_SetConfig+0x2d0>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d81b      	bhi.n	8003698 <UART_SetConfig+0xd0>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <UART_SetConfig+0xa0>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003679 	.word	0x08003679
 800366c:	08003689 	.word	0x08003689
 8003670:	08003681 	.word	0x08003681
 8003674:	08003691 	.word	0x08003691
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e0d6      	b.n	800382e <UART_SetConfig+0x266>
 8003680:	2302      	movs	r3, #2
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e0d2      	b.n	800382e <UART_SetConfig+0x266>
 8003688:	2304      	movs	r3, #4
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e0ce      	b.n	800382e <UART_SetConfig+0x266>
 8003690:	2308      	movs	r3, #8
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e0ca      	b.n	800382e <UART_SetConfig+0x266>
 8003698:	2310      	movs	r3, #16
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e0c6      	b.n	800382e <UART_SetConfig+0x266>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7d      	ldr	r2, [pc, #500]	; (800389c <UART_SetConfig+0x2d4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d138      	bne.n	800371c <UART_SetConfig+0x154>
 80036aa:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <UART_SetConfig+0x2d0>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d82d      	bhi.n	8003714 <UART_SetConfig+0x14c>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0xf8>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	08003715 	.word	0x08003715
 80036c8:	08003715 	.word	0x08003715
 80036cc:	08003715 	.word	0x08003715
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003715 	.word	0x08003715
 80036d8:	08003715 	.word	0x08003715
 80036dc:	08003715 	.word	0x08003715
 80036e0:	080036fd 	.word	0x080036fd
 80036e4:	08003715 	.word	0x08003715
 80036e8:	08003715 	.word	0x08003715
 80036ec:	08003715 	.word	0x08003715
 80036f0:	0800370d 	.word	0x0800370d
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e098      	b.n	800382e <UART_SetConfig+0x266>
 80036fc:	2302      	movs	r3, #2
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e094      	b.n	800382e <UART_SetConfig+0x266>
 8003704:	2304      	movs	r3, #4
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e090      	b.n	800382e <UART_SetConfig+0x266>
 800370c:	2308      	movs	r3, #8
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e08c      	b.n	800382e <UART_SetConfig+0x266>
 8003714:	2310      	movs	r3, #16
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e088      	b.n	800382e <UART_SetConfig+0x266>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5f      	ldr	r2, [pc, #380]	; (80038a0 <UART_SetConfig+0x2d8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d125      	bne.n	8003772 <UART_SetConfig+0x1aa>
 8003726:	4b5c      	ldr	r3, [pc, #368]	; (8003898 <UART_SetConfig+0x2d0>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003730:	2b30      	cmp	r3, #48	; 0x30
 8003732:	d016      	beq.n	8003762 <UART_SetConfig+0x19a>
 8003734:	2b30      	cmp	r3, #48	; 0x30
 8003736:	d818      	bhi.n	800376a <UART_SetConfig+0x1a2>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d00a      	beq.n	8003752 <UART_SetConfig+0x18a>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d814      	bhi.n	800376a <UART_SetConfig+0x1a2>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <UART_SetConfig+0x182>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d008      	beq.n	800375a <UART_SetConfig+0x192>
 8003748:	e00f      	b.n	800376a <UART_SetConfig+0x1a2>
 800374a:	2300      	movs	r3, #0
 800374c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003750:	e06d      	b.n	800382e <UART_SetConfig+0x266>
 8003752:	2302      	movs	r3, #2
 8003754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003758:	e069      	b.n	800382e <UART_SetConfig+0x266>
 800375a:	2304      	movs	r3, #4
 800375c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003760:	e065      	b.n	800382e <UART_SetConfig+0x266>
 8003762:	2308      	movs	r3, #8
 8003764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003768:	e061      	b.n	800382e <UART_SetConfig+0x266>
 800376a:	2310      	movs	r3, #16
 800376c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003770:	e05d      	b.n	800382e <UART_SetConfig+0x266>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <UART_SetConfig+0x2dc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d125      	bne.n	80037c8 <UART_SetConfig+0x200>
 800377c:	4b46      	ldr	r3, [pc, #280]	; (8003898 <UART_SetConfig+0x2d0>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003786:	2bc0      	cmp	r3, #192	; 0xc0
 8003788:	d016      	beq.n	80037b8 <UART_SetConfig+0x1f0>
 800378a:	2bc0      	cmp	r3, #192	; 0xc0
 800378c:	d818      	bhi.n	80037c0 <UART_SetConfig+0x1f8>
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d00a      	beq.n	80037a8 <UART_SetConfig+0x1e0>
 8003792:	2b80      	cmp	r3, #128	; 0x80
 8003794:	d814      	bhi.n	80037c0 <UART_SetConfig+0x1f8>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0x1d8>
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d008      	beq.n	80037b0 <UART_SetConfig+0x1e8>
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x1f8>
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e042      	b.n	800382e <UART_SetConfig+0x266>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e03e      	b.n	800382e <UART_SetConfig+0x266>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e03a      	b.n	800382e <UART_SetConfig+0x266>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e036      	b.n	800382e <UART_SetConfig+0x266>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e032      	b.n	800382e <UART_SetConfig+0x266>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <UART_SetConfig+0x2c8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d12a      	bne.n	8003828 <UART_SetConfig+0x260>
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <UART_SetConfig+0x2d0>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e0:	d01a      	beq.n	8003818 <UART_SetConfig+0x250>
 80037e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e6:	d81b      	bhi.n	8003820 <UART_SetConfig+0x258>
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ec:	d00c      	beq.n	8003808 <UART_SetConfig+0x240>
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d815      	bhi.n	8003820 <UART_SetConfig+0x258>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <UART_SetConfig+0x238>
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d008      	beq.n	8003810 <UART_SetConfig+0x248>
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x258>
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e012      	b.n	800382e <UART_SetConfig+0x266>
 8003808:	2302      	movs	r3, #2
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e00e      	b.n	800382e <UART_SetConfig+0x266>
 8003810:	2304      	movs	r3, #4
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003816:	e00a      	b.n	800382e <UART_SetConfig+0x266>
 8003818:	2308      	movs	r3, #8
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381e:	e006      	b.n	800382e <UART_SetConfig+0x266>
 8003820:	2310      	movs	r3, #16
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003826:	e002      	b.n	800382e <UART_SetConfig+0x266>
 8003828:	2310      	movs	r3, #16
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <UART_SetConfig+0x2c8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f040 808b 	bne.w	8003950 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800383a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800383e:	2b08      	cmp	r3, #8
 8003840:	d834      	bhi.n	80038ac <UART_SetConfig+0x2e4>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x280>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800386d 	.word	0x0800386d
 800384c:	080038ad 	.word	0x080038ad
 8003850:	08003875 	.word	0x08003875
 8003854:	080038ad 	.word	0x080038ad
 8003858:	0800387b 	.word	0x0800387b
 800385c:	080038ad 	.word	0x080038ad
 8003860:	080038ad 	.word	0x080038ad
 8003864:	080038ad 	.word	0x080038ad
 8003868:	08003883 	.word	0x08003883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7ff f90e 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003870:	61f8      	str	r0, [r7, #28]
        break;
 8003872:	e021      	b.n	80038b8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <UART_SetConfig+0x2e0>)
 8003876:	61fb      	str	r3, [r7, #28]
        break;
 8003878:	e01e      	b.n	80038b8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7ff f86f 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800387e:	61f8      	str	r0, [r7, #28]
        break;
 8003880:	e01a      	b.n	80038b8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003886:	61fb      	str	r3, [r7, #28]
        break;
 8003888:	e016      	b.n	80038b8 <UART_SetConfig+0x2f0>
 800388a:	bf00      	nop
 800388c:	efff69f3 	.word	0xefff69f3
 8003890:	40008000 	.word	0x40008000
 8003894:	40013800 	.word	0x40013800
 8003898:	40021000 	.word	0x40021000
 800389c:	40004400 	.word	0x40004400
 80038a0:	40004800 	.word	0x40004800
 80038a4:	40004c00 	.word	0x40004c00
 80038a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80fa 	beq.w	8003ab4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d305      	bcc.n	80038dc <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d903      	bls.n	80038e4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e2:	e0e7      	b.n	8003ab4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2200      	movs	r2, #0
 80038e8:	461c      	mov	r4, r3
 80038ea:	4615      	mov	r5, r2
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	022b      	lsls	r3, r5, #8
 80038f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038fa:	0222      	lsls	r2, r4, #8
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	6849      	ldr	r1, [r1, #4]
 8003900:	0849      	lsrs	r1, r1, #1
 8003902:	2000      	movs	r0, #0
 8003904:	4688      	mov	r8, r1
 8003906:	4681      	mov	r9, r0
 8003908:	eb12 0a08 	adds.w	sl, r2, r8
 800390c:	eb43 0b09 	adc.w	fp, r3, r9
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800391e:	4650      	mov	r0, sl
 8003920:	4659      	mov	r1, fp
 8003922:	f7fd f959 	bl	8000bd8 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003934:	d308      	bcc.n	8003948 <UART_SetConfig+0x380>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393c:	d204      	bcs.n	8003948 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e0b5      	b.n	8003ab4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800394e:	e0b1      	b.n	8003ab4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	d15d      	bne.n	8003a16 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800395a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800395e:	2b08      	cmp	r3, #8
 8003960:	d827      	bhi.n	80039b2 <UART_SetConfig+0x3ea>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <UART_SetConfig+0x3a0>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	0800398d 	.word	0x0800398d
 800396c:	08003995 	.word	0x08003995
 8003970:	0800399d 	.word	0x0800399d
 8003974:	080039b3 	.word	0x080039b3
 8003978:	080039a3 	.word	0x080039a3
 800397c:	080039b3 	.word	0x080039b3
 8003980:	080039b3 	.word	0x080039b3
 8003984:	080039b3 	.word	0x080039b3
 8003988:	080039ab 	.word	0x080039ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800398c:	f7ff f87e 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003990:	61f8      	str	r0, [r7, #28]
        break;
 8003992:	e014      	b.n	80039be <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7ff f890 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003998:	61f8      	str	r0, [r7, #28]
        break;
 800399a:	e010      	b.n	80039be <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <UART_SetConfig+0x508>)
 800399e:	61fb      	str	r3, [r7, #28]
        break;
 80039a0:	e00d      	b.n	80039be <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a2:	f7fe ffdb 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80039a6:	61f8      	str	r0, [r7, #28]
        break;
 80039a8:	e009      	b.n	80039be <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ae:	61fb      	str	r3, [r7, #28]
        break;
 80039b0:	e005      	b.n	80039be <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d077      	beq.n	8003ab4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005a      	lsls	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	441a      	add	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b0f      	cmp	r3, #15
 80039de:	d916      	bls.n	8003a0e <UART_SetConfig+0x446>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e6:	d212      	bcs.n	8003a0e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f023 030f 	bic.w	r3, r3, #15
 80039f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	8afb      	ldrh	r3, [r7, #22]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	8afa      	ldrh	r2, [r7, #22]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e052      	b.n	8003ab4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a14:	e04e      	b.n	8003ab4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d827      	bhi.n	8003a6e <UART_SetConfig+0x4a6>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0x45c>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a6f 	.word	0x08003a6f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a6f 	.word	0x08003a6f
 8003a3c:	08003a6f 	.word	0x08003a6f
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7ff f820 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003a4c:	61f8      	str	r0, [r7, #28]
        break;
 8003a4e:	e014      	b.n	8003a7a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7ff f832 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003a54:	61f8      	str	r0, [r7, #28]
        break;
 8003a56:	e010      	b.n	8003a7a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <UART_SetConfig+0x508>)
 8003a5a:	61fb      	str	r3, [r7, #28]
        break;
 8003a5c:	e00d      	b.n	8003a7a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5e:	f7fe ff7d 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003a62:	61f8      	str	r0, [r7, #28]
        break;
 8003a64:	e009      	b.n	8003a7a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6a:	61fb      	str	r3, [r7, #28]
        break;
 8003a6c:	e005      	b.n	8003a7a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a78:	bf00      	nop
    }

    if (pclk != 0U)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d019      	beq.n	8003ab4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085a      	lsrs	r2, r3, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	d909      	bls.n	8003aae <UART_SetConfig+0x4e6>
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d205      	bcs.n	8003aae <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	e002      	b.n	8003ab4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	00f42400 	.word	0x00f42400

08003ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01a      	beq.n	8003bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d10a      	bne.n	8003bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c28:	f7fd fe9c 	bl	8001964 <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d10e      	bne.n	8003c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f82d 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e023      	b.n	8003ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d10e      	bne.n	8003c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f817 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00d      	b.n	8003ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b09c      	sub	sp, #112	; 0x70
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	e0a5      	b.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	f000 80a1 	beq.w	8003e08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fd fe4d 	bl	8001964 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x32>
 8003cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d13e      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e6      	bne.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3308      	adds	r3, #8
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	663b      	str	r3, [r7, #96]	; 0x60
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e067      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d04f      	beq.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d76:	d147      	bne.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dd4:	623a      	str	r2, [r7, #32]
 8003dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	6a3a      	ldr	r2, [r7, #32]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e010      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4013      	ands	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f43f af4a 	beq.w	8003cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3770      	adds	r7, #112	; 0x70
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4d0d      	ldr	r5, [pc, #52]	; (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4d0b      	ldr	r5, [pc, #44]	; (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	; (8003e84 <__libc_init_array+0x44>)
 8003e54:	f002 ff2c 	bl	8006cb0 <_init>
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	0800711c 	.word	0x0800711c
 8003e7c:	0800711c 	.word	0x0800711c
 8003e80:	0800711c 	.word	0x0800711c
 8003e84:	08007120 	.word	0x08007120

08003e88 <malloc>:
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <malloc+0xc>)
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f000 b877 	b.w	8003f80 <_malloc_r>
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_free_r>:
 8003ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	d044      	beq.n	8003f38 <_free_r+0x90>
 8003eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb2:	9001      	str	r0, [sp, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8003eba:	bfb8      	it	lt
 8003ebc:	18e4      	addlt	r4, r4, r3
 8003ebe:	f001 fc23 	bl	8005708 <__malloc_lock>
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <_free_r+0x94>)
 8003ec4:	9801      	ldr	r0, [sp, #4]
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	b933      	cbnz	r3, 8003ed8 <_free_r+0x30>
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	6014      	str	r4, [r2, #0]
 8003ece:	b003      	add	sp, #12
 8003ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ed4:	f001 bc1e 	b.w	8005714 <__malloc_unlock>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d908      	bls.n	8003eee <_free_r+0x46>
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1961      	adds	r1, r4, r5
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf01      	itttt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	1949      	addeq	r1, r1, r5
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	e7ed      	b.n	8003eca <_free_r+0x22>
 8003eee:	461a      	mov	r2, r3
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b10b      	cbz	r3, 8003ef8 <_free_r+0x50>
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d9fa      	bls.n	8003eee <_free_r+0x46>
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	1855      	adds	r5, r2, r1
 8003efc:	42a5      	cmp	r5, r4
 8003efe:	d10b      	bne.n	8003f18 <_free_r+0x70>
 8003f00:	6824      	ldr	r4, [r4, #0]
 8003f02:	4421      	add	r1, r4
 8003f04:	1854      	adds	r4, r2, r1
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	d1e0      	bne.n	8003ece <_free_r+0x26>
 8003f0c:	681c      	ldr	r4, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	6053      	str	r3, [r2, #4]
 8003f12:	4421      	add	r1, r4
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	e7da      	b.n	8003ece <_free_r+0x26>
 8003f18:	d902      	bls.n	8003f20 <_free_r+0x78>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	6003      	str	r3, [r0, #0]
 8003f1e:	e7d6      	b.n	8003ece <_free_r+0x26>
 8003f20:	6825      	ldr	r5, [r4, #0]
 8003f22:	1961      	adds	r1, r4, r5
 8003f24:	428b      	cmp	r3, r1
 8003f26:	bf04      	itt	eq
 8003f28:	6819      	ldreq	r1, [r3, #0]
 8003f2a:	685b      	ldreq	r3, [r3, #4]
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	bf04      	itt	eq
 8003f30:	1949      	addeq	r1, r1, r5
 8003f32:	6021      	streq	r1, [r4, #0]
 8003f34:	6054      	str	r4, [r2, #4]
 8003f36:	e7ca      	b.n	8003ece <_free_r+0x26>
 8003f38:	b003      	add	sp, #12
 8003f3a:	bd30      	pop	{r4, r5, pc}
 8003f3c:	200002c8 	.word	0x200002c8

08003f40 <sbrk_aligned>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4e0e      	ldr	r6, [pc, #56]	; (8003f7c <sbrk_aligned+0x3c>)
 8003f44:	460c      	mov	r4, r1
 8003f46:	6831      	ldr	r1, [r6, #0]
 8003f48:	4605      	mov	r5, r0
 8003f4a:	b911      	cbnz	r1, 8003f52 <sbrk_aligned+0x12>
 8003f4c:	f000 fcf6 	bl	800493c <_sbrk_r>
 8003f50:	6030      	str	r0, [r6, #0]
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 fcf1 	bl	800493c <_sbrk_r>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	d00a      	beq.n	8003f74 <sbrk_aligned+0x34>
 8003f5e:	1cc4      	adds	r4, r0, #3
 8003f60:	f024 0403 	bic.w	r4, r4, #3
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d007      	beq.n	8003f78 <sbrk_aligned+0x38>
 8003f68:	1a21      	subs	r1, r4, r0
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fce6 	bl	800493c <_sbrk_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d101      	bne.n	8003f78 <sbrk_aligned+0x38>
 8003f74:	f04f 34ff 	mov.w	r4, #4294967295
 8003f78:	4620      	mov	r0, r4
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	200002cc 	.word	0x200002cc

08003f80 <_malloc_r>:
 8003f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f84:	1ccd      	adds	r5, r1, #3
 8003f86:	f025 0503 	bic.w	r5, r5, #3
 8003f8a:	3508      	adds	r5, #8
 8003f8c:	2d0c      	cmp	r5, #12
 8003f8e:	bf38      	it	cc
 8003f90:	250c      	movcc	r5, #12
 8003f92:	2d00      	cmp	r5, #0
 8003f94:	4607      	mov	r7, r0
 8003f96:	db01      	blt.n	8003f9c <_malloc_r+0x1c>
 8003f98:	42a9      	cmp	r1, r5
 8003f9a:	d905      	bls.n	8003fa8 <_malloc_r+0x28>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa8:	4e2e      	ldr	r6, [pc, #184]	; (8004064 <_malloc_r+0xe4>)
 8003faa:	f001 fbad 	bl	8005708 <__malloc_lock>
 8003fae:	6833      	ldr	r3, [r6, #0]
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	bb34      	cbnz	r4, 8004002 <_malloc_r+0x82>
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	f7ff ffc2 	bl	8003f40 <sbrk_aligned>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	d14d      	bne.n	800405e <_malloc_r+0xde>
 8003fc2:	6834      	ldr	r4, [r6, #0]
 8003fc4:	4626      	mov	r6, r4
 8003fc6:	2e00      	cmp	r6, #0
 8003fc8:	d140      	bne.n	800404c <_malloc_r+0xcc>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4638      	mov	r0, r7
 8003fd0:	eb04 0803 	add.w	r8, r4, r3
 8003fd4:	f000 fcb2 	bl	800493c <_sbrk_r>
 8003fd8:	4580      	cmp	r8, r0
 8003fda:	d13a      	bne.n	8004052 <_malloc_r+0xd2>
 8003fdc:	6821      	ldr	r1, [r4, #0]
 8003fde:	3503      	adds	r5, #3
 8003fe0:	1a6d      	subs	r5, r5, r1
 8003fe2:	f025 0503 	bic.w	r5, r5, #3
 8003fe6:	3508      	adds	r5, #8
 8003fe8:	2d0c      	cmp	r5, #12
 8003fea:	bf38      	it	cc
 8003fec:	250c      	movcc	r5, #12
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff ffa5 	bl	8003f40 <sbrk_aligned>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d02b      	beq.n	8004052 <_malloc_r+0xd2>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	442b      	add	r3, r5
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	e00e      	b.n	8004020 <_malloc_r+0xa0>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	1b52      	subs	r2, r2, r5
 8004006:	d41e      	bmi.n	8004046 <_malloc_r+0xc6>
 8004008:	2a0b      	cmp	r2, #11
 800400a:	d916      	bls.n	800403a <_malloc_r+0xba>
 800400c:	1961      	adds	r1, r4, r5
 800400e:	42a3      	cmp	r3, r4
 8004010:	6025      	str	r5, [r4, #0]
 8004012:	bf18      	it	ne
 8004014:	6059      	strne	r1, [r3, #4]
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	bf08      	it	eq
 800401a:	6031      	streq	r1, [r6, #0]
 800401c:	5162      	str	r2, [r4, r5]
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	4638      	mov	r0, r7
 8004022:	f104 060b 	add.w	r6, r4, #11
 8004026:	f001 fb75 	bl	8005714 <__malloc_unlock>
 800402a:	f026 0607 	bic.w	r6, r6, #7
 800402e:	1d23      	adds	r3, r4, #4
 8004030:	1af2      	subs	r2, r6, r3
 8004032:	d0b6      	beq.n	8003fa2 <_malloc_r+0x22>
 8004034:	1b9b      	subs	r3, r3, r6
 8004036:	50a3      	str	r3, [r4, r2]
 8004038:	e7b3      	b.n	8003fa2 <_malloc_r+0x22>
 800403a:	6862      	ldr	r2, [r4, #4]
 800403c:	42a3      	cmp	r3, r4
 800403e:	bf0c      	ite	eq
 8004040:	6032      	streq	r2, [r6, #0]
 8004042:	605a      	strne	r2, [r3, #4]
 8004044:	e7ec      	b.n	8004020 <_malloc_r+0xa0>
 8004046:	4623      	mov	r3, r4
 8004048:	6864      	ldr	r4, [r4, #4]
 800404a:	e7b2      	b.n	8003fb2 <_malloc_r+0x32>
 800404c:	4634      	mov	r4, r6
 800404e:	6876      	ldr	r6, [r6, #4]
 8004050:	e7b9      	b.n	8003fc6 <_malloc_r+0x46>
 8004052:	230c      	movs	r3, #12
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4638      	mov	r0, r7
 8004058:	f001 fb5c 	bl	8005714 <__malloc_unlock>
 800405c:	e7a1      	b.n	8003fa2 <_malloc_r+0x22>
 800405e:	6025      	str	r5, [r4, #0]
 8004060:	e7de      	b.n	8004020 <_malloc_r+0xa0>
 8004062:	bf00      	nop
 8004064:	200002c8 	.word	0x200002c8

08004068 <__cvt>:
 8004068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	ec55 4b10 	vmov	r4, r5, d0
 8004070:	2d00      	cmp	r5, #0
 8004072:	460e      	mov	r6, r1
 8004074:	4619      	mov	r1, r3
 8004076:	462b      	mov	r3, r5
 8004078:	bfbb      	ittet	lt
 800407a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800407e:	461d      	movlt	r5, r3
 8004080:	2300      	movge	r3, #0
 8004082:	232d      	movlt	r3, #45	; 0x2d
 8004084:	700b      	strb	r3, [r1, #0]
 8004086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004088:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800408c:	4691      	mov	r9, r2
 800408e:	f023 0820 	bic.w	r8, r3, #32
 8004092:	bfbc      	itt	lt
 8004094:	4622      	movlt	r2, r4
 8004096:	4614      	movlt	r4, r2
 8004098:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800409c:	d005      	beq.n	80040aa <__cvt+0x42>
 800409e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040a2:	d100      	bne.n	80040a6 <__cvt+0x3e>
 80040a4:	3601      	adds	r6, #1
 80040a6:	2102      	movs	r1, #2
 80040a8:	e000      	b.n	80040ac <__cvt+0x44>
 80040aa:	2103      	movs	r1, #3
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	ab02      	add	r3, sp, #8
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	ec45 4b10 	vmov	d0, r4, r5
 80040b8:	4653      	mov	r3, sl
 80040ba:	4632      	mov	r2, r6
 80040bc:	f000 fd24 	bl	8004b08 <_dtoa_r>
 80040c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c4:	4607      	mov	r7, r0
 80040c6:	d102      	bne.n	80040ce <__cvt+0x66>
 80040c8:	f019 0f01 	tst.w	r9, #1
 80040cc:	d022      	beq.n	8004114 <__cvt+0xac>
 80040ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d2:	eb07 0906 	add.w	r9, r7, r6
 80040d6:	d110      	bne.n	80040fa <__cvt+0x92>
 80040d8:	783b      	ldrb	r3, [r7, #0]
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d10a      	bne.n	80040f4 <__cvt+0x8c>
 80040de:	2200      	movs	r2, #0
 80040e0:	2300      	movs	r3, #0
 80040e2:	4620      	mov	r0, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	f7fc fd07 	bl	8000af8 <__aeabi_dcmpeq>
 80040ea:	b918      	cbnz	r0, 80040f4 <__cvt+0x8c>
 80040ec:	f1c6 0601 	rsb	r6, r6, #1
 80040f0:	f8ca 6000 	str.w	r6, [sl]
 80040f4:	f8da 3000 	ldr.w	r3, [sl]
 80040f8:	4499      	add	r9, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	2300      	movs	r3, #0
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 8004106:	b108      	cbz	r0, 800410c <__cvt+0xa4>
 8004108:	f8cd 900c 	str.w	r9, [sp, #12]
 800410c:	2230      	movs	r2, #48	; 0x30
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	454b      	cmp	r3, r9
 8004112:	d307      	bcc.n	8004124 <__cvt+0xbc>
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004118:	1bdb      	subs	r3, r3, r7
 800411a:	4638      	mov	r0, r7
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	b004      	add	sp, #16
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	1c59      	adds	r1, r3, #1
 8004126:	9103      	str	r1, [sp, #12]
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e7f0      	b.n	800410e <__cvt+0xa6>

0800412c <__exponent>:
 800412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412e:	4603      	mov	r3, r0
 8004130:	2900      	cmp	r1, #0
 8004132:	bfb8      	it	lt
 8004134:	4249      	neglt	r1, r1
 8004136:	f803 2b02 	strb.w	r2, [r3], #2
 800413a:	bfb4      	ite	lt
 800413c:	222d      	movlt	r2, #45	; 0x2d
 800413e:	222b      	movge	r2, #43	; 0x2b
 8004140:	2909      	cmp	r1, #9
 8004142:	7042      	strb	r2, [r0, #1]
 8004144:	dd2a      	ble.n	800419c <__exponent+0x70>
 8004146:	f10d 0407 	add.w	r4, sp, #7
 800414a:	46a4      	mov	ip, r4
 800414c:	270a      	movs	r7, #10
 800414e:	46a6      	mov	lr, r4
 8004150:	460a      	mov	r2, r1
 8004152:	fb91 f6f7 	sdiv	r6, r1, r7
 8004156:	fb07 1516 	mls	r5, r7, r6, r1
 800415a:	3530      	adds	r5, #48	; 0x30
 800415c:	2a63      	cmp	r2, #99	; 0x63
 800415e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004166:	4631      	mov	r1, r6
 8004168:	dcf1      	bgt.n	800414e <__exponent+0x22>
 800416a:	3130      	adds	r1, #48	; 0x30
 800416c:	f1ae 0502 	sub.w	r5, lr, #2
 8004170:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004174:	1c44      	adds	r4, r0, #1
 8004176:	4629      	mov	r1, r5
 8004178:	4561      	cmp	r1, ip
 800417a:	d30a      	bcc.n	8004192 <__exponent+0x66>
 800417c:	f10d 0209 	add.w	r2, sp, #9
 8004180:	eba2 020e 	sub.w	r2, r2, lr
 8004184:	4565      	cmp	r5, ip
 8004186:	bf88      	it	hi
 8004188:	2200      	movhi	r2, #0
 800418a:	4413      	add	r3, r2
 800418c:	1a18      	subs	r0, r3, r0
 800418e:	b003      	add	sp, #12
 8004190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004196:	f804 2f01 	strb.w	r2, [r4, #1]!
 800419a:	e7ed      	b.n	8004178 <__exponent+0x4c>
 800419c:	2330      	movs	r3, #48	; 0x30
 800419e:	3130      	adds	r1, #48	; 0x30
 80041a0:	7083      	strb	r3, [r0, #2]
 80041a2:	70c1      	strb	r1, [r0, #3]
 80041a4:	1d03      	adds	r3, r0, #4
 80041a6:	e7f1      	b.n	800418c <__exponent+0x60>

080041a8 <_printf_float>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	ed2d 8b02 	vpush	{d8}
 80041b0:	b08d      	sub	sp, #52	; 0x34
 80041b2:	460c      	mov	r4, r1
 80041b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041b8:	4616      	mov	r6, r2
 80041ba:	461f      	mov	r7, r3
 80041bc:	4605      	mov	r5, r0
 80041be:	f001 fa91 	bl	80056e4 <_localeconv_r>
 80041c2:	f8d0 a000 	ldr.w	sl, [r0]
 80041c6:	4650      	mov	r0, sl
 80041c8:	f7fc f814 	bl	80001f4 <strlen>
 80041cc:	2300      	movs	r3, #0
 80041ce:	930a      	str	r3, [sp, #40]	; 0x28
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	9305      	str	r3, [sp, #20]
 80041d4:	f8d8 3000 	ldr.w	r3, [r8]
 80041d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041dc:	3307      	adds	r3, #7
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	f103 0208 	add.w	r2, r3, #8
 80041e6:	f8c8 2000 	str.w	r2, [r8]
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041fa:	9307      	str	r3, [sp, #28]
 80041fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004200:	ee08 0a10 	vmov	s16, r0
 8004204:	4b9f      	ldr	r3, [pc, #636]	; (8004484 <_printf_float+0x2dc>)
 8004206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	f7fc fca5 	bl	8000b5c <__aeabi_dcmpun>
 8004212:	bb88      	cbnz	r0, 8004278 <_printf_float+0xd0>
 8004214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004218:	4b9a      	ldr	r3, [pc, #616]	; (8004484 <_printf_float+0x2dc>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	f7fc fc7f 	bl	8000b20 <__aeabi_dcmple>
 8004222:	bb48      	cbnz	r0, 8004278 <_printf_float+0xd0>
 8004224:	2200      	movs	r2, #0
 8004226:	2300      	movs	r3, #0
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f7fc fc6e 	bl	8000b0c <__aeabi_dcmplt>
 8004230:	b110      	cbz	r0, 8004238 <_printf_float+0x90>
 8004232:	232d      	movs	r3, #45	; 0x2d
 8004234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004238:	4b93      	ldr	r3, [pc, #588]	; (8004488 <_printf_float+0x2e0>)
 800423a:	4894      	ldr	r0, [pc, #592]	; (800448c <_printf_float+0x2e4>)
 800423c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004240:	bf94      	ite	ls
 8004242:	4698      	movls	r8, r3
 8004244:	4680      	movhi	r8, r0
 8004246:	2303      	movs	r3, #3
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	9b05      	ldr	r3, [sp, #20]
 800424c:	f023 0204 	bic.w	r2, r3, #4
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	f04f 0900 	mov.w	r9, #0
 8004256:	9700      	str	r7, [sp, #0]
 8004258:	4633      	mov	r3, r6
 800425a:	aa0b      	add	r2, sp, #44	; 0x2c
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f9d8 	bl	8004614 <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	f040 8090 	bne.w	800438a <_printf_float+0x1e2>
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	b00d      	add	sp, #52	; 0x34
 8004270:	ecbd 8b02 	vpop	{d8}
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc fc6c 	bl	8000b5c <__aeabi_dcmpun>
 8004284:	b140      	cbz	r0, 8004298 <_printf_float+0xf0>
 8004286:	464b      	mov	r3, r9
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfbc      	itt	lt
 800428c:	232d      	movlt	r3, #45	; 0x2d
 800428e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004292:	487f      	ldr	r0, [pc, #508]	; (8004490 <_printf_float+0x2e8>)
 8004294:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <_printf_float+0x2ec>)
 8004296:	e7d1      	b.n	800423c <_printf_float+0x94>
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800429e:	9206      	str	r2, [sp, #24]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	d13f      	bne.n	8004324 <_printf_float+0x17c>
 80042a4:	2306      	movs	r3, #6
 80042a6:	6063      	str	r3, [r4, #4]
 80042a8:	9b05      	ldr	r3, [sp, #20]
 80042aa:	6861      	ldr	r1, [r4, #4]
 80042ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042b0:	2300      	movs	r3, #0
 80042b2:	9303      	str	r3, [sp, #12]
 80042b4:	ab0a      	add	r3, sp, #40	; 0x28
 80042b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042ba:	ab09      	add	r3, sp, #36	; 0x24
 80042bc:	ec49 8b10 	vmov	d0, r8, r9
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7ff fecd 	bl	8004068 <__cvt>
 80042ce:	9b06      	ldr	r3, [sp, #24]
 80042d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042d2:	2b47      	cmp	r3, #71	; 0x47
 80042d4:	4680      	mov	r8, r0
 80042d6:	d108      	bne.n	80042ea <_printf_float+0x142>
 80042d8:	1cc8      	adds	r0, r1, #3
 80042da:	db02      	blt.n	80042e2 <_printf_float+0x13a>
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	4299      	cmp	r1, r3
 80042e0:	dd41      	ble.n	8004366 <_printf_float+0x1be>
 80042e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80042e6:	fa5f fb8b 	uxtb.w	fp, fp
 80042ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042ee:	d820      	bhi.n	8004332 <_printf_float+0x18a>
 80042f0:	3901      	subs	r1, #1
 80042f2:	465a      	mov	r2, fp
 80042f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f8:	9109      	str	r1, [sp, #36]	; 0x24
 80042fa:	f7ff ff17 	bl	800412c <__exponent>
 80042fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004300:	1813      	adds	r3, r2, r0
 8004302:	2a01      	cmp	r2, #1
 8004304:	4681      	mov	r9, r0
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	dc02      	bgt.n	8004310 <_printf_float+0x168>
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	07d2      	lsls	r2, r2, #31
 800430e:	d501      	bpl.n	8004314 <_printf_float+0x16c>
 8004310:	3301      	adds	r3, #1
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004318:	2b00      	cmp	r3, #0
 800431a:	d09c      	beq.n	8004256 <_printf_float+0xae>
 800431c:	232d      	movs	r3, #45	; 0x2d
 800431e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004322:	e798      	b.n	8004256 <_printf_float+0xae>
 8004324:	9a06      	ldr	r2, [sp, #24]
 8004326:	2a47      	cmp	r2, #71	; 0x47
 8004328:	d1be      	bne.n	80042a8 <_printf_float+0x100>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1bc      	bne.n	80042a8 <_printf_float+0x100>
 800432e:	2301      	movs	r3, #1
 8004330:	e7b9      	b.n	80042a6 <_printf_float+0xfe>
 8004332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004336:	d118      	bne.n	800436a <_printf_float+0x1c2>
 8004338:	2900      	cmp	r1, #0
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	dd0b      	ble.n	8004356 <_printf_float+0x1ae>
 800433e:	6121      	str	r1, [r4, #16]
 8004340:	b913      	cbnz	r3, 8004348 <_printf_float+0x1a0>
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	07d0      	lsls	r0, r2, #31
 8004346:	d502      	bpl.n	800434e <_printf_float+0x1a6>
 8004348:	3301      	adds	r3, #1
 800434a:	440b      	add	r3, r1
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004350:	f04f 0900 	mov.w	r9, #0
 8004354:	e7de      	b.n	8004314 <_printf_float+0x16c>
 8004356:	b913      	cbnz	r3, 800435e <_printf_float+0x1b6>
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	07d2      	lsls	r2, r2, #31
 800435c:	d501      	bpl.n	8004362 <_printf_float+0x1ba>
 800435e:	3302      	adds	r3, #2
 8004360:	e7f4      	b.n	800434c <_printf_float+0x1a4>
 8004362:	2301      	movs	r3, #1
 8004364:	e7f2      	b.n	800434c <_printf_float+0x1a4>
 8004366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800436a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436c:	4299      	cmp	r1, r3
 800436e:	db05      	blt.n	800437c <_printf_float+0x1d4>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	6121      	str	r1, [r4, #16]
 8004374:	07d8      	lsls	r0, r3, #31
 8004376:	d5ea      	bpl.n	800434e <_printf_float+0x1a6>
 8004378:	1c4b      	adds	r3, r1, #1
 800437a:	e7e7      	b.n	800434c <_printf_float+0x1a4>
 800437c:	2900      	cmp	r1, #0
 800437e:	bfd4      	ite	le
 8004380:	f1c1 0202 	rsble	r2, r1, #2
 8004384:	2201      	movgt	r2, #1
 8004386:	4413      	add	r3, r2
 8004388:	e7e0      	b.n	800434c <_printf_float+0x1a4>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	055a      	lsls	r2, r3, #21
 800438e:	d407      	bmi.n	80043a0 <_printf_float+0x1f8>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	4642      	mov	r2, r8
 8004394:	4631      	mov	r1, r6
 8004396:	4628      	mov	r0, r5
 8004398:	47b8      	blx	r7
 800439a:	3001      	adds	r0, #1
 800439c:	d12c      	bne.n	80043f8 <_printf_float+0x250>
 800439e:	e764      	b.n	800426a <_printf_float+0xc2>
 80043a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043a4:	f240 80e0 	bls.w	8004568 <_printf_float+0x3c0>
 80043a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043ac:	2200      	movs	r2, #0
 80043ae:	2300      	movs	r3, #0
 80043b0:	f7fc fba2 	bl	8000af8 <__aeabi_dcmpeq>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d034      	beq.n	8004422 <_printf_float+0x27a>
 80043b8:	4a37      	ldr	r2, [pc, #220]	; (8004498 <_printf_float+0x2f0>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f af51 	beq.w	800426a <_printf_float+0xc2>
 80043c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043cc:	429a      	cmp	r2, r3
 80043ce:	db02      	blt.n	80043d6 <_printf_float+0x22e>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07d8      	lsls	r0, r3, #31
 80043d4:	d510      	bpl.n	80043f8 <_printf_float+0x250>
 80043d6:	ee18 3a10 	vmov	r3, s16
 80043da:	4652      	mov	r2, sl
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af41 	beq.w	800426a <_printf_float+0xc2>
 80043e8:	f04f 0800 	mov.w	r8, #0
 80043ec:	f104 091a 	add.w	r9, r4, #26
 80043f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	4543      	cmp	r3, r8
 80043f6:	dc09      	bgt.n	800440c <_printf_float+0x264>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	079b      	lsls	r3, r3, #30
 80043fc:	f100 8105 	bmi.w	800460a <_printf_float+0x462>
 8004400:	68e0      	ldr	r0, [r4, #12]
 8004402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004404:	4298      	cmp	r0, r3
 8004406:	bfb8      	it	lt
 8004408:	4618      	movlt	r0, r3
 800440a:	e730      	b.n	800426e <_printf_float+0xc6>
 800440c:	2301      	movs	r3, #1
 800440e:	464a      	mov	r2, r9
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f af27 	beq.w	800426a <_printf_float+0xc2>
 800441c:	f108 0801 	add.w	r8, r8, #1
 8004420:	e7e6      	b.n	80043f0 <_printf_float+0x248>
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	dc39      	bgt.n	800449c <_printf_float+0x2f4>
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <_printf_float+0x2f0>)
 800442a:	2301      	movs	r3, #1
 800442c:	4631      	mov	r1, r6
 800442e:	4628      	mov	r0, r5
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f af19 	beq.w	800426a <_printf_float+0xc2>
 8004438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800443c:	4313      	orrs	r3, r2
 800443e:	d102      	bne.n	8004446 <_printf_float+0x29e>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	07d9      	lsls	r1, r3, #31
 8004444:	d5d8      	bpl.n	80043f8 <_printf_float+0x250>
 8004446:	ee18 3a10 	vmov	r3, s16
 800444a:	4652      	mov	r2, sl
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f af09 	beq.w	800426a <_printf_float+0xc2>
 8004458:	f04f 0900 	mov.w	r9, #0
 800445c:	f104 0a1a 	add.w	sl, r4, #26
 8004460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004462:	425b      	negs	r3, r3
 8004464:	454b      	cmp	r3, r9
 8004466:	dc01      	bgt.n	800446c <_printf_float+0x2c4>
 8004468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800446a:	e792      	b.n	8004392 <_printf_float+0x1ea>
 800446c:	2301      	movs	r3, #1
 800446e:	4652      	mov	r2, sl
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	f43f aef7 	beq.w	800426a <_printf_float+0xc2>
 800447c:	f109 0901 	add.w	r9, r9, #1
 8004480:	e7ee      	b.n	8004460 <_printf_float+0x2b8>
 8004482:	bf00      	nop
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	08006d40 	.word	0x08006d40
 800448c:	08006d44 	.word	0x08006d44
 8004490:	08006d4c 	.word	0x08006d4c
 8004494:	08006d48 	.word	0x08006d48
 8004498:	08006d50 	.word	0x08006d50
 800449c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800449e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bfa8      	it	ge
 80044a4:	461a      	movge	r2, r3
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	4691      	mov	r9, r2
 80044aa:	dc37      	bgt.n	800451c <_printf_float+0x374>
 80044ac:	f04f 0b00 	mov.w	fp, #0
 80044b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044b4:	f104 021a 	add.w	r2, r4, #26
 80044b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ba:	9305      	str	r3, [sp, #20]
 80044bc:	eba3 0309 	sub.w	r3, r3, r9
 80044c0:	455b      	cmp	r3, fp
 80044c2:	dc33      	bgt.n	800452c <_printf_float+0x384>
 80044c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c8:	429a      	cmp	r2, r3
 80044ca:	db3b      	blt.n	8004544 <_printf_float+0x39c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07da      	lsls	r2, r3, #31
 80044d0:	d438      	bmi.n	8004544 <_printf_float+0x39c>
 80044d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d4:	9a05      	ldr	r2, [sp, #20]
 80044d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044d8:	1a9a      	subs	r2, r3, r2
 80044da:	eba3 0901 	sub.w	r9, r3, r1
 80044de:	4591      	cmp	r9, r2
 80044e0:	bfa8      	it	ge
 80044e2:	4691      	movge	r9, r2
 80044e4:	f1b9 0f00 	cmp.w	r9, #0
 80044e8:	dc35      	bgt.n	8004556 <_printf_float+0x3ae>
 80044ea:	f04f 0800 	mov.w	r8, #0
 80044ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044f2:	f104 0a1a 	add.w	sl, r4, #26
 80044f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	eba3 0309 	sub.w	r3, r3, r9
 8004500:	4543      	cmp	r3, r8
 8004502:	f77f af79 	ble.w	80043f8 <_printf_float+0x250>
 8004506:	2301      	movs	r3, #1
 8004508:	4652      	mov	r2, sl
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f aeaa 	beq.w	800426a <_printf_float+0xc2>
 8004516:	f108 0801 	add.w	r8, r8, #1
 800451a:	e7ec      	b.n	80044f6 <_printf_float+0x34e>
 800451c:	4613      	mov	r3, r2
 800451e:	4631      	mov	r1, r6
 8004520:	4642      	mov	r2, r8
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	d1c0      	bne.n	80044ac <_printf_float+0x304>
 800452a:	e69e      	b.n	800426a <_printf_float+0xc2>
 800452c:	2301      	movs	r3, #1
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	9205      	str	r2, [sp, #20]
 8004534:	47b8      	blx	r7
 8004536:	3001      	adds	r0, #1
 8004538:	f43f ae97 	beq.w	800426a <_printf_float+0xc2>
 800453c:	9a05      	ldr	r2, [sp, #20]
 800453e:	f10b 0b01 	add.w	fp, fp, #1
 8004542:	e7b9      	b.n	80044b8 <_printf_float+0x310>
 8004544:	ee18 3a10 	vmov	r3, s16
 8004548:	4652      	mov	r2, sl
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	d1be      	bne.n	80044d2 <_printf_float+0x32a>
 8004554:	e689      	b.n	800426a <_printf_float+0xc2>
 8004556:	9a05      	ldr	r2, [sp, #20]
 8004558:	464b      	mov	r3, r9
 800455a:	4442      	add	r2, r8
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	d1c1      	bne.n	80044ea <_printf_float+0x342>
 8004566:	e680      	b.n	800426a <_printf_float+0xc2>
 8004568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800456a:	2a01      	cmp	r2, #1
 800456c:	dc01      	bgt.n	8004572 <_printf_float+0x3ca>
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d538      	bpl.n	80045e4 <_printf_float+0x43c>
 8004572:	2301      	movs	r3, #1
 8004574:	4642      	mov	r2, r8
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f ae74 	beq.w	800426a <_printf_float+0xc2>
 8004582:	ee18 3a10 	vmov	r3, s16
 8004586:	4652      	mov	r2, sl
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f43f ae6b 	beq.w	800426a <_printf_float+0xc2>
 8004594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004598:	2200      	movs	r2, #0
 800459a:	2300      	movs	r3, #0
 800459c:	f7fc faac 	bl	8000af8 <__aeabi_dcmpeq>
 80045a0:	b9d8      	cbnz	r0, 80045da <_printf_float+0x432>
 80045a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a4:	f108 0201 	add.w	r2, r8, #1
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	d10e      	bne.n	80045d2 <_printf_float+0x42a>
 80045b4:	e659      	b.n	800426a <_printf_float+0xc2>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f ae52 	beq.w	800426a <_printf_float+0xc2>
 80045c6:	f108 0801 	add.w	r8, r8, #1
 80045ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4543      	cmp	r3, r8
 80045d0:	dcf1      	bgt.n	80045b6 <_printf_float+0x40e>
 80045d2:	464b      	mov	r3, r9
 80045d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045d8:	e6dc      	b.n	8004394 <_printf_float+0x1ec>
 80045da:	f04f 0800 	mov.w	r8, #0
 80045de:	f104 0a1a 	add.w	sl, r4, #26
 80045e2:	e7f2      	b.n	80045ca <_printf_float+0x422>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4642      	mov	r2, r8
 80045e8:	e7df      	b.n	80045aa <_printf_float+0x402>
 80045ea:	2301      	movs	r3, #1
 80045ec:	464a      	mov	r2, r9
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	f43f ae38 	beq.w	800426a <_printf_float+0xc2>
 80045fa:	f108 0801 	add.w	r8, r8, #1
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	4543      	cmp	r3, r8
 8004606:	dcf0      	bgt.n	80045ea <_printf_float+0x442>
 8004608:	e6fa      	b.n	8004400 <_printf_float+0x258>
 800460a:	f04f 0800 	mov.w	r8, #0
 800460e:	f104 0919 	add.w	r9, r4, #25
 8004612:	e7f4      	b.n	80045fe <_printf_float+0x456>

08004614 <_printf_common>:
 8004614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	4616      	mov	r6, r2
 800461a:	4699      	mov	r9, r3
 800461c:	688a      	ldr	r2, [r1, #8]
 800461e:	690b      	ldr	r3, [r1, #16]
 8004620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004624:	4293      	cmp	r3, r2
 8004626:	bfb8      	it	lt
 8004628:	4613      	movlt	r3, r2
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004630:	4607      	mov	r7, r0
 8004632:	460c      	mov	r4, r1
 8004634:	b10a      	cbz	r2, 800463a <_printf_common+0x26>
 8004636:	3301      	adds	r3, #1
 8004638:	6033      	str	r3, [r6, #0]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	0699      	lsls	r1, r3, #26
 800463e:	bf42      	ittt	mi
 8004640:	6833      	ldrmi	r3, [r6, #0]
 8004642:	3302      	addmi	r3, #2
 8004644:	6033      	strmi	r3, [r6, #0]
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	f015 0506 	ands.w	r5, r5, #6
 800464c:	d106      	bne.n	800465c <_printf_common+0x48>
 800464e:	f104 0a19 	add.w	sl, r4, #25
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	6832      	ldr	r2, [r6, #0]
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	42ab      	cmp	r3, r5
 800465a:	dc26      	bgt.n	80046aa <_printf_common+0x96>
 800465c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004660:	1e13      	subs	r3, r2, #0
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	bf18      	it	ne
 8004666:	2301      	movne	r3, #1
 8004668:	0692      	lsls	r2, r2, #26
 800466a:	d42b      	bmi.n	80046c4 <_printf_common+0xb0>
 800466c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004670:	4649      	mov	r1, r9
 8004672:	4638      	mov	r0, r7
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d01e      	beq.n	80046b8 <_printf_common+0xa4>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	68e5      	ldr	r5, [r4, #12]
 800467e:	6832      	ldr	r2, [r6, #0]
 8004680:	f003 0306 	and.w	r3, r3, #6
 8004684:	2b04      	cmp	r3, #4
 8004686:	bf08      	it	eq
 8004688:	1aad      	subeq	r5, r5, r2
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	6922      	ldr	r2, [r4, #16]
 800468e:	bf0c      	ite	eq
 8004690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004694:	2500      	movne	r5, #0
 8004696:	4293      	cmp	r3, r2
 8004698:	bfc4      	itt	gt
 800469a:	1a9b      	subgt	r3, r3, r2
 800469c:	18ed      	addgt	r5, r5, r3
 800469e:	2600      	movs	r6, #0
 80046a0:	341a      	adds	r4, #26
 80046a2:	42b5      	cmp	r5, r6
 80046a4:	d11a      	bne.n	80046dc <_printf_common+0xc8>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e008      	b.n	80046bc <_printf_common+0xa8>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4649      	mov	r1, r9
 80046b0:	4638      	mov	r0, r7
 80046b2:	47c0      	blx	r8
 80046b4:	3001      	adds	r0, #1
 80046b6:	d103      	bne.n	80046c0 <_printf_common+0xac>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7c6      	b.n	8004652 <_printf_common+0x3e>
 80046c4:	18e1      	adds	r1, r4, r3
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	2030      	movs	r0, #48	; 0x30
 80046ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ce:	4422      	add	r2, r4
 80046d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d8:	3302      	adds	r3, #2
 80046da:	e7c7      	b.n	800466c <_printf_common+0x58>
 80046dc:	2301      	movs	r3, #1
 80046de:	4622      	mov	r2, r4
 80046e0:	4649      	mov	r1, r9
 80046e2:	4638      	mov	r0, r7
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d0e6      	beq.n	80046b8 <_printf_common+0xa4>
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7d9      	b.n	80046a2 <_printf_common+0x8e>
	...

080046f0 <_printf_i>:
 80046f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	7e0f      	ldrb	r7, [r1, #24]
 80046f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046f8:	2f78      	cmp	r7, #120	; 0x78
 80046fa:	4691      	mov	r9, r2
 80046fc:	4680      	mov	r8, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	469a      	mov	sl, r3
 8004702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004706:	d807      	bhi.n	8004718 <_printf_i+0x28>
 8004708:	2f62      	cmp	r7, #98	; 0x62
 800470a:	d80a      	bhi.n	8004722 <_printf_i+0x32>
 800470c:	2f00      	cmp	r7, #0
 800470e:	f000 80d8 	beq.w	80048c2 <_printf_i+0x1d2>
 8004712:	2f58      	cmp	r7, #88	; 0x58
 8004714:	f000 80a3 	beq.w	800485e <_printf_i+0x16e>
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004720:	e03a      	b.n	8004798 <_printf_i+0xa8>
 8004722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004726:	2b15      	cmp	r3, #21
 8004728:	d8f6      	bhi.n	8004718 <_printf_i+0x28>
 800472a:	a101      	add	r1, pc, #4	; (adr r1, 8004730 <_printf_i+0x40>)
 800472c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004730:	08004789 	.word	0x08004789
 8004734:	0800479d 	.word	0x0800479d
 8004738:	08004719 	.word	0x08004719
 800473c:	08004719 	.word	0x08004719
 8004740:	08004719 	.word	0x08004719
 8004744:	08004719 	.word	0x08004719
 8004748:	0800479d 	.word	0x0800479d
 800474c:	08004719 	.word	0x08004719
 8004750:	08004719 	.word	0x08004719
 8004754:	08004719 	.word	0x08004719
 8004758:	08004719 	.word	0x08004719
 800475c:	080048a9 	.word	0x080048a9
 8004760:	080047cd 	.word	0x080047cd
 8004764:	0800488b 	.word	0x0800488b
 8004768:	08004719 	.word	0x08004719
 800476c:	08004719 	.word	0x08004719
 8004770:	080048cb 	.word	0x080048cb
 8004774:	08004719 	.word	0x08004719
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004719 	.word	0x08004719
 8004780:	08004719 	.word	0x08004719
 8004784:	08004893 	.word	0x08004893
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004798:	2301      	movs	r3, #1
 800479a:	e0a3      	b.n	80048e4 <_printf_i+0x1f4>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	6829      	ldr	r1, [r5, #0]
 80047a0:	0606      	lsls	r6, r0, #24
 80047a2:	f101 0304 	add.w	r3, r1, #4
 80047a6:	d50a      	bpl.n	80047be <_printf_i+0xce>
 80047a8:	680e      	ldr	r6, [r1, #0]
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	da03      	bge.n	80047b8 <_printf_i+0xc8>
 80047b0:	232d      	movs	r3, #45	; 0x2d
 80047b2:	4276      	negs	r6, r6
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b8:	485e      	ldr	r0, [pc, #376]	; (8004934 <_printf_i+0x244>)
 80047ba:	230a      	movs	r3, #10
 80047bc:	e019      	b.n	80047f2 <_printf_i+0x102>
 80047be:	680e      	ldr	r6, [r1, #0]
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047c6:	bf18      	it	ne
 80047c8:	b236      	sxthne	r6, r6
 80047ca:	e7ef      	b.n	80047ac <_printf_i+0xbc>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	6029      	str	r1, [r5, #0]
 80047d4:	0601      	lsls	r1, r0, #24
 80047d6:	d501      	bpl.n	80047dc <_printf_i+0xec>
 80047d8:	681e      	ldr	r6, [r3, #0]
 80047da:	e002      	b.n	80047e2 <_printf_i+0xf2>
 80047dc:	0646      	lsls	r6, r0, #25
 80047de:	d5fb      	bpl.n	80047d8 <_printf_i+0xe8>
 80047e0:	881e      	ldrh	r6, [r3, #0]
 80047e2:	4854      	ldr	r0, [pc, #336]	; (8004934 <_printf_i+0x244>)
 80047e4:	2f6f      	cmp	r7, #111	; 0x6f
 80047e6:	bf0c      	ite	eq
 80047e8:	2308      	moveq	r3, #8
 80047ea:	230a      	movne	r3, #10
 80047ec:	2100      	movs	r1, #0
 80047ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047f2:	6865      	ldr	r5, [r4, #4]
 80047f4:	60a5      	str	r5, [r4, #8]
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	bfa2      	ittt	ge
 80047fa:	6821      	ldrge	r1, [r4, #0]
 80047fc:	f021 0104 	bicge.w	r1, r1, #4
 8004800:	6021      	strge	r1, [r4, #0]
 8004802:	b90e      	cbnz	r6, 8004808 <_printf_i+0x118>
 8004804:	2d00      	cmp	r5, #0
 8004806:	d04d      	beq.n	80048a4 <_printf_i+0x1b4>
 8004808:	4615      	mov	r5, r2
 800480a:	fbb6 f1f3 	udiv	r1, r6, r3
 800480e:	fb03 6711 	mls	r7, r3, r1, r6
 8004812:	5dc7      	ldrb	r7, [r0, r7]
 8004814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004818:	4637      	mov	r7, r6
 800481a:	42bb      	cmp	r3, r7
 800481c:	460e      	mov	r6, r1
 800481e:	d9f4      	bls.n	800480a <_printf_i+0x11a>
 8004820:	2b08      	cmp	r3, #8
 8004822:	d10b      	bne.n	800483c <_printf_i+0x14c>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	07de      	lsls	r6, r3, #31
 8004828:	d508      	bpl.n	800483c <_printf_i+0x14c>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	4299      	cmp	r1, r3
 8004830:	bfde      	ittt	le
 8004832:	2330      	movle	r3, #48	; 0x30
 8004834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800483c:	1b52      	subs	r2, r2, r5
 800483e:	6122      	str	r2, [r4, #16]
 8004840:	f8cd a000 	str.w	sl, [sp]
 8004844:	464b      	mov	r3, r9
 8004846:	aa03      	add	r2, sp, #12
 8004848:	4621      	mov	r1, r4
 800484a:	4640      	mov	r0, r8
 800484c:	f7ff fee2 	bl	8004614 <_printf_common>
 8004850:	3001      	adds	r0, #1
 8004852:	d14c      	bne.n	80048ee <_printf_i+0x1fe>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	b004      	add	sp, #16
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	4835      	ldr	r0, [pc, #212]	; (8004934 <_printf_i+0x244>)
 8004860:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004864:	6829      	ldr	r1, [r5, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f851 6b04 	ldr.w	r6, [r1], #4
 800486c:	6029      	str	r1, [r5, #0]
 800486e:	061d      	lsls	r5, r3, #24
 8004870:	d514      	bpl.n	800489c <_printf_i+0x1ac>
 8004872:	07df      	lsls	r7, r3, #31
 8004874:	bf44      	itt	mi
 8004876:	f043 0320 	orrmi.w	r3, r3, #32
 800487a:	6023      	strmi	r3, [r4, #0]
 800487c:	b91e      	cbnz	r6, 8004886 <_printf_i+0x196>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	2310      	movs	r3, #16
 8004888:	e7b0      	b.n	80047ec <_printf_i+0xfc>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f043 0320 	orr.w	r3, r3, #32
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	2378      	movs	r3, #120	; 0x78
 8004894:	4828      	ldr	r0, [pc, #160]	; (8004938 <_printf_i+0x248>)
 8004896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800489a:	e7e3      	b.n	8004864 <_printf_i+0x174>
 800489c:	0659      	lsls	r1, r3, #25
 800489e:	bf48      	it	mi
 80048a0:	b2b6      	uxthmi	r6, r6
 80048a2:	e7e6      	b.n	8004872 <_printf_i+0x182>
 80048a4:	4615      	mov	r5, r2
 80048a6:	e7bb      	b.n	8004820 <_printf_i+0x130>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6826      	ldr	r6, [r4, #0]
 80048ac:	6961      	ldr	r1, [r4, #20]
 80048ae:	1d18      	adds	r0, r3, #4
 80048b0:	6028      	str	r0, [r5, #0]
 80048b2:	0635      	lsls	r5, r6, #24
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0x1cc>
 80048b8:	6019      	str	r1, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0x1d2>
 80048bc:	0670      	lsls	r0, r6, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0x1c8>
 80048c0:	8019      	strh	r1, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	6123      	str	r3, [r4, #16]
 80048c6:	4615      	mov	r5, r2
 80048c8:	e7ba      	b.n	8004840 <_printf_i+0x150>
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	681d      	ldr	r5, [r3, #0]
 80048d2:	6862      	ldr	r2, [r4, #4]
 80048d4:	2100      	movs	r1, #0
 80048d6:	4628      	mov	r0, r5
 80048d8:	f7fb fc9a 	bl	8000210 <memchr>
 80048dc:	b108      	cbz	r0, 80048e2 <_printf_i+0x1f2>
 80048de:	1b40      	subs	r0, r0, r5
 80048e0:	6060      	str	r0, [r4, #4]
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	6123      	str	r3, [r4, #16]
 80048e6:	2300      	movs	r3, #0
 80048e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ec:	e7a8      	b.n	8004840 <_printf_i+0x150>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	462a      	mov	r2, r5
 80048f2:	4649      	mov	r1, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	47d0      	blx	sl
 80048f8:	3001      	adds	r0, #1
 80048fa:	d0ab      	beq.n	8004854 <_printf_i+0x164>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	079b      	lsls	r3, r3, #30
 8004900:	d413      	bmi.n	800492a <_printf_i+0x23a>
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	4298      	cmp	r0, r3
 8004908:	bfb8      	it	lt
 800490a:	4618      	movlt	r0, r3
 800490c:	e7a4      	b.n	8004858 <_printf_i+0x168>
 800490e:	2301      	movs	r3, #1
 8004910:	4632      	mov	r2, r6
 8004912:	4649      	mov	r1, r9
 8004914:	4640      	mov	r0, r8
 8004916:	47d0      	blx	sl
 8004918:	3001      	adds	r0, #1
 800491a:	d09b      	beq.n	8004854 <_printf_i+0x164>
 800491c:	3501      	adds	r5, #1
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	9903      	ldr	r1, [sp, #12]
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	42ab      	cmp	r3, r5
 8004926:	dcf2      	bgt.n	800490e <_printf_i+0x21e>
 8004928:	e7eb      	b.n	8004902 <_printf_i+0x212>
 800492a:	2500      	movs	r5, #0
 800492c:	f104 0619 	add.w	r6, r4, #25
 8004930:	e7f5      	b.n	800491e <_printf_i+0x22e>
 8004932:	bf00      	nop
 8004934:	08006d52 	.word	0x08006d52
 8004938:	08006d63 	.word	0x08006d63

0800493c <_sbrk_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4d06      	ldr	r5, [pc, #24]	; (8004958 <_sbrk_r+0x1c>)
 8004940:	2300      	movs	r3, #0
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	f7fc ff2a 	bl	80017a0 <_sbrk>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_sbrk_r+0x1a>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_sbrk_r+0x1a>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	200002d0 	.word	0x200002d0

0800495c <sniprintf>:
 800495c:	b40c      	push	{r2, r3}
 800495e:	b530      	push	{r4, r5, lr}
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <sniprintf+0x64>)
 8004962:	1e0c      	subs	r4, r1, #0
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	b09d      	sub	sp, #116	; 0x74
 8004968:	da08      	bge.n	800497c <sniprintf+0x20>
 800496a:	238b      	movs	r3, #139	; 0x8b
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	b01d      	add	sp, #116	; 0x74
 8004974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004978:	b002      	add	sp, #8
 800497a:	4770      	bx	lr
 800497c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004980:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004984:	bf14      	ite	ne
 8004986:	f104 33ff 	addne.w	r3, r4, #4294967295
 800498a:	4623      	moveq	r3, r4
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f8ad 3016 	strh.w	r3, [sp, #22]
 800499c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800499e:	ab21      	add	r3, sp, #132	; 0x84
 80049a0:	a902      	add	r1, sp, #8
 80049a2:	4628      	mov	r0, r5
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	f001 fab1 	bl	8005f0c <_svfiprintf_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	bfbc      	itt	lt
 80049ae:	238b      	movlt	r3, #139	; 0x8b
 80049b0:	602b      	strlt	r3, [r5, #0]
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d0dd      	beq.n	8004972 <sniprintf+0x16>
 80049b6:	9b02      	ldr	r3, [sp, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e7d9      	b.n	8004972 <sniprintf+0x16>
 80049be:	bf00      	nop
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <strcat>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4602      	mov	r2, r0
 80049c8:	7814      	ldrb	r4, [r2, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	3201      	adds	r2, #1
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	d1fa      	bne.n	80049c8 <strcat+0x4>
 80049d2:	3b01      	subs	r3, #1
 80049d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049dc:	2a00      	cmp	r2, #0
 80049de:	d1f9      	bne.n	80049d4 <strcat+0x10>
 80049e0:	bd10      	pop	{r4, pc}

080049e2 <strcpy>:
 80049e2:	4603      	mov	r3, r0
 80049e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e8:	f803 2b01 	strb.w	r2, [r3], #1
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	d1f9      	bne.n	80049e4 <strcpy+0x2>
 80049f0:	4770      	bx	lr

080049f2 <quorem>:
 80049f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f6:	6903      	ldr	r3, [r0, #16]
 80049f8:	690c      	ldr	r4, [r1, #16]
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	4607      	mov	r7, r0
 80049fe:	f2c0 8081 	blt.w	8004b04 <quorem+0x112>
 8004a02:	3c01      	subs	r4, #1
 8004a04:	f101 0814 	add.w	r8, r1, #20
 8004a08:	f100 0514 	add.w	r5, r0, #20
 8004a0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a26:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a2a:	d331      	bcc.n	8004a90 <quorem+0x9e>
 8004a2c:	f04f 0e00 	mov.w	lr, #0
 8004a30:	4640      	mov	r0, r8
 8004a32:	46ac      	mov	ip, r5
 8004a34:	46f2      	mov	sl, lr
 8004a36:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a3a:	b293      	uxth	r3, r2
 8004a3c:	fb06 e303 	mla	r3, r6, r3, lr
 8004a40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ebaa 0303 	sub.w	r3, sl, r3
 8004a4a:	f8dc a000 	ldr.w	sl, [ip]
 8004a4e:	0c12      	lsrs	r2, r2, #16
 8004a50:	fa13 f38a 	uxtah	r3, r3, sl
 8004a54:	fb06 e202 	mla	r2, r6, r2, lr
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	9b00      	ldr	r3, [sp, #0]
 8004a5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a60:	b292      	uxth	r2, r2
 8004a62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a6e:	4581      	cmp	r9, r0
 8004a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a74:	f84c 3b04 	str.w	r3, [ip], #4
 8004a78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a7c:	d2db      	bcs.n	8004a36 <quorem+0x44>
 8004a7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a82:	b92b      	cbnz	r3, 8004a90 <quorem+0x9e>
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	3b04      	subs	r3, #4
 8004a88:	429d      	cmp	r5, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	d32e      	bcc.n	8004aec <quorem+0xfa>
 8004a8e:	613c      	str	r4, [r7, #16]
 8004a90:	4638      	mov	r0, r7
 8004a92:	f001 f8c7 	bl	8005c24 <__mcmp>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	db24      	blt.n	8004ae4 <quorem+0xf2>
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f04f 0c00 	mov.w	ip, #0
 8004aa2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004aa6:	f8d0 e000 	ldr.w	lr, [r0]
 8004aaa:	b293      	uxth	r3, r2
 8004aac:	ebac 0303 	sub.w	r3, ip, r3
 8004ab0:	0c12      	lsrs	r2, r2, #16
 8004ab2:	fa13 f38e 	uxtah	r3, r3, lr
 8004ab6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004aba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ac4:	45c1      	cmp	r9, r8
 8004ac6:	f840 3b04 	str.w	r3, [r0], #4
 8004aca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ace:	d2e8      	bcs.n	8004aa2 <quorem+0xb0>
 8004ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ad8:	b922      	cbnz	r2, 8004ae4 <quorem+0xf2>
 8004ada:	3b04      	subs	r3, #4
 8004adc:	429d      	cmp	r5, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	d30a      	bcc.n	8004af8 <quorem+0x106>
 8004ae2:	613c      	str	r4, [r7, #16]
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	b003      	add	sp, #12
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	3b04      	subs	r3, #4
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	d1cc      	bne.n	8004a8e <quorem+0x9c>
 8004af4:	3c01      	subs	r4, #1
 8004af6:	e7c7      	b.n	8004a88 <quorem+0x96>
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	3b04      	subs	r3, #4
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	d1f0      	bne.n	8004ae2 <quorem+0xf0>
 8004b00:	3c01      	subs	r4, #1
 8004b02:	e7eb      	b.n	8004adc <quorem+0xea>
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7ee      	b.n	8004ae6 <quorem+0xf4>

08004b08 <_dtoa_r>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	ed2d 8b04 	vpush	{d8-d9}
 8004b10:	ec57 6b10 	vmov	r6, r7, d0
 8004b14:	b093      	sub	sp, #76	; 0x4c
 8004b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b1c:	9106      	str	r1, [sp, #24]
 8004b1e:	ee10 aa10 	vmov	sl, s0
 8004b22:	4604      	mov	r4, r0
 8004b24:	9209      	str	r2, [sp, #36]	; 0x24
 8004b26:	930c      	str	r3, [sp, #48]	; 0x30
 8004b28:	46bb      	mov	fp, r7
 8004b2a:	b975      	cbnz	r5, 8004b4a <_dtoa_r+0x42>
 8004b2c:	2010      	movs	r0, #16
 8004b2e:	f7ff f9ab 	bl	8003e88 <malloc>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6260      	str	r0, [r4, #36]	; 0x24
 8004b36:	b920      	cbnz	r0, 8004b42 <_dtoa_r+0x3a>
 8004b38:	4ba7      	ldr	r3, [pc, #668]	; (8004dd8 <_dtoa_r+0x2d0>)
 8004b3a:	21ea      	movs	r1, #234	; 0xea
 8004b3c:	48a7      	ldr	r0, [pc, #668]	; (8004ddc <_dtoa_r+0x2d4>)
 8004b3e:	f001 fae5 	bl	800610c <__assert_func>
 8004b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b46:	6005      	str	r5, [r0, #0]
 8004b48:	60c5      	str	r5, [r0, #12]
 8004b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	b151      	cbz	r1, 8004b66 <_dtoa_r+0x5e>
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	604a      	str	r2, [r1, #4]
 8004b54:	2301      	movs	r3, #1
 8004b56:	4093      	lsls	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 fe20 	bl	80057a0 <_Bfree>
 8004b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	1e3b      	subs	r3, r7, #0
 8004b68:	bfaa      	itet	ge
 8004b6a:	2300      	movge	r3, #0
 8004b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004b70:	f8c8 3000 	strge.w	r3, [r8]
 8004b74:	4b9a      	ldr	r3, [pc, #616]	; (8004de0 <_dtoa_r+0x2d8>)
 8004b76:	bfbc      	itt	lt
 8004b78:	2201      	movlt	r2, #1
 8004b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8004b7e:	ea33 030b 	bics.w	r3, r3, fp
 8004b82:	d11b      	bne.n	8004bbc <_dtoa_r+0xb4>
 8004b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b90:	4333      	orrs	r3, r6
 8004b92:	f000 8592 	beq.w	80056ba <_dtoa_r+0xbb2>
 8004b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b98:	b963      	cbnz	r3, 8004bb4 <_dtoa_r+0xac>
 8004b9a:	4b92      	ldr	r3, [pc, #584]	; (8004de4 <_dtoa_r+0x2dc>)
 8004b9c:	e022      	b.n	8004be4 <_dtoa_r+0xdc>
 8004b9e:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <_dtoa_r+0x2e0>)
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	9801      	ldr	r0, [sp, #4]
 8004baa:	b013      	add	sp, #76	; 0x4c
 8004bac:	ecbd 8b04 	vpop	{d8-d9}
 8004bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb4:	4b8b      	ldr	r3, [pc, #556]	; (8004de4 <_dtoa_r+0x2dc>)
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	3303      	adds	r3, #3
 8004bba:	e7f3      	b.n	8004ba4 <_dtoa_r+0x9c>
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	4659      	mov	r1, fp
 8004bc4:	f7fb ff98 	bl	8000af8 <__aeabi_dcmpeq>
 8004bc8:	ec4b ab19 	vmov	d9, sl, fp
 8004bcc:	4680      	mov	r8, r0
 8004bce:	b158      	cbz	r0, 8004be8 <_dtoa_r+0xe0>
 8004bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 856b 	beq.w	80056b4 <_dtoa_r+0xbac>
 8004bde:	4883      	ldr	r0, [pc, #524]	; (8004dec <_dtoa_r+0x2e4>)
 8004be0:	6018      	str	r0, [r3, #0]
 8004be2:	1e43      	subs	r3, r0, #1
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	e7df      	b.n	8004ba8 <_dtoa_r+0xa0>
 8004be8:	ec4b ab10 	vmov	d0, sl, fp
 8004bec:	aa10      	add	r2, sp, #64	; 0x40
 8004bee:	a911      	add	r1, sp, #68	; 0x44
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f001 f8bd 	bl	8005d70 <__d2b>
 8004bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004bfa:	ee08 0a10 	vmov	s16, r0
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	f000 8084 	beq.w	8004d0c <_dtoa_r+0x204>
 8004c04:	ee19 3a90 	vmov	r3, s19
 8004c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c10:	4656      	mov	r6, sl
 8004c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004c1e:	4b74      	ldr	r3, [pc, #464]	; (8004df0 <_dtoa_r+0x2e8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb fb47 	bl	80002b8 <__aeabi_dsub>
 8004c2a:	a365      	add	r3, pc, #404	; (adr r3, 8004dc0 <_dtoa_r+0x2b8>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fcfa 	bl	8000628 <__aeabi_dmul>
 8004c34:	a364      	add	r3, pc, #400	; (adr r3, 8004dc8 <_dtoa_r+0x2c0>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fb3f 	bl	80002bc <__adddf3>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	4628      	mov	r0, r5
 8004c42:	460f      	mov	r7, r1
 8004c44:	f7fb fc86 	bl	8000554 <__aeabi_i2d>
 8004c48:	a361      	add	r3, pc, #388	; (adr r3, 8004dd0 <_dtoa_r+0x2c8>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fceb 	bl	8000628 <__aeabi_dmul>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4630      	mov	r0, r6
 8004c58:	4639      	mov	r1, r7
 8004c5a:	f7fb fb2f 	bl	80002bc <__adddf3>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	f7fb ff91 	bl	8000b88 <__aeabi_d2iz>
 8004c66:	2200      	movs	r2, #0
 8004c68:	9000      	str	r0, [sp, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb ff4c 	bl	8000b0c <__aeabi_dcmplt>
 8004c74:	b150      	cbz	r0, 8004c8c <_dtoa_r+0x184>
 8004c76:	9800      	ldr	r0, [sp, #0]
 8004c78:	f7fb fc6c 	bl	8000554 <__aeabi_i2d>
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	463b      	mov	r3, r7
 8004c80:	f7fb ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8004c84:	b910      	cbnz	r0, 8004c8c <_dtoa_r+0x184>
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	9b00      	ldr	r3, [sp, #0]
 8004c8e:	2b16      	cmp	r3, #22
 8004c90:	d85a      	bhi.n	8004d48 <_dtoa_r+0x240>
 8004c92:	9a00      	ldr	r2, [sp, #0]
 8004c94:	4b57      	ldr	r3, [pc, #348]	; (8004df4 <_dtoa_r+0x2ec>)
 8004c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	ec51 0b19 	vmov	r0, r1, d9
 8004ca2:	f7fb ff33 	bl	8000b0c <__aeabi_dcmplt>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d050      	beq.n	8004d4c <_dtoa_r+0x244>
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cb6:	1b5d      	subs	r5, r3, r5
 8004cb8:	1e6b      	subs	r3, r5, #1
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	bf45      	ittet	mi
 8004cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cc2:	9304      	strmi	r3, [sp, #16]
 8004cc4:	2300      	movpl	r3, #0
 8004cc6:	2300      	movmi	r3, #0
 8004cc8:	bf4c      	ite	mi
 8004cca:	9305      	strmi	r3, [sp, #20]
 8004ccc:	9304      	strpl	r3, [sp, #16]
 8004cce:	9b00      	ldr	r3, [sp, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db3d      	blt.n	8004d50 <_dtoa_r+0x248>
 8004cd4:	9b05      	ldr	r3, [sp, #20]
 8004cd6:	9a00      	ldr	r2, [sp, #0]
 8004cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cda:	4413      	add	r3, r2
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9307      	str	r3, [sp, #28]
 8004ce2:	9b06      	ldr	r3, [sp, #24]
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	f200 8089 	bhi.w	8004dfc <_dtoa_r+0x2f4>
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	bfc4      	itt	gt
 8004cee:	3b04      	subgt	r3, #4
 8004cf0:	9306      	strgt	r3, [sp, #24]
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8004cf8:	bfcc      	ite	gt
 8004cfa:	2500      	movgt	r5, #0
 8004cfc:	2501      	movle	r5, #1
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	f200 8087 	bhi.w	8004e12 <_dtoa_r+0x30a>
 8004d04:	e8df f003 	tbb	[pc, r3]
 8004d08:	59383a2d 	.word	0x59383a2d
 8004d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d10:	441d      	add	r5, r3
 8004d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	bfc1      	itttt	gt
 8004d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8004d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d2a:	bfda      	itte	le
 8004d2c:	f1c3 0320 	rsble	r3, r3, #32
 8004d30:	fa06 f003 	lslle.w	r0, r6, r3
 8004d34:	4318      	orrgt	r0, r3
 8004d36:	f7fb fbfd 	bl	8000534 <__aeabi_ui2d>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d42:	3d01      	subs	r5, #1
 8004d44:	930e      	str	r3, [sp, #56]	; 0x38
 8004d46:	e76a      	b.n	8004c1e <_dtoa_r+0x116>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e7b2      	b.n	8004cb2 <_dtoa_r+0x1aa>
 8004d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d4e:	e7b1      	b.n	8004cb4 <_dtoa_r+0x1ac>
 8004d50:	9b04      	ldr	r3, [sp, #16]
 8004d52:	9a00      	ldr	r2, [sp, #0]
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	4253      	negs	r3, r2
 8004d5a:	9307      	str	r3, [sp, #28]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d60:	e7bf      	b.n	8004ce2 <_dtoa_r+0x1da>
 8004d62:	2300      	movs	r3, #0
 8004d64:	9308      	str	r3, [sp, #32]
 8004d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dc55      	bgt.n	8004e18 <_dtoa_r+0x310>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d72:	461a      	mov	r2, r3
 8004d74:	9209      	str	r2, [sp, #36]	; 0x24
 8004d76:	e00c      	b.n	8004d92 <_dtoa_r+0x28a>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e7f3      	b.n	8004d64 <_dtoa_r+0x25c>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d80:	9308      	str	r3, [sp, #32]
 8004d82:	9b00      	ldr	r3, [sp, #0]
 8004d84:	4413      	add	r3, r2
 8004d86:	9302      	str	r3, [sp, #8]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	9303      	str	r3, [sp, #12]
 8004d8e:	bfb8      	it	lt
 8004d90:	2301      	movlt	r3, #1
 8004d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d94:	2200      	movs	r2, #0
 8004d96:	6042      	str	r2, [r0, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	f102 0614 	add.w	r6, r2, #20
 8004d9e:	429e      	cmp	r6, r3
 8004da0:	6841      	ldr	r1, [r0, #4]
 8004da2:	d93d      	bls.n	8004e20 <_dtoa_r+0x318>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fcbb 	bl	8005720 <_Balloc>
 8004daa:	9001      	str	r0, [sp, #4]
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d13b      	bne.n	8004e28 <_dtoa_r+0x320>
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <_dtoa_r+0x2f0>)
 8004db2:	4602      	mov	r2, r0
 8004db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004db8:	e6c0      	b.n	8004b3c <_dtoa_r+0x34>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e7df      	b.n	8004d7e <_dtoa_r+0x276>
 8004dbe:	bf00      	nop
 8004dc0:	636f4361 	.word	0x636f4361
 8004dc4:	3fd287a7 	.word	0x3fd287a7
 8004dc8:	8b60c8b3 	.word	0x8b60c8b3
 8004dcc:	3fc68a28 	.word	0x3fc68a28
 8004dd0:	509f79fb 	.word	0x509f79fb
 8004dd4:	3fd34413 	.word	0x3fd34413
 8004dd8:	08006d81 	.word	0x08006d81
 8004ddc:	08006d98 	.word	0x08006d98
 8004de0:	7ff00000 	.word	0x7ff00000
 8004de4:	08006d7d 	.word	0x08006d7d
 8004de8:	08006d74 	.word	0x08006d74
 8004dec:	08006d51 	.word	0x08006d51
 8004df0:	3ff80000 	.word	0x3ff80000
 8004df4:	08006e88 	.word	0x08006e88
 8004df8:	08006df3 	.word	0x08006df3
 8004dfc:	2501      	movs	r5, #1
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9306      	str	r3, [sp, #24]
 8004e02:	9508      	str	r5, [sp, #32]
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
 8004e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2312      	movs	r3, #18
 8004e10:	e7b0      	b.n	8004d74 <_dtoa_r+0x26c>
 8004e12:	2301      	movs	r3, #1
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	e7f5      	b.n	8004e04 <_dtoa_r+0x2fc>
 8004e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e1e:	e7b8      	b.n	8004d92 <_dtoa_r+0x28a>
 8004e20:	3101      	adds	r1, #1
 8004e22:	6041      	str	r1, [r0, #4]
 8004e24:	0052      	lsls	r2, r2, #1
 8004e26:	e7b8      	b.n	8004d9a <_dtoa_r+0x292>
 8004e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e2a:	9a01      	ldr	r2, [sp, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	2b0e      	cmp	r3, #14
 8004e32:	f200 809d 	bhi.w	8004f70 <_dtoa_r+0x468>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	f000 809a 	beq.w	8004f70 <_dtoa_r+0x468>
 8004e3c:	9b00      	ldr	r3, [sp, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd32      	ble.n	8004ea8 <_dtoa_r+0x3a0>
 8004e42:	4ab7      	ldr	r2, [pc, #732]	; (8005120 <_dtoa_r+0x618>)
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e50:	9b00      	ldr	r3, [sp, #0]
 8004e52:	05d8      	lsls	r0, r3, #23
 8004e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004e58:	d516      	bpl.n	8004e88 <_dtoa_r+0x380>
 8004e5a:	4bb2      	ldr	r3, [pc, #712]	; (8005124 <_dtoa_r+0x61c>)
 8004e5c:	ec51 0b19 	vmov	r0, r1, d9
 8004e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e64:	f7fb fd0a 	bl	800087c <__aeabi_ddiv>
 8004e68:	f007 070f 	and.w	r7, r7, #15
 8004e6c:	4682      	mov	sl, r0
 8004e6e:	468b      	mov	fp, r1
 8004e70:	2503      	movs	r5, #3
 8004e72:	4eac      	ldr	r6, [pc, #688]	; (8005124 <_dtoa_r+0x61c>)
 8004e74:	b957      	cbnz	r7, 8004e8c <_dtoa_r+0x384>
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f7fb fcfd 	bl	800087c <__aeabi_ddiv>
 8004e82:	4682      	mov	sl, r0
 8004e84:	468b      	mov	fp, r1
 8004e86:	e028      	b.n	8004eda <_dtoa_r+0x3d2>
 8004e88:	2502      	movs	r5, #2
 8004e8a:	e7f2      	b.n	8004e72 <_dtoa_r+0x36a>
 8004e8c:	07f9      	lsls	r1, r7, #31
 8004e8e:	d508      	bpl.n	8004ea2 <_dtoa_r+0x39a>
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e98:	f7fb fbc6 	bl	8000628 <__aeabi_dmul>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	107f      	asrs	r7, r7, #1
 8004ea4:	3608      	adds	r6, #8
 8004ea6:	e7e5      	b.n	8004e74 <_dtoa_r+0x36c>
 8004ea8:	f000 809b 	beq.w	8004fe2 <_dtoa_r+0x4da>
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	4f9d      	ldr	r7, [pc, #628]	; (8005124 <_dtoa_r+0x61c>)
 8004eb0:	425e      	negs	r6, r3
 8004eb2:	4b9b      	ldr	r3, [pc, #620]	; (8005120 <_dtoa_r+0x618>)
 8004eb4:	f006 020f 	and.w	r2, r6, #15
 8004eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	ec51 0b19 	vmov	r0, r1, d9
 8004ec4:	f7fb fbb0 	bl	8000628 <__aeabi_dmul>
 8004ec8:	1136      	asrs	r6, r6, #4
 8004eca:	4682      	mov	sl, r0
 8004ecc:	468b      	mov	fp, r1
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2502      	movs	r5, #2
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d17a      	bne.n	8004fcc <_dtoa_r+0x4c4>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1d3      	bne.n	8004e82 <_dtoa_r+0x37a>
 8004eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8082 	beq.w	8004fe6 <_dtoa_r+0x4de>
 8004ee2:	4b91      	ldr	r3, [pc, #580]	; (8005128 <_dtoa_r+0x620>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	4659      	mov	r1, fp
 8004eea:	f7fb fe0f 	bl	8000b0c <__aeabi_dcmplt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d079      	beq.n	8004fe6 <_dtoa_r+0x4de>
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d076      	beq.n	8004fe6 <_dtoa_r+0x4de>
 8004ef8:	9b02      	ldr	r3, [sp, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dd36      	ble.n	8004f6c <_dtoa_r+0x464>
 8004efe:	9b00      	ldr	r3, [sp, #0]
 8004f00:	4650      	mov	r0, sl
 8004f02:	4659      	mov	r1, fp
 8004f04:	1e5f      	subs	r7, r3, #1
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b88      	ldr	r3, [pc, #544]	; (800512c <_dtoa_r+0x624>)
 8004f0a:	f7fb fb8d 	bl	8000628 <__aeabi_dmul>
 8004f0e:	9e02      	ldr	r6, [sp, #8]
 8004f10:	4682      	mov	sl, r0
 8004f12:	468b      	mov	fp, r1
 8004f14:	3501      	adds	r5, #1
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7fb fb1c 	bl	8000554 <__aeabi_i2d>
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	465b      	mov	r3, fp
 8004f20:	f7fb fb82 	bl	8000628 <__aeabi_dmul>
 8004f24:	4b82      	ldr	r3, [pc, #520]	; (8005130 <_dtoa_r+0x628>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	f7fb f9c8 	bl	80002bc <__adddf3>
 8004f2c:	46d0      	mov	r8, sl
 8004f2e:	46d9      	mov	r9, fp
 8004f30:	4682      	mov	sl, r0
 8004f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d158      	bne.n	8004fec <_dtoa_r+0x4e4>
 8004f3a:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <_dtoa_r+0x62c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4649      	mov	r1, r9
 8004f42:	f7fb f9b9 	bl	80002b8 <__aeabi_dsub>
 8004f46:	4652      	mov	r2, sl
 8004f48:	465b      	mov	r3, fp
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	4689      	mov	r9, r1
 8004f4e:	f7fb fdfb 	bl	8000b48 <__aeabi_dcmpgt>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f040 8295 	bne.w	8005482 <_dtoa_r+0x97a>
 8004f58:	4652      	mov	r2, sl
 8004f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f7fb fdd3 	bl	8000b0c <__aeabi_dcmplt>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f040 8289 	bne.w	800547e <_dtoa_r+0x976>
 8004f6c:	ec5b ab19 	vmov	sl, fp, d9
 8004f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f2c0 8148 	blt.w	8005208 <_dtoa_r+0x700>
 8004f78:	9a00      	ldr	r2, [sp, #0]
 8004f7a:	2a0e      	cmp	r2, #14
 8004f7c:	f300 8144 	bgt.w	8005208 <_dtoa_r+0x700>
 8004f80:	4b67      	ldr	r3, [pc, #412]	; (8005120 <_dtoa_r+0x618>)
 8004f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f280 80d5 	bge.w	800513c <_dtoa_r+0x634>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f300 80d1 	bgt.w	800513c <_dtoa_r+0x634>
 8004f9a:	f040 826f 	bne.w	800547c <_dtoa_r+0x974>
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <_dtoa_r+0x62c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	f7fb fb3f 	bl	8000628 <__aeabi_dmul>
 8004faa:	4652      	mov	r2, sl
 8004fac:	465b      	mov	r3, fp
 8004fae:	f7fb fdc1 	bl	8000b34 <__aeabi_dcmpge>
 8004fb2:	9e03      	ldr	r6, [sp, #12]
 8004fb4:	4637      	mov	r7, r6
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f040 8245 	bne.w	8005446 <_dtoa_r+0x93e>
 8004fbc:	9d01      	ldr	r5, [sp, #4]
 8004fbe:	2331      	movs	r3, #49	; 0x31
 8004fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8004fc4:	9b00      	ldr	r3, [sp, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	e240      	b.n	800544e <_dtoa_r+0x946>
 8004fcc:	07f2      	lsls	r2, r6, #31
 8004fce:	d505      	bpl.n	8004fdc <_dtoa_r+0x4d4>
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	f7fb fb28 	bl	8000628 <__aeabi_dmul>
 8004fd8:	3501      	adds	r5, #1
 8004fda:	2301      	movs	r3, #1
 8004fdc:	1076      	asrs	r6, r6, #1
 8004fde:	3708      	adds	r7, #8
 8004fe0:	e777      	b.n	8004ed2 <_dtoa_r+0x3ca>
 8004fe2:	2502      	movs	r5, #2
 8004fe4:	e779      	b.n	8004eda <_dtoa_r+0x3d2>
 8004fe6:	9f00      	ldr	r7, [sp, #0]
 8004fe8:	9e03      	ldr	r6, [sp, #12]
 8004fea:	e794      	b.n	8004f16 <_dtoa_r+0x40e>
 8004fec:	9901      	ldr	r1, [sp, #4]
 8004fee:	4b4c      	ldr	r3, [pc, #304]	; (8005120 <_dtoa_r+0x618>)
 8004ff0:	4431      	add	r1, r6
 8004ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8004ff4:	9908      	ldr	r1, [sp, #32]
 8004ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ffe:	2900      	cmp	r1, #0
 8005000:	d043      	beq.n	800508a <_dtoa_r+0x582>
 8005002:	494d      	ldr	r1, [pc, #308]	; (8005138 <_dtoa_r+0x630>)
 8005004:	2000      	movs	r0, #0
 8005006:	f7fb fc39 	bl	800087c <__aeabi_ddiv>
 800500a:	4652      	mov	r2, sl
 800500c:	465b      	mov	r3, fp
 800500e:	f7fb f953 	bl	80002b8 <__aeabi_dsub>
 8005012:	9d01      	ldr	r5, [sp, #4]
 8005014:	4682      	mov	sl, r0
 8005016:	468b      	mov	fp, r1
 8005018:	4649      	mov	r1, r9
 800501a:	4640      	mov	r0, r8
 800501c:	f7fb fdb4 	bl	8000b88 <__aeabi_d2iz>
 8005020:	4606      	mov	r6, r0
 8005022:	f7fb fa97 	bl	8000554 <__aeabi_i2d>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f7fb f943 	bl	80002b8 <__aeabi_dsub>
 8005032:	3630      	adds	r6, #48	; 0x30
 8005034:	f805 6b01 	strb.w	r6, [r5], #1
 8005038:	4652      	mov	r2, sl
 800503a:	465b      	mov	r3, fp
 800503c:	4680      	mov	r8, r0
 800503e:	4689      	mov	r9, r1
 8005040:	f7fb fd64 	bl	8000b0c <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	d163      	bne.n	8005110 <_dtoa_r+0x608>
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	4936      	ldr	r1, [pc, #216]	; (8005128 <_dtoa_r+0x620>)
 800504e:	2000      	movs	r0, #0
 8005050:	f7fb f932 	bl	80002b8 <__aeabi_dsub>
 8005054:	4652      	mov	r2, sl
 8005056:	465b      	mov	r3, fp
 8005058:	f7fb fd58 	bl	8000b0c <__aeabi_dcmplt>
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 80b5 	bne.w	80051cc <_dtoa_r+0x6c4>
 8005062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005064:	429d      	cmp	r5, r3
 8005066:	d081      	beq.n	8004f6c <_dtoa_r+0x464>
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <_dtoa_r+0x624>)
 800506a:	2200      	movs	r2, #0
 800506c:	4650      	mov	r0, sl
 800506e:	4659      	mov	r1, fp
 8005070:	f7fb fada 	bl	8000628 <__aeabi_dmul>
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <_dtoa_r+0x624>)
 8005076:	4682      	mov	sl, r0
 8005078:	468b      	mov	fp, r1
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	2200      	movs	r2, #0
 8005080:	f7fb fad2 	bl	8000628 <__aeabi_dmul>
 8005084:	4680      	mov	r8, r0
 8005086:	4689      	mov	r9, r1
 8005088:	e7c6      	b.n	8005018 <_dtoa_r+0x510>
 800508a:	4650      	mov	r0, sl
 800508c:	4659      	mov	r1, fp
 800508e:	f7fb facb 	bl	8000628 <__aeabi_dmul>
 8005092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005094:	9d01      	ldr	r5, [sp, #4]
 8005096:	930f      	str	r3, [sp, #60]	; 0x3c
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	4649      	mov	r1, r9
 800509e:	4640      	mov	r0, r8
 80050a0:	f7fb fd72 	bl	8000b88 <__aeabi_d2iz>
 80050a4:	4606      	mov	r6, r0
 80050a6:	f7fb fa55 	bl	8000554 <__aeabi_i2d>
 80050aa:	3630      	adds	r6, #48	; 0x30
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4640      	mov	r0, r8
 80050b2:	4649      	mov	r1, r9
 80050b4:	f7fb f900 	bl	80002b8 <__aeabi_dsub>
 80050b8:	f805 6b01 	strb.w	r6, [r5], #1
 80050bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050be:	429d      	cmp	r5, r3
 80050c0:	4680      	mov	r8, r0
 80050c2:	4689      	mov	r9, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	d124      	bne.n	8005114 <_dtoa_r+0x60c>
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <_dtoa_r+0x630>)
 80050cc:	4650      	mov	r0, sl
 80050ce:	4659      	mov	r1, fp
 80050d0:	f7fb f8f4 	bl	80002bc <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4640      	mov	r0, r8
 80050da:	4649      	mov	r1, r9
 80050dc:	f7fb fd34 	bl	8000b48 <__aeabi_dcmpgt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d173      	bne.n	80051cc <_dtoa_r+0x6c4>
 80050e4:	4652      	mov	r2, sl
 80050e6:	465b      	mov	r3, fp
 80050e8:	4913      	ldr	r1, [pc, #76]	; (8005138 <_dtoa_r+0x630>)
 80050ea:	2000      	movs	r0, #0
 80050ec:	f7fb f8e4 	bl	80002b8 <__aeabi_dsub>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb fd08 	bl	8000b0c <__aeabi_dcmplt>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f43f af35 	beq.w	8004f6c <_dtoa_r+0x464>
 8005102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005104:	1e6b      	subs	r3, r5, #1
 8005106:	930f      	str	r3, [sp, #60]	; 0x3c
 8005108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d0f8      	beq.n	8005102 <_dtoa_r+0x5fa>
 8005110:	9700      	str	r7, [sp, #0]
 8005112:	e049      	b.n	80051a8 <_dtoa_r+0x6a0>
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <_dtoa_r+0x624>)
 8005116:	f7fb fa87 	bl	8000628 <__aeabi_dmul>
 800511a:	4680      	mov	r8, r0
 800511c:	4689      	mov	r9, r1
 800511e:	e7bd      	b.n	800509c <_dtoa_r+0x594>
 8005120:	08006e88 	.word	0x08006e88
 8005124:	08006e60 	.word	0x08006e60
 8005128:	3ff00000 	.word	0x3ff00000
 800512c:	40240000 	.word	0x40240000
 8005130:	401c0000 	.word	0x401c0000
 8005134:	40140000 	.word	0x40140000
 8005138:	3fe00000 	.word	0x3fe00000
 800513c:	9d01      	ldr	r5, [sp, #4]
 800513e:	4656      	mov	r6, sl
 8005140:	465f      	mov	r7, fp
 8005142:	4642      	mov	r2, r8
 8005144:	464b      	mov	r3, r9
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb fb97 	bl	800087c <__aeabi_ddiv>
 800514e:	f7fb fd1b 	bl	8000b88 <__aeabi_d2iz>
 8005152:	4682      	mov	sl, r0
 8005154:	f7fb f9fe 	bl	8000554 <__aeabi_i2d>
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	f7fb fa64 	bl	8000628 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800516c:	f7fb f8a4 	bl	80002b8 <__aeabi_dsub>
 8005170:	f805 6b01 	strb.w	r6, [r5], #1
 8005174:	9e01      	ldr	r6, [sp, #4]
 8005176:	9f03      	ldr	r7, [sp, #12]
 8005178:	1bae      	subs	r6, r5, r6
 800517a:	42b7      	cmp	r7, r6
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	d135      	bne.n	80051ee <_dtoa_r+0x6e6>
 8005182:	f7fb f89b 	bl	80002bc <__adddf3>
 8005186:	4642      	mov	r2, r8
 8005188:	464b      	mov	r3, r9
 800518a:	4606      	mov	r6, r0
 800518c:	460f      	mov	r7, r1
 800518e:	f7fb fcdb 	bl	8000b48 <__aeabi_dcmpgt>
 8005192:	b9d0      	cbnz	r0, 80051ca <_dtoa_r+0x6c2>
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	4630      	mov	r0, r6
 800519a:	4639      	mov	r1, r7
 800519c:	f7fb fcac 	bl	8000af8 <__aeabi_dcmpeq>
 80051a0:	b110      	cbz	r0, 80051a8 <_dtoa_r+0x6a0>
 80051a2:	f01a 0f01 	tst.w	sl, #1
 80051a6:	d110      	bne.n	80051ca <_dtoa_r+0x6c2>
 80051a8:	4620      	mov	r0, r4
 80051aa:	ee18 1a10 	vmov	r1, s16
 80051ae:	f000 faf7 	bl	80057a0 <_Bfree>
 80051b2:	2300      	movs	r3, #0
 80051b4:	9800      	ldr	r0, [sp, #0]
 80051b6:	702b      	strb	r3, [r5, #0]
 80051b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ba:	3001      	adds	r0, #1
 80051bc:	6018      	str	r0, [r3, #0]
 80051be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f43f acf1 	beq.w	8004ba8 <_dtoa_r+0xa0>
 80051c6:	601d      	str	r5, [r3, #0]
 80051c8:	e4ee      	b.n	8004ba8 <_dtoa_r+0xa0>
 80051ca:	9f00      	ldr	r7, [sp, #0]
 80051cc:	462b      	mov	r3, r5
 80051ce:	461d      	mov	r5, r3
 80051d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051d4:	2a39      	cmp	r2, #57	; 0x39
 80051d6:	d106      	bne.n	80051e6 <_dtoa_r+0x6de>
 80051d8:	9a01      	ldr	r2, [sp, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d1f7      	bne.n	80051ce <_dtoa_r+0x6c6>
 80051de:	9901      	ldr	r1, [sp, #4]
 80051e0:	2230      	movs	r2, #48	; 0x30
 80051e2:	3701      	adds	r7, #1
 80051e4:	700a      	strb	r2, [r1, #0]
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	3201      	adds	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e790      	b.n	8005110 <_dtoa_r+0x608>
 80051ee:	4ba6      	ldr	r3, [pc, #664]	; (8005488 <_dtoa_r+0x980>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	f7fb fa19 	bl	8000628 <__aeabi_dmul>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	460f      	mov	r7, r1
 80051fe:	f7fb fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 8005202:	2800      	cmp	r0, #0
 8005204:	d09d      	beq.n	8005142 <_dtoa_r+0x63a>
 8005206:	e7cf      	b.n	80051a8 <_dtoa_r+0x6a0>
 8005208:	9a08      	ldr	r2, [sp, #32]
 800520a:	2a00      	cmp	r2, #0
 800520c:	f000 80d7 	beq.w	80053be <_dtoa_r+0x8b6>
 8005210:	9a06      	ldr	r2, [sp, #24]
 8005212:	2a01      	cmp	r2, #1
 8005214:	f300 80ba 	bgt.w	800538c <_dtoa_r+0x884>
 8005218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800521a:	2a00      	cmp	r2, #0
 800521c:	f000 80b2 	beq.w	8005384 <_dtoa_r+0x87c>
 8005220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005224:	9e07      	ldr	r6, [sp, #28]
 8005226:	9d04      	ldr	r5, [sp, #16]
 8005228:	9a04      	ldr	r2, [sp, #16]
 800522a:	441a      	add	r2, r3
 800522c:	9204      	str	r2, [sp, #16]
 800522e:	9a05      	ldr	r2, [sp, #20]
 8005230:	2101      	movs	r1, #1
 8005232:	441a      	add	r2, r3
 8005234:	4620      	mov	r0, r4
 8005236:	9205      	str	r2, [sp, #20]
 8005238:	f000 fb6a 	bl	8005910 <__i2b>
 800523c:	4607      	mov	r7, r0
 800523e:	2d00      	cmp	r5, #0
 8005240:	dd0c      	ble.n	800525c <_dtoa_r+0x754>
 8005242:	9b05      	ldr	r3, [sp, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	dd09      	ble.n	800525c <_dtoa_r+0x754>
 8005248:	42ab      	cmp	r3, r5
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	bfa8      	it	ge
 800524e:	462b      	movge	r3, r5
 8005250:	1ad2      	subs	r2, r2, r3
 8005252:	9204      	str	r2, [sp, #16]
 8005254:	9a05      	ldr	r2, [sp, #20]
 8005256:	1aed      	subs	r5, r5, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	b31b      	cbz	r3, 80052a8 <_dtoa_r+0x7a0>
 8005260:	9b08      	ldr	r3, [sp, #32]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80af 	beq.w	80053c6 <_dtoa_r+0x8be>
 8005268:	2e00      	cmp	r6, #0
 800526a:	dd13      	ble.n	8005294 <_dtoa_r+0x78c>
 800526c:	4639      	mov	r1, r7
 800526e:	4632      	mov	r2, r6
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fc0d 	bl	8005a90 <__pow5mult>
 8005276:	ee18 2a10 	vmov	r2, s16
 800527a:	4601      	mov	r1, r0
 800527c:	4607      	mov	r7, r0
 800527e:	4620      	mov	r0, r4
 8005280:	f000 fb5c 	bl	800593c <__multiply>
 8005284:	ee18 1a10 	vmov	r1, s16
 8005288:	4680      	mov	r8, r0
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fa88 	bl	80057a0 <_Bfree>
 8005290:	ee08 8a10 	vmov	s16, r8
 8005294:	9b07      	ldr	r3, [sp, #28]
 8005296:	1b9a      	subs	r2, r3, r6
 8005298:	d006      	beq.n	80052a8 <_dtoa_r+0x7a0>
 800529a:	ee18 1a10 	vmov	r1, s16
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 fbf6 	bl	8005a90 <__pow5mult>
 80052a4:	ee08 0a10 	vmov	s16, r0
 80052a8:	2101      	movs	r1, #1
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 fb30 	bl	8005910 <__i2b>
 80052b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	4606      	mov	r6, r0
 80052b6:	f340 8088 	ble.w	80053ca <_dtoa_r+0x8c2>
 80052ba:	461a      	mov	r2, r3
 80052bc:	4601      	mov	r1, r0
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fbe6 	bl	8005a90 <__pow5mult>
 80052c4:	9b06      	ldr	r3, [sp, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	4606      	mov	r6, r0
 80052ca:	f340 8081 	ble.w	80053d0 <_dtoa_r+0x8c8>
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	6933      	ldr	r3, [r6, #16]
 80052d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052d8:	6918      	ldr	r0, [r3, #16]
 80052da:	f000 fac9 	bl	8005870 <__hi0bits>
 80052de:	f1c0 0020 	rsb	r0, r0, #32
 80052e2:	9b05      	ldr	r3, [sp, #20]
 80052e4:	4418      	add	r0, r3
 80052e6:	f010 001f 	ands.w	r0, r0, #31
 80052ea:	f000 8092 	beq.w	8005412 <_dtoa_r+0x90a>
 80052ee:	f1c0 0320 	rsb	r3, r0, #32
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	f340 808a 	ble.w	800540c <_dtoa_r+0x904>
 80052f8:	f1c0 001c 	rsb	r0, r0, #28
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	4403      	add	r3, r0
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	9b05      	ldr	r3, [sp, #20]
 8005304:	4403      	add	r3, r0
 8005306:	4405      	add	r5, r0
 8005308:	9305      	str	r3, [sp, #20]
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	dd07      	ble.n	8005320 <_dtoa_r+0x818>
 8005310:	ee18 1a10 	vmov	r1, s16
 8005314:	461a      	mov	r2, r3
 8005316:	4620      	mov	r0, r4
 8005318:	f000 fc14 	bl	8005b44 <__lshift>
 800531c:	ee08 0a10 	vmov	s16, r0
 8005320:	9b05      	ldr	r3, [sp, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	dd05      	ble.n	8005332 <_dtoa_r+0x82a>
 8005326:	4631      	mov	r1, r6
 8005328:	461a      	mov	r2, r3
 800532a:	4620      	mov	r0, r4
 800532c:	f000 fc0a 	bl	8005b44 <__lshift>
 8005330:	4606      	mov	r6, r0
 8005332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d06e      	beq.n	8005416 <_dtoa_r+0x90e>
 8005338:	ee18 0a10 	vmov	r0, s16
 800533c:	4631      	mov	r1, r6
 800533e:	f000 fc71 	bl	8005c24 <__mcmp>
 8005342:	2800      	cmp	r0, #0
 8005344:	da67      	bge.n	8005416 <_dtoa_r+0x90e>
 8005346:	9b00      	ldr	r3, [sp, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	ee18 1a10 	vmov	r1, s16
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	220a      	movs	r2, #10
 8005352:	2300      	movs	r3, #0
 8005354:	4620      	mov	r0, r4
 8005356:	f000 fa45 	bl	80057e4 <__multadd>
 800535a:	9b08      	ldr	r3, [sp, #32]
 800535c:	ee08 0a10 	vmov	s16, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 81b1 	beq.w	80056c8 <_dtoa_r+0xbc0>
 8005366:	2300      	movs	r3, #0
 8005368:	4639      	mov	r1, r7
 800536a:	220a      	movs	r2, #10
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa39 	bl	80057e4 <__multadd>
 8005372:	9b02      	ldr	r3, [sp, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	4607      	mov	r7, r0
 8005378:	f300 808e 	bgt.w	8005498 <_dtoa_r+0x990>
 800537c:	9b06      	ldr	r3, [sp, #24]
 800537e:	2b02      	cmp	r3, #2
 8005380:	dc51      	bgt.n	8005426 <_dtoa_r+0x91e>
 8005382:	e089      	b.n	8005498 <_dtoa_r+0x990>
 8005384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800538a:	e74b      	b.n	8005224 <_dtoa_r+0x71c>
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	1e5e      	subs	r6, r3, #1
 8005390:	9b07      	ldr	r3, [sp, #28]
 8005392:	42b3      	cmp	r3, r6
 8005394:	bfbf      	itttt	lt
 8005396:	9b07      	ldrlt	r3, [sp, #28]
 8005398:	9607      	strlt	r6, [sp, #28]
 800539a:	1af2      	sublt	r2, r6, r3
 800539c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800539e:	bfb6      	itet	lt
 80053a0:	189b      	addlt	r3, r3, r2
 80053a2:	1b9e      	subge	r6, r3, r6
 80053a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	bfb8      	it	lt
 80053aa:	2600      	movlt	r6, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bfb7      	itett	lt
 80053b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80053b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80053b8:	1a9d      	sublt	r5, r3, r2
 80053ba:	2300      	movlt	r3, #0
 80053bc:	e734      	b.n	8005228 <_dtoa_r+0x720>
 80053be:	9e07      	ldr	r6, [sp, #28]
 80053c0:	9d04      	ldr	r5, [sp, #16]
 80053c2:	9f08      	ldr	r7, [sp, #32]
 80053c4:	e73b      	b.n	800523e <_dtoa_r+0x736>
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	e767      	b.n	800529a <_dtoa_r+0x792>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	dc18      	bgt.n	8005402 <_dtoa_r+0x8fa>
 80053d0:	f1ba 0f00 	cmp.w	sl, #0
 80053d4:	d115      	bne.n	8005402 <_dtoa_r+0x8fa>
 80053d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053da:	b993      	cbnz	r3, 8005402 <_dtoa_r+0x8fa>
 80053dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053e0:	0d1b      	lsrs	r3, r3, #20
 80053e2:	051b      	lsls	r3, r3, #20
 80053e4:	b183      	cbz	r3, 8005408 <_dtoa_r+0x900>
 80053e6:	9b04      	ldr	r3, [sp, #16]
 80053e8:	3301      	adds	r3, #1
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	9b05      	ldr	r3, [sp, #20]
 80053ee:	3301      	adds	r3, #1
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f04f 0801 	mov.w	r8, #1
 80053f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f47f af6a 	bne.w	80052d2 <_dtoa_r+0x7ca>
 80053fe:	2001      	movs	r0, #1
 8005400:	e76f      	b.n	80052e2 <_dtoa_r+0x7da>
 8005402:	f04f 0800 	mov.w	r8, #0
 8005406:	e7f6      	b.n	80053f6 <_dtoa_r+0x8ee>
 8005408:	4698      	mov	r8, r3
 800540a:	e7f4      	b.n	80053f6 <_dtoa_r+0x8ee>
 800540c:	f43f af7d 	beq.w	800530a <_dtoa_r+0x802>
 8005410:	4618      	mov	r0, r3
 8005412:	301c      	adds	r0, #28
 8005414:	e772      	b.n	80052fc <_dtoa_r+0x7f4>
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	dc37      	bgt.n	800548c <_dtoa_r+0x984>
 800541c:	9b06      	ldr	r3, [sp, #24]
 800541e:	2b02      	cmp	r3, #2
 8005420:	dd34      	ble.n	800548c <_dtoa_r+0x984>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	9302      	str	r3, [sp, #8]
 8005426:	9b02      	ldr	r3, [sp, #8]
 8005428:	b96b      	cbnz	r3, 8005446 <_dtoa_r+0x93e>
 800542a:	4631      	mov	r1, r6
 800542c:	2205      	movs	r2, #5
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f9d8 	bl	80057e4 <__multadd>
 8005434:	4601      	mov	r1, r0
 8005436:	4606      	mov	r6, r0
 8005438:	ee18 0a10 	vmov	r0, s16
 800543c:	f000 fbf2 	bl	8005c24 <__mcmp>
 8005440:	2800      	cmp	r0, #0
 8005442:	f73f adbb 	bgt.w	8004fbc <_dtoa_r+0x4b4>
 8005446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005448:	9d01      	ldr	r5, [sp, #4]
 800544a:	43db      	mvns	r3, r3
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	4631      	mov	r1, r6
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f9a3 	bl	80057a0 <_Bfree>
 800545a:	2f00      	cmp	r7, #0
 800545c:	f43f aea4 	beq.w	80051a8 <_dtoa_r+0x6a0>
 8005460:	f1b8 0f00 	cmp.w	r8, #0
 8005464:	d005      	beq.n	8005472 <_dtoa_r+0x96a>
 8005466:	45b8      	cmp	r8, r7
 8005468:	d003      	beq.n	8005472 <_dtoa_r+0x96a>
 800546a:	4641      	mov	r1, r8
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f997 	bl	80057a0 <_Bfree>
 8005472:	4639      	mov	r1, r7
 8005474:	4620      	mov	r0, r4
 8005476:	f000 f993 	bl	80057a0 <_Bfree>
 800547a:	e695      	b.n	80051a8 <_dtoa_r+0x6a0>
 800547c:	2600      	movs	r6, #0
 800547e:	4637      	mov	r7, r6
 8005480:	e7e1      	b.n	8005446 <_dtoa_r+0x93e>
 8005482:	9700      	str	r7, [sp, #0]
 8005484:	4637      	mov	r7, r6
 8005486:	e599      	b.n	8004fbc <_dtoa_r+0x4b4>
 8005488:	40240000 	.word	0x40240000
 800548c:	9b08      	ldr	r3, [sp, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ca 	beq.w	8005628 <_dtoa_r+0xb20>
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	2d00      	cmp	r5, #0
 800549a:	dd05      	ble.n	80054a8 <_dtoa_r+0x9a0>
 800549c:	4639      	mov	r1, r7
 800549e:	462a      	mov	r2, r5
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fb4f 	bl	8005b44 <__lshift>
 80054a6:	4607      	mov	r7, r0
 80054a8:	f1b8 0f00 	cmp.w	r8, #0
 80054ac:	d05b      	beq.n	8005566 <_dtoa_r+0xa5e>
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 f935 	bl	8005720 <_Balloc>
 80054b6:	4605      	mov	r5, r0
 80054b8:	b928      	cbnz	r0, 80054c6 <_dtoa_r+0x9be>
 80054ba:	4b87      	ldr	r3, [pc, #540]	; (80056d8 <_dtoa_r+0xbd0>)
 80054bc:	4602      	mov	r2, r0
 80054be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054c2:	f7ff bb3b 	b.w	8004b3c <_dtoa_r+0x34>
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	3202      	adds	r2, #2
 80054ca:	0092      	lsls	r2, r2, #2
 80054cc:	f107 010c 	add.w	r1, r7, #12
 80054d0:	300c      	adds	r0, #12
 80054d2:	f000 f90b 	bl	80056ec <memcpy>
 80054d6:	2201      	movs	r2, #1
 80054d8:	4629      	mov	r1, r5
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fb32 	bl	8005b44 <__lshift>
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	f103 0901 	add.w	r9, r3, #1
 80054e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	9305      	str	r3, [sp, #20]
 80054ee:	f00a 0301 	and.w	r3, sl, #1
 80054f2:	46b8      	mov	r8, r7
 80054f4:	9304      	str	r3, [sp, #16]
 80054f6:	4607      	mov	r7, r0
 80054f8:	4631      	mov	r1, r6
 80054fa:	ee18 0a10 	vmov	r0, s16
 80054fe:	f7ff fa78 	bl	80049f2 <quorem>
 8005502:	4641      	mov	r1, r8
 8005504:	9002      	str	r0, [sp, #8]
 8005506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800550a:	ee18 0a10 	vmov	r0, s16
 800550e:	f000 fb89 	bl	8005c24 <__mcmp>
 8005512:	463a      	mov	r2, r7
 8005514:	9003      	str	r0, [sp, #12]
 8005516:	4631      	mov	r1, r6
 8005518:	4620      	mov	r0, r4
 800551a:	f000 fb9f 	bl	8005c5c <__mdiff>
 800551e:	68c2      	ldr	r2, [r0, #12]
 8005520:	f109 3bff 	add.w	fp, r9, #4294967295
 8005524:	4605      	mov	r5, r0
 8005526:	bb02      	cbnz	r2, 800556a <_dtoa_r+0xa62>
 8005528:	4601      	mov	r1, r0
 800552a:	ee18 0a10 	vmov	r0, s16
 800552e:	f000 fb79 	bl	8005c24 <__mcmp>
 8005532:	4602      	mov	r2, r0
 8005534:	4629      	mov	r1, r5
 8005536:	4620      	mov	r0, r4
 8005538:	9207      	str	r2, [sp, #28]
 800553a:	f000 f931 	bl	80057a0 <_Bfree>
 800553e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005542:	ea43 0102 	orr.w	r1, r3, r2
 8005546:	9b04      	ldr	r3, [sp, #16]
 8005548:	430b      	orrs	r3, r1
 800554a:	464d      	mov	r5, r9
 800554c:	d10f      	bne.n	800556e <_dtoa_r+0xa66>
 800554e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005552:	d02a      	beq.n	80055aa <_dtoa_r+0xaa2>
 8005554:	9b03      	ldr	r3, [sp, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	dd02      	ble.n	8005560 <_dtoa_r+0xa58>
 800555a:	9b02      	ldr	r3, [sp, #8]
 800555c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005560:	f88b a000 	strb.w	sl, [fp]
 8005564:	e775      	b.n	8005452 <_dtoa_r+0x94a>
 8005566:	4638      	mov	r0, r7
 8005568:	e7ba      	b.n	80054e0 <_dtoa_r+0x9d8>
 800556a:	2201      	movs	r2, #1
 800556c:	e7e2      	b.n	8005534 <_dtoa_r+0xa2c>
 800556e:	9b03      	ldr	r3, [sp, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	db04      	blt.n	800557e <_dtoa_r+0xa76>
 8005574:	9906      	ldr	r1, [sp, #24]
 8005576:	430b      	orrs	r3, r1
 8005578:	9904      	ldr	r1, [sp, #16]
 800557a:	430b      	orrs	r3, r1
 800557c:	d122      	bne.n	80055c4 <_dtoa_r+0xabc>
 800557e:	2a00      	cmp	r2, #0
 8005580:	ddee      	ble.n	8005560 <_dtoa_r+0xa58>
 8005582:	ee18 1a10 	vmov	r1, s16
 8005586:	2201      	movs	r2, #1
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fadb 	bl	8005b44 <__lshift>
 800558e:	4631      	mov	r1, r6
 8005590:	ee08 0a10 	vmov	s16, r0
 8005594:	f000 fb46 	bl	8005c24 <__mcmp>
 8005598:	2800      	cmp	r0, #0
 800559a:	dc03      	bgt.n	80055a4 <_dtoa_r+0xa9c>
 800559c:	d1e0      	bne.n	8005560 <_dtoa_r+0xa58>
 800559e:	f01a 0f01 	tst.w	sl, #1
 80055a2:	d0dd      	beq.n	8005560 <_dtoa_r+0xa58>
 80055a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055a8:	d1d7      	bne.n	800555a <_dtoa_r+0xa52>
 80055aa:	2339      	movs	r3, #57	; 0x39
 80055ac:	f88b 3000 	strb.w	r3, [fp]
 80055b0:	462b      	mov	r3, r5
 80055b2:	461d      	mov	r5, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055ba:	2a39      	cmp	r2, #57	; 0x39
 80055bc:	d071      	beq.n	80056a2 <_dtoa_r+0xb9a>
 80055be:	3201      	adds	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e746      	b.n	8005452 <_dtoa_r+0x94a>
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	dd07      	ble.n	80055d8 <_dtoa_r+0xad0>
 80055c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055cc:	d0ed      	beq.n	80055aa <_dtoa_r+0xaa2>
 80055ce:	f10a 0301 	add.w	r3, sl, #1
 80055d2:	f88b 3000 	strb.w	r3, [fp]
 80055d6:	e73c      	b.n	8005452 <_dtoa_r+0x94a>
 80055d8:	9b05      	ldr	r3, [sp, #20]
 80055da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80055de:	4599      	cmp	r9, r3
 80055e0:	d047      	beq.n	8005672 <_dtoa_r+0xb6a>
 80055e2:	ee18 1a10 	vmov	r1, s16
 80055e6:	2300      	movs	r3, #0
 80055e8:	220a      	movs	r2, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 f8fa 	bl	80057e4 <__multadd>
 80055f0:	45b8      	cmp	r8, r7
 80055f2:	ee08 0a10 	vmov	s16, r0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	f04f 020a 	mov.w	r2, #10
 80055fe:	4641      	mov	r1, r8
 8005600:	4620      	mov	r0, r4
 8005602:	d106      	bne.n	8005612 <_dtoa_r+0xb0a>
 8005604:	f000 f8ee 	bl	80057e4 <__multadd>
 8005608:	4680      	mov	r8, r0
 800560a:	4607      	mov	r7, r0
 800560c:	f109 0901 	add.w	r9, r9, #1
 8005610:	e772      	b.n	80054f8 <_dtoa_r+0x9f0>
 8005612:	f000 f8e7 	bl	80057e4 <__multadd>
 8005616:	4639      	mov	r1, r7
 8005618:	4680      	mov	r8, r0
 800561a:	2300      	movs	r3, #0
 800561c:	220a      	movs	r2, #10
 800561e:	4620      	mov	r0, r4
 8005620:	f000 f8e0 	bl	80057e4 <__multadd>
 8005624:	4607      	mov	r7, r0
 8005626:	e7f1      	b.n	800560c <_dtoa_r+0xb04>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	9302      	str	r3, [sp, #8]
 800562c:	9d01      	ldr	r5, [sp, #4]
 800562e:	ee18 0a10 	vmov	r0, s16
 8005632:	4631      	mov	r1, r6
 8005634:	f7ff f9dd 	bl	80049f2 <quorem>
 8005638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	f805 ab01 	strb.w	sl, [r5], #1
 8005642:	1aea      	subs	r2, r5, r3
 8005644:	9b02      	ldr	r3, [sp, #8]
 8005646:	4293      	cmp	r3, r2
 8005648:	dd09      	ble.n	800565e <_dtoa_r+0xb56>
 800564a:	ee18 1a10 	vmov	r1, s16
 800564e:	2300      	movs	r3, #0
 8005650:	220a      	movs	r2, #10
 8005652:	4620      	mov	r0, r4
 8005654:	f000 f8c6 	bl	80057e4 <__multadd>
 8005658:	ee08 0a10 	vmov	s16, r0
 800565c:	e7e7      	b.n	800562e <_dtoa_r+0xb26>
 800565e:	9b02      	ldr	r3, [sp, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	bfc8      	it	gt
 8005664:	461d      	movgt	r5, r3
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	bfd8      	it	le
 800566a:	2501      	movle	r5, #1
 800566c:	441d      	add	r5, r3
 800566e:	f04f 0800 	mov.w	r8, #0
 8005672:	ee18 1a10 	vmov	r1, s16
 8005676:	2201      	movs	r2, #1
 8005678:	4620      	mov	r0, r4
 800567a:	f000 fa63 	bl	8005b44 <__lshift>
 800567e:	4631      	mov	r1, r6
 8005680:	ee08 0a10 	vmov	s16, r0
 8005684:	f000 face 	bl	8005c24 <__mcmp>
 8005688:	2800      	cmp	r0, #0
 800568a:	dc91      	bgt.n	80055b0 <_dtoa_r+0xaa8>
 800568c:	d102      	bne.n	8005694 <_dtoa_r+0xb8c>
 800568e:	f01a 0f01 	tst.w	sl, #1
 8005692:	d18d      	bne.n	80055b0 <_dtoa_r+0xaa8>
 8005694:	462b      	mov	r3, r5
 8005696:	461d      	mov	r5, r3
 8005698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800569c:	2a30      	cmp	r2, #48	; 0x30
 800569e:	d0fa      	beq.n	8005696 <_dtoa_r+0xb8e>
 80056a0:	e6d7      	b.n	8005452 <_dtoa_r+0x94a>
 80056a2:	9a01      	ldr	r2, [sp, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d184      	bne.n	80055b2 <_dtoa_r+0xaaa>
 80056a8:	9b00      	ldr	r3, [sp, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2331      	movs	r3, #49	; 0x31
 80056b0:	7013      	strb	r3, [r2, #0]
 80056b2:	e6ce      	b.n	8005452 <_dtoa_r+0x94a>
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <_dtoa_r+0xbd4>)
 80056b6:	f7ff ba95 	b.w	8004be4 <_dtoa_r+0xdc>
 80056ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f aa6e 	bne.w	8004b9e <_dtoa_r+0x96>
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <_dtoa_r+0xbd8>)
 80056c4:	f7ff ba8e 	b.w	8004be4 <_dtoa_r+0xdc>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dcae      	bgt.n	800562c <_dtoa_r+0xb24>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f73f aea8 	bgt.w	8005426 <_dtoa_r+0x91e>
 80056d6:	e7a9      	b.n	800562c <_dtoa_r+0xb24>
 80056d8:	08006df3 	.word	0x08006df3
 80056dc:	08006d50 	.word	0x08006d50
 80056e0:	08006d74 	.word	0x08006d74

080056e4 <_localeconv_r>:
 80056e4:	4800      	ldr	r0, [pc, #0]	; (80056e8 <_localeconv_r+0x4>)
 80056e6:	4770      	bx	lr
 80056e8:	20000160 	.word	0x20000160

080056ec <memcpy>:
 80056ec:	440a      	add	r2, r1
 80056ee:	4291      	cmp	r1, r2
 80056f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056f4:	d100      	bne.n	80056f8 <memcpy+0xc>
 80056f6:	4770      	bx	lr
 80056f8:	b510      	push	{r4, lr}
 80056fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005702:	4291      	cmp	r1, r2
 8005704:	d1f9      	bne.n	80056fa <memcpy+0xe>
 8005706:	bd10      	pop	{r4, pc}

08005708 <__malloc_lock>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__malloc_lock+0x8>)
 800570a:	f000 bd30 	b.w	800616e <__retarget_lock_acquire_recursive>
 800570e:	bf00      	nop
 8005710:	200002d4 	.word	0x200002d4

08005714 <__malloc_unlock>:
 8005714:	4801      	ldr	r0, [pc, #4]	; (800571c <__malloc_unlock+0x8>)
 8005716:	f000 bd2b 	b.w	8006170 <__retarget_lock_release_recursive>
 800571a:	bf00      	nop
 800571c:	200002d4 	.word	0x200002d4

08005720 <_Balloc>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005724:	4604      	mov	r4, r0
 8005726:	460d      	mov	r5, r1
 8005728:	b976      	cbnz	r6, 8005748 <_Balloc+0x28>
 800572a:	2010      	movs	r0, #16
 800572c:	f7fe fbac 	bl	8003e88 <malloc>
 8005730:	4602      	mov	r2, r0
 8005732:	6260      	str	r0, [r4, #36]	; 0x24
 8005734:	b920      	cbnz	r0, 8005740 <_Balloc+0x20>
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <_Balloc+0x78>)
 8005738:	4818      	ldr	r0, [pc, #96]	; (800579c <_Balloc+0x7c>)
 800573a:	2166      	movs	r1, #102	; 0x66
 800573c:	f000 fce6 	bl	800610c <__assert_func>
 8005740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005744:	6006      	str	r6, [r0, #0]
 8005746:	60c6      	str	r6, [r0, #12]
 8005748:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800574a:	68f3      	ldr	r3, [r6, #12]
 800574c:	b183      	cbz	r3, 8005770 <_Balloc+0x50>
 800574e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005756:	b9b8      	cbnz	r0, 8005788 <_Balloc+0x68>
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f605 	lsl.w	r6, r1, r5
 800575e:	1d72      	adds	r2, r6, #5
 8005760:	0092      	lsls	r2, r2, #2
 8005762:	4620      	mov	r0, r4
 8005764:	f000 fb60 	bl	8005e28 <_calloc_r>
 8005768:	b160      	cbz	r0, 8005784 <_Balloc+0x64>
 800576a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800576e:	e00e      	b.n	800578e <_Balloc+0x6e>
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	2104      	movs	r1, #4
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fb57 	bl	8005e28 <_calloc_r>
 800577a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800577c:	60f0      	str	r0, [r6, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e4      	bne.n	800574e <_Balloc+0x2e>
 8005784:	2000      	movs	r0, #0
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	6802      	ldr	r2, [r0, #0]
 800578a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800578e:	2300      	movs	r3, #0
 8005790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005794:	e7f7      	b.n	8005786 <_Balloc+0x66>
 8005796:	bf00      	nop
 8005798:	08006d81 	.word	0x08006d81
 800579c:	08006e04 	.word	0x08006e04

080057a0 <_Bfree>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057a4:	4605      	mov	r5, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	b976      	cbnz	r6, 80057c8 <_Bfree+0x28>
 80057aa:	2010      	movs	r0, #16
 80057ac:	f7fe fb6c 	bl	8003e88 <malloc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6268      	str	r0, [r5, #36]	; 0x24
 80057b4:	b920      	cbnz	r0, 80057c0 <_Bfree+0x20>
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <_Bfree+0x3c>)
 80057b8:	4809      	ldr	r0, [pc, #36]	; (80057e0 <_Bfree+0x40>)
 80057ba:	218a      	movs	r1, #138	; 0x8a
 80057bc:	f000 fca6 	bl	800610c <__assert_func>
 80057c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057c4:	6006      	str	r6, [r0, #0]
 80057c6:	60c6      	str	r6, [r0, #12]
 80057c8:	b13c      	cbz	r4, 80057da <_Bfree+0x3a>
 80057ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057cc:	6862      	ldr	r2, [r4, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057d4:	6021      	str	r1, [r4, #0]
 80057d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	08006d81 	.word	0x08006d81
 80057e0:	08006e04 	.word	0x08006e04

080057e4 <__multadd>:
 80057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e8:	690d      	ldr	r5, [r1, #16]
 80057ea:	4607      	mov	r7, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	461e      	mov	r6, r3
 80057f0:	f101 0c14 	add.w	ip, r1, #20
 80057f4:	2000      	movs	r0, #0
 80057f6:	f8dc 3000 	ldr.w	r3, [ip]
 80057fa:	b299      	uxth	r1, r3
 80057fc:	fb02 6101 	mla	r1, r2, r1, r6
 8005800:	0c1e      	lsrs	r6, r3, #16
 8005802:	0c0b      	lsrs	r3, r1, #16
 8005804:	fb02 3306 	mla	r3, r2, r6, r3
 8005808:	b289      	uxth	r1, r1
 800580a:	3001      	adds	r0, #1
 800580c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005810:	4285      	cmp	r5, r0
 8005812:	f84c 1b04 	str.w	r1, [ip], #4
 8005816:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800581a:	dcec      	bgt.n	80057f6 <__multadd+0x12>
 800581c:	b30e      	cbz	r6, 8005862 <__multadd+0x7e>
 800581e:	68a3      	ldr	r3, [r4, #8]
 8005820:	42ab      	cmp	r3, r5
 8005822:	dc19      	bgt.n	8005858 <__multadd+0x74>
 8005824:	6861      	ldr	r1, [r4, #4]
 8005826:	4638      	mov	r0, r7
 8005828:	3101      	adds	r1, #1
 800582a:	f7ff ff79 	bl	8005720 <_Balloc>
 800582e:	4680      	mov	r8, r0
 8005830:	b928      	cbnz	r0, 800583e <__multadd+0x5a>
 8005832:	4602      	mov	r2, r0
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <__multadd+0x84>)
 8005836:	480d      	ldr	r0, [pc, #52]	; (800586c <__multadd+0x88>)
 8005838:	21b5      	movs	r1, #181	; 0xb5
 800583a:	f000 fc67 	bl	800610c <__assert_func>
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	3202      	adds	r2, #2
 8005842:	f104 010c 	add.w	r1, r4, #12
 8005846:	0092      	lsls	r2, r2, #2
 8005848:	300c      	adds	r0, #12
 800584a:	f7ff ff4f 	bl	80056ec <memcpy>
 800584e:	4621      	mov	r1, r4
 8005850:	4638      	mov	r0, r7
 8005852:	f7ff ffa5 	bl	80057a0 <_Bfree>
 8005856:	4644      	mov	r4, r8
 8005858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800585c:	3501      	adds	r5, #1
 800585e:	615e      	str	r6, [r3, #20]
 8005860:	6125      	str	r5, [r4, #16]
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	08006df3 	.word	0x08006df3
 800586c:	08006e04 	.word	0x08006e04

08005870 <__hi0bits>:
 8005870:	0c03      	lsrs	r3, r0, #16
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	b9d3      	cbnz	r3, 80058ac <__hi0bits+0x3c>
 8005876:	0400      	lsls	r0, r0, #16
 8005878:	2310      	movs	r3, #16
 800587a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800587e:	bf04      	itt	eq
 8005880:	0200      	lsleq	r0, r0, #8
 8005882:	3308      	addeq	r3, #8
 8005884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005888:	bf04      	itt	eq
 800588a:	0100      	lsleq	r0, r0, #4
 800588c:	3304      	addeq	r3, #4
 800588e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005892:	bf04      	itt	eq
 8005894:	0080      	lsleq	r0, r0, #2
 8005896:	3302      	addeq	r3, #2
 8005898:	2800      	cmp	r0, #0
 800589a:	db05      	blt.n	80058a8 <__hi0bits+0x38>
 800589c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80058a0:	f103 0301 	add.w	r3, r3, #1
 80058a4:	bf08      	it	eq
 80058a6:	2320      	moveq	r3, #32
 80058a8:	4618      	mov	r0, r3
 80058aa:	4770      	bx	lr
 80058ac:	2300      	movs	r3, #0
 80058ae:	e7e4      	b.n	800587a <__hi0bits+0xa>

080058b0 <__lo0bits>:
 80058b0:	6803      	ldr	r3, [r0, #0]
 80058b2:	f013 0207 	ands.w	r2, r3, #7
 80058b6:	4601      	mov	r1, r0
 80058b8:	d00b      	beq.n	80058d2 <__lo0bits+0x22>
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d423      	bmi.n	8005906 <__lo0bits+0x56>
 80058be:	0798      	lsls	r0, r3, #30
 80058c0:	bf49      	itett	mi
 80058c2:	085b      	lsrmi	r3, r3, #1
 80058c4:	089b      	lsrpl	r3, r3, #2
 80058c6:	2001      	movmi	r0, #1
 80058c8:	600b      	strmi	r3, [r1, #0]
 80058ca:	bf5c      	itt	pl
 80058cc:	600b      	strpl	r3, [r1, #0]
 80058ce:	2002      	movpl	r0, #2
 80058d0:	4770      	bx	lr
 80058d2:	b298      	uxth	r0, r3
 80058d4:	b9a8      	cbnz	r0, 8005902 <__lo0bits+0x52>
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	2010      	movs	r0, #16
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	b90a      	cbnz	r2, 80058e2 <__lo0bits+0x32>
 80058de:	3008      	adds	r0, #8
 80058e0:	0a1b      	lsrs	r3, r3, #8
 80058e2:	071a      	lsls	r2, r3, #28
 80058e4:	bf04      	itt	eq
 80058e6:	091b      	lsreq	r3, r3, #4
 80058e8:	3004      	addeq	r0, #4
 80058ea:	079a      	lsls	r2, r3, #30
 80058ec:	bf04      	itt	eq
 80058ee:	089b      	lsreq	r3, r3, #2
 80058f0:	3002      	addeq	r0, #2
 80058f2:	07da      	lsls	r2, r3, #31
 80058f4:	d403      	bmi.n	80058fe <__lo0bits+0x4e>
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	f100 0001 	add.w	r0, r0, #1
 80058fc:	d005      	beq.n	800590a <__lo0bits+0x5a>
 80058fe:	600b      	str	r3, [r1, #0]
 8005900:	4770      	bx	lr
 8005902:	4610      	mov	r0, r2
 8005904:	e7e9      	b.n	80058da <__lo0bits+0x2a>
 8005906:	2000      	movs	r0, #0
 8005908:	4770      	bx	lr
 800590a:	2020      	movs	r0, #32
 800590c:	4770      	bx	lr
	...

08005910 <__i2b>:
 8005910:	b510      	push	{r4, lr}
 8005912:	460c      	mov	r4, r1
 8005914:	2101      	movs	r1, #1
 8005916:	f7ff ff03 	bl	8005720 <_Balloc>
 800591a:	4602      	mov	r2, r0
 800591c:	b928      	cbnz	r0, 800592a <__i2b+0x1a>
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <__i2b+0x24>)
 8005920:	4805      	ldr	r0, [pc, #20]	; (8005938 <__i2b+0x28>)
 8005922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005926:	f000 fbf1 	bl	800610c <__assert_func>
 800592a:	2301      	movs	r3, #1
 800592c:	6144      	str	r4, [r0, #20]
 800592e:	6103      	str	r3, [r0, #16]
 8005930:	bd10      	pop	{r4, pc}
 8005932:	bf00      	nop
 8005934:	08006df3 	.word	0x08006df3
 8005938:	08006e04 	.word	0x08006e04

0800593c <__multiply>:
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	4691      	mov	r9, r2
 8005942:	690a      	ldr	r2, [r1, #16]
 8005944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005948:	429a      	cmp	r2, r3
 800594a:	bfb8      	it	lt
 800594c:	460b      	movlt	r3, r1
 800594e:	460c      	mov	r4, r1
 8005950:	bfbc      	itt	lt
 8005952:	464c      	movlt	r4, r9
 8005954:	4699      	movlt	r9, r3
 8005956:	6927      	ldr	r7, [r4, #16]
 8005958:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	6861      	ldr	r1, [r4, #4]
 8005960:	eb07 060a 	add.w	r6, r7, sl
 8005964:	42b3      	cmp	r3, r6
 8005966:	b085      	sub	sp, #20
 8005968:	bfb8      	it	lt
 800596a:	3101      	addlt	r1, #1
 800596c:	f7ff fed8 	bl	8005720 <_Balloc>
 8005970:	b930      	cbnz	r0, 8005980 <__multiply+0x44>
 8005972:	4602      	mov	r2, r0
 8005974:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <__multiply+0x14c>)
 8005976:	4845      	ldr	r0, [pc, #276]	; (8005a8c <__multiply+0x150>)
 8005978:	f240 115d 	movw	r1, #349	; 0x15d
 800597c:	f000 fbc6 	bl	800610c <__assert_func>
 8005980:	f100 0514 	add.w	r5, r0, #20
 8005984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005988:	462b      	mov	r3, r5
 800598a:	2200      	movs	r2, #0
 800598c:	4543      	cmp	r3, r8
 800598e:	d321      	bcc.n	80059d4 <__multiply+0x98>
 8005990:	f104 0314 	add.w	r3, r4, #20
 8005994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005998:	f109 0314 	add.w	r3, r9, #20
 800599c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	1b3a      	subs	r2, r7, r4
 80059a4:	3a15      	subs	r2, #21
 80059a6:	f022 0203 	bic.w	r2, r2, #3
 80059aa:	3204      	adds	r2, #4
 80059ac:	f104 0115 	add.w	r1, r4, #21
 80059b0:	428f      	cmp	r7, r1
 80059b2:	bf38      	it	cc
 80059b4:	2204      	movcc	r2, #4
 80059b6:	9201      	str	r2, [sp, #4]
 80059b8:	9a02      	ldr	r2, [sp, #8]
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d80c      	bhi.n	80059da <__multiply+0x9e>
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	dd03      	ble.n	80059cc <__multiply+0x90>
 80059c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d05a      	beq.n	8005a82 <__multiply+0x146>
 80059cc:	6106      	str	r6, [r0, #16]
 80059ce:	b005      	add	sp, #20
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	f843 2b04 	str.w	r2, [r3], #4
 80059d8:	e7d8      	b.n	800598c <__multiply+0x50>
 80059da:	f8b3 a000 	ldrh.w	sl, [r3]
 80059de:	f1ba 0f00 	cmp.w	sl, #0
 80059e2:	d024      	beq.n	8005a2e <__multiply+0xf2>
 80059e4:	f104 0e14 	add.w	lr, r4, #20
 80059e8:	46a9      	mov	r9, r5
 80059ea:	f04f 0c00 	mov.w	ip, #0
 80059ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80059f2:	f8d9 1000 	ldr.w	r1, [r9]
 80059f6:	fa1f fb82 	uxth.w	fp, r2
 80059fa:	b289      	uxth	r1, r1
 80059fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a04:	f8d9 2000 	ldr.w	r2, [r9]
 8005a08:	4461      	add	r1, ip
 8005a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a16:	b289      	uxth	r1, r1
 8005a18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a1c:	4577      	cmp	r7, lr
 8005a1e:	f849 1b04 	str.w	r1, [r9], #4
 8005a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a26:	d8e2      	bhi.n	80059ee <__multiply+0xb2>
 8005a28:	9a01      	ldr	r2, [sp, #4]
 8005a2a:	f845 c002 	str.w	ip, [r5, r2]
 8005a2e:	9a03      	ldr	r2, [sp, #12]
 8005a30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a34:	3304      	adds	r3, #4
 8005a36:	f1b9 0f00 	cmp.w	r9, #0
 8005a3a:	d020      	beq.n	8005a7e <__multiply+0x142>
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	f104 0c14 	add.w	ip, r4, #20
 8005a42:	46ae      	mov	lr, r5
 8005a44:	f04f 0a00 	mov.w	sl, #0
 8005a48:	f8bc b000 	ldrh.w	fp, [ip]
 8005a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a50:	fb09 220b 	mla	r2, r9, fp, r2
 8005a54:	4492      	add	sl, r2
 8005a56:	b289      	uxth	r1, r1
 8005a58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005a5c:	f84e 1b04 	str.w	r1, [lr], #4
 8005a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005a64:	f8be 1000 	ldrh.w	r1, [lr]
 8005a68:	0c12      	lsrs	r2, r2, #16
 8005a6a:	fb09 1102 	mla	r1, r9, r2, r1
 8005a6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a72:	4567      	cmp	r7, ip
 8005a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a78:	d8e6      	bhi.n	8005a48 <__multiply+0x10c>
 8005a7a:	9a01      	ldr	r2, [sp, #4]
 8005a7c:	50a9      	str	r1, [r5, r2]
 8005a7e:	3504      	adds	r5, #4
 8005a80:	e79a      	b.n	80059b8 <__multiply+0x7c>
 8005a82:	3e01      	subs	r6, #1
 8005a84:	e79c      	b.n	80059c0 <__multiply+0x84>
 8005a86:	bf00      	nop
 8005a88:	08006df3 	.word	0x08006df3
 8005a8c:	08006e04 	.word	0x08006e04

08005a90 <__pow5mult>:
 8005a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a94:	4615      	mov	r5, r2
 8005a96:	f012 0203 	ands.w	r2, r2, #3
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	460f      	mov	r7, r1
 8005a9e:	d007      	beq.n	8005ab0 <__pow5mult+0x20>
 8005aa0:	4c25      	ldr	r4, [pc, #148]	; (8005b38 <__pow5mult+0xa8>)
 8005aa2:	3a01      	subs	r2, #1
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005aaa:	f7ff fe9b 	bl	80057e4 <__multadd>
 8005aae:	4607      	mov	r7, r0
 8005ab0:	10ad      	asrs	r5, r5, #2
 8005ab2:	d03d      	beq.n	8005b30 <__pow5mult+0xa0>
 8005ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ab6:	b97c      	cbnz	r4, 8005ad8 <__pow5mult+0x48>
 8005ab8:	2010      	movs	r0, #16
 8005aba:	f7fe f9e5 	bl	8003e88 <malloc>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ac2:	b928      	cbnz	r0, 8005ad0 <__pow5mult+0x40>
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <__pow5mult+0xac>)
 8005ac6:	481e      	ldr	r0, [pc, #120]	; (8005b40 <__pow5mult+0xb0>)
 8005ac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005acc:	f000 fb1e 	bl	800610c <__assert_func>
 8005ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ad4:	6004      	str	r4, [r0, #0]
 8005ad6:	60c4      	str	r4, [r0, #12]
 8005ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ae0:	b94c      	cbnz	r4, 8005af6 <__pow5mult+0x66>
 8005ae2:	f240 2171 	movw	r1, #625	; 0x271
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f7ff ff12 	bl	8005910 <__i2b>
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8005af2:	4604      	mov	r4, r0
 8005af4:	6003      	str	r3, [r0, #0]
 8005af6:	f04f 0900 	mov.w	r9, #0
 8005afa:	07eb      	lsls	r3, r5, #31
 8005afc:	d50a      	bpl.n	8005b14 <__pow5mult+0x84>
 8005afe:	4639      	mov	r1, r7
 8005b00:	4622      	mov	r2, r4
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ff1a 	bl	800593c <__multiply>
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	f7ff fe47 	bl	80057a0 <_Bfree>
 8005b12:	4647      	mov	r7, r8
 8005b14:	106d      	asrs	r5, r5, #1
 8005b16:	d00b      	beq.n	8005b30 <__pow5mult+0xa0>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	b938      	cbnz	r0, 8005b2c <__pow5mult+0x9c>
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4630      	mov	r0, r6
 8005b22:	f7ff ff0b 	bl	800593c <__multiply>
 8005b26:	6020      	str	r0, [r4, #0]
 8005b28:	f8c0 9000 	str.w	r9, [r0]
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	e7e4      	b.n	8005afa <__pow5mult+0x6a>
 8005b30:	4638      	mov	r0, r7
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	bf00      	nop
 8005b38:	08006f50 	.word	0x08006f50
 8005b3c:	08006d81 	.word	0x08006d81
 8005b40:	08006e04 	.word	0x08006e04

08005b44 <__lshift>:
 8005b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6849      	ldr	r1, [r1, #4]
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	4607      	mov	r7, r0
 8005b56:	4691      	mov	r9, r2
 8005b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b5c:	f108 0601 	add.w	r6, r8, #1
 8005b60:	42b3      	cmp	r3, r6
 8005b62:	db0b      	blt.n	8005b7c <__lshift+0x38>
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff fddb 	bl	8005720 <_Balloc>
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b948      	cbnz	r0, 8005b82 <__lshift+0x3e>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <__lshift+0xd8>)
 8005b72:	482b      	ldr	r0, [pc, #172]	; (8005c20 <__lshift+0xdc>)
 8005b74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b78:	f000 fac8 	bl	800610c <__assert_func>
 8005b7c:	3101      	adds	r1, #1
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	e7ee      	b.n	8005b60 <__lshift+0x1c>
 8005b82:	2300      	movs	r3, #0
 8005b84:	f100 0114 	add.w	r1, r0, #20
 8005b88:	f100 0210 	add.w	r2, r0, #16
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	4553      	cmp	r3, sl
 8005b90:	db37      	blt.n	8005c02 <__lshift+0xbe>
 8005b92:	6920      	ldr	r0, [r4, #16]
 8005b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b98:	f104 0314 	add.w	r3, r4, #20
 8005b9c:	f019 091f 	ands.w	r9, r9, #31
 8005ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ba8:	d02f      	beq.n	8005c0a <__lshift+0xc6>
 8005baa:	f1c9 0e20 	rsb	lr, r9, #32
 8005bae:	468a      	mov	sl, r1
 8005bb0:	f04f 0c00 	mov.w	ip, #0
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8005bba:	ea42 020c 	orr.w	r2, r2, ip
 8005bbe:	f84a 2b04 	str.w	r2, [sl], #4
 8005bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005bcc:	d8f2      	bhi.n	8005bb4 <__lshift+0x70>
 8005bce:	1b03      	subs	r3, r0, r4
 8005bd0:	3b15      	subs	r3, #21
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	f104 0215 	add.w	r2, r4, #21
 8005bdc:	4290      	cmp	r0, r2
 8005bde:	bf38      	it	cc
 8005be0:	2304      	movcc	r3, #4
 8005be2:	f841 c003 	str.w	ip, [r1, r3]
 8005be6:	f1bc 0f00 	cmp.w	ip, #0
 8005bea:	d001      	beq.n	8005bf0 <__lshift+0xac>
 8005bec:	f108 0602 	add.w	r6, r8, #2
 8005bf0:	3e01      	subs	r6, #1
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	612e      	str	r6, [r5, #16]
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	f7ff fdd2 	bl	80057a0 <_Bfree>
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c06:	3301      	adds	r3, #1
 8005c08:	e7c1      	b.n	8005b8e <__lshift+0x4a>
 8005c0a:	3904      	subs	r1, #4
 8005c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c14:	4298      	cmp	r0, r3
 8005c16:	d8f9      	bhi.n	8005c0c <__lshift+0xc8>
 8005c18:	e7ea      	b.n	8005bf0 <__lshift+0xac>
 8005c1a:	bf00      	nop
 8005c1c:	08006df3 	.word	0x08006df3
 8005c20:	08006e04 	.word	0x08006e04

08005c24 <__mcmp>:
 8005c24:	b530      	push	{r4, r5, lr}
 8005c26:	6902      	ldr	r2, [r0, #16]
 8005c28:	690c      	ldr	r4, [r1, #16]
 8005c2a:	1b12      	subs	r2, r2, r4
 8005c2c:	d10e      	bne.n	8005c4c <__mcmp+0x28>
 8005c2e:	f100 0314 	add.w	r3, r0, #20
 8005c32:	3114      	adds	r1, #20
 8005c34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c44:	42a5      	cmp	r5, r4
 8005c46:	d003      	beq.n	8005c50 <__mcmp+0x2c>
 8005c48:	d305      	bcc.n	8005c56 <__mcmp+0x32>
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	bd30      	pop	{r4, r5, pc}
 8005c50:	4283      	cmp	r3, r0
 8005c52:	d3f3      	bcc.n	8005c3c <__mcmp+0x18>
 8005c54:	e7fa      	b.n	8005c4c <__mcmp+0x28>
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5a:	e7f7      	b.n	8005c4c <__mcmp+0x28>

08005c5c <__mdiff>:
 8005c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	4606      	mov	r6, r0
 8005c64:	4611      	mov	r1, r2
 8005c66:	4620      	mov	r0, r4
 8005c68:	4690      	mov	r8, r2
 8005c6a:	f7ff ffdb 	bl	8005c24 <__mcmp>
 8005c6e:	1e05      	subs	r5, r0, #0
 8005c70:	d110      	bne.n	8005c94 <__mdiff+0x38>
 8005c72:	4629      	mov	r1, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff fd53 	bl	8005720 <_Balloc>
 8005c7a:	b930      	cbnz	r0, 8005c8a <__mdiff+0x2e>
 8005c7c:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <__mdiff+0x10c>)
 8005c7e:	4602      	mov	r2, r0
 8005c80:	f240 2132 	movw	r1, #562	; 0x232
 8005c84:	4839      	ldr	r0, [pc, #228]	; (8005d6c <__mdiff+0x110>)
 8005c86:	f000 fa41 	bl	800610c <__assert_func>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	bfa4      	itt	ge
 8005c96:	4643      	movge	r3, r8
 8005c98:	46a0      	movge	r8, r4
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ca0:	bfa6      	itte	ge
 8005ca2:	461c      	movge	r4, r3
 8005ca4:	2500      	movge	r5, #0
 8005ca6:	2501      	movlt	r5, #1
 8005ca8:	f7ff fd3a 	bl	8005720 <_Balloc>
 8005cac:	b920      	cbnz	r0, 8005cb8 <__mdiff+0x5c>
 8005cae:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <__mdiff+0x10c>)
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005cb6:	e7e5      	b.n	8005c84 <__mdiff+0x28>
 8005cb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cbc:	6926      	ldr	r6, [r4, #16]
 8005cbe:	60c5      	str	r5, [r0, #12]
 8005cc0:	f104 0914 	add.w	r9, r4, #20
 8005cc4:	f108 0514 	add.w	r5, r8, #20
 8005cc8:	f100 0e14 	add.w	lr, r0, #20
 8005ccc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005cd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005cd4:	f108 0210 	add.w	r2, r8, #16
 8005cd8:	46f2      	mov	sl, lr
 8005cda:	2100      	movs	r1, #0
 8005cdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ce0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005ce4:	fa1f f883 	uxth.w	r8, r3
 8005ce8:	fa11 f18b 	uxtah	r1, r1, fp
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	eba1 0808 	sub.w	r8, r1, r8
 8005cf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005cf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005cfa:	fa1f f888 	uxth.w	r8, r8
 8005cfe:	1419      	asrs	r1, r3, #16
 8005d00:	454e      	cmp	r6, r9
 8005d02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d06:	f84a 3b04 	str.w	r3, [sl], #4
 8005d0a:	d8e7      	bhi.n	8005cdc <__mdiff+0x80>
 8005d0c:	1b33      	subs	r3, r6, r4
 8005d0e:	3b15      	subs	r3, #21
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	3304      	adds	r3, #4
 8005d16:	3415      	adds	r4, #21
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	bf38      	it	cc
 8005d1c:	2304      	movcc	r3, #4
 8005d1e:	441d      	add	r5, r3
 8005d20:	4473      	add	r3, lr
 8005d22:	469e      	mov	lr, r3
 8005d24:	462e      	mov	r6, r5
 8005d26:	4566      	cmp	r6, ip
 8005d28:	d30e      	bcc.n	8005d48 <__mdiff+0xec>
 8005d2a:	f10c 0203 	add.w	r2, ip, #3
 8005d2e:	1b52      	subs	r2, r2, r5
 8005d30:	f022 0203 	bic.w	r2, r2, #3
 8005d34:	3d03      	subs	r5, #3
 8005d36:	45ac      	cmp	ip, r5
 8005d38:	bf38      	it	cc
 8005d3a:	2200      	movcc	r2, #0
 8005d3c:	441a      	add	r2, r3
 8005d3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005d42:	b17b      	cbz	r3, 8005d64 <__mdiff+0x108>
 8005d44:	6107      	str	r7, [r0, #16]
 8005d46:	e7a3      	b.n	8005c90 <__mdiff+0x34>
 8005d48:	f856 8b04 	ldr.w	r8, [r6], #4
 8005d4c:	fa11 f288 	uxtah	r2, r1, r8
 8005d50:	1414      	asrs	r4, r2, #16
 8005d52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d56:	b292      	uxth	r2, r2
 8005d58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005d5c:	f84e 2b04 	str.w	r2, [lr], #4
 8005d60:	1421      	asrs	r1, r4, #16
 8005d62:	e7e0      	b.n	8005d26 <__mdiff+0xca>
 8005d64:	3f01      	subs	r7, #1
 8005d66:	e7ea      	b.n	8005d3e <__mdiff+0xe2>
 8005d68:	08006df3 	.word	0x08006df3
 8005d6c:	08006e04 	.word	0x08006e04

08005d70 <__d2b>:
 8005d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d74:	4689      	mov	r9, r1
 8005d76:	2101      	movs	r1, #1
 8005d78:	ec57 6b10 	vmov	r6, r7, d0
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	f7ff fccf 	bl	8005720 <_Balloc>
 8005d82:	4604      	mov	r4, r0
 8005d84:	b930      	cbnz	r0, 8005d94 <__d2b+0x24>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b25      	ldr	r3, [pc, #148]	; (8005e20 <__d2b+0xb0>)
 8005d8a:	4826      	ldr	r0, [pc, #152]	; (8005e24 <__d2b+0xb4>)
 8005d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8005d90:	f000 f9bc 	bl	800610c <__assert_func>
 8005d94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d9c:	bb35      	cbnz	r5, 8005dec <__d2b+0x7c>
 8005d9e:	2e00      	cmp	r6, #0
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	d028      	beq.n	8005df6 <__d2b+0x86>
 8005da4:	4668      	mov	r0, sp
 8005da6:	9600      	str	r6, [sp, #0]
 8005da8:	f7ff fd82 	bl	80058b0 <__lo0bits>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	b300      	cbz	r0, 8005df2 <__d2b+0x82>
 8005db0:	9a01      	ldr	r2, [sp, #4]
 8005db2:	f1c0 0320 	rsb	r3, r0, #32
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	40c2      	lsrs	r2, r0
 8005dbe:	6163      	str	r3, [r4, #20]
 8005dc0:	9201      	str	r2, [sp, #4]
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	61a3      	str	r3, [r4, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf14      	ite	ne
 8005dca:	2202      	movne	r2, #2
 8005dcc:	2201      	moveq	r2, #1
 8005dce:	6122      	str	r2, [r4, #16]
 8005dd0:	b1d5      	cbz	r5, 8005e08 <__d2b+0x98>
 8005dd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005dd6:	4405      	add	r5, r0
 8005dd8:	f8c9 5000 	str.w	r5, [r9]
 8005ddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005de0:	f8c8 0000 	str.w	r0, [r8]
 8005de4:	4620      	mov	r0, r4
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df0:	e7d5      	b.n	8005d9e <__d2b+0x2e>
 8005df2:	6161      	str	r1, [r4, #20]
 8005df4:	e7e5      	b.n	8005dc2 <__d2b+0x52>
 8005df6:	a801      	add	r0, sp, #4
 8005df8:	f7ff fd5a 	bl	80058b0 <__lo0bits>
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	6163      	str	r3, [r4, #20]
 8005e00:	2201      	movs	r2, #1
 8005e02:	6122      	str	r2, [r4, #16]
 8005e04:	3020      	adds	r0, #32
 8005e06:	e7e3      	b.n	8005dd0 <__d2b+0x60>
 8005e08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e10:	f8c9 0000 	str.w	r0, [r9]
 8005e14:	6918      	ldr	r0, [r3, #16]
 8005e16:	f7ff fd2b 	bl	8005870 <__hi0bits>
 8005e1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e1e:	e7df      	b.n	8005de0 <__d2b+0x70>
 8005e20:	08006df3 	.word	0x08006df3
 8005e24:	08006e04 	.word	0x08006e04

08005e28 <_calloc_r>:
 8005e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e2a:	fba1 2402 	umull	r2, r4, r1, r2
 8005e2e:	b94c      	cbnz	r4, 8005e44 <_calloc_r+0x1c>
 8005e30:	4611      	mov	r1, r2
 8005e32:	9201      	str	r2, [sp, #4]
 8005e34:	f7fe f8a4 	bl	8003f80 <_malloc_r>
 8005e38:	9a01      	ldr	r2, [sp, #4]
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	b930      	cbnz	r0, 8005e4c <_calloc_r+0x24>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	b003      	add	sp, #12
 8005e42:	bd30      	pop	{r4, r5, pc}
 8005e44:	220c      	movs	r2, #12
 8005e46:	6002      	str	r2, [r0, #0]
 8005e48:	2500      	movs	r5, #0
 8005e4a:	e7f8      	b.n	8005e3e <_calloc_r+0x16>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	f7fe f823 	bl	8003e98 <memset>
 8005e52:	e7f4      	b.n	8005e3e <_calloc_r+0x16>

08005e54 <__ssputs_r>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	688e      	ldr	r6, [r1, #8]
 8005e5a:	429e      	cmp	r6, r3
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	4690      	mov	r8, r2
 8005e62:	461f      	mov	r7, r3
 8005e64:	d838      	bhi.n	8005ed8 <__ssputs_r+0x84>
 8005e66:	898a      	ldrh	r2, [r1, #12]
 8005e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e6c:	d032      	beq.n	8005ed4 <__ssputs_r+0x80>
 8005e6e:	6825      	ldr	r5, [r4, #0]
 8005e70:	6909      	ldr	r1, [r1, #16]
 8005e72:	eba5 0901 	sub.w	r9, r5, r1
 8005e76:	6965      	ldr	r5, [r4, #20]
 8005e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e80:	3301      	adds	r3, #1
 8005e82:	444b      	add	r3, r9
 8005e84:	106d      	asrs	r5, r5, #1
 8005e86:	429d      	cmp	r5, r3
 8005e88:	bf38      	it	cc
 8005e8a:	461d      	movcc	r5, r3
 8005e8c:	0553      	lsls	r3, r2, #21
 8005e8e:	d531      	bpl.n	8005ef4 <__ssputs_r+0xa0>
 8005e90:	4629      	mov	r1, r5
 8005e92:	f7fe f875 	bl	8003f80 <_malloc_r>
 8005e96:	4606      	mov	r6, r0
 8005e98:	b950      	cbnz	r0, 8005eb0 <__ssputs_r+0x5c>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	f8ca 3000 	str.w	r3, [sl]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	6921      	ldr	r1, [r4, #16]
 8005eb2:	464a      	mov	r2, r9
 8005eb4:	f7ff fc1a 	bl	80056ec <memcpy>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	6126      	str	r6, [r4, #16]
 8005ec6:	6165      	str	r5, [r4, #20]
 8005ec8:	444e      	add	r6, r9
 8005eca:	eba5 0509 	sub.w	r5, r5, r9
 8005ece:	6026      	str	r6, [r4, #0]
 8005ed0:	60a5      	str	r5, [r4, #8]
 8005ed2:	463e      	mov	r6, r7
 8005ed4:	42be      	cmp	r6, r7
 8005ed6:	d900      	bls.n	8005eda <__ssputs_r+0x86>
 8005ed8:	463e      	mov	r6, r7
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	4632      	mov	r2, r6
 8005ede:	4641      	mov	r1, r8
 8005ee0:	f000 f959 	bl	8006196 <memmove>
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	1b9b      	subs	r3, r3, r6
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	4433      	add	r3, r6
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7db      	b.n	8005eac <__ssputs_r+0x58>
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	f000 f968 	bl	80061ca <_realloc_r>
 8005efa:	4606      	mov	r6, r0
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1e1      	bne.n	8005ec4 <__ssputs_r+0x70>
 8005f00:	6921      	ldr	r1, [r4, #16]
 8005f02:	4650      	mov	r0, sl
 8005f04:	f7fd ffd0 	bl	8003ea8 <_free_r>
 8005f08:	e7c7      	b.n	8005e9a <__ssputs_r+0x46>
	...

08005f0c <_svfiprintf_r>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	4698      	mov	r8, r3
 8005f12:	898b      	ldrh	r3, [r1, #12]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	b09d      	sub	sp, #116	; 0x74
 8005f18:	4607      	mov	r7, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	d50e      	bpl.n	8005f3e <_svfiprintf_r+0x32>
 8005f20:	690b      	ldr	r3, [r1, #16]
 8005f22:	b963      	cbnz	r3, 8005f3e <_svfiprintf_r+0x32>
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	f7fe f82b 	bl	8003f80 <_malloc_r>
 8005f2a:	6028      	str	r0, [r5, #0]
 8005f2c:	6128      	str	r0, [r5, #16]
 8005f2e:	b920      	cbnz	r0, 8005f3a <_svfiprintf_r+0x2e>
 8005f30:	230c      	movs	r3, #12
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e0d1      	b.n	80060de <_svfiprintf_r+0x1d2>
 8005f3a:	2340      	movs	r3, #64	; 0x40
 8005f3c:	616b      	str	r3, [r5, #20]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9309      	str	r3, [sp, #36]	; 0x24
 8005f42:	2320      	movs	r3, #32
 8005f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f4c:	2330      	movs	r3, #48	; 0x30
 8005f4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060f8 <_svfiprintf_r+0x1ec>
 8005f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f56:	f04f 0901 	mov.w	r9, #1
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	469a      	mov	sl, r3
 8005f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f62:	b10a      	cbz	r2, 8005f68 <_svfiprintf_r+0x5c>
 8005f64:	2a25      	cmp	r2, #37	; 0x25
 8005f66:	d1f9      	bne.n	8005f5c <_svfiprintf_r+0x50>
 8005f68:	ebba 0b04 	subs.w	fp, sl, r4
 8005f6c:	d00b      	beq.n	8005f86 <_svfiprintf_r+0x7a>
 8005f6e:	465b      	mov	r3, fp
 8005f70:	4622      	mov	r2, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	4638      	mov	r0, r7
 8005f76:	f7ff ff6d 	bl	8005e54 <__ssputs_r>
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f000 80aa 	beq.w	80060d4 <_svfiprintf_r+0x1c8>
 8005f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f82:	445a      	add	r2, fp
 8005f84:	9209      	str	r2, [sp, #36]	; 0x24
 8005f86:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a2 	beq.w	80060d4 <_svfiprintf_r+0x1c8>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f04f 32ff 	mov.w	r2, #4294967295
 8005f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f9a:	f10a 0a01 	add.w	sl, sl, #1
 8005f9e:	9304      	str	r3, [sp, #16]
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8005fa8:	4654      	mov	r4, sl
 8005faa:	2205      	movs	r2, #5
 8005fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb0:	4851      	ldr	r0, [pc, #324]	; (80060f8 <_svfiprintf_r+0x1ec>)
 8005fb2:	f7fa f92d 	bl	8000210 <memchr>
 8005fb6:	9a04      	ldr	r2, [sp, #16]
 8005fb8:	b9d8      	cbnz	r0, 8005ff2 <_svfiprintf_r+0xe6>
 8005fba:	06d0      	lsls	r0, r2, #27
 8005fbc:	bf44      	itt	mi
 8005fbe:	2320      	movmi	r3, #32
 8005fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fc4:	0711      	lsls	r1, r2, #28
 8005fc6:	bf44      	itt	mi
 8005fc8:	232b      	movmi	r3, #43	; 0x2b
 8005fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fce:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd4:	d015      	beq.n	8006002 <_svfiprintf_r+0xf6>
 8005fd6:	9a07      	ldr	r2, [sp, #28]
 8005fd8:	4654      	mov	r4, sl
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f04f 0c0a 	mov.w	ip, #10
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe6:	3b30      	subs	r3, #48	; 0x30
 8005fe8:	2b09      	cmp	r3, #9
 8005fea:	d94e      	bls.n	800608a <_svfiprintf_r+0x17e>
 8005fec:	b1b0      	cbz	r0, 800601c <_svfiprintf_r+0x110>
 8005fee:	9207      	str	r2, [sp, #28]
 8005ff0:	e014      	b.n	800601c <_svfiprintf_r+0x110>
 8005ff2:	eba0 0308 	sub.w	r3, r0, r8
 8005ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	46a2      	mov	sl, r4
 8006000:	e7d2      	b.n	8005fa8 <_svfiprintf_r+0x9c>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	1d19      	adds	r1, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9103      	str	r1, [sp, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfbb      	ittet	lt
 800600e:	425b      	neglt	r3, r3
 8006010:	f042 0202 	orrlt.w	r2, r2, #2
 8006014:	9307      	strge	r3, [sp, #28]
 8006016:	9307      	strlt	r3, [sp, #28]
 8006018:	bfb8      	it	lt
 800601a:	9204      	strlt	r2, [sp, #16]
 800601c:	7823      	ldrb	r3, [r4, #0]
 800601e:	2b2e      	cmp	r3, #46	; 0x2e
 8006020:	d10c      	bne.n	800603c <_svfiprintf_r+0x130>
 8006022:	7863      	ldrb	r3, [r4, #1]
 8006024:	2b2a      	cmp	r3, #42	; 0x2a
 8006026:	d135      	bne.n	8006094 <_svfiprintf_r+0x188>
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	9203      	str	r2, [sp, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfb8      	it	lt
 8006034:	f04f 33ff 	movlt.w	r3, #4294967295
 8006038:	3402      	adds	r4, #2
 800603a:	9305      	str	r3, [sp, #20]
 800603c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006108 <_svfiprintf_r+0x1fc>
 8006040:	7821      	ldrb	r1, [r4, #0]
 8006042:	2203      	movs	r2, #3
 8006044:	4650      	mov	r0, sl
 8006046:	f7fa f8e3 	bl	8000210 <memchr>
 800604a:	b140      	cbz	r0, 800605e <_svfiprintf_r+0x152>
 800604c:	2340      	movs	r3, #64	; 0x40
 800604e:	eba0 000a 	sub.w	r0, r0, sl
 8006052:	fa03 f000 	lsl.w	r0, r3, r0
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	4303      	orrs	r3, r0
 800605a:	3401      	adds	r4, #1
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006062:	4826      	ldr	r0, [pc, #152]	; (80060fc <_svfiprintf_r+0x1f0>)
 8006064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006068:	2206      	movs	r2, #6
 800606a:	f7fa f8d1 	bl	8000210 <memchr>
 800606e:	2800      	cmp	r0, #0
 8006070:	d038      	beq.n	80060e4 <_svfiprintf_r+0x1d8>
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <_svfiprintf_r+0x1f4>)
 8006074:	bb1b      	cbnz	r3, 80060be <_svfiprintf_r+0x1b2>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	3307      	adds	r3, #7
 800607a:	f023 0307 	bic.w	r3, r3, #7
 800607e:	3308      	adds	r3, #8
 8006080:	9303      	str	r3, [sp, #12]
 8006082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006084:	4433      	add	r3, r6
 8006086:	9309      	str	r3, [sp, #36]	; 0x24
 8006088:	e767      	b.n	8005f5a <_svfiprintf_r+0x4e>
 800608a:	fb0c 3202 	mla	r2, ip, r2, r3
 800608e:	460c      	mov	r4, r1
 8006090:	2001      	movs	r0, #1
 8006092:	e7a5      	b.n	8005fe0 <_svfiprintf_r+0xd4>
 8006094:	2300      	movs	r3, #0
 8006096:	3401      	adds	r4, #1
 8006098:	9305      	str	r3, [sp, #20]
 800609a:	4619      	mov	r1, r3
 800609c:	f04f 0c0a 	mov.w	ip, #10
 80060a0:	4620      	mov	r0, r4
 80060a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060a6:	3a30      	subs	r2, #48	; 0x30
 80060a8:	2a09      	cmp	r2, #9
 80060aa:	d903      	bls.n	80060b4 <_svfiprintf_r+0x1a8>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0c5      	beq.n	800603c <_svfiprintf_r+0x130>
 80060b0:	9105      	str	r1, [sp, #20]
 80060b2:	e7c3      	b.n	800603c <_svfiprintf_r+0x130>
 80060b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060b8:	4604      	mov	r4, r0
 80060ba:	2301      	movs	r3, #1
 80060bc:	e7f0      	b.n	80060a0 <_svfiprintf_r+0x194>
 80060be:	ab03      	add	r3, sp, #12
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	462a      	mov	r2, r5
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <_svfiprintf_r+0x1f8>)
 80060c6:	a904      	add	r1, sp, #16
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7fe f86d 	bl	80041a8 <_printf_float>
 80060ce:	1c42      	adds	r2, r0, #1
 80060d0:	4606      	mov	r6, r0
 80060d2:	d1d6      	bne.n	8006082 <_svfiprintf_r+0x176>
 80060d4:	89ab      	ldrh	r3, [r5, #12]
 80060d6:	065b      	lsls	r3, r3, #25
 80060d8:	f53f af2c 	bmi.w	8005f34 <_svfiprintf_r+0x28>
 80060dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060de:	b01d      	add	sp, #116	; 0x74
 80060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	462a      	mov	r2, r5
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <_svfiprintf_r+0x1f8>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7fe fafe 	bl	80046f0 <_printf_i>
 80060f4:	e7eb      	b.n	80060ce <_svfiprintf_r+0x1c2>
 80060f6:	bf00      	nop
 80060f8:	08006f5c 	.word	0x08006f5c
 80060fc:	08006f66 	.word	0x08006f66
 8006100:	080041a9 	.word	0x080041a9
 8006104:	08005e55 	.word	0x08005e55
 8006108:	08006f62 	.word	0x08006f62

0800610c <__assert_func>:
 800610c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800610e:	4614      	mov	r4, r2
 8006110:	461a      	mov	r2, r3
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <__assert_func+0x2c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4605      	mov	r5, r0
 8006118:	68d8      	ldr	r0, [r3, #12]
 800611a:	b14c      	cbz	r4, 8006130 <__assert_func+0x24>
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <__assert_func+0x30>)
 800611e:	9100      	str	r1, [sp, #0]
 8006120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006124:	4906      	ldr	r1, [pc, #24]	; (8006140 <__assert_func+0x34>)
 8006126:	462b      	mov	r3, r5
 8006128:	f000 f80e 	bl	8006148 <fiprintf>
 800612c:	f000 faa4 	bl	8006678 <abort>
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <__assert_func+0x38>)
 8006132:	461c      	mov	r4, r3
 8006134:	e7f3      	b.n	800611e <__assert_func+0x12>
 8006136:	bf00      	nop
 8006138:	2000000c 	.word	0x2000000c
 800613c:	08006f6d 	.word	0x08006f6d
 8006140:	08006f7a 	.word	0x08006f7a
 8006144:	08006fa8 	.word	0x08006fa8

08006148 <fiprintf>:
 8006148:	b40e      	push	{r1, r2, r3}
 800614a:	b503      	push	{r0, r1, lr}
 800614c:	4601      	mov	r1, r0
 800614e:	ab03      	add	r3, sp, #12
 8006150:	4805      	ldr	r0, [pc, #20]	; (8006168 <fiprintf+0x20>)
 8006152:	f853 2b04 	ldr.w	r2, [r3], #4
 8006156:	6800      	ldr	r0, [r0, #0]
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	f000 f88f 	bl	800627c <_vfiprintf_r>
 800615e:	b002      	add	sp, #8
 8006160:	f85d eb04 	ldr.w	lr, [sp], #4
 8006164:	b003      	add	sp, #12
 8006166:	4770      	bx	lr
 8006168:	2000000c 	.word	0x2000000c

0800616c <__retarget_lock_init_recursive>:
 800616c:	4770      	bx	lr

0800616e <__retarget_lock_acquire_recursive>:
 800616e:	4770      	bx	lr

08006170 <__retarget_lock_release_recursive>:
 8006170:	4770      	bx	lr

08006172 <__ascii_mbtowc>:
 8006172:	b082      	sub	sp, #8
 8006174:	b901      	cbnz	r1, 8006178 <__ascii_mbtowc+0x6>
 8006176:	a901      	add	r1, sp, #4
 8006178:	b142      	cbz	r2, 800618c <__ascii_mbtowc+0x1a>
 800617a:	b14b      	cbz	r3, 8006190 <__ascii_mbtowc+0x1e>
 800617c:	7813      	ldrb	r3, [r2, #0]
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	1e10      	subs	r0, r2, #0
 8006184:	bf18      	it	ne
 8006186:	2001      	movne	r0, #1
 8006188:	b002      	add	sp, #8
 800618a:	4770      	bx	lr
 800618c:	4610      	mov	r0, r2
 800618e:	e7fb      	b.n	8006188 <__ascii_mbtowc+0x16>
 8006190:	f06f 0001 	mvn.w	r0, #1
 8006194:	e7f8      	b.n	8006188 <__ascii_mbtowc+0x16>

08006196 <memmove>:
 8006196:	4288      	cmp	r0, r1
 8006198:	b510      	push	{r4, lr}
 800619a:	eb01 0402 	add.w	r4, r1, r2
 800619e:	d902      	bls.n	80061a6 <memmove+0x10>
 80061a0:	4284      	cmp	r4, r0
 80061a2:	4623      	mov	r3, r4
 80061a4:	d807      	bhi.n	80061b6 <memmove+0x20>
 80061a6:	1e43      	subs	r3, r0, #1
 80061a8:	42a1      	cmp	r1, r4
 80061aa:	d008      	beq.n	80061be <memmove+0x28>
 80061ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061b4:	e7f8      	b.n	80061a8 <memmove+0x12>
 80061b6:	4402      	add	r2, r0
 80061b8:	4601      	mov	r1, r0
 80061ba:	428a      	cmp	r2, r1
 80061bc:	d100      	bne.n	80061c0 <memmove+0x2a>
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061c8:	e7f7      	b.n	80061ba <memmove+0x24>

080061ca <_realloc_r>:
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	4680      	mov	r8, r0
 80061d0:	4614      	mov	r4, r2
 80061d2:	460e      	mov	r6, r1
 80061d4:	b921      	cbnz	r1, 80061e0 <_realloc_r+0x16>
 80061d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	4611      	mov	r1, r2
 80061dc:	f7fd bed0 	b.w	8003f80 <_malloc_r>
 80061e0:	b92a      	cbnz	r2, 80061ee <_realloc_r+0x24>
 80061e2:	f7fd fe61 	bl	8003ea8 <_free_r>
 80061e6:	4625      	mov	r5, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ee:	f000 fc67 	bl	8006ac0 <_malloc_usable_size_r>
 80061f2:	4284      	cmp	r4, r0
 80061f4:	4607      	mov	r7, r0
 80061f6:	d802      	bhi.n	80061fe <_realloc_r+0x34>
 80061f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061fc:	d812      	bhi.n	8006224 <_realloc_r+0x5a>
 80061fe:	4621      	mov	r1, r4
 8006200:	4640      	mov	r0, r8
 8006202:	f7fd febd 	bl	8003f80 <_malloc_r>
 8006206:	4605      	mov	r5, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	d0ed      	beq.n	80061e8 <_realloc_r+0x1e>
 800620c:	42bc      	cmp	r4, r7
 800620e:	4622      	mov	r2, r4
 8006210:	4631      	mov	r1, r6
 8006212:	bf28      	it	cs
 8006214:	463a      	movcs	r2, r7
 8006216:	f7ff fa69 	bl	80056ec <memcpy>
 800621a:	4631      	mov	r1, r6
 800621c:	4640      	mov	r0, r8
 800621e:	f7fd fe43 	bl	8003ea8 <_free_r>
 8006222:	e7e1      	b.n	80061e8 <_realloc_r+0x1e>
 8006224:	4635      	mov	r5, r6
 8006226:	e7df      	b.n	80061e8 <_realloc_r+0x1e>

08006228 <__sfputc_r>:
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	3b01      	subs	r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	b410      	push	{r4}
 8006230:	6093      	str	r3, [r2, #8]
 8006232:	da08      	bge.n	8006246 <__sfputc_r+0x1e>
 8006234:	6994      	ldr	r4, [r2, #24]
 8006236:	42a3      	cmp	r3, r4
 8006238:	db01      	blt.n	800623e <__sfputc_r+0x16>
 800623a:	290a      	cmp	r1, #10
 800623c:	d103      	bne.n	8006246 <__sfputc_r+0x1e>
 800623e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006242:	f000 b94b 	b.w	80064dc <__swbuf_r>
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	1c58      	adds	r0, r3, #1
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	7019      	strb	r1, [r3, #0]
 800624e:	4608      	mov	r0, r1
 8006250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006254:	4770      	bx	lr

08006256 <__sfputs_r>:
 8006256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	4614      	mov	r4, r2
 800625e:	18d5      	adds	r5, r2, r3
 8006260:	42ac      	cmp	r4, r5
 8006262:	d101      	bne.n	8006268 <__sfputs_r+0x12>
 8006264:	2000      	movs	r0, #0
 8006266:	e007      	b.n	8006278 <__sfputs_r+0x22>
 8006268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626c:	463a      	mov	r2, r7
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff ffda 	bl	8006228 <__sfputc_r>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d1f3      	bne.n	8006260 <__sfputs_r+0xa>
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800627c <_vfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460d      	mov	r5, r1
 8006282:	b09d      	sub	sp, #116	; 0x74
 8006284:	4614      	mov	r4, r2
 8006286:	4698      	mov	r8, r3
 8006288:	4606      	mov	r6, r0
 800628a:	b118      	cbz	r0, 8006294 <_vfiprintf_r+0x18>
 800628c:	6983      	ldr	r3, [r0, #24]
 800628e:	b90b      	cbnz	r3, 8006294 <_vfiprintf_r+0x18>
 8006290:	f000 fb14 	bl	80068bc <__sinit>
 8006294:	4b89      	ldr	r3, [pc, #548]	; (80064bc <_vfiprintf_r+0x240>)
 8006296:	429d      	cmp	r5, r3
 8006298:	d11b      	bne.n	80062d2 <_vfiprintf_r+0x56>
 800629a:	6875      	ldr	r5, [r6, #4]
 800629c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_vfiprintf_r+0x32>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_vfiprintf_r+0x32>
 80062a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062aa:	f7ff ff60 	bl	800616e <__retarget_lock_acquire_recursive>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	071b      	lsls	r3, r3, #28
 80062b2:	d501      	bpl.n	80062b8 <_vfiprintf_r+0x3c>
 80062b4:	692b      	ldr	r3, [r5, #16]
 80062b6:	b9eb      	cbnz	r3, 80062f4 <_vfiprintf_r+0x78>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 f96e 	bl	800659c <__swsetup_r>
 80062c0:	b1c0      	cbz	r0, 80062f4 <_vfiprintf_r+0x78>
 80062c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062c4:	07dc      	lsls	r4, r3, #31
 80062c6:	d50e      	bpl.n	80062e6 <_vfiprintf_r+0x6a>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	b01d      	add	sp, #116	; 0x74
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	4b7b      	ldr	r3, [pc, #492]	; (80064c0 <_vfiprintf_r+0x244>)
 80062d4:	429d      	cmp	r5, r3
 80062d6:	d101      	bne.n	80062dc <_vfiprintf_r+0x60>
 80062d8:	68b5      	ldr	r5, [r6, #8]
 80062da:	e7df      	b.n	800629c <_vfiprintf_r+0x20>
 80062dc:	4b79      	ldr	r3, [pc, #484]	; (80064c4 <_vfiprintf_r+0x248>)
 80062de:	429d      	cmp	r5, r3
 80062e0:	bf08      	it	eq
 80062e2:	68f5      	ldreq	r5, [r6, #12]
 80062e4:	e7da      	b.n	800629c <_vfiprintf_r+0x20>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	0598      	lsls	r0, r3, #22
 80062ea:	d4ed      	bmi.n	80062c8 <_vfiprintf_r+0x4c>
 80062ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ee:	f7ff ff3f 	bl	8006170 <__retarget_lock_release_recursive>
 80062f2:	e7e9      	b.n	80062c8 <_vfiprintf_r+0x4c>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
 80062f8:	2320      	movs	r3, #32
 80062fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006302:	2330      	movs	r3, #48	; 0x30
 8006304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064c8 <_vfiprintf_r+0x24c>
 8006308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800630c:	f04f 0901 	mov.w	r9, #1
 8006310:	4623      	mov	r3, r4
 8006312:	469a      	mov	sl, r3
 8006314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006318:	b10a      	cbz	r2, 800631e <_vfiprintf_r+0xa2>
 800631a:	2a25      	cmp	r2, #37	; 0x25
 800631c:	d1f9      	bne.n	8006312 <_vfiprintf_r+0x96>
 800631e:	ebba 0b04 	subs.w	fp, sl, r4
 8006322:	d00b      	beq.n	800633c <_vfiprintf_r+0xc0>
 8006324:	465b      	mov	r3, fp
 8006326:	4622      	mov	r2, r4
 8006328:	4629      	mov	r1, r5
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ff93 	bl	8006256 <__sfputs_r>
 8006330:	3001      	adds	r0, #1
 8006332:	f000 80aa 	beq.w	800648a <_vfiprintf_r+0x20e>
 8006336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006338:	445a      	add	r2, fp
 800633a:	9209      	str	r2, [sp, #36]	; 0x24
 800633c:	f89a 3000 	ldrb.w	r3, [sl]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a2 	beq.w	800648a <_vfiprintf_r+0x20e>
 8006346:	2300      	movs	r3, #0
 8006348:	f04f 32ff 	mov.w	r2, #4294967295
 800634c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006350:	f10a 0a01 	add.w	sl, sl, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800635c:	931a      	str	r3, [sp, #104]	; 0x68
 800635e:	4654      	mov	r4, sl
 8006360:	2205      	movs	r2, #5
 8006362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006366:	4858      	ldr	r0, [pc, #352]	; (80064c8 <_vfiprintf_r+0x24c>)
 8006368:	f7f9 ff52 	bl	8000210 <memchr>
 800636c:	9a04      	ldr	r2, [sp, #16]
 800636e:	b9d8      	cbnz	r0, 80063a8 <_vfiprintf_r+0x12c>
 8006370:	06d1      	lsls	r1, r2, #27
 8006372:	bf44      	itt	mi
 8006374:	2320      	movmi	r3, #32
 8006376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800637a:	0713      	lsls	r3, r2, #28
 800637c:	bf44      	itt	mi
 800637e:	232b      	movmi	r3, #43	; 0x2b
 8006380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006384:	f89a 3000 	ldrb.w	r3, [sl]
 8006388:	2b2a      	cmp	r3, #42	; 0x2a
 800638a:	d015      	beq.n	80063b8 <_vfiprintf_r+0x13c>
 800638c:	9a07      	ldr	r2, [sp, #28]
 800638e:	4654      	mov	r4, sl
 8006390:	2000      	movs	r0, #0
 8006392:	f04f 0c0a 	mov.w	ip, #10
 8006396:	4621      	mov	r1, r4
 8006398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800639c:	3b30      	subs	r3, #48	; 0x30
 800639e:	2b09      	cmp	r3, #9
 80063a0:	d94e      	bls.n	8006440 <_vfiprintf_r+0x1c4>
 80063a2:	b1b0      	cbz	r0, 80063d2 <_vfiprintf_r+0x156>
 80063a4:	9207      	str	r2, [sp, #28]
 80063a6:	e014      	b.n	80063d2 <_vfiprintf_r+0x156>
 80063a8:	eba0 0308 	sub.w	r3, r0, r8
 80063ac:	fa09 f303 	lsl.w	r3, r9, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	46a2      	mov	sl, r4
 80063b6:	e7d2      	b.n	800635e <_vfiprintf_r+0xe2>
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	1d19      	adds	r1, r3, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	9103      	str	r1, [sp, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bfbb      	ittet	lt
 80063c4:	425b      	neglt	r3, r3
 80063c6:	f042 0202 	orrlt.w	r2, r2, #2
 80063ca:	9307      	strge	r3, [sp, #28]
 80063cc:	9307      	strlt	r3, [sp, #28]
 80063ce:	bfb8      	it	lt
 80063d0:	9204      	strlt	r2, [sp, #16]
 80063d2:	7823      	ldrb	r3, [r4, #0]
 80063d4:	2b2e      	cmp	r3, #46	; 0x2e
 80063d6:	d10c      	bne.n	80063f2 <_vfiprintf_r+0x176>
 80063d8:	7863      	ldrb	r3, [r4, #1]
 80063da:	2b2a      	cmp	r3, #42	; 0x2a
 80063dc:	d135      	bne.n	800644a <_vfiprintf_r+0x1ce>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	9203      	str	r2, [sp, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfb8      	it	lt
 80063ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ee:	3402      	adds	r4, #2
 80063f0:	9305      	str	r3, [sp, #20]
 80063f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064d8 <_vfiprintf_r+0x25c>
 80063f6:	7821      	ldrb	r1, [r4, #0]
 80063f8:	2203      	movs	r2, #3
 80063fa:	4650      	mov	r0, sl
 80063fc:	f7f9 ff08 	bl	8000210 <memchr>
 8006400:	b140      	cbz	r0, 8006414 <_vfiprintf_r+0x198>
 8006402:	2340      	movs	r3, #64	; 0x40
 8006404:	eba0 000a 	sub.w	r0, r0, sl
 8006408:	fa03 f000 	lsl.w	r0, r3, r0
 800640c:	9b04      	ldr	r3, [sp, #16]
 800640e:	4303      	orrs	r3, r0
 8006410:	3401      	adds	r4, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006418:	482c      	ldr	r0, [pc, #176]	; (80064cc <_vfiprintf_r+0x250>)
 800641a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641e:	2206      	movs	r2, #6
 8006420:	f7f9 fef6 	bl	8000210 <memchr>
 8006424:	2800      	cmp	r0, #0
 8006426:	d03f      	beq.n	80064a8 <_vfiprintf_r+0x22c>
 8006428:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <_vfiprintf_r+0x254>)
 800642a:	bb1b      	cbnz	r3, 8006474 <_vfiprintf_r+0x1f8>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	3307      	adds	r3, #7
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	3308      	adds	r3, #8
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643a:	443b      	add	r3, r7
 800643c:	9309      	str	r3, [sp, #36]	; 0x24
 800643e:	e767      	b.n	8006310 <_vfiprintf_r+0x94>
 8006440:	fb0c 3202 	mla	r2, ip, r2, r3
 8006444:	460c      	mov	r4, r1
 8006446:	2001      	movs	r0, #1
 8006448:	e7a5      	b.n	8006396 <_vfiprintf_r+0x11a>
 800644a:	2300      	movs	r3, #0
 800644c:	3401      	adds	r4, #1
 800644e:	9305      	str	r3, [sp, #20]
 8006450:	4619      	mov	r1, r3
 8006452:	f04f 0c0a 	mov.w	ip, #10
 8006456:	4620      	mov	r0, r4
 8006458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645c:	3a30      	subs	r2, #48	; 0x30
 800645e:	2a09      	cmp	r2, #9
 8006460:	d903      	bls.n	800646a <_vfiprintf_r+0x1ee>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0c5      	beq.n	80063f2 <_vfiprintf_r+0x176>
 8006466:	9105      	str	r1, [sp, #20]
 8006468:	e7c3      	b.n	80063f2 <_vfiprintf_r+0x176>
 800646a:	fb0c 2101 	mla	r1, ip, r1, r2
 800646e:	4604      	mov	r4, r0
 8006470:	2301      	movs	r3, #1
 8006472:	e7f0      	b.n	8006456 <_vfiprintf_r+0x1da>
 8006474:	ab03      	add	r3, sp, #12
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	462a      	mov	r2, r5
 800647a:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <_vfiprintf_r+0x258>)
 800647c:	a904      	add	r1, sp, #16
 800647e:	4630      	mov	r0, r6
 8006480:	f7fd fe92 	bl	80041a8 <_printf_float>
 8006484:	4607      	mov	r7, r0
 8006486:	1c78      	adds	r0, r7, #1
 8006488:	d1d6      	bne.n	8006438 <_vfiprintf_r+0x1bc>
 800648a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800648c:	07d9      	lsls	r1, r3, #31
 800648e:	d405      	bmi.n	800649c <_vfiprintf_r+0x220>
 8006490:	89ab      	ldrh	r3, [r5, #12]
 8006492:	059a      	lsls	r2, r3, #22
 8006494:	d402      	bmi.n	800649c <_vfiprintf_r+0x220>
 8006496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006498:	f7ff fe6a 	bl	8006170 <__retarget_lock_release_recursive>
 800649c:	89ab      	ldrh	r3, [r5, #12]
 800649e:	065b      	lsls	r3, r3, #25
 80064a0:	f53f af12 	bmi.w	80062c8 <_vfiprintf_r+0x4c>
 80064a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a6:	e711      	b.n	80062cc <_vfiprintf_r+0x50>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <_vfiprintf_r+0x258>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7fe f91c 	bl	80046f0 <_printf_i>
 80064b8:	e7e4      	b.n	8006484 <_vfiprintf_r+0x208>
 80064ba:	bf00      	nop
 80064bc:	080070d4 	.word	0x080070d4
 80064c0:	080070f4 	.word	0x080070f4
 80064c4:	080070b4 	.word	0x080070b4
 80064c8:	08006f5c 	.word	0x08006f5c
 80064cc:	08006f66 	.word	0x08006f66
 80064d0:	080041a9 	.word	0x080041a9
 80064d4:	08006257 	.word	0x08006257
 80064d8:	08006f62 	.word	0x08006f62

080064dc <__swbuf_r>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	460e      	mov	r6, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	4605      	mov	r5, r0
 80064e4:	b118      	cbz	r0, 80064ee <__swbuf_r+0x12>
 80064e6:	6983      	ldr	r3, [r0, #24]
 80064e8:	b90b      	cbnz	r3, 80064ee <__swbuf_r+0x12>
 80064ea:	f000 f9e7 	bl	80068bc <__sinit>
 80064ee:	4b21      	ldr	r3, [pc, #132]	; (8006574 <__swbuf_r+0x98>)
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d12b      	bne.n	800654c <__swbuf_r+0x70>
 80064f4:	686c      	ldr	r4, [r5, #4]
 80064f6:	69a3      	ldr	r3, [r4, #24]
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	071a      	lsls	r2, r3, #28
 80064fe:	d52f      	bpl.n	8006560 <__swbuf_r+0x84>
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	b36b      	cbz	r3, 8006560 <__swbuf_r+0x84>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	1ac0      	subs	r0, r0, r3
 800650a:	6963      	ldr	r3, [r4, #20]
 800650c:	b2f6      	uxtb	r6, r6
 800650e:	4283      	cmp	r3, r0
 8006510:	4637      	mov	r7, r6
 8006512:	dc04      	bgt.n	800651e <__swbuf_r+0x42>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f93c 	bl	8006794 <_fflush_r>
 800651c:	bb30      	cbnz	r0, 800656c <__swbuf_r+0x90>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	3b01      	subs	r3, #1
 8006522:	60a3      	str	r3, [r4, #8]
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	701e      	strb	r6, [r3, #0]
 800652c:	6963      	ldr	r3, [r4, #20]
 800652e:	3001      	adds	r0, #1
 8006530:	4283      	cmp	r3, r0
 8006532:	d004      	beq.n	800653e <__swbuf_r+0x62>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	07db      	lsls	r3, r3, #31
 8006538:	d506      	bpl.n	8006548 <__swbuf_r+0x6c>
 800653a:	2e0a      	cmp	r6, #10
 800653c:	d104      	bne.n	8006548 <__swbuf_r+0x6c>
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f927 	bl	8006794 <_fflush_r>
 8006546:	b988      	cbnz	r0, 800656c <__swbuf_r+0x90>
 8006548:	4638      	mov	r0, r7
 800654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <__swbuf_r+0x9c>)
 800654e:	429c      	cmp	r4, r3
 8006550:	d101      	bne.n	8006556 <__swbuf_r+0x7a>
 8006552:	68ac      	ldr	r4, [r5, #8]
 8006554:	e7cf      	b.n	80064f6 <__swbuf_r+0x1a>
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <__swbuf_r+0xa0>)
 8006558:	429c      	cmp	r4, r3
 800655a:	bf08      	it	eq
 800655c:	68ec      	ldreq	r4, [r5, #12]
 800655e:	e7ca      	b.n	80064f6 <__swbuf_r+0x1a>
 8006560:	4621      	mov	r1, r4
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f81a 	bl	800659c <__swsetup_r>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0cb      	beq.n	8006504 <__swbuf_r+0x28>
 800656c:	f04f 37ff 	mov.w	r7, #4294967295
 8006570:	e7ea      	b.n	8006548 <__swbuf_r+0x6c>
 8006572:	bf00      	nop
 8006574:	080070d4 	.word	0x080070d4
 8006578:	080070f4 	.word	0x080070f4
 800657c:	080070b4 	.word	0x080070b4

08006580 <__ascii_wctomb>:
 8006580:	b149      	cbz	r1, 8006596 <__ascii_wctomb+0x16>
 8006582:	2aff      	cmp	r2, #255	; 0xff
 8006584:	bf85      	ittet	hi
 8006586:	238a      	movhi	r3, #138	; 0x8a
 8006588:	6003      	strhi	r3, [r0, #0]
 800658a:	700a      	strbls	r2, [r1, #0]
 800658c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006590:	bf98      	it	ls
 8006592:	2001      	movls	r0, #1
 8006594:	4770      	bx	lr
 8006596:	4608      	mov	r0, r1
 8006598:	4770      	bx	lr
	...

0800659c <__swsetup_r>:
 800659c:	4b32      	ldr	r3, [pc, #200]	; (8006668 <__swsetup_r+0xcc>)
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	681d      	ldr	r5, [r3, #0]
 80065a2:	4606      	mov	r6, r0
 80065a4:	460c      	mov	r4, r1
 80065a6:	b125      	cbz	r5, 80065b2 <__swsetup_r+0x16>
 80065a8:	69ab      	ldr	r3, [r5, #24]
 80065aa:	b913      	cbnz	r3, 80065b2 <__swsetup_r+0x16>
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f985 	bl	80068bc <__sinit>
 80065b2:	4b2e      	ldr	r3, [pc, #184]	; (800666c <__swsetup_r+0xd0>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	d10f      	bne.n	80065d8 <__swsetup_r+0x3c>
 80065b8:	686c      	ldr	r4, [r5, #4]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065c0:	0719      	lsls	r1, r3, #28
 80065c2:	d42c      	bmi.n	800661e <__swsetup_r+0x82>
 80065c4:	06dd      	lsls	r5, r3, #27
 80065c6:	d411      	bmi.n	80065ec <__swsetup_r+0x50>
 80065c8:	2309      	movs	r3, #9
 80065ca:	6033      	str	r3, [r6, #0]
 80065cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065d0:	81a3      	strh	r3, [r4, #12]
 80065d2:	f04f 30ff 	mov.w	r0, #4294967295
 80065d6:	e03e      	b.n	8006656 <__swsetup_r+0xba>
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <__swsetup_r+0xd4>)
 80065da:	429c      	cmp	r4, r3
 80065dc:	d101      	bne.n	80065e2 <__swsetup_r+0x46>
 80065de:	68ac      	ldr	r4, [r5, #8]
 80065e0:	e7eb      	b.n	80065ba <__swsetup_r+0x1e>
 80065e2:	4b24      	ldr	r3, [pc, #144]	; (8006674 <__swsetup_r+0xd8>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	bf08      	it	eq
 80065e8:	68ec      	ldreq	r4, [r5, #12]
 80065ea:	e7e6      	b.n	80065ba <__swsetup_r+0x1e>
 80065ec:	0758      	lsls	r0, r3, #29
 80065ee:	d512      	bpl.n	8006616 <__swsetup_r+0x7a>
 80065f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065f2:	b141      	cbz	r1, 8006606 <__swsetup_r+0x6a>
 80065f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065f8:	4299      	cmp	r1, r3
 80065fa:	d002      	beq.n	8006602 <__swsetup_r+0x66>
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7fd fc53 	bl	8003ea8 <_free_r>
 8006602:	2300      	movs	r3, #0
 8006604:	6363      	str	r3, [r4, #52]	; 0x34
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	2300      	movs	r3, #0
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	f043 0308 	orr.w	r3, r3, #8
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	b94b      	cbnz	r3, 8006636 <__swsetup_r+0x9a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d003      	beq.n	8006636 <__swsetup_r+0x9a>
 800662e:	4621      	mov	r1, r4
 8006630:	4630      	mov	r0, r6
 8006632:	f000 fa05 	bl	8006a40 <__smakebuf_r>
 8006636:	89a0      	ldrh	r0, [r4, #12]
 8006638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800663c:	f010 0301 	ands.w	r3, r0, #1
 8006640:	d00a      	beq.n	8006658 <__swsetup_r+0xbc>
 8006642:	2300      	movs	r3, #0
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	6963      	ldr	r3, [r4, #20]
 8006648:	425b      	negs	r3, r3
 800664a:	61a3      	str	r3, [r4, #24]
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	b943      	cbnz	r3, 8006662 <__swsetup_r+0xc6>
 8006650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006654:	d1ba      	bne.n	80065cc <__swsetup_r+0x30>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	0781      	lsls	r1, r0, #30
 800665a:	bf58      	it	pl
 800665c:	6963      	ldrpl	r3, [r4, #20]
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	e7f4      	b.n	800664c <__swsetup_r+0xb0>
 8006662:	2000      	movs	r0, #0
 8006664:	e7f7      	b.n	8006656 <__swsetup_r+0xba>
 8006666:	bf00      	nop
 8006668:	2000000c 	.word	0x2000000c
 800666c:	080070d4 	.word	0x080070d4
 8006670:	080070f4 	.word	0x080070f4
 8006674:	080070b4 	.word	0x080070b4

08006678 <abort>:
 8006678:	b508      	push	{r3, lr}
 800667a:	2006      	movs	r0, #6
 800667c:	f000 fa50 	bl	8006b20 <raise>
 8006680:	2001      	movs	r0, #1
 8006682:	f7fb f815 	bl	80016b0 <_exit>
	...

08006688 <__sflush_r>:
 8006688:	898a      	ldrh	r2, [r1, #12]
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	0710      	lsls	r0, r2, #28
 8006692:	460c      	mov	r4, r1
 8006694:	d458      	bmi.n	8006748 <__sflush_r+0xc0>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc05      	bgt.n	80066a8 <__sflush_r+0x20>
 800669c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc02      	bgt.n	80066a8 <__sflush_r+0x20>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0f9      	beq.n	80066a2 <__sflush_r+0x1a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b4:	682f      	ldr	r7, [r5, #0]
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	d032      	beq.n	8006720 <__sflush_r+0x98>
 80066ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	075a      	lsls	r2, r3, #29
 80066c0:	d505      	bpl.n	80066ce <__sflush_r+0x46>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c8:	b10b      	cbz	r3, 80066ce <__sflush_r+0x46>
 80066ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	4602      	mov	r2, r0
 80066d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b0      	blx	r6
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	d106      	bne.n	80066ee <__sflush_r+0x66>
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	291d      	cmp	r1, #29
 80066e4:	d82c      	bhi.n	8006740 <__sflush_r+0xb8>
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <__sflush_r+0x108>)
 80066e8:	40ca      	lsrs	r2, r1
 80066ea:	07d6      	lsls	r6, r2, #31
 80066ec:	d528      	bpl.n	8006740 <__sflush_r+0xb8>
 80066ee:	2200      	movs	r2, #0
 80066f0:	6062      	str	r2, [r4, #4]
 80066f2:	04d9      	lsls	r1, r3, #19
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	6022      	str	r2, [r4, #0]
 80066f8:	d504      	bpl.n	8006704 <__sflush_r+0x7c>
 80066fa:	1c42      	adds	r2, r0, #1
 80066fc:	d101      	bne.n	8006702 <__sflush_r+0x7a>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b903      	cbnz	r3, 8006704 <__sflush_r+0x7c>
 8006702:	6560      	str	r0, [r4, #84]	; 0x54
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	2900      	cmp	r1, #0
 800670a:	d0ca      	beq.n	80066a2 <__sflush_r+0x1a>
 800670c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006710:	4299      	cmp	r1, r3
 8006712:	d002      	beq.n	800671a <__sflush_r+0x92>
 8006714:	4628      	mov	r0, r5
 8006716:	f7fd fbc7 	bl	8003ea8 <_free_r>
 800671a:	2000      	movs	r0, #0
 800671c:	6360      	str	r0, [r4, #52]	; 0x34
 800671e:	e7c1      	b.n	80066a4 <__sflush_r+0x1c>
 8006720:	6a21      	ldr	r1, [r4, #32]
 8006722:	2301      	movs	r3, #1
 8006724:	4628      	mov	r0, r5
 8006726:	47b0      	blx	r6
 8006728:	1c41      	adds	r1, r0, #1
 800672a:	d1c7      	bne.n	80066bc <__sflush_r+0x34>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0c4      	beq.n	80066bc <__sflush_r+0x34>
 8006732:	2b1d      	cmp	r3, #29
 8006734:	d001      	beq.n	800673a <__sflush_r+0xb2>
 8006736:	2b16      	cmp	r3, #22
 8006738:	d101      	bne.n	800673e <__sflush_r+0xb6>
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	e7b1      	b.n	80066a2 <__sflush_r+0x1a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7ad      	b.n	80066a4 <__sflush_r+0x1c>
 8006748:	690f      	ldr	r7, [r1, #16]
 800674a:	2f00      	cmp	r7, #0
 800674c:	d0a9      	beq.n	80066a2 <__sflush_r+0x1a>
 800674e:	0793      	lsls	r3, r2, #30
 8006750:	680e      	ldr	r6, [r1, #0]
 8006752:	bf08      	it	eq
 8006754:	694b      	ldreq	r3, [r1, #20]
 8006756:	600f      	str	r7, [r1, #0]
 8006758:	bf18      	it	ne
 800675a:	2300      	movne	r3, #0
 800675c:	eba6 0807 	sub.w	r8, r6, r7
 8006760:	608b      	str	r3, [r1, #8]
 8006762:	f1b8 0f00 	cmp.w	r8, #0
 8006766:	dd9c      	ble.n	80066a2 <__sflush_r+0x1a>
 8006768:	6a21      	ldr	r1, [r4, #32]
 800676a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800676c:	4643      	mov	r3, r8
 800676e:	463a      	mov	r2, r7
 8006770:	4628      	mov	r0, r5
 8006772:	47b0      	blx	r6
 8006774:	2800      	cmp	r0, #0
 8006776:	dc06      	bgt.n	8006786 <__sflush_r+0xfe>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e78e      	b.n	80066a4 <__sflush_r+0x1c>
 8006786:	4407      	add	r7, r0
 8006788:	eba8 0800 	sub.w	r8, r8, r0
 800678c:	e7e9      	b.n	8006762 <__sflush_r+0xda>
 800678e:	bf00      	nop
 8006790:	20400001 	.word	0x20400001

08006794 <_fflush_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4605      	mov	r5, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b913      	cbnz	r3, 80067a4 <_fflush_r+0x10>
 800679e:	2500      	movs	r5, #0
 80067a0:	4628      	mov	r0, r5
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	b118      	cbz	r0, 80067ae <_fflush_r+0x1a>
 80067a6:	6983      	ldr	r3, [r0, #24]
 80067a8:	b90b      	cbnz	r3, 80067ae <_fflush_r+0x1a>
 80067aa:	f000 f887 	bl	80068bc <__sinit>
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <_fflush_r+0x6c>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d11b      	bne.n	80067ec <_fflush_r+0x58>
 80067b4:	686c      	ldr	r4, [r5, #4]
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ef      	beq.n	800679e <_fflush_r+0xa>
 80067be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c0:	07d0      	lsls	r0, r2, #31
 80067c2:	d404      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c4:	0599      	lsls	r1, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_fflush_r+0x3a>
 80067c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ca:	f7ff fcd0 	bl	800616e <__retarget_lock_acquire_recursive>
 80067ce:	4628      	mov	r0, r5
 80067d0:	4621      	mov	r1, r4
 80067d2:	f7ff ff59 	bl	8006688 <__sflush_r>
 80067d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d8:	07da      	lsls	r2, r3, #31
 80067da:	4605      	mov	r5, r0
 80067dc:	d4e0      	bmi.n	80067a0 <_fflush_r+0xc>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	059b      	lsls	r3, r3, #22
 80067e2:	d4dd      	bmi.n	80067a0 <_fflush_r+0xc>
 80067e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e6:	f7ff fcc3 	bl	8006170 <__retarget_lock_release_recursive>
 80067ea:	e7d9      	b.n	80067a0 <_fflush_r+0xc>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_fflush_r+0x70>)
 80067ee:	429c      	cmp	r4, r3
 80067f0:	d101      	bne.n	80067f6 <_fflush_r+0x62>
 80067f2:	68ac      	ldr	r4, [r5, #8]
 80067f4:	e7df      	b.n	80067b6 <_fflush_r+0x22>
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <_fflush_r+0x74>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	bf08      	it	eq
 80067fc:	68ec      	ldreq	r4, [r5, #12]
 80067fe:	e7da      	b.n	80067b6 <_fflush_r+0x22>
 8006800:	080070d4 	.word	0x080070d4
 8006804:	080070f4 	.word	0x080070f4
 8006808:	080070b4 	.word	0x080070b4

0800680c <std>:
 800680c:	2300      	movs	r3, #0
 800680e:	b510      	push	{r4, lr}
 8006810:	4604      	mov	r4, r0
 8006812:	e9c0 3300 	strd	r3, r3, [r0]
 8006816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681a:	6083      	str	r3, [r0, #8]
 800681c:	8181      	strh	r1, [r0, #12]
 800681e:	6643      	str	r3, [r0, #100]	; 0x64
 8006820:	81c2      	strh	r2, [r0, #14]
 8006822:	6183      	str	r3, [r0, #24]
 8006824:	4619      	mov	r1, r3
 8006826:	2208      	movs	r2, #8
 8006828:	305c      	adds	r0, #92	; 0x5c
 800682a:	f7fd fb35 	bl	8003e98 <memset>
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <std+0x38>)
 8006830:	6263      	str	r3, [r4, #36]	; 0x24
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x3c>)
 8006834:	62a3      	str	r3, [r4, #40]	; 0x28
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x40>)
 8006838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x44>)
 800683c:	6224      	str	r4, [r4, #32]
 800683e:	6323      	str	r3, [r4, #48]	; 0x30
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	08006b59 	.word	0x08006b59
 8006848:	08006b7b 	.word	0x08006b7b
 800684c:	08006bb3 	.word	0x08006bb3
 8006850:	08006bd7 	.word	0x08006bd7

08006854 <_cleanup_r>:
 8006854:	4901      	ldr	r1, [pc, #4]	; (800685c <_cleanup_r+0x8>)
 8006856:	f000 b8af 	b.w	80069b8 <_fwalk_reent>
 800685a:	bf00      	nop
 800685c:	08006795 	.word	0x08006795

08006860 <__sfmoreglue>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	2268      	movs	r2, #104	; 0x68
 8006864:	1e4d      	subs	r5, r1, #1
 8006866:	4355      	muls	r5, r2
 8006868:	460e      	mov	r6, r1
 800686a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800686e:	f7fd fb87 	bl	8003f80 <_malloc_r>
 8006872:	4604      	mov	r4, r0
 8006874:	b140      	cbz	r0, 8006888 <__sfmoreglue+0x28>
 8006876:	2100      	movs	r1, #0
 8006878:	e9c0 1600 	strd	r1, r6, [r0]
 800687c:	300c      	adds	r0, #12
 800687e:	60a0      	str	r0, [r4, #8]
 8006880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006884:	f7fd fb08 	bl	8003e98 <memset>
 8006888:	4620      	mov	r0, r4
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <__sfp_lock_acquire>:
 800688c:	4801      	ldr	r0, [pc, #4]	; (8006894 <__sfp_lock_acquire+0x8>)
 800688e:	f7ff bc6e 	b.w	800616e <__retarget_lock_acquire_recursive>
 8006892:	bf00      	nop
 8006894:	200002d5 	.word	0x200002d5

08006898 <__sfp_lock_release>:
 8006898:	4801      	ldr	r0, [pc, #4]	; (80068a0 <__sfp_lock_release+0x8>)
 800689a:	f7ff bc69 	b.w	8006170 <__retarget_lock_release_recursive>
 800689e:	bf00      	nop
 80068a0:	200002d5 	.word	0x200002d5

080068a4 <__sinit_lock_acquire>:
 80068a4:	4801      	ldr	r0, [pc, #4]	; (80068ac <__sinit_lock_acquire+0x8>)
 80068a6:	f7ff bc62 	b.w	800616e <__retarget_lock_acquire_recursive>
 80068aa:	bf00      	nop
 80068ac:	200002d6 	.word	0x200002d6

080068b0 <__sinit_lock_release>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__sinit_lock_release+0x8>)
 80068b2:	f7ff bc5d 	b.w	8006170 <__retarget_lock_release_recursive>
 80068b6:	bf00      	nop
 80068b8:	200002d6 	.word	0x200002d6

080068bc <__sinit>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	f7ff fff0 	bl	80068a4 <__sinit_lock_acquire>
 80068c4:	69a3      	ldr	r3, [r4, #24]
 80068c6:	b11b      	cbz	r3, 80068d0 <__sinit+0x14>
 80068c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068cc:	f7ff bff0 	b.w	80068b0 <__sinit_lock_release>
 80068d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068d4:	6523      	str	r3, [r4, #80]	; 0x50
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <__sinit+0x68>)
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <__sinit+0x6c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068de:	42a3      	cmp	r3, r4
 80068e0:	bf04      	itt	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	61a3      	streq	r3, [r4, #24]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f820 	bl	800692c <__sfp>
 80068ec:	6060      	str	r0, [r4, #4]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f81c 	bl	800692c <__sfp>
 80068f4:	60a0      	str	r0, [r4, #8]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f818 	bl	800692c <__sfp>
 80068fc:	2200      	movs	r2, #0
 80068fe:	60e0      	str	r0, [r4, #12]
 8006900:	2104      	movs	r1, #4
 8006902:	6860      	ldr	r0, [r4, #4]
 8006904:	f7ff ff82 	bl	800680c <std>
 8006908:	68a0      	ldr	r0, [r4, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	2109      	movs	r1, #9
 800690e:	f7ff ff7d 	bl	800680c <std>
 8006912:	68e0      	ldr	r0, [r4, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	2112      	movs	r1, #18
 8006918:	f7ff ff78 	bl	800680c <std>
 800691c:	2301      	movs	r3, #1
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	e7d2      	b.n	80068c8 <__sinit+0xc>
 8006922:	bf00      	nop
 8006924:	08006d3c 	.word	0x08006d3c
 8006928:	08006855 	.word	0x08006855

0800692c <__sfp>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	4607      	mov	r7, r0
 8006930:	f7ff ffac 	bl	800688c <__sfp_lock_acquire>
 8006934:	4b1e      	ldr	r3, [pc, #120]	; (80069b0 <__sfp+0x84>)
 8006936:	681e      	ldr	r6, [r3, #0]
 8006938:	69b3      	ldr	r3, [r6, #24]
 800693a:	b913      	cbnz	r3, 8006942 <__sfp+0x16>
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff ffbd 	bl	80068bc <__sinit>
 8006942:	3648      	adds	r6, #72	; 0x48
 8006944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006948:	3b01      	subs	r3, #1
 800694a:	d503      	bpl.n	8006954 <__sfp+0x28>
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	b30b      	cbz	r3, 8006994 <__sfp+0x68>
 8006950:	6836      	ldr	r6, [r6, #0]
 8006952:	e7f7      	b.n	8006944 <__sfp+0x18>
 8006954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006958:	b9d5      	cbnz	r5, 8006990 <__sfp+0x64>
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <__sfp+0x88>)
 800695c:	60e3      	str	r3, [r4, #12]
 800695e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006962:	6665      	str	r5, [r4, #100]	; 0x64
 8006964:	f7ff fc02 	bl	800616c <__retarget_lock_init_recursive>
 8006968:	f7ff ff96 	bl	8006898 <__sfp_lock_release>
 800696c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006974:	6025      	str	r5, [r4, #0]
 8006976:	61a5      	str	r5, [r4, #24]
 8006978:	2208      	movs	r2, #8
 800697a:	4629      	mov	r1, r5
 800697c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006980:	f7fd fa8a 	bl	8003e98 <memset>
 8006984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800698c:	4620      	mov	r0, r4
 800698e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006990:	3468      	adds	r4, #104	; 0x68
 8006992:	e7d9      	b.n	8006948 <__sfp+0x1c>
 8006994:	2104      	movs	r1, #4
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff ff62 	bl	8006860 <__sfmoreglue>
 800699c:	4604      	mov	r4, r0
 800699e:	6030      	str	r0, [r6, #0]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1d5      	bne.n	8006950 <__sfp+0x24>
 80069a4:	f7ff ff78 	bl	8006898 <__sfp_lock_release>
 80069a8:	230c      	movs	r3, #12
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	e7ee      	b.n	800698c <__sfp+0x60>
 80069ae:	bf00      	nop
 80069b0:	08006d3c 	.word	0x08006d3c
 80069b4:	ffff0001 	.word	0xffff0001

080069b8 <_fwalk_reent>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	4606      	mov	r6, r0
 80069be:	4688      	mov	r8, r1
 80069c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c4:	2700      	movs	r7, #0
 80069c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ca:	f1b9 0901 	subs.w	r9, r9, #1
 80069ce:	d505      	bpl.n	80069dc <_fwalk_reent+0x24>
 80069d0:	6824      	ldr	r4, [r4, #0]
 80069d2:	2c00      	cmp	r4, #0
 80069d4:	d1f7      	bne.n	80069c6 <_fwalk_reent+0xe>
 80069d6:	4638      	mov	r0, r7
 80069d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069dc:	89ab      	ldrh	r3, [r5, #12]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d907      	bls.n	80069f2 <_fwalk_reent+0x3a>
 80069e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e6:	3301      	adds	r3, #1
 80069e8:	d003      	beq.n	80069f2 <_fwalk_reent+0x3a>
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	47c0      	blx	r8
 80069f0:	4307      	orrs	r7, r0
 80069f2:	3568      	adds	r5, #104	; 0x68
 80069f4:	e7e9      	b.n	80069ca <_fwalk_reent+0x12>

080069f6 <__swhatbuf_r>:
 80069f6:	b570      	push	{r4, r5, r6, lr}
 80069f8:	460e      	mov	r6, r1
 80069fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	b096      	sub	sp, #88	; 0x58
 8006a02:	4614      	mov	r4, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	da08      	bge.n	8006a1a <__swhatbuf_r+0x24>
 8006a08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	602a      	str	r2, [r5, #0]
 8006a10:	061a      	lsls	r2, r3, #24
 8006a12:	d410      	bmi.n	8006a36 <__swhatbuf_r+0x40>
 8006a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a18:	e00e      	b.n	8006a38 <__swhatbuf_r+0x42>
 8006a1a:	466a      	mov	r2, sp
 8006a1c:	f000 f902 	bl	8006c24 <_fstat_r>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	dbf1      	blt.n	8006a08 <__swhatbuf_r+0x12>
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a2e:	425a      	negs	r2, r3
 8006a30:	415a      	adcs	r2, r3
 8006a32:	602a      	str	r2, [r5, #0]
 8006a34:	e7ee      	b.n	8006a14 <__swhatbuf_r+0x1e>
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	2000      	movs	r0, #0
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	b016      	add	sp, #88	; 0x58
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}

08006a40 <__smakebuf_r>:
 8006a40:	898b      	ldrh	r3, [r1, #12]
 8006a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a44:	079d      	lsls	r5, r3, #30
 8006a46:	4606      	mov	r6, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	d507      	bpl.n	8006a5c <__smakebuf_r+0x1c>
 8006a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	2301      	movs	r3, #1
 8006a56:	6163      	str	r3, [r4, #20]
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	ab01      	add	r3, sp, #4
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f7ff ffc9 	bl	80069f6 <__swhatbuf_r>
 8006a64:	9900      	ldr	r1, [sp, #0]
 8006a66:	4605      	mov	r5, r0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7fd fa89 	bl	8003f80 <_malloc_r>
 8006a6e:	b948      	cbnz	r0, 8006a84 <__smakebuf_r+0x44>
 8006a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a74:	059a      	lsls	r2, r3, #22
 8006a76:	d4ef      	bmi.n	8006a58 <__smakebuf_r+0x18>
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e7e3      	b.n	8006a4c <__smakebuf_r+0xc>
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <__smakebuf_r+0x7c>)
 8006a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	6163      	str	r3, [r4, #20]
 8006a96:	9b01      	ldr	r3, [sp, #4]
 8006a98:	6120      	str	r0, [r4, #16]
 8006a9a:	b15b      	cbz	r3, 8006ab4 <__smakebuf_r+0x74>
 8006a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 f8d1 	bl	8006c48 <_isatty_r>
 8006aa6:	b128      	cbz	r0, 8006ab4 <__smakebuf_r+0x74>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	89a0      	ldrh	r0, [r4, #12]
 8006ab6:	4305      	orrs	r5, r0
 8006ab8:	81a5      	strh	r5, [r4, #12]
 8006aba:	e7cd      	b.n	8006a58 <__smakebuf_r+0x18>
 8006abc:	08006855 	.word	0x08006855

08006ac0 <_malloc_usable_size_r>:
 8006ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac4:	1f18      	subs	r0, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfbc      	itt	lt
 8006aca:	580b      	ldrlt	r3, [r1, r0]
 8006acc:	18c0      	addlt	r0, r0, r3
 8006ace:	4770      	bx	lr

08006ad0 <_raise_r>:
 8006ad0:	291f      	cmp	r1, #31
 8006ad2:	b538      	push	{r3, r4, r5, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	d904      	bls.n	8006ae4 <_raise_r+0x14>
 8006ada:	2316      	movs	r3, #22
 8006adc:	6003      	str	r3, [r0, #0]
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ae6:	b112      	cbz	r2, 8006aee <_raise_r+0x1e>
 8006ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aec:	b94b      	cbnz	r3, 8006b02 <_raise_r+0x32>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f830 	bl	8006b54 <_getpid_r>
 8006af4:	462a      	mov	r2, r5
 8006af6:	4601      	mov	r1, r0
 8006af8:	4620      	mov	r0, r4
 8006afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afe:	f000 b817 	b.w	8006b30 <_kill_r>
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d00a      	beq.n	8006b1c <_raise_r+0x4c>
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	d103      	bne.n	8006b12 <_raise_r+0x42>
 8006b0a:	2316      	movs	r3, #22
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7e7      	b.n	8006ae2 <_raise_r+0x12>
 8006b12:	2400      	movs	r4, #0
 8006b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b18:	4628      	mov	r0, r5
 8006b1a:	4798      	blx	r3
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	e7e0      	b.n	8006ae2 <_raise_r+0x12>

08006b20 <raise>:
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <raise+0xc>)
 8006b22:	4601      	mov	r1, r0
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	f7ff bfd3 	b.w	8006ad0 <_raise_r>
 8006b2a:	bf00      	nop
 8006b2c:	2000000c 	.word	0x2000000c

08006b30 <_kill_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4d07      	ldr	r5, [pc, #28]	; (8006b50 <_kill_r+0x20>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	f7fa fda7 	bl	8001690 <_kill>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d102      	bne.n	8006b4c <_kill_r+0x1c>
 8006b46:	682b      	ldr	r3, [r5, #0]
 8006b48:	b103      	cbz	r3, 8006b4c <_kill_r+0x1c>
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	bf00      	nop
 8006b50:	200002d0 	.word	0x200002d0

08006b54 <_getpid_r>:
 8006b54:	f7fa bd94 	b.w	8001680 <_getpid>

08006b58 <__sread>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	f000 f894 	bl	8006c8c <_read_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	bfab      	itete	ge
 8006b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b6c:	181b      	addge	r3, r3, r0
 8006b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b72:	bfac      	ite	ge
 8006b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b76:	81a3      	strhlt	r3, [r4, #12]
 8006b78:	bd10      	pop	{r4, pc}

08006b7a <__swrite>:
 8006b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	461f      	mov	r7, r3
 8006b80:	898b      	ldrh	r3, [r1, #12]
 8006b82:	05db      	lsls	r3, r3, #23
 8006b84:	4605      	mov	r5, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	4616      	mov	r6, r2
 8006b8a:	d505      	bpl.n	8006b98 <__swrite+0x1e>
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	2302      	movs	r3, #2
 8006b92:	2200      	movs	r2, #0
 8006b94:	f000 f868 	bl	8006c68 <_lseek_r>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	4628      	mov	r0, r5
 8006baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	f000 b817 	b.w	8006be0 <_write_r>

08006bb2 <__sseek>:
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bba:	f000 f855 	bl	8006c68 <_lseek_r>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	bf15      	itete	ne
 8006bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bce:	81a3      	strheq	r3, [r4, #12]
 8006bd0:	bf18      	it	ne
 8006bd2:	81a3      	strhne	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__sclose>:
 8006bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bda:	f000 b813 	b.w	8006c04 <_close_r>
	...

08006be0 <_write_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	; (8006c00 <_write_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa fd85 	bl	80016fe <_write>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_write_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_write_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200002d0 	.word	0x200002d0

08006c04 <_close_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d06      	ldr	r5, [pc, #24]	; (8006c20 <_close_r+0x1c>)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	f7fa fd91 	bl	8001736 <_close>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_close_r+0x1a>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_close_r+0x1a>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	200002d0 	.word	0x200002d0

08006c24 <_fstat_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	; (8006c44 <_fstat_r+0x20>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	f7fa fd8c 	bl	800174e <_fstat>
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d102      	bne.n	8006c40 <_fstat_r+0x1c>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	b103      	cbz	r3, 8006c40 <_fstat_r+0x1c>
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	bf00      	nop
 8006c44:	200002d0 	.word	0x200002d0

08006c48 <_isatty_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_isatty_r+0x1c>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fa fd8b 	bl	800176e <_isatty>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_isatty_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_isatty_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200002d0 	.word	0x200002d0

08006c68 <_lseek_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	; (8006c88 <_lseek_r+0x20>)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	2200      	movs	r2, #0
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fa fd84 	bl	8001784 <_lseek>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_lseek_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_lseek_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200002d0 	.word	0x200002d0

08006c8c <_read_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d07      	ldr	r5, [pc, #28]	; (8006cac <_read_r+0x20>)
 8006c90:	4604      	mov	r4, r0
 8006c92:	4608      	mov	r0, r1
 8006c94:	4611      	mov	r1, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fa fd12 	bl	80016c4 <_read>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_read_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_read_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200002d0 	.word	0x200002d0

08006cb0 <_init>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr

08006cbc <_fini>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr
