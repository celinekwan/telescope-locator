
lcd_accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006fa8  08006fa8  00016fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d4  080073d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080073dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080075b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080075b8  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e640  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcc  00000000  00000000  0002e84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ef9  00000000  00000000  00031e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f140  00000000  00000000  00054d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1edb  00000000  00000000  00063ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004440  00000000  00000000  00135df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f90 	.word	0x08006f90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006f90 	.word	0x08006f90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <adxl_write>:
void display_data (float);

char x_char[3];

// write function
void adxl_write (uint8_t reg, uint8_t value) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 10);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	230a      	movs	r3, #10
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	21a6      	movs	r1, #166	; 0xa6
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <adxl_write+0x34>)
 8000ee2:	f000 ff95 	bl	8001e10 <HAL_I2C_Master_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001f8 	.word	0x200001f8

08000ef4 <adxl_read>:

// read function
void adxl_read (uint8_t reg, uint8_t numberofbytes) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read (&hi2c1, adxl_address, reg, 1, data_rec, numberofbytes, 100);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2164      	movs	r1, #100	; 0x64
 8000f0e:	9102      	str	r1, [sp, #8]
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <adxl_read+0x34>)
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	21a6      	movs	r1, #166	; 0xa6
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <adxl_read+0x38>)
 8000f1c:	f001 f86c 	bl	8001ff8 <HAL_I2C_Mem_Read>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200002d0 	.word	0x200002d0
 8000f2c:	200001f8 	.word	0x200001f8

08000f30 <adxl_init>:

// initialization
void adxl_init (void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	adxl_read(0x00,1); // 0xE5
 8000f34:	2101      	movs	r1, #1
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff ffdc 	bl	8000ef4 <adxl_read>

	adxl_write (0x2d, 0); // reset all bits
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	202d      	movs	r0, #45	; 0x2d
 8000f40:	f7ff ffbc 	bl	8000ebc <adxl_write>
	adxl_write (0x2d, 0x08); // measure bit-1, wakeup 0, 0 at 8hz
 8000f44:	2108      	movs	r1, #8
 8000f46:	202d      	movs	r0, #45	; 0x2d
 8000f48:	f7ff ffb8 	bl	8000ebc <adxl_write>

	adxl_write (0x31, 0x01); // +- 4g range
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2031      	movs	r0, #49	; 0x31
 8000f50:	f7ff ffb4 	bl	8000ebc <adxl_write>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <I2Csendcmd>:
//	HAL_UART_Transmit(&huart2,x_char,strlen((char*)x_char),HAL_MAX_DELAY);
//}

// LCD stuff

void I2Csendcmd(uint8_t addr, uint8_t cmd) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	733b      	strb	r3, [r7, #12]
	data[1] = cmd; // data byte (not data, but command)
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, addr, data, 2, HAL_MAX_DELAY);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	b299      	uxth	r1, r3
 8000f74:	f107 020c 	add.w	r2, r7, #12
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <I2Csendcmd+0x38>)
 8000f82:	f000 ff45 	bl	8001e10 <HAL_I2C_Master_Transmit>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200001f8 	.word	0x200001f8

08000f94 <screen_init>:
	datum[0] = 0x40;
	datum[1] = data; // data byte (not data, but command)
	HAL_I2C_Master_Transmit (&hi2c1, addr, datum, 2, HAL_MAX_DELAY);
}

void screen_init(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY); // 0x78, 0x01
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f7ff ffdc 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_NORMAL_RE1_IS0); // 0x3A
 8000fa0:	213a      	movs	r1, #58	; 0x3a
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f7ff ffd8 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_NW);
 8000fa8:	2109      	movs	r1, #9
 8000faa:	2078      	movs	r0, #120	; 0x78
 8000fac:	f7ff ffd4 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SEGMENT_BOTTOM_VIEW);
 8000fb0:	2106      	movs	r1, #6
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f7ff ffd0 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_BS1_1);
 8000fb8:	211e      	movs	r1, #30
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f7ff ffcc 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_RE0_IS1);
 8000fc0:	2139      	movs	r1, #57	; 0x39
 8000fc2:	2078      	movs	r0, #120	; 0x78
 8000fc4:	f7ff ffc8 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_BS0_1);
 8000fc8:	211b      	movs	r1, #27
 8000fca:	2078      	movs	r0, #120	; 0x78
 8000fcc:	f7ff ffc4 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_FOLLOWER_CONTROL);
 8000fd0:	216e      	movs	r1, #110	; 0x6e
 8000fd2:	2078      	movs	r0, #120	; 0x78
 8000fd4:	f7ff ffc0 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_POWER_BOOSTER_CONTRAST);
 8000fd8:	2157      	movs	r1, #87	; 0x57
 8000fda:	2078      	movs	r0, #120	; 0x78
 8000fdc:	f7ff ffbc 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_SET_CONTRAST_1010);
 8000fe0:	217a      	movs	r1, #122	; 0x7a
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f7ff ffb8 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_8BIT_4LINES_RE0_IS0);
 8000fe8:	2138      	movs	r1, #56	; 0x38
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f7ff ffb4 	bl	8000f58 <I2Csendcmd>
	I2Csendcmd(SCREEN_ADDR, COMMAND_DISPLAY_ON_CURSOR_ON_BLINK_ON);
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f7ff ffb0 	bl	8000f58 <I2Csendcmd>

	I2Csendcmd(SCREEN_ADDR, COMMAND_CLEAR_DISPLAY);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2078      	movs	r0, #120	; 0x78
 8000ffc:	f7ff ffac 	bl	8000f58 <I2Csendcmd>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fb5a 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f820 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 f8e0 	bl	80011d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001014:	f000 f8ae 	bl	8001174 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001018:	f000 f86c 	bl	80010f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // initialize accelerometer
  adxl_init();
 800101c:	f7ff ff88 	bl	8000f30 <adxl_init>

  // turn off display, turn on display (translated from PORTD section of Stewart's code)
    HAL_Delay(5);
 8001020:	2005      	movs	r0, #5
 8001022:	f000 fbc9 	bl	80017b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f000 fe47 	bl	8001cc0 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8001032:	20c8      	movs	r0, #200	; 0xc8
 8001034:	f000 fbc0 	bl	80017b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f000 fe3e 	bl	8001cc0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001044:	2005      	movs	r0, #5
 8001046:	f000 fbb7 	bl	80017b8 <HAL_Delay>

    //1. clear screen
    screen_init();
 800104a:	f7ff ffa3 	bl	8000f94 <screen_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104e:	e7fe      	b.n	800104e <main+0x4a>

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	; 0x58
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2244      	movs	r2, #68	; 0x44
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fa76 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001072:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001076:	f001 fbd1 	bl	800281c <HAL_PWREx_ControlVoltageScaling>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001080:	f000 f90e 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800109e:	230a      	movs	r3, #10
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fc08 	bl	80028c8 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010be:	f000 f8ef 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2303      	movs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2104      	movs	r1, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 f808 	bl	80030f0 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010e6:	f000 f8db 	bl	80012a0 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3758      	adds	r7, #88	; 0x58
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_I2C1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_I2C1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_I2C1_Init+0x74>)
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <MX_I2C1_Init+0x7c>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_I2C1_Init+0x74>)
 800110c:	2201      	movs	r2, #1
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_I2C1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <MX_I2C1_Init+0x74>)
 8001130:	f000 fdde 	bl	8001cf0 <HAL_I2C_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800113a:	f000 f8b1 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800113e:	2100      	movs	r1, #0
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_I2C1_Init+0x74>)
 8001142:	f001 fac5 	bl	80026d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800114c:	f000 f8a8 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_I2C1_Init+0x74>)
 8001154:	f001 fb07 	bl	8002766 <HAL_I2CEx_ConfigDigitalFilter>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800115e:	f000 f89f 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001f8 	.word	0x200001f8
 800116c:	40005400 	.word	0x40005400
 8001170:	10909cec 	.word	0x10909cec

08001174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <MX_USART2_UART_Init+0x5c>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011b8:	f002 fd1c 	bl	8003bf4 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f000 f86d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000024c 	.word	0x2000024c
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <MX_GPIO_Init+0xc4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <MX_GPIO_Init+0xc4>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <MX_GPIO_Init+0xc4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a24      	ldr	r2, [pc, #144]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_GPIO_Init+0xc4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_GPIO_Init+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001252:	f000 fd35 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800125c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_GPIO_Init+0xc8>)
 800126e:	f000 fbad 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001272:	2320      	movs	r3, #32
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f000 fb9e 	bl	80019cc <HAL_GPIO_Init>

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	48000800 	.word	0x48000800

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0a4      	sub	sp, #144	; 0x90
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2268      	movs	r2, #104	; 0x68
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f91b 	bl	8004550 <memset>
  if(hi2c->Instance==I2C1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <HAL_I2C_MspInit+0xb0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13a      	bne.n	800139a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f901 	bl	8003538 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff ffb0 	bl	80012a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001370:	2304      	movs	r3, #4
 8001372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <HAL_I2C_MspInit+0xb8>)
 800137e:	f000 fb25 	bl	80019cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_I2C_MspInit+0xb4>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3790      	adds	r7, #144	; 0x90
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000400 	.word	0x48000400

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0a4      	sub	sp, #144	; 0x90
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2268      	movs	r2, #104	; 0x68
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f8bd 	bl	8004550 <memset>
  if(huart->Instance==USART2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <HAL_UART_MspInit+0xb0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13a      	bne.n	8001456 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 f8a3 	bl	8003538 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f8:	f7ff ff52 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_UART_MspInit+0xb4>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_UART_MspInit+0xb4>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	6593      	str	r3, [r2, #88]	; 0x58
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_UART_MspInit+0xb4>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_UART_MspInit+0xb4>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_UART_MspInit+0xb4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_UART_MspInit+0xb4>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800142c:	230c      	movs	r3, #12
 800142e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001442:	2307      	movs	r3, #7
 8001444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f000 fabb 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3790      	adds	r7, #144	; 0x90
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	40021000 	.word	0x40021000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f960 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_kill>:

int _kill(int pid, int sig)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014d6:	f003 f811 	bl	80044fc <__errno>
 80014da:	4603      	mov	r3, r0
 80014dc:	2216      	movs	r2, #22
 80014de:	601a      	str	r2, [r3, #0]
  return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_exit>:

void _exit (int status)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffe7 	bl	80014cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80014fe:	e7fe      	b.n	80014fe <_exit+0x12>

08001500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e009      	b.n	8001560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf1      	blt.n	800154c <_write+0x12>
  }
  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	605a      	str	r2, [r3, #4]
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f002 ff76 	bl	80044fc <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20028000 	.word	0x20028000
 800163c:	00000400 	.word	0x00000400
 8001640:	200002d8 	.word	0x200002d8
 8001644:	200002f0 	.word	0x200002f0

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopForever+0xe>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopForever+0x16>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 ff35 	bl	8004508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800169e:	f7ff fcb1 	bl	8001004 <main>

080016a2 <LoopForever>:

LoopForever:
    b LoopForever
 80016a2:	e7fe      	b.n	80016a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016b0:	080073dc 	.word	0x080073dc
  ldr r2, =_sbss
 80016b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016b8:	200002f0 	.word	0x200002f0

080016bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_Init+0x3c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_Init+0x3c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f944 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 f80f 	bl	8001700 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	e001      	b.n	80016f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ee:	f7ff fddd 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_InitTick+0x6c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_InitTick+0x70>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f941 	bl	80019b2 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d809      	bhi.n	8001750 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f919 	bl	800197a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_InitTick+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e007      	b.n	8001760 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e004      	b.n	8001760 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e001      	b.n	8001760 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	200002dc 	.word	0x200002dc

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200002dc 	.word	0x200002dc

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff47 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff5c 	bl	8001848 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffb0 	bl	8001920 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e154      	b.n	8001c86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8146 	beq.w	8001c80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a0 	beq.w	8001c80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4c:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b82:	d019      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a47      	ldr	r2, [pc, #284]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1dc>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e008      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bca:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfc:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aea3 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e081      	b.n	8001e06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff faec 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e006      	b.n	8001d78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d104      	bne.n	8001d8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69d9      	ldr	r1, [r3, #28]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	4613      	mov	r3, r2
 8001e22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	f040 80da 	bne.w	8001fe6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2C_Master_Transmit+0x30>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0d3      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e48:	f7ff fcaa 	bl	80017a0 <HAL_GetTick>
 8001e4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2319      	movs	r3, #25
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fa5e 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0be      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2210      	movs	r2, #16
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	893a      	ldrh	r2, [r7, #8]
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2bff      	cmp	r3, #255	; 0xff
 8001e9a:	d90e      	bls.n	8001eba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	22ff      	movs	r2, #255	; 0xff
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fbda 	bl	800266c <I2C_TransferConfig>
 8001eb8:	e06c      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	8979      	ldrh	r1, [r7, #10]
 8001ecc:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fbc9 	bl	800266c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001eda:	e05b      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6a39      	ldr	r1, [r7, #32]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fa5b 	bl	800239c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07b      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d034      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x184>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d130      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9ed 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e04d      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d90e      	bls.n	8001f74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	; 0xff
 8001f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fb7d 	bl	800266c <I2C_TransferConfig>
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fb6c 	bl	800266c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d19e      	bne.n	8001edc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fa3a 	bl	800241c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e01a      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	80002000 	.word	0x80002000
 8001ff4:	fe00e800 	.word	0xfe00e800

08001ff8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	460b      	mov	r3, r1
 800200c:	813b      	strh	r3, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b20      	cmp	r3, #32
 800201c:	f040 80fd 	bne.w	800221a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_I2C_Mem_Read+0x34>
 8002026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0f1      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Mem_Read+0x4e>
 8002042:	2302      	movs	r3, #2
 8002044:	e0ea      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204e:	f7ff fba7 	bl	80017a0 <HAL_GetTick>
 8002052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f95b 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d5      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2222      	movs	r2, #34	; 0x22
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002098:	88f8      	ldrh	r0, [r7, #6]
 800209a:	893a      	ldrh	r2, [r7, #8]
 800209c:	8979      	ldrh	r1, [r7, #10]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4603      	mov	r3, r0
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f8bf 	bl	800222c <I2C_RequestMemoryRead>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ad      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d90e      	bls.n	80020e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_I2C_Mem_Read+0x22c>)
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fac3 	bl	800266c <I2C_TransferConfig>
 80020e6:	e00f      	b.n	8002108 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_I2C_Mem_Read+0x22c>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fab2 	bl	800266c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	2200      	movs	r2, #0
 8002110:	2104      	movs	r1, #4
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f902 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07c      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d034      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	2b00      	cmp	r3, #0
 8002164:	d130      	bne.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f8d3 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04d      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d90e      	bls.n	80021a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	b2da      	uxtb	r2, r3
 8002196:	8979      	ldrh	r1, [r7, #10]
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fa63 	bl	800266c <I2C_TransferConfig>
 80021a6:	e00f      	b.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fa52 	bl	800266c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d19a      	bne.n	8002108 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f920 	bl	800241c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e01a      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2220      	movs	r2, #32
 80021ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_I2C_Mem_Read+0x230>)
 80021fa:	400b      	ands	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	80002400 	.word	0x80002400
 8002228:	fe00e800 	.word	0xfe00e800

0800222c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <I2C_RequestMemoryRead+0xa4>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fa0a 	bl	800266c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f89d 	bl	800239c <I2C_WaitOnTXISFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e02c      	b.n	80022c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002272:	893b      	ldrh	r3, [r7, #8]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
 800227c:	e015      	b.n	80022aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800227e:	893b      	ldrh	r3, [r7, #8]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	b29b      	uxth	r3, r3
 8002284:	b2da      	uxtb	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f883 	bl	800239c <I2C_WaitOnTXISFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e012      	b.n	80022c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a0:	893b      	ldrh	r3, [r7, #8]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2140      	movs	r1, #64	; 0x40
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f831 	bl	800231c <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	80002000 	.word	0x80002000

080022d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d103      	bne.n	80022f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d007      	beq.n	8002310 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	619a      	str	r2, [r3, #24]
  }
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232c:	e022      	b.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d01e      	beq.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff fa33 	bl	80017a0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e00f      	b.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	429a      	cmp	r2, r3
 8002390:	d0cd      	beq.n	800232e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a8:	e02c      	b.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f870 	bl	8002494 <I2C_IsErrorOccurred>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e02a      	b.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d01e      	beq.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff f9eb 	bl	80017a0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d113      	bne.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e007      	b.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d1cb      	bne.n	80023aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e028      	b.n	800247c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f830 	bl	8002494 <I2C_IsErrorOccurred>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e026      	b.n	800248c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	f7ff f9af 	bl	80017a0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d113      	bne.n	800247c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d1cf      	bne.n	800242a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	; 0x28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d075      	beq.n	80025ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2210      	movs	r2, #16
 80024c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024c8:	e056      	b.n	8002578 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d052      	beq.n	8002578 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff f965 	bl	80017a0 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <I2C_IsErrorOccurred+0x54>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d147      	bne.n	8002578 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250a:	d12e      	bne.n	800256a <I2C_IsErrorOccurred+0xd6>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002512:	d02a      	beq.n	800256a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b20      	cmp	r3, #32
 8002518:	d027      	beq.n	800256a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002528:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800252a:	f7ff f939 	bl	80017a0 <HAL_GetTick>
 800252e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002530:	e01b      	b.n	800256a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002532:	f7ff f935 	bl	80017a0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b19      	cmp	r3, #25
 800253e:	d914      	bls.n	800256a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b20      	cmp	r3, #32
 8002576:	d1dc      	bne.n	8002532 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d003      	beq.n	800258e <I2C_IsErrorOccurred+0xfa>
 8002586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800258a:	2b00      	cmp	r3, #0
 800258c:	d09d      	beq.n	80024ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800258e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2220      	movs	r2, #32
 800259c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff fe56 	bl	80022d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <I2C_IsErrorOccurred+0x1d4>)
 8002634:	400b      	ands	r3, r1
 8002636:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800265c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	fe00e800 	.word	0xfe00e800

0800266c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	460b      	mov	r3, r1
 8002678:	817b      	strh	r3, [r7, #10]
 800267a:	4613      	mov	r3, r2
 800267c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002684:	7a7b      	ldrb	r3, [r7, #9]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800268c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	4313      	orrs	r3, r2
 8002696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800269a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <I2C_TransferConfig+0x60>)
 80026ac:	430b      	orrs	r3, r1
 80026ae:	43db      	mvns	r3, r3
 80026b0:	ea02 0103 	and.w	r1, r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	03ff63ff 	.word	0x03ff63ff

080026d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d138      	bne.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e032      	b.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002722:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d139      	bne.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002786:	2302      	movs	r3, #2
 8002788:	e033      	b.n	80027f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2224      	movs	r2, #36	; 0x24
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e000      	b.n	80027f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_PWREx_GetVoltageRange+0x18>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282a:	d130      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002838:	d038      	beq.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2232      	movs	r2, #50	; 0x32
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002860:	e002      	b.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3b01      	subs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002874:	d102      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f2      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002888:	d110      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d007      	beq.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40007000 	.word	0x40007000
 80028c0:	20000000 	.word	0x20000000
 80028c4:	431bde83 	.word	0x431bde83

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f000 bc02 	b.w	80030e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4b96      	ldr	r3, [pc, #600]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e6:	4b94      	ldr	r3, [pc, #592]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80e4 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_RCC_OscConfig+0x4c>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	f040 808b 	bne.w	8002a22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 8087 	bne.w	8002a22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x64>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e3d9      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_RCC_OscConfig+0x7e>
 800293c:	4b7e      	ldr	r3, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	e005      	b.n	8002952 <HAL_RCC_OscConfig+0x8a>
 8002946:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	4293      	cmp	r3, r2
 8002954:	d223      	bcs.n	800299e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fd8c 	bl	8003478 <RCC_SetFlashLatencyFromMSIRange>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e3ba      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296a:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a72      	ldr	r2, [pc, #456]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	496d      	ldr	r1, [pc, #436]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	4968      	ldr	r1, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e025      	b.n	80029ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4960      	ldr	r1, [pc, #384]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029bc:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	495b      	ldr	r1, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fd4c 	bl	8003478 <RCC_SetFlashLatencyFromMSIRange>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e37a      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ea:	f000 fc81 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4950      	ldr	r1, [pc, #320]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_RCC_OscConfig+0x278>)
 8002a08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_RCC_OscConfig+0x27c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fe76 	bl	8001700 <HAL_InitTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d052      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	e35e      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d032      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a36:	f7fe feb3 	bl	80017a0 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a3e:	f7fe feaf 	bl	80017a0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e347      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a35      	ldr	r2, [pc, #212]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a62:	f043 0308 	orr.w	r3, r3, #8
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4930      	ldr	r1, [pc, #192]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	492b      	ldr	r1, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e01a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fe80 	bl	80017a0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fe7c 	bl	80017a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e314      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1dc>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d073      	beq.n	8002bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x21c>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d10e      	bne.n	8002afc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d063      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d15f      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e2f1      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x24c>
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e025      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d114      	bne.n	8002b48 <HAL_RCC_OscConfig+0x280>
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a02      	ldr	r2, [pc, #8]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x298>
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08006fa8 	.word	0x08006fa8
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004
 8002b48:	4ba0      	ldr	r3, [pc, #640]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a9f      	ldr	r2, [pc, #636]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b9d      	ldr	r3, [pc, #628]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a9c      	ldr	r2, [pc, #624]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fe1a 	bl	80017a0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fe16 	bl	80017a0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e2ae      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b82:	4b92      	ldr	r3, [pc, #584]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2a8>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fe06 	bl	80017a0 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fe02 	bl	80017a0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e29a      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2d0>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d060      	beq.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x310>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d119      	bne.n	8002c06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d116      	bne.n	8002c06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x328>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e277      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4973      	ldr	r1, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	e040      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6e      	ldr	r2, [pc, #440]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fdc1 	bl	80017a0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fdbd 	bl	80017a0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e255      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c34:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c40:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	495f      	ldr	r1, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fd9d 	bl	80017a0 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fd99 	bl	80017a0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e231      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fd78 	bl	80017a0 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fd74 	bl	80017a0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e20c      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3ec>
 8002cd4:	e01b      	b.n	8002d0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cdc:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fd5b 	bl	80017a0 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe fd57 	bl	80017a0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1ef      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a6 	beq.w	8002e68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6593      	str	r3, [r2, #88]	; 0x58
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d118      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fd1e 	bl	80017a0 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fe fd1a 	bl	80017a0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1b2      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x508>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4d8>
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9e:	e029      	b.n	8002df4 <HAL_RCC_OscConfig+0x52c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d115      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x50c>
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a03      	ldr	r2, [pc, #12]	; (8002dcc <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x52c>
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	4b9a      	ldr	r3, [pc, #616]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a99      	ldr	r2, [pc, #612]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a95      	ldr	r2, [pc, #596]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fcd0 	bl	80017a0 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fccc 	bl	80017a0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e162      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ed      	beq.n	8002e04 <HAL_RCC_OscConfig+0x53c>
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fcb9 	bl	80017a0 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fcb5 	bl	80017a0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e14b      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e48:	4b7d      	ldr	r3, [pc, #500]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ed      	bne.n	8002e32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b78      	ldr	r3, [pc, #480]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	4a77      	ldr	r2, [pc, #476]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7c:	4b70      	ldr	r3, [pc, #448]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e82:	4a6f      	ldr	r2, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fc88 	bl	80017a0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e94:	f7fe fc84 	bl	80017a0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e11c      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCC_OscConfig+0x5cc>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb6:	4b62      	ldr	r3, [pc, #392]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebc:	4a60      	ldr	r2, [pc, #384]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec6:	f7fe fc6b 	bl	80017a0 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ece:	f7fe fc67 	bl	80017a0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0ff      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee0:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ef      	bne.n	8002ece <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80f3 	beq.w	80030de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f040 80c9 	bne.w	8003094 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d12c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	3b01      	subs	r3, #1
 8002f22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d123      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d11b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d113      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d06b      	beq.n	8003048 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d062      	beq.n	800303c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0ac      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f92:	f7fe fc05 	bl	80017a0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fc01 	bl	80017a0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e099      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_RCC_OscConfig+0x77c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fc8:	3a01      	subs	r2, #1
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd2:	0212      	lsls	r2, r2, #8
 8002fd4:	4311      	orrs	r1, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0552      	lsls	r2, r2, #21
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fe6:	0852      	lsrs	r2, r2, #1
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	0652      	lsls	r2, r2, #25
 8002fec:	4311      	orrs	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff2:	06d2      	lsls	r2, r2, #27
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	4912      	ldr	r1, [pc, #72]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8003002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003006:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003014:	f7fe fbc4 	bl	80017a0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fbc0 	bl	80017a0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e058      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_OscConfig+0x778>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303a:	e050      	b.n	80030de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e04f      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
 8003040:	40021000 	.word	0x40021000
 8003044:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d144      	bne.n	80030de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a23      	ldr	r2, [pc, #140]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306c:	f7fe fb98 	bl	80017a0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fb94 	bl	80017a0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e02c      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x7ac>
 8003092:	e024      	b.n	80030de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d01f      	beq.n	80030da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fb7b 	bl	80017a0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fb77 	bl	80017a0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e00f      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4905      	ldr	r1, [pc, #20]	; (80030e8 <HAL_RCC_OscConfig+0x820>)
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCC_OscConfig+0x824>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
 80030d8:	e001      	b.n	80030de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	feeefffc 	.word	0xfeeefffc

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0e7      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b75      	ldr	r3, [pc, #468]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d910      	bls.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b72      	ldr	r3, [pc, #456]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0207 	bic.w	r2, r3, #7
 800311a:	4970      	ldr	r1, [pc, #448]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b6e      	ldr	r3, [pc, #440]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0cf      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314c:	429a      	cmp	r2, r3
 800314e:	d908      	bls.n	8003162 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4960      	ldr	r1, [pc, #384]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d04c      	beq.n	8003208 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0a6      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e09a      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a6:	4b4e      	ldr	r3, [pc, #312]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e08e      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e086      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4943      	ldr	r1, [pc, #268]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d8:	f7fe fae2 	bl	80017a0 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fade 	bl	80017a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e06e      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003220:	429a      	cmp	r2, r3
 8003222:	d208      	bcs.n	8003236 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	492b      	ldr	r1, [pc, #172]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d210      	bcs.n	8003266 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 0207 	bic.w	r2, r3, #7
 800324c:	4923      	ldr	r1, [pc, #140]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_RCC_ClockConfig+0x1ec>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e036      	b.n	80032d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4918      	ldr	r1, [pc, #96]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4910      	ldr	r1, [pc, #64]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a4:	f000 f824 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	490b      	ldr	r1, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1f4>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80032c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1fc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fa19 	bl	8001700 <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d2:	7afb      	ldrb	r3, [r7, #11]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08006fa8 	.word	0x08006fa8
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d121      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d11e      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e005      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d102      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e004      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d101      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <HAL_RCC_GetSysClockFreq+0x114>)
 8003376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d134      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0xa6>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d003      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xac>
 8003394:	e005      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 8003398:	617b      	str	r3, [r7, #20]
      break;
 800339a:	e005      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_GetSysClockFreq+0x114>)
 800339e:	617b      	str	r3, [r7, #20]
      break;
 80033a0:	e002      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	617b      	str	r3, [r7, #20]
      break;
 80033a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	3301      	adds	r3, #1
 80033b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	fb03 f202 	mul.w	r2, r3, r2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	0e5b      	lsrs	r3, r3, #25
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	3301      	adds	r3, #1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e8:	69bb      	ldr	r3, [r7, #24]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08006fc0 	.word	0x08006fc0
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08006fb8 	.word	0x08006fb8

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003450:	f7ff ffda 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0adb      	lsrs	r3, r3, #11
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08006fb8 	.word	0x08006fb8

08003478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003490:	f7ff f9b6 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 8003494:	6178      	str	r0, [r7, #20]
 8003496:	e014      	b.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6593      	str	r3, [r2, #88]	; 0x58
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b0:	f7ff f9a6 	bl	8002800 <HAL_PWREx_GetVoltageRange>
 80034b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d10b      	bne.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d919      	bls.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2ba0      	cmp	r3, #160	; 0xa0
 80034d4:	d902      	bls.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d6:	2302      	movs	r3, #2
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e013      	b.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034dc:	2301      	movs	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	e010      	b.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d902      	bls.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e8:	2303      	movs	r3, #3
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e00a      	b.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d102      	bne.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f4:	2302      	movs	r3, #2
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e004      	b.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b70      	cmp	r3, #112	; 0x70
 80034fe:	d101      	bne.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003500:	2301      	movs	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 0207 	bic.w	r2, r3, #7
 800350c:	4909      	ldr	r1, [pc, #36]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	40022000 	.word	0x40022000

08003538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003540:	2300      	movs	r3, #0
 8003542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003544:	2300      	movs	r3, #0
 8003546:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003550:	2b00      	cmp	r3, #0
 8003552:	d031      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355c:	d01a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800355e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003562:	d814      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003568:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356c:	d10f      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a5c      	ldr	r2, [pc, #368]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800357a:	e00c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa44 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	74fb      	strb	r3, [r7, #19]
      break;
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359c:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	494e      	ldr	r1, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 809e 	beq.w	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	4a3f      	ldr	r2, [pc, #252]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	; 0x58
 80035ec:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003608:	f7fe f8ca 	bl	80017a0 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800360e:	e009      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fe f8c6 	bl	80017a0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	74fb      	strb	r3, [r7, #19]
        break;
 8003622:	e005      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d15a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01e      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	429a      	cmp	r2, r3
 8003650:	d019      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d016      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe f886 	bl	80017a0 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003696:	e00b      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe f882 	bl	80017a0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d902      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	74fb      	strb	r3, [r7, #19]
            break;
 80036ae:	e006      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ec      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d2:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f0:	7c7b      	ldrb	r3, [r7, #17]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f6:	4b9e      	ldr	r3, [pc, #632]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	4a9d      	ldr	r2, [pc, #628]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003700:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370e:	4b98      	ldr	r3, [pc, #608]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 0203 	bic.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4994      	ldr	r1, [pc, #592]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003730:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 020c 	bic.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	498c      	ldr	r1, [pc, #560]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003752:	4b87      	ldr	r3, [pc, #540]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	4983      	ldr	r1, [pc, #524]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003774:	4b7e      	ldr	r3, [pc, #504]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	497b      	ldr	r1, [pc, #492]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4972      	ldr	r1, [pc, #456]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b8:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	496a      	ldr	r1, [pc, #424]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	4961      	ldr	r1, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	4959      	ldr	r1, [pc, #356]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381e:	4b54      	ldr	r3, [pc, #336]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	4950      	ldr	r1, [pc, #320]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	4948      	ldr	r1, [pc, #288]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003868:	f023 0203 	bic.w	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	493f      	ldr	r1, [pc, #252]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d028      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003884:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
 80038b0:	e011      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f8a4 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	491f      	ldr	r1, [pc, #124]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003900:	d106      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f875 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	4908      	ldr	r1, [pc, #32]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395e:	d109      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a02      	ldr	r2, [pc, #8]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
 800396c:	e014      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f843 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10c      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f820 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1e:	4b74      	ldr	r3, [pc, #464]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2a:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a42:	4b6b      	ldr	r3, [pc, #428]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
       ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d047      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e044      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d018      	beq.n	8003a96 <RCCEx_PLLSAI1_Config+0x86>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0x62>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d009      	beq.n	8003a84 <RCCEx_PLLSAI1_Config+0x74>
 8003a70:	e020      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11d      	bne.n	8003aba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e01a      	b.n	8003aba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a84:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e013      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab2:	e006      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e004      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4943      	ldr	r1, [pc, #268]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d17c      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3f      	ldr	r2, [pc, #252]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd fe52 	bl	80017a0 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b00:	f7fd fe4e 	bl	80017a0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
        break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ef      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d15f      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d110      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	06d2      	lsls	r2, r2, #27
 8003b44:	430a      	orrs	r2, r1
 8003b46:	492a      	ldr	r1, [pc, #168]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
 8003b4c:	e027      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d112      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b54:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	0211      	lsls	r1, r2, #8
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6912      	ldr	r2, [r2, #16]
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0552      	lsls	r2, r2, #21
 8003b70:	430a      	orrs	r2, r1
 8003b72:	491f      	ldr	r1, [pc, #124]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	610b      	str	r3, [r1, #16]
 8003b78:	e011      	b.n	8003b9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6892      	ldr	r2, [r2, #8]
 8003b8a:	0211      	lsls	r1, r2, #8
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6952      	ldr	r2, [r2, #20]
 8003b90:	0852      	lsrs	r2, r2, #1
 8003b92:	3a01      	subs	r2, #1
 8003b94:	0652      	lsls	r2, r2, #25
 8003b96:	430a      	orrs	r2, r1
 8003b98:	4915      	ldr	r1, [pc, #84]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fd fdf9 	bl	80017a0 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb0:	e009      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb2:	f7fd fdf5 	bl	80017a0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d902      	bls.n	8003bc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8003bc4:	e005      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ef      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e040      	b.n	8003c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fbca 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f82c 	bl	8003c90 <UART_SetConfig>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e022      	b.n	8003c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 faa6 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fb2d 	bl	80042e0 <UART_CheckIdleState>
 8003c86:	4603      	mov	r3, r0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b08a      	sub	sp, #40	; 0x28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4ba5      	ldr	r3, [pc, #660]	; (8003f54 <UART_SetConfig+0x2c4>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a9a      	ldr	r2, [pc, #616]	; (8003f58 <UART_SetConfig+0x2c8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a91      	ldr	r2, [pc, #580]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d126      	bne.n	8003d68 <UART_SetConfig+0xd8>
 8003d1a:	4b91      	ldr	r3, [pc, #580]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d81b      	bhi.n	8003d60 <UART_SetConfig+0xd0>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0xa0>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d51 	.word	0x08003d51
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e0d6      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e0d2      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003d50:	2304      	movs	r3, #4
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e0ce      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e0ca      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003d60:	2310      	movs	r3, #16
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e0c6      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a7d      	ldr	r2, [pc, #500]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d138      	bne.n	8003de4 <UART_SetConfig+0x154>
 8003d72:	4b7b      	ldr	r3, [pc, #492]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	d82d      	bhi.n	8003ddc <UART_SetConfig+0x14c>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <UART_SetConfig+0xf8>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003ddd 	.word	0x08003ddd
 8003d90:	08003ddd 	.word	0x08003ddd
 8003d94:	08003ddd 	.word	0x08003ddd
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003ddd 	.word	0x08003ddd
 8003da0:	08003ddd 	.word	0x08003ddd
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003dc5 	.word	0x08003dc5
 8003dac:	08003ddd 	.word	0x08003ddd
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003dd5 	.word	0x08003dd5
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e098      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	e094      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e090      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e08c      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e088      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a5f      	ldr	r2, [pc, #380]	; (8003f68 <UART_SetConfig+0x2d8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d125      	bne.n	8003e3a <UART_SetConfig+0x1aa>
 8003dee:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d016      	beq.n	8003e2a <UART_SetConfig+0x19a>
 8003dfc:	2b30      	cmp	r3, #48	; 0x30
 8003dfe:	d818      	bhi.n	8003e32 <UART_SetConfig+0x1a2>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d00a      	beq.n	8003e1a <UART_SetConfig+0x18a>
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d814      	bhi.n	8003e32 <UART_SetConfig+0x1a2>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <UART_SetConfig+0x182>
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d008      	beq.n	8003e22 <UART_SetConfig+0x192>
 8003e10:	e00f      	b.n	8003e32 <UART_SetConfig+0x1a2>
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e18:	e06d      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e20:	e069      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e22:	2304      	movs	r3, #4
 8003e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e28:	e065      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e30:	e061      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e32:	2310      	movs	r3, #16
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e38:	e05d      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <UART_SetConfig+0x2dc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d125      	bne.n	8003e90 <UART_SetConfig+0x200>
 8003e44:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e50:	d016      	beq.n	8003e80 <UART_SetConfig+0x1f0>
 8003e52:	2bc0      	cmp	r3, #192	; 0xc0
 8003e54:	d818      	bhi.n	8003e88 <UART_SetConfig+0x1f8>
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d00a      	beq.n	8003e70 <UART_SetConfig+0x1e0>
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d814      	bhi.n	8003e88 <UART_SetConfig+0x1f8>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x1d8>
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d008      	beq.n	8003e78 <UART_SetConfig+0x1e8>
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x1f8>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e042      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e03e      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7e:	e03a      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e80:	2308      	movs	r3, #8
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e86:	e036      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e032      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <UART_SetConfig+0x2c8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d12a      	bne.n	8003ef0 <UART_SetConfig+0x260>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ea8:	d01a      	beq.n	8003ee0 <UART_SetConfig+0x250>
 8003eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eae:	d81b      	bhi.n	8003ee8 <UART_SetConfig+0x258>
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d00c      	beq.n	8003ed0 <UART_SetConfig+0x240>
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eba:	d815      	bhi.n	8003ee8 <UART_SetConfig+0x258>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <UART_SetConfig+0x238>
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d008      	beq.n	8003ed8 <UART_SetConfig+0x248>
 8003ec6:	e00f      	b.n	8003ee8 <UART_SetConfig+0x258>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e012      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e00e      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e00a      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e006      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e002      	b.n	8003ef6 <UART_SetConfig+0x266>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <UART_SetConfig+0x2c8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	f040 808b 	bne.w	8004018 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d834      	bhi.n	8003f74 <UART_SetConfig+0x2e4>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <UART_SetConfig+0x280>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f75 	.word	0x08003f75
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f43 	.word	0x08003f43
 8003f24:	08003f75 	.word	0x08003f75
 8003f28:	08003f75 	.word	0x08003f75
 8003f2c:	08003f75 	.word	0x08003f75
 8003f30:	08003f4b 	.word	0x08003f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f34:	f7ff fa74 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8003f38:	61f8      	str	r0, [r7, #28]
        break;
 8003f3a:	e021      	b.n	8003f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <UART_SetConfig+0x2e0>)
 8003f3e:	61fb      	str	r3, [r7, #28]
        break;
 8003f40:	e01e      	b.n	8003f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f42:	f7ff f9d5 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8003f46:	61f8      	str	r0, [r7, #28]
        break;
 8003f48:	e01a      	b.n	8003f80 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4e:	61fb      	str	r3, [r7, #28]
        break;
 8003f50:	e016      	b.n	8003f80 <UART_SetConfig+0x2f0>
 8003f52:	bf00      	nop
 8003f54:	efff69f3 	.word	0xefff69f3
 8003f58:	40008000 	.word	0x40008000
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40004400 	.word	0x40004400
 8003f68:	40004800 	.word	0x40004800
 8003f6c:	40004c00 	.word	0x40004c00
 8003f70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80fa 	beq.w	800417c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d305      	bcc.n	8003fa4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d903      	bls.n	8003fac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003faa:	e0e7      	b.n	800417c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	4615      	mov	r5, r2
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	022b      	lsls	r3, r5, #8
 8003fbe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fc2:	0222      	lsls	r2, r4, #8
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	6849      	ldr	r1, [r1, #4]
 8003fc8:	0849      	lsrs	r1, r1, #1
 8003fca:	2000      	movs	r0, #0
 8003fcc:	4688      	mov	r8, r1
 8003fce:	4681      	mov	r9, r0
 8003fd0:	eb12 0a08 	adds.w	sl, r2, r8
 8003fd4:	eb43 0b09 	adc.w	fp, r3, r9
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	4659      	mov	r1, fp
 8003fea:	f7fc fde5 	bl	8000bb8 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffc:	d308      	bcc.n	8004010 <UART_SetConfig+0x380>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004004:	d204      	bcs.n	8004010 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	e0b5      	b.n	800417c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004016:	e0b1      	b.n	800417c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004020:	d15d      	bne.n	80040de <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004026:	2b08      	cmp	r3, #8
 8004028:	d827      	bhi.n	800407a <UART_SetConfig+0x3ea>
 800402a:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0x3a0>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	0800407b 	.word	0x0800407b
 8004040:	0800406b 	.word	0x0800406b
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800407b 	.word	0x0800407b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7ff f9e4 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004058:	61f8      	str	r0, [r7, #28]
        break;
 800405a:	e014      	b.n	8004086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7ff f9f6 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004060:	61f8      	str	r0, [r7, #28]
        break;
 8004062:	e010      	b.n	8004086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <UART_SetConfig+0x508>)
 8004066:	61fb      	str	r3, [r7, #28]
        break;
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7ff f941 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800406e:	61f8      	str	r0, [r7, #28]
        break;
 8004070:	e009      	b.n	8004086 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e005      	b.n	8004086 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d077      	beq.n	800417c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005a      	lsls	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085b      	lsrs	r3, r3, #1
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d916      	bls.n	80040d6 <UART_SetConfig+0x446>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ae:	d212      	bcs.n	80040d6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f023 030f 	bic.w	r3, r3, #15
 80040b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	8afb      	ldrh	r3, [r7, #22]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	8afa      	ldrh	r2, [r7, #22]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e052      	b.n	800417c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040dc:	e04e      	b.n	800417c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d827      	bhi.n	8004136 <UART_SetConfig+0x4a6>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <UART_SetConfig+0x45c>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004121 	.word	0x08004121
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004127 	.word	0x08004127
 8004100:	08004137 	.word	0x08004137
 8004104:	08004137 	.word	0x08004137
 8004108:	08004137 	.word	0x08004137
 800410c:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff f986 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004114:	61f8      	str	r0, [r7, #28]
        break;
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7ff f998 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <UART_SetConfig+0x508>)
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7ff f8e3 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800412a:	61f8      	str	r0, [r7, #28]
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004140:	bf00      	nop
    }

    if (pclk != 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d019      	beq.n	800417c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	085a      	lsrs	r2, r3, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0f      	cmp	r3, #15
 8004160:	d909      	bls.n	8004176 <UART_SetConfig+0x4e6>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d205      	bcs.n	8004176 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	e002      	b.n	800417c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004188:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004196:	bf00      	nop
 8004198:	00f42400 	.word	0x00f42400

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429a:	d10a      	bne.n	80042b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f0:	f7fd fa56 	bl	80017a0 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d10e      	bne.n	8004322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f82d 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e023      	b.n	800436a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d10e      	bne.n	800434e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f817 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00d      	b.n	800436a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b09c      	sub	sp, #112	; 0x70
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	e0a5      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	f000 80a1 	beq.w	80044d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fd fa07 	bl	80017a0 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800439e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d13e      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043b8:	667b      	str	r3, [r7, #100]	; 0x64
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e6      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3308      	adds	r3, #8
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	663b      	str	r3, [r7, #96]	; 0x60
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80043f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e5      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e067      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d04f      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d147      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004448:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800445e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
 800446a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800446e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	613b      	str	r3, [r7, #16]
   return(result);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	66bb      	str	r3, [r7, #104]	; 0x68
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800449c:	623a      	str	r2, [r7, #32]
 800449e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	69f9      	ldr	r1, [r7, #28]
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e010      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	429a      	cmp	r2, r3
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	f43f af4a 	beq.w	8004384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3770      	adds	r7, #112	; 0x70
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <__errno>:
 80044fc:	4b01      	ldr	r3, [pc, #4]	; (8004504 <__errno+0x8>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000000c 	.word	0x2000000c

08004508 <__libc_init_array>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	4d0d      	ldr	r5, [pc, #52]	; (8004540 <__libc_init_array+0x38>)
 800450c:	4c0d      	ldr	r4, [pc, #52]	; (8004544 <__libc_init_array+0x3c>)
 800450e:	1b64      	subs	r4, r4, r5
 8004510:	10a4      	asrs	r4, r4, #2
 8004512:	2600      	movs	r6, #0
 8004514:	42a6      	cmp	r6, r4
 8004516:	d109      	bne.n	800452c <__libc_init_array+0x24>
 8004518:	4d0b      	ldr	r5, [pc, #44]	; (8004548 <__libc_init_array+0x40>)
 800451a:	4c0c      	ldr	r4, [pc, #48]	; (800454c <__libc_init_array+0x44>)
 800451c:	f002 fd38 	bl	8006f90 <_init>
 8004520:	1b64      	subs	r4, r4, r5
 8004522:	10a4      	asrs	r4, r4, #2
 8004524:	2600      	movs	r6, #0
 8004526:	42a6      	cmp	r6, r4
 8004528:	d105      	bne.n	8004536 <__libc_init_array+0x2e>
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004530:	4798      	blx	r3
 8004532:	3601      	adds	r6, #1
 8004534:	e7ee      	b.n	8004514 <__libc_init_array+0xc>
 8004536:	f855 3b04 	ldr.w	r3, [r5], #4
 800453a:	4798      	blx	r3
 800453c:	3601      	adds	r6, #1
 800453e:	e7f2      	b.n	8004526 <__libc_init_array+0x1e>
 8004540:	080073d4 	.word	0x080073d4
 8004544:	080073d4 	.word	0x080073d4
 8004548:	080073d4 	.word	0x080073d4
 800454c:	080073d8 	.word	0x080073d8

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <__cvt>:
 8004560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	ec55 4b10 	vmov	r4, r5, d0
 8004568:	2d00      	cmp	r5, #0
 800456a:	460e      	mov	r6, r1
 800456c:	4619      	mov	r1, r3
 800456e:	462b      	mov	r3, r5
 8004570:	bfbb      	ittet	lt
 8004572:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004576:	461d      	movlt	r5, r3
 8004578:	2300      	movge	r3, #0
 800457a:	232d      	movlt	r3, #45	; 0x2d
 800457c:	700b      	strb	r3, [r1, #0]
 800457e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004580:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004584:	4691      	mov	r9, r2
 8004586:	f023 0820 	bic.w	r8, r3, #32
 800458a:	bfbc      	itt	lt
 800458c:	4622      	movlt	r2, r4
 800458e:	4614      	movlt	r4, r2
 8004590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004594:	d005      	beq.n	80045a2 <__cvt+0x42>
 8004596:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800459a:	d100      	bne.n	800459e <__cvt+0x3e>
 800459c:	3601      	adds	r6, #1
 800459e:	2102      	movs	r1, #2
 80045a0:	e000      	b.n	80045a4 <__cvt+0x44>
 80045a2:	2103      	movs	r1, #3
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	ab02      	add	r3, sp, #8
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	ec45 4b10 	vmov	d0, r4, r5
 80045b0:	4653      	mov	r3, sl
 80045b2:	4632      	mov	r2, r6
 80045b4:	f000 fccc 	bl	8004f50 <_dtoa_r>
 80045b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045bc:	4607      	mov	r7, r0
 80045be:	d102      	bne.n	80045c6 <__cvt+0x66>
 80045c0:	f019 0f01 	tst.w	r9, #1
 80045c4:	d022      	beq.n	800460c <__cvt+0xac>
 80045c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045ca:	eb07 0906 	add.w	r9, r7, r6
 80045ce:	d110      	bne.n	80045f2 <__cvt+0x92>
 80045d0:	783b      	ldrb	r3, [r7, #0]
 80045d2:	2b30      	cmp	r3, #48	; 0x30
 80045d4:	d10a      	bne.n	80045ec <__cvt+0x8c>
 80045d6:	2200      	movs	r2, #0
 80045d8:	2300      	movs	r3, #0
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fc fa7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80045e2:	b918      	cbnz	r0, 80045ec <__cvt+0x8c>
 80045e4:	f1c6 0601 	rsb	r6, r6, #1
 80045e8:	f8ca 6000 	str.w	r6, [sl]
 80045ec:	f8da 3000 	ldr.w	r3, [sl]
 80045f0:	4499      	add	r9, r3
 80045f2:	2200      	movs	r2, #0
 80045f4:	2300      	movs	r3, #0
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fc fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80045fe:	b108      	cbz	r0, 8004604 <__cvt+0xa4>
 8004600:	f8cd 900c 	str.w	r9, [sp, #12]
 8004604:	2230      	movs	r2, #48	; 0x30
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	454b      	cmp	r3, r9
 800460a:	d307      	bcc.n	800461c <__cvt+0xbc>
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004610:	1bdb      	subs	r3, r3, r7
 8004612:	4638      	mov	r0, r7
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	b004      	add	sp, #16
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	9103      	str	r1, [sp, #12]
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e7f0      	b.n	8004606 <__cvt+0xa6>

08004624 <__exponent>:
 8004624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004626:	4603      	mov	r3, r0
 8004628:	2900      	cmp	r1, #0
 800462a:	bfb8      	it	lt
 800462c:	4249      	neglt	r1, r1
 800462e:	f803 2b02 	strb.w	r2, [r3], #2
 8004632:	bfb4      	ite	lt
 8004634:	222d      	movlt	r2, #45	; 0x2d
 8004636:	222b      	movge	r2, #43	; 0x2b
 8004638:	2909      	cmp	r1, #9
 800463a:	7042      	strb	r2, [r0, #1]
 800463c:	dd2a      	ble.n	8004694 <__exponent+0x70>
 800463e:	f10d 0407 	add.w	r4, sp, #7
 8004642:	46a4      	mov	ip, r4
 8004644:	270a      	movs	r7, #10
 8004646:	46a6      	mov	lr, r4
 8004648:	460a      	mov	r2, r1
 800464a:	fb91 f6f7 	sdiv	r6, r1, r7
 800464e:	fb07 1516 	mls	r5, r7, r6, r1
 8004652:	3530      	adds	r5, #48	; 0x30
 8004654:	2a63      	cmp	r2, #99	; 0x63
 8004656:	f104 34ff 	add.w	r4, r4, #4294967295
 800465a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800465e:	4631      	mov	r1, r6
 8004660:	dcf1      	bgt.n	8004646 <__exponent+0x22>
 8004662:	3130      	adds	r1, #48	; 0x30
 8004664:	f1ae 0502 	sub.w	r5, lr, #2
 8004668:	f804 1c01 	strb.w	r1, [r4, #-1]
 800466c:	1c44      	adds	r4, r0, #1
 800466e:	4629      	mov	r1, r5
 8004670:	4561      	cmp	r1, ip
 8004672:	d30a      	bcc.n	800468a <__exponent+0x66>
 8004674:	f10d 0209 	add.w	r2, sp, #9
 8004678:	eba2 020e 	sub.w	r2, r2, lr
 800467c:	4565      	cmp	r5, ip
 800467e:	bf88      	it	hi
 8004680:	2200      	movhi	r2, #0
 8004682:	4413      	add	r3, r2
 8004684:	1a18      	subs	r0, r3, r0
 8004686:	b003      	add	sp, #12
 8004688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800468a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800468e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004692:	e7ed      	b.n	8004670 <__exponent+0x4c>
 8004694:	2330      	movs	r3, #48	; 0x30
 8004696:	3130      	adds	r1, #48	; 0x30
 8004698:	7083      	strb	r3, [r0, #2]
 800469a:	70c1      	strb	r1, [r0, #3]
 800469c:	1d03      	adds	r3, r0, #4
 800469e:	e7f1      	b.n	8004684 <__exponent+0x60>

080046a0 <_printf_float>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	ed2d 8b02 	vpush	{d8}
 80046a8:	b08d      	sub	sp, #52	; 0x34
 80046aa:	460c      	mov	r4, r1
 80046ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046b0:	4616      	mov	r6, r2
 80046b2:	461f      	mov	r7, r3
 80046b4:	4605      	mov	r5, r0
 80046b6:	f001 fa39 	bl	8005b2c <_localeconv_r>
 80046ba:	f8d0 a000 	ldr.w	sl, [r0]
 80046be:	4650      	mov	r0, sl
 80046c0:	f7fb fd8e 	bl	80001e0 <strlen>
 80046c4:	2300      	movs	r3, #0
 80046c6:	930a      	str	r3, [sp, #40]	; 0x28
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	9305      	str	r3, [sp, #20]
 80046cc:	f8d8 3000 	ldr.w	r3, [r8]
 80046d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046d4:	3307      	adds	r3, #7
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	f8c8 2000 	str.w	r2, [r8]
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046f2:	9307      	str	r3, [sp, #28]
 80046f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80046f8:	ee08 0a10 	vmov	s16, r0
 80046fc:	4b9f      	ldr	r3, [pc, #636]	; (800497c <_printf_float+0x2dc>)
 80046fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004702:	f04f 32ff 	mov.w	r2, #4294967295
 8004706:	f7fc fa19 	bl	8000b3c <__aeabi_dcmpun>
 800470a:	bb88      	cbnz	r0, 8004770 <_printf_float+0xd0>
 800470c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004710:	4b9a      	ldr	r3, [pc, #616]	; (800497c <_printf_float+0x2dc>)
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	f7fc f9f3 	bl	8000b00 <__aeabi_dcmple>
 800471a:	bb48      	cbnz	r0, 8004770 <_printf_float+0xd0>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	4640      	mov	r0, r8
 8004722:	4649      	mov	r1, r9
 8004724:	f7fc f9e2 	bl	8000aec <__aeabi_dcmplt>
 8004728:	b110      	cbz	r0, 8004730 <_printf_float+0x90>
 800472a:	232d      	movs	r3, #45	; 0x2d
 800472c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004730:	4b93      	ldr	r3, [pc, #588]	; (8004980 <_printf_float+0x2e0>)
 8004732:	4894      	ldr	r0, [pc, #592]	; (8004984 <_printf_float+0x2e4>)
 8004734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004738:	bf94      	ite	ls
 800473a:	4698      	movls	r8, r3
 800473c:	4680      	movhi	r8, r0
 800473e:	2303      	movs	r3, #3
 8004740:	6123      	str	r3, [r4, #16]
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	f023 0204 	bic.w	r2, r3, #4
 8004748:	6022      	str	r2, [r4, #0]
 800474a:	f04f 0900 	mov.w	r9, #0
 800474e:	9700      	str	r7, [sp, #0]
 8004750:	4633      	mov	r3, r6
 8004752:	aa0b      	add	r2, sp, #44	; 0x2c
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	f000 f9d8 	bl	8004b0c <_printf_common>
 800475c:	3001      	adds	r0, #1
 800475e:	f040 8090 	bne.w	8004882 <_printf_float+0x1e2>
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	b00d      	add	sp, #52	; 0x34
 8004768:	ecbd 8b02 	vpop	{d8}
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	4640      	mov	r0, r8
 8004776:	4649      	mov	r1, r9
 8004778:	f7fc f9e0 	bl	8000b3c <__aeabi_dcmpun>
 800477c:	b140      	cbz	r0, 8004790 <_printf_float+0xf0>
 800477e:	464b      	mov	r3, r9
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfbc      	itt	lt
 8004784:	232d      	movlt	r3, #45	; 0x2d
 8004786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800478a:	487f      	ldr	r0, [pc, #508]	; (8004988 <_printf_float+0x2e8>)
 800478c:	4b7f      	ldr	r3, [pc, #508]	; (800498c <_printf_float+0x2ec>)
 800478e:	e7d1      	b.n	8004734 <_printf_float+0x94>
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004796:	9206      	str	r2, [sp, #24]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	d13f      	bne.n	800481c <_printf_float+0x17c>
 800479c:	2306      	movs	r3, #6
 800479e:	6063      	str	r3, [r4, #4]
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	6861      	ldr	r1, [r4, #4]
 80047a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047a8:	2300      	movs	r3, #0
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	ab0a      	add	r3, sp, #40	; 0x28
 80047ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047b2:	ab09      	add	r3, sp, #36	; 0x24
 80047b4:	ec49 8b10 	vmov	d0, r8, r9
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6022      	str	r2, [r4, #0]
 80047bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7ff fecd 	bl	8004560 <__cvt>
 80047c6:	9b06      	ldr	r3, [sp, #24]
 80047c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ca:	2b47      	cmp	r3, #71	; 0x47
 80047cc:	4680      	mov	r8, r0
 80047ce:	d108      	bne.n	80047e2 <_printf_float+0x142>
 80047d0:	1cc8      	adds	r0, r1, #3
 80047d2:	db02      	blt.n	80047da <_printf_float+0x13a>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	4299      	cmp	r1, r3
 80047d8:	dd41      	ble.n	800485e <_printf_float+0x1be>
 80047da:	f1ab 0b02 	sub.w	fp, fp, #2
 80047de:	fa5f fb8b 	uxtb.w	fp, fp
 80047e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047e6:	d820      	bhi.n	800482a <_printf_float+0x18a>
 80047e8:	3901      	subs	r1, #1
 80047ea:	465a      	mov	r2, fp
 80047ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047f0:	9109      	str	r1, [sp, #36]	; 0x24
 80047f2:	f7ff ff17 	bl	8004624 <__exponent>
 80047f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047f8:	1813      	adds	r3, r2, r0
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	4681      	mov	r9, r0
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	dc02      	bgt.n	8004808 <_printf_float+0x168>
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	07d2      	lsls	r2, r2, #31
 8004806:	d501      	bpl.n	800480c <_printf_float+0x16c>
 8004808:	3301      	adds	r3, #1
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004810:	2b00      	cmp	r3, #0
 8004812:	d09c      	beq.n	800474e <_printf_float+0xae>
 8004814:	232d      	movs	r3, #45	; 0x2d
 8004816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800481a:	e798      	b.n	800474e <_printf_float+0xae>
 800481c:	9a06      	ldr	r2, [sp, #24]
 800481e:	2a47      	cmp	r2, #71	; 0x47
 8004820:	d1be      	bne.n	80047a0 <_printf_float+0x100>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1bc      	bne.n	80047a0 <_printf_float+0x100>
 8004826:	2301      	movs	r3, #1
 8004828:	e7b9      	b.n	800479e <_printf_float+0xfe>
 800482a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800482e:	d118      	bne.n	8004862 <_printf_float+0x1c2>
 8004830:	2900      	cmp	r1, #0
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	dd0b      	ble.n	800484e <_printf_float+0x1ae>
 8004836:	6121      	str	r1, [r4, #16]
 8004838:	b913      	cbnz	r3, 8004840 <_printf_float+0x1a0>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	07d0      	lsls	r0, r2, #31
 800483e:	d502      	bpl.n	8004846 <_printf_float+0x1a6>
 8004840:	3301      	adds	r3, #1
 8004842:	440b      	add	r3, r1
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	65a1      	str	r1, [r4, #88]	; 0x58
 8004848:	f04f 0900 	mov.w	r9, #0
 800484c:	e7de      	b.n	800480c <_printf_float+0x16c>
 800484e:	b913      	cbnz	r3, 8004856 <_printf_float+0x1b6>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	07d2      	lsls	r2, r2, #31
 8004854:	d501      	bpl.n	800485a <_printf_float+0x1ba>
 8004856:	3302      	adds	r3, #2
 8004858:	e7f4      	b.n	8004844 <_printf_float+0x1a4>
 800485a:	2301      	movs	r3, #1
 800485c:	e7f2      	b.n	8004844 <_printf_float+0x1a4>
 800485e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004864:	4299      	cmp	r1, r3
 8004866:	db05      	blt.n	8004874 <_printf_float+0x1d4>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	6121      	str	r1, [r4, #16]
 800486c:	07d8      	lsls	r0, r3, #31
 800486e:	d5ea      	bpl.n	8004846 <_printf_float+0x1a6>
 8004870:	1c4b      	adds	r3, r1, #1
 8004872:	e7e7      	b.n	8004844 <_printf_float+0x1a4>
 8004874:	2900      	cmp	r1, #0
 8004876:	bfd4      	ite	le
 8004878:	f1c1 0202 	rsble	r2, r1, #2
 800487c:	2201      	movgt	r2, #1
 800487e:	4413      	add	r3, r2
 8004880:	e7e0      	b.n	8004844 <_printf_float+0x1a4>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	055a      	lsls	r2, r3, #21
 8004886:	d407      	bmi.n	8004898 <_printf_float+0x1f8>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	4642      	mov	r2, r8
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	d12c      	bne.n	80048f0 <_printf_float+0x250>
 8004896:	e764      	b.n	8004762 <_printf_float+0xc2>
 8004898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800489c:	f240 80e0 	bls.w	8004a60 <_printf_float+0x3c0>
 80048a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048a4:	2200      	movs	r2, #0
 80048a6:	2300      	movs	r3, #0
 80048a8:	f7fc f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d034      	beq.n	800491a <_printf_float+0x27a>
 80048b0:	4a37      	ldr	r2, [pc, #220]	; (8004990 <_printf_float+0x2f0>)
 80048b2:	2301      	movs	r3, #1
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f af51 	beq.w	8004762 <_printf_float+0xc2>
 80048c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c4:	429a      	cmp	r2, r3
 80048c6:	db02      	blt.n	80048ce <_printf_float+0x22e>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	07d8      	lsls	r0, r3, #31
 80048cc:	d510      	bpl.n	80048f0 <_printf_float+0x250>
 80048ce:	ee18 3a10 	vmov	r3, s16
 80048d2:	4652      	mov	r2, sl
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f af41 	beq.w	8004762 <_printf_float+0xc2>
 80048e0:	f04f 0800 	mov.w	r8, #0
 80048e4:	f104 091a 	add.w	r9, r4, #26
 80048e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	4543      	cmp	r3, r8
 80048ee:	dc09      	bgt.n	8004904 <_printf_float+0x264>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	079b      	lsls	r3, r3, #30
 80048f4:	f100 8105 	bmi.w	8004b02 <_printf_float+0x462>
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fc:	4298      	cmp	r0, r3
 80048fe:	bfb8      	it	lt
 8004900:	4618      	movlt	r0, r3
 8004902:	e730      	b.n	8004766 <_printf_float+0xc6>
 8004904:	2301      	movs	r3, #1
 8004906:	464a      	mov	r2, r9
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f af27 	beq.w	8004762 <_printf_float+0xc2>
 8004914:	f108 0801 	add.w	r8, r8, #1
 8004918:	e7e6      	b.n	80048e8 <_printf_float+0x248>
 800491a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	dc39      	bgt.n	8004994 <_printf_float+0x2f4>
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <_printf_float+0x2f0>)
 8004922:	2301      	movs	r3, #1
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f43f af19 	beq.w	8004762 <_printf_float+0xc2>
 8004930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004934:	4313      	orrs	r3, r2
 8004936:	d102      	bne.n	800493e <_printf_float+0x29e>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d5d8      	bpl.n	80048f0 <_printf_float+0x250>
 800493e:	ee18 3a10 	vmov	r3, s16
 8004942:	4652      	mov	r2, sl
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af09 	beq.w	8004762 <_printf_float+0xc2>
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	f104 0a1a 	add.w	sl, r4, #26
 8004958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495a:	425b      	negs	r3, r3
 800495c:	454b      	cmp	r3, r9
 800495e:	dc01      	bgt.n	8004964 <_printf_float+0x2c4>
 8004960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004962:	e792      	b.n	800488a <_printf_float+0x1ea>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f aef7 	beq.w	8004762 <_printf_float+0xc2>
 8004974:	f109 0901 	add.w	r9, r9, #1
 8004978:	e7ee      	b.n	8004958 <_printf_float+0x2b8>
 800497a:	bf00      	nop
 800497c:	7fefffff 	.word	0x7fefffff
 8004980:	08006ff4 	.word	0x08006ff4
 8004984:	08006ff8 	.word	0x08006ff8
 8004988:	08007000 	.word	0x08007000
 800498c:	08006ffc 	.word	0x08006ffc
 8004990:	08007004 	.word	0x08007004
 8004994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004998:	429a      	cmp	r2, r3
 800499a:	bfa8      	it	ge
 800499c:	461a      	movge	r2, r3
 800499e:	2a00      	cmp	r2, #0
 80049a0:	4691      	mov	r9, r2
 80049a2:	dc37      	bgt.n	8004a14 <_printf_float+0x374>
 80049a4:	f04f 0b00 	mov.w	fp, #0
 80049a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ac:	f104 021a 	add.w	r2, r4, #26
 80049b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	eba3 0309 	sub.w	r3, r3, r9
 80049b8:	455b      	cmp	r3, fp
 80049ba:	dc33      	bgt.n	8004a24 <_printf_float+0x384>
 80049bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c0:	429a      	cmp	r2, r3
 80049c2:	db3b      	blt.n	8004a3c <_printf_float+0x39c>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	07da      	lsls	r2, r3, #31
 80049c8:	d438      	bmi.n	8004a3c <_printf_float+0x39c>
 80049ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049cc:	9a05      	ldr	r2, [sp, #20]
 80049ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049d0:	1a9a      	subs	r2, r3, r2
 80049d2:	eba3 0901 	sub.w	r9, r3, r1
 80049d6:	4591      	cmp	r9, r2
 80049d8:	bfa8      	it	ge
 80049da:	4691      	movge	r9, r2
 80049dc:	f1b9 0f00 	cmp.w	r9, #0
 80049e0:	dc35      	bgt.n	8004a4e <_printf_float+0x3ae>
 80049e2:	f04f 0800 	mov.w	r8, #0
 80049e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049ea:	f104 0a1a 	add.w	sl, r4, #26
 80049ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	eba3 0309 	sub.w	r3, r3, r9
 80049f8:	4543      	cmp	r3, r8
 80049fa:	f77f af79 	ble.w	80048f0 <_printf_float+0x250>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	4631      	mov	r1, r6
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b8      	blx	r7
 8004a08:	3001      	adds	r0, #1
 8004a0a:	f43f aeaa 	beq.w	8004762 <_printf_float+0xc2>
 8004a0e:	f108 0801 	add.w	r8, r8, #1
 8004a12:	e7ec      	b.n	80049ee <_printf_float+0x34e>
 8004a14:	4613      	mov	r3, r2
 8004a16:	4631      	mov	r1, r6
 8004a18:	4642      	mov	r2, r8
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d1c0      	bne.n	80049a4 <_printf_float+0x304>
 8004a22:	e69e      	b.n	8004762 <_printf_float+0xc2>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	9205      	str	r2, [sp, #20]
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f ae97 	beq.w	8004762 <_printf_float+0xc2>
 8004a34:	9a05      	ldr	r2, [sp, #20]
 8004a36:	f10b 0b01 	add.w	fp, fp, #1
 8004a3a:	e7b9      	b.n	80049b0 <_printf_float+0x310>
 8004a3c:	ee18 3a10 	vmov	r3, s16
 8004a40:	4652      	mov	r2, sl
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d1be      	bne.n	80049ca <_printf_float+0x32a>
 8004a4c:	e689      	b.n	8004762 <_printf_float+0xc2>
 8004a4e:	9a05      	ldr	r2, [sp, #20]
 8004a50:	464b      	mov	r3, r9
 8004a52:	4442      	add	r2, r8
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d1c1      	bne.n	80049e2 <_printf_float+0x342>
 8004a5e:	e680      	b.n	8004762 <_printf_float+0xc2>
 8004a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a62:	2a01      	cmp	r2, #1
 8004a64:	dc01      	bgt.n	8004a6a <_printf_float+0x3ca>
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	d538      	bpl.n	8004adc <_printf_float+0x43c>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b8      	blx	r7
 8004a74:	3001      	adds	r0, #1
 8004a76:	f43f ae74 	beq.w	8004762 <_printf_float+0xc2>
 8004a7a:	ee18 3a10 	vmov	r3, s16
 8004a7e:	4652      	mov	r2, sl
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	f43f ae6b 	beq.w	8004762 <_printf_float+0xc2>
 8004a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a90:	2200      	movs	r2, #0
 8004a92:	2300      	movs	r3, #0
 8004a94:	f7fc f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a98:	b9d8      	cbnz	r0, 8004ad2 <_printf_float+0x432>
 8004a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a9c:	f108 0201 	add.w	r2, r8, #1
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d10e      	bne.n	8004aca <_printf_float+0x42a>
 8004aac:	e659      	b.n	8004762 <_printf_float+0xc2>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b8      	blx	r7
 8004ab8:	3001      	adds	r0, #1
 8004aba:	f43f ae52 	beq.w	8004762 <_printf_float+0xc2>
 8004abe:	f108 0801 	add.w	r8, r8, #1
 8004ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	4543      	cmp	r3, r8
 8004ac8:	dcf1      	bgt.n	8004aae <_printf_float+0x40e>
 8004aca:	464b      	mov	r3, r9
 8004acc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad0:	e6dc      	b.n	800488c <_printf_float+0x1ec>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	f104 0a1a 	add.w	sl, r4, #26
 8004ada:	e7f2      	b.n	8004ac2 <_printf_float+0x422>
 8004adc:	2301      	movs	r3, #1
 8004ade:	4642      	mov	r2, r8
 8004ae0:	e7df      	b.n	8004aa2 <_printf_float+0x402>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	464a      	mov	r2, r9
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f ae38 	beq.w	8004762 <_printf_float+0xc2>
 8004af2:	f108 0801 	add.w	r8, r8, #1
 8004af6:	68e3      	ldr	r3, [r4, #12]
 8004af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004afa:	1a5b      	subs	r3, r3, r1
 8004afc:	4543      	cmp	r3, r8
 8004afe:	dcf0      	bgt.n	8004ae2 <_printf_float+0x442>
 8004b00:	e6fa      	b.n	80048f8 <_printf_float+0x258>
 8004b02:	f04f 0800 	mov.w	r8, #0
 8004b06:	f104 0919 	add.w	r9, r4, #25
 8004b0a:	e7f4      	b.n	8004af6 <_printf_float+0x456>

08004b0c <_printf_common>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4616      	mov	r6, r2
 8004b12:	4699      	mov	r9, r3
 8004b14:	688a      	ldr	r2, [r1, #8]
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bfb8      	it	lt
 8004b20:	4613      	movlt	r3, r2
 8004b22:	6033      	str	r3, [r6, #0]
 8004b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b28:	4607      	mov	r7, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b10a      	cbz	r2, 8004b32 <_printf_common+0x26>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	0699      	lsls	r1, r3, #26
 8004b36:	bf42      	ittt	mi
 8004b38:	6833      	ldrmi	r3, [r6, #0]
 8004b3a:	3302      	addmi	r3, #2
 8004b3c:	6033      	strmi	r3, [r6, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	f015 0506 	ands.w	r5, r5, #6
 8004b44:	d106      	bne.n	8004b54 <_printf_common+0x48>
 8004b46:	f104 0a19 	add.w	sl, r4, #25
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	6832      	ldr	r2, [r6, #0]
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dc26      	bgt.n	8004ba2 <_printf_common+0x96>
 8004b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b58:	1e13      	subs	r3, r2, #0
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	bf18      	it	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	0692      	lsls	r2, r2, #26
 8004b62:	d42b      	bmi.n	8004bbc <_printf_common+0xb0>
 8004b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d01e      	beq.n	8004bb0 <_printf_common+0xa4>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	68e5      	ldr	r5, [r4, #12]
 8004b76:	6832      	ldr	r2, [r6, #0]
 8004b78:	f003 0306 	and.w	r3, r3, #6
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	bf08      	it	eq
 8004b80:	1aad      	subeq	r5, r5, r2
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	6922      	ldr	r2, [r4, #16]
 8004b86:	bf0c      	ite	eq
 8004b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b8c:	2500      	movne	r5, #0
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bfc4      	itt	gt
 8004b92:	1a9b      	subgt	r3, r3, r2
 8004b94:	18ed      	addgt	r5, r5, r3
 8004b96:	2600      	movs	r6, #0
 8004b98:	341a      	adds	r4, #26
 8004b9a:	42b5      	cmp	r5, r6
 8004b9c:	d11a      	bne.n	8004bd4 <_printf_common+0xc8>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e008      	b.n	8004bb4 <_printf_common+0xa8>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4638      	mov	r0, r7
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d103      	bne.n	8004bb8 <_printf_common+0xac>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	3501      	adds	r5, #1
 8004bba:	e7c6      	b.n	8004b4a <_printf_common+0x3e>
 8004bbc:	18e1      	adds	r1, r4, r3
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	2030      	movs	r0, #48	; 0x30
 8004bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bc6:	4422      	add	r2, r4
 8004bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	e7c7      	b.n	8004b64 <_printf_common+0x58>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c0      	blx	r8
 8004bde:	3001      	adds	r0, #1
 8004be0:	d0e6      	beq.n	8004bb0 <_printf_common+0xa4>
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7d9      	b.n	8004b9a <_printf_common+0x8e>
	...

08004be8 <_printf_i>:
 8004be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	7e0f      	ldrb	r7, [r1, #24]
 8004bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bf0:	2f78      	cmp	r7, #120	; 0x78
 8004bf2:	4691      	mov	r9, r2
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	469a      	mov	sl, r3
 8004bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bfe:	d807      	bhi.n	8004c10 <_printf_i+0x28>
 8004c00:	2f62      	cmp	r7, #98	; 0x62
 8004c02:	d80a      	bhi.n	8004c1a <_printf_i+0x32>
 8004c04:	2f00      	cmp	r7, #0
 8004c06:	f000 80d8 	beq.w	8004dba <_printf_i+0x1d2>
 8004c0a:	2f58      	cmp	r7, #88	; 0x58
 8004c0c:	f000 80a3 	beq.w	8004d56 <_printf_i+0x16e>
 8004c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c18:	e03a      	b.n	8004c90 <_printf_i+0xa8>
 8004c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c1e:	2b15      	cmp	r3, #21
 8004c20:	d8f6      	bhi.n	8004c10 <_printf_i+0x28>
 8004c22:	a101      	add	r1, pc, #4	; (adr r1, 8004c28 <_printf_i+0x40>)
 8004c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c11 	.word	0x08004c11
 8004c34:	08004c11 	.word	0x08004c11
 8004c38:	08004c11 	.word	0x08004c11
 8004c3c:	08004c11 	.word	0x08004c11
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004c11 	.word	0x08004c11
 8004c48:	08004c11 	.word	0x08004c11
 8004c4c:	08004c11 	.word	0x08004c11
 8004c50:	08004c11 	.word	0x08004c11
 8004c54:	08004da1 	.word	0x08004da1
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004d83 	.word	0x08004d83
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004c11 	.word	0x08004c11
 8004c68:	08004dc3 	.word	0x08004dc3
 8004c6c:	08004c11 	.word	0x08004c11
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004c11 	.word	0x08004c11
 8004c78:	08004c11 	.word	0x08004c11
 8004c7c:	08004d8b 	.word	0x08004d8b
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	1d1a      	adds	r2, r3, #4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	602a      	str	r2, [r5, #0]
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0a3      	b.n	8004ddc <_printf_i+0x1f4>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	6829      	ldr	r1, [r5, #0]
 8004c98:	0606      	lsls	r6, r0, #24
 8004c9a:	f101 0304 	add.w	r3, r1, #4
 8004c9e:	d50a      	bpl.n	8004cb6 <_printf_i+0xce>
 8004ca0:	680e      	ldr	r6, [r1, #0]
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	da03      	bge.n	8004cb0 <_printf_i+0xc8>
 8004ca8:	232d      	movs	r3, #45	; 0x2d
 8004caa:	4276      	negs	r6, r6
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	485e      	ldr	r0, [pc, #376]	; (8004e2c <_printf_i+0x244>)
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	e019      	b.n	8004cea <_printf_i+0x102>
 8004cb6:	680e      	ldr	r6, [r1, #0]
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cbe:	bf18      	it	ne
 8004cc0:	b236      	sxthne	r6, r6
 8004cc2:	e7ef      	b.n	8004ca4 <_printf_i+0xbc>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	6029      	str	r1, [r5, #0]
 8004ccc:	0601      	lsls	r1, r0, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xec>
 8004cd0:	681e      	ldr	r6, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0xf2>
 8004cd4:	0646      	lsls	r6, r0, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xe8>
 8004cd8:	881e      	ldrh	r6, [r3, #0]
 8004cda:	4854      	ldr	r0, [pc, #336]	; (8004e2c <_printf_i+0x244>)
 8004cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8004cde:	bf0c      	ite	eq
 8004ce0:	2308      	moveq	r3, #8
 8004ce2:	230a      	movne	r3, #10
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cea:	6865      	ldr	r5, [r4, #4]
 8004cec:	60a5      	str	r5, [r4, #8]
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	bfa2      	ittt	ge
 8004cf2:	6821      	ldrge	r1, [r4, #0]
 8004cf4:	f021 0104 	bicge.w	r1, r1, #4
 8004cf8:	6021      	strge	r1, [r4, #0]
 8004cfa:	b90e      	cbnz	r6, 8004d00 <_printf_i+0x118>
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	d04d      	beq.n	8004d9c <_printf_i+0x1b4>
 8004d00:	4615      	mov	r5, r2
 8004d02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d06:	fb03 6711 	mls	r7, r3, r1, r6
 8004d0a:	5dc7      	ldrb	r7, [r0, r7]
 8004d0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d10:	4637      	mov	r7, r6
 8004d12:	42bb      	cmp	r3, r7
 8004d14:	460e      	mov	r6, r1
 8004d16:	d9f4      	bls.n	8004d02 <_printf_i+0x11a>
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d10b      	bne.n	8004d34 <_printf_i+0x14c>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07de      	lsls	r6, r3, #31
 8004d20:	d508      	bpl.n	8004d34 <_printf_i+0x14c>
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	4299      	cmp	r1, r3
 8004d28:	bfde      	ittt	le
 8004d2a:	2330      	movle	r3, #48	; 0x30
 8004d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d34:	1b52      	subs	r2, r2, r5
 8004d36:	6122      	str	r2, [r4, #16]
 8004d38:	f8cd a000 	str.w	sl, [sp]
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	aa03      	add	r2, sp, #12
 8004d40:	4621      	mov	r1, r4
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fee2 	bl	8004b0c <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d14c      	bne.n	8004de6 <_printf_i+0x1fe>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b004      	add	sp, #16
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	4835      	ldr	r0, [pc, #212]	; (8004e2c <_printf_i+0x244>)
 8004d58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d5c:	6829      	ldr	r1, [r5, #0]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d64:	6029      	str	r1, [r5, #0]
 8004d66:	061d      	lsls	r5, r3, #24
 8004d68:	d514      	bpl.n	8004d94 <_printf_i+0x1ac>
 8004d6a:	07df      	lsls	r7, r3, #31
 8004d6c:	bf44      	itt	mi
 8004d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d72:	6023      	strmi	r3, [r4, #0]
 8004d74:	b91e      	cbnz	r6, 8004d7e <_printf_i+0x196>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f023 0320 	bic.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	2310      	movs	r3, #16
 8004d80:	e7b0      	b.n	8004ce4 <_printf_i+0xfc>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f043 0320 	orr.w	r3, r3, #32
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	2378      	movs	r3, #120	; 0x78
 8004d8c:	4828      	ldr	r0, [pc, #160]	; (8004e30 <_printf_i+0x248>)
 8004d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d92:	e7e3      	b.n	8004d5c <_printf_i+0x174>
 8004d94:	0659      	lsls	r1, r3, #25
 8004d96:	bf48      	it	mi
 8004d98:	b2b6      	uxthmi	r6, r6
 8004d9a:	e7e6      	b.n	8004d6a <_printf_i+0x182>
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	e7bb      	b.n	8004d18 <_printf_i+0x130>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	6826      	ldr	r6, [r4, #0]
 8004da4:	6961      	ldr	r1, [r4, #20]
 8004da6:	1d18      	adds	r0, r3, #4
 8004da8:	6028      	str	r0, [r5, #0]
 8004daa:	0635      	lsls	r5, r6, #24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	d501      	bpl.n	8004db4 <_printf_i+0x1cc>
 8004db0:	6019      	str	r1, [r3, #0]
 8004db2:	e002      	b.n	8004dba <_printf_i+0x1d2>
 8004db4:	0670      	lsls	r0, r6, #25
 8004db6:	d5fb      	bpl.n	8004db0 <_printf_i+0x1c8>
 8004db8:	8019      	strh	r1, [r3, #0]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	e7ba      	b.n	8004d38 <_printf_i+0x150>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	1d1a      	adds	r2, r3, #4
 8004dc6:	602a      	str	r2, [r5, #0]
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f7fb fa0e 	bl	80001f0 <memchr>
 8004dd4:	b108      	cbz	r0, 8004dda <_printf_i+0x1f2>
 8004dd6:	1b40      	subs	r0, r0, r5
 8004dd8:	6060      	str	r0, [r4, #4]
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	6123      	str	r3, [r4, #16]
 8004dde:	2300      	movs	r3, #0
 8004de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de4:	e7a8      	b.n	8004d38 <_printf_i+0x150>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	462a      	mov	r2, r5
 8004dea:	4649      	mov	r1, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	47d0      	blx	sl
 8004df0:	3001      	adds	r0, #1
 8004df2:	d0ab      	beq.n	8004d4c <_printf_i+0x164>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	079b      	lsls	r3, r3, #30
 8004df8:	d413      	bmi.n	8004e22 <_printf_i+0x23a>
 8004dfa:	68e0      	ldr	r0, [r4, #12]
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	4298      	cmp	r0, r3
 8004e00:	bfb8      	it	lt
 8004e02:	4618      	movlt	r0, r3
 8004e04:	e7a4      	b.n	8004d50 <_printf_i+0x168>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4632      	mov	r2, r6
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	47d0      	blx	sl
 8004e10:	3001      	adds	r0, #1
 8004e12:	d09b      	beq.n	8004d4c <_printf_i+0x164>
 8004e14:	3501      	adds	r5, #1
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	9903      	ldr	r1, [sp, #12]
 8004e1a:	1a5b      	subs	r3, r3, r1
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dcf2      	bgt.n	8004e06 <_printf_i+0x21e>
 8004e20:	e7eb      	b.n	8004dfa <_printf_i+0x212>
 8004e22:	2500      	movs	r5, #0
 8004e24:	f104 0619 	add.w	r6, r4, #25
 8004e28:	e7f5      	b.n	8004e16 <_printf_i+0x22e>
 8004e2a:	bf00      	nop
 8004e2c:	08007006 	.word	0x08007006
 8004e30:	08007017 	.word	0x08007017

08004e34 <quorem>:
 8004e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	6903      	ldr	r3, [r0, #16]
 8004e3a:	690c      	ldr	r4, [r1, #16]
 8004e3c:	42a3      	cmp	r3, r4
 8004e3e:	4607      	mov	r7, r0
 8004e40:	f2c0 8081 	blt.w	8004f46 <quorem+0x112>
 8004e44:	3c01      	subs	r4, #1
 8004e46:	f101 0814 	add.w	r8, r1, #20
 8004e4a:	f100 0514 	add.w	r5, r0, #20
 8004e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e68:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e6c:	d331      	bcc.n	8004ed2 <quorem+0x9e>
 8004e6e:	f04f 0e00 	mov.w	lr, #0
 8004e72:	4640      	mov	r0, r8
 8004e74:	46ac      	mov	ip, r5
 8004e76:	46f2      	mov	sl, lr
 8004e78:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e7c:	b293      	uxth	r3, r2
 8004e7e:	fb06 e303 	mla	r3, r6, r3, lr
 8004e82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	ebaa 0303 	sub.w	r3, sl, r3
 8004e8c:	f8dc a000 	ldr.w	sl, [ip]
 8004e90:	0c12      	lsrs	r2, r2, #16
 8004e92:	fa13 f38a 	uxtah	r3, r3, sl
 8004e96:	fb06 e202 	mla	r2, r6, r2, lr
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eac:	f8bd 3000 	ldrh.w	r3, [sp]
 8004eb0:	4581      	cmp	r9, r0
 8004eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eb6:	f84c 3b04 	str.w	r3, [ip], #4
 8004eba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ebe:	d2db      	bcs.n	8004e78 <quorem+0x44>
 8004ec0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ec4:	b92b      	cbnz	r3, 8004ed2 <quorem+0x9e>
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	d32e      	bcc.n	8004f2e <quorem+0xfa>
 8004ed0:	613c      	str	r4, [r7, #16]
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	f001 f8c6 	bl	8006064 <__mcmp>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	db24      	blt.n	8004f26 <quorem+0xf2>
 8004edc:	3601      	adds	r6, #1
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f04f 0c00 	mov.w	ip, #0
 8004ee4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ee8:	f8d0 e000 	ldr.w	lr, [r0]
 8004eec:	b293      	uxth	r3, r2
 8004eee:	ebac 0303 	sub.w	r3, ip, r3
 8004ef2:	0c12      	lsrs	r2, r2, #16
 8004ef4:	fa13 f38e 	uxtah	r3, r3, lr
 8004ef8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f06:	45c1      	cmp	r9, r8
 8004f08:	f840 3b04 	str.w	r3, [r0], #4
 8004f0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f10:	d2e8      	bcs.n	8004ee4 <quorem+0xb0>
 8004f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f1a:	b922      	cbnz	r2, 8004f26 <quorem+0xf2>
 8004f1c:	3b04      	subs	r3, #4
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	d30a      	bcc.n	8004f3a <quorem+0x106>
 8004f24:	613c      	str	r4, [r7, #16]
 8004f26:	4630      	mov	r0, r6
 8004f28:	b003      	add	sp, #12
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d1cc      	bne.n	8004ed0 <quorem+0x9c>
 8004f36:	3c01      	subs	r4, #1
 8004f38:	e7c7      	b.n	8004eca <quorem+0x96>
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	d1f0      	bne.n	8004f24 <quorem+0xf0>
 8004f42:	3c01      	subs	r4, #1
 8004f44:	e7eb      	b.n	8004f1e <quorem+0xea>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e7ee      	b.n	8004f28 <quorem+0xf4>
 8004f4a:	0000      	movs	r0, r0
 8004f4c:	0000      	movs	r0, r0
	...

08004f50 <_dtoa_r>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	ed2d 8b04 	vpush	{d8-d9}
 8004f58:	ec57 6b10 	vmov	r6, r7, d0
 8004f5c:	b093      	sub	sp, #76	; 0x4c
 8004f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f64:	9106      	str	r1, [sp, #24]
 8004f66:	ee10 aa10 	vmov	sl, s0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f70:	46bb      	mov	fp, r7
 8004f72:	b975      	cbnz	r5, 8004f92 <_dtoa_r+0x42>
 8004f74:	2010      	movs	r0, #16
 8004f76:	f000 fddd 	bl	8005b34 <malloc>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f7e:	b920      	cbnz	r0, 8004f8a <_dtoa_r+0x3a>
 8004f80:	4ba7      	ldr	r3, [pc, #668]	; (8005220 <_dtoa_r+0x2d0>)
 8004f82:	21ea      	movs	r1, #234	; 0xea
 8004f84:	48a7      	ldr	r0, [pc, #668]	; (8005224 <_dtoa_r+0x2d4>)
 8004f86:	f001 fa75 	bl	8006474 <__assert_func>
 8004f8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f8e:	6005      	str	r5, [r0, #0]
 8004f90:	60c5      	str	r5, [r0, #12]
 8004f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	b151      	cbz	r1, 8004fae <_dtoa_r+0x5e>
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	604a      	str	r2, [r1, #4]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4093      	lsls	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 fe1c 	bl	8005be0 <_Bfree>
 8004fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	1e3b      	subs	r3, r7, #0
 8004fb0:	bfaa      	itet	ge
 8004fb2:	2300      	movge	r3, #0
 8004fb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004fb8:	f8c8 3000 	strge.w	r3, [r8]
 8004fbc:	4b9a      	ldr	r3, [pc, #616]	; (8005228 <_dtoa_r+0x2d8>)
 8004fbe:	bfbc      	itt	lt
 8004fc0:	2201      	movlt	r2, #1
 8004fc2:	f8c8 2000 	strlt.w	r2, [r8]
 8004fc6:	ea33 030b 	bics.w	r3, r3, fp
 8004fca:	d11b      	bne.n	8005004 <_dtoa_r+0xb4>
 8004fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fce:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fd8:	4333      	orrs	r3, r6
 8004fda:	f000 8592 	beq.w	8005b02 <_dtoa_r+0xbb2>
 8004fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe0:	b963      	cbnz	r3, 8004ffc <_dtoa_r+0xac>
 8004fe2:	4b92      	ldr	r3, [pc, #584]	; (800522c <_dtoa_r+0x2dc>)
 8004fe4:	e022      	b.n	800502c <_dtoa_r+0xdc>
 8004fe6:	4b92      	ldr	r3, [pc, #584]	; (8005230 <_dtoa_r+0x2e0>)
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	3308      	adds	r3, #8
 8004fec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	9801      	ldr	r0, [sp, #4]
 8004ff2:	b013      	add	sp, #76	; 0x4c
 8004ff4:	ecbd 8b04 	vpop	{d8-d9}
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	4b8b      	ldr	r3, [pc, #556]	; (800522c <_dtoa_r+0x2dc>)
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	3303      	adds	r3, #3
 8005002:	e7f3      	b.n	8004fec <_dtoa_r+0x9c>
 8005004:	2200      	movs	r2, #0
 8005006:	2300      	movs	r3, #0
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	f7fb fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 8005010:	ec4b ab19 	vmov	d9, sl, fp
 8005014:	4680      	mov	r8, r0
 8005016:	b158      	cbz	r0, 8005030 <_dtoa_r+0xe0>
 8005018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800501a:	2301      	movs	r3, #1
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 856b 	beq.w	8005afc <_dtoa_r+0xbac>
 8005026:	4883      	ldr	r0, [pc, #524]	; (8005234 <_dtoa_r+0x2e4>)
 8005028:	6018      	str	r0, [r3, #0]
 800502a:	1e43      	subs	r3, r0, #1
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	e7df      	b.n	8004ff0 <_dtoa_r+0xa0>
 8005030:	ec4b ab10 	vmov	d0, sl, fp
 8005034:	aa10      	add	r2, sp, #64	; 0x40
 8005036:	a911      	add	r1, sp, #68	; 0x44
 8005038:	4620      	mov	r0, r4
 800503a:	f001 f8b9 	bl	80061b0 <__d2b>
 800503e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005042:	ee08 0a10 	vmov	s16, r0
 8005046:	2d00      	cmp	r5, #0
 8005048:	f000 8084 	beq.w	8005154 <_dtoa_r+0x204>
 800504c:	ee19 3a90 	vmov	r3, s19
 8005050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005054:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005058:	4656      	mov	r6, sl
 800505a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800505e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005062:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005066:	4b74      	ldr	r3, [pc, #464]	; (8005238 <_dtoa_r+0x2e8>)
 8005068:	2200      	movs	r2, #0
 800506a:	4630      	mov	r0, r6
 800506c:	4639      	mov	r1, r7
 800506e:	f7fb f913 	bl	8000298 <__aeabi_dsub>
 8005072:	a365      	add	r3, pc, #404	; (adr r3, 8005208 <_dtoa_r+0x2b8>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fac6 	bl	8000608 <__aeabi_dmul>
 800507c:	a364      	add	r3, pc, #400	; (adr r3, 8005210 <_dtoa_r+0x2c0>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f90b 	bl	800029c <__adddf3>
 8005086:	4606      	mov	r6, r0
 8005088:	4628      	mov	r0, r5
 800508a:	460f      	mov	r7, r1
 800508c:	f7fb fa52 	bl	8000534 <__aeabi_i2d>
 8005090:	a361      	add	r3, pc, #388	; (adr r3, 8005218 <_dtoa_r+0x2c8>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb fab7 	bl	8000608 <__aeabi_dmul>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4630      	mov	r0, r6
 80050a0:	4639      	mov	r1, r7
 80050a2:	f7fb f8fb 	bl	800029c <__adddf3>
 80050a6:	4606      	mov	r6, r0
 80050a8:	460f      	mov	r7, r1
 80050aa:	f7fb fd5d 	bl	8000b68 <__aeabi_d2iz>
 80050ae:	2200      	movs	r2, #0
 80050b0:	9000      	str	r0, [sp, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	4630      	mov	r0, r6
 80050b6:	4639      	mov	r1, r7
 80050b8:	f7fb fd18 	bl	8000aec <__aeabi_dcmplt>
 80050bc:	b150      	cbz	r0, 80050d4 <_dtoa_r+0x184>
 80050be:	9800      	ldr	r0, [sp, #0]
 80050c0:	f7fb fa38 	bl	8000534 <__aeabi_i2d>
 80050c4:	4632      	mov	r2, r6
 80050c6:	463b      	mov	r3, r7
 80050c8:	f7fb fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80050cc:	b910      	cbnz	r0, 80050d4 <_dtoa_r+0x184>
 80050ce:	9b00      	ldr	r3, [sp, #0]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	2b16      	cmp	r3, #22
 80050d8:	d85a      	bhi.n	8005190 <_dtoa_r+0x240>
 80050da:	9a00      	ldr	r2, [sp, #0]
 80050dc:	4b57      	ldr	r3, [pc, #348]	; (800523c <_dtoa_r+0x2ec>)
 80050de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	ec51 0b19 	vmov	r0, r1, d9
 80050ea:	f7fb fcff 	bl	8000aec <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d050      	beq.n	8005194 <_dtoa_r+0x244>
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80050fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050fe:	1b5d      	subs	r5, r3, r5
 8005100:	1e6b      	subs	r3, r5, #1
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	bf45      	ittet	mi
 8005106:	f1c5 0301 	rsbmi	r3, r5, #1
 800510a:	9304      	strmi	r3, [sp, #16]
 800510c:	2300      	movpl	r3, #0
 800510e:	2300      	movmi	r3, #0
 8005110:	bf4c      	ite	mi
 8005112:	9305      	strmi	r3, [sp, #20]
 8005114:	9304      	strpl	r3, [sp, #16]
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	db3d      	blt.n	8005198 <_dtoa_r+0x248>
 800511c:	9b05      	ldr	r3, [sp, #20]
 800511e:	9a00      	ldr	r2, [sp, #0]
 8005120:	920a      	str	r2, [sp, #40]	; 0x28
 8005122:	4413      	add	r3, r2
 8005124:	9305      	str	r3, [sp, #20]
 8005126:	2300      	movs	r3, #0
 8005128:	9307      	str	r3, [sp, #28]
 800512a:	9b06      	ldr	r3, [sp, #24]
 800512c:	2b09      	cmp	r3, #9
 800512e:	f200 8089 	bhi.w	8005244 <_dtoa_r+0x2f4>
 8005132:	2b05      	cmp	r3, #5
 8005134:	bfc4      	itt	gt
 8005136:	3b04      	subgt	r3, #4
 8005138:	9306      	strgt	r3, [sp, #24]
 800513a:	9b06      	ldr	r3, [sp, #24]
 800513c:	f1a3 0302 	sub.w	r3, r3, #2
 8005140:	bfcc      	ite	gt
 8005142:	2500      	movgt	r5, #0
 8005144:	2501      	movle	r5, #1
 8005146:	2b03      	cmp	r3, #3
 8005148:	f200 8087 	bhi.w	800525a <_dtoa_r+0x30a>
 800514c:	e8df f003 	tbb	[pc, r3]
 8005150:	59383a2d 	.word	0x59383a2d
 8005154:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005158:	441d      	add	r5, r3
 800515a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800515e:	2b20      	cmp	r3, #32
 8005160:	bfc1      	itttt	gt
 8005162:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005166:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800516a:	fa0b f303 	lslgt.w	r3, fp, r3
 800516e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005172:	bfda      	itte	le
 8005174:	f1c3 0320 	rsble	r3, r3, #32
 8005178:	fa06 f003 	lslle.w	r0, r6, r3
 800517c:	4318      	orrgt	r0, r3
 800517e:	f7fb f9c9 	bl	8000514 <__aeabi_ui2d>
 8005182:	2301      	movs	r3, #1
 8005184:	4606      	mov	r6, r0
 8005186:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800518a:	3d01      	subs	r5, #1
 800518c:	930e      	str	r3, [sp, #56]	; 0x38
 800518e:	e76a      	b.n	8005066 <_dtoa_r+0x116>
 8005190:	2301      	movs	r3, #1
 8005192:	e7b2      	b.n	80050fa <_dtoa_r+0x1aa>
 8005194:	900b      	str	r0, [sp, #44]	; 0x2c
 8005196:	e7b1      	b.n	80050fc <_dtoa_r+0x1ac>
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	9a00      	ldr	r2, [sp, #0]
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	9304      	str	r3, [sp, #16]
 80051a0:	4253      	negs	r3, r2
 80051a2:	9307      	str	r3, [sp, #28]
 80051a4:	2300      	movs	r3, #0
 80051a6:	930a      	str	r3, [sp, #40]	; 0x28
 80051a8:	e7bf      	b.n	800512a <_dtoa_r+0x1da>
 80051aa:	2300      	movs	r3, #0
 80051ac:	9308      	str	r3, [sp, #32]
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	dc55      	bgt.n	8005260 <_dtoa_r+0x310>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051ba:	461a      	mov	r2, r3
 80051bc:	9209      	str	r2, [sp, #36]	; 0x24
 80051be:	e00c      	b.n	80051da <_dtoa_r+0x28a>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e7f3      	b.n	80051ac <_dtoa_r+0x25c>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c8:	9308      	str	r3, [sp, #32]
 80051ca:	9b00      	ldr	r3, [sp, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	9302      	str	r3, [sp, #8]
 80051d0:	3301      	adds	r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	9303      	str	r3, [sp, #12]
 80051d6:	bfb8      	it	lt
 80051d8:	2301      	movlt	r3, #1
 80051da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051dc:	2200      	movs	r2, #0
 80051de:	6042      	str	r2, [r0, #4]
 80051e0:	2204      	movs	r2, #4
 80051e2:	f102 0614 	add.w	r6, r2, #20
 80051e6:	429e      	cmp	r6, r3
 80051e8:	6841      	ldr	r1, [r0, #4]
 80051ea:	d93d      	bls.n	8005268 <_dtoa_r+0x318>
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 fcb7 	bl	8005b60 <_Balloc>
 80051f2:	9001      	str	r0, [sp, #4]
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d13b      	bne.n	8005270 <_dtoa_r+0x320>
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <_dtoa_r+0x2f0>)
 80051fa:	4602      	mov	r2, r0
 80051fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005200:	e6c0      	b.n	8004f84 <_dtoa_r+0x34>
 8005202:	2301      	movs	r3, #1
 8005204:	e7df      	b.n	80051c6 <_dtoa_r+0x276>
 8005206:	bf00      	nop
 8005208:	636f4361 	.word	0x636f4361
 800520c:	3fd287a7 	.word	0x3fd287a7
 8005210:	8b60c8b3 	.word	0x8b60c8b3
 8005214:	3fc68a28 	.word	0x3fc68a28
 8005218:	509f79fb 	.word	0x509f79fb
 800521c:	3fd34413 	.word	0x3fd34413
 8005220:	08007035 	.word	0x08007035
 8005224:	0800704c 	.word	0x0800704c
 8005228:	7ff00000 	.word	0x7ff00000
 800522c:	08007031 	.word	0x08007031
 8005230:	08007028 	.word	0x08007028
 8005234:	08007005 	.word	0x08007005
 8005238:	3ff80000 	.word	0x3ff80000
 800523c:	08007140 	.word	0x08007140
 8005240:	080070a7 	.word	0x080070a7
 8005244:	2501      	movs	r5, #1
 8005246:	2300      	movs	r3, #0
 8005248:	9306      	str	r3, [sp, #24]
 800524a:	9508      	str	r5, [sp, #32]
 800524c:	f04f 33ff 	mov.w	r3, #4294967295
 8005250:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	2312      	movs	r3, #18
 8005258:	e7b0      	b.n	80051bc <_dtoa_r+0x26c>
 800525a:	2301      	movs	r3, #1
 800525c:	9308      	str	r3, [sp, #32]
 800525e:	e7f5      	b.n	800524c <_dtoa_r+0x2fc>
 8005260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005262:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005266:	e7b8      	b.n	80051da <_dtoa_r+0x28a>
 8005268:	3101      	adds	r1, #1
 800526a:	6041      	str	r1, [r0, #4]
 800526c:	0052      	lsls	r2, r2, #1
 800526e:	e7b8      	b.n	80051e2 <_dtoa_r+0x292>
 8005270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005272:	9a01      	ldr	r2, [sp, #4]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	2b0e      	cmp	r3, #14
 800527a:	f200 809d 	bhi.w	80053b8 <_dtoa_r+0x468>
 800527e:	2d00      	cmp	r5, #0
 8005280:	f000 809a 	beq.w	80053b8 <_dtoa_r+0x468>
 8005284:	9b00      	ldr	r3, [sp, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	dd32      	ble.n	80052f0 <_dtoa_r+0x3a0>
 800528a:	4ab7      	ldr	r2, [pc, #732]	; (8005568 <_dtoa_r+0x618>)
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005294:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005298:	9b00      	ldr	r3, [sp, #0]
 800529a:	05d8      	lsls	r0, r3, #23
 800529c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80052a0:	d516      	bpl.n	80052d0 <_dtoa_r+0x380>
 80052a2:	4bb2      	ldr	r3, [pc, #712]	; (800556c <_dtoa_r+0x61c>)
 80052a4:	ec51 0b19 	vmov	r0, r1, d9
 80052a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052ac:	f7fb fad6 	bl	800085c <__aeabi_ddiv>
 80052b0:	f007 070f 	and.w	r7, r7, #15
 80052b4:	4682      	mov	sl, r0
 80052b6:	468b      	mov	fp, r1
 80052b8:	2503      	movs	r5, #3
 80052ba:	4eac      	ldr	r6, [pc, #688]	; (800556c <_dtoa_r+0x61c>)
 80052bc:	b957      	cbnz	r7, 80052d4 <_dtoa_r+0x384>
 80052be:	4642      	mov	r2, r8
 80052c0:	464b      	mov	r3, r9
 80052c2:	4650      	mov	r0, sl
 80052c4:	4659      	mov	r1, fp
 80052c6:	f7fb fac9 	bl	800085c <__aeabi_ddiv>
 80052ca:	4682      	mov	sl, r0
 80052cc:	468b      	mov	fp, r1
 80052ce:	e028      	b.n	8005322 <_dtoa_r+0x3d2>
 80052d0:	2502      	movs	r5, #2
 80052d2:	e7f2      	b.n	80052ba <_dtoa_r+0x36a>
 80052d4:	07f9      	lsls	r1, r7, #31
 80052d6:	d508      	bpl.n	80052ea <_dtoa_r+0x39a>
 80052d8:	4640      	mov	r0, r8
 80052da:	4649      	mov	r1, r9
 80052dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052e0:	f7fb f992 	bl	8000608 <__aeabi_dmul>
 80052e4:	3501      	adds	r5, #1
 80052e6:	4680      	mov	r8, r0
 80052e8:	4689      	mov	r9, r1
 80052ea:	107f      	asrs	r7, r7, #1
 80052ec:	3608      	adds	r6, #8
 80052ee:	e7e5      	b.n	80052bc <_dtoa_r+0x36c>
 80052f0:	f000 809b 	beq.w	800542a <_dtoa_r+0x4da>
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	4f9d      	ldr	r7, [pc, #628]	; (800556c <_dtoa_r+0x61c>)
 80052f8:	425e      	negs	r6, r3
 80052fa:	4b9b      	ldr	r3, [pc, #620]	; (8005568 <_dtoa_r+0x618>)
 80052fc:	f006 020f 	and.w	r2, r6, #15
 8005300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	ec51 0b19 	vmov	r0, r1, d9
 800530c:	f7fb f97c 	bl	8000608 <__aeabi_dmul>
 8005310:	1136      	asrs	r6, r6, #4
 8005312:	4682      	mov	sl, r0
 8005314:	468b      	mov	fp, r1
 8005316:	2300      	movs	r3, #0
 8005318:	2502      	movs	r5, #2
 800531a:	2e00      	cmp	r6, #0
 800531c:	d17a      	bne.n	8005414 <_dtoa_r+0x4c4>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1d3      	bne.n	80052ca <_dtoa_r+0x37a>
 8005322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8082 	beq.w	800542e <_dtoa_r+0x4de>
 800532a:	4b91      	ldr	r3, [pc, #580]	; (8005570 <_dtoa_r+0x620>)
 800532c:	2200      	movs	r2, #0
 800532e:	4650      	mov	r0, sl
 8005330:	4659      	mov	r1, fp
 8005332:	f7fb fbdb 	bl	8000aec <__aeabi_dcmplt>
 8005336:	2800      	cmp	r0, #0
 8005338:	d079      	beq.n	800542e <_dtoa_r+0x4de>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d076      	beq.n	800542e <_dtoa_r+0x4de>
 8005340:	9b02      	ldr	r3, [sp, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	dd36      	ble.n	80053b4 <_dtoa_r+0x464>
 8005346:	9b00      	ldr	r3, [sp, #0]
 8005348:	4650      	mov	r0, sl
 800534a:	4659      	mov	r1, fp
 800534c:	1e5f      	subs	r7, r3, #1
 800534e:	2200      	movs	r2, #0
 8005350:	4b88      	ldr	r3, [pc, #544]	; (8005574 <_dtoa_r+0x624>)
 8005352:	f7fb f959 	bl	8000608 <__aeabi_dmul>
 8005356:	9e02      	ldr	r6, [sp, #8]
 8005358:	4682      	mov	sl, r0
 800535a:	468b      	mov	fp, r1
 800535c:	3501      	adds	r5, #1
 800535e:	4628      	mov	r0, r5
 8005360:	f7fb f8e8 	bl	8000534 <__aeabi_i2d>
 8005364:	4652      	mov	r2, sl
 8005366:	465b      	mov	r3, fp
 8005368:	f7fb f94e 	bl	8000608 <__aeabi_dmul>
 800536c:	4b82      	ldr	r3, [pc, #520]	; (8005578 <_dtoa_r+0x628>)
 800536e:	2200      	movs	r2, #0
 8005370:	f7fa ff94 	bl	800029c <__adddf3>
 8005374:	46d0      	mov	r8, sl
 8005376:	46d9      	mov	r9, fp
 8005378:	4682      	mov	sl, r0
 800537a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800537e:	2e00      	cmp	r6, #0
 8005380:	d158      	bne.n	8005434 <_dtoa_r+0x4e4>
 8005382:	4b7e      	ldr	r3, [pc, #504]	; (800557c <_dtoa_r+0x62c>)
 8005384:	2200      	movs	r2, #0
 8005386:	4640      	mov	r0, r8
 8005388:	4649      	mov	r1, r9
 800538a:	f7fa ff85 	bl	8000298 <__aeabi_dsub>
 800538e:	4652      	mov	r2, sl
 8005390:	465b      	mov	r3, fp
 8005392:	4680      	mov	r8, r0
 8005394:	4689      	mov	r9, r1
 8005396:	f7fb fbc7 	bl	8000b28 <__aeabi_dcmpgt>
 800539a:	2800      	cmp	r0, #0
 800539c:	f040 8295 	bne.w	80058ca <_dtoa_r+0x97a>
 80053a0:	4652      	mov	r2, sl
 80053a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb fb9f 	bl	8000aec <__aeabi_dcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f040 8289 	bne.w	80058c6 <_dtoa_r+0x976>
 80053b4:	ec5b ab19 	vmov	sl, fp, d9
 80053b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f2c0 8148 	blt.w	8005650 <_dtoa_r+0x700>
 80053c0:	9a00      	ldr	r2, [sp, #0]
 80053c2:	2a0e      	cmp	r2, #14
 80053c4:	f300 8144 	bgt.w	8005650 <_dtoa_r+0x700>
 80053c8:	4b67      	ldr	r3, [pc, #412]	; (8005568 <_dtoa_r+0x618>)
 80053ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f280 80d5 	bge.w	8005584 <_dtoa_r+0x634>
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f300 80d1 	bgt.w	8005584 <_dtoa_r+0x634>
 80053e2:	f040 826f 	bne.w	80058c4 <_dtoa_r+0x974>
 80053e6:	4b65      	ldr	r3, [pc, #404]	; (800557c <_dtoa_r+0x62c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	f7fb f90b 	bl	8000608 <__aeabi_dmul>
 80053f2:	4652      	mov	r2, sl
 80053f4:	465b      	mov	r3, fp
 80053f6:	f7fb fb8d 	bl	8000b14 <__aeabi_dcmpge>
 80053fa:	9e03      	ldr	r6, [sp, #12]
 80053fc:	4637      	mov	r7, r6
 80053fe:	2800      	cmp	r0, #0
 8005400:	f040 8245 	bne.w	800588e <_dtoa_r+0x93e>
 8005404:	9d01      	ldr	r5, [sp, #4]
 8005406:	2331      	movs	r3, #49	; 0x31
 8005408:	f805 3b01 	strb.w	r3, [r5], #1
 800540c:	9b00      	ldr	r3, [sp, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	e240      	b.n	8005896 <_dtoa_r+0x946>
 8005414:	07f2      	lsls	r2, r6, #31
 8005416:	d505      	bpl.n	8005424 <_dtoa_r+0x4d4>
 8005418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541c:	f7fb f8f4 	bl	8000608 <__aeabi_dmul>
 8005420:	3501      	adds	r5, #1
 8005422:	2301      	movs	r3, #1
 8005424:	1076      	asrs	r6, r6, #1
 8005426:	3708      	adds	r7, #8
 8005428:	e777      	b.n	800531a <_dtoa_r+0x3ca>
 800542a:	2502      	movs	r5, #2
 800542c:	e779      	b.n	8005322 <_dtoa_r+0x3d2>
 800542e:	9f00      	ldr	r7, [sp, #0]
 8005430:	9e03      	ldr	r6, [sp, #12]
 8005432:	e794      	b.n	800535e <_dtoa_r+0x40e>
 8005434:	9901      	ldr	r1, [sp, #4]
 8005436:	4b4c      	ldr	r3, [pc, #304]	; (8005568 <_dtoa_r+0x618>)
 8005438:	4431      	add	r1, r6
 800543a:	910d      	str	r1, [sp, #52]	; 0x34
 800543c:	9908      	ldr	r1, [sp, #32]
 800543e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005446:	2900      	cmp	r1, #0
 8005448:	d043      	beq.n	80054d2 <_dtoa_r+0x582>
 800544a:	494d      	ldr	r1, [pc, #308]	; (8005580 <_dtoa_r+0x630>)
 800544c:	2000      	movs	r0, #0
 800544e:	f7fb fa05 	bl	800085c <__aeabi_ddiv>
 8005452:	4652      	mov	r2, sl
 8005454:	465b      	mov	r3, fp
 8005456:	f7fa ff1f 	bl	8000298 <__aeabi_dsub>
 800545a:	9d01      	ldr	r5, [sp, #4]
 800545c:	4682      	mov	sl, r0
 800545e:	468b      	mov	fp, r1
 8005460:	4649      	mov	r1, r9
 8005462:	4640      	mov	r0, r8
 8005464:	f7fb fb80 	bl	8000b68 <__aeabi_d2iz>
 8005468:	4606      	mov	r6, r0
 800546a:	f7fb f863 	bl	8000534 <__aeabi_i2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	f7fa ff0f 	bl	8000298 <__aeabi_dsub>
 800547a:	3630      	adds	r6, #48	; 0x30
 800547c:	f805 6b01 	strb.w	r6, [r5], #1
 8005480:	4652      	mov	r2, sl
 8005482:	465b      	mov	r3, fp
 8005484:	4680      	mov	r8, r0
 8005486:	4689      	mov	r9, r1
 8005488:	f7fb fb30 	bl	8000aec <__aeabi_dcmplt>
 800548c:	2800      	cmp	r0, #0
 800548e:	d163      	bne.n	8005558 <_dtoa_r+0x608>
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	4936      	ldr	r1, [pc, #216]	; (8005570 <_dtoa_r+0x620>)
 8005496:	2000      	movs	r0, #0
 8005498:	f7fa fefe 	bl	8000298 <__aeabi_dsub>
 800549c:	4652      	mov	r2, sl
 800549e:	465b      	mov	r3, fp
 80054a0:	f7fb fb24 	bl	8000aec <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 80b5 	bne.w	8005614 <_dtoa_r+0x6c4>
 80054aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ac:	429d      	cmp	r5, r3
 80054ae:	d081      	beq.n	80053b4 <_dtoa_r+0x464>
 80054b0:	4b30      	ldr	r3, [pc, #192]	; (8005574 <_dtoa_r+0x624>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	4650      	mov	r0, sl
 80054b6:	4659      	mov	r1, fp
 80054b8:	f7fb f8a6 	bl	8000608 <__aeabi_dmul>
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <_dtoa_r+0x624>)
 80054be:	4682      	mov	sl, r0
 80054c0:	468b      	mov	fp, r1
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	2200      	movs	r2, #0
 80054c8:	f7fb f89e 	bl	8000608 <__aeabi_dmul>
 80054cc:	4680      	mov	r8, r0
 80054ce:	4689      	mov	r9, r1
 80054d0:	e7c6      	b.n	8005460 <_dtoa_r+0x510>
 80054d2:	4650      	mov	r0, sl
 80054d4:	4659      	mov	r1, fp
 80054d6:	f7fb f897 	bl	8000608 <__aeabi_dmul>
 80054da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054dc:	9d01      	ldr	r5, [sp, #4]
 80054de:	930f      	str	r3, [sp, #60]	; 0x3c
 80054e0:	4682      	mov	sl, r0
 80054e2:	468b      	mov	fp, r1
 80054e4:	4649      	mov	r1, r9
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7fb fb3e 	bl	8000b68 <__aeabi_d2iz>
 80054ec:	4606      	mov	r6, r0
 80054ee:	f7fb f821 	bl	8000534 <__aeabi_i2d>
 80054f2:	3630      	adds	r6, #48	; 0x30
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4640      	mov	r0, r8
 80054fa:	4649      	mov	r1, r9
 80054fc:	f7fa fecc 	bl	8000298 <__aeabi_dsub>
 8005500:	f805 6b01 	strb.w	r6, [r5], #1
 8005504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005506:	429d      	cmp	r5, r3
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	d124      	bne.n	800555c <_dtoa_r+0x60c>
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <_dtoa_r+0x630>)
 8005514:	4650      	mov	r0, sl
 8005516:	4659      	mov	r1, fp
 8005518:	f7fa fec0 	bl	800029c <__adddf3>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fb fb00 	bl	8000b28 <__aeabi_dcmpgt>
 8005528:	2800      	cmp	r0, #0
 800552a:	d173      	bne.n	8005614 <_dtoa_r+0x6c4>
 800552c:	4652      	mov	r2, sl
 800552e:	465b      	mov	r3, fp
 8005530:	4913      	ldr	r1, [pc, #76]	; (8005580 <_dtoa_r+0x630>)
 8005532:	2000      	movs	r0, #0
 8005534:	f7fa feb0 	bl	8000298 <__aeabi_dsub>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fb fad4 	bl	8000aec <__aeabi_dcmplt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f43f af35 	beq.w	80053b4 <_dtoa_r+0x464>
 800554a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800554c:	1e6b      	subs	r3, r5, #1
 800554e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d0f8      	beq.n	800554a <_dtoa_r+0x5fa>
 8005558:	9700      	str	r7, [sp, #0]
 800555a:	e049      	b.n	80055f0 <_dtoa_r+0x6a0>
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <_dtoa_r+0x624>)
 800555e:	f7fb f853 	bl	8000608 <__aeabi_dmul>
 8005562:	4680      	mov	r8, r0
 8005564:	4689      	mov	r9, r1
 8005566:	e7bd      	b.n	80054e4 <_dtoa_r+0x594>
 8005568:	08007140 	.word	0x08007140
 800556c:	08007118 	.word	0x08007118
 8005570:	3ff00000 	.word	0x3ff00000
 8005574:	40240000 	.word	0x40240000
 8005578:	401c0000 	.word	0x401c0000
 800557c:	40140000 	.word	0x40140000
 8005580:	3fe00000 	.word	0x3fe00000
 8005584:	9d01      	ldr	r5, [sp, #4]
 8005586:	4656      	mov	r6, sl
 8005588:	465f      	mov	r7, fp
 800558a:	4642      	mov	r2, r8
 800558c:	464b      	mov	r3, r9
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fb f963 	bl	800085c <__aeabi_ddiv>
 8005596:	f7fb fae7 	bl	8000b68 <__aeabi_d2iz>
 800559a:	4682      	mov	sl, r0
 800559c:	f7fa ffca 	bl	8000534 <__aeabi_i2d>
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	f7fb f830 	bl	8000608 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80055b4:	f7fa fe70 	bl	8000298 <__aeabi_dsub>
 80055b8:	f805 6b01 	strb.w	r6, [r5], #1
 80055bc:	9e01      	ldr	r6, [sp, #4]
 80055be:	9f03      	ldr	r7, [sp, #12]
 80055c0:	1bae      	subs	r6, r5, r6
 80055c2:	42b7      	cmp	r7, r6
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	d135      	bne.n	8005636 <_dtoa_r+0x6e6>
 80055ca:	f7fa fe67 	bl	800029c <__adddf3>
 80055ce:	4642      	mov	r2, r8
 80055d0:	464b      	mov	r3, r9
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	f7fb faa7 	bl	8000b28 <__aeabi_dcmpgt>
 80055da:	b9d0      	cbnz	r0, 8005612 <_dtoa_r+0x6c2>
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	f7fb fa78 	bl	8000ad8 <__aeabi_dcmpeq>
 80055e8:	b110      	cbz	r0, 80055f0 <_dtoa_r+0x6a0>
 80055ea:	f01a 0f01 	tst.w	sl, #1
 80055ee:	d110      	bne.n	8005612 <_dtoa_r+0x6c2>
 80055f0:	4620      	mov	r0, r4
 80055f2:	ee18 1a10 	vmov	r1, s16
 80055f6:	f000 faf3 	bl	8005be0 <_Bfree>
 80055fa:	2300      	movs	r3, #0
 80055fc:	9800      	ldr	r0, [sp, #0]
 80055fe:	702b      	strb	r3, [r5, #0]
 8005600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005602:	3001      	adds	r0, #1
 8005604:	6018      	str	r0, [r3, #0]
 8005606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005608:	2b00      	cmp	r3, #0
 800560a:	f43f acf1 	beq.w	8004ff0 <_dtoa_r+0xa0>
 800560e:	601d      	str	r5, [r3, #0]
 8005610:	e4ee      	b.n	8004ff0 <_dtoa_r+0xa0>
 8005612:	9f00      	ldr	r7, [sp, #0]
 8005614:	462b      	mov	r3, r5
 8005616:	461d      	mov	r5, r3
 8005618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800561c:	2a39      	cmp	r2, #57	; 0x39
 800561e:	d106      	bne.n	800562e <_dtoa_r+0x6de>
 8005620:	9a01      	ldr	r2, [sp, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d1f7      	bne.n	8005616 <_dtoa_r+0x6c6>
 8005626:	9901      	ldr	r1, [sp, #4]
 8005628:	2230      	movs	r2, #48	; 0x30
 800562a:	3701      	adds	r7, #1
 800562c:	700a      	strb	r2, [r1, #0]
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	3201      	adds	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e790      	b.n	8005558 <_dtoa_r+0x608>
 8005636:	4ba6      	ldr	r3, [pc, #664]	; (80058d0 <_dtoa_r+0x980>)
 8005638:	2200      	movs	r2, #0
 800563a:	f7fa ffe5 	bl	8000608 <__aeabi_dmul>
 800563e:	2200      	movs	r2, #0
 8005640:	2300      	movs	r3, #0
 8005642:	4606      	mov	r6, r0
 8005644:	460f      	mov	r7, r1
 8005646:	f7fb fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800564a:	2800      	cmp	r0, #0
 800564c:	d09d      	beq.n	800558a <_dtoa_r+0x63a>
 800564e:	e7cf      	b.n	80055f0 <_dtoa_r+0x6a0>
 8005650:	9a08      	ldr	r2, [sp, #32]
 8005652:	2a00      	cmp	r2, #0
 8005654:	f000 80d7 	beq.w	8005806 <_dtoa_r+0x8b6>
 8005658:	9a06      	ldr	r2, [sp, #24]
 800565a:	2a01      	cmp	r2, #1
 800565c:	f300 80ba 	bgt.w	80057d4 <_dtoa_r+0x884>
 8005660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005662:	2a00      	cmp	r2, #0
 8005664:	f000 80b2 	beq.w	80057cc <_dtoa_r+0x87c>
 8005668:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800566c:	9e07      	ldr	r6, [sp, #28]
 800566e:	9d04      	ldr	r5, [sp, #16]
 8005670:	9a04      	ldr	r2, [sp, #16]
 8005672:	441a      	add	r2, r3
 8005674:	9204      	str	r2, [sp, #16]
 8005676:	9a05      	ldr	r2, [sp, #20]
 8005678:	2101      	movs	r1, #1
 800567a:	441a      	add	r2, r3
 800567c:	4620      	mov	r0, r4
 800567e:	9205      	str	r2, [sp, #20]
 8005680:	f000 fb66 	bl	8005d50 <__i2b>
 8005684:	4607      	mov	r7, r0
 8005686:	2d00      	cmp	r5, #0
 8005688:	dd0c      	ble.n	80056a4 <_dtoa_r+0x754>
 800568a:	9b05      	ldr	r3, [sp, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd09      	ble.n	80056a4 <_dtoa_r+0x754>
 8005690:	42ab      	cmp	r3, r5
 8005692:	9a04      	ldr	r2, [sp, #16]
 8005694:	bfa8      	it	ge
 8005696:	462b      	movge	r3, r5
 8005698:	1ad2      	subs	r2, r2, r3
 800569a:	9204      	str	r2, [sp, #16]
 800569c:	9a05      	ldr	r2, [sp, #20]
 800569e:	1aed      	subs	r5, r5, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	9305      	str	r3, [sp, #20]
 80056a4:	9b07      	ldr	r3, [sp, #28]
 80056a6:	b31b      	cbz	r3, 80056f0 <_dtoa_r+0x7a0>
 80056a8:	9b08      	ldr	r3, [sp, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80af 	beq.w	800580e <_dtoa_r+0x8be>
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	dd13      	ble.n	80056dc <_dtoa_r+0x78c>
 80056b4:	4639      	mov	r1, r7
 80056b6:	4632      	mov	r2, r6
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fc09 	bl	8005ed0 <__pow5mult>
 80056be:	ee18 2a10 	vmov	r2, s16
 80056c2:	4601      	mov	r1, r0
 80056c4:	4607      	mov	r7, r0
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fb58 	bl	8005d7c <__multiply>
 80056cc:	ee18 1a10 	vmov	r1, s16
 80056d0:	4680      	mov	r8, r0
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 fa84 	bl	8005be0 <_Bfree>
 80056d8:	ee08 8a10 	vmov	s16, r8
 80056dc:	9b07      	ldr	r3, [sp, #28]
 80056de:	1b9a      	subs	r2, r3, r6
 80056e0:	d006      	beq.n	80056f0 <_dtoa_r+0x7a0>
 80056e2:	ee18 1a10 	vmov	r1, s16
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fbf2 	bl	8005ed0 <__pow5mult>
 80056ec:	ee08 0a10 	vmov	s16, r0
 80056f0:	2101      	movs	r1, #1
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb2c 	bl	8005d50 <__i2b>
 80056f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	4606      	mov	r6, r0
 80056fe:	f340 8088 	ble.w	8005812 <_dtoa_r+0x8c2>
 8005702:	461a      	mov	r2, r3
 8005704:	4601      	mov	r1, r0
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fbe2 	bl	8005ed0 <__pow5mult>
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	2b01      	cmp	r3, #1
 8005710:	4606      	mov	r6, r0
 8005712:	f340 8081 	ble.w	8005818 <_dtoa_r+0x8c8>
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	6933      	ldr	r3, [r6, #16]
 800571c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005720:	6918      	ldr	r0, [r3, #16]
 8005722:	f000 fac5 	bl	8005cb0 <__hi0bits>
 8005726:	f1c0 0020 	rsb	r0, r0, #32
 800572a:	9b05      	ldr	r3, [sp, #20]
 800572c:	4418      	add	r0, r3
 800572e:	f010 001f 	ands.w	r0, r0, #31
 8005732:	f000 8092 	beq.w	800585a <_dtoa_r+0x90a>
 8005736:	f1c0 0320 	rsb	r3, r0, #32
 800573a:	2b04      	cmp	r3, #4
 800573c:	f340 808a 	ble.w	8005854 <_dtoa_r+0x904>
 8005740:	f1c0 001c 	rsb	r0, r0, #28
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	4403      	add	r3, r0
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	9b05      	ldr	r3, [sp, #20]
 800574c:	4403      	add	r3, r0
 800574e:	4405      	add	r5, r0
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	dd07      	ble.n	8005768 <_dtoa_r+0x818>
 8005758:	ee18 1a10 	vmov	r1, s16
 800575c:	461a      	mov	r2, r3
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fc10 	bl	8005f84 <__lshift>
 8005764:	ee08 0a10 	vmov	s16, r0
 8005768:	9b05      	ldr	r3, [sp, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	dd05      	ble.n	800577a <_dtoa_r+0x82a>
 800576e:	4631      	mov	r1, r6
 8005770:	461a      	mov	r2, r3
 8005772:	4620      	mov	r0, r4
 8005774:	f000 fc06 	bl	8005f84 <__lshift>
 8005778:	4606      	mov	r6, r0
 800577a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d06e      	beq.n	800585e <_dtoa_r+0x90e>
 8005780:	ee18 0a10 	vmov	r0, s16
 8005784:	4631      	mov	r1, r6
 8005786:	f000 fc6d 	bl	8006064 <__mcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	da67      	bge.n	800585e <_dtoa_r+0x90e>
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	ee18 1a10 	vmov	r1, s16
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	220a      	movs	r2, #10
 800579a:	2300      	movs	r3, #0
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fa41 	bl	8005c24 <__multadd>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	ee08 0a10 	vmov	s16, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 81b1 	beq.w	8005b10 <_dtoa_r+0xbc0>
 80057ae:	2300      	movs	r3, #0
 80057b0:	4639      	mov	r1, r7
 80057b2:	220a      	movs	r2, #10
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 fa35 	bl	8005c24 <__multadd>
 80057ba:	9b02      	ldr	r3, [sp, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	4607      	mov	r7, r0
 80057c0:	f300 808e 	bgt.w	80058e0 <_dtoa_r+0x990>
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	dc51      	bgt.n	800586e <_dtoa_r+0x91e>
 80057ca:	e089      	b.n	80058e0 <_dtoa_r+0x990>
 80057cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057d2:	e74b      	b.n	800566c <_dtoa_r+0x71c>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	1e5e      	subs	r6, r3, #1
 80057d8:	9b07      	ldr	r3, [sp, #28]
 80057da:	42b3      	cmp	r3, r6
 80057dc:	bfbf      	itttt	lt
 80057de:	9b07      	ldrlt	r3, [sp, #28]
 80057e0:	9607      	strlt	r6, [sp, #28]
 80057e2:	1af2      	sublt	r2, r6, r3
 80057e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057e6:	bfb6      	itet	lt
 80057e8:	189b      	addlt	r3, r3, r2
 80057ea:	1b9e      	subge	r6, r3, r6
 80057ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	bfb8      	it	lt
 80057f2:	2600      	movlt	r6, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bfb7      	itett	lt
 80057f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005800:	1a9d      	sublt	r5, r3, r2
 8005802:	2300      	movlt	r3, #0
 8005804:	e734      	b.n	8005670 <_dtoa_r+0x720>
 8005806:	9e07      	ldr	r6, [sp, #28]
 8005808:	9d04      	ldr	r5, [sp, #16]
 800580a:	9f08      	ldr	r7, [sp, #32]
 800580c:	e73b      	b.n	8005686 <_dtoa_r+0x736>
 800580e:	9a07      	ldr	r2, [sp, #28]
 8005810:	e767      	b.n	80056e2 <_dtoa_r+0x792>
 8005812:	9b06      	ldr	r3, [sp, #24]
 8005814:	2b01      	cmp	r3, #1
 8005816:	dc18      	bgt.n	800584a <_dtoa_r+0x8fa>
 8005818:	f1ba 0f00 	cmp.w	sl, #0
 800581c:	d115      	bne.n	800584a <_dtoa_r+0x8fa>
 800581e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005822:	b993      	cbnz	r3, 800584a <_dtoa_r+0x8fa>
 8005824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005828:	0d1b      	lsrs	r3, r3, #20
 800582a:	051b      	lsls	r3, r3, #20
 800582c:	b183      	cbz	r3, 8005850 <_dtoa_r+0x900>
 800582e:	9b04      	ldr	r3, [sp, #16]
 8005830:	3301      	adds	r3, #1
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	9b05      	ldr	r3, [sp, #20]
 8005836:	3301      	adds	r3, #1
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	f04f 0801 	mov.w	r8, #1
 800583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f af6a 	bne.w	800571a <_dtoa_r+0x7ca>
 8005846:	2001      	movs	r0, #1
 8005848:	e76f      	b.n	800572a <_dtoa_r+0x7da>
 800584a:	f04f 0800 	mov.w	r8, #0
 800584e:	e7f6      	b.n	800583e <_dtoa_r+0x8ee>
 8005850:	4698      	mov	r8, r3
 8005852:	e7f4      	b.n	800583e <_dtoa_r+0x8ee>
 8005854:	f43f af7d 	beq.w	8005752 <_dtoa_r+0x802>
 8005858:	4618      	mov	r0, r3
 800585a:	301c      	adds	r0, #28
 800585c:	e772      	b.n	8005744 <_dtoa_r+0x7f4>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	dc37      	bgt.n	80058d4 <_dtoa_r+0x984>
 8005864:	9b06      	ldr	r3, [sp, #24]
 8005866:	2b02      	cmp	r3, #2
 8005868:	dd34      	ble.n	80058d4 <_dtoa_r+0x984>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	9b02      	ldr	r3, [sp, #8]
 8005870:	b96b      	cbnz	r3, 800588e <_dtoa_r+0x93e>
 8005872:	4631      	mov	r1, r6
 8005874:	2205      	movs	r2, #5
 8005876:	4620      	mov	r0, r4
 8005878:	f000 f9d4 	bl	8005c24 <__multadd>
 800587c:	4601      	mov	r1, r0
 800587e:	4606      	mov	r6, r0
 8005880:	ee18 0a10 	vmov	r0, s16
 8005884:	f000 fbee 	bl	8006064 <__mcmp>
 8005888:	2800      	cmp	r0, #0
 800588a:	f73f adbb 	bgt.w	8005404 <_dtoa_r+0x4b4>
 800588e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005890:	9d01      	ldr	r5, [sp, #4]
 8005892:	43db      	mvns	r3, r3
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f04f 0800 	mov.w	r8, #0
 800589a:	4631      	mov	r1, r6
 800589c:	4620      	mov	r0, r4
 800589e:	f000 f99f 	bl	8005be0 <_Bfree>
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	f43f aea4 	beq.w	80055f0 <_dtoa_r+0x6a0>
 80058a8:	f1b8 0f00 	cmp.w	r8, #0
 80058ac:	d005      	beq.n	80058ba <_dtoa_r+0x96a>
 80058ae:	45b8      	cmp	r8, r7
 80058b0:	d003      	beq.n	80058ba <_dtoa_r+0x96a>
 80058b2:	4641      	mov	r1, r8
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 f993 	bl	8005be0 <_Bfree>
 80058ba:	4639      	mov	r1, r7
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f98f 	bl	8005be0 <_Bfree>
 80058c2:	e695      	b.n	80055f0 <_dtoa_r+0x6a0>
 80058c4:	2600      	movs	r6, #0
 80058c6:	4637      	mov	r7, r6
 80058c8:	e7e1      	b.n	800588e <_dtoa_r+0x93e>
 80058ca:	9700      	str	r7, [sp, #0]
 80058cc:	4637      	mov	r7, r6
 80058ce:	e599      	b.n	8005404 <_dtoa_r+0x4b4>
 80058d0:	40240000 	.word	0x40240000
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80ca 	beq.w	8005a70 <_dtoa_r+0xb20>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	2d00      	cmp	r5, #0
 80058e2:	dd05      	ble.n	80058f0 <_dtoa_r+0x9a0>
 80058e4:	4639      	mov	r1, r7
 80058e6:	462a      	mov	r2, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fb4b 	bl	8005f84 <__lshift>
 80058ee:	4607      	mov	r7, r0
 80058f0:	f1b8 0f00 	cmp.w	r8, #0
 80058f4:	d05b      	beq.n	80059ae <_dtoa_r+0xa5e>
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f931 	bl	8005b60 <_Balloc>
 80058fe:	4605      	mov	r5, r0
 8005900:	b928      	cbnz	r0, 800590e <_dtoa_r+0x9be>
 8005902:	4b87      	ldr	r3, [pc, #540]	; (8005b20 <_dtoa_r+0xbd0>)
 8005904:	4602      	mov	r2, r0
 8005906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800590a:	f7ff bb3b 	b.w	8004f84 <_dtoa_r+0x34>
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	3202      	adds	r2, #2
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	f107 010c 	add.w	r1, r7, #12
 8005918:	300c      	adds	r0, #12
 800591a:	f000 f913 	bl	8005b44 <memcpy>
 800591e:	2201      	movs	r2, #1
 8005920:	4629      	mov	r1, r5
 8005922:	4620      	mov	r0, r4
 8005924:	f000 fb2e 	bl	8005f84 <__lshift>
 8005928:	9b01      	ldr	r3, [sp, #4]
 800592a:	f103 0901 	add.w	r9, r3, #1
 800592e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005932:	4413      	add	r3, r2
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	f00a 0301 	and.w	r3, sl, #1
 800593a:	46b8      	mov	r8, r7
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	4607      	mov	r7, r0
 8005940:	4631      	mov	r1, r6
 8005942:	ee18 0a10 	vmov	r0, s16
 8005946:	f7ff fa75 	bl	8004e34 <quorem>
 800594a:	4641      	mov	r1, r8
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005952:	ee18 0a10 	vmov	r0, s16
 8005956:	f000 fb85 	bl	8006064 <__mcmp>
 800595a:	463a      	mov	r2, r7
 800595c:	9003      	str	r0, [sp, #12]
 800595e:	4631      	mov	r1, r6
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fb9b 	bl	800609c <__mdiff>
 8005966:	68c2      	ldr	r2, [r0, #12]
 8005968:	f109 3bff 	add.w	fp, r9, #4294967295
 800596c:	4605      	mov	r5, r0
 800596e:	bb02      	cbnz	r2, 80059b2 <_dtoa_r+0xa62>
 8005970:	4601      	mov	r1, r0
 8005972:	ee18 0a10 	vmov	r0, s16
 8005976:	f000 fb75 	bl	8006064 <__mcmp>
 800597a:	4602      	mov	r2, r0
 800597c:	4629      	mov	r1, r5
 800597e:	4620      	mov	r0, r4
 8005980:	9207      	str	r2, [sp, #28]
 8005982:	f000 f92d 	bl	8005be0 <_Bfree>
 8005986:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800598a:	ea43 0102 	orr.w	r1, r3, r2
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	430b      	orrs	r3, r1
 8005992:	464d      	mov	r5, r9
 8005994:	d10f      	bne.n	80059b6 <_dtoa_r+0xa66>
 8005996:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800599a:	d02a      	beq.n	80059f2 <_dtoa_r+0xaa2>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd02      	ble.n	80059a8 <_dtoa_r+0xa58>
 80059a2:	9b02      	ldr	r3, [sp, #8]
 80059a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059a8:	f88b a000 	strb.w	sl, [fp]
 80059ac:	e775      	b.n	800589a <_dtoa_r+0x94a>
 80059ae:	4638      	mov	r0, r7
 80059b0:	e7ba      	b.n	8005928 <_dtoa_r+0x9d8>
 80059b2:	2201      	movs	r2, #1
 80059b4:	e7e2      	b.n	800597c <_dtoa_r+0xa2c>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db04      	blt.n	80059c6 <_dtoa_r+0xa76>
 80059bc:	9906      	ldr	r1, [sp, #24]
 80059be:	430b      	orrs	r3, r1
 80059c0:	9904      	ldr	r1, [sp, #16]
 80059c2:	430b      	orrs	r3, r1
 80059c4:	d122      	bne.n	8005a0c <_dtoa_r+0xabc>
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	ddee      	ble.n	80059a8 <_dtoa_r+0xa58>
 80059ca:	ee18 1a10 	vmov	r1, s16
 80059ce:	2201      	movs	r2, #1
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fad7 	bl	8005f84 <__lshift>
 80059d6:	4631      	mov	r1, r6
 80059d8:	ee08 0a10 	vmov	s16, r0
 80059dc:	f000 fb42 	bl	8006064 <__mcmp>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	dc03      	bgt.n	80059ec <_dtoa_r+0xa9c>
 80059e4:	d1e0      	bne.n	80059a8 <_dtoa_r+0xa58>
 80059e6:	f01a 0f01 	tst.w	sl, #1
 80059ea:	d0dd      	beq.n	80059a8 <_dtoa_r+0xa58>
 80059ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059f0:	d1d7      	bne.n	80059a2 <_dtoa_r+0xa52>
 80059f2:	2339      	movs	r3, #57	; 0x39
 80059f4:	f88b 3000 	strb.w	r3, [fp]
 80059f8:	462b      	mov	r3, r5
 80059fa:	461d      	mov	r5, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a02:	2a39      	cmp	r2, #57	; 0x39
 8005a04:	d071      	beq.n	8005aea <_dtoa_r+0xb9a>
 8005a06:	3201      	adds	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e746      	b.n	800589a <_dtoa_r+0x94a>
 8005a0c:	2a00      	cmp	r2, #0
 8005a0e:	dd07      	ble.n	8005a20 <_dtoa_r+0xad0>
 8005a10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a14:	d0ed      	beq.n	80059f2 <_dtoa_r+0xaa2>
 8005a16:	f10a 0301 	add.w	r3, sl, #1
 8005a1a:	f88b 3000 	strb.w	r3, [fp]
 8005a1e:	e73c      	b.n	800589a <_dtoa_r+0x94a>
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005a26:	4599      	cmp	r9, r3
 8005a28:	d047      	beq.n	8005aba <_dtoa_r+0xb6a>
 8005a2a:	ee18 1a10 	vmov	r1, s16
 8005a2e:	2300      	movs	r3, #0
 8005a30:	220a      	movs	r2, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f8f6 	bl	8005c24 <__multadd>
 8005a38:	45b8      	cmp	r8, r7
 8005a3a:	ee08 0a10 	vmov	s16, r0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	f04f 020a 	mov.w	r2, #10
 8005a46:	4641      	mov	r1, r8
 8005a48:	4620      	mov	r0, r4
 8005a4a:	d106      	bne.n	8005a5a <_dtoa_r+0xb0a>
 8005a4c:	f000 f8ea 	bl	8005c24 <__multadd>
 8005a50:	4680      	mov	r8, r0
 8005a52:	4607      	mov	r7, r0
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	e772      	b.n	8005940 <_dtoa_r+0x9f0>
 8005a5a:	f000 f8e3 	bl	8005c24 <__multadd>
 8005a5e:	4639      	mov	r1, r7
 8005a60:	4680      	mov	r8, r0
 8005a62:	2300      	movs	r3, #0
 8005a64:	220a      	movs	r2, #10
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 f8dc 	bl	8005c24 <__multadd>
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	e7f1      	b.n	8005a54 <_dtoa_r+0xb04>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	9d01      	ldr	r5, [sp, #4]
 8005a76:	ee18 0a10 	vmov	r0, s16
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	f7ff f9da 	bl	8004e34 <quorem>
 8005a80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	f805 ab01 	strb.w	sl, [r5], #1
 8005a8a:	1aea      	subs	r2, r5, r3
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	dd09      	ble.n	8005aa6 <_dtoa_r+0xb56>
 8005a92:	ee18 1a10 	vmov	r1, s16
 8005a96:	2300      	movs	r3, #0
 8005a98:	220a      	movs	r2, #10
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f8c2 	bl	8005c24 <__multadd>
 8005aa0:	ee08 0a10 	vmov	s16, r0
 8005aa4:	e7e7      	b.n	8005a76 <_dtoa_r+0xb26>
 8005aa6:	9b02      	ldr	r3, [sp, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfc8      	it	gt
 8005aac:	461d      	movgt	r5, r3
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	bfd8      	it	le
 8005ab2:	2501      	movle	r5, #1
 8005ab4:	441d      	add	r5, r3
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	ee18 1a10 	vmov	r1, s16
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fa5f 	bl	8005f84 <__lshift>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	ee08 0a10 	vmov	s16, r0
 8005acc:	f000 faca 	bl	8006064 <__mcmp>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dc91      	bgt.n	80059f8 <_dtoa_r+0xaa8>
 8005ad4:	d102      	bne.n	8005adc <_dtoa_r+0xb8c>
 8005ad6:	f01a 0f01 	tst.w	sl, #1
 8005ada:	d18d      	bne.n	80059f8 <_dtoa_r+0xaa8>
 8005adc:	462b      	mov	r3, r5
 8005ade:	461d      	mov	r5, r3
 8005ae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ae4:	2a30      	cmp	r2, #48	; 0x30
 8005ae6:	d0fa      	beq.n	8005ade <_dtoa_r+0xb8e>
 8005ae8:	e6d7      	b.n	800589a <_dtoa_r+0x94a>
 8005aea:	9a01      	ldr	r2, [sp, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d184      	bne.n	80059fa <_dtoa_r+0xaaa>
 8005af0:	9b00      	ldr	r3, [sp, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2331      	movs	r3, #49	; 0x31
 8005af8:	7013      	strb	r3, [r2, #0]
 8005afa:	e6ce      	b.n	800589a <_dtoa_r+0x94a>
 8005afc:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <_dtoa_r+0xbd4>)
 8005afe:	f7ff ba95 	b.w	800502c <_dtoa_r+0xdc>
 8005b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f47f aa6e 	bne.w	8004fe6 <_dtoa_r+0x96>
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <_dtoa_r+0xbd8>)
 8005b0c:	f7ff ba8e 	b.w	800502c <_dtoa_r+0xdc>
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dcae      	bgt.n	8005a74 <_dtoa_r+0xb24>
 8005b16:	9b06      	ldr	r3, [sp, #24]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	f73f aea8 	bgt.w	800586e <_dtoa_r+0x91e>
 8005b1e:	e7a9      	b.n	8005a74 <_dtoa_r+0xb24>
 8005b20:	080070a7 	.word	0x080070a7
 8005b24:	08007004 	.word	0x08007004
 8005b28:	08007028 	.word	0x08007028

08005b2c <_localeconv_r>:
 8005b2c:	4800      	ldr	r0, [pc, #0]	; (8005b30 <_localeconv_r+0x4>)
 8005b2e:	4770      	bx	lr
 8005b30:	20000160 	.word	0x20000160

08005b34 <malloc>:
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <malloc+0xc>)
 8005b36:	4601      	mov	r1, r0
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	f000 bc17 	b.w	800636c <_malloc_r>
 8005b3e:	bf00      	nop
 8005b40:	2000000c 	.word	0x2000000c

08005b44 <memcpy>:
 8005b44:	440a      	add	r2, r1
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	4770      	bx	lr
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	d1f9      	bne.n	8005b52 <memcpy+0xe>
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <_Balloc>:
 8005b60:	b570      	push	{r4, r5, r6, lr}
 8005b62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b64:	4604      	mov	r4, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	b976      	cbnz	r6, 8005b88 <_Balloc+0x28>
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f7ff ffe2 	bl	8005b34 <malloc>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6260      	str	r0, [r4, #36]	; 0x24
 8005b74:	b920      	cbnz	r0, 8005b80 <_Balloc+0x20>
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <_Balloc+0x78>)
 8005b78:	4818      	ldr	r0, [pc, #96]	; (8005bdc <_Balloc+0x7c>)
 8005b7a:	2166      	movs	r1, #102	; 0x66
 8005b7c:	f000 fc7a 	bl	8006474 <__assert_func>
 8005b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b84:	6006      	str	r6, [r0, #0]
 8005b86:	60c6      	str	r6, [r0, #12]
 8005b88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b8a:	68f3      	ldr	r3, [r6, #12]
 8005b8c:	b183      	cbz	r3, 8005bb0 <_Balloc+0x50>
 8005b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b96:	b9b8      	cbnz	r0, 8005bc8 <_Balloc+0x68>
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b9e:	1d72      	adds	r2, r6, #5
 8005ba0:	0092      	lsls	r2, r2, #2
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 fb60 	bl	8006268 <_calloc_r>
 8005ba8:	b160      	cbz	r0, 8005bc4 <_Balloc+0x64>
 8005baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bae:	e00e      	b.n	8005bce <_Balloc+0x6e>
 8005bb0:	2221      	movs	r2, #33	; 0x21
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 fb57 	bl	8006268 <_calloc_r>
 8005bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bbc:	60f0      	str	r0, [r6, #12]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e4      	bne.n	8005b8e <_Balloc+0x2e>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bd4:	e7f7      	b.n	8005bc6 <_Balloc+0x66>
 8005bd6:	bf00      	nop
 8005bd8:	08007035 	.word	0x08007035
 8005bdc:	080070b8 	.word	0x080070b8

08005be0 <_Bfree>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005be4:	4605      	mov	r5, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	b976      	cbnz	r6, 8005c08 <_Bfree+0x28>
 8005bea:	2010      	movs	r0, #16
 8005bec:	f7ff ffa2 	bl	8005b34 <malloc>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6268      	str	r0, [r5, #36]	; 0x24
 8005bf4:	b920      	cbnz	r0, 8005c00 <_Bfree+0x20>
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <_Bfree+0x3c>)
 8005bf8:	4809      	ldr	r0, [pc, #36]	; (8005c20 <_Bfree+0x40>)
 8005bfa:	218a      	movs	r1, #138	; 0x8a
 8005bfc:	f000 fc3a 	bl	8006474 <__assert_func>
 8005c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c04:	6006      	str	r6, [r0, #0]
 8005c06:	60c6      	str	r6, [r0, #12]
 8005c08:	b13c      	cbz	r4, 8005c1a <_Bfree+0x3a>
 8005c0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c0c:	6862      	ldr	r2, [r4, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c14:	6021      	str	r1, [r4, #0]
 8005c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	08007035 	.word	0x08007035
 8005c20:	080070b8 	.word	0x080070b8

08005c24 <__multadd>:
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	690d      	ldr	r5, [r1, #16]
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	461e      	mov	r6, r3
 8005c30:	f101 0c14 	add.w	ip, r1, #20
 8005c34:	2000      	movs	r0, #0
 8005c36:	f8dc 3000 	ldr.w	r3, [ip]
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c40:	0c1e      	lsrs	r6, r3, #16
 8005c42:	0c0b      	lsrs	r3, r1, #16
 8005c44:	fb02 3306 	mla	r3, r2, r6, r3
 8005c48:	b289      	uxth	r1, r1
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c50:	4285      	cmp	r5, r0
 8005c52:	f84c 1b04 	str.w	r1, [ip], #4
 8005c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c5a:	dcec      	bgt.n	8005c36 <__multadd+0x12>
 8005c5c:	b30e      	cbz	r6, 8005ca2 <__multadd+0x7e>
 8005c5e:	68a3      	ldr	r3, [r4, #8]
 8005c60:	42ab      	cmp	r3, r5
 8005c62:	dc19      	bgt.n	8005c98 <__multadd+0x74>
 8005c64:	6861      	ldr	r1, [r4, #4]
 8005c66:	4638      	mov	r0, r7
 8005c68:	3101      	adds	r1, #1
 8005c6a:	f7ff ff79 	bl	8005b60 <_Balloc>
 8005c6e:	4680      	mov	r8, r0
 8005c70:	b928      	cbnz	r0, 8005c7e <__multadd+0x5a>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <__multadd+0x84>)
 8005c76:	480d      	ldr	r0, [pc, #52]	; (8005cac <__multadd+0x88>)
 8005c78:	21b5      	movs	r1, #181	; 0xb5
 8005c7a:	f000 fbfb 	bl	8006474 <__assert_func>
 8005c7e:	6922      	ldr	r2, [r4, #16]
 8005c80:	3202      	adds	r2, #2
 8005c82:	f104 010c 	add.w	r1, r4, #12
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	300c      	adds	r0, #12
 8005c8a:	f7ff ff5b 	bl	8005b44 <memcpy>
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ffa5 	bl	8005be0 <_Bfree>
 8005c96:	4644      	mov	r4, r8
 8005c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	615e      	str	r6, [r3, #20]
 8005ca0:	6125      	str	r5, [r4, #16]
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	080070a7 	.word	0x080070a7
 8005cac:	080070b8 	.word	0x080070b8

08005cb0 <__hi0bits>:
 8005cb0:	0c03      	lsrs	r3, r0, #16
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	b9d3      	cbnz	r3, 8005cec <__hi0bits+0x3c>
 8005cb6:	0400      	lsls	r0, r0, #16
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005cbe:	bf04      	itt	eq
 8005cc0:	0200      	lsleq	r0, r0, #8
 8005cc2:	3308      	addeq	r3, #8
 8005cc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005cc8:	bf04      	itt	eq
 8005cca:	0100      	lsleq	r0, r0, #4
 8005ccc:	3304      	addeq	r3, #4
 8005cce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cd2:	bf04      	itt	eq
 8005cd4:	0080      	lsleq	r0, r0, #2
 8005cd6:	3302      	addeq	r3, #2
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	db05      	blt.n	8005ce8 <__hi0bits+0x38>
 8005cdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ce0:	f103 0301 	add.w	r3, r3, #1
 8005ce4:	bf08      	it	eq
 8005ce6:	2320      	moveq	r3, #32
 8005ce8:	4618      	mov	r0, r3
 8005cea:	4770      	bx	lr
 8005cec:	2300      	movs	r3, #0
 8005cee:	e7e4      	b.n	8005cba <__hi0bits+0xa>

08005cf0 <__lo0bits>:
 8005cf0:	6803      	ldr	r3, [r0, #0]
 8005cf2:	f013 0207 	ands.w	r2, r3, #7
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	d00b      	beq.n	8005d12 <__lo0bits+0x22>
 8005cfa:	07da      	lsls	r2, r3, #31
 8005cfc:	d423      	bmi.n	8005d46 <__lo0bits+0x56>
 8005cfe:	0798      	lsls	r0, r3, #30
 8005d00:	bf49      	itett	mi
 8005d02:	085b      	lsrmi	r3, r3, #1
 8005d04:	089b      	lsrpl	r3, r3, #2
 8005d06:	2001      	movmi	r0, #1
 8005d08:	600b      	strmi	r3, [r1, #0]
 8005d0a:	bf5c      	itt	pl
 8005d0c:	600b      	strpl	r3, [r1, #0]
 8005d0e:	2002      	movpl	r0, #2
 8005d10:	4770      	bx	lr
 8005d12:	b298      	uxth	r0, r3
 8005d14:	b9a8      	cbnz	r0, 8005d42 <__lo0bits+0x52>
 8005d16:	0c1b      	lsrs	r3, r3, #16
 8005d18:	2010      	movs	r0, #16
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	b90a      	cbnz	r2, 8005d22 <__lo0bits+0x32>
 8005d1e:	3008      	adds	r0, #8
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	071a      	lsls	r2, r3, #28
 8005d24:	bf04      	itt	eq
 8005d26:	091b      	lsreq	r3, r3, #4
 8005d28:	3004      	addeq	r0, #4
 8005d2a:	079a      	lsls	r2, r3, #30
 8005d2c:	bf04      	itt	eq
 8005d2e:	089b      	lsreq	r3, r3, #2
 8005d30:	3002      	addeq	r0, #2
 8005d32:	07da      	lsls	r2, r3, #31
 8005d34:	d403      	bmi.n	8005d3e <__lo0bits+0x4e>
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	f100 0001 	add.w	r0, r0, #1
 8005d3c:	d005      	beq.n	8005d4a <__lo0bits+0x5a>
 8005d3e:	600b      	str	r3, [r1, #0]
 8005d40:	4770      	bx	lr
 8005d42:	4610      	mov	r0, r2
 8005d44:	e7e9      	b.n	8005d1a <__lo0bits+0x2a>
 8005d46:	2000      	movs	r0, #0
 8005d48:	4770      	bx	lr
 8005d4a:	2020      	movs	r0, #32
 8005d4c:	4770      	bx	lr
	...

08005d50 <__i2b>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	460c      	mov	r4, r1
 8005d54:	2101      	movs	r1, #1
 8005d56:	f7ff ff03 	bl	8005b60 <_Balloc>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	b928      	cbnz	r0, 8005d6a <__i2b+0x1a>
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <__i2b+0x24>)
 8005d60:	4805      	ldr	r0, [pc, #20]	; (8005d78 <__i2b+0x28>)
 8005d62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d66:	f000 fb85 	bl	8006474 <__assert_func>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	6144      	str	r4, [r0, #20]
 8005d6e:	6103      	str	r3, [r0, #16]
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	bf00      	nop
 8005d74:	080070a7 	.word	0x080070a7
 8005d78:	080070b8 	.word	0x080070b8

08005d7c <__multiply>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	4691      	mov	r9, r2
 8005d82:	690a      	ldr	r2, [r1, #16]
 8005d84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	bfb8      	it	lt
 8005d8c:	460b      	movlt	r3, r1
 8005d8e:	460c      	mov	r4, r1
 8005d90:	bfbc      	itt	lt
 8005d92:	464c      	movlt	r4, r9
 8005d94:	4699      	movlt	r9, r3
 8005d96:	6927      	ldr	r7, [r4, #16]
 8005d98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	6861      	ldr	r1, [r4, #4]
 8005da0:	eb07 060a 	add.w	r6, r7, sl
 8005da4:	42b3      	cmp	r3, r6
 8005da6:	b085      	sub	sp, #20
 8005da8:	bfb8      	it	lt
 8005daa:	3101      	addlt	r1, #1
 8005dac:	f7ff fed8 	bl	8005b60 <_Balloc>
 8005db0:	b930      	cbnz	r0, 8005dc0 <__multiply+0x44>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b44      	ldr	r3, [pc, #272]	; (8005ec8 <__multiply+0x14c>)
 8005db6:	4845      	ldr	r0, [pc, #276]	; (8005ecc <__multiply+0x150>)
 8005db8:	f240 115d 	movw	r1, #349	; 0x15d
 8005dbc:	f000 fb5a 	bl	8006474 <__assert_func>
 8005dc0:	f100 0514 	add.w	r5, r0, #20
 8005dc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005dc8:	462b      	mov	r3, r5
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	d321      	bcc.n	8005e14 <__multiply+0x98>
 8005dd0:	f104 0314 	add.w	r3, r4, #20
 8005dd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005dd8:	f109 0314 	add.w	r3, r9, #20
 8005ddc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005de0:	9202      	str	r2, [sp, #8]
 8005de2:	1b3a      	subs	r2, r7, r4
 8005de4:	3a15      	subs	r2, #21
 8005de6:	f022 0203 	bic.w	r2, r2, #3
 8005dea:	3204      	adds	r2, #4
 8005dec:	f104 0115 	add.w	r1, r4, #21
 8005df0:	428f      	cmp	r7, r1
 8005df2:	bf38      	it	cc
 8005df4:	2204      	movcc	r2, #4
 8005df6:	9201      	str	r2, [sp, #4]
 8005df8:	9a02      	ldr	r2, [sp, #8]
 8005dfa:	9303      	str	r3, [sp, #12]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d80c      	bhi.n	8005e1a <__multiply+0x9e>
 8005e00:	2e00      	cmp	r6, #0
 8005e02:	dd03      	ble.n	8005e0c <__multiply+0x90>
 8005e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05a      	beq.n	8005ec2 <__multiply+0x146>
 8005e0c:	6106      	str	r6, [r0, #16]
 8005e0e:	b005      	add	sp, #20
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	f843 2b04 	str.w	r2, [r3], #4
 8005e18:	e7d8      	b.n	8005dcc <__multiply+0x50>
 8005e1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e1e:	f1ba 0f00 	cmp.w	sl, #0
 8005e22:	d024      	beq.n	8005e6e <__multiply+0xf2>
 8005e24:	f104 0e14 	add.w	lr, r4, #20
 8005e28:	46a9      	mov	r9, r5
 8005e2a:	f04f 0c00 	mov.w	ip, #0
 8005e2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e32:	f8d9 1000 	ldr.w	r1, [r9]
 8005e36:	fa1f fb82 	uxth.w	fp, r2
 8005e3a:	b289      	uxth	r1, r1
 8005e3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e44:	f8d9 2000 	ldr.w	r2, [r9]
 8005e48:	4461      	add	r1, ip
 8005e4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e56:	b289      	uxth	r1, r1
 8005e58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e5c:	4577      	cmp	r7, lr
 8005e5e:	f849 1b04 	str.w	r1, [r9], #4
 8005e62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e66:	d8e2      	bhi.n	8005e2e <__multiply+0xb2>
 8005e68:	9a01      	ldr	r2, [sp, #4]
 8005e6a:	f845 c002 	str.w	ip, [r5, r2]
 8005e6e:	9a03      	ldr	r2, [sp, #12]
 8005e70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e74:	3304      	adds	r3, #4
 8005e76:	f1b9 0f00 	cmp.w	r9, #0
 8005e7a:	d020      	beq.n	8005ebe <__multiply+0x142>
 8005e7c:	6829      	ldr	r1, [r5, #0]
 8005e7e:	f104 0c14 	add.w	ip, r4, #20
 8005e82:	46ae      	mov	lr, r5
 8005e84:	f04f 0a00 	mov.w	sl, #0
 8005e88:	f8bc b000 	ldrh.w	fp, [ip]
 8005e8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e90:	fb09 220b 	mla	r2, r9, fp, r2
 8005e94:	4492      	add	sl, r2
 8005e96:	b289      	uxth	r1, r1
 8005e98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e9c:	f84e 1b04 	str.w	r1, [lr], #4
 8005ea0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ea4:	f8be 1000 	ldrh.w	r1, [lr]
 8005ea8:	0c12      	lsrs	r2, r2, #16
 8005eaa:	fb09 1102 	mla	r1, r9, r2, r1
 8005eae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005eb2:	4567      	cmp	r7, ip
 8005eb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005eb8:	d8e6      	bhi.n	8005e88 <__multiply+0x10c>
 8005eba:	9a01      	ldr	r2, [sp, #4]
 8005ebc:	50a9      	str	r1, [r5, r2]
 8005ebe:	3504      	adds	r5, #4
 8005ec0:	e79a      	b.n	8005df8 <__multiply+0x7c>
 8005ec2:	3e01      	subs	r6, #1
 8005ec4:	e79c      	b.n	8005e00 <__multiply+0x84>
 8005ec6:	bf00      	nop
 8005ec8:	080070a7 	.word	0x080070a7
 8005ecc:	080070b8 	.word	0x080070b8

08005ed0 <__pow5mult>:
 8005ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	f012 0203 	ands.w	r2, r2, #3
 8005eda:	4606      	mov	r6, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	d007      	beq.n	8005ef0 <__pow5mult+0x20>
 8005ee0:	4c25      	ldr	r4, [pc, #148]	; (8005f78 <__pow5mult+0xa8>)
 8005ee2:	3a01      	subs	r2, #1
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eea:	f7ff fe9b 	bl	8005c24 <__multadd>
 8005eee:	4607      	mov	r7, r0
 8005ef0:	10ad      	asrs	r5, r5, #2
 8005ef2:	d03d      	beq.n	8005f70 <__pow5mult+0xa0>
 8005ef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ef6:	b97c      	cbnz	r4, 8005f18 <__pow5mult+0x48>
 8005ef8:	2010      	movs	r0, #16
 8005efa:	f7ff fe1b 	bl	8005b34 <malloc>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6270      	str	r0, [r6, #36]	; 0x24
 8005f02:	b928      	cbnz	r0, 8005f10 <__pow5mult+0x40>
 8005f04:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <__pow5mult+0xac>)
 8005f06:	481e      	ldr	r0, [pc, #120]	; (8005f80 <__pow5mult+0xb0>)
 8005f08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f0c:	f000 fab2 	bl	8006474 <__assert_func>
 8005f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f14:	6004      	str	r4, [r0, #0]
 8005f16:	60c4      	str	r4, [r0, #12]
 8005f18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f20:	b94c      	cbnz	r4, 8005f36 <__pow5mult+0x66>
 8005f22:	f240 2171 	movw	r1, #625	; 0x271
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7ff ff12 	bl	8005d50 <__i2b>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f32:	4604      	mov	r4, r0
 8005f34:	6003      	str	r3, [r0, #0]
 8005f36:	f04f 0900 	mov.w	r9, #0
 8005f3a:	07eb      	lsls	r3, r5, #31
 8005f3c:	d50a      	bpl.n	8005f54 <__pow5mult+0x84>
 8005f3e:	4639      	mov	r1, r7
 8005f40:	4622      	mov	r2, r4
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff ff1a 	bl	8005d7c <__multiply>
 8005f48:	4639      	mov	r1, r7
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7ff fe47 	bl	8005be0 <_Bfree>
 8005f52:	4647      	mov	r7, r8
 8005f54:	106d      	asrs	r5, r5, #1
 8005f56:	d00b      	beq.n	8005f70 <__pow5mult+0xa0>
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	b938      	cbnz	r0, 8005f6c <__pow5mult+0x9c>
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7ff ff0b 	bl	8005d7c <__multiply>
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	f8c0 9000 	str.w	r9, [r0]
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	e7e4      	b.n	8005f3a <__pow5mult+0x6a>
 8005f70:	4638      	mov	r0, r7
 8005f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f76:	bf00      	nop
 8005f78:	08007208 	.word	0x08007208
 8005f7c:	08007035 	.word	0x08007035
 8005f80:	080070b8 	.word	0x080070b8

08005f84 <__lshift>:
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	460c      	mov	r4, r1
 8005f8a:	6849      	ldr	r1, [r1, #4]
 8005f8c:	6923      	ldr	r3, [r4, #16]
 8005f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	4607      	mov	r7, r0
 8005f96:	4691      	mov	r9, r2
 8005f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f9c:	f108 0601 	add.w	r6, r8, #1
 8005fa0:	42b3      	cmp	r3, r6
 8005fa2:	db0b      	blt.n	8005fbc <__lshift+0x38>
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7ff fddb 	bl	8005b60 <_Balloc>
 8005faa:	4605      	mov	r5, r0
 8005fac:	b948      	cbnz	r0, 8005fc2 <__lshift+0x3e>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <__lshift+0xd8>)
 8005fb2:	482b      	ldr	r0, [pc, #172]	; (8006060 <__lshift+0xdc>)
 8005fb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fb8:	f000 fa5c 	bl	8006474 <__assert_func>
 8005fbc:	3101      	adds	r1, #1
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__lshift+0x1c>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f100 0114 	add.w	r1, r0, #20
 8005fc8:	f100 0210 	add.w	r2, r0, #16
 8005fcc:	4618      	mov	r0, r3
 8005fce:	4553      	cmp	r3, sl
 8005fd0:	db37      	blt.n	8006042 <__lshift+0xbe>
 8005fd2:	6920      	ldr	r0, [r4, #16]
 8005fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fd8:	f104 0314 	add.w	r3, r4, #20
 8005fdc:	f019 091f 	ands.w	r9, r9, #31
 8005fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fe8:	d02f      	beq.n	800604a <__lshift+0xc6>
 8005fea:	f1c9 0e20 	rsb	lr, r9, #32
 8005fee:	468a      	mov	sl, r1
 8005ff0:	f04f 0c00 	mov.w	ip, #0
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	fa02 f209 	lsl.w	r2, r2, r9
 8005ffa:	ea42 020c 	orr.w	r2, r2, ip
 8005ffe:	f84a 2b04 	str.w	r2, [sl], #4
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	4298      	cmp	r0, r3
 8006008:	fa22 fc0e 	lsr.w	ip, r2, lr
 800600c:	d8f2      	bhi.n	8005ff4 <__lshift+0x70>
 800600e:	1b03      	subs	r3, r0, r4
 8006010:	3b15      	subs	r3, #21
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	3304      	adds	r3, #4
 8006018:	f104 0215 	add.w	r2, r4, #21
 800601c:	4290      	cmp	r0, r2
 800601e:	bf38      	it	cc
 8006020:	2304      	movcc	r3, #4
 8006022:	f841 c003 	str.w	ip, [r1, r3]
 8006026:	f1bc 0f00 	cmp.w	ip, #0
 800602a:	d001      	beq.n	8006030 <__lshift+0xac>
 800602c:	f108 0602 	add.w	r6, r8, #2
 8006030:	3e01      	subs	r6, #1
 8006032:	4638      	mov	r0, r7
 8006034:	612e      	str	r6, [r5, #16]
 8006036:	4621      	mov	r1, r4
 8006038:	f7ff fdd2 	bl	8005be0 <_Bfree>
 800603c:	4628      	mov	r0, r5
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	f842 0f04 	str.w	r0, [r2, #4]!
 8006046:	3301      	adds	r3, #1
 8006048:	e7c1      	b.n	8005fce <__lshift+0x4a>
 800604a:	3904      	subs	r1, #4
 800604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006050:	f841 2f04 	str.w	r2, [r1, #4]!
 8006054:	4298      	cmp	r0, r3
 8006056:	d8f9      	bhi.n	800604c <__lshift+0xc8>
 8006058:	e7ea      	b.n	8006030 <__lshift+0xac>
 800605a:	bf00      	nop
 800605c:	080070a7 	.word	0x080070a7
 8006060:	080070b8 	.word	0x080070b8

08006064 <__mcmp>:
 8006064:	b530      	push	{r4, r5, lr}
 8006066:	6902      	ldr	r2, [r0, #16]
 8006068:	690c      	ldr	r4, [r1, #16]
 800606a:	1b12      	subs	r2, r2, r4
 800606c:	d10e      	bne.n	800608c <__mcmp+0x28>
 800606e:	f100 0314 	add.w	r3, r0, #20
 8006072:	3114      	adds	r1, #20
 8006074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800607c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006084:	42a5      	cmp	r5, r4
 8006086:	d003      	beq.n	8006090 <__mcmp+0x2c>
 8006088:	d305      	bcc.n	8006096 <__mcmp+0x32>
 800608a:	2201      	movs	r2, #1
 800608c:	4610      	mov	r0, r2
 800608e:	bd30      	pop	{r4, r5, pc}
 8006090:	4283      	cmp	r3, r0
 8006092:	d3f3      	bcc.n	800607c <__mcmp+0x18>
 8006094:	e7fa      	b.n	800608c <__mcmp+0x28>
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	e7f7      	b.n	800608c <__mcmp+0x28>

0800609c <__mdiff>:
 800609c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	4606      	mov	r6, r0
 80060a4:	4611      	mov	r1, r2
 80060a6:	4620      	mov	r0, r4
 80060a8:	4690      	mov	r8, r2
 80060aa:	f7ff ffdb 	bl	8006064 <__mcmp>
 80060ae:	1e05      	subs	r5, r0, #0
 80060b0:	d110      	bne.n	80060d4 <__mdiff+0x38>
 80060b2:	4629      	mov	r1, r5
 80060b4:	4630      	mov	r0, r6
 80060b6:	f7ff fd53 	bl	8005b60 <_Balloc>
 80060ba:	b930      	cbnz	r0, 80060ca <__mdiff+0x2e>
 80060bc:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <__mdiff+0x10c>)
 80060be:	4602      	mov	r2, r0
 80060c0:	f240 2132 	movw	r1, #562	; 0x232
 80060c4:	4839      	ldr	r0, [pc, #228]	; (80061ac <__mdiff+0x110>)
 80060c6:	f000 f9d5 	bl	8006474 <__assert_func>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	bfa4      	itt	ge
 80060d6:	4643      	movge	r3, r8
 80060d8:	46a0      	movge	r8, r4
 80060da:	4630      	mov	r0, r6
 80060dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060e0:	bfa6      	itte	ge
 80060e2:	461c      	movge	r4, r3
 80060e4:	2500      	movge	r5, #0
 80060e6:	2501      	movlt	r5, #1
 80060e8:	f7ff fd3a 	bl	8005b60 <_Balloc>
 80060ec:	b920      	cbnz	r0, 80060f8 <__mdiff+0x5c>
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <__mdiff+0x10c>)
 80060f0:	4602      	mov	r2, r0
 80060f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060f6:	e7e5      	b.n	80060c4 <__mdiff+0x28>
 80060f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060fc:	6926      	ldr	r6, [r4, #16]
 80060fe:	60c5      	str	r5, [r0, #12]
 8006100:	f104 0914 	add.w	r9, r4, #20
 8006104:	f108 0514 	add.w	r5, r8, #20
 8006108:	f100 0e14 	add.w	lr, r0, #20
 800610c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006114:	f108 0210 	add.w	r2, r8, #16
 8006118:	46f2      	mov	sl, lr
 800611a:	2100      	movs	r1, #0
 800611c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006124:	fa1f f883 	uxth.w	r8, r3
 8006128:	fa11 f18b 	uxtah	r1, r1, fp
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	eba1 0808 	sub.w	r8, r1, r8
 8006132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006136:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800613a:	fa1f f888 	uxth.w	r8, r8
 800613e:	1419      	asrs	r1, r3, #16
 8006140:	454e      	cmp	r6, r9
 8006142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006146:	f84a 3b04 	str.w	r3, [sl], #4
 800614a:	d8e7      	bhi.n	800611c <__mdiff+0x80>
 800614c:	1b33      	subs	r3, r6, r4
 800614e:	3b15      	subs	r3, #21
 8006150:	f023 0303 	bic.w	r3, r3, #3
 8006154:	3304      	adds	r3, #4
 8006156:	3415      	adds	r4, #21
 8006158:	42a6      	cmp	r6, r4
 800615a:	bf38      	it	cc
 800615c:	2304      	movcc	r3, #4
 800615e:	441d      	add	r5, r3
 8006160:	4473      	add	r3, lr
 8006162:	469e      	mov	lr, r3
 8006164:	462e      	mov	r6, r5
 8006166:	4566      	cmp	r6, ip
 8006168:	d30e      	bcc.n	8006188 <__mdiff+0xec>
 800616a:	f10c 0203 	add.w	r2, ip, #3
 800616e:	1b52      	subs	r2, r2, r5
 8006170:	f022 0203 	bic.w	r2, r2, #3
 8006174:	3d03      	subs	r5, #3
 8006176:	45ac      	cmp	ip, r5
 8006178:	bf38      	it	cc
 800617a:	2200      	movcc	r2, #0
 800617c:	441a      	add	r2, r3
 800617e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006182:	b17b      	cbz	r3, 80061a4 <__mdiff+0x108>
 8006184:	6107      	str	r7, [r0, #16]
 8006186:	e7a3      	b.n	80060d0 <__mdiff+0x34>
 8006188:	f856 8b04 	ldr.w	r8, [r6], #4
 800618c:	fa11 f288 	uxtah	r2, r1, r8
 8006190:	1414      	asrs	r4, r2, #16
 8006192:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006196:	b292      	uxth	r2, r2
 8006198:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800619c:	f84e 2b04 	str.w	r2, [lr], #4
 80061a0:	1421      	asrs	r1, r4, #16
 80061a2:	e7e0      	b.n	8006166 <__mdiff+0xca>
 80061a4:	3f01      	subs	r7, #1
 80061a6:	e7ea      	b.n	800617e <__mdiff+0xe2>
 80061a8:	080070a7 	.word	0x080070a7
 80061ac:	080070b8 	.word	0x080070b8

080061b0 <__d2b>:
 80061b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061b4:	4689      	mov	r9, r1
 80061b6:	2101      	movs	r1, #1
 80061b8:	ec57 6b10 	vmov	r6, r7, d0
 80061bc:	4690      	mov	r8, r2
 80061be:	f7ff fccf 	bl	8005b60 <_Balloc>
 80061c2:	4604      	mov	r4, r0
 80061c4:	b930      	cbnz	r0, 80061d4 <__d2b+0x24>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <__d2b+0xb0>)
 80061ca:	4826      	ldr	r0, [pc, #152]	; (8006264 <__d2b+0xb4>)
 80061cc:	f240 310a 	movw	r1, #778	; 0x30a
 80061d0:	f000 f950 	bl	8006474 <__assert_func>
 80061d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061dc:	bb35      	cbnz	r5, 800622c <__d2b+0x7c>
 80061de:	2e00      	cmp	r6, #0
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	d028      	beq.n	8006236 <__d2b+0x86>
 80061e4:	4668      	mov	r0, sp
 80061e6:	9600      	str	r6, [sp, #0]
 80061e8:	f7ff fd82 	bl	8005cf0 <__lo0bits>
 80061ec:	9900      	ldr	r1, [sp, #0]
 80061ee:	b300      	cbz	r0, 8006232 <__d2b+0x82>
 80061f0:	9a01      	ldr	r2, [sp, #4]
 80061f2:	f1c0 0320 	rsb	r3, r0, #32
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	430b      	orrs	r3, r1
 80061fc:	40c2      	lsrs	r2, r0
 80061fe:	6163      	str	r3, [r4, #20]
 8006200:	9201      	str	r2, [sp, #4]
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	61a3      	str	r3, [r4, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bf14      	ite	ne
 800620a:	2202      	movne	r2, #2
 800620c:	2201      	moveq	r2, #1
 800620e:	6122      	str	r2, [r4, #16]
 8006210:	b1d5      	cbz	r5, 8006248 <__d2b+0x98>
 8006212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006216:	4405      	add	r5, r0
 8006218:	f8c9 5000 	str.w	r5, [r9]
 800621c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006220:	f8c8 0000 	str.w	r0, [r8]
 8006224:	4620      	mov	r0, r4
 8006226:	b003      	add	sp, #12
 8006228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800622c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006230:	e7d5      	b.n	80061de <__d2b+0x2e>
 8006232:	6161      	str	r1, [r4, #20]
 8006234:	e7e5      	b.n	8006202 <__d2b+0x52>
 8006236:	a801      	add	r0, sp, #4
 8006238:	f7ff fd5a 	bl	8005cf0 <__lo0bits>
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	2201      	movs	r2, #1
 8006242:	6122      	str	r2, [r4, #16]
 8006244:	3020      	adds	r0, #32
 8006246:	e7e3      	b.n	8006210 <__d2b+0x60>
 8006248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800624c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006250:	f8c9 0000 	str.w	r0, [r9]
 8006254:	6918      	ldr	r0, [r3, #16]
 8006256:	f7ff fd2b 	bl	8005cb0 <__hi0bits>
 800625a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800625e:	e7df      	b.n	8006220 <__d2b+0x70>
 8006260:	080070a7 	.word	0x080070a7
 8006264:	080070b8 	.word	0x080070b8

08006268 <_calloc_r>:
 8006268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626a:	fba1 2402 	umull	r2, r4, r1, r2
 800626e:	b94c      	cbnz	r4, 8006284 <_calloc_r+0x1c>
 8006270:	4611      	mov	r1, r2
 8006272:	9201      	str	r2, [sp, #4]
 8006274:	f000 f87a 	bl	800636c <_malloc_r>
 8006278:	9a01      	ldr	r2, [sp, #4]
 800627a:	4605      	mov	r5, r0
 800627c:	b930      	cbnz	r0, 800628c <_calloc_r+0x24>
 800627e:	4628      	mov	r0, r5
 8006280:	b003      	add	sp, #12
 8006282:	bd30      	pop	{r4, r5, pc}
 8006284:	220c      	movs	r2, #12
 8006286:	6002      	str	r2, [r0, #0]
 8006288:	2500      	movs	r5, #0
 800628a:	e7f8      	b.n	800627e <_calloc_r+0x16>
 800628c:	4621      	mov	r1, r4
 800628e:	f7fe f95f 	bl	8004550 <memset>
 8006292:	e7f4      	b.n	800627e <_calloc_r+0x16>

08006294 <_free_r>:
 8006294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	d044      	beq.n	8006324 <_free_r+0x90>
 800629a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629e:	9001      	str	r0, [sp, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f1a1 0404 	sub.w	r4, r1, #4
 80062a6:	bfb8      	it	lt
 80062a8:	18e4      	addlt	r4, r4, r3
 80062aa:	f000 f925 	bl	80064f8 <__malloc_lock>
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <_free_r+0x94>)
 80062b0:	9801      	ldr	r0, [sp, #4]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x30>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	b003      	add	sp, #12
 80062bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c0:	f000 b920 	b.w	8006504 <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x46>
 80062c8:	6825      	ldr	r5, [r4, #0]
 80062ca:	1961      	adds	r1, r4, r5
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1949      	addeq	r1, r1, r5
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x22>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x50>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x46>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1855      	adds	r5, r2, r1
 80062e8:	42a5      	cmp	r5, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x70>
 80062ec:	6824      	ldr	r4, [r4, #0]
 80062ee:	4421      	add	r1, r4
 80062f0:	1854      	adds	r4, r2, r1
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x26>
 80062f8:	681c      	ldr	r4, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	4421      	add	r1, r4
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	e7da      	b.n	80062ba <_free_r+0x26>
 8006304:	d902      	bls.n	800630c <_free_r+0x78>
 8006306:	230c      	movs	r3, #12
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x26>
 800630c:	6825      	ldr	r5, [r4, #0]
 800630e:	1961      	adds	r1, r4, r5
 8006310:	428b      	cmp	r3, r1
 8006312:	bf04      	itt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1949      	addeq	r1, r1, r5
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	6054      	str	r4, [r2, #4]
 8006322:	e7ca      	b.n	80062ba <_free_r+0x26>
 8006324:	b003      	add	sp, #12
 8006326:	bd30      	pop	{r4, r5, pc}
 8006328:	200002e0 	.word	0x200002e0

0800632c <sbrk_aligned>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4e0e      	ldr	r6, [pc, #56]	; (8006368 <sbrk_aligned+0x3c>)
 8006330:	460c      	mov	r4, r1
 8006332:	6831      	ldr	r1, [r6, #0]
 8006334:	4605      	mov	r5, r0
 8006336:	b911      	cbnz	r1, 800633e <sbrk_aligned+0x12>
 8006338:	f000 f88c 	bl	8006454 <_sbrk_r>
 800633c:	6030      	str	r0, [r6, #0]
 800633e:	4621      	mov	r1, r4
 8006340:	4628      	mov	r0, r5
 8006342:	f000 f887 	bl	8006454 <_sbrk_r>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	d00a      	beq.n	8006360 <sbrk_aligned+0x34>
 800634a:	1cc4      	adds	r4, r0, #3
 800634c:	f024 0403 	bic.w	r4, r4, #3
 8006350:	42a0      	cmp	r0, r4
 8006352:	d007      	beq.n	8006364 <sbrk_aligned+0x38>
 8006354:	1a21      	subs	r1, r4, r0
 8006356:	4628      	mov	r0, r5
 8006358:	f000 f87c 	bl	8006454 <_sbrk_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d101      	bne.n	8006364 <sbrk_aligned+0x38>
 8006360:	f04f 34ff 	mov.w	r4, #4294967295
 8006364:	4620      	mov	r0, r4
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	200002e4 	.word	0x200002e4

0800636c <_malloc_r>:
 800636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006370:	1ccd      	adds	r5, r1, #3
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	2d00      	cmp	r5, #0
 8006380:	4607      	mov	r7, r0
 8006382:	db01      	blt.n	8006388 <_malloc_r+0x1c>
 8006384:	42a9      	cmp	r1, r5
 8006386:	d905      	bls.n	8006394 <_malloc_r+0x28>
 8006388:	230c      	movs	r3, #12
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	2600      	movs	r6, #0
 800638e:	4630      	mov	r0, r6
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	4e2e      	ldr	r6, [pc, #184]	; (8006450 <_malloc_r+0xe4>)
 8006396:	f000 f8af 	bl	80064f8 <__malloc_lock>
 800639a:	6833      	ldr	r3, [r6, #0]
 800639c:	461c      	mov	r4, r3
 800639e:	bb34      	cbnz	r4, 80063ee <_malloc_r+0x82>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	f7ff ffc2 	bl	800632c <sbrk_aligned>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	4604      	mov	r4, r0
 80063ac:	d14d      	bne.n	800644a <_malloc_r+0xde>
 80063ae:	6834      	ldr	r4, [r6, #0]
 80063b0:	4626      	mov	r6, r4
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	d140      	bne.n	8006438 <_malloc_r+0xcc>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	4631      	mov	r1, r6
 80063ba:	4638      	mov	r0, r7
 80063bc:	eb04 0803 	add.w	r8, r4, r3
 80063c0:	f000 f848 	bl	8006454 <_sbrk_r>
 80063c4:	4580      	cmp	r8, r0
 80063c6:	d13a      	bne.n	800643e <_malloc_r+0xd2>
 80063c8:	6821      	ldr	r1, [r4, #0]
 80063ca:	3503      	adds	r5, #3
 80063cc:	1a6d      	subs	r5, r5, r1
 80063ce:	f025 0503 	bic.w	r5, r5, #3
 80063d2:	3508      	adds	r5, #8
 80063d4:	2d0c      	cmp	r5, #12
 80063d6:	bf38      	it	cc
 80063d8:	250c      	movcc	r5, #12
 80063da:	4629      	mov	r1, r5
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff ffa5 	bl	800632c <sbrk_aligned>
 80063e2:	3001      	adds	r0, #1
 80063e4:	d02b      	beq.n	800643e <_malloc_r+0xd2>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	442b      	add	r3, r5
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	e00e      	b.n	800640c <_malloc_r+0xa0>
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	1b52      	subs	r2, r2, r5
 80063f2:	d41e      	bmi.n	8006432 <_malloc_r+0xc6>
 80063f4:	2a0b      	cmp	r2, #11
 80063f6:	d916      	bls.n	8006426 <_malloc_r+0xba>
 80063f8:	1961      	adds	r1, r4, r5
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	6025      	str	r5, [r4, #0]
 80063fe:	bf18      	it	ne
 8006400:	6059      	strne	r1, [r3, #4]
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	bf08      	it	eq
 8006406:	6031      	streq	r1, [r6, #0]
 8006408:	5162      	str	r2, [r4, r5]
 800640a:	604b      	str	r3, [r1, #4]
 800640c:	4638      	mov	r0, r7
 800640e:	f104 060b 	add.w	r6, r4, #11
 8006412:	f000 f877 	bl	8006504 <__malloc_unlock>
 8006416:	f026 0607 	bic.w	r6, r6, #7
 800641a:	1d23      	adds	r3, r4, #4
 800641c:	1af2      	subs	r2, r6, r3
 800641e:	d0b6      	beq.n	800638e <_malloc_r+0x22>
 8006420:	1b9b      	subs	r3, r3, r6
 8006422:	50a3      	str	r3, [r4, r2]
 8006424:	e7b3      	b.n	800638e <_malloc_r+0x22>
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	42a3      	cmp	r3, r4
 800642a:	bf0c      	ite	eq
 800642c:	6032      	streq	r2, [r6, #0]
 800642e:	605a      	strne	r2, [r3, #4]
 8006430:	e7ec      	b.n	800640c <_malloc_r+0xa0>
 8006432:	4623      	mov	r3, r4
 8006434:	6864      	ldr	r4, [r4, #4]
 8006436:	e7b2      	b.n	800639e <_malloc_r+0x32>
 8006438:	4634      	mov	r4, r6
 800643a:	6876      	ldr	r6, [r6, #4]
 800643c:	e7b9      	b.n	80063b2 <_malloc_r+0x46>
 800643e:	230c      	movs	r3, #12
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4638      	mov	r0, r7
 8006444:	f000 f85e 	bl	8006504 <__malloc_unlock>
 8006448:	e7a1      	b.n	800638e <_malloc_r+0x22>
 800644a:	6025      	str	r5, [r4, #0]
 800644c:	e7de      	b.n	800640c <_malloc_r+0xa0>
 800644e:	bf00      	nop
 8006450:	200002e0 	.word	0x200002e0

08006454 <_sbrk_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_sbrk_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fb f8bc 	bl	80015dc <_sbrk>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_sbrk_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_sbrk_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	200002e8 	.word	0x200002e8

08006474 <__assert_func>:
 8006474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006476:	4614      	mov	r4, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <__assert_func+0x2c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4605      	mov	r5, r0
 8006480:	68d8      	ldr	r0, [r3, #12]
 8006482:	b14c      	cbz	r4, 8006498 <__assert_func+0x24>
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <__assert_func+0x30>)
 8006486:	9100      	str	r1, [sp, #0]
 8006488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800648c:	4906      	ldr	r1, [pc, #24]	; (80064a8 <__assert_func+0x34>)
 800648e:	462b      	mov	r3, r5
 8006490:	f000 f80e 	bl	80064b0 <fiprintf>
 8006494:	f000 fa64 	bl	8006960 <abort>
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <__assert_func+0x38>)
 800649a:	461c      	mov	r4, r3
 800649c:	e7f3      	b.n	8006486 <__assert_func+0x12>
 800649e:	bf00      	nop
 80064a0:	2000000c 	.word	0x2000000c
 80064a4:	08007214 	.word	0x08007214
 80064a8:	08007221 	.word	0x08007221
 80064ac:	0800724f 	.word	0x0800724f

080064b0 <fiprintf>:
 80064b0:	b40e      	push	{r1, r2, r3}
 80064b2:	b503      	push	{r0, r1, lr}
 80064b4:	4601      	mov	r1, r0
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	4805      	ldr	r0, [pc, #20]	; (80064d0 <fiprintf+0x20>)
 80064ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	f000 f84f 	bl	8006564 <_vfiprintf_r>
 80064c6:	b002      	add	sp, #8
 80064c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064cc:	b003      	add	sp, #12
 80064ce:	4770      	bx	lr
 80064d0:	2000000c 	.word	0x2000000c

080064d4 <__ascii_mbtowc>:
 80064d4:	b082      	sub	sp, #8
 80064d6:	b901      	cbnz	r1, 80064da <__ascii_mbtowc+0x6>
 80064d8:	a901      	add	r1, sp, #4
 80064da:	b142      	cbz	r2, 80064ee <__ascii_mbtowc+0x1a>
 80064dc:	b14b      	cbz	r3, 80064f2 <__ascii_mbtowc+0x1e>
 80064de:	7813      	ldrb	r3, [r2, #0]
 80064e0:	600b      	str	r3, [r1, #0]
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	1e10      	subs	r0, r2, #0
 80064e6:	bf18      	it	ne
 80064e8:	2001      	movne	r0, #1
 80064ea:	b002      	add	sp, #8
 80064ec:	4770      	bx	lr
 80064ee:	4610      	mov	r0, r2
 80064f0:	e7fb      	b.n	80064ea <__ascii_mbtowc+0x16>
 80064f2:	f06f 0001 	mvn.w	r0, #1
 80064f6:	e7f8      	b.n	80064ea <__ascii_mbtowc+0x16>

080064f8 <__malloc_lock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__malloc_lock+0x8>)
 80064fa:	f000 bbf1 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	200002ec 	.word	0x200002ec

08006504 <__malloc_unlock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_unlock+0x8>)
 8006506:	f000 bbec 	b.w	8006ce2 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	200002ec 	.word	0x200002ec

08006510 <__sfputc_r>:
 8006510:	6893      	ldr	r3, [r2, #8]
 8006512:	3b01      	subs	r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	b410      	push	{r4}
 8006518:	6093      	str	r3, [r2, #8]
 800651a:	da08      	bge.n	800652e <__sfputc_r+0x1e>
 800651c:	6994      	ldr	r4, [r2, #24]
 800651e:	42a3      	cmp	r3, r4
 8006520:	db01      	blt.n	8006526 <__sfputc_r+0x16>
 8006522:	290a      	cmp	r1, #10
 8006524:	d103      	bne.n	800652e <__sfputc_r+0x1e>
 8006526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800652a:	f000 b94b 	b.w	80067c4 <__swbuf_r>
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	1c58      	adds	r0, r3, #1
 8006532:	6010      	str	r0, [r2, #0]
 8006534:	7019      	strb	r1, [r3, #0]
 8006536:	4608      	mov	r0, r1
 8006538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800653c:	4770      	bx	lr

0800653e <__sfputs_r>:
 800653e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006540:	4606      	mov	r6, r0
 8006542:	460f      	mov	r7, r1
 8006544:	4614      	mov	r4, r2
 8006546:	18d5      	adds	r5, r2, r3
 8006548:	42ac      	cmp	r4, r5
 800654a:	d101      	bne.n	8006550 <__sfputs_r+0x12>
 800654c:	2000      	movs	r0, #0
 800654e:	e007      	b.n	8006560 <__sfputs_r+0x22>
 8006550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006554:	463a      	mov	r2, r7
 8006556:	4630      	mov	r0, r6
 8006558:	f7ff ffda 	bl	8006510 <__sfputc_r>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d1f3      	bne.n	8006548 <__sfputs_r+0xa>
 8006560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006564 <_vfiprintf_r>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	460d      	mov	r5, r1
 800656a:	b09d      	sub	sp, #116	; 0x74
 800656c:	4614      	mov	r4, r2
 800656e:	4698      	mov	r8, r3
 8006570:	4606      	mov	r6, r0
 8006572:	b118      	cbz	r0, 800657c <_vfiprintf_r+0x18>
 8006574:	6983      	ldr	r3, [r0, #24]
 8006576:	b90b      	cbnz	r3, 800657c <_vfiprintf_r+0x18>
 8006578:	f000 fb14 	bl	8006ba4 <__sinit>
 800657c:	4b89      	ldr	r3, [pc, #548]	; (80067a4 <_vfiprintf_r+0x240>)
 800657e:	429d      	cmp	r5, r3
 8006580:	d11b      	bne.n	80065ba <_vfiprintf_r+0x56>
 8006582:	6875      	ldr	r5, [r6, #4]
 8006584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d405      	bmi.n	8006596 <_vfiprintf_r+0x32>
 800658a:	89ab      	ldrh	r3, [r5, #12]
 800658c:	059a      	lsls	r2, r3, #22
 800658e:	d402      	bmi.n	8006596 <_vfiprintf_r+0x32>
 8006590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006592:	f000 fba5 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	071b      	lsls	r3, r3, #28
 800659a:	d501      	bpl.n	80065a0 <_vfiprintf_r+0x3c>
 800659c:	692b      	ldr	r3, [r5, #16]
 800659e:	b9eb      	cbnz	r3, 80065dc <_vfiprintf_r+0x78>
 80065a0:	4629      	mov	r1, r5
 80065a2:	4630      	mov	r0, r6
 80065a4:	f000 f96e 	bl	8006884 <__swsetup_r>
 80065a8:	b1c0      	cbz	r0, 80065dc <_vfiprintf_r+0x78>
 80065aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ac:	07dc      	lsls	r4, r3, #31
 80065ae:	d50e      	bpl.n	80065ce <_vfiprintf_r+0x6a>
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	b01d      	add	sp, #116	; 0x74
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <_vfiprintf_r+0x244>)
 80065bc:	429d      	cmp	r5, r3
 80065be:	d101      	bne.n	80065c4 <_vfiprintf_r+0x60>
 80065c0:	68b5      	ldr	r5, [r6, #8]
 80065c2:	e7df      	b.n	8006584 <_vfiprintf_r+0x20>
 80065c4:	4b79      	ldr	r3, [pc, #484]	; (80067ac <_vfiprintf_r+0x248>)
 80065c6:	429d      	cmp	r5, r3
 80065c8:	bf08      	it	eq
 80065ca:	68f5      	ldreq	r5, [r6, #12]
 80065cc:	e7da      	b.n	8006584 <_vfiprintf_r+0x20>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	0598      	lsls	r0, r3, #22
 80065d2:	d4ed      	bmi.n	80065b0 <_vfiprintf_r+0x4c>
 80065d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065d6:	f000 fb84 	bl	8006ce2 <__retarget_lock_release_recursive>
 80065da:	e7e9      	b.n	80065b0 <_vfiprintf_r+0x4c>
 80065dc:	2300      	movs	r3, #0
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	2320      	movs	r3, #32
 80065e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ea:	2330      	movs	r3, #48	; 0x30
 80065ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067b0 <_vfiprintf_r+0x24c>
 80065f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065f4:	f04f 0901 	mov.w	r9, #1
 80065f8:	4623      	mov	r3, r4
 80065fa:	469a      	mov	sl, r3
 80065fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006600:	b10a      	cbz	r2, 8006606 <_vfiprintf_r+0xa2>
 8006602:	2a25      	cmp	r2, #37	; 0x25
 8006604:	d1f9      	bne.n	80065fa <_vfiprintf_r+0x96>
 8006606:	ebba 0b04 	subs.w	fp, sl, r4
 800660a:	d00b      	beq.n	8006624 <_vfiprintf_r+0xc0>
 800660c:	465b      	mov	r3, fp
 800660e:	4622      	mov	r2, r4
 8006610:	4629      	mov	r1, r5
 8006612:	4630      	mov	r0, r6
 8006614:	f7ff ff93 	bl	800653e <__sfputs_r>
 8006618:	3001      	adds	r0, #1
 800661a:	f000 80aa 	beq.w	8006772 <_vfiprintf_r+0x20e>
 800661e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006620:	445a      	add	r2, fp
 8006622:	9209      	str	r2, [sp, #36]	; 0x24
 8006624:	f89a 3000 	ldrb.w	r3, [sl]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80a2 	beq.w	8006772 <_vfiprintf_r+0x20e>
 800662e:	2300      	movs	r3, #0
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006638:	f10a 0a01 	add.w	sl, sl, #1
 800663c:	9304      	str	r3, [sp, #16]
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006644:	931a      	str	r3, [sp, #104]	; 0x68
 8006646:	4654      	mov	r4, sl
 8006648:	2205      	movs	r2, #5
 800664a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664e:	4858      	ldr	r0, [pc, #352]	; (80067b0 <_vfiprintf_r+0x24c>)
 8006650:	f7f9 fdce 	bl	80001f0 <memchr>
 8006654:	9a04      	ldr	r2, [sp, #16]
 8006656:	b9d8      	cbnz	r0, 8006690 <_vfiprintf_r+0x12c>
 8006658:	06d1      	lsls	r1, r2, #27
 800665a:	bf44      	itt	mi
 800665c:	2320      	movmi	r3, #32
 800665e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006662:	0713      	lsls	r3, r2, #28
 8006664:	bf44      	itt	mi
 8006666:	232b      	movmi	r3, #43	; 0x2b
 8006668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800666c:	f89a 3000 	ldrb.w	r3, [sl]
 8006670:	2b2a      	cmp	r3, #42	; 0x2a
 8006672:	d015      	beq.n	80066a0 <_vfiprintf_r+0x13c>
 8006674:	9a07      	ldr	r2, [sp, #28]
 8006676:	4654      	mov	r4, sl
 8006678:	2000      	movs	r0, #0
 800667a:	f04f 0c0a 	mov.w	ip, #10
 800667e:	4621      	mov	r1, r4
 8006680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006684:	3b30      	subs	r3, #48	; 0x30
 8006686:	2b09      	cmp	r3, #9
 8006688:	d94e      	bls.n	8006728 <_vfiprintf_r+0x1c4>
 800668a:	b1b0      	cbz	r0, 80066ba <_vfiprintf_r+0x156>
 800668c:	9207      	str	r2, [sp, #28]
 800668e:	e014      	b.n	80066ba <_vfiprintf_r+0x156>
 8006690:	eba0 0308 	sub.w	r3, r0, r8
 8006694:	fa09 f303 	lsl.w	r3, r9, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	46a2      	mov	sl, r4
 800669e:	e7d2      	b.n	8006646 <_vfiprintf_r+0xe2>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	1d19      	adds	r1, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	9103      	str	r1, [sp, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bfbb      	ittet	lt
 80066ac:	425b      	neglt	r3, r3
 80066ae:	f042 0202 	orrlt.w	r2, r2, #2
 80066b2:	9307      	strge	r3, [sp, #28]
 80066b4:	9307      	strlt	r3, [sp, #28]
 80066b6:	bfb8      	it	lt
 80066b8:	9204      	strlt	r2, [sp, #16]
 80066ba:	7823      	ldrb	r3, [r4, #0]
 80066bc:	2b2e      	cmp	r3, #46	; 0x2e
 80066be:	d10c      	bne.n	80066da <_vfiprintf_r+0x176>
 80066c0:	7863      	ldrb	r3, [r4, #1]
 80066c2:	2b2a      	cmp	r3, #42	; 0x2a
 80066c4:	d135      	bne.n	8006732 <_vfiprintf_r+0x1ce>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	1d1a      	adds	r2, r3, #4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	9203      	str	r2, [sp, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfb8      	it	lt
 80066d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066d6:	3402      	adds	r4, #2
 80066d8:	9305      	str	r3, [sp, #20]
 80066da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067c0 <_vfiprintf_r+0x25c>
 80066de:	7821      	ldrb	r1, [r4, #0]
 80066e0:	2203      	movs	r2, #3
 80066e2:	4650      	mov	r0, sl
 80066e4:	f7f9 fd84 	bl	80001f0 <memchr>
 80066e8:	b140      	cbz	r0, 80066fc <_vfiprintf_r+0x198>
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	eba0 000a 	sub.w	r0, r0, sl
 80066f0:	fa03 f000 	lsl.w	r0, r3, r0
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	4303      	orrs	r3, r0
 80066f8:	3401      	adds	r4, #1
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006700:	482c      	ldr	r0, [pc, #176]	; (80067b4 <_vfiprintf_r+0x250>)
 8006702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006706:	2206      	movs	r2, #6
 8006708:	f7f9 fd72 	bl	80001f0 <memchr>
 800670c:	2800      	cmp	r0, #0
 800670e:	d03f      	beq.n	8006790 <_vfiprintf_r+0x22c>
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <_vfiprintf_r+0x254>)
 8006712:	bb1b      	cbnz	r3, 800675c <_vfiprintf_r+0x1f8>
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	3307      	adds	r3, #7
 8006718:	f023 0307 	bic.w	r3, r3, #7
 800671c:	3308      	adds	r3, #8
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006722:	443b      	add	r3, r7
 8006724:	9309      	str	r3, [sp, #36]	; 0x24
 8006726:	e767      	b.n	80065f8 <_vfiprintf_r+0x94>
 8006728:	fb0c 3202 	mla	r2, ip, r2, r3
 800672c:	460c      	mov	r4, r1
 800672e:	2001      	movs	r0, #1
 8006730:	e7a5      	b.n	800667e <_vfiprintf_r+0x11a>
 8006732:	2300      	movs	r3, #0
 8006734:	3401      	adds	r4, #1
 8006736:	9305      	str	r3, [sp, #20]
 8006738:	4619      	mov	r1, r3
 800673a:	f04f 0c0a 	mov.w	ip, #10
 800673e:	4620      	mov	r0, r4
 8006740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006744:	3a30      	subs	r2, #48	; 0x30
 8006746:	2a09      	cmp	r2, #9
 8006748:	d903      	bls.n	8006752 <_vfiprintf_r+0x1ee>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0c5      	beq.n	80066da <_vfiprintf_r+0x176>
 800674e:	9105      	str	r1, [sp, #20]
 8006750:	e7c3      	b.n	80066da <_vfiprintf_r+0x176>
 8006752:	fb0c 2101 	mla	r1, ip, r1, r2
 8006756:	4604      	mov	r4, r0
 8006758:	2301      	movs	r3, #1
 800675a:	e7f0      	b.n	800673e <_vfiprintf_r+0x1da>
 800675c:	ab03      	add	r3, sp, #12
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	462a      	mov	r2, r5
 8006762:	4b16      	ldr	r3, [pc, #88]	; (80067bc <_vfiprintf_r+0x258>)
 8006764:	a904      	add	r1, sp, #16
 8006766:	4630      	mov	r0, r6
 8006768:	f7fd ff9a 	bl	80046a0 <_printf_float>
 800676c:	4607      	mov	r7, r0
 800676e:	1c78      	adds	r0, r7, #1
 8006770:	d1d6      	bne.n	8006720 <_vfiprintf_r+0x1bc>
 8006772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006774:	07d9      	lsls	r1, r3, #31
 8006776:	d405      	bmi.n	8006784 <_vfiprintf_r+0x220>
 8006778:	89ab      	ldrh	r3, [r5, #12]
 800677a:	059a      	lsls	r2, r3, #22
 800677c:	d402      	bmi.n	8006784 <_vfiprintf_r+0x220>
 800677e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006780:	f000 faaf 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006784:	89ab      	ldrh	r3, [r5, #12]
 8006786:	065b      	lsls	r3, r3, #25
 8006788:	f53f af12 	bmi.w	80065b0 <_vfiprintf_r+0x4c>
 800678c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800678e:	e711      	b.n	80065b4 <_vfiprintf_r+0x50>
 8006790:	ab03      	add	r3, sp, #12
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	462a      	mov	r2, r5
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <_vfiprintf_r+0x258>)
 8006798:	a904      	add	r1, sp, #16
 800679a:	4630      	mov	r0, r6
 800679c:	f7fe fa24 	bl	8004be8 <_printf_i>
 80067a0:	e7e4      	b.n	800676c <_vfiprintf_r+0x208>
 80067a2:	bf00      	nop
 80067a4:	0800738c 	.word	0x0800738c
 80067a8:	080073ac 	.word	0x080073ac
 80067ac:	0800736c 	.word	0x0800736c
 80067b0:	0800725a 	.word	0x0800725a
 80067b4:	08007264 	.word	0x08007264
 80067b8:	080046a1 	.word	0x080046a1
 80067bc:	0800653f 	.word	0x0800653f
 80067c0:	08007260 	.word	0x08007260

080067c4 <__swbuf_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	460e      	mov	r6, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	4605      	mov	r5, r0
 80067cc:	b118      	cbz	r0, 80067d6 <__swbuf_r+0x12>
 80067ce:	6983      	ldr	r3, [r0, #24]
 80067d0:	b90b      	cbnz	r3, 80067d6 <__swbuf_r+0x12>
 80067d2:	f000 f9e7 	bl	8006ba4 <__sinit>
 80067d6:	4b21      	ldr	r3, [pc, #132]	; (800685c <__swbuf_r+0x98>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	d12b      	bne.n	8006834 <__swbuf_r+0x70>
 80067dc:	686c      	ldr	r4, [r5, #4]
 80067de:	69a3      	ldr	r3, [r4, #24]
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	071a      	lsls	r2, r3, #28
 80067e6:	d52f      	bpl.n	8006848 <__swbuf_r+0x84>
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	b36b      	cbz	r3, 8006848 <__swbuf_r+0x84>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	1ac0      	subs	r0, r0, r3
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	b2f6      	uxtb	r6, r6
 80067f6:	4283      	cmp	r3, r0
 80067f8:	4637      	mov	r7, r6
 80067fa:	dc04      	bgt.n	8006806 <__swbuf_r+0x42>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f93c 	bl	8006a7c <_fflush_r>
 8006804:	bb30      	cbnz	r0, 8006854 <__swbuf_r+0x90>
 8006806:	68a3      	ldr	r3, [r4, #8]
 8006808:	3b01      	subs	r3, #1
 800680a:	60a3      	str	r3, [r4, #8]
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	6022      	str	r2, [r4, #0]
 8006812:	701e      	strb	r6, [r3, #0]
 8006814:	6963      	ldr	r3, [r4, #20]
 8006816:	3001      	adds	r0, #1
 8006818:	4283      	cmp	r3, r0
 800681a:	d004      	beq.n	8006826 <__swbuf_r+0x62>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	07db      	lsls	r3, r3, #31
 8006820:	d506      	bpl.n	8006830 <__swbuf_r+0x6c>
 8006822:	2e0a      	cmp	r6, #10
 8006824:	d104      	bne.n	8006830 <__swbuf_r+0x6c>
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f927 	bl	8006a7c <_fflush_r>
 800682e:	b988      	cbnz	r0, 8006854 <__swbuf_r+0x90>
 8006830:	4638      	mov	r0, r7
 8006832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <__swbuf_r+0x9c>)
 8006836:	429c      	cmp	r4, r3
 8006838:	d101      	bne.n	800683e <__swbuf_r+0x7a>
 800683a:	68ac      	ldr	r4, [r5, #8]
 800683c:	e7cf      	b.n	80067de <__swbuf_r+0x1a>
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <__swbuf_r+0xa0>)
 8006840:	429c      	cmp	r4, r3
 8006842:	bf08      	it	eq
 8006844:	68ec      	ldreq	r4, [r5, #12]
 8006846:	e7ca      	b.n	80067de <__swbuf_r+0x1a>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f81a 	bl	8006884 <__swsetup_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	d0cb      	beq.n	80067ec <__swbuf_r+0x28>
 8006854:	f04f 37ff 	mov.w	r7, #4294967295
 8006858:	e7ea      	b.n	8006830 <__swbuf_r+0x6c>
 800685a:	bf00      	nop
 800685c:	0800738c 	.word	0x0800738c
 8006860:	080073ac 	.word	0x080073ac
 8006864:	0800736c 	.word	0x0800736c

08006868 <__ascii_wctomb>:
 8006868:	b149      	cbz	r1, 800687e <__ascii_wctomb+0x16>
 800686a:	2aff      	cmp	r2, #255	; 0xff
 800686c:	bf85      	ittet	hi
 800686e:	238a      	movhi	r3, #138	; 0x8a
 8006870:	6003      	strhi	r3, [r0, #0]
 8006872:	700a      	strbls	r2, [r1, #0]
 8006874:	f04f 30ff 	movhi.w	r0, #4294967295
 8006878:	bf98      	it	ls
 800687a:	2001      	movls	r0, #1
 800687c:	4770      	bx	lr
 800687e:	4608      	mov	r0, r1
 8006880:	4770      	bx	lr
	...

08006884 <__swsetup_r>:
 8006884:	4b32      	ldr	r3, [pc, #200]	; (8006950 <__swsetup_r+0xcc>)
 8006886:	b570      	push	{r4, r5, r6, lr}
 8006888:	681d      	ldr	r5, [r3, #0]
 800688a:	4606      	mov	r6, r0
 800688c:	460c      	mov	r4, r1
 800688e:	b125      	cbz	r5, 800689a <__swsetup_r+0x16>
 8006890:	69ab      	ldr	r3, [r5, #24]
 8006892:	b913      	cbnz	r3, 800689a <__swsetup_r+0x16>
 8006894:	4628      	mov	r0, r5
 8006896:	f000 f985 	bl	8006ba4 <__sinit>
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <__swsetup_r+0xd0>)
 800689c:	429c      	cmp	r4, r3
 800689e:	d10f      	bne.n	80068c0 <__swsetup_r+0x3c>
 80068a0:	686c      	ldr	r4, [r5, #4]
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068a8:	0719      	lsls	r1, r3, #28
 80068aa:	d42c      	bmi.n	8006906 <__swsetup_r+0x82>
 80068ac:	06dd      	lsls	r5, r3, #27
 80068ae:	d411      	bmi.n	80068d4 <__swsetup_r+0x50>
 80068b0:	2309      	movs	r3, #9
 80068b2:	6033      	str	r3, [r6, #0]
 80068b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	e03e      	b.n	800693e <__swsetup_r+0xba>
 80068c0:	4b25      	ldr	r3, [pc, #148]	; (8006958 <__swsetup_r+0xd4>)
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d101      	bne.n	80068ca <__swsetup_r+0x46>
 80068c6:	68ac      	ldr	r4, [r5, #8]
 80068c8:	e7eb      	b.n	80068a2 <__swsetup_r+0x1e>
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <__swsetup_r+0xd8>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	bf08      	it	eq
 80068d0:	68ec      	ldreq	r4, [r5, #12]
 80068d2:	e7e6      	b.n	80068a2 <__swsetup_r+0x1e>
 80068d4:	0758      	lsls	r0, r3, #29
 80068d6:	d512      	bpl.n	80068fe <__swsetup_r+0x7a>
 80068d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068da:	b141      	cbz	r1, 80068ee <__swsetup_r+0x6a>
 80068dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e0:	4299      	cmp	r1, r3
 80068e2:	d002      	beq.n	80068ea <__swsetup_r+0x66>
 80068e4:	4630      	mov	r0, r6
 80068e6:	f7ff fcd5 	bl	8006294 <_free_r>
 80068ea:	2300      	movs	r3, #0
 80068ec:	6363      	str	r3, [r4, #52]	; 0x34
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	2300      	movs	r3, #0
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f043 0308 	orr.w	r3, r3, #8
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	b94b      	cbnz	r3, 800691e <__swsetup_r+0x9a>
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006914:	d003      	beq.n	800691e <__swsetup_r+0x9a>
 8006916:	4621      	mov	r1, r4
 8006918:	4630      	mov	r0, r6
 800691a:	f000 fa09 	bl	8006d30 <__smakebuf_r>
 800691e:	89a0      	ldrh	r0, [r4, #12]
 8006920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006924:	f010 0301 	ands.w	r3, r0, #1
 8006928:	d00a      	beq.n	8006940 <__swsetup_r+0xbc>
 800692a:	2300      	movs	r3, #0
 800692c:	60a3      	str	r3, [r4, #8]
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	425b      	negs	r3, r3
 8006932:	61a3      	str	r3, [r4, #24]
 8006934:	6923      	ldr	r3, [r4, #16]
 8006936:	b943      	cbnz	r3, 800694a <__swsetup_r+0xc6>
 8006938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800693c:	d1ba      	bne.n	80068b4 <__swsetup_r+0x30>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	0781      	lsls	r1, r0, #30
 8006942:	bf58      	it	pl
 8006944:	6963      	ldrpl	r3, [r4, #20]
 8006946:	60a3      	str	r3, [r4, #8]
 8006948:	e7f4      	b.n	8006934 <__swsetup_r+0xb0>
 800694a:	2000      	movs	r0, #0
 800694c:	e7f7      	b.n	800693e <__swsetup_r+0xba>
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c
 8006954:	0800738c 	.word	0x0800738c
 8006958:	080073ac 	.word	0x080073ac
 800695c:	0800736c 	.word	0x0800736c

08006960 <abort>:
 8006960:	b508      	push	{r3, lr}
 8006962:	2006      	movs	r0, #6
 8006964:	f000 fa4c 	bl	8006e00 <raise>
 8006968:	2001      	movs	r0, #1
 800696a:	f7fa fdbf 	bl	80014ec <_exit>
	...

08006970 <__sflush_r>:
 8006970:	898a      	ldrh	r2, [r1, #12]
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	4605      	mov	r5, r0
 8006978:	0710      	lsls	r0, r2, #28
 800697a:	460c      	mov	r4, r1
 800697c:	d458      	bmi.n	8006a30 <__sflush_r+0xc0>
 800697e:	684b      	ldr	r3, [r1, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	dc05      	bgt.n	8006990 <__sflush_r+0x20>
 8006984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc02      	bgt.n	8006990 <__sflush_r+0x20>
 800698a:	2000      	movs	r0, #0
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006992:	2e00      	cmp	r6, #0
 8006994:	d0f9      	beq.n	800698a <__sflush_r+0x1a>
 8006996:	2300      	movs	r3, #0
 8006998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800699c:	682f      	ldr	r7, [r5, #0]
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	d032      	beq.n	8006a08 <__sflush_r+0x98>
 80069a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	075a      	lsls	r2, r3, #29
 80069a8:	d505      	bpl.n	80069b6 <__sflush_r+0x46>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b0:	b10b      	cbz	r3, 80069b6 <__sflush_r+0x46>
 80069b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	4602      	mov	r2, r0
 80069ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069bc:	6a21      	ldr	r1, [r4, #32]
 80069be:	4628      	mov	r0, r5
 80069c0:	47b0      	blx	r6
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	d106      	bne.n	80069d6 <__sflush_r+0x66>
 80069c8:	6829      	ldr	r1, [r5, #0]
 80069ca:	291d      	cmp	r1, #29
 80069cc:	d82c      	bhi.n	8006a28 <__sflush_r+0xb8>
 80069ce:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <__sflush_r+0x108>)
 80069d0:	40ca      	lsrs	r2, r1
 80069d2:	07d6      	lsls	r6, r2, #31
 80069d4:	d528      	bpl.n	8006a28 <__sflush_r+0xb8>
 80069d6:	2200      	movs	r2, #0
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	04d9      	lsls	r1, r3, #19
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	d504      	bpl.n	80069ec <__sflush_r+0x7c>
 80069e2:	1c42      	adds	r2, r0, #1
 80069e4:	d101      	bne.n	80069ea <__sflush_r+0x7a>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	b903      	cbnz	r3, 80069ec <__sflush_r+0x7c>
 80069ea:	6560      	str	r0, [r4, #84]	; 0x54
 80069ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ee:	602f      	str	r7, [r5, #0]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d0ca      	beq.n	800698a <__sflush_r+0x1a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__sflush_r+0x92>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff fc49 	bl	8006294 <_free_r>
 8006a02:	2000      	movs	r0, #0
 8006a04:	6360      	str	r0, [r4, #52]	; 0x34
 8006a06:	e7c1      	b.n	800698c <__sflush_r+0x1c>
 8006a08:	6a21      	ldr	r1, [r4, #32]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b0      	blx	r6
 8006a10:	1c41      	adds	r1, r0, #1
 8006a12:	d1c7      	bne.n	80069a4 <__sflush_r+0x34>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0c4      	beq.n	80069a4 <__sflush_r+0x34>
 8006a1a:	2b1d      	cmp	r3, #29
 8006a1c:	d001      	beq.n	8006a22 <__sflush_r+0xb2>
 8006a1e:	2b16      	cmp	r3, #22
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0xb6>
 8006a22:	602f      	str	r7, [r5, #0]
 8006a24:	e7b1      	b.n	800698a <__sflush_r+0x1a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7ad      	b.n	800698c <__sflush_r+0x1c>
 8006a30:	690f      	ldr	r7, [r1, #16]
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d0a9      	beq.n	800698a <__sflush_r+0x1a>
 8006a36:	0793      	lsls	r3, r2, #30
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	bf08      	it	eq
 8006a3c:	694b      	ldreq	r3, [r1, #20]
 8006a3e:	600f      	str	r7, [r1, #0]
 8006a40:	bf18      	it	ne
 8006a42:	2300      	movne	r3, #0
 8006a44:	eba6 0807 	sub.w	r8, r6, r7
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	dd9c      	ble.n	800698a <__sflush_r+0x1a>
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a54:	4643      	mov	r3, r8
 8006a56:	463a      	mov	r2, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b0      	blx	r6
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dc06      	bgt.n	8006a6e <__sflush_r+0xfe>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e78e      	b.n	800698c <__sflush_r+0x1c>
 8006a6e:	4407      	add	r7, r0
 8006a70:	eba8 0800 	sub.w	r8, r8, r0
 8006a74:	e7e9      	b.n	8006a4a <__sflush_r+0xda>
 8006a76:	bf00      	nop
 8006a78:	20400001 	.word	0x20400001

08006a7c <_fflush_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	690b      	ldr	r3, [r1, #16]
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	b913      	cbnz	r3, 8006a8c <_fflush_r+0x10>
 8006a86:	2500      	movs	r5, #0
 8006a88:	4628      	mov	r0, r5
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	b118      	cbz	r0, 8006a96 <_fflush_r+0x1a>
 8006a8e:	6983      	ldr	r3, [r0, #24]
 8006a90:	b90b      	cbnz	r3, 8006a96 <_fflush_r+0x1a>
 8006a92:	f000 f887 	bl	8006ba4 <__sinit>
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <_fflush_r+0x6c>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d11b      	bne.n	8006ad4 <_fflush_r+0x58>
 8006a9c:	686c      	ldr	r4, [r5, #4]
 8006a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ef      	beq.n	8006a86 <_fflush_r+0xa>
 8006aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aa8:	07d0      	lsls	r0, r2, #31
 8006aaa:	d404      	bmi.n	8006ab6 <_fflush_r+0x3a>
 8006aac:	0599      	lsls	r1, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_fflush_r+0x3a>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 f915 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4621      	mov	r1, r4
 8006aba:	f7ff ff59 	bl	8006970 <__sflush_r>
 8006abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac0:	07da      	lsls	r2, r3, #31
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	d4e0      	bmi.n	8006a88 <_fflush_r+0xc>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	059b      	lsls	r3, r3, #22
 8006aca:	d4dd      	bmi.n	8006a88 <_fflush_r+0xc>
 8006acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ace:	f000 f908 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006ad2:	e7d9      	b.n	8006a88 <_fflush_r+0xc>
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <_fflush_r+0x70>)
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d101      	bne.n	8006ade <_fflush_r+0x62>
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	e7df      	b.n	8006a9e <_fflush_r+0x22>
 8006ade:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <_fflush_r+0x74>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	bf08      	it	eq
 8006ae4:	68ec      	ldreq	r4, [r5, #12]
 8006ae6:	e7da      	b.n	8006a9e <_fflush_r+0x22>
 8006ae8:	0800738c 	.word	0x0800738c
 8006aec:	080073ac 	.word	0x080073ac
 8006af0:	0800736c 	.word	0x0800736c

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	e9c0 3300 	strd	r3, r3, [r0]
 8006afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	; 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	; 0x5c
 8006b12:	f7fd fd1d 	bl	8004550 <memset>
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <std+0x38>)
 8006b18:	6263      	str	r3, [r4, #36]	; 0x24
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std+0x3c>)
 8006b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <std+0x40>)
 8006b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <std+0x44>)
 8006b24:	6224      	str	r4, [r4, #32]
 8006b26:	6323      	str	r3, [r4, #48]	; 0x30
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08006e39 	.word	0x08006e39
 8006b30:	08006e5b 	.word	0x08006e5b
 8006b34:	08006e93 	.word	0x08006e93
 8006b38:	08006eb7 	.word	0x08006eb7

08006b3c <_cleanup_r>:
 8006b3c:	4901      	ldr	r1, [pc, #4]	; (8006b44 <_cleanup_r+0x8>)
 8006b3e:	f000 b8af 	b.w	8006ca0 <_fwalk_reent>
 8006b42:	bf00      	nop
 8006b44:	08006a7d 	.word	0x08006a7d

08006b48 <__sfmoreglue>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	2268      	movs	r2, #104	; 0x68
 8006b4c:	1e4d      	subs	r5, r1, #1
 8006b4e:	4355      	muls	r5, r2
 8006b50:	460e      	mov	r6, r1
 8006b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b56:	f7ff fc09 	bl	800636c <_malloc_r>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	b140      	cbz	r0, 8006b70 <__sfmoreglue+0x28>
 8006b5e:	2100      	movs	r1, #0
 8006b60:	e9c0 1600 	strd	r1, r6, [r0]
 8006b64:	300c      	adds	r0, #12
 8006b66:	60a0      	str	r0, [r4, #8]
 8006b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b6c:	f7fd fcf0 	bl	8004550 <memset>
 8006b70:	4620      	mov	r0, r4
 8006b72:	bd70      	pop	{r4, r5, r6, pc}

08006b74 <__sfp_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sfp_lock_acquire+0x8>)
 8006b76:	f000 b8b3 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	200002ed 	.word	0x200002ed

08006b80 <__sfp_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sfp_lock_release+0x8>)
 8006b82:	f000 b8ae 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	200002ed 	.word	0x200002ed

08006b8c <__sinit_lock_acquire>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__sinit_lock_acquire+0x8>)
 8006b8e:	f000 b8a7 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b92:	bf00      	nop
 8006b94:	200002ee 	.word	0x200002ee

08006b98 <__sinit_lock_release>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__sinit_lock_release+0x8>)
 8006b9a:	f000 b8a2 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	200002ee 	.word	0x200002ee

08006ba4 <__sinit>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	f7ff fff0 	bl	8006b8c <__sinit_lock_acquire>
 8006bac:	69a3      	ldr	r3, [r4, #24]
 8006bae:	b11b      	cbz	r3, 8006bb8 <__sinit+0x14>
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	f7ff bff0 	b.w	8006b98 <__sinit_lock_release>
 8006bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <__sinit+0x68>)
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <__sinit+0x6c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	bf04      	itt	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	61a3      	streq	r3, [r4, #24]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 f820 	bl	8006c14 <__sfp>
 8006bd4:	6060      	str	r0, [r4, #4]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 f81c 	bl	8006c14 <__sfp>
 8006bdc:	60a0      	str	r0, [r4, #8]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f818 	bl	8006c14 <__sfp>
 8006be4:	2200      	movs	r2, #0
 8006be6:	60e0      	str	r0, [r4, #12]
 8006be8:	2104      	movs	r1, #4
 8006bea:	6860      	ldr	r0, [r4, #4]
 8006bec:	f7ff ff82 	bl	8006af4 <std>
 8006bf0:	68a0      	ldr	r0, [r4, #8]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2109      	movs	r1, #9
 8006bf6:	f7ff ff7d 	bl	8006af4 <std>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	2112      	movs	r1, #18
 8006c00:	f7ff ff78 	bl	8006af4 <std>
 8006c04:	2301      	movs	r3, #1
 8006c06:	61a3      	str	r3, [r4, #24]
 8006c08:	e7d2      	b.n	8006bb0 <__sinit+0xc>
 8006c0a:	bf00      	nop
 8006c0c:	08006ff0 	.word	0x08006ff0
 8006c10:	08006b3d 	.word	0x08006b3d

08006c14 <__sfp>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	4607      	mov	r7, r0
 8006c18:	f7ff ffac 	bl	8006b74 <__sfp_lock_acquire>
 8006c1c:	4b1e      	ldr	r3, [pc, #120]	; (8006c98 <__sfp+0x84>)
 8006c1e:	681e      	ldr	r6, [r3, #0]
 8006c20:	69b3      	ldr	r3, [r6, #24]
 8006c22:	b913      	cbnz	r3, 8006c2a <__sfp+0x16>
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff ffbd 	bl	8006ba4 <__sinit>
 8006c2a:	3648      	adds	r6, #72	; 0x48
 8006c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	d503      	bpl.n	8006c3c <__sfp+0x28>
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	b30b      	cbz	r3, 8006c7c <__sfp+0x68>
 8006c38:	6836      	ldr	r6, [r6, #0]
 8006c3a:	e7f7      	b.n	8006c2c <__sfp+0x18>
 8006c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c40:	b9d5      	cbnz	r5, 8006c78 <__sfp+0x64>
 8006c42:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <__sfp+0x88>)
 8006c44:	60e3      	str	r3, [r4, #12]
 8006c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c4c:	f000 f847 	bl	8006cde <__retarget_lock_init_recursive>
 8006c50:	f7ff ff96 	bl	8006b80 <__sfp_lock_release>
 8006c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c5c:	6025      	str	r5, [r4, #0]
 8006c5e:	61a5      	str	r5, [r4, #24]
 8006c60:	2208      	movs	r2, #8
 8006c62:	4629      	mov	r1, r5
 8006c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c68:	f7fd fc72 	bl	8004550 <memset>
 8006c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c74:	4620      	mov	r0, r4
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c78:	3468      	adds	r4, #104	; 0x68
 8006c7a:	e7d9      	b.n	8006c30 <__sfp+0x1c>
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7ff ff62 	bl	8006b48 <__sfmoreglue>
 8006c84:	4604      	mov	r4, r0
 8006c86:	6030      	str	r0, [r6, #0]
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d1d5      	bne.n	8006c38 <__sfp+0x24>
 8006c8c:	f7ff ff78 	bl	8006b80 <__sfp_lock_release>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	e7ee      	b.n	8006c74 <__sfp+0x60>
 8006c96:	bf00      	nop
 8006c98:	08006ff0 	.word	0x08006ff0
 8006c9c:	ffff0001 	.word	0xffff0001

08006ca0 <_fwalk_reent>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	4688      	mov	r8, r1
 8006ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cac:	2700      	movs	r7, #0
 8006cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb6:	d505      	bpl.n	8006cc4 <_fwalk_reent+0x24>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d1f7      	bne.n	8006cae <_fwalk_reent+0xe>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc4:	89ab      	ldrh	r3, [r5, #12]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d907      	bls.n	8006cda <_fwalk_reent+0x3a>
 8006cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	d003      	beq.n	8006cda <_fwalk_reent+0x3a>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	47c0      	blx	r8
 8006cd8:	4307      	orrs	r7, r0
 8006cda:	3568      	adds	r5, #104	; 0x68
 8006cdc:	e7e9      	b.n	8006cb2 <_fwalk_reent+0x12>

08006cde <__retarget_lock_init_recursive>:
 8006cde:	4770      	bx	lr

08006ce0 <__retarget_lock_acquire_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_release_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	b096      	sub	sp, #88	; 0x58
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	da08      	bge.n	8006d08 <__swhatbuf_r+0x24>
 8006cf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	061a      	lsls	r2, r3, #24
 8006d00:	d410      	bmi.n	8006d24 <__swhatbuf_r+0x40>
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	e00e      	b.n	8006d26 <__swhatbuf_r+0x42>
 8006d08:	466a      	mov	r2, sp
 8006d0a:	f000 f8fb 	bl	8006f04 <_fstat_r>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	dbf1      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d1c:	425a      	negs	r2, r3
 8006d1e:	415a      	adcs	r2, r3
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	e7ee      	b.n	8006d02 <__swhatbuf_r+0x1e>
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	2000      	movs	r0, #0
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	b016      	add	sp, #88	; 0x58
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d30 <__smakebuf_r>:
 8006d30:	898b      	ldrh	r3, [r1, #12]
 8006d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d34:	079d      	lsls	r5, r3, #30
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	d507      	bpl.n	8006d4c <__smakebuf_r+0x1c>
 8006d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2301      	movs	r3, #1
 8006d46:	6163      	str	r3, [r4, #20]
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	ab01      	add	r3, sp, #4
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f7ff ffc8 	bl	8006ce4 <__swhatbuf_r>
 8006d54:	9900      	ldr	r1, [sp, #0]
 8006d56:	4605      	mov	r5, r0
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff fb07 	bl	800636c <_malloc_r>
 8006d5e:	b948      	cbnz	r0, 8006d74 <__smakebuf_r+0x44>
 8006d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d64:	059a      	lsls	r2, r3, #22
 8006d66:	d4ef      	bmi.n	8006d48 <__smakebuf_r+0x18>
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	e7e3      	b.n	8006d3c <__smakebuf_r+0xc>
 8006d74:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <__smakebuf_r+0x7c>)
 8006d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	6020      	str	r0, [r4, #0]
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	9b00      	ldr	r3, [sp, #0]
 8006d84:	6163      	str	r3, [r4, #20]
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	6120      	str	r0, [r4, #16]
 8006d8a:	b15b      	cbz	r3, 8006da4 <__smakebuf_r+0x74>
 8006d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 f8c9 	bl	8006f28 <_isatty_r>
 8006d96:	b128      	cbz	r0, 8006da4 <__smakebuf_r+0x74>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	89a0      	ldrh	r0, [r4, #12]
 8006da6:	4305      	orrs	r5, r0
 8006da8:	81a5      	strh	r5, [r4, #12]
 8006daa:	e7cd      	b.n	8006d48 <__smakebuf_r+0x18>
 8006dac:	08006b3d 	.word	0x08006b3d

08006db0 <_raise_r>:
 8006db0:	291f      	cmp	r1, #31
 8006db2:	b538      	push	{r3, r4, r5, lr}
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	d904      	bls.n	8006dc4 <_raise_r+0x14>
 8006dba:	2316      	movs	r3, #22
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dc6:	b112      	cbz	r2, 8006dce <_raise_r+0x1e>
 8006dc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dcc:	b94b      	cbnz	r3, 8006de2 <_raise_r+0x32>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 f830 	bl	8006e34 <_getpid_r>
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	4620      	mov	r0, r4
 8006dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dde:	f000 b817 	b.w	8006e10 <_kill_r>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d00a      	beq.n	8006dfc <_raise_r+0x4c>
 8006de6:	1c59      	adds	r1, r3, #1
 8006de8:	d103      	bne.n	8006df2 <_raise_r+0x42>
 8006dea:	2316      	movs	r3, #22
 8006dec:	6003      	str	r3, [r0, #0]
 8006dee:	2001      	movs	r0, #1
 8006df0:	e7e7      	b.n	8006dc2 <_raise_r+0x12>
 8006df2:	2400      	movs	r4, #0
 8006df4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006df8:	4628      	mov	r0, r5
 8006dfa:	4798      	blx	r3
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e7e0      	b.n	8006dc2 <_raise_r+0x12>

08006e00 <raise>:
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <raise+0xc>)
 8006e02:	4601      	mov	r1, r0
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f7ff bfd3 	b.w	8006db0 <_raise_r>
 8006e0a:	bf00      	nop
 8006e0c:	2000000c 	.word	0x2000000c

08006e10 <_kill_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	; (8006e30 <_kill_r+0x20>)
 8006e14:	2300      	movs	r3, #0
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	f7fa fb55 	bl	80014cc <_kill>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d102      	bne.n	8006e2c <_kill_r+0x1c>
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	b103      	cbz	r3, 8006e2c <_kill_r+0x1c>
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	bd38      	pop	{r3, r4, r5, pc}
 8006e2e:	bf00      	nop
 8006e30:	200002e8 	.word	0x200002e8

08006e34 <_getpid_r>:
 8006e34:	f7fa bb42 	b.w	80014bc <_getpid>

08006e38 <__sread>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e40:	f000 f894 	bl	8006f6c <_read_r>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	bfab      	itete	ge
 8006e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e4c:	181b      	addge	r3, r3, r0
 8006e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e52:	bfac      	ite	ge
 8006e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e56:	81a3      	strhlt	r3, [r4, #12]
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <__swrite>:
 8006e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5e:	461f      	mov	r7, r3
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	05db      	lsls	r3, r3, #23
 8006e64:	4605      	mov	r5, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	4616      	mov	r6, r2
 8006e6a:	d505      	bpl.n	8006e78 <__swrite+0x1e>
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	2302      	movs	r3, #2
 8006e72:	2200      	movs	r2, #0
 8006e74:	f000 f868 	bl	8006f48 <_lseek_r>
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	4628      	mov	r0, r5
 8006e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	f000 b817 	b.w	8006ec0 <_write_r>

08006e92 <__sseek>:
 8006e92:	b510      	push	{r4, lr}
 8006e94:	460c      	mov	r4, r1
 8006e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9a:	f000 f855 	bl	8006f48 <_lseek_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	bf15      	itete	ne
 8006ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eae:	81a3      	strheq	r3, [r4, #12]
 8006eb0:	bf18      	it	ne
 8006eb2:	81a3      	strhne	r3, [r4, #12]
 8006eb4:	bd10      	pop	{r4, pc}

08006eb6 <__sclose>:
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 b813 	b.w	8006ee4 <_close_r>
	...

08006ec0 <_write_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	; (8006ee0 <_write_r+0x20>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7fa fb33 	bl	800153a <_write>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_write_r+0x1e>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_write_r+0x1e>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	200002e8 	.word	0x200002e8

08006ee4 <_close_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <_close_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f7fa fb3f 	bl	8001572 <_close>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_close_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_close_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200002e8 	.word	0x200002e8

08006f04 <_fstat_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	; (8006f24 <_fstat_r+0x20>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	f7fa fb3a 	bl	800158a <_fstat>
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d102      	bne.n	8006f20 <_fstat_r+0x1c>
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	b103      	cbz	r3, 8006f20 <_fstat_r+0x1c>
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
 8006f22:	bf00      	nop
 8006f24:	200002e8 	.word	0x200002e8

08006f28 <_isatty_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d06      	ldr	r5, [pc, #24]	; (8006f44 <_isatty_r+0x1c>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	f7fa fb39 	bl	80015aa <_isatty>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_isatty_r+0x1a>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_isatty_r+0x1a>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200002e8 	.word	0x200002e8

08006f48 <_lseek_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	; (8006f68 <_lseek_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7fa fb32 	bl	80015c0 <_lseek>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_lseek_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_lseek_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	200002e8 	.word	0x200002e8

08006f6c <_read_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d07      	ldr	r5, [pc, #28]	; (8006f8c <_read_r+0x20>)
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f7fa fac0 	bl	8001500 <_read>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_read_r+0x1e>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_read_r+0x1e>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	200002e8 	.word	0x200002e8

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
