
gps-libnova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d530  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb0  0800d6d0  0800d6d0  0001d6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  0800f580  0800f580  0001f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f0  0800f5bc  0800f5bc  0001f5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6ac  0800f6ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6ac  0800f6ac  0001f6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6b0  0800f6b0  0001f6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  200001e0  0800f894  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  0800f894  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168b0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003049  00000000  00000000  00036ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00039b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0003a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002679b  00000000  00000000  0003b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011207  00000000  00000000  00061b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf92  00000000  00000000  00072d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150cf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  00150d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  00155c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d6b8 	.word	0x0800d6b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800d6b8 	.word	0x0800d6b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f001 b8de 	b.w	8001e6c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <selfrel_offset31>:
 8000f98:	6803      	ldr	r3, [r0, #0]
 8000f9a:	005a      	lsls	r2, r3, #1
 8000f9c:	bf4c      	ite	mi
 8000f9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000fa6:	4418      	add	r0, r3
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <search_EIT_table>:
 8000fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb0:	b329      	cbz	r1, 8000ffe <search_EIT_table+0x52>
 8000fb2:	1e4f      	subs	r7, r1, #1
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	463e      	mov	r6, r7
 8000fba:	f04f 0800 	mov.w	r8, #0
 8000fbe:	eb08 0106 	add.w	r1, r8, r6
 8000fc2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000fc6:	1049      	asrs	r1, r1, #1
 8000fc8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000fcc:	4648      	mov	r0, r9
 8000fce:	f7ff ffe3 	bl	8000f98 <selfrel_offset31>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	00c8      	lsls	r0, r1, #3
 8000fd6:	3008      	adds	r0, #8
 8000fd8:	428f      	cmp	r7, r1
 8000fda:	4420      	add	r0, r4
 8000fdc:	d009      	beq.n	8000ff2 <search_EIT_table+0x46>
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	d809      	bhi.n	8000ff6 <search_EIT_table+0x4a>
 8000fe2:	f7ff ffd9 	bl	8000f98 <selfrel_offset31>
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	42a8      	cmp	r0, r5
 8000fea:	d20a      	bcs.n	8001002 <search_EIT_table+0x56>
 8000fec:	f101 0801 	add.w	r8, r1, #1
 8000ff0:	e7e5      	b.n	8000fbe <search_EIT_table+0x12>
 8000ff2:	42ab      	cmp	r3, r5
 8000ff4:	d905      	bls.n	8001002 <search_EIT_table+0x56>
 8000ff6:	4588      	cmp	r8, r1
 8000ff8:	d001      	beq.n	8000ffe <search_EIT_table+0x52>
 8000ffa:	1e4e      	subs	r6, r1, #1
 8000ffc:	e7df      	b.n	8000fbe <search_EIT_table+0x12>
 8000ffe:	f04f 0900 	mov.w	r9, #0
 8001002:	4648      	mov	r0, r9
 8001004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001008 <__gnu_unwind_get_pr_addr>:
 8001008:	2801      	cmp	r0, #1
 800100a:	d007      	beq.n	800101c <__gnu_unwind_get_pr_addr+0x14>
 800100c:	2802      	cmp	r0, #2
 800100e:	d007      	beq.n	8001020 <__gnu_unwind_get_pr_addr+0x18>
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__gnu_unwind_get_pr_addr+0x1c>)
 8001012:	2800      	cmp	r0, #0
 8001014:	bf0c      	ite	eq
 8001016:	4618      	moveq	r0, r3
 8001018:	2000      	movne	r0, #0
 800101a:	4770      	bx	lr
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <__gnu_unwind_get_pr_addr+0x20>)
 800101e:	4770      	bx	lr
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <__gnu_unwind_get_pr_addr+0x24>)
 8001022:	4770      	bx	lr
 8001024:	080016e1 	.word	0x080016e1
 8001028:	080016e5 	.word	0x080016e5
 800102c:	080016e9 	.word	0x080016e9

08001030 <get_eit_entry>:
 8001030:	b530      	push	{r4, r5, lr}
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <get_eit_entry+0x90>)
 8001034:	b083      	sub	sp, #12
 8001036:	4604      	mov	r4, r0
 8001038:	1e8d      	subs	r5, r1, #2
 800103a:	b33b      	cbz	r3, 800108c <get_eit_entry+0x5c>
 800103c:	a901      	add	r1, sp, #4
 800103e:	4628      	mov	r0, r5
 8001040:	f3af 8000 	nop.w
 8001044:	b1e8      	cbz	r0, 8001082 <get_eit_entry+0x52>
 8001046:	9901      	ldr	r1, [sp, #4]
 8001048:	462a      	mov	r2, r5
 800104a:	f7ff ffaf 	bl	8000fac <search_EIT_table>
 800104e:	4601      	mov	r1, r0
 8001050:	b1b8      	cbz	r0, 8001082 <get_eit_entry+0x52>
 8001052:	f7ff ffa1 	bl	8000f98 <selfrel_offset31>
 8001056:	684b      	ldr	r3, [r1, #4]
 8001058:	64a0      	str	r0, [r4, #72]	; 0x48
 800105a:	2b01      	cmp	r3, #1
 800105c:	d02c      	beq.n	80010b8 <get_eit_entry+0x88>
 800105e:	2b00      	cmp	r3, #0
 8001060:	f101 0004 	add.w	r0, r1, #4
 8001064:	db24      	blt.n	80010b0 <get_eit_entry+0x80>
 8001066:	f7ff ff97 	bl	8000f98 <selfrel_offset31>
 800106a:	2300      	movs	r3, #0
 800106c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8001070:	6803      	ldr	r3, [r0, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db11      	blt.n	800109a <get_eit_entry+0x6a>
 8001076:	f7ff ff8f 	bl	8000f98 <selfrel_offset31>
 800107a:	6120      	str	r0, [r4, #16]
 800107c:	2000      	movs	r0, #0
 800107e:	b003      	add	sp, #12
 8001080:	bd30      	pop	{r4, r5, pc}
 8001082:	2300      	movs	r3, #0
 8001084:	2009      	movs	r0, #9
 8001086:	6123      	str	r3, [r4, #16]
 8001088:	b003      	add	sp, #12
 800108a:	bd30      	pop	{r4, r5, pc}
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <get_eit_entry+0x94>)
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <get_eit_entry+0x98>)
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	10c9      	asrs	r1, r1, #3
 8001094:	4618      	mov	r0, r3
 8001096:	9101      	str	r1, [sp, #4]
 8001098:	e7d6      	b.n	8001048 <get_eit_entry+0x18>
 800109a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800109e:	f7ff ffb3 	bl	8001008 <__gnu_unwind_get_pr_addr>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	6120      	str	r0, [r4, #16]
 80010a6:	bf14      	ite	ne
 80010a8:	2000      	movne	r0, #0
 80010aa:	2009      	moveq	r0, #9
 80010ac:	b003      	add	sp, #12
 80010ae:	bd30      	pop	{r4, r5, pc}
 80010b0:	2301      	movs	r3, #1
 80010b2:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80010b6:	e7db      	b.n	8001070 <get_eit_entry+0x40>
 80010b8:	2300      	movs	r3, #0
 80010ba:	6123      	str	r3, [r4, #16]
 80010bc:	2005      	movs	r0, #5
 80010be:	e7de      	b.n	800107e <get_eit_entry+0x4e>
 80010c0:	00000000 	.word	0x00000000
 80010c4:	0800f5bc 	.word	0x0800f5bc
 80010c8:	0800f6ac 	.word	0x0800f6ac

080010cc <restore_non_core_regs>:
 80010cc:	6803      	ldr	r3, [r0, #0]
 80010ce:	07da      	lsls	r2, r3, #31
 80010d0:	b510      	push	{r4, lr}
 80010d2:	4604      	mov	r4, r0
 80010d4:	d406      	bmi.n	80010e4 <restore_non_core_regs+0x18>
 80010d6:	079b      	lsls	r3, r3, #30
 80010d8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80010dc:	d509      	bpl.n	80010f2 <restore_non_core_regs+0x26>
 80010de:	f000 fc5b 	bl	8001998 <__gnu_Unwind_Restore_VFP_D>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	0759      	lsls	r1, r3, #29
 80010e6:	d509      	bpl.n	80010fc <restore_non_core_regs+0x30>
 80010e8:	071a      	lsls	r2, r3, #28
 80010ea:	d50e      	bpl.n	800110a <restore_non_core_regs+0x3e>
 80010ec:	06db      	lsls	r3, r3, #27
 80010ee:	d513      	bpl.n	8001118 <restore_non_core_regs+0x4c>
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	f000 fc49 	bl	8001988 <__gnu_Unwind_Restore_VFP>
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	0759      	lsls	r1, r3, #29
 80010fa:	d4f5      	bmi.n	80010e8 <restore_non_core_regs+0x1c>
 80010fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001100:	f000 fc52 	bl	80019a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	071a      	lsls	r2, r3, #28
 8001108:	d4f0      	bmi.n	80010ec <restore_non_core_regs+0x20>
 800110a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800110e:	f000 fc53 	bl	80019b8 <__gnu_Unwind_Restore_WMMXD>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	06db      	lsls	r3, r3, #27
 8001116:	d4eb      	bmi.n	80010f0 <restore_non_core_regs+0x24>
 8001118:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800111c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001120:	f000 bc8e 	b.w	8001a40 <__gnu_Unwind_Restore_WMMXC>

08001124 <__gnu_unwind_24bit.constprop.0>:
 8001124:	2009      	movs	r0, #9
 8001126:	4770      	bx	lr

08001128 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8001128:	4603      	mov	r3, r0
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	b100      	cbz	r0, 8001130 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800112e:	4418      	add	r0, r3
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <_Unwind_DebugHook>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <unwind_phase2>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	4604      	mov	r4, r0
 800113c:	460e      	mov	r6, r1
 800113e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff75 	bl	8001030 <get_eit_entry>
 8001146:	4605      	mov	r5, r0
 8001148:	b988      	cbnz	r0, 800116e <unwind_phase2+0x36>
 800114a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800114c:	6162      	str	r2, [r4, #20]
 800114e:	6923      	ldr	r3, [r4, #16]
 8001150:	4632      	mov	r2, r6
 8001152:	4621      	mov	r1, r4
 8001154:	2001      	movs	r0, #1
 8001156:	4798      	blx	r3
 8001158:	2808      	cmp	r0, #8
 800115a:	d0f0      	beq.n	800113e <unwind_phase2+0x6>
 800115c:	2807      	cmp	r0, #7
 800115e:	d106      	bne.n	800116e <unwind_phase2+0x36>
 8001160:	4628      	mov	r0, r5
 8001162:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001164:	f7ff ffe6 	bl	8001134 <_Unwind_DebugHook>
 8001168:	1d30      	adds	r0, r6, #4
 800116a:	f000 fc01 	bl	8001970 <__restore_core_regs>
 800116e:	f00b ff8b 	bl	800d088 <abort>
 8001172:	bf00      	nop

08001174 <unwind_phase2_forced>:
 8001174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001178:	1d0d      	adds	r5, r1, #4
 800117a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800117e:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8001182:	4607      	mov	r7, r0
 8001184:	4614      	mov	r4, r2
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800118c:	f10d 0c0c 	add.w	ip, sp, #12
 8001190:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a4:	ae02      	add	r6, sp, #8
 80011a6:	f04f 0e00 	mov.w	lr, #0
 80011aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80011ae:	f8c6 e000 	str.w	lr, [r6]
 80011b2:	e020      	b.n	80011f6 <unwind_phase2_forced+0x82>
 80011b4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011bc:	4631      	mov	r1, r6
 80011be:	a87a      	add	r0, sp, #488	; 0x1e8
 80011c0:	f009 fcd6 	bl	800ab70 <memcpy>
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80011c8:	4639      	mov	r1, r7
 80011ca:	4650      	mov	r0, sl
 80011cc:	4798      	blx	r3
 80011ce:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80011d0:	6473      	str	r3, [r6, #68]	; 0x44
 80011d2:	4621      	mov	r1, r4
 80011d4:	e9cd 6900 	strd	r6, r9, [sp]
 80011d8:	4605      	mov	r5, r0
 80011da:	463b      	mov	r3, r7
 80011dc:	463a      	mov	r2, r7
 80011de:	2001      	movs	r0, #1
 80011e0:	47c0      	blx	r8
 80011e2:	4604      	mov	r4, r0
 80011e4:	b9e0      	cbnz	r0, 8001220 <unwind_phase2_forced+0xac>
 80011e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011ea:	a97a      	add	r1, sp, #488	; 0x1e8
 80011ec:	4630      	mov	r0, r6
 80011ee:	f009 fcbf 	bl	800ab70 <memcpy>
 80011f2:	2d08      	cmp	r5, #8
 80011f4:	d11a      	bne.n	800122c <unwind_phase2_forced+0xb8>
 80011f6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80011f8:	4638      	mov	r0, r7
 80011fa:	f7ff ff19 	bl	8001030 <get_eit_entry>
 80011fe:	3409      	adds	r4, #9
 8001200:	fa5f fa84 	uxtb.w	sl, r4
 8001204:	4605      	mov	r5, r0
 8001206:	2800      	cmp	r0, #0
 8001208:	d0d4      	beq.n	80011b4 <unwind_phase2_forced+0x40>
 800120a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800120c:	6473      	str	r3, [r6, #68]	; 0x44
 800120e:	463a      	mov	r2, r7
 8001210:	e9cd 6900 	strd	r6, r9, [sp]
 8001214:	463b      	mov	r3, r7
 8001216:	f04a 0110 	orr.w	r1, sl, #16
 800121a:	2001      	movs	r0, #1
 800121c:	47c0      	blx	r8
 800121e:	b100      	cbz	r0, 8001222 <unwind_phase2_forced+0xae>
 8001220:	2509      	movs	r5, #9
 8001222:	4628      	mov	r0, r5
 8001224:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	2d07      	cmp	r5, #7
 800122e:	d1f7      	bne.n	8001220 <unwind_phase2_forced+0xac>
 8001230:	4620      	mov	r0, r4
 8001232:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001234:	f7ff ff7e 	bl	8001134 <_Unwind_DebugHook>
 8001238:	a803      	add	r0, sp, #12
 800123a:	f000 fb99 	bl	8001970 <__restore_core_regs>
 800123e:	bf00      	nop

08001240 <_Unwind_GetCFA>:
 8001240:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001242:	4770      	bx	lr

08001244 <__gnu_Unwind_RaiseException>:
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001248:	640b      	str	r3, [r1, #64]	; 0x40
 800124a:	f101 0c04 	add.w	ip, r1, #4
 800124e:	460e      	mov	r6, r1
 8001250:	4605      	mov	r5, r0
 8001252:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001256:	b0f9      	sub	sp, #484	; 0x1e4
 8001258:	ac01      	add	r4, sp, #4
 800125a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800126c:	f04f 37ff 	mov.w	r7, #4294967295
 8001270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001274:	9700      	str	r7, [sp, #0]
 8001276:	e006      	b.n	8001286 <__gnu_Unwind_RaiseException+0x42>
 8001278:	692b      	ldr	r3, [r5, #16]
 800127a:	466a      	mov	r2, sp
 800127c:	4629      	mov	r1, r5
 800127e:	4798      	blx	r3
 8001280:	2808      	cmp	r0, #8
 8001282:	4604      	mov	r4, r0
 8001284:	d108      	bne.n	8001298 <__gnu_Unwind_RaiseException+0x54>
 8001286:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff fed1 	bl	8001030 <get_eit_entry>
 800128e:	2800      	cmp	r0, #0
 8001290:	d0f2      	beq.n	8001278 <__gnu_Unwind_RaiseException+0x34>
 8001292:	2009      	movs	r0, #9
 8001294:	b079      	add	sp, #484	; 0x1e4
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	4668      	mov	r0, sp
 800129a:	f7ff ff17 	bl	80010cc <restore_non_core_regs>
 800129e:	2c06      	cmp	r4, #6
 80012a0:	d1f7      	bne.n	8001292 <__gnu_Unwind_RaiseException+0x4e>
 80012a2:	4631      	mov	r1, r6
 80012a4:	4628      	mov	r0, r5
 80012a6:	f7ff ff47 	bl	8001138 <unwind_phase2>
 80012aa:	bf00      	nop

080012ac <__gnu_Unwind_ForcedUnwind>:
 80012ac:	60c1      	str	r1, [r0, #12]
 80012ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b0:	6182      	str	r2, [r0, #24]
 80012b2:	6419      	str	r1, [r3, #64]	; 0x40
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	e75c      	b.n	8001174 <unwind_phase2_forced>
 80012ba:	bf00      	nop

080012bc <__gnu_Unwind_Resume>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	68c6      	ldr	r6, [r0, #12]
 80012c0:	6943      	ldr	r3, [r0, #20]
 80012c2:	640b      	str	r3, [r1, #64]	; 0x40
 80012c4:	b9ae      	cbnz	r6, 80012f2 <__gnu_Unwind_Resume+0x36>
 80012c6:	6903      	ldr	r3, [r0, #16]
 80012c8:	460a      	mov	r2, r1
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4601      	mov	r1, r0
 80012d0:	2002      	movs	r0, #2
 80012d2:	4798      	blx	r3
 80012d4:	2807      	cmp	r0, #7
 80012d6:	d005      	beq.n	80012e4 <__gnu_Unwind_Resume+0x28>
 80012d8:	2808      	cmp	r0, #8
 80012da:	d10f      	bne.n	80012fc <__gnu_Unwind_Resume+0x40>
 80012dc:	4629      	mov	r1, r5
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff ff2a 	bl	8001138 <unwind_phase2>
 80012e4:	4630      	mov	r0, r6
 80012e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80012e8:	f7ff ff24 	bl	8001134 <_Unwind_DebugHook>
 80012ec:	1d28      	adds	r0, r5, #4
 80012ee:	f000 fb3f 	bl	8001970 <__restore_core_regs>
 80012f2:	2201      	movs	r2, #1
 80012f4:	f7ff ff3e 	bl	8001174 <unwind_phase2_forced>
 80012f8:	f00b fec6 	bl	800d088 <abort>
 80012fc:	f00b fec4 	bl	800d088 <abort>

08001300 <__gnu_Unwind_Resume_or_Rethrow>:
 8001300:	68c2      	ldr	r2, [r0, #12]
 8001302:	b11a      	cbz	r2, 800130c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001304:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001306:	640a      	str	r2, [r1, #64]	; 0x40
 8001308:	2200      	movs	r2, #0
 800130a:	e733      	b.n	8001174 <unwind_phase2_forced>
 800130c:	e79a      	b.n	8001244 <__gnu_Unwind_RaiseException>
 800130e:	bf00      	nop

08001310 <_Unwind_Complete>:
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <_Unwind_DeleteException>:
 8001314:	6883      	ldr	r3, [r0, #8]
 8001316:	4601      	mov	r1, r0
 8001318:	b10b      	cbz	r3, 800131e <_Unwind_DeleteException+0xa>
 800131a:	2001      	movs	r0, #1
 800131c:	4718      	bx	r3
 800131e:	4770      	bx	lr

08001320 <_Unwind_VRS_Get>:
 8001320:	2901      	cmp	r1, #1
 8001322:	d012      	beq.n	800134a <_Unwind_VRS_Get+0x2a>
 8001324:	d809      	bhi.n	800133a <_Unwind_VRS_Get+0x1a>
 8001326:	b973      	cbnz	r3, 8001346 <_Unwind_VRS_Get+0x26>
 8001328:	2a0f      	cmp	r2, #15
 800132a:	d80c      	bhi.n	8001346 <_Unwind_VRS_Get+0x26>
 800132c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001330:	4618      	mov	r0, r3
 8001332:	6853      	ldr	r3, [r2, #4]
 8001334:	9a00      	ldr	r2, [sp, #0]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4770      	bx	lr
 800133a:	3903      	subs	r1, #3
 800133c:	2901      	cmp	r1, #1
 800133e:	bf94      	ite	ls
 8001340:	2001      	movls	r0, #1
 8001342:	2002      	movhi	r0, #2
 8001344:	4770      	bx	lr
 8001346:	2002      	movs	r0, #2
 8001348:	4770      	bx	lr
 800134a:	4608      	mov	r0, r1
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <_Unwind_GetGR>:
 8001350:	b500      	push	{lr}
 8001352:	b085      	sub	sp, #20
 8001354:	460a      	mov	r2, r1
 8001356:	2300      	movs	r3, #0
 8001358:	a903      	add	r1, sp, #12
 800135a:	9100      	str	r1, [sp, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff ffdf 	bl	8001320 <_Unwind_VRS_Get>
 8001362:	9803      	ldr	r0, [sp, #12]
 8001364:	b005      	add	sp, #20
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop

0800136c <_Unwind_VRS_Set>:
 800136c:	2901      	cmp	r1, #1
 800136e:	d012      	beq.n	8001396 <_Unwind_VRS_Set+0x2a>
 8001370:	d809      	bhi.n	8001386 <_Unwind_VRS_Set+0x1a>
 8001372:	b973      	cbnz	r3, 8001392 <_Unwind_VRS_Set+0x26>
 8001374:	2a0f      	cmp	r2, #15
 8001376:	d80c      	bhi.n	8001392 <_Unwind_VRS_Set+0x26>
 8001378:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800137c:	9a00      	ldr	r2, [sp, #0]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	6042      	str	r2, [r0, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	4770      	bx	lr
 8001386:	3903      	subs	r1, #3
 8001388:	2901      	cmp	r1, #1
 800138a:	bf94      	ite	ls
 800138c:	2001      	movls	r0, #1
 800138e:	2002      	movhi	r0, #2
 8001390:	4770      	bx	lr
 8001392:	2002      	movs	r0, #2
 8001394:	4770      	bx	lr
 8001396:	4608      	mov	r0, r1
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <_Unwind_SetGR>:
 800139c:	b510      	push	{r4, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	2300      	movs	r3, #0
 80013a2:	ac03      	add	r4, sp, #12
 80013a4:	9203      	str	r2, [sp, #12]
 80013a6:	9400      	str	r4, [sp, #0]
 80013a8:	460a      	mov	r2, r1
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff ffde 	bl	800136c <_Unwind_VRS_Set>
 80013b0:	b004      	add	sp, #16
 80013b2:	bd10      	pop	{r4, pc}

080013b4 <__gnu_Unwind_Backtrace>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	f102 0c04 	add.w	ip, r2, #4
 80013be:	4605      	mov	r5, r0
 80013c0:	460c      	mov	r4, r1
 80013c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013c6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80013ca:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80013ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80013de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80013e2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80013e6:	f04f 36ff 	mov.w	r6, #4294967295
 80013ea:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80013ee:	9616      	str	r6, [sp, #88]	; 0x58
 80013f0:	e010      	b.n	8001414 <__gnu_Unwind_Backtrace+0x60>
 80013f2:	f7ff ffd3 	bl	800139c <_Unwind_SetGR>
 80013f6:	4621      	mov	r1, r4
 80013f8:	a816      	add	r0, sp, #88	; 0x58
 80013fa:	47a8      	blx	r5
 80013fc:	4603      	mov	r3, r0
 80013fe:	aa16      	add	r2, sp, #88	; 0x58
 8001400:	4669      	mov	r1, sp
 8001402:	2008      	movs	r0, #8
 8001404:	b983      	cbnz	r3, 8001428 <__gnu_Unwind_Backtrace+0x74>
 8001406:	9b04      	ldr	r3, [sp, #16]
 8001408:	4798      	blx	r3
 800140a:	2805      	cmp	r0, #5
 800140c:	4606      	mov	r6, r0
 800140e:	d00c      	beq.n	800142a <__gnu_Unwind_Backtrace+0x76>
 8001410:	2809      	cmp	r0, #9
 8001412:	d009      	beq.n	8001428 <__gnu_Unwind_Backtrace+0x74>
 8001414:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001416:	4668      	mov	r0, sp
 8001418:	f7ff fe0a 	bl	8001030 <get_eit_entry>
 800141c:	4603      	mov	r3, r0
 800141e:	466a      	mov	r2, sp
 8001420:	210c      	movs	r1, #12
 8001422:	a816      	add	r0, sp, #88	; 0x58
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0e4      	beq.n	80013f2 <__gnu_Unwind_Backtrace+0x3e>
 8001428:	2609      	movs	r6, #9
 800142a:	a816      	add	r0, sp, #88	; 0x58
 800142c:	f7ff fe4e 	bl	80010cc <restore_non_core_regs>
 8001430:	4630      	mov	r0, r6
 8001432:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8001436:	bd70      	pop	{r4, r5, r6, pc}

08001438 <__gnu_unwind_pr_common>:
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	461e      	mov	r6, r3
 8001442:	f854 3b04 	ldr.w	r3, [r4], #4
 8001446:	9406      	str	r4, [sp, #24]
 8001448:	460d      	mov	r5, r1
 800144a:	4617      	mov	r7, r2
 800144c:	f000 0803 	and.w	r8, r0, #3
 8001450:	2e00      	cmp	r6, #0
 8001452:	d079      	beq.n	8001548 <__gnu_unwind_pr_common+0x110>
 8001454:	0c1a      	lsrs	r2, r3, #16
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	9305      	str	r3, [sp, #20]
 800145a:	f88d 201d 	strb.w	r2, [sp, #29]
 800145e:	2302      	movs	r3, #2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8001466:	f88d 301c 	strb.w	r3, [sp, #28]
 800146a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800146c:	f1b8 0f02 	cmp.w	r8, #2
 8001470:	bf08      	it	eq
 8001472:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001474:	f013 0301 	ands.w	r3, r3, #1
 8001478:	d00c      	beq.n	8001494 <__gnu_unwind_pr_common+0x5c>
 800147a:	a905      	add	r1, sp, #20
 800147c:	4638      	mov	r0, r7
 800147e:	f000 fb79 	bl	8001b74 <__gnu_unwind_execute>
 8001482:	b918      	cbnz	r0, 800148c <__gnu_unwind_pr_common+0x54>
 8001484:	2008      	movs	r0, #8
 8001486:	b009      	add	sp, #36	; 0x24
 8001488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148c:	2009      	movs	r0, #9
 800148e:	b009      	add	sp, #36	; 0x24
 8001490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001494:	f8d4 a000 	ldr.w	sl, [r4]
 8001498:	f1ba 0f00 	cmp.w	sl, #0
 800149c:	d0ed      	beq.n	800147a <__gnu_unwind_pr_common+0x42>
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	f000 0308 	and.w	r3, r0, #8
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2e02      	cmp	r6, #2
 80014a8:	d04a      	beq.n	8001540 <__gnu_unwind_pr_common+0x108>
 80014aa:	f8b4 a000 	ldrh.w	sl, [r4]
 80014ae:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80014b2:	3404      	adds	r4, #4
 80014b4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014b6:	f029 0b01 	bic.w	fp, r9, #1
 80014ba:	210f      	movs	r1, #15
 80014bc:	4638      	mov	r0, r7
 80014be:	449b      	add	fp, r3
 80014c0:	f7ff ff46 	bl	8001350 <_Unwind_GetGR>
 80014c4:	4583      	cmp	fp, r0
 80014c6:	d839      	bhi.n	800153c <__gnu_unwind_pr_common+0x104>
 80014c8:	f02a 0301 	bic.w	r3, sl, #1
 80014cc:	449b      	add	fp, r3
 80014ce:	4583      	cmp	fp, r0
 80014d0:	bf94      	ite	ls
 80014d2:	2000      	movls	r0, #0
 80014d4:	2001      	movhi	r0, #1
 80014d6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	f00a 0a01 	and.w	sl, sl, #1
 80014e2:	ea43 030a 	orr.w	r3, r3, sl
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d049      	beq.n	800157e <__gnu_unwind_pr_common+0x146>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d032      	beq.n	8001554 <__gnu_unwind_pr_common+0x11c>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1cc      	bne.n	800148c <__gnu_unwind_pr_common+0x54>
 80014f2:	f1b8 0f00 	cmp.w	r8, #0
 80014f6:	d002      	beq.n	80014fe <__gnu_unwind_pr_common+0xc6>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f040 80cd 	bne.w	8001698 <__gnu_unwind_pr_common+0x260>
 80014fe:	3404      	adds	r4, #4
 8001500:	f8d4 a000 	ldr.w	sl, [r4]
 8001504:	f1ba 0f00 	cmp.w	sl, #0
 8001508:	d1cd      	bne.n	80014a6 <__gnu_unwind_pr_common+0x6e>
 800150a:	a905      	add	r1, sp, #20
 800150c:	4638      	mov	r0, r7
 800150e:	f000 fb31 	bl	8001b74 <__gnu_unwind_execute>
 8001512:	2800      	cmp	r0, #0
 8001514:	d1ba      	bne.n	800148c <__gnu_unwind_pr_common+0x54>
 8001516:	9b01      	ldr	r3, [sp, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0b3      	beq.n	8001484 <__gnu_unwind_pr_common+0x4c>
 800151c:	210f      	movs	r1, #15
 800151e:	4638      	mov	r0, r7
 8001520:	f7ff ff16 	bl	8001350 <_Unwind_GetGR>
 8001524:	210e      	movs	r1, #14
 8001526:	4602      	mov	r2, r0
 8001528:	4638      	mov	r0, r7
 800152a:	f7ff ff37 	bl	800139c <_Unwind_SetGR>
 800152e:	4638      	mov	r0, r7
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <__gnu_unwind_pr_common+0x2a4>)
 8001532:	210f      	movs	r1, #15
 8001534:	f7ff ff32 	bl	800139c <_Unwind_SetGR>
 8001538:	2007      	movs	r0, #7
 800153a:	e7a8      	b.n	800148e <__gnu_unwind_pr_common+0x56>
 800153c:	2000      	movs	r0, #0
 800153e:	e7ca      	b.n	80014d6 <__gnu_unwind_pr_common+0x9e>
 8001540:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001544:	3408      	adds	r4, #8
 8001546:	e7b5      	b.n	80014b4 <__gnu_unwind_pr_common+0x7c>
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	9305      	str	r3, [sp, #20]
 800154c:	2303      	movs	r3, #3
 800154e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001552:	e78a      	b.n	800146a <__gnu_unwind_pr_common+0x32>
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800155a:	f1b8 0f00 	cmp.w	r8, #0
 800155e:	d145      	bne.n	80015ec <__gnu_unwind_pr_common+0x1b4>
 8001560:	b128      	cbz	r0, 800156e <__gnu_unwind_pr_common+0x136>
 8001562:	9a02      	ldr	r2, [sp, #8]
 8001564:	2a00      	cmp	r2, #0
 8001566:	d05c      	beq.n	8001622 <__gnu_unwind_pr_common+0x1ea>
 8001568:	f1bb 0f00 	cmp.w	fp, #0
 800156c:	d074      	beq.n	8001658 <__gnu_unwind_pr_common+0x220>
 800156e:	2b00      	cmp	r3, #0
 8001570:	da00      	bge.n	8001574 <__gnu_unwind_pr_common+0x13c>
 8001572:	3404      	adds	r4, #4
 8001574:	f10b 0b01 	add.w	fp, fp, #1
 8001578:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 800157c:	e7c0      	b.n	8001500 <__gnu_unwind_pr_common+0xc8>
 800157e:	f1b8 0f00 	cmp.w	r8, #0
 8001582:	d119      	bne.n	80015b8 <__gnu_unwind_pr_common+0x180>
 8001584:	b1b0      	cbz	r0, 80015b4 <__gnu_unwind_pr_common+0x17c>
 8001586:	6863      	ldr	r3, [r4, #4]
 8001588:	6822      	ldr	r2, [r4, #0]
 800158a:	1c99      	adds	r1, r3, #2
 800158c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001590:	f43f af7c 	beq.w	800148c <__gnu_unwind_pr_common+0x54>
 8001594:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001598:	3301      	adds	r3, #1
 800159a:	9104      	str	r1, [sp, #16]
 800159c:	f000 8090 	beq.w	80016c0 <__gnu_unwind_pr_common+0x288>
 80015a0:	1d20      	adds	r0, r4, #4
 80015a2:	f7ff fdc1 	bl	8001128 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80015a6:	ab04      	add	r3, sp, #16
 80015a8:	4601      	mov	r1, r0
 80015aa:	4628      	mov	r0, r5
 80015ac:	f3af 8000 	nop.w
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d15b      	bne.n	800166c <__gnu_unwind_pr_common+0x234>
 80015b4:	3408      	adds	r4, #8
 80015b6:	e7a3      	b.n	8001500 <__gnu_unwind_pr_common+0xc8>
 80015b8:	210d      	movs	r1, #13
 80015ba:	4638      	mov	r0, r7
 80015bc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015c0:	f7ff fec6 	bl	8001350 <_Unwind_GetGR>
 80015c4:	4581      	cmp	r9, r0
 80015c6:	d1f5      	bne.n	80015b4 <__gnu_unwind_pr_common+0x17c>
 80015c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015ca:	429c      	cmp	r4, r3
 80015cc:	d1f2      	bne.n	80015b4 <__gnu_unwind_pr_common+0x17c>
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fce2 	bl	8000f98 <selfrel_offset31>
 80015d4:	210f      	movs	r1, #15
 80015d6:	4602      	mov	r2, r0
 80015d8:	4638      	mov	r0, r7
 80015da:	f7ff fedf 	bl	800139c <_Unwind_SetGR>
 80015de:	4638      	mov	r0, r7
 80015e0:	462a      	mov	r2, r5
 80015e2:	2100      	movs	r1, #0
 80015e4:	f7ff feda 	bl	800139c <_Unwind_SetGR>
 80015e8:	2007      	movs	r0, #7
 80015ea:	e750      	b.n	800148e <__gnu_unwind_pr_common+0x56>
 80015ec:	210d      	movs	r1, #13
 80015ee:	4638      	mov	r0, r7
 80015f0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80015f4:	f7ff feac 	bl	8001350 <_Unwind_GetGR>
 80015f8:	4581      	cmp	r9, r0
 80015fa:	d001      	beq.n	8001600 <__gnu_unwind_pr_common+0x1c8>
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	e7b6      	b.n	800156e <__gnu_unwind_pr_common+0x136>
 8001600:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001602:	429c      	cmp	r4, r3
 8001604:	d1fa      	bne.n	80015fc <__gnu_unwind_pr_common+0x1c4>
 8001606:	2304      	movs	r3, #4
 8001608:	2200      	movs	r2, #0
 800160a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800160e:	18e3      	adds	r3, r4, r3
 8001610:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001614:	636b      	str	r3, [r5, #52]	; 0x34
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db59      	blt.n	80016d0 <__gnu_unwind_pr_common+0x298>
 800161c:	2301      	movs	r3, #1
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	e7a8      	b.n	8001574 <__gnu_unwind_pr_common+0x13c>
 8001622:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001626:	f8cd 800c 	str.w	r8, [sp, #12]
 800162a:	f104 0a04 	add.w	sl, r4, #4
 800162e:	46b0      	mov	r8, r6
 8001630:	4691      	mov	r9, r2
 8001632:	461e      	mov	r6, r3
 8001634:	e00e      	b.n	8001654 <__gnu_unwind_pr_common+0x21c>
 8001636:	4650      	mov	r0, sl
 8001638:	9604      	str	r6, [sp, #16]
 800163a:	f7ff fd75 	bl	8001128 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800163e:	2200      	movs	r2, #0
 8001640:	4601      	mov	r1, r0
 8001642:	ab04      	add	r3, sp, #16
 8001644:	4628      	mov	r0, r5
 8001646:	f109 0901 	add.w	r9, r9, #1
 800164a:	f10a 0a04 	add.w	sl, sl, #4
 800164e:	f3af 8000 	nop.w
 8001652:	b9e0      	cbnz	r0, 800168e <__gnu_unwind_pr_common+0x256>
 8001654:	45d9      	cmp	r9, fp
 8001656:	d1ee      	bne.n	8001636 <__gnu_unwind_pr_common+0x1fe>
 8001658:	210d      	movs	r1, #13
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fe78 	bl	8001350 <_Unwind_GetGR>
 8001660:	9b04      	ldr	r3, [sp, #16]
 8001662:	62ac      	str	r4, [r5, #40]	; 0x28
 8001664:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001668:	2006      	movs	r0, #6
 800166a:	e710      	b.n	800148e <__gnu_unwind_pr_common+0x56>
 800166c:	4681      	mov	r9, r0
 800166e:	210d      	movs	r1, #13
 8001670:	4638      	mov	r0, r7
 8001672:	f7ff fe6d 	bl	8001350 <_Unwind_GetGR>
 8001676:	f1b9 0f02 	cmp.w	r9, #2
 800167a:	6228      	str	r0, [r5, #32]
 800167c:	d125      	bne.n	80016ca <__gnu_unwind_pr_common+0x292>
 800167e:	462b      	mov	r3, r5
 8001680:	9a04      	ldr	r2, [sp, #16]
 8001682:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001686:	626b      	str	r3, [r5, #36]	; 0x24
 8001688:	62ac      	str	r4, [r5, #40]	; 0x28
 800168a:	2006      	movs	r0, #6
 800168c:	e6ff      	b.n	800148e <__gnu_unwind_pr_common+0x56>
 800168e:	4646      	mov	r6, r8
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001696:	e76a      	b.n	800156e <__gnu_unwind_pr_common+0x136>
 8001698:	4620      	mov	r0, r4
 800169a:	f7ff fc7d 	bl	8000f98 <selfrel_offset31>
 800169e:	3404      	adds	r4, #4
 80016a0:	4602      	mov	r2, r0
 80016a2:	63ac      	str	r4, [r5, #56]	; 0x38
 80016a4:	4628      	mov	r0, r5
 80016a6:	4614      	mov	r4, r2
 80016a8:	f3af 8000 	nop.w
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f43f aeed 	beq.w	800148c <__gnu_unwind_pr_common+0x54>
 80016b2:	4638      	mov	r0, r7
 80016b4:	4622      	mov	r2, r4
 80016b6:	210f      	movs	r1, #15
 80016b8:	f7ff fe70 	bl	800139c <_Unwind_SetGR>
 80016bc:	2007      	movs	r0, #7
 80016be:	e6e6      	b.n	800148e <__gnu_unwind_pr_common+0x56>
 80016c0:	210d      	movs	r1, #13
 80016c2:	4638      	mov	r0, r7
 80016c4:	f7ff fe44 	bl	8001350 <_Unwind_GetGR>
 80016c8:	6228      	str	r0, [r5, #32]
 80016ca:	9b04      	ldr	r3, [sp, #16]
 80016cc:	626b      	str	r3, [r5, #36]	; 0x24
 80016ce:	e7db      	b.n	8001688 <__gnu_unwind_pr_common+0x250>
 80016d0:	f10b 0001 	add.w	r0, fp, #1
 80016d4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016d8:	e77a      	b.n	80015d0 <__gnu_unwind_pr_common+0x198>
 80016da:	bf00      	nop
 80016dc:	00000000 	.word	0x00000000

080016e0 <__aeabi_unwind_cpp_pr0>:
 80016e0:	2300      	movs	r3, #0
 80016e2:	e6a9      	b.n	8001438 <__gnu_unwind_pr_common>

080016e4 <__aeabi_unwind_cpp_pr1>:
 80016e4:	2301      	movs	r3, #1
 80016e6:	e6a7      	b.n	8001438 <__gnu_unwind_pr_common>

080016e8 <__aeabi_unwind_cpp_pr2>:
 80016e8:	2302      	movs	r3, #2
 80016ea:	e6a5      	b.n	8001438 <__gnu_unwind_pr_common>

080016ec <_Unwind_VRS_Pop>:
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f0:	4606      	mov	r6, r0
 80016f2:	b0c3      	sub	sp, #268	; 0x10c
 80016f4:	4615      	mov	r5, r2
 80016f6:	461c      	mov	r4, r3
 80016f8:	2904      	cmp	r1, #4
 80016fa:	f200 80bf 	bhi.w	800187c <_Unwind_VRS_Pop+0x190>
 80016fe:	e8df f001 	tbb	[pc, r1]
 8001702:	579e      	.short	0x579e
 8001704:	2dbd      	.short	0x2dbd
 8001706:	03          	.byte	0x03
 8001707:	00          	.byte	0x00
 8001708:	2c00      	cmp	r4, #0
 800170a:	f040 80b7 	bne.w	800187c <_Unwind_VRS_Pop+0x190>
 800170e:	2a10      	cmp	r2, #16
 8001710:	f200 80b4 	bhi.w	800187c <_Unwind_VRS_Pop+0x190>
 8001714:	6803      	ldr	r3, [r0, #0]
 8001716:	06d8      	lsls	r0, r3, #27
 8001718:	f100 80f9 	bmi.w	800190e <_Unwind_VRS_Pop+0x222>
 800171c:	af20      	add	r7, sp, #128	; 0x80
 800171e:	4638      	mov	r0, r7
 8001720:	f000 f998 	bl	8001a54 <__gnu_Unwind_Save_WMMXC>
 8001724:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8001726:	4639      	mov	r1, r7
 8001728:	2300      	movs	r3, #0
 800172a:	f04f 0c01 	mov.w	ip, #1
 800172e:	fa0c f203 	lsl.w	r2, ip, r3
 8001732:	422a      	tst	r2, r5
 8001734:	4620      	mov	r0, r4
 8001736:	f103 0301 	add.w	r3, r3, #1
 800173a:	d003      	beq.n	8001744 <_Unwind_VRS_Pop+0x58>
 800173c:	f850 2b04 	ldr.w	r2, [r0], #4
 8001740:	600a      	str	r2, [r1, #0]
 8001742:	4604      	mov	r4, r0
 8001744:	2b04      	cmp	r3, #4
 8001746:	f101 0104 	add.w	r1, r1, #4
 800174a:	d1f0      	bne.n	800172e <_Unwind_VRS_Pop+0x42>
 800174c:	4638      	mov	r0, r7
 800174e:	63b4      	str	r4, [r6, #56]	; 0x38
 8001750:	f000 f976 	bl	8001a40 <__gnu_Unwind_Restore_WMMXC>
 8001754:	2000      	movs	r0, #0
 8001756:	b043      	add	sp, #268	; 0x10c
 8001758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800175c:	2c03      	cmp	r4, #3
 800175e:	f040 808d 	bne.w	800187c <_Unwind_VRS_Pop+0x190>
 8001762:	b294      	uxth	r4, r2
 8001764:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001768:	2b10      	cmp	r3, #16
 800176a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800176e:	f200 8085 	bhi.w	800187c <_Unwind_VRS_Pop+0x190>
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	071f      	lsls	r7, r3, #28
 8001776:	f100 80d2 	bmi.w	800191e <_Unwind_VRS_Pop+0x232>
 800177a:	af20      	add	r7, sp, #128	; 0x80
 800177c:	4638      	mov	r0, r7
 800177e:	f000 f93d 	bl	80019fc <__gnu_Unwind_Save_WMMXD>
 8001782:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001784:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001788:	b154      	cbz	r4, 80017a0 <_Unwind_VRS_Pop+0xb4>
 800178a:	460b      	mov	r3, r1
 800178c:	1ad0      	subs	r0, r2, r3
 800178e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001792:	00e4      	lsls	r4, r4, #3
 8001794:	581d      	ldr	r5, [r3, r0]
 8001796:	f843 5b04 	str.w	r5, [r3], #4
 800179a:	428b      	cmp	r3, r1
 800179c:	d1fa      	bne.n	8001794 <_Unwind_VRS_Pop+0xa8>
 800179e:	4422      	add	r2, r4
 80017a0:	4638      	mov	r0, r7
 80017a2:	63b2      	str	r2, [r6, #56]	; 0x38
 80017a4:	f000 f908 	bl	80019b8 <__gnu_Unwind_Restore_WMMXD>
 80017a8:	2000      	movs	r0, #0
 80017aa:	b043      	add	sp, #268	; 0x10c
 80017ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b0:	2c01      	cmp	r4, #1
 80017b2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80017b6:	b295      	uxth	r5, r2
 80017b8:	d05c      	beq.n	8001874 <_Unwind_VRS_Pop+0x188>
 80017ba:	2c05      	cmp	r4, #5
 80017bc:	d15e      	bne.n	800187c <_Unwind_VRS_Pop+0x190>
 80017be:	eb08 0905 	add.w	r9, r8, r5
 80017c2:	f1b9 0f20 	cmp.w	r9, #32
 80017c6:	d859      	bhi.n	800187c <_Unwind_VRS_Pop+0x190>
 80017c8:	f1b8 0f0f 	cmp.w	r8, #15
 80017cc:	d979      	bls.n	80018c2 <_Unwind_VRS_Pop+0x1d6>
 80017ce:	46a9      	mov	r9, r5
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	f040 808a 	bne.w	80018ea <_Unwind_VRS_Pop+0x1fe>
 80017d6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80017d8:	b36d      	cbz	r5, 8001836 <_Unwind_VRS_Pop+0x14a>
 80017da:	af20      	add	r7, sp, #128	; 0x80
 80017dc:	f04f 0900 	mov.w	r9, #0
 80017e0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80017e4:	3f04      	subs	r7, #4
 80017e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80017ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80017ee:	f847 1f04 	str.w	r1, [r7, #4]!
 80017f2:	42ab      	cmp	r3, r5
 80017f4:	d1f9      	bne.n	80017ea <_Unwind_VRS_Pop+0xfe>
 80017f6:	f1b9 0f00 	cmp.w	r9, #0
 80017fa:	d00f      	beq.n	800181c <_Unwind_VRS_Pop+0x130>
 80017fc:	466f      	mov	r7, sp
 80017fe:	4641      	mov	r1, r8
 8001800:	2910      	cmp	r1, #16
 8001802:	bf38      	it	cc
 8001804:	2110      	movcc	r1, #16
 8001806:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800180a:	3984      	subs	r1, #132	; 0x84
 800180c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001810:	f853 0b04 	ldr.w	r0, [r3], #4
 8001814:	f841 0f04 	str.w	r0, [r1, #4]!
 8001818:	42ab      	cmp	r3, r5
 800181a:	d1f9      	bne.n	8001810 <_Unwind_VRS_Pop+0x124>
 800181c:	2c01      	cmp	r4, #1
 800181e:	f000 8086 	beq.w	800192e <_Unwind_VRS_Pop+0x242>
 8001822:	f1b8 0f0f 	cmp.w	r8, #15
 8001826:	63b5      	str	r5, [r6, #56]	; 0x38
 8001828:	d947      	bls.n	80018ba <_Unwind_VRS_Pop+0x1ce>
 800182a:	f1b9 0f00 	cmp.w	r9, #0
 800182e:	d002      	beq.n	8001836 <_Unwind_VRS_Pop+0x14a>
 8001830:	4668      	mov	r0, sp
 8001832:	f000 f8b9 	bl	80019a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001836:	2000      	movs	r0, #0
 8001838:	b043      	add	sp, #268	; 0x10c
 800183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800183e:	b9ec      	cbnz	r4, 800187c <_Unwind_VRS_Pop+0x190>
 8001840:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001842:	4623      	mov	r3, r4
 8001844:	fa1f fc82 	uxth.w	ip, r2
 8001848:	2401      	movs	r4, #1
 800184a:	1d37      	adds	r7, r6, #4
 800184c:	fa04 f203 	lsl.w	r2, r4, r3
 8001850:	ea12 0f0c 	tst.w	r2, ip
 8001854:	4601      	mov	r1, r0
 8001856:	d004      	beq.n	8001862 <_Unwind_VRS_Pop+0x176>
 8001858:	f851 2b04 	ldr.w	r2, [r1], #4
 800185c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8001860:	4608      	mov	r0, r1
 8001862:	3301      	adds	r3, #1
 8001864:	2b10      	cmp	r3, #16
 8001866:	d1f1      	bne.n	800184c <_Unwind_VRS_Pop+0x160>
 8001868:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800186c:	d1e3      	bne.n	8001836 <_Unwind_VRS_Pop+0x14a>
 800186e:	63b0      	str	r0, [r6, #56]	; 0x38
 8001870:	4628      	mov	r0, r5
 8001872:	e004      	b.n	800187e <_Unwind_VRS_Pop+0x192>
 8001874:	eb08 0305 	add.w	r3, r8, r5
 8001878:	2b10      	cmp	r3, #16
 800187a:	d903      	bls.n	8001884 <_Unwind_VRS_Pop+0x198>
 800187c:	2002      	movs	r0, #2
 800187e:	b043      	add	sp, #268	; 0x10c
 8001880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001884:	f1b8 0f0f 	cmp.w	r8, #15
 8001888:	d8f8      	bhi.n	800187c <_Unwind_VRS_Pop+0x190>
 800188a:	6833      	ldr	r3, [r6, #0]
 800188c:	07da      	lsls	r2, r3, #31
 800188e:	d506      	bpl.n	800189e <_Unwind_VRS_Pop+0x1b2>
 8001890:	4630      	mov	r0, r6
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f840 3b48 	str.w	r3, [r0], #72
 800189a:	f000 f879 	bl	8001990 <__gnu_Unwind_Save_VFP>
 800189e:	af20      	add	r7, sp, #128	; 0x80
 80018a0:	4638      	mov	r0, r7
 80018a2:	f000 f875 	bl	8001990 <__gnu_Unwind_Save_VFP>
 80018a6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80018a8:	2d00      	cmp	r5, #0
 80018aa:	d197      	bne.n	80017dc <_Unwind_VRS_Pop+0xf0>
 80018ac:	461d      	mov	r5, r3
 80018ae:	3504      	adds	r5, #4
 80018b0:	63b5      	str	r5, [r6, #56]	; 0x38
 80018b2:	4638      	mov	r0, r7
 80018b4:	f000 f868 	bl	8001988 <__gnu_Unwind_Restore_VFP>
 80018b8:	e7bd      	b.n	8001836 <_Unwind_VRS_Pop+0x14a>
 80018ba:	a820      	add	r0, sp, #128	; 0x80
 80018bc:	f000 f86c 	bl	8001998 <__gnu_Unwind_Restore_VFP_D>
 80018c0:	e7b3      	b.n	800182a <_Unwind_VRS_Pop+0x13e>
 80018c2:	f1b9 0f10 	cmp.w	r9, #16
 80018c6:	d940      	bls.n	800194a <_Unwind_VRS_Pop+0x25e>
 80018c8:	f1a9 0910 	sub.w	r9, r9, #16
 80018cc:	6833      	ldr	r3, [r6, #0]
 80018ce:	07d9      	lsls	r1, r3, #31
 80018d0:	d508      	bpl.n	80018e4 <_Unwind_VRS_Pop+0x1f8>
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	4630      	mov	r0, r6
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	f840 3b48 	str.w	r3, [r0], #72
 80018e0:	f000 f85e 	bl	80019a0 <__gnu_Unwind_Save_VFP_D>
 80018e4:	f1b9 0f00 	cmp.w	r9, #0
 80018e8:	d032      	beq.n	8001950 <_Unwind_VRS_Pop+0x264>
 80018ea:	6833      	ldr	r3, [r6, #0]
 80018ec:	075a      	lsls	r2, r3, #29
 80018ee:	d420      	bmi.n	8001932 <_Unwind_VRS_Pop+0x246>
 80018f0:	f1b8 0f0f 	cmp.w	r8, #15
 80018f4:	d925      	bls.n	8001942 <_Unwind_VRS_Pop+0x256>
 80018f6:	466f      	mov	r7, sp
 80018f8:	4638      	mov	r0, r7
 80018fa:	f1c8 0510 	rsb	r5, r8, #16
 80018fe:	f000 f857 	bl	80019b0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001902:	2d00      	cmp	r5, #0
 8001904:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001906:	f77f af7a 	ble.w	80017fe <_Unwind_VRS_Pop+0x112>
 800190a:	af20      	add	r7, sp, #128	; 0x80
 800190c:	e768      	b.n	80017e0 <_Unwind_VRS_Pop+0xf4>
 800190e:	f023 0310 	bic.w	r3, r3, #16
 8001912:	6033      	str	r3, [r6, #0]
 8001914:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001918:	f000 f89c 	bl	8001a54 <__gnu_Unwind_Save_WMMXC>
 800191c:	e6fe      	b.n	800171c <_Unwind_VRS_Pop+0x30>
 800191e:	f023 0308 	bic.w	r3, r3, #8
 8001922:	6003      	str	r3, [r0, #0]
 8001924:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001928:	f000 f868 	bl	80019fc <__gnu_Unwind_Save_WMMXD>
 800192c:	e725      	b.n	800177a <_Unwind_VRS_Pop+0x8e>
 800192e:	af20      	add	r7, sp, #128	; 0x80
 8001930:	e7bd      	b.n	80018ae <_Unwind_VRS_Pop+0x1c2>
 8001932:	4630      	mov	r0, r6
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	f840 3bd0 	str.w	r3, [r0], #208
 800193c:	f000 f838 	bl	80019b0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001940:	e7d6      	b.n	80018f0 <_Unwind_VRS_Pop+0x204>
 8001942:	a820      	add	r0, sp, #128	; 0x80
 8001944:	f000 f82c 	bl	80019a0 <__gnu_Unwind_Save_VFP_D>
 8001948:	e7d5      	b.n	80018f6 <_Unwind_VRS_Pop+0x20a>
 800194a:	f04f 0900 	mov.w	r9, #0
 800194e:	e7bd      	b.n	80018cc <_Unwind_VRS_Pop+0x1e0>
 8001950:	f1b8 0f0f 	cmp.w	r8, #15
 8001954:	f63f af3f 	bhi.w	80017d6 <_Unwind_VRS_Pop+0xea>
 8001958:	af20      	add	r7, sp, #128	; 0x80
 800195a:	4638      	mov	r0, r7
 800195c:	f000 f820 	bl	80019a0 <__gnu_Unwind_Save_VFP_D>
 8001960:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001962:	2d00      	cmp	r5, #0
 8001964:	f47f af3a 	bne.w	80017dc <_Unwind_VRS_Pop+0xf0>
 8001968:	4638      	mov	r0, r7
 800196a:	f000 f815 	bl	8001998 <__gnu_Unwind_Restore_VFP_D>
 800196e:	e762      	b.n	8001836 <_Unwind_VRS_Pop+0x14a>

08001970 <__restore_core_regs>:
 8001970:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001974:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001978:	469c      	mov	ip, r3
 800197a:	46a6      	mov	lr, r4
 800197c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001980:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001984:	46e5      	mov	sp, ip
 8001986:	bd00      	pop	{pc}

08001988 <__gnu_Unwind_Restore_VFP>:
 8001988:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <__gnu_Unwind_Save_VFP>:
 8001990:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <__gnu_Unwind_Restore_VFP_D>:
 8001998:	ec90 0b20 	vldmia	r0, {d0-d15}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <__gnu_Unwind_Save_VFP_D>:
 80019a0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80019a8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80019b0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <__gnu_Unwind_Restore_WMMXD>:
 80019b8:	ecf0 0102 	ldfe	f0, [r0], #8
 80019bc:	ecf0 1102 	ldfe	f1, [r0], #8
 80019c0:	ecf0 2102 	ldfe	f2, [r0], #8
 80019c4:	ecf0 3102 	ldfe	f3, [r0], #8
 80019c8:	ecf0 4102 	ldfe	f4, [r0], #8
 80019cc:	ecf0 5102 	ldfe	f5, [r0], #8
 80019d0:	ecf0 6102 	ldfe	f6, [r0], #8
 80019d4:	ecf0 7102 	ldfe	f7, [r0], #8
 80019d8:	ecf0 8102 	ldfp	f0, [r0], #8
 80019dc:	ecf0 9102 	ldfp	f1, [r0], #8
 80019e0:	ecf0 a102 	ldfp	f2, [r0], #8
 80019e4:	ecf0 b102 	ldfp	f3, [r0], #8
 80019e8:	ecf0 c102 	ldfp	f4, [r0], #8
 80019ec:	ecf0 d102 	ldfp	f5, [r0], #8
 80019f0:	ecf0 e102 	ldfp	f6, [r0], #8
 80019f4:	ecf0 f102 	ldfp	f7, [r0], #8
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop

080019fc <__gnu_Unwind_Save_WMMXD>:
 80019fc:	ece0 0102 	stfe	f0, [r0], #8
 8001a00:	ece0 1102 	stfe	f1, [r0], #8
 8001a04:	ece0 2102 	stfe	f2, [r0], #8
 8001a08:	ece0 3102 	stfe	f3, [r0], #8
 8001a0c:	ece0 4102 	stfe	f4, [r0], #8
 8001a10:	ece0 5102 	stfe	f5, [r0], #8
 8001a14:	ece0 6102 	stfe	f6, [r0], #8
 8001a18:	ece0 7102 	stfe	f7, [r0], #8
 8001a1c:	ece0 8102 	stfp	f0, [r0], #8
 8001a20:	ece0 9102 	stfp	f1, [r0], #8
 8001a24:	ece0 a102 	stfp	f2, [r0], #8
 8001a28:	ece0 b102 	stfp	f3, [r0], #8
 8001a2c:	ece0 c102 	stfp	f4, [r0], #8
 8001a30:	ece0 d102 	stfp	f5, [r0], #8
 8001a34:	ece0 e102 	stfp	f6, [r0], #8
 8001a38:	ece0 f102 	stfp	f7, [r0], #8
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <__gnu_Unwind_Restore_WMMXC>:
 8001a40:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001a44:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001a48:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001a4c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <__gnu_Unwind_Save_WMMXC>:
 8001a54:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001a58:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001a5c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001a60:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <_Unwind_RaiseException>:
 8001a68:	46ec      	mov	ip, sp
 8001a6a:	b500      	push	{lr}
 8001a6c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001a7c:	a901      	add	r1, sp, #4
 8001a7e:	f7ff fbe1 	bl	8001244 <__gnu_Unwind_RaiseException>
 8001a82:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001a86:	b012      	add	sp, #72	; 0x48
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <_Unwind_Resume>:
 8001a8c:	46ec      	mov	ip, sp
 8001a8e:	b500      	push	{lr}
 8001a90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001a94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001aa0:	a901      	add	r1, sp, #4
 8001aa2:	f7ff fc0b 	bl	80012bc <__gnu_Unwind_Resume>
 8001aa6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001aaa:	b012      	add	sp, #72	; 0x48
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <_Unwind_Resume_or_Rethrow>:
 8001ab0:	46ec      	mov	ip, sp
 8001ab2:	b500      	push	{lr}
 8001ab4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ab8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ac4:	a901      	add	r1, sp, #4
 8001ac6:	f7ff fc1b 	bl	8001300 <__gnu_Unwind_Resume_or_Rethrow>
 8001aca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001ace:	b012      	add	sp, #72	; 0x48
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <_Unwind_ForcedUnwind>:
 8001ad4:	46ec      	mov	ip, sp
 8001ad6:	b500      	push	{lr}
 8001ad8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001adc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001ae8:	ab01      	add	r3, sp, #4
 8001aea:	f7ff fbdf 	bl	80012ac <__gnu_Unwind_ForcedUnwind>
 8001aee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001af2:	b012      	add	sp, #72	; 0x48
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop

08001af8 <_Unwind_Backtrace>:
 8001af8:	46ec      	mov	ip, sp
 8001afa:	b500      	push	{lr}
 8001afc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b00:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b0c:	aa01      	add	r2, sp, #4
 8001b0e:	f7ff fc51 	bl	80013b4 <__gnu_Unwind_Backtrace>
 8001b12:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b16:	b012      	add	sp, #72	; 0x48
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <next_unwind_byte>:
 8001b1c:	7a02      	ldrb	r2, [r0, #8]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b97a      	cbnz	r2, 8001b42 <next_unwind_byte+0x26>
 8001b22:	7a42      	ldrb	r2, [r0, #9]
 8001b24:	b1a2      	cbz	r2, 8001b50 <next_unwind_byte+0x34>
 8001b26:	6841      	ldr	r1, [r0, #4]
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	b410      	push	{r4}
 8001b2c:	7242      	strb	r2, [r0, #9]
 8001b2e:	6808      	ldr	r0, [r1, #0]
 8001b30:	2203      	movs	r2, #3
 8001b32:	1d0c      	adds	r4, r1, #4
 8001b34:	721a      	strb	r2, [r3, #8]
 8001b36:	0202      	lsls	r2, r0, #8
 8001b38:	605c      	str	r4, [r3, #4]
 8001b3a:	0e00      	lsrs	r0, r0, #24
 8001b3c:	bc10      	pop	{r4}
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4770      	bx	lr
 8001b42:	6800      	ldr	r0, [r0, #0]
 8001b44:	3a01      	subs	r2, #1
 8001b46:	721a      	strb	r2, [r3, #8]
 8001b48:	0202      	lsls	r2, r0, #8
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	0e00      	lsrs	r0, r0, #24
 8001b4e:	4770      	bx	lr
 8001b50:	20b0      	movs	r0, #176	; 0xb0
 8001b52:	4770      	bx	lr

08001b54 <_Unwind_GetGR.constprop.0>:
 8001b54:	b500      	push	{lr}
 8001b56:	b085      	sub	sp, #20
 8001b58:	2300      	movs	r3, #0
 8001b5a:	aa03      	add	r2, sp, #12
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	220c      	movs	r2, #12
 8001b62:	f7ff fbdd 	bl	8001320 <_Unwind_VRS_Get>
 8001b66:	9803      	ldr	r0, [sp, #12]
 8001b68:	b005      	add	sp, #20
 8001b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6e:	bf00      	nop

08001b70 <unwind_UCB_from_context>:
 8001b70:	e7f0      	b.n	8001b54 <_Unwind_GetGR.constprop.0>
 8001b72:	bf00      	nop

08001b74 <__gnu_unwind_execute>:
 8001b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b78:	4605      	mov	r5, r0
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	460e      	mov	r6, r1
 8001b7e:	f04f 0800 	mov.w	r8, #0
 8001b82:	4630      	mov	r0, r6
 8001b84:	f7ff ffca 	bl	8001b1c <next_unwind_byte>
 8001b88:	28b0      	cmp	r0, #176	; 0xb0
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	f000 80ba 	beq.w	8001d04 <__gnu_unwind_execute+0x190>
 8001b90:	0607      	lsls	r7, r0, #24
 8001b92:	d520      	bpl.n	8001bd6 <__gnu_unwind_execute+0x62>
 8001b94:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001b98:	2b80      	cmp	r3, #128	; 0x80
 8001b9a:	d04d      	beq.n	8001c38 <__gnu_unwind_execute+0xc4>
 8001b9c:	2b90      	cmp	r3, #144	; 0x90
 8001b9e:	d036      	beq.n	8001c0e <__gnu_unwind_execute+0x9a>
 8001ba0:	2ba0      	cmp	r3, #160	; 0xa0
 8001ba2:	d060      	beq.n	8001c66 <__gnu_unwind_execute+0xf2>
 8001ba4:	2bb0      	cmp	r3, #176	; 0xb0
 8001ba6:	d074      	beq.n	8001c92 <__gnu_unwind_execute+0x11e>
 8001ba8:	2bc0      	cmp	r3, #192	; 0xc0
 8001baa:	f000 808b 	beq.w	8001cc4 <__gnu_unwind_execute+0x150>
 8001bae:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001bb2:	2bd0      	cmp	r3, #208	; 0xd0
 8001bb4:	d10b      	bne.n	8001bce <__gnu_unwind_execute+0x5a>
 8001bb6:	f000 0207 	and.w	r2, r0, #7
 8001bba:	3201      	adds	r2, #1
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fd91 	bl	80016ec <_Unwind_VRS_Pop>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d0d9      	beq.n	8001b82 <__gnu_unwind_execute+0xe>
 8001bce:	2009      	movs	r0, #9
 8001bd0:	b005      	add	sp, #20
 8001bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bd6:	0083      	lsls	r3, r0, #2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	1d1f      	adds	r7, r3, #4
 8001bdc:	f10d 090c 	add.w	r9, sp, #12
 8001be0:	2300      	movs	r3, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	f8cd 9000 	str.w	r9, [sp]
 8001be8:	220d      	movs	r2, #13
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff fb98 	bl	8001320 <_Unwind_VRS_Get>
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	f8cd 9000 	str.w	r9, [sp]
 8001bf6:	0660      	lsls	r0, r4, #25
 8001bf8:	bf4c      	ite	mi
 8001bfa:	1bdf      	submi	r7, r3, r7
 8001bfc:	18ff      	addpl	r7, r7, r3
 8001bfe:	2300      	movs	r3, #0
 8001c00:	220d      	movs	r2, #13
 8001c02:	4619      	mov	r1, r3
 8001c04:	4628      	mov	r0, r5
 8001c06:	9703      	str	r7, [sp, #12]
 8001c08:	f7ff fbb0 	bl	800136c <_Unwind_VRS_Set>
 8001c0c:	e7b9      	b.n	8001b82 <__gnu_unwind_execute+0xe>
 8001c0e:	f000 030d 	and.w	r3, r0, #13
 8001c12:	2b0d      	cmp	r3, #13
 8001c14:	d0db      	beq.n	8001bce <__gnu_unwind_execute+0x5a>
 8001c16:	af03      	add	r7, sp, #12
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f000 020f 	and.w	r2, r0, #15
 8001c1e:	4619      	mov	r1, r3
 8001c20:	9700      	str	r7, [sp, #0]
 8001c22:	4628      	mov	r0, r5
 8001c24:	f7ff fb7c 	bl	8001320 <_Unwind_VRS_Get>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9700      	str	r7, [sp, #0]
 8001c2c:	220d      	movs	r2, #13
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4628      	mov	r0, r5
 8001c32:	f7ff fb9b 	bl	800136c <_Unwind_VRS_Set>
 8001c36:	e7a4      	b.n	8001b82 <__gnu_unwind_execute+0xe>
 8001c38:	4630      	mov	r0, r6
 8001c3a:	f7ff ff6f 	bl	8001b1c <next_unwind_byte>
 8001c3e:	0224      	lsls	r4, r4, #8
 8001c40:	4320      	orrs	r0, r4
 8001c42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001c46:	d0c2      	beq.n	8001bce <__gnu_unwind_execute+0x5a>
 8001c48:	0104      	lsls	r4, r0, #4
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	b2a2      	uxth	r2, r4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4628      	mov	r0, r5
 8001c52:	f7ff fd4b 	bl	80016ec <_Unwind_VRS_Pop>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d1b9      	bne.n	8001bce <__gnu_unwind_execute+0x5a>
 8001c5a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001c5e:	bf18      	it	ne
 8001c60:	f04f 0801 	movne.w	r8, #1
 8001c64:	e78d      	b.n	8001b82 <__gnu_unwind_execute+0xe>
 8001c66:	43c2      	mvns	r2, r0
 8001c68:	f002 0307 	and.w	r3, r2, #7
 8001c6c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c70:	411a      	asrs	r2, r3
 8001c72:	0701      	lsls	r1, r0, #28
 8001c74:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	bf48      	it	mi
 8001c7e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001c82:	4619      	mov	r1, r3
 8001c84:	4628      	mov	r0, r5
 8001c86:	f7ff fd31 	bl	80016ec <_Unwind_VRS_Pop>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	f43f af79 	beq.w	8001b82 <__gnu_unwind_execute+0xe>
 8001c90:	e79d      	b.n	8001bce <__gnu_unwind_execute+0x5a>
 8001c92:	28b1      	cmp	r0, #177	; 0xb1
 8001c94:	d03b      	beq.n	8001d0e <__gnu_unwind_execute+0x19a>
 8001c96:	28b2      	cmp	r0, #178	; 0xb2
 8001c98:	f000 8093 	beq.w	8001dc2 <__gnu_unwind_execute+0x24e>
 8001c9c:	28b3      	cmp	r0, #179	; 0xb3
 8001c9e:	d041      	beq.n	8001d24 <__gnu_unwind_execute+0x1b0>
 8001ca0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ca4:	2bb4      	cmp	r3, #180	; 0xb4
 8001ca6:	d092      	beq.n	8001bce <__gnu_unwind_execute+0x5a>
 8001ca8:	f000 0207 	and.w	r2, r0, #7
 8001cac:	3201      	adds	r2, #1
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f7ff fd18 	bl	80016ec <_Unwind_VRS_Pop>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	f43f af60 	beq.w	8001b82 <__gnu_unwind_execute+0xe>
 8001cc2:	e784      	b.n	8001bce <__gnu_unwind_execute+0x5a>
 8001cc4:	28c6      	cmp	r0, #198	; 0xc6
 8001cc6:	d04a      	beq.n	8001d5e <__gnu_unwind_execute+0x1ea>
 8001cc8:	28c7      	cmp	r0, #199	; 0xc7
 8001cca:	d054      	beq.n	8001d76 <__gnu_unwind_execute+0x202>
 8001ccc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001cd0:	2bc0      	cmp	r3, #192	; 0xc0
 8001cd2:	d063      	beq.n	8001d9c <__gnu_unwind_execute+0x228>
 8001cd4:	28c8      	cmp	r0, #200	; 0xc8
 8001cd6:	d068      	beq.n	8001daa <__gnu_unwind_execute+0x236>
 8001cd8:	28c9      	cmp	r0, #201	; 0xc9
 8001cda:	f47f af78 	bne.w	8001bce <__gnu_unwind_execute+0x5a>
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff ff1c 	bl	8001b1c <next_unwind_byte>
 8001ce4:	0302      	lsls	r2, r0, #12
 8001ce6:	f000 000f 	and.w	r0, r0, #15
 8001cea:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001cee:	3001      	adds	r0, #1
 8001cf0:	4302      	orrs	r2, r0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff fcf8 	bl	80016ec <_Unwind_VRS_Pop>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	f43f af40 	beq.w	8001b82 <__gnu_unwind_execute+0xe>
 8001d02:	e764      	b.n	8001bce <__gnu_unwind_execute+0x5a>
 8001d04:	f1b8 0f00 	cmp.w	r8, #0
 8001d08:	d018      	beq.n	8001d3c <__gnu_unwind_execute+0x1c8>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e760      	b.n	8001bd0 <__gnu_unwind_execute+0x5c>
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f7ff ff04 	bl	8001b1c <next_unwind_byte>
 8001d14:	4602      	mov	r2, r0
 8001d16:	2800      	cmp	r0, #0
 8001d18:	f43f af59 	beq.w	8001bce <__gnu_unwind_execute+0x5a>
 8001d1c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d20:	d0c8      	beq.n	8001cb4 <__gnu_unwind_execute+0x140>
 8001d22:	e754      	b.n	8001bce <__gnu_unwind_execute+0x5a>
 8001d24:	4630      	mov	r0, r6
 8001d26:	f7ff fef9 	bl	8001b1c <next_unwind_byte>
 8001d2a:	0302      	lsls	r2, r0, #12
 8001d2c:	f000 030f 	and.w	r3, r0, #15
 8001d30:	3301      	adds	r3, #1
 8001d32:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d36:	431a      	orrs	r2, r3
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e7bb      	b.n	8001cb4 <__gnu_unwind_execute+0x140>
 8001d3c:	ac03      	add	r4, sp, #12
 8001d3e:	4643      	mov	r3, r8
 8001d40:	220e      	movs	r2, #14
 8001d42:	4641      	mov	r1, r8
 8001d44:	9400      	str	r4, [sp, #0]
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff faea 	bl	8001320 <_Unwind_VRS_Get>
 8001d4c:	9400      	str	r4, [sp, #0]
 8001d4e:	4643      	mov	r3, r8
 8001d50:	220f      	movs	r2, #15
 8001d52:	4641      	mov	r1, r8
 8001d54:	4628      	mov	r0, r5
 8001d56:	f7ff fb09 	bl	800136c <_Unwind_VRS_Set>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	e738      	b.n	8001bd0 <__gnu_unwind_execute+0x5c>
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f7ff fedc 	bl	8001b1c <next_unwind_byte>
 8001d64:	0302      	lsls	r2, r0, #12
 8001d66:	f000 030f 	and.w	r3, r0, #15
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001d70:	431a      	orrs	r2, r3
 8001d72:	2303      	movs	r3, #3
 8001d74:	e79e      	b.n	8001cb4 <__gnu_unwind_execute+0x140>
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff fed0 	bl	8001b1c <next_unwind_byte>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	f43f af25 	beq.w	8001bce <__gnu_unwind_execute+0x5a>
 8001d84:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001d88:	f47f af21 	bne.w	8001bce <__gnu_unwind_execute+0x5a>
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f7ff fcac 	bl	80016ec <_Unwind_VRS_Pop>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	f43f aef4 	beq.w	8001b82 <__gnu_unwind_execute+0xe>
 8001d9a:	e718      	b.n	8001bce <__gnu_unwind_execute+0x5a>
 8001d9c:	f000 020f 	and.w	r2, r0, #15
 8001da0:	3201      	adds	r2, #1
 8001da2:	2303      	movs	r3, #3
 8001da4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001da8:	e784      	b.n	8001cb4 <__gnu_unwind_execute+0x140>
 8001daa:	4630      	mov	r0, r6
 8001dac:	f7ff feb6 	bl	8001b1c <next_unwind_byte>
 8001db0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001db4:	f000 030f 	and.w	r3, r0, #15
 8001db8:	3210      	adds	r2, #16
 8001dba:	3301      	adds	r3, #1
 8001dbc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001dc0:	e797      	b.n	8001cf2 <__gnu_unwind_execute+0x17e>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f10d 090c 	add.w	r9, sp, #12
 8001dc8:	220d      	movs	r2, #13
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f8cd 9000 	str.w	r9, [sp]
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f7ff faa5 	bl	8001320 <_Unwind_VRS_Get>
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fea0 	bl	8001b1c <next_unwind_byte>
 8001ddc:	0602      	lsls	r2, r0, #24
 8001dde:	f04f 0402 	mov.w	r4, #2
 8001de2:	d50c      	bpl.n	8001dfe <__gnu_unwind_execute+0x28a>
 8001de4:	9b03      	ldr	r3, [sp, #12]
 8001de6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001dea:	40a0      	lsls	r0, r4
 8001dec:	4418      	add	r0, r3
 8001dee:	9003      	str	r0, [sp, #12]
 8001df0:	4630      	mov	r0, r6
 8001df2:	f7ff fe93 	bl	8001b1c <next_unwind_byte>
 8001df6:	0603      	lsls	r3, r0, #24
 8001df8:	f104 0407 	add.w	r4, r4, #7
 8001dfc:	d4f2      	bmi.n	8001de4 <__gnu_unwind_execute+0x270>
 8001dfe:	9b03      	ldr	r3, [sp, #12]
 8001e00:	f8cd 9000 	str.w	r9, [sp]
 8001e04:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001e08:	40a2      	lsls	r2, r4
 8001e0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e0e:	441a      	add	r2, r3
 8001e10:	2300      	movs	r3, #0
 8001e12:	9203      	str	r2, [sp, #12]
 8001e14:	4619      	mov	r1, r3
 8001e16:	220d      	movs	r2, #13
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff faa7 	bl	800136c <_Unwind_VRS_Set>
 8001e1e:	e6b0      	b.n	8001b82 <__gnu_unwind_execute+0xe>

08001e20 <__gnu_unwind_frame>:
 8001e20:	b510      	push	{r4, lr}
 8001e22:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001e24:	6853      	ldr	r3, [r2, #4]
 8001e26:	b084      	sub	sp, #16
 8001e28:	f04f 0c03 	mov.w	ip, #3
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	021c      	lsls	r4, r3, #8
 8001e30:	4608      	mov	r0, r1
 8001e32:	0e1b      	lsrs	r3, r3, #24
 8001e34:	a901      	add	r1, sp, #4
 8001e36:	9401      	str	r4, [sp, #4]
 8001e38:	9202      	str	r2, [sp, #8]
 8001e3a:	f88d c00c 	strb.w	ip, [sp, #12]
 8001e3e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001e42:	f7ff fe97 	bl	8001b74 <__gnu_unwind_execute>
 8001e46:	b004      	add	sp, #16
 8001e48:	bd10      	pop	{r4, pc}
 8001e4a:	bf00      	nop

08001e4c <_Unwind_GetRegionStart>:
 8001e4c:	b508      	push	{r3, lr}
 8001e4e:	f7ff fe8f 	bl	8001b70 <unwind_UCB_from_context>
 8001e52:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001e54:	bd08      	pop	{r3, pc}
 8001e56:	bf00      	nop

08001e58 <_Unwind_GetLanguageSpecificData>:
 8001e58:	b508      	push	{r3, lr}
 8001e5a:	f7ff fe89 	bl	8001b70 <unwind_UCB_from_context>
 8001e5e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001e60:	79c3      	ldrb	r3, [r0, #7]
 8001e62:	3302      	adds	r3, #2
 8001e64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop

08001e6c <__aeabi_idiv0>:
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <_Z9decodeGGAPcP9GGASTRUCT>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e74:	b08c      	sub	sp, #48	; 0x30
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ',' (after GGA/RMC)
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b2c      	cmp	r3, #44	; 0x2c
 8001e94:	d005      	beq.n	8001ea2 <_Z9decodeGGAPcP9GGASTRUCT+0x32>
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a61      	ldr	r2, [pc, #388]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e7f1      	b.n	8001e86 <_Z9decodeGGAPcP9GGASTRUCT+0x16>
	inx++;
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001eaa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001eac:	4b5d      	ldr	r3, [pc, #372]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b2c      	cmp	r3, #44	; 0x2c
 8001eba:	d005      	beq.n	8001ec8 <_Z9decodeGGAPcP9GGASTRUCT+0x58>
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a58      	ldr	r2, [pc, #352]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e7f1      	b.n	8001eac <_Z9decodeGGAPcP9GGASTRUCT+0x3c>
	inx++;
 8001ec8:	4b56      	ldr	r3, [pc, #344]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a55      	ldr	r2, [pc, #340]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ed0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b2c      	cmp	r3, #44	; 0x2c
 8001ee0:	d005      	beq.n	8001eee <_Z9decodeGGAPcP9GGASTRUCT+0x7e>
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a4e      	ldr	r2, [pc, #312]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e7f1      	b.n	8001ed2 <_Z9decodeGGAPcP9GGASTRUCT+0x62>
	inx++;
 8001eee:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ef6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ',' (north/south)
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b2c      	cmp	r3, #44	; 0x2c
 8001f06:	d005      	beq.n	8001f14 <_Z9decodeGGAPcP9GGASTRUCT+0xa4>
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a45      	ldr	r2, [pc, #276]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e7f1      	b.n	8001ef8 <_Z9decodeGGAPcP9GGASTRUCT+0x88>
	inx++;
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f1c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f2c:	d005      	beq.n	8001f3a <_Z9decodeGGAPcP9GGASTRUCT+0xca>
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a3b      	ldr	r2, [pc, #236]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e7f1      	b.n	8001f1e <_Z9decodeGGAPcP9GGASTRUCT+0xae>
	inx++;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a38      	ldr	r2, [pc, #224]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ',' (east/west)
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b2c      	cmp	r3, #44	; 0x2c
 8001f52:	d005      	beq.n	8001f60 <_Z9decodeGGAPcP9GGASTRUCT+0xf0>
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a32      	ldr	r2, [pc, #200]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e7f1      	b.n	8001f44 <_Z9decodeGGAPcP9GGASTRUCT+0xd4>
	inx++;  // reached the character to identify the fix
 8001f60:	4b30      	ldr	r3, [pc, #192]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f68:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b31      	cmp	r3, #49	; 0x31
 8001f78:	d00f      	beq.n	8001f9a <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b32      	cmp	r3, #50	; 0x32
 8001f88:	d007      	beq.n	8001f9a <_Z9decodeGGAPcP9GGASTRUCT+0x12a>
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b36      	cmp	r3, #54	; 0x36
 8001f98:	d106      	bne.n	8001fa8 <_Z9decodeGGAPcP9GGASTRUCT+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e004      	b.n	8001fb2 <_Z9decodeGGAPcP9GGASTRUCT+0x142>
	}
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e2c1      	b.n	8002536 <_Z9decodeGGAPcP9GGASTRUCT+0x6c6>
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b2c      	cmp	r3, #44	; 0x2c
 8001fc0:	d005      	beq.n	8001fce <_Z9decodeGGAPcP9GGASTRUCT+0x15e>
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a16      	ldr	r2, [pc, #88]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e7f1      	b.n	8001fb2 <_Z9decodeGGAPcP9GGASTRUCT+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fd6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	220c      	movs	r2, #12
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f008 fdd3 	bl	800ab8c <memset>
	i=0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ff8:	d016      	beq.n	8002028 <_Z9decodeGGAPcP9GGASTRUCT+0x1b8>
	{
		buffer[i] = GGAbuffer[inx];
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	7819      	ldrb	r1, [r3, #0]
 8002006:	f107 020c 	add.w	r2, r7, #12
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	4413      	add	r3, r2
 800200e:	460a      	mov	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
		i++;
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	3301      	adds	r3, #1
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a01      	ldr	r2, [pc, #4]	; (8002024 <_Z9decodeGGAPcP9GGASTRUCT+0x1b4>)
 8002020:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8002022:	e7e2      	b.n	8001fea <_Z9decodeGGAPcP9GGASTRUCT+0x17a>
 8002024:	200001fc 	.word	0x200001fc
	}

//	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
	hr = (atoi(buffer)/10000) - 400/100; // hardcoded
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4618      	mov	r0, r3
 800202e:	f008 fd69 	bl	800ab04 <atoi>
 8002032:	4603      	mov	r3, r0
 8002034:	4aa1      	ldr	r2, [pc, #644]	; (80022bc <_Z9decodeGGAPcP9GGASTRUCT+0x44c>)
 8002036:	fb82 1203 	smull	r1, r2, r2, r3
 800203a:	1312      	asrs	r2, r2, #12
 800203c:	17db      	asrs	r3, r3, #31
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	3b04      	subs	r3, #4
 8002042:	4a9f      	ldr	r2, [pc, #636]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 8002044:	6013      	str	r3, [r2, #0]
//	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
	min = ((atoi(buffer)/100)%100) - 400%100; // hardcoded
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4618      	mov	r0, r3
 800204c:	f008 fd5a 	bl	800ab04 <atoi>
 8002050:	4603      	mov	r3, r0
 8002052:	4a9c      	ldr	r2, [pc, #624]	; (80022c4 <_Z9decodeGGAPcP9GGASTRUCT+0x454>)
 8002054:	fb82 1203 	smull	r1, r2, r2, r3
 8002058:	1152      	asrs	r2, r2, #5
 800205a:	17db      	asrs	r3, r3, #31
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	4b99      	ldr	r3, [pc, #612]	; (80022c4 <_Z9decodeGGAPcP9GGASTRUCT+0x454>)
 8002060:	fb83 1302 	smull	r1, r3, r3, r2
 8002064:	1159      	asrs	r1, r3, #5
 8002066:	17d3      	asrs	r3, r2, #31
 8002068:	1acb      	subs	r3, r1, r3
 800206a:	2164      	movs	r1, #100	; 0x64
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <_Z9decodeGGAPcP9GGASTRUCT+0x458>)
 8002074:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8002076:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <_Z9decodeGGAPcP9GGASTRUCT+0x458>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b3b      	cmp	r3, #59	; 0x3b
 800207c:	dd09      	ble.n	8002092 <_Z9decodeGGAPcP9GGASTRUCT+0x222>
	{
		min = min-60;
 800207e:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <_Z9decodeGGAPcP9GGASTRUCT+0x458>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3b3c      	subs	r3, #60	; 0x3c
 8002084:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <_Z9decodeGGAPcP9GGASTRUCT+0x458>)
 8002086:	6013      	str	r3, [r2, #0]
		hr++;
 8002088:	4b8d      	ldr	r3, [pc, #564]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a8c      	ldr	r2, [pc, #560]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 8002090:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	da09      	bge.n	80020ae <_Z9decodeGGAPcP9GGASTRUCT+0x23e>
	{
		hr=24+hr;
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3318      	adds	r3, #24
 80020a0:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 80020a2:	6013      	str	r3, [r2, #0]
		daychange--;
 80020a4:	4b89      	ldr	r3, [pc, #548]	; (80022cc <_Z9decodeGGAPcP9GGASTRUCT+0x45c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	4a88      	ldr	r2, [pc, #544]	; (80022cc <_Z9decodeGGAPcP9GGASTRUCT+0x45c>)
 80020ac:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80020ae:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b17      	cmp	r3, #23
 80020b4:	dd09      	ble.n	80020ca <_Z9decodeGGAPcP9GGASTRUCT+0x25a>
	{
		hr=hr-24;
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3b18      	subs	r3, #24
 80020bc:	4a80      	ldr	r2, [pc, #512]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 80020be:	6013      	str	r3, [r2, #0]
		daychange++;
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <_Z9decodeGGAPcP9GGASTRUCT+0x45c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a81      	ldr	r2, [pc, #516]	; (80022cc <_Z9decodeGGAPcP9GGASTRUCT+0x45c>)
 80020c8:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <_Z9decodeGGAPcP9GGASTRUCT+0x450>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <_Z9decodeGGAPcP9GGASTRUCT+0x458>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 fd10 	bl	800ab04 <atoi>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b77      	ldr	r3, [pc, #476]	; (80022c4 <_Z9decodeGGAPcP9GGASTRUCT+0x454>)
 80020e8:	fb83 1302 	smull	r1, r3, r3, r2
 80020ec:	1159      	asrs	r1, r3, #5
 80020ee:	17d3      	asrs	r3, r2, #31
 80020f0:	1acb      	subs	r3, r1, r3
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80020fe:	4b74      	ldr	r3, [pc, #464]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002106:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	220c      	movs	r2, #12
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f008 fd3b 	bl	800ab8c <memset>
	i=0;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800211a:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b2c      	cmp	r3, #44	; 0x2c
 8002128:	d014      	beq.n	8002154 <_Z9decodeGGAPcP9GGASTRUCT+0x2e4>
	{
		buffer[i] = GGAbuffer[inx];
 800212a:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	7819      	ldrb	r1, [r3, #0]
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	4413      	add	r3, r2
 800213e:	460a      	mov	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
		i++;
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	3301      	adds	r3, #1
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002150:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8002152:	e7e2      	b.n	800211a <_Z9decodeGGAPcP9GGASTRUCT+0x2aa>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f841 	bl	80001e0 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	2b05      	cmp	r3, #5
 8002162:	d801      	bhi.n	8002168 <_Z9decodeGGAPcP9GGASTRUCT+0x2f8>
 8002164:	2302      	movs	r3, #2
 8002166:	e1e6      	b.n	8002536 <_Z9decodeGGAPcP9GGASTRUCT+0x6c6>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4618      	mov	r0, r3
 800216e:	f008 fcc9 	bl	800ab04 <atoi>
 8002172:	4603      	mov	r3, r0
 8002174:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b2e      	cmp	r3, #46	; 0x2e
 8002186:	d003      	beq.n	8002190 <_Z9decodeGGAPcP9GGASTRUCT+0x320>
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	3301      	adds	r3, #1
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
 800218e:	e7f4      	b.n	800217a <_Z9decodeGGAPcP9GGASTRUCT+0x30a>
	j++;
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	3301      	adds	r3, #1
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f820 	bl	80001e0 <strlen>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	f107 020c 	add.w	r2, r7, #12
 80021ae:	4413      	add	r3, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f008 fca7 	bl	800ab04 <atoi>
 80021b6:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80021b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9b9 	bl	8000534 <__aeabi_i2d>
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <_Z9decodeGGAPcP9GGASTRUCT+0x464>)
 80021c8:	f7fe fb48 	bl	800085c <__aeabi_ddiv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4690      	mov	r8, r2
 80021d2:	4699      	mov	r9, r3
 80021d4:	69f8      	ldr	r0, [r7, #28]
 80021d6:	f7fe f9ad 	bl	8000534 <__aeabi_i2d>
 80021da:	4604      	mov	r4, r0
 80021dc:	460d      	mov	r5, r1
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	3302      	adds	r3, #2
 80021e2:	4619      	mov	r1, r3
 80021e4:	200a      	movs	r0, #10
 80021e6:	f000 fbd7 	bl	8002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80021ea:	ec53 2b10 	vmov	r2, r3, d0
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe fb33 	bl	800085c <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f7fe f84d 	bl	800029c <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fcf5 	bl	8000bf8 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]
	inx++;  
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002220:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800223a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002244:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	220c      	movs	r2, #12
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f008 fc9c 	bl	800ab8c <memset>
	i=0;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b2c      	cmp	r3, #44	; 0x2c
 8002266:	d014      	beq.n	8002292 <_Z9decodeGGAPcP9GGASTRUCT+0x422>
	{
		buffer[i] = GGAbuffer[inx];
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	7819      	ldrb	r1, [r3, #0]
 8002274:	f107 020c 	add.w	r2, r7, #12
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	4413      	add	r3, r2
 800227c:	460a      	mov	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
		i++;
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	3301      	adds	r3, #1
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <_Z9decodeGGAPcP9GGASTRUCT+0x460>)
 800228e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8002290:	e7e2      	b.n	8002258 <_Z9decodeGGAPcP9GGASTRUCT+0x3e8>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4618      	mov	r0, r3
 8002298:	f008 fc34 	bl	800ab04 <atoi>
 800229c:	4603      	mov	r3, r0
 800229e:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80022a4:	f107 020c 	add.w	r2, r7, #12
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b2e      	cmp	r3, #46	; 0x2e
 80022b0:	d012      	beq.n	80022d8 <_Z9decodeGGAPcP9GGASTRUCT+0x468>
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	3301      	adds	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b8:	e7f4      	b.n	80022a4 <_Z9decodeGGAPcP9GGASTRUCT+0x434>
 80022ba:	bf00      	nop
 80022bc:	68db8bad 	.word	0x68db8bad
 80022c0:	20000200 	.word	0x20000200
 80022c4:	51eb851f 	.word	0x51eb851f
 80022c8:	20000204 	.word	0x20000204
 80022cc:	20000214 	.word	0x20000214
 80022d0:	200001fc 	.word	0x200001fc
 80022d4:	40590000 	.word	0x40590000
	j++;
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	3301      	adds	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fd ff7c 	bl	80001e0 <strlen>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	f107 020c 	add.w	r2, r7, #12
 80022f6:	4413      	add	r3, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f008 fc03 	bl	800ab04 <atoi>
 80022fe:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8002300:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f915 	bl	8000534 <__aeabi_i2d>
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <_Z9decodeGGAPcP9GGASTRUCT+0x6d0>)
 8002310:	f7fe faa4 	bl	800085c <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4690      	mov	r8, r2
 800231a:	4699      	mov	r9, r3
 800231c:	69f8      	ldr	r0, [r7, #28]
 800231e:	f7fe f909 	bl	8000534 <__aeabi_i2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	3302      	adds	r3, #2
 800232a:	4619      	mov	r1, r3
 800232c:	200a      	movs	r0, #10
 800232e:	f000 fb33 	bl	8002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002332:	ec53 2b10 	vmov	r2, r3, d0
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe fa8f 	bl	800085c <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f7fd ffa9 	bl	800029c <__adddf3>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f7fe fc51 	bl	8000bf8 <__aeabi_d2f>
 8002356:	4603      	mov	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	609a      	str	r2, [r3, #8]
	inx++;
 8002360:	4b78      	ldr	r3, [pc, #480]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002368:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a70      	ldr	r2, [pc, #448]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002382:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8002384:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800238c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	4a6b      	ldr	r2, [pc, #428]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002396:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a69      	ldr	r2, [pc, #420]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 80023a0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	220c      	movs	r2, #12
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f008 fbee 	bl	800ab8c <memset>
	i=0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80023b4:	4b63      	ldr	r3, [pc, #396]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b2c      	cmp	r3, #44	; 0x2c
 80023c2:	d014      	beq.n	80023ee <_Z9decodeGGAPcP9GGASTRUCT+0x57e>
	{
		buffer[i] = GGAbuffer[inx];
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	7819      	ldrb	r1, [r3, #0]
 80023d0:	f107 020c 	add.w	r2, r7, #12
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	460a      	mov	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
		i++;
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	3301      	adds	r3, #1
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a56      	ldr	r2, [pc, #344]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 80023ea:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80023ec:	e7e2      	b.n	80023b4 <_Z9decodeGGAPcP9GGASTRUCT+0x544>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 fb86 	bl	800ab04 <atoi>
 80023f8:	4602      	mov	r2, r0
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002406:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b2c      	cmp	r3, #44	; 0x2c
 8002416:	d005      	beq.n	8002424 <_Z9decodeGGAPcP9GGASTRUCT+0x5b4>
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	4a49      	ldr	r2, [pc, #292]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e7f1      	b.n	8002408 <_Z9decodeGGAPcP9GGASTRUCT+0x598>


	/*************** Altitude calculation ********************/
	inx++;
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a46      	ldr	r2, [pc, #280]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800242c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	220c      	movs	r2, #12
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f008 fba8 	bl	800ab8c <memset>
	i=0;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b2c      	cmp	r3, #44	; 0x2c
 800244e:	d014      	beq.n	800247a <_Z9decodeGGAPcP9GGASTRUCT+0x60a>
	{
		buffer[i] = GGAbuffer[inx];
 8002450:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	7819      	ldrb	r1, [r3, #0]
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	4413      	add	r3, r2
 8002464:	460a      	mov	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]
		i++;
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	3301      	adds	r3, #1
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	4a33      	ldr	r2, [pc, #204]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002476:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002478:	e7e2      	b.n	8002440 <_Z9decodeGGAPcP9GGASTRUCT+0x5d0>
	}
	num = (atoi(buffer));
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4618      	mov	r0, r3
 8002480:	f008 fb40 	bl	800ab04 <atoi>
 8002484:	4603      	mov	r3, r0
 8002486:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b2e      	cmp	r3, #46	; 0x2e
 8002498:	d003      	beq.n	80024a2 <_Z9decodeGGAPcP9GGASTRUCT+0x632>
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	3301      	adds	r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a0:	e7f4      	b.n	800248c <_Z9decodeGGAPcP9GGASTRUCT+0x61c>
	j++;
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	3301      	adds	r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd fe97 	bl	80001e0 <strlen>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f107 020c 	add.w	r2, r7, #12
 80024c0:	4413      	add	r3, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f008 fb1e 	bl	800ab04 <atoi>
 80024c8:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80024ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f830 	bl	8000534 <__aeabi_i2d>
 80024d4:	4604      	mov	r4, r0
 80024d6:	460d      	mov	r5, r1
 80024d8:	69f8      	ldr	r0, [r7, #28]
 80024da:	f7fe f82b 	bl	8000534 <__aeabi_i2d>
 80024de:	4680      	mov	r8, r0
 80024e0:	4689      	mov	r9, r1
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	200a      	movs	r0, #10
 80024e6:	f000 fa57 	bl	8002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4640      	mov	r0, r8
 80024f0:	4649      	mov	r1, r9
 80024f2:	f7fe f9b3 	bl	800085c <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4620      	mov	r0, r4
 80024fc:	4629      	mov	r1, r5
 80024fe:	f7fd fecd 	bl	800029c <__adddf3>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fb75 	bl	8000bf8 <__aeabi_d2f>
 800250e:	4603      	mov	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	621a      	str	r2, [r3, #32]

	inx++;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a09      	ldr	r2, [pc, #36]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002520:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_Z9decodeGGAPcP9GGASTRUCT+0x6d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8002534:	2300      	movs	r3, #0

}
 8002536:	4618      	mov	r0, r3
 8002538:	3730      	adds	r7, #48	; 0x30
 800253a:	46bd      	mov	sp, r7
 800253c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002540:	40590000 	.word	0x40590000
 8002544:	200001fc 	.word	0x200001fc

08002548 <_Z9decodeRMCPcP9RMCSTRUCT>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8002548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800254c:	b090      	sub	sp, #64	; 0x40
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
	inx = 0;
 8002554:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800255e:	4b9b      	ldr	r3, [pc, #620]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b2c      	cmp	r3, #44	; 0x2c
 800256c:	d005      	beq.n	800257a <_Z9decodeRMCPcP9RMCSTRUCT+0x32>
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a95      	ldr	r2, [pc, #596]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e7f1      	b.n	800255e <_Z9decodeRMCPcP9RMCSTRUCT+0x16>
	inx++;
 800257a:	4b94      	ldr	r3, [pc, #592]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	4a92      	ldr	r2, [pc, #584]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002582:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8002584:	4b91      	ldr	r3, [pc, #580]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b2c      	cmp	r3, #44	; 0x2c
 8002592:	d005      	beq.n	80025a0 <_Z9decodeRMCPcP9RMCSTRUCT+0x58>
 8002594:	4b8d      	ldr	r3, [pc, #564]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a8c      	ldr	r2, [pc, #560]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e7f1      	b.n	8002584 <_Z9decodeRMCPcP9RMCSTRUCT+0x3c>
	inx++;
 80025a0:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	4a89      	ldr	r2, [pc, #548]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025a8:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b41      	cmp	r3, #65	; 0x41
 80025b8:	d10d      	bne.n	80025d6 <_Z9decodeRMCPcP9RMCSTRUCT+0x8e>
	{
		rmc->isValid = 1;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80025c0:	4b82      	ldr	r3, [pc, #520]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a81      	ldr	r2, [pc, #516]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025c8:	6013      	str	r3, [r2, #0]
	inx++;
 80025ca:	4b80      	ldr	r3, [pc, #512]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e004      	b.n	80025e0 <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
		rmc->isValid =0;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
		return 1;
 80025dc:	2301      	movs	r3, #1
 80025de:	e1c7      	b.n	8002970 <_Z9decodeRMCPcP9RMCSTRUCT+0x428>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80025e0:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b2c      	cmp	r3, #44	; 0x2c
 80025ee:	d005      	beq.n	80025fc <_Z9decodeRMCPcP9RMCSTRUCT+0xb4>
 80025f0:	4b76      	ldr	r3, [pc, #472]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e7f1      	b.n	80025e0 <_Z9decodeRMCPcP9RMCSTRUCT+0x98>
	inx++;
 80025fc:	4b73      	ldr	r3, [pc, #460]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a72      	ldr	r2, [pc, #456]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002604:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8002606:	4b71      	ldr	r3, [pc, #452]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b2c      	cmp	r3, #44	; 0x2c
 8002614:	d005      	beq.n	8002622 <_Z9decodeRMCPcP9RMCSTRUCT+0xda>
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a6b      	ldr	r2, [pc, #428]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e7f1      	b.n	8002606 <_Z9decodeRMCPcP9RMCSTRUCT+0xbe>
	inx++;
 8002622:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	4a68      	ldr	r2, [pc, #416]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800262a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800262c:	4b67      	ldr	r3, [pc, #412]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b2c      	cmp	r3, #44	; 0x2c
 800263a:	d005      	beq.n	8002648 <_Z9decodeRMCPcP9RMCSTRUCT+0x100>
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	4a62      	ldr	r2, [pc, #392]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e7f1      	b.n	800262c <_Z9decodeRMCPcP9RMCSTRUCT+0xe4>
	inx++;
 8002648:	4b60      	ldr	r3, [pc, #384]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a5f      	ldr	r2, [pc, #380]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002650:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8002652:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b2c      	cmp	r3, #44	; 0x2c
 8002660:	d005      	beq.n	800266e <_Z9decodeRMCPcP9RMCSTRUCT+0x126>
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e7f1      	b.n	8002652 <_Z9decodeRMCPcP9RMCSTRUCT+0x10a>

	// Get Speed
	inx++;
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	4a55      	ldr	r2, [pc, #340]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002676:	6013      	str	r3, [r2, #0]
	i=0;
 8002678:	2300      	movs	r3, #0
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	220c      	movs	r2, #12
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f008 fa81 	bl	800ab8c <memset>
	while (RMCbuffer[inx] != ',')
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b2c      	cmp	r3, #44	; 0x2c
 8002698:	d014      	beq.n	80026c4 <_Z9decodeRMCPcP9RMCSTRUCT+0x17c>
	{
		buffer[i] = RMCbuffer[inx];
 800269a:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	7819      	ldrb	r1, [r3, #0]
 80026a6:	f107 0208 	add.w	r2, r7, #8
 80026aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ac:	4413      	add	r3, r2
 80026ae:	460a      	mov	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
		i++;
 80026b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b4:	3301      	adds	r3, #1
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	4a43      	ldr	r2, [pc, #268]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80026c0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80026c2:	e7e2      	b.n	800268a <_Z9decodeRMCPcP9RMCSTRUCT+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04f      	beq.n	800276e <_Z9decodeRMCPcP9RMCSTRUCT+0x226>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f008 fa16 	bl	800ab04 <atoi>
 80026d8:	4603      	mov	r3, r0
 80026da:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80026e0:	f107 0208 	add.w	r2, r7, #8
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b2e      	cmp	r3, #46	; 0x2e
 80026ec:	d003      	beq.n	80026f6 <_Z9decodeRMCPcP9RMCSTRUCT+0x1ae>
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	3301      	adds	r3, #1
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f4:	e7f4      	b.n	80026e0 <_Z9decodeRMCPcP9RMCSTRUCT+0x198>
		j++;
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	3301      	adds	r3, #1
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fd6d 	bl	80001e0 <strlen>
 8002706:	4602      	mov	r2, r0
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	4413      	add	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f008 f9f4 	bl	800ab04 <atoi>
 800271c:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800271e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd ff06 	bl	8000534 <__aeabi_i2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272e:	f7fd ff01 	bl	8000534 <__aeabi_i2d>
 8002732:	4680      	mov	r8, r0
 8002734:	4689      	mov	r9, r1
 8002736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002738:	200a      	movs	r0, #10
 800273a:	f000 f92d 	bl	8002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800273e:	ec53 2b10 	vmov	r2, r3, d0
 8002742:	4640      	mov	r0, r8
 8002744:	4649      	mov	r1, r9
 8002746:	f7fe f889 	bl	800085c <__aeabi_ddiv>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4620      	mov	r0, r4
 8002750:	4629      	mov	r1, r5
 8002752:	f7fd fda3 	bl	800029c <__adddf3>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe fa4b 	bl	8000bf8 <__aeabi_d2f>
 8002762:	4603      	mov	r3, r0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	e003      	b.n	8002776 <_Z9decodeRMCPcP9RMCSTRUCT+0x22e>
	}
	else rmc->speed = 0;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 800277e:	6013      	str	r3, [r2, #0]
	i=0;
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	220c      	movs	r2, #12
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f008 f9fd 	bl	800ab8c <memset>
	while (RMCbuffer[inx] != ',')
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b2c      	cmp	r3, #44	; 0x2c
 80027a0:	d016      	beq.n	80027d0 <_Z9decodeRMCPcP9RMCSTRUCT+0x288>
	{
		buffer[i] = RMCbuffer[inx];
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	7819      	ldrb	r1, [r3, #0]
 80027ae:	f107 0208 	add.w	r2, r7, #8
 80027b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
		i++;
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	3301      	adds	r3, #1
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	4a01      	ldr	r2, [pc, #4]	; (80027cc <_Z9decodeRMCPcP9RMCSTRUCT+0x284>)
 80027c8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80027ca:	e7e2      	b.n	8002792 <_Z9decodeRMCPcP9RMCSTRUCT+0x24a>
 80027cc:	200001fc 	.word	0x200001fc
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04f      	beq.n	800287a <_Z9decodeRMCPcP9RMCSTRUCT+0x332>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f008 f990 	bl	800ab04 <atoi>
 80027e4:	4603      	mov	r3, r0
 80027e6:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80027ec:	f107 0208 	add.w	r2, r7, #8
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b2e      	cmp	r3, #46	; 0x2e
 80027f8:	d003      	beq.n	8002802 <_Z9decodeRMCPcP9RMCSTRUCT+0x2ba>
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	3301      	adds	r3, #1
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002800:	e7f4      	b.n	80027ec <_Z9decodeRMCPcP9RMCSTRUCT+0x2a4>
		j++;
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	3301      	adds	r3, #1
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8002808:	f107 0308 	add.w	r3, r7, #8
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fce7 	bl	80001e0 <strlen>
 8002812:	4602      	mov	r2, r0
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281c:	f107 0208 	add.w	r2, r7, #8
 8002820:	4413      	add	r3, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f008 f96e 	bl	800ab04 <atoi>
 8002828:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800282a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe80 	bl	8000534 <__aeabi_i2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f7fd fe7b 	bl	8000534 <__aeabi_i2d>
 800283e:	4680      	mov	r8, r0
 8002840:	4689      	mov	r9, r1
 8002842:	69f9      	ldr	r1, [r7, #28]
 8002844:	200a      	movs	r0, #10
 8002846:	f000 f8a7 	bl	8002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4640      	mov	r0, r8
 8002850:	4649      	mov	r1, r9
 8002852:	f7fe f803 	bl	800085c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fd1d 	bl	800029c <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f9c5 	bl	8000bf8 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	611a      	str	r2, [r3, #16]
 8002878:	e003      	b.n	8002882 <_Z9decodeRMCPcP9RMCSTRUCT+0x33a>
	}
	else
		{
			rmc->course = 0;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8002882:	4b3e      	ldr	r3, [pc, #248]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 800288a:	6013      	str	r3, [r2, #0]
	i=0;
 800288c:	2300      	movs	r3, #0
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	220c      	movs	r2, #12
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f008 f977 	bl	800ab8c <memset>
	while (RMCbuffer[inx] != ',')
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b2c      	cmp	r3, #44	; 0x2c
 80028ac:	d014      	beq.n	80028d8 <_Z9decodeRMCPcP9RMCSTRUCT+0x390>
	{
		buffer[i] = RMCbuffer[inx];
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	7819      	ldrb	r1, [r3, #0]
 80028ba:	f107 0208 	add.w	r2, r7, #8
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	4413      	add	r3, r2
 80028c2:	460a      	mov	r2, r1
 80028c4:	701a      	strb	r2, [r3, #0]
		i++;
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	3301      	adds	r3, #1
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a2a      	ldr	r2, [pc, #168]	; (800297c <_Z9decodeRMCPcP9RMCSTRUCT+0x434>)
 80028d4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80028d6:	e7e2      	b.n	800289e <_Z9decodeRMCPcP9RMCSTRUCT+0x356>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	4618      	mov	r0, r3
 80028de:	f008 f911 	bl	800ab04 <atoi>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4a26      	ldr	r2, [pc, #152]	; (8002980 <_Z9decodeRMCPcP9RMCSTRUCT+0x438>)
 80028e6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ea:	1312      	asrs	r2, r2, #12
 80028ec:	17db      	asrs	r3, r3, #31
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	4a24      	ldr	r2, [pc, #144]	; (8002984 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 80028f2:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	4618      	mov	r0, r3
 80028fa:	f008 f903 	bl	800ab04 <atoi>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a21      	ldr	r2, [pc, #132]	; (8002988 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8002902:	fb82 1203 	smull	r1, r2, r2, r3
 8002906:	1152      	asrs	r2, r2, #5
 8002908:	17db      	asrs	r3, r3, #31
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 800290e:	fb83 1302 	smull	r1, r3, r3, r2
 8002912:	1159      	asrs	r1, r3, #5
 8002914:	17d3      	asrs	r3, r2, #31
 8002916:	1acb      	subs	r3, r1, r3
 8002918:	2164      	movs	r1, #100	; 0x64
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8002922:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	4618      	mov	r0, r3
 800292a:	f008 f8eb 	bl	800ab04 <atoi>
 800292e:	4602      	mov	r2, r0
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_Z9decodeRMCPcP9RMCSTRUCT+0x440>)
 8002932:	fb83 1302 	smull	r1, r3, r3, r2
 8002936:	1159      	asrs	r1, r3, #5
 8002938:	17d3      	asrs	r3, r2, #31
 800293a:	1acb      	subs	r3, r1, r3
 800293c:	2164      	movs	r1, #100	; 0x64
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8002946:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <_Z9decodeRMCPcP9RMCSTRUCT+0x44c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4413      	add	r3, r2
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8002954:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <_Z9decodeRMCPcP9RMCSTRUCT+0x43c>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <_Z9decodeRMCPcP9RMCSTRUCT+0x444>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <_Z9decodeRMCPcP9RMCSTRUCT+0x448>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	609a      	str	r2, [r3, #8]

	return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3740      	adds	r7, #64	; 0x40
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800297a:	bf00      	nop
 800297c:	200001fc 	.word	0x200001fc
 8002980:	68db8bad 	.word	0x68db8bad
 8002984:	20000208 	.word	0x20000208
 8002988:	51eb851f 	.word	0x51eb851f
 800298c:	2000020c 	.word	0x2000020c
 8002990:	20000210 	.word	0x20000210
 8002994:	20000214 	.word	0x20000214

08002998 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd fdc6 	bl	8000534 <__aeabi_i2d>
 80029a8:	4604      	mov	r4, r0
 80029aa:	460d      	mov	r5, r1
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f7fd fdc1 	bl	8000534 <__aeabi_i2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	ec43 2b11 	vmov	d1, r2, r3
 80029ba:	ec45 4b10 	vmov	d0, r4, r5
 80029be:	f005 fb51 	bl	8008064 <pow>
 80029c2:	eeb0 7a40 	vmov.f32	s14, s0
 80029c6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80029ca:	eeb0 0a47 	vmov.f32	s0, s14
 80029ce:	eef0 0a67 	vmov.f32	s1, s15
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}

080029d8 <_Z12Ringbuf_initv>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <_Z12Ringbuf_initv+0x3c>)
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <_Z12Ringbuf_initv+0x40>)
 80029e0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <_Z12Ringbuf_initv+0x44>)
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <_Z12Ringbuf_initv+0x48>)
 80029e6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <_Z12Ringbuf_initv+0x4c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <_Z12Ringbuf_initv+0x4c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <_Z12Ringbuf_initv+0x4c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <_Z12Ringbuf_initv+0x4c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000062c 	.word	0x2000062c
 8002a18:	2000021c 	.word	0x2000021c
 8002a1c:	20000630 	.word	0x20000630
 8002a20:	20000424 	.word	0x20000424
 8002a24:	20000658 	.word	0x20000658

08002a28 <_Z10store_charhP11ring_buffer>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a40:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <_Z10store_charhP11ring_buffer+0x44>
    buffer->buffer[buffer->head] = c;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	79f9      	ldrb	r1, [r7, #7]
 8002a62:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_Z9Uart_readv>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <_Z9Uart_readv+0x2a>
  {
    return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa0:	e013      	b.n	8002aca <_Z9Uart_readv+0x52>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <_Z9Uart_readv+0x60>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	2000062c 	.word	0x2000062c

08002adc <_Z15IsDataAvailablev>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <_Z15IsDataAvailablev+0x30>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <_Z15IsDataAvailablev+0x30>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
  // checking the character that's at [buf_size + head - tail] positions
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	2000062c 	.word	0x2000062c

08002b10 <_Z9Uart_peekv>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <_Z9Uart_peekv+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <_Z9Uart_peekv+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b24:	429a      	cmp	r2, r3
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <_Z9Uart_peekv+0x28>
  {
    return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e006      	b.n	8002b46 <_Z9Uart_peekv+0x36>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <_Z9Uart_peekv+0x40>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <_Z9Uart_peekv+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	2000062c 	.word	0x2000062c

08002b54 <_Z9Copy_uptoPcS_>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
//	int len = strlen(string) ;
//	int len = sizeof (string) ;
	int len = 1; // WORKS!
 8002b62:	2301      	movs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002b6a:	f7ff ffd1 	bl	8002b10 <_Z9Uart_peekv>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4299      	cmp	r1, r3
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d023      	beq.n	8002bce <_Z9Copy_uptoPcS_+0x7a>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <_Z9Copy_uptoPcS_+0x114>)
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <_Z9Copy_uptoPcS_+0x114>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6838      	ldr	r0, [r7, #0]
 8002b96:	4403      	add	r3, r0
 8002b98:	5c8a      	ldrb	r2, [r1, r2]
 8002b9a:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <_Z9Copy_uptoPcS_+0x114>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <_Z9Copy_uptoPcS_+0x114>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002bb8:	f7ff ff90 	bl	8002adc <_Z15IsDataAvailablev>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ce      	beq.n	8002b6a <_Z9Copy_uptoPcS_+0x16>
 8002bcc:	e7f4      	b.n	8002bb8 <_Z9Copy_uptoPcS_+0x64>

		}
	while (Uart_peek() == string [so_far])
 8002bce:	f7ff ff9f 	bl	8002b10 <_Z9Uart_peekv>
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4299      	cmp	r1, r3
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02c      	beq.n	8002c44 <_Z9Copy_uptoPcS_+0xf0>
	{
		so_far++;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002bf0:	f7ff ff42 	bl	8002a78 <_Z9Uart_readv>
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	613a      	str	r2, [r7, #16]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	b2ca      	uxtb	r2, r1
 8002c04:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d101      	bne.n	8002c12 <_Z9Copy_uptoPcS_+0xbe>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e026      	b.n	8002c60 <_Z9Copy_uptoPcS_+0x10c>
		timeout = TIMEOUT_DEF;
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <_Z9Copy_uptoPcS_+0x118>)
 8002c14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c18:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002c1a:	f7ff ff5f 	bl	8002adc <_Z15IsDataAvailablev>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <_Z9Copy_uptoPcS_+0xdc>
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <_Z9Copy_uptoPcS_+0x118>)
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <_Z9Copy_uptoPcS_+0xdc>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <_Z9Copy_uptoPcS_+0xde>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d000      	beq.n	8002c38 <_Z9Copy_uptoPcS_+0xe4>
 8002c36:	e7f0      	b.n	8002c1a <_Z9Copy_uptoPcS_+0xc6>
		if (timeout == 0) return 0;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <_Z9Copy_uptoPcS_+0x118>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1c6      	bne.n	8002bce <_Z9Copy_uptoPcS_+0x7a>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e00d      	b.n	8002c60 <_Z9Copy_uptoPcS_+0x10c>
	}

	if (so_far != len)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d002      	beq.n	8002c52 <_Z9Copy_uptoPcS_+0xfe>
	{
		so_far = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
		goto again;
 8002c50:	e78b      	b.n	8002b6a <_Z9Copy_uptoPcS_+0x16>
	}

	if (so_far == len) return 1;
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d101      	bne.n	8002c5e <_Z9Copy_uptoPcS_+0x10a>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <_Z9Copy_uptoPcS_+0x10c>
	else return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2000062c 	.word	0x2000062c
 8002c6c:	20000218 	.word	0x20000218

08002c70 <_Z8Wait_forPc>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd faaf 	bl	80001e0 <strlen>
 8002c82:	4603      	mov	r3, r0
 8002c84:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002c86:	4b48      	ldr	r3, [pc, #288]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002c88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c8c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002c8e:	f7ff ff25 	bl	8002adc <_Z15IsDataAvailablev>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <_Z8Wait_forPc+0x34>
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <_Z8Wait_forPc+0x34>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <_Z8Wait_forPc+0x36>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d000      	beq.n	8002cac <_Z8Wait_forPc+0x3c>
 8002caa:	e7f0      	b.n	8002c8e <_Z8Wait_forPc+0x1e>
	if (timeout == 0) return 0;
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <_Z8Wait_forPc+0x48>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e073      	b.n	8002da0 <_Z8Wait_forPc+0x130>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002cb8:	f7ff ff2a 	bl	8002b10 <_Z9Uart_peekv>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4299      	cmp	r1, r3
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <_Z8Wait_forPc+0x9e>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cdc:	4b33      	ldr	r3, [pc, #204]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <_Z8Wait_forPc+0x9a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d08:	e7d6      	b.n	8002cb8 <_Z8Wait_forPc+0x48>
		}

		else
		{
			return 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e048      	b.n	8002da0 <_Z8Wait_forPc+0x130>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002d0e:	f7ff feff 	bl	8002b10 <_Z9Uart_peekv>
 8002d12:	4601      	mov	r1, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4299      	cmp	r1, r3
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02c      	beq.n	8002d84 <_Z8Wait_forPc+0x114>
	{
		// now we will peek for the other letters too
		so_far++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <_Z8Wait_forPc+0x13c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d101      	bne.n	8002d52 <_Z8Wait_forPc+0xe2>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e026      	b.n	8002da0 <_Z8Wait_forPc+0x130>
		timeout = TIMEOUT_DEF;
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002d54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d58:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002d5a:	f7ff febf 	bl	8002adc <_Z15IsDataAvailablev>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <_Z8Wait_forPc+0x100>
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <_Z8Wait_forPc+0x100>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <_Z8Wait_forPc+0x102>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d000      	beq.n	8002d78 <_Z8Wait_forPc+0x108>
 8002d76:	e7f0      	b.n	8002d5a <_Z8Wait_forPc+0xea>
		if (timeout == 0) return 0;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <_Z8Wait_forPc+0x138>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1c6      	bne.n	8002d0e <_Z8Wait_forPc+0x9e>
 8002d80:	2300      	movs	r3, #0
 8002d82:	e00d      	b.n	8002da0 <_Z8Wait_forPc+0x130>
	}

	if (so_far != len)
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d002      	beq.n	8002d92 <_Z8Wait_forPc+0x122>
	{
		so_far = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
		goto again;
 8002d90:	e779      	b.n	8002c86 <_Z8Wait_forPc+0x16>
	}

	if (so_far == len) return 1;
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d101      	bne.n	8002d9e <_Z8Wait_forPc+0x12e>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <_Z8Wait_forPc+0x130>
	else return 0;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000218 	.word	0x20000218
 8002dac:	2000062c 	.word	0x2000062c

08002db0 <_Z8Uart_isrP20__UART_HandleTypeDef>:


/* corrected version from May 6, 2023 */
void Uart_isr (UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    /* if DR is not empty and the Rx Int is enabled */
    if ((((&huart1)->Instance->ISR & USART_ISR_RXNE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <_Z8Uart_isrP20__UART_HandleTypeDef+0x28>
 8002dc6:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <_Z8Uart_isrP20__UART_HandleTypeDef+0x28>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <_Z8Uart_isrP20__UART_HandleTypeDef+0x2a>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00f      	beq.n	8002dfe <_Z8Uart_isrP20__UART_HandleTypeDef+0x4e>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	75fb      	strb	r3, [r7, #23]
        store_char (c, _rx_buffer);  // store data in buffer
 8002dee:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe4>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe16 	bl	8002a28 <_Z10store_charhP11ring_buffer>
        return;
 8002dfc:	e045      	b.n	8002e8a <_Z8Uart_isrP20__UART_HandleTypeDef+0xda>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((((&huart1)->Instance->ISR & USART_ISR_TXE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_TXEIE) != RESET))
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <_Z8Uart_isrP20__UART_HandleTypeDef+0x6e>
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <_Z8Uart_isrP20__UART_HandleTypeDef+0x6e>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <_Z8Uart_isrP20__UART_HandleTypeDef+0x70>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d032      	beq.n	8002e8a <_Z8Uart_isrP20__UART_HandleTypeDef+0xda>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e30:	429a      	cmp	r2, r3
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <_Z8Uart_isrP20__UART_HandleTypeDef+0xa0>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4c:	601a      	str	r2, [r3, #0]
    	      /* try explicitly calling huart2 */
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
    	      (&huart1)->Instance->TDR = c; // transmit data register

    	    }
    	return;
 8002e4e:	e01b      	b.n	8002e88 <_Z8Uart_isrP20__UART_HandleTypeDef+0xd8>
    		  volatile unsigned int tail_test = tx_buffer.tail;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e56:	613b      	str	r3, [r7, #16]
    		  volatile uint16_t c = tx_buffer.buffer[tx_buffer.tail]; // prevent optimized away
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	81fb      	strh	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE; // increment tail value of tx_buffer
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe8>)
 8002e74:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
    	      (&huart1)->Instance->TDR = c; // transmit data register
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <_Z8Uart_isrP20__UART_HandleTypeDef+0xe0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	89fa      	ldrh	r2, [r7, #14]
 8002e84:	b292      	uxth	r2, r2
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 8002e88:	bf00      	nop
    }
}
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000658 	.word	0x20000658
 8002e94:	2000062c 	.word	0x2000062c
 8002e98:	20000424 	.word	0x20000424
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <get_dynamical_diff_sh1>:
    };
 					

/* Stephenson and Houlden  for years prior to 948 A.D.*/
static double get_dynamical_diff_sh1 (double JD)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	ed87 0b00 	vstr	d0, [r7]
    double TD,E;
    
    /* number of centuries from 948 */
    E = (JD - 2067314.5) / 36525.0;
 8002eaa:	a326      	add	r3, pc, #152	; (adr r3, 8002f44 <get_dynamical_diff_sh1+0xa4>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eb4:	f7fd f9f0 	bl	8000298 <__aeabi_dsub>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	a322      	add	r3, pc, #136	; (adr r3, 8002f4c <get_dynamical_diff_sh1+0xac>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fcc9 	bl	800085c <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 1830.0 - 405.0 * E + 46.5 * E * E;
 8002ed2:	a320      	add	r3, pc, #128	; (adr r3, 8002f54 <get_dynamical_diff_sh1+0xb4>)
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002edc:	f7fd fb94 	bl	8000608 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	a11d      	add	r1, pc, #116	; (adr r1, 8002f5c <get_dynamical_diff_sh1+0xbc>)
 8002ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eea:	f7fd f9d5 	bl	8000298 <__aeabi_dsub>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <get_dynamical_diff_sh1+0xa0>)
 8002efc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f00:	f7fd fb82 	bl	8000608 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f10:	f7fd fb7a 	bl	8000608 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	f7fd f9be 	bl	800029c <__adddf3>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (TD);
 8002f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f30:	eeb0 0a47 	vmov.f32	s0, s14
 8002f34:	eef0 0a67 	vmov.f32	s1, s15
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40474000 	.word	0x40474000
 8002f44:	80000000 	.word	0x80000000
 8002f48:	413f8b72 	.word	0x413f8b72
 8002f4c:	00000000 	.word	0x00000000
 8002f50:	40e1d5a0 	.word	0x40e1d5a0
 8002f54:	00000000 	.word	0x00000000
 8002f58:	40795000 	.word	0x40795000
 8002f5c:	00000000 	.word	0x00000000
 8002f60:	409c9800 	.word	0x409c9800
 8002f64:	00000000 	.word	0x00000000

08002f68 <get_dynamical_diff_sh2>:

/* Stephenson and Houlden for years between 948 A.D. and 1600 A.D.*/
static double get_dynamical_diff_sh2 (double JD)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	ed87 0b00 	vstr	d0, [r7]
    double TD,t;
    
    /* number of centuries from 1850 */
    t = (JD - 2396758.5) / 36525.0;
 8002f72:	a31a      	add	r3, pc, #104	; (adr r3, 8002fdc <get_dynamical_diff_sh2+0x74>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7c:	f7fd f98c 	bl	8000298 <__aeabi_dsub>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	a316      	add	r3, pc, #88	; (adr r3, 8002fe4 <get_dynamical_diff_sh2+0x7c>)
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f7fd fc65 	bl	800085c <__aeabi_ddiv>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 22.5 * t * t;
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <get_dynamical_diff_sh2+0x70>)
 8002fa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fa4:	f7fd fb30 	bl	8000608 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fb0:	f7fd fb2a 	bl	8000608 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return TD;
 8002fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fc0:	ec43 2b17 	vmov	d7, r2, r3
}
 8002fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fc8:	eef0 0a67 	vmov.f32	s1, s15
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	40368000 	.word	0x40368000
 8002fdc:	40000000 	.word	0x40000000
 8002fe0:	4142492b 	.word	0x4142492b
 8002fe4:	00000000 	.word	0x00000000
 8002fe8:	40e1d5a0 	.word	0x40e1d5a0
 8002fec:	00000000 	.word	0x00000000

08002ff0 <get_dynamical_diff_table>:

/* Table 9.a pg 72 for years 1600..1992.*/
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_table (double JD)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b08e      	sub	sp, #56	; 0x38
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a,b,c,n;
    int i;
    
    /* get no days since 1620 and divide by 2 years */
    i = (int)((JD - 2312752.5) / 730.5);
 8003008:	a35d      	add	r3, pc, #372	; (adr r3, 8003180 <get_dynamical_diff_table+0x190>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003012:	f7fd f941 	bl	8000298 <__aeabi_dsub>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	a356      	add	r3, pc, #344	; (adr r3, 8003178 <get_dynamical_diff_table+0x188>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fc1a 	bl	800085c <__aeabi_ddiv>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f7fd fd9a 	bl	8000b68 <__aeabi_d2iz>
 8003034:	4603      	mov	r3, r0
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* get the base interpolation factor in the table */
    if (i > (TERMS - 2))
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	2bbe      	cmp	r3, #190	; 0xbe
 800303c:	dd01      	ble.n	8003042 <get_dynamical_diff_table+0x52>
        i = TERMS - 2;
 800303e:	23be      	movs	r3, #190	; 0xbe
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* calc a,b,c,n */
	a = delta_t[i+1] - delta_t[i];
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	3301      	adds	r3, #1
 8003046:	4a50      	ldr	r2, [pc, #320]	; (8003188 <get_dynamical_diff_table+0x198>)
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <get_dynamical_diff_table+0x198>)
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd f91c 	bl	8000298 <__aeabi_dsub>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = delta_t[i+2] - delta_t[i+1];
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	3302      	adds	r3, #2
 800306c:	4a46      	ldr	r2, [pc, #280]	; (8003188 <get_dynamical_diff_table+0x198>)
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	3301      	adds	r3, #1
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <get_dynamical_diff_table+0x198>)
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd f908 	bl	8000298 <__aeabi_dsub>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	c = a - b;
 8003090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003094:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003098:	f7fd f8fe 	bl	8000298 <__aeabi_dsub>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	n = ((JD - (2312752.5 + (730.5 * i))) / 730.5);
 80030a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030a6:	f7fd fa45 	bl	8000534 <__aeabi_i2d>
 80030aa:	a333      	add	r3, pc, #204	; (adr r3, 8003178 <get_dynamical_diff_table+0x188>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd faaa 	bl	8000608 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	a330      	add	r3, pc, #192	; (adr r3, 8003180 <get_dynamical_diff_table+0x190>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd f8eb 	bl	800029c <__adddf3>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030ce:	f7fd f8e3 	bl	8000298 <__aeabi_dsub>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	a327      	add	r3, pc, #156	; (adr r3, 8003178 <get_dynamical_diff_table+0x188>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f7fd fbbc 	bl	800085c <__aeabi_ddiv>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	TD = delta_t[i+1] + n / 2 * (a + b + n * c);
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <get_dynamical_diff_table+0x198>)
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003106:	f7fd fba9 	bl	800085c <__aeabi_ddiv>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4690      	mov	r8, r2
 8003110:	4699      	mov	r9, r3
 8003112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003116:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800311a:	f7fd f8bf 	bl	800029c <__adddf3>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4692      	mov	sl, r2
 8003124:	469b      	mov	fp, r3
 8003126:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800312a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800312e:	f7fd fa6b 	bl	8000608 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4650      	mov	r0, sl
 8003138:	4659      	mov	r1, fp
 800313a:	f7fd f8af 	bl	800029c <__adddf3>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4640      	mov	r0, r8
 8003144:	4649      	mov	r1, r9
 8003146:	f7fd fa5f 	bl	8000608 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4620      	mov	r0, r4
 8003150:	4629      	mov	r1, r5
 8003152:	f7fd f8a3 	bl	800029c <__adddf3>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    return TD;
 800315e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003162:	ec43 2b17 	vmov	d7, r2, r3
}
 8003166:	eeb0 0a47 	vmov.f32	s0, s14
 800316a:	eef0 0a67 	vmov.f32	s1, s15
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	00000000 	.word	0x00000000
 800317c:	4086d400 	.word	0x4086d400
 8003180:	40000000 	.word	0x40000000
 8003184:	4141a518 	.word	0x4141a518
 8003188:	0800d728 	.word	0x0800d728
 800318c:	00000000 	.word	0x00000000

08003190 <get_dynamical_diff_near>:

/* get the dynamical time diff in the near past / future 1992 .. 2010 */
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_near (double JD)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b092      	sub	sp, #72	; 0x48
 8003196:	af00      	add	r7, sp, #0
 8003198:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    /* TD for 1990, 2000, 2010 */
    double delta_T[3] = {56.86, 63.83, 70.0};
 80031a8:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <get_dynamical_diff_near+0x120>)
 80031aa:	f107 0408 	add.w	r4, r7, #8
 80031ae:	461d      	mov	r5, r3
 80031b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b8:	e884 0003 	stmia.w	r4, {r0, r1}
    double a,b,c,n;
         
    /* calculate TD by interpolating value */
    a = delta_T[1] - delta_T[0];
 80031bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c4:	f7fd f868 	bl	8000298 <__aeabi_dsub>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    b = delta_T[2] - delta_T[1];
 80031d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031d8:	f7fd f85e 	bl	8000298 <__aeabi_dsub>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    c = b - a;
 80031e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031ec:	f7fd f854 	bl	8000298 <__aeabi_dsub>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    
    /* get number of days since 2000 and divide by 10 years */
	n = (JD - 2451544.5) / 3652.5; 
 80031f8:	a329      	add	r3, pc, #164	; (adr r3, 80032a0 <get_dynamical_diff_near+0x110>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003202:	f7fd f849 	bl	8000298 <__aeabi_dsub>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	a326      	add	r3, pc, #152	; (adr r3, 80032a8 <get_dynamical_diff_near+0x118>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd fb22 	bl	800085c <__aeabi_ddiv>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	TD = delta_T[1] + (n / 2) * (a + b + n * c);
 8003220:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003230:	f7fd fb14 	bl	800085c <__aeabi_ddiv>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4690      	mov	r8, r2
 800323a:	4699      	mov	r9, r3
 800323c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003240:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003244:	f7fd f82a 	bl	800029c <__adddf3>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4692      	mov	sl, r2
 800324e:	469b      	mov	fp, r3
 8003250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003254:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003258:	f7fd f9d6 	bl	8000608 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4650      	mov	r0, sl
 8003262:	4659      	mov	r1, fp
 8003264:	f7fd f81a 	bl	800029c <__adddf3>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4640      	mov	r0, r8
 800326e:	4649      	mov	r1, r9
 8003270:	f7fd f9ca 	bl	8000608 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4620      	mov	r0, r4
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd f80e 	bl	800029c <__adddf3>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	     
    return TD;
 8003288:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800328c:	ec43 2b17 	vmov	d7, r2, r3
} 
 8003290:	eeb0 0a47 	vmov.f32	s0, s14
 8003294:	eef0 0a67 	vmov.f32	s1, s15
 8003298:	3748      	adds	r7, #72	; 0x48
 800329a:	46bd      	mov	sp, r7
 800329c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a0:	40000000 	.word	0x40000000
 80032a4:	4142b42c 	.word	0x4142b42c
 80032a8:	00000000 	.word	0x00000000
 80032ac:	40ac8900 	.word	0x40ac8900
 80032b0:	0800d6d0 	.word	0x0800d6d0
 80032b4:	00000000 	.word	0x00000000

080032b8 <get_dynamical_diff_other>:

/* uses equation 9.1 pg 73 to calc JDE for othe JD values */          
static double get_dynamical_diff_other (double JD)
{     
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	ed87 0b00 	vstr	d0, [r7]
    double TD;
    double a;
    
    a = (JD - 2382148);
 80032c2:	a31c      	add	r3, pc, #112	; (adr r3, 8003334 <get_dynamical_diff_other+0x7c>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032cc:	f7fc ffe4 	bl	8000298 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    a *= a;
 80032d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032e0:	f7fd f992 	bl	8000608 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TD = -15 + a / 41048480;
 80032ec:	a313      	add	r3, pc, #76	; (adr r3, 800333c <get_dynamical_diff_other+0x84>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032f6:	f7fd fab1 	bl	800085c <__aeabi_ddiv>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <get_dynamical_diff_other+0x78>)
 8003308:	f7fc ffc6 	bl	8000298 <__aeabi_dsub>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	e9c7 2302 	strd	r2, r3, [r7, #8]
       
    return (TD);
 8003314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003318:	ec43 2b17 	vmov	d7, r2, r3
}  
 800331c:	eeb0 0a47 	vmov.f32	s0, s14
 8003320:	eef0 0a67 	vmov.f32	s1, s15
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	402e0000 	.word	0x402e0000
 8003334:	00000000 	.word	0x00000000
 8003338:	41422ca2 	.word	0x41422ca2
 800333c:	00000000 	.word	0x00000000
 8003340:	418392cd 	.word	0x418392cd
 8003344:	00000000 	.word	0x00000000

08003348 <ln_get_dynamical_time_diff>:
* universal time.
*/
/* Equation 9.1 on pg 73.
*/
double ln_get_dynamical_time_diff (double JD)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	ed87 0b00 	vstr	d0, [r7]
    double TD;

    /* check when JD is, and use corresponding formula */
    /* check for date < 948 A.D. */
    if ( JD < 2067314.5 )
 8003352:	a339      	add	r3, pc, #228	; (adr r3, 8003438 <ln_get_dynamical_time_diff+0xf0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335c:	f7fd fbc6 	bl	8000aec <__aeabi_dcmplt>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <ln_get_dynamical_time_diff+0x2c>
        /* Stephenson and Houlden */
	    TD = get_dynamical_diff_sh1 (JD);
 8003366:	ed97 0b00 	vldr	d0, [r7]
 800336a:	f7ff fd99 	bl	8002ea0 <get_dynamical_diff_sh1>
 800336e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003372:	e056      	b.n	8003422 <ln_get_dynamical_time_diff+0xda>
    else if ( JD >= 2067314.5 && JD < 2305447.5 )
 8003374:	a330      	add	r3, pc, #192	; (adr r3, 8003438 <ln_get_dynamical_time_diff+0xf0>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800337e:	f7fd fbc9 	bl	8000b14 <__aeabi_dcmpge>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <ln_get_dynamical_time_diff+0x62>
 8003388:	a32d      	add	r3, pc, #180	; (adr r3, 8003440 <ln_get_dynamical_time_diff+0xf8>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003392:	f7fd fbab 	bl	8000aec <__aeabi_dcmplt>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <ln_get_dynamical_time_diff+0x62>
	    /* check for date 948..1600 A.D. Stephenson and Houlden */
    	TD = get_dynamical_diff_sh2 (JD);
 800339c:	ed97 0b00 	vldr	d0, [r7]
 80033a0:	f7ff fde2 	bl	8002f68 <get_dynamical_diff_sh2>
 80033a4:	ed87 0b02 	vstr	d0, [r7, #8]
 80033a8:	e03b      	b.n	8003422 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2312752.5 && JD < 2448622.5 )
 80033aa:	a327      	add	r3, pc, #156	; (adr r3, 8003448 <ln_get_dynamical_time_diff+0x100>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033b4:	f7fd fbae 	bl	8000b14 <__aeabi_dcmpge>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <ln_get_dynamical_time_diff+0x98>
 80033be:	a324      	add	r3, pc, #144	; (adr r3, 8003450 <ln_get_dynamical_time_diff+0x108>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c8:	f7fd fb90 	bl	8000aec <__aeabi_dcmplt>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <ln_get_dynamical_time_diff+0x98>
		/* check for value in table 1620..1992  interpolation of table */
		TD = get_dynamical_diff_table (JD);
 80033d2:	ed97 0b00 	vldr	d0, [r7]
 80033d6:	f7ff fe0b 	bl	8002ff0 <get_dynamical_diff_table>
 80033da:	ed87 0b02 	vstr	d0, [r7, #8]
 80033de:	e020      	b.n	8003422 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2448622.5 && JD <= 2455197.5 )
 80033e0:	a31b      	add	r3, pc, #108	; (adr r3, 8003450 <ln_get_dynamical_time_diff+0x108>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ea:	f7fd fb93 	bl	8000b14 <__aeabi_dcmpge>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <ln_get_dynamical_time_diff+0xce>
 80033f4:	a318      	add	r3, pc, #96	; (adr r3, 8003458 <ln_get_dynamical_time_diff+0x110>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033fe:	f7fd fb7f 	bl	8000b00 <__aeabi_dcmple>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <ln_get_dynamical_time_diff+0xce>
		/* check for near future 1992..2010 interpolation */
		TD = get_dynamical_diff_near (JD);       
 8003408:	ed97 0b00 	vldr	d0, [r7]
 800340c:	f7ff fec0 	bl	8003190 <get_dynamical_diff_near>
 8003410:	ed87 0b02 	vstr	d0, [r7, #8]
 8003414:	e005      	b.n	8003422 <ln_get_dynamical_time_diff+0xda>
	else
	    /* other time period outside */
	    TD = get_dynamical_diff_other (JD);   	    
 8003416:	ed97 0b00 	vldr	d0, [r7]
 800341a:	f7ff ff4d 	bl	80032b8 <get_dynamical_diff_other>
 800341e:	ed87 0b02 	vstr	d0, [r7, #8]
		    
	return TD;
 8003422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003426:	ec43 2b17 	vmov	d7, r2, r3
}
 800342a:	eeb0 0a47 	vmov.f32	s0, s14
 800342e:	eef0 0a67 	vmov.f32	s1, s15
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	80000000 	.word	0x80000000
 800343c:	413f8b72 	.word	0x413f8b72
 8003440:	c0000000 	.word	0xc0000000
 8003444:	414196d3 	.word	0x414196d3
 8003448:	40000000 	.word	0x40000000
 800344c:	4141a518 	.word	0x4141a518
 8003450:	40000000 	.word	0x40000000
 8003454:	4142ae77 	.word	0x4142ae77
 8003458:	c0000000 	.word	0xc0000000
 800345c:	4142bb4e 	.word	0x4142bb4e

08003460 <ln_get_jde>:
*     
* Calculates the Julian Ephemeris Day (JDE) from the given julian day
*/     
    
double ln_get_jde (double JD)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	ed87 0b00 	vstr	d0, [r7]
    double JDE;
    double secs_in_day = 24 * 60 * 60;
 800346a:	a313      	add	r3, pc, #76	; (adr r3, 80034b8 <ln_get_jde+0x58>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    JDE = JD +  ln_get_dynamical_time_diff (JD) / secs_in_day;
 8003474:	ed97 0b00 	vldr	d0, [r7]
 8003478:	f7ff ff66 	bl	8003348 <ln_get_dynamical_time_diff>
 800347c:	ec51 0b10 	vmov	r0, r1, d0
 8003480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003484:	f7fd f9ea 	bl	800085c <__aeabi_ddiv>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003490:	f7fc ff04 	bl	800029c <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return JDE;
 800349c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80034a4:	eeb0 0a47 	vmov.f32	s0, s14
 80034a8:	eef0 0a67 	vmov.f32	s1, s15
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	f3af 8000 	nop.w
 80034b8:	00000000 	.word	0x00000000
 80034bc:	40f51800 	.word	0x40f51800

080034c0 <ln_get_julian_day>:
* Valid for positive and negative years but not for negative JD.
*/
/* Formula 7.1 on pg 61 
*/
double ln_get_julian_day (struct ln_date * date)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b090      	sub	sp, #64	; 0x40
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    double days;
    int a,b;
    struct ln_date local_date;
		
	/* create local copy */
    memcpy (&local_date, date, sizeof (struct ln_date));
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	2220      	movs	r2, #32
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f007 fb4d 	bl	800ab70 <memcpy>
		
    /* check for month = January or February */
    if (local_date.months < 3 ) {
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	dc05      	bgt.n	80034e8 <ln_get_julian_day+0x28>
        local_date.years--;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
	    local_date.months += 12;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	330c      	adds	r3, #12
 80034e6:	60fb      	str	r3, [r7, #12]
	}
	
	a = local_date.years / 100;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a63      	ldr	r2, [pc, #396]	; (8003678 <ln_get_julian_day+0x1b8>)
 80034ec:	fb82 1203 	smull	r1, r2, r2, r3
 80034f0:	1152      	asrs	r2, r2, #5
 80034f2:	17db      	asrs	r3, r3, #31
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
	
	/* check for Julian or Gregorian calendar (starts Oct 4th 1582) */
	if (local_date.years > 1582 || 
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f240 622e 	movw	r2, #1582	; 0x62e
 80034fe:	4293      	cmp	r3, r2
 8003500:	dc0d      	bgt.n	800351e <ln_get_julian_day+0x5e>
		(local_date.years == 1582 && 
 8003502:	68bb      	ldr	r3, [r7, #8]
	if (local_date.years > 1582 || 
 8003504:	f240 622e 	movw	r2, #1582	; 0x62e
 8003508:	4293      	cmp	r3, r2
 800350a:	d113      	bne.n	8003534 <ln_get_julian_day+0x74>
		(local_date.months > 10 || 
 800350c:	68fb      	ldr	r3, [r7, #12]
		(local_date.years == 1582 && 
 800350e:	2b0a      	cmp	r3, #10
 8003510:	dc05      	bgt.n	800351e <ln_get_julian_day+0x5e>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8003512:	68fb      	ldr	r3, [r7, #12]
		(local_date.months > 10 || 
 8003514:	2b0a      	cmp	r3, #10
 8003516:	d10d      	bne.n	8003534 <ln_get_julian_day+0x74>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b03      	cmp	r3, #3
 800351c:	dd0a      	ble.n	8003534 <ln_get_julian_day+0x74>
	    /* Gregorian calendar */    
	    b = 2 - a + (a / 4);
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	f1c3 0202 	rsb	r2, r3, #2
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	da00      	bge.n	800352c <ln_get_julian_day+0x6c>
 800352a:	3303      	adds	r3, #3
 800352c:	109b      	asrs	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003532:	e001      	b.n	8003538 <ln_get_julian_day+0x78>
	} else {
	    /* Julian calendar */
	    b = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	
	/* add a fraction of hours, minutes and secs to days*/
	days = local_date.days + (double)(local_date.hours / 24.0) + (double)(local_date.minutes / 1440.0) + (double)(local_date.seconds /  86400.0);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fc fffa 	bl	8000534 <__aeabi_i2d>
 8003540:	4604      	mov	r4, r0
 8003542:	460d      	mov	r5, r1
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc fff4 	bl	8000534 <__aeabi_i2d>
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4b4a      	ldr	r3, [pc, #296]	; (800367c <ln_get_julian_day+0x1bc>)
 8003552:	f7fd f983 	bl	800085c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fc fe9d 	bl	800029c <__adddf3>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	461d      	mov	r5, r3
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ffe1 	bl	8000534 <__aeabi_i2d>
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <ln_get_julian_day+0x1c0>)
 8003578:	f7fd f970 	bl	800085c <__aeabi_ddiv>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fc fe8a 	bl	800029c <__adddf3>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003594:	a330      	add	r3, pc, #192	; (adr r3, 8003658 <ln_get_julian_day+0x198>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f7fd f95f 	bl	800085c <__aeabi_ddiv>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fc fe79 	bl	800029c <__adddf3>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* now get the JD */
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80035b8:	330c      	adds	r3, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffba 	bl	8000534 <__aeabi_i2d>
 80035c0:	a327      	add	r3, pc, #156	; (adr r3, 8003660 <ln_get_julian_day+0x1a0>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd f81f 	bl	8000608 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7fd fac9 	bl	8000b68 <__aeabi_d2iz>
 80035d6:	4604      	mov	r4, r0
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa9 	bl	8000534 <__aeabi_i2d>
 80035e2:	a321      	add	r3, pc, #132	; (adr r3, 8003668 <ln_get_julian_day+0x1a8>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f80e 	bl	8000608 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f7fd fab8 	bl	8000b68 <__aeabi_d2iz>
 80035f8:	4603      	mov	r3, r0
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 80035fa:	4423      	add	r3, r4
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ff99 	bl	8000534 <__aeabi_i2d>
 8003602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003606:	f7fc fe49 	bl	800029c <__adddf3>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003614:	f7fc ff8e 	bl	8000534 <__aeabi_i2d>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fe3c 	bl	800029c <__adddf3>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 800362c:	a310      	add	r3, pc, #64	; (adr r3, 8003670 <ln_get_julian_day+0x1b0>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fc fe31 	bl	8000298 <__aeabi_dsub>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
	return JD;
 800363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003642:	ec43 2b17 	vmov	d7, r2, r3
}
 8003646:	eeb0 0a47 	vmov.f32	s0, s14
 800364a:	eef0 0a67 	vmov.f32	s1, s15
 800364e:	3740      	adds	r7, #64	; 0x40
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	f3af 8000 	nop.w
 8003658:	00000000 	.word	0x00000000
 800365c:	40f51800 	.word	0x40f51800
 8003660:	00000000 	.word	0x00000000
 8003664:	4076d400 	.word	0x4076d400
 8003668:	27525461 	.word	0x27525461
 800366c:	403e99a0 	.word	0x403e99a0
 8003670:	00000000 	.word	0x00000000
 8003674:	4097d200 	.word	0x4097d200
 8003678:	51eb851f 	.word	0x51eb851f
 800367c:	40380000 	.word	0x40380000
 8003680:	40968000 	.word	0x40968000
 8003684:	00000000 	.word	0x00000000

08003688 <ln_get_nutation>:
*/
/* Chapter 21 pg 131-134 Using Table 21A 
*/

void ln_get_nutation (double JD, struct ln_nutation * nutation)
{
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	b09e      	sub	sp, #120	; 0x78
 800368c:	af00      	add	r7, sp, #0
 800368e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003692:	6078      	str	r0, [r7, #4]
	long double coeff_sine, coeff_cos;
	long double argument;
	int i;

	/* should we bother recalculating nutation */
	if (fabs(JD - c_JD) > LN_NUTATION_EPOCH_THRESHOLD) {
 8003694:	4bd2      	ldr	r3, [pc, #840]	; (80039e0 <ln_get_nutation+0x358>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800369e:	f7fc fdfb 	bl	8000298 <__aeabi_dsub>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4614      	mov	r4, r2
 80036a8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80036ac:	a39e      	add	r3, pc, #632	; (adr r3, 8003928 <ln_get_nutation+0x2a0>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	4620      	mov	r0, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	f7fd fa37 	bl	8000b28 <__aeabi_dcmpgt>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8308 	beq.w	8003cd2 <ln_get_nutation+0x64a>
		/* set the new epoch */
		c_JD = JD;
 80036c2:	49c7      	ldr	r1, [pc, #796]	; (80039e0 <ln_get_nutation+0x358>)
 80036c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c8:	e9c1 2300 	strd	r2, r3, [r1]

		/* get julian ephemeris day */
		JDE = ln_get_jde (JD);
 80036cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80036d0:	f7ff fec6 	bl	8003460 <ln_get_jde>
 80036d4:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
		
		/* calc T */
		T = (JDE - 2451545.0)/36525;
 80036d8:	a395      	add	r3, pc, #596	; (adr r3, 8003930 <ln_get_nutation+0x2a8>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036e2:	f7fc fdd9 	bl	8000298 <__aeabi_dsub>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	a392      	add	r3, pc, #584	; (adr r3, 8003938 <ln_get_nutation+0x2b0>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fd f8b2 	bl	800085c <__aeabi_ddiv>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		T2 = T * T;
 8003700:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003704:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003708:	f7fc ff7e 	bl	8000608 <__aeabi_dmul>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		T3 = T2 * T;
 8003714:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003718:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800371c:	f7fc ff74 	bl	8000608 <__aeabi_dmul>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		/* calculate D,M,M',F and Omega */
		D = 297.85036 + 445267.111480 * T - 0.0019142 * T2 + T3 / 189474.0;
 8003728:	a385      	add	r3, pc, #532	; (adr r3, 8003940 <ln_get_nutation+0x2b8>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003732:	f7fc ff69 	bl	8000608 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	a382      	add	r3, pc, #520	; (adr r3, 8003948 <ln_get_nutation+0x2c0>)
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f7fc fdaa 	bl	800029c <__adddf3>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	a37f      	add	r3, pc, #508	; (adr r3, 8003950 <ln_get_nutation+0x2c8>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800375a:	f7fc ff55 	bl	8000608 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4620      	mov	r0, r4
 8003764:	4629      	mov	r1, r5
 8003766:	f7fc fd97 	bl	8000298 <__aeabi_dsub>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4614      	mov	r4, r2
 8003770:	461d      	mov	r5, r3
 8003772:	a379      	add	r3, pc, #484	; (adr r3, 8003958 <ln_get_nutation+0x2d0>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800377c:	f7fd f86e 	bl	800085c <__aeabi_ddiv>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4620      	mov	r0, r4
 8003786:	4629      	mov	r1, r5
 8003788:	f7fc fd88 	bl	800029c <__adddf3>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		M = 357.52772 + 35999.050340 * T - 0.0001603 * T2 - T3 / 300000.0;
 8003794:	a372      	add	r3, pc, #456	; (adr r3, 8003960 <ln_get_nutation+0x2d8>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800379e:	f7fc ff33 	bl	8000608 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	a36f      	add	r3, pc, #444	; (adr r3, 8003968 <ln_get_nutation+0x2e0>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f7fc fd74 	bl	800029c <__adddf3>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	461d      	mov	r5, r3
 80037bc:	a36c      	add	r3, pc, #432	; (adr r3, 8003970 <ln_get_nutation+0x2e8>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037c6:	f7fc ff1f 	bl	8000608 <__aeabi_dmul>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4620      	mov	r0, r4
 80037d0:	4629      	mov	r1, r5
 80037d2:	f7fc fd61 	bl	8000298 <__aeabi_dsub>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4614      	mov	r4, r2
 80037dc:	461d      	mov	r5, r3
 80037de:	a366      	add	r3, pc, #408	; (adr r3, 8003978 <ln_get_nutation+0x2f0>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037e8:	f7fd f838 	bl	800085c <__aeabi_ddiv>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fd50 	bl	8000298 <__aeabi_dsub>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		MM = 134.96298 + 477198.867398 * T + 0.0086972 * T2 + T3 / 56250.0;
 8003800:	a35f      	add	r3, pc, #380	; (adr r3, 8003980 <ln_get_nutation+0x2f8>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800380a:	f7fc fefd 	bl	8000608 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	a35c      	add	r3, pc, #368	; (adr r3, 8003988 <ln_get_nutation+0x300>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fd3e 	bl	800029c <__adddf3>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4614      	mov	r4, r2
 8003826:	461d      	mov	r5, r3
 8003828:	a359      	add	r3, pc, #356	; (adr r3, 8003990 <ln_get_nutation+0x308>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003832:	f7fc fee9 	bl	8000608 <__aeabi_dmul>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f7fc fd2d 	bl	800029c <__adddf3>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	461d      	mov	r5, r3
 800384a:	a353      	add	r3, pc, #332	; (adr r3, 8003998 <ln_get_nutation+0x310>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003854:	f7fd f802 	bl	800085c <__aeabi_ddiv>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4620      	mov	r0, r4
 800385e:	4629      	mov	r1, r5
 8003860:	f7fc fd1c 	bl	800029c <__adddf3>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		F = 93.2719100 + 483202.017538 * T - 0.0036825 * T2 + T3 / 327270.0;
 800386c:	a34c      	add	r3, pc, #304	; (adr r3, 80039a0 <ln_get_nutation+0x318>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003876:	f7fc fec7 	bl	8000608 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	a349      	add	r3, pc, #292	; (adr r3, 80039a8 <ln_get_nutation+0x320>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fd08 	bl	800029c <__adddf3>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4614      	mov	r4, r2
 8003892:	461d      	mov	r5, r3
 8003894:	a346      	add	r3, pc, #280	; (adr r3, 80039b0 <ln_get_nutation+0x328>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800389e:	f7fc feb3 	bl	8000608 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fc fcf5 	bl	8000298 <__aeabi_dsub>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4614      	mov	r4, r2
 80038b4:	461d      	mov	r5, r3
 80038b6:	a340      	add	r3, pc, #256	; (adr r3, 80039b8 <ln_get_nutation+0x330>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038c0:	f7fc ffcc 	bl	800085c <__aeabi_ddiv>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	f7fc fce6 	bl	800029c <__adddf3>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		O = 125.04452 - 1934.136261 * T + 0.0020708 * T2 + T3 / 450000.0;
 80038d8:	a339      	add	r3, pc, #228	; (adr r3, 80039c0 <ln_get_nutation+0x338>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038e2:	f7fc fe91 	bl	8000608 <__aeabi_dmul>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	a137      	add	r1, pc, #220	; (adr r1, 80039c8 <ln_get_nutation+0x340>)
 80038ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038f0:	f7fc fcd2 	bl	8000298 <__aeabi_dsub>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	a334      	add	r3, pc, #208	; (adr r3, 80039d0 <ln_get_nutation+0x348>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003906:	f7fc fe7f 	bl	8000608 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f7fc fcc3 	bl	800029c <__adddf3>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4614      	mov	r4, r2
 800391c:	461d      	mov	r5, r3
 800391e:	a32e      	add	r3, pc, #184	; (adr r3, 80039d8 <ln_get_nutation+0x350>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	e05e      	b.n	80039e4 <ln_get_nutation+0x35c>
 8003926:	bf00      	nop
 8003928:	9999999a 	.word	0x9999999a
 800392c:	3fb99999 	.word	0x3fb99999
 8003930:	80000000 	.word	0x80000000
 8003934:	4142b42c 	.word	0x4142b42c
 8003938:	00000000 	.word	0x00000000
 800393c:	40e1d5a0 	.word	0x40e1d5a0
 8003940:	7227d029 	.word	0x7227d029
 8003944:	411b2d4c 	.word	0x411b2d4c
 8003948:	13165d3a 	.word	0x13165d3a
 800394c:	40729d9b 	.word	0x40729d9b
 8003950:	9978e26a 	.word	0x9978e26a
 8003954:	3f5f5cbc 	.word	0x3f5f5cbc
 8003958:	00000000 	.word	0x00000000
 800395c:	41072110 	.word	0x41072110
 8003960:	9c62a1b6 	.word	0x9c62a1b6
 8003964:	40e193e1 	.word	0x40e193e1
 8003968:	8a86d71f 	.word	0x8a86d71f
 800396c:	40765871 	.word	0x40765871
 8003970:	83dd6fb2 	.word	0x83dd6fb2
 8003974:	3f2502c6 	.word	0x3f2502c6
 8003978:	00000000 	.word	0x00000000
 800397c:	41124f80 	.word	0x41124f80
 8003980:	78372e6a 	.word	0x78372e6a
 8003984:	411d203b 	.word	0x411d203b
 8003988:	bb6ed677 	.word	0xbb6ed677
 800398c:	4060ded0 	.word	0x4060ded0
 8003990:	6c88bf57 	.word	0x6c88bf57
 8003994:	3f81cfd6 	.word	0x3f81cfd6
 8003998:	00000000 	.word	0x00000000
 800399c:	40eb7740 	.word	0x40eb7740
 80039a0:	11f57b42 	.word	0x11f57b42
 80039a4:	411d7e08 	.word	0x411d7e08
 80039a8:	f9335d25 	.word	0xf9335d25
 80039ac:	40575166 	.word	0x40575166
 80039b0:	22291fb4 	.word	0x22291fb4
 80039b4:	3f6e2ac3 	.word	0x3f6e2ac3
 80039b8:	00000000 	.word	0x00000000
 80039bc:	4113f998 	.word	0x4113f998
 80039c0:	8800eae2 	.word	0x8800eae2
 80039c4:	409e388b 	.word	0x409e388b
 80039c8:	6a6a0126 	.word	0x6a6a0126
 80039cc:	405f42d9 	.word	0x405f42d9
 80039d0:	48d98da5 	.word	0x48d98da5
 80039d4:	3f60f6c8 	.word	0x3f60f6c8
 80039d8:	00000000 	.word	0x00000000
 80039dc:	411b7740 	.word	0x411b7740
 80039e0:	20000638 	.word	0x20000638
 80039e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039e8:	f7fc ff38 	bl	800085c <__aeabi_ddiv>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fc52 	bl	800029c <__adddf3>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
		/* convert to radians */
		D = ln_deg_to_rad (D);
 8003a00:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003a04:	f000 fdb4 	bl	8004570 <ln_deg_to_rad>
 8003a08:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		M = ln_deg_to_rad (M);
 8003a0c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003a10:	f000 fdae 	bl	8004570 <ln_deg_to_rad>
 8003a14:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		MM = ln_deg_to_rad (MM);
 8003a18:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003a1c:	f000 fda8 	bl	8004570 <ln_deg_to_rad>
 8003a20:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		F = ln_deg_to_rad (F);
 8003a24:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8003a28:	f000 fda2 	bl	8004570 <ln_deg_to_rad>
 8003a2c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
		O = ln_deg_to_rad (O);
 8003a30:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003a34:	f000 fd9c 	bl	8004570 <ln_deg_to_rad>
 8003a38:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

		/* calc sum of terms in table 21A */
		for (i=0; i< TERMS; i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a40:	e0da      	b.n	8003bf8 <ln_get_nutation+0x570>
			/* calc coefficients of sine and cosine */
			coeff_sine = (coefficients[i].longitude1 + (coefficients[i].longitude2 * T));
 8003a42:	4abb      	ldr	r2, [pc, #748]	; (8003d30 <ln_get_nutation+0x6a8>)
 8003a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a46:	015b      	lsls	r3, r3, #5
 8003a48:	4413      	add	r3, r2
 8003a4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a4e:	4ab8      	ldr	r2, [pc, #736]	; (8003d30 <ln_get_nutation+0x6a8>)
 8003a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	4413      	add	r3, r2
 8003a56:	3308      	adds	r3, #8
 8003a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a5c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a60:	f7fc fdd2 	bl	8000608 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4620      	mov	r0, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f7fc fc16 	bl	800029c <__adddf3>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	e9c7 2308 	strd	r2, r3, [r7, #32]
			coeff_cos = (coefficients[i].obliquity1 + (coefficients[i].obliquity2 * T));
 8003a78:	4aad      	ldr	r2, [pc, #692]	; (8003d30 <ln_get_nutation+0x6a8>)
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	4413      	add	r3, r2
 8003a80:	3310      	adds	r3, #16
 8003a82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a86:	4aaa      	ldr	r2, [pc, #680]	; (8003d30 <ln_get_nutation+0x6a8>)
 8003a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8a:	015b      	lsls	r3, r3, #5
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3318      	adds	r3, #24
 8003a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a94:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003a98:	f7fc fdb6 	bl	8000608 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fbfa 	bl	800029c <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	e9c7 2306 	strd	r2, r3, [r7, #24]

			argument = arguments[i].D * D 
 8003ab0:	49a0      	ldr	r1, [pc, #640]	; (8003d34 <ln_get_nutation+0x6ac>)
 8003ab2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	440b      	add	r3, r1
 8003abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ac6:	f7fc fd9f 	bl	8000608 <__aeabi_dmul>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
				+ arguments[i].M * M 
 8003ad2:	4998      	ldr	r1, [pc, #608]	; (8003d34 <ln_get_nutation+0x6ac>)
 8003ad4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	440b      	add	r3, r1
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aea:	f7fc fd8d 	bl	8000608 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fbd1 	bl	800029c <__adddf3>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4614      	mov	r4, r2
 8003b00:	461d      	mov	r5, r3
				+ arguments[i].MM * MM 
 8003b02:	498c      	ldr	r1, [pc, #560]	; (8003d34 <ln_get_nutation+0x6ac>)
 8003b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3310      	adds	r3, #16
 8003b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b1a:	f7fc fd75 	bl	8000608 <__aeabi_dmul>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4620      	mov	r0, r4
 8003b24:	4629      	mov	r1, r5
 8003b26:	f7fc fbb9 	bl	800029c <__adddf3>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4614      	mov	r4, r2
 8003b30:	461d      	mov	r5, r3
				+ arguments[i].F * F
 8003b32:	4980      	ldr	r1, [pc, #512]	; (8003d34 <ln_get_nutation+0x6ac>)
 8003b34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	3318      	adds	r3, #24
 8003b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b4a:	f7fc fd5d 	bl	8000608 <__aeabi_dmul>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc fba1 	bl	800029c <__adddf3>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4614      	mov	r4, r2
 8003b60:	461d      	mov	r5, r3
				+ arguments[i].O * O;
 8003b62:	4974      	ldr	r1, [pc, #464]	; (8003d34 <ln_get_nutation+0x6ac>)
 8003b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	440b      	add	r3, r1
 8003b70:	3320      	adds	r3, #32
 8003b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b7a:	f7fc fd45 	bl	8000608 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
			argument = arguments[i].D * D 
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f7fc fb89 	bl	800029c <__adddf3>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
            
			c_longitude += coeff_sine * sin(argument);
 8003b92:	ed97 0b04 	vldr	d0, [r7, #16]
 8003b96:	f004 f96f 	bl	8007e78 <sin>
 8003b9a:	ec51 0b10 	vmov	r0, r1, d0
 8003b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba2:	f7fc fd31 	bl	8000608 <__aeabi_dmul>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f7fc fb72 	bl	800029c <__adddf3>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	495e      	ldr	r1, [pc, #376]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003bbe:	e9c1 2300 	strd	r2, r3, [r1]
			c_obliquity += coeff_cos * cos(argument);
 8003bc2:	ed97 0b04 	vldr	d0, [r7, #16]
 8003bc6:	f004 f877 	bl	8007cb8 <cos>
 8003bca:	ec51 0b10 	vmov	r0, r1, d0
 8003bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd2:	f7fc fd19 	bl	8000608 <__aeabi_dmul>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fb5a 	bl	800029c <__adddf3>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4953      	ldr	r1, [pc, #332]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003bee:	e9c1 2300 	strd	r2, r3, [r1]
		for (i=0; i< TERMS; i++) {
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8003bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003bfc:	f77f af21 	ble.w	8003a42 <ln_get_nutation+0x3ba>
		}

		/* change to arcsecs */
		c_longitude /= 10000;
 8003c00:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c06:	a33e      	add	r3, pc, #248	; (adr r3, 8003d00 <ln_get_nutation+0x678>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fe26 	bl	800085c <__aeabi_ddiv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4948      	ldr	r1, [pc, #288]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003c16:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= 10000;
 8003c1a:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c20:	a337      	add	r3, pc, #220	; (adr r3, 8003d00 <ln_get_nutation+0x678>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f7fc fe19 	bl	800085c <__aeabi_ddiv>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4943      	ldr	r1, [pc, #268]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003c30:	e9c1 2300 	strd	r2, r3, [r1]

		/* change to degrees */
		c_longitude /= (60 * 60);
 8003c34:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c3a:	a333      	add	r3, pc, #204	; (adr r3, 8003d08 <ln_get_nutation+0x680>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fe0c 	bl	800085c <__aeabi_ddiv>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	493b      	ldr	r1, [pc, #236]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003c4a:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= (60 * 60);
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c54:	a32c      	add	r3, pc, #176	; (adr r3, 8003d08 <ln_get_nutation+0x680>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fdff 	bl	800085c <__aeabi_ddiv>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4936      	ldr	r1, [pc, #216]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003c64:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* calculate mean ecliptic - Meeus 2nd edition, eq. 22.2 */
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
                   - 46.8150/3600 * T
 8003c68:	a329      	add	r3, pc, #164	; (adr r3, 8003d10 <ln_get_nutation+0x688>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c72:	f7fc fcc9 	bl	8000608 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	a127      	add	r1, pc, #156	; (adr r1, 8003d18 <ln_get_nutation+0x690>)
 8003c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c80:	f7fc fb0a 	bl	8000298 <__aeabi_dsub>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	461d      	mov	r5, r3
                   - 0.00059/3600 * T2
 8003c8c:	a324      	add	r3, pc, #144	; (adr r3, 8003d20 <ln_get_nutation+0x698>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c96:	f7fc fcb7 	bl	8000608 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f7fc faf9 	bl	8000298 <__aeabi_dsub>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4614      	mov	r4, r2
 8003cac:	461d      	mov	r5, r3
                   + 0.001813/3600 * T3;
 8003cae:	a31e      	add	r3, pc, #120	; (adr r3, 8003d28 <ln_get_nutation+0x6a0>)
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cb8:	f7fc fca6 	bl	8000608 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc faea 	bl	800029c <__adddf3>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
 8003ccc:	491c      	ldr	r1, [pc, #112]	; (8003d40 <ln_get_nutation+0x6b8>)
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
                                         return true obliquity rather than
                                         mean obliquity */
	}

	/* return results */
	nutation->longitude = c_longitude;
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <ln_get_nutation+0x6b0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	e9c1 2300 	strd	r2, r3, [r1]
	nutation->obliquity = c_obliquity;
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <ln_get_nutation+0x6b4>)
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	nutation->ecliptic = c_ecliptic;
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <ln_get_nutation+0x6b8>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003cf6:	bf00      	nop
 8003cf8:	e024      	b.n	8003d44 <ln_get_nutation+0x6bc>
 8003cfa:	bf00      	nop
 8003cfc:	f3af 8000 	nop.w
 8003d00:	00000000 	.word	0x00000000
 8003d04:	40c38800 	.word	0x40c38800
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	40ac2000 	.word	0x40ac2000
 8003d10:	b45c4be9 	.word	0xb45c4be9
 8003d14:	3f8aa1ed 	.word	0x3f8aa1ed
 8003d18:	61dba54e 	.word	0x61dba54e
 8003d1c:	40377075 	.word	0x40377075
 8003d20:	e9770fa3 	.word	0xe9770fa3
 8003d24:	3e85ff2d 	.word	0x3e85ff2d
 8003d28:	8b8ade58 	.word	0x8b8ade58
 8003d2c:	3ea0e5fc 	.word	0x3ea0e5fc
 8003d30:	0800e700 	.word	0x0800e700
 8003d34:	0800dd28 	.word	0x0800dd28
 8003d38:	20000640 	.word	0x20000640
 8003d3c:	20000648 	.word	0x20000648
 8003d40:	20000650 	.word	0x20000650
 8003d44:	3778      	adds	r7, #120	; 0x78
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0000      	movs	r0, r0
	...

08003d50 <ln_get_mean_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_mean_sidereal_time (double JD)
{
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	ed87 0b00 	vstr	d0, [r7]
    long double sidereal;
    long double T;
    
    T = (JD - 2451545.0) / 36525.0;
 8003d5a:	a343      	add	r3, pc, #268	; (adr r3, 8003e68 <ln_get_mean_sidereal_time+0x118>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d64:	f7fc fa98 	bl	8000298 <__aeabi_dsub>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	a33f      	add	r3, pc, #252	; (adr r3, 8003e70 <ln_get_mean_sidereal_time+0x120>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fd71 	bl	800085c <__aeabi_ddiv>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        
    /* calc mean angle */
    sidereal = 280.46061837 + (360.98564736629 * (JD - 2451545.0)) + (0.000387933 * T * T) - (T * T * T / 38710000.0);
 8003d82:	a339      	add	r3, pc, #228	; (adr r3, 8003e68 <ln_get_mean_sidereal_time+0x118>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d8c:	f7fc fa84 	bl	8000298 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	a337      	add	r3, pc, #220	; (adr r3, 8003e78 <ln_get_mean_sidereal_time+0x128>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fc33 	bl	8000608 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	a335      	add	r3, pc, #212	; (adr r3, 8003e80 <ln_get_mean_sidereal_time+0x130>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fa74 	bl	800029c <__adddf3>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4614      	mov	r4, r2
 8003dba:	461d      	mov	r5, r3
 8003dbc:	a332      	add	r3, pc, #200	; (adr r3, 8003e88 <ln_get_mean_sidereal_time+0x138>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dc6:	f7fc fc1f 	bl	8000608 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dd6:	f7fc fc17 	bl	8000608 <__aeabi_dmul>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fa5b 	bl	800029c <__adddf3>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4614      	mov	r4, r2
 8003dec:	461d      	mov	r5, r3
 8003dee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003df2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003df6:	f7fc fc07 	bl	8000608 <__aeabi_dmul>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e06:	f7fc fbff 	bl	8000608 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	a31f      	add	r3, pc, #124	; (adr r3, 8003e90 <ln_get_mean_sidereal_time+0x140>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fd20 	bl	800085c <__aeabi_ddiv>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4620      	mov	r0, r4
 8003e22:	4629      	mov	r1, r5
 8003e24:	f7fc fa38 	bl	8000298 <__aeabi_dsub>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    /* add a convenient multiple of 360 degrees */
    sidereal = ln_range_degrees (sidereal);
 8003e30:	ed97 0b02 	vldr	d0, [r7, #8]
 8003e34:	f000 fd02 	bl	800483c <ln_range_degrees>
 8003e38:	ed87 0b02 	vstr	d0, [r7, #8]
    
    /* change to hours */
    sidereal *= 24.0 / 360.0;
 8003e3c:	a316      	add	r3, pc, #88	; (adr r3, 8003e98 <ln_get_mean_sidereal_time+0x148>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e46:	f7fc fbdf 	bl	8000608 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        
    return sidereal;
 8003e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e56:	ec43 2b17 	vmov	d7, r2, r3
} 
 8003e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e5e:	eef0 0a67 	vmov.f32	s1, s15
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bdb0      	pop	{r4, r5, r7, pc}
 8003e68:	80000000 	.word	0x80000000
 8003e6c:	4142b42c 	.word	0x4142b42c
 8003e70:	00000000 	.word	0x00000000
 8003e74:	40e1d5a0 	.word	0x40e1d5a0
 8003e78:	362c39aa 	.word	0x362c39aa
 8003e7c:	40768fc5 	.word	0x40768fc5
 8003e80:	b15e3164 	.word	0xb15e3164
 8003e84:	4071875e 	.word	0x4071875e
 8003e88:	8c4c4b7f 	.word	0x8c4c4b7f
 8003e8c:	3f396c6f 	.word	0x3f396c6f
 8003e90:	80000000 	.word	0x80000000
 8003e94:	41827557 	.word	0x41827557
 8003e98:	11111111 	.word	0x11111111
 8003e9c:	3fb11111 	.word	0x3fb11111

08003ea0 <ln_get_apparent_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_apparent_sidereal_time (double JD)
{
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	ed87 0b00 	vstr	d0, [r7]
   double correction, sidereal;
   struct ln_nutation nutation;  
   
   /* get the mean sidereal time */
   sidereal = ln_get_mean_sidereal_time (JD);
 8003eaa:	ed97 0b00 	vldr	d0, [r7]
 8003eae:	f7ff ff4f 	bl	8003d50 <ln_get_mean_sidereal_time>
 8003eb2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
        
   /* add corrections for nutation in longitude and for the true obliquity of 
   the ecliptic */   
   ln_get_nutation (JD, &nutation); 
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	ed97 0b00 	vldr	d0, [r7]
 8003ec0:	f7ff fbe2 	bl	8003688 <ln_get_nutation>
    
   correction = (nutation.longitude / 15.0 * cos (ln_deg_to_rad(nutation.obliquity)));
 8003ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <ln_get_apparent_sidereal_time+0x9c>)
 8003ece:	f7fc fcc5 	bl	800085c <__aeabi_ddiv>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4614      	mov	r4, r2
 8003ed8:	461d      	mov	r5, r3
 8003eda:	ed97 7b04 	vldr	d7, [r7, #16]
 8003ede:	eeb0 0a47 	vmov.f32	s0, s14
 8003ee2:	eef0 0a67 	vmov.f32	s1, s15
 8003ee6:	f000 fb43 	bl	8004570 <ln_deg_to_rad>
 8003eea:	eeb0 7a40 	vmov.f32	s14, s0
 8003eee:	eef0 7a60 	vmov.f32	s15, s1
 8003ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ef6:	eef0 0a67 	vmov.f32	s1, s15
 8003efa:	f003 fedd 	bl	8007cb8 <cos>
 8003efe:	ec53 2b10 	vmov	r2, r3, d0
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc fb7f 	bl	8000608 <__aeabi_dmul>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  
   sidereal += correction;
 8003f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f1a:	f7fc f9bf 	bl	800029c <__adddf3>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   
   return sidereal;
 8003f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f32:	eef0 0a67 	vmov.f32	s1, s15
 8003f36:	3730      	adds	r7, #48	; 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3c:	402e0000 	.word	0x402e0000

08003f40 <ln_get_hrz_from_equ>:
* TODO:
* Transform horizontal coordinates to galactic coordinates.
*/

void ln_get_hrz_from_equ (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_hrz_posn * position)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6178      	str	r0, [r7, #20]
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	double sidereal;
	
	/* get mean sidereal time in hours*/
	sidereal = ln_get_mean_sidereal_time (JD);
 8003f50:	ed97 0b02 	vldr	d0, [r7, #8]
 8003f54:	f7ff fefc 	bl	8003d50 <ln_get_mean_sidereal_time>
 8003f58:	ed87 0b06 	vstr	d0, [r7, #24]
	ln_get_hrz_from_equ_sidereal_time (object, observer, sidereal, position);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	6978      	ldr	r0, [r7, #20]
 8003f66:	f000 f807 	bl	8003f78 <ln_get_hrz_from_equ_sidereal_time>
}
 8003f6a:	bf00      	nop
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	0000      	movs	r0, r0
 8003f74:	0000      	movs	r0, r0
	...

08003f78 <ln_get_hrz_from_equ_sidereal_time>:


void ln_get_hrz_from_equ_sidereal_time (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double sidereal, struct ln_hrz_posn * position)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b09a      	sub	sp, #104	; 0x68
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6178      	str	r0, [r7, #20]
 8003f82:	6139      	str	r1, [r7, #16]
 8003f84:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
	long double H, ra, latitude, declination, A, Ac, As, h, Z, Zs;

	/* change sidereal_time from hours to radians*/
	sidereal *= 2.0 * M_PI / 24.0;
 8003f8a:	a3e0      	add	r3, pc, #896	; (adr r3, 800430c <ln_get_hrz_from_equ_sidereal_time+0x394>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f94:	f7fc fb38 	bl	8000608 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* calculate hour angle of object at observers position */
	ra = ln_deg_to_rad (object->ra);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ed93 7b00 	vldr	d7, [r3]
 8003fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8003faa:	eef0 0a67 	vmov.f32	s1, s15
 8003fae:	f000 fadf 	bl	8004570 <ln_deg_to_rad>
 8003fb2:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
	H = sidereal + ln_deg_to_rad (observer->lng) - ra;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	ed93 7b00 	vldr	d7, [r3]
 8003fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8003fc0:	eef0 0a67 	vmov.f32	s1, s15
 8003fc4:	f000 fad4 	bl	8004570 <ln_deg_to_rad>
 8003fc8:	ec51 0b10 	vmov	r0, r1, d0
 8003fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd0:	f7fc f964 	bl	800029c <__adddf3>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003fe0:	f7fc f95a 	bl	8000298 <__aeabi_dsub>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	/* hence formula 12.5 and 12.6 give */
	/* convert to radians - hour angle, observers latitude, object declination */
	latitude = ln_deg_to_rad (observer->lat);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ff6:	eef0 0a67 	vmov.f32	s1, s15
 8003ffa:	f000 fab9 	bl	8004570 <ln_deg_to_rad>
 8003ffe:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	declination = ln_deg_to_rad (object->dec);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	ed93 7b02 	vldr	d7, [r3, #8]
 8004008:	eeb0 0a47 	vmov.f32	s0, s14
 800400c:	eef0 0a67 	vmov.f32	s1, s15
 8004010:	f000 faae 	bl	8004570 <ln_deg_to_rad>
 8004014:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

	/* formula 12.6 *; missuse of A (you have been warned) */
	A = sin (latitude) * sin (declination) + cos (latitude) * cos (declination) * cos (H);
 8004018:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800401c:	f003 ff2c 	bl	8007e78 <sin>
 8004020:	ec59 8b10 	vmov	r8, r9, d0
 8004024:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004028:	f003 ff26 	bl	8007e78 <sin>
 800402c:	ec53 2b10 	vmov	r2, r3, d0
 8004030:	4640      	mov	r0, r8
 8004032:	4649      	mov	r1, r9
 8004034:	f7fc fae8 	bl	8000608 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4690      	mov	r8, r2
 800403e:	4699      	mov	r9, r3
 8004040:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8004044:	f003 fe38 	bl	8007cb8 <cos>
 8004048:	ec5b ab10 	vmov	sl, fp, d0
 800404c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004050:	f003 fe32 	bl	8007cb8 <cos>
 8004054:	ec53 2b10 	vmov	r2, r3, d0
 8004058:	4650      	mov	r0, sl
 800405a:	4659      	mov	r1, fp
 800405c:	f7fc fad4 	bl	8000608 <__aeabi_dmul>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4692      	mov	sl, r2
 8004066:	469b      	mov	fp, r3
 8004068:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800406c:	f003 fe24 	bl	8007cb8 <cos>
 8004070:	ec53 2b10 	vmov	r2, r3, d0
 8004074:	4650      	mov	r0, sl
 8004076:	4659      	mov	r1, fp
 8004078:	f7fc fac6 	bl	8000608 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc f90a 	bl	800029c <__adddf3>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	h = asin (A);
 8004090:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8004094:	f003 ffb0 	bl	8007ff8 <asin>
 8004098:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

	/* convert back to degrees */
	position->alt = ln_rad_to_deg (h);   
 800409c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80040a0:	f000 fa4a 	bl	8004538 <ln_rad_to_deg>
 80040a4:	eeb0 7a40 	vmov.f32	s14, s0
 80040a8:	eef0 7a60 	vmov.f32	s15, s1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	ed83 7b02 	vstr	d7, [r3, #8]

	/* zenith distance, Telescope Control 6.8a */
	Z = acos (A);
 80040b2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80040b6:	f003 ff6b 	bl	8007f90 <acos>
 80040ba:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* is'n there better way to compute that? */
	Zs = sin (Z);
 80040be:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80040c2:	f003 fed9 	bl	8007e78 <sin>
 80040c6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* sane check for zenith distance; don't try to divide by 0 */
	if (fabs(Zs) < 1e-5) {
 80040ca:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80040d2:	a390      	add	r3, pc, #576	; (adr r3, 8004314 <ln_get_hrz_from_equ_sidereal_time+0x39c>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4620      	mov	r0, r4
 80040da:	4629      	mov	r1, r5
 80040dc:	f7fc fd06 	bl	8000aec <__aeabi_dcmplt>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d057      	beq.n	8004196 <ln_get_hrz_from_equ_sidereal_time+0x21e>
		if (object->dec > 0)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f7fc fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <ln_get_hrz_from_equ_sidereal_time+0x194>
			position->az = 180;
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	4b7e      	ldr	r3, [pc, #504]	; (8004300 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 8004106:	e9c1 2300 	strd	r2, r3, [r1]
 800410a:	e006      	b.n	800411a <ln_get_hrz_from_equ_sidereal_time+0x1a2>
		else
			position->az = 0;
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9c1 2300 	strd	r2, r3, [r1]
		if ((object->dec > 0 && observer->lat > 0)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	f7fc fcfe 	bl	8000b28 <__aeabi_dcmpgt>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <ln_get_hrz_from_equ_sidereal_time+0x1d2>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f7fc fcf2 	bl	8000b28 <__aeabi_dcmpgt>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d117      	bne.n	800417a <ln_get_hrz_from_equ_sidereal_time+0x202>
		   || (object->dec < 0 && observer->lat < 0))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f7fc fcc8 	bl	8000aec <__aeabi_dcmplt>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <ln_get_hrz_from_equ_sidereal_time+0x210>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f7fc fcbc 	bl	8000aec <__aeabi_dcmplt>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <ln_get_hrz_from_equ_sidereal_time+0x210>
		  	position->alt = 90;
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	4b60      	ldr	r3, [pc, #384]	; (8004304 <ln_get_hrz_from_equ_sidereal_time+0x38c>)
 8004182:	e9c1 2302 	strd	r2, r3, [r1, #8]
		else
		  	position->alt = -90;
		return;
 8004186:	e0b4      	b.n	80042f2 <ln_get_hrz_from_equ_sidereal_time+0x37a>
		  	position->alt = -90;
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	4b5e      	ldr	r3, [pc, #376]	; (8004308 <ln_get_hrz_from_equ_sidereal_time+0x390>)
 8004190:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 8004194:	e0ad      	b.n	80042f2 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}

	/* formulas TC 6.8d Taff 1991, pp. 2 and 13 - vector transformations */
	As = (cos (declination) * sin (H)) / Zs;
 8004196:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800419a:	f003 fd8d 	bl	8007cb8 <cos>
 800419e:	ec55 4b10 	vmov	r4, r5, d0
 80041a2:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80041a6:	f003 fe67 	bl	8007e78 <sin>
 80041aa:	ec53 2b10 	vmov	r2, r3, d0
 80041ae:	4620      	mov	r0, r4
 80041b0:	4629      	mov	r1, r5
 80041b2:	f7fc fa29 	bl	8000608 <__aeabi_dmul>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041c2:	f7fc fb4b 	bl	800085c <__aeabi_ddiv>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Ac = (sin (latitude) * cos (declination) * cos (H) - cos (latitude) * sin (declination)) / Zs;
 80041ce:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80041d2:	f003 fe51 	bl	8007e78 <sin>
 80041d6:	ec55 4b10 	vmov	r4, r5, d0
 80041da:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80041de:	f003 fd6b 	bl	8007cb8 <cos>
 80041e2:	ec53 2b10 	vmov	r2, r3, d0
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc fa0d 	bl	8000608 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4614      	mov	r4, r2
 80041f4:	461d      	mov	r5, r3
 80041f6:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80041fa:	f003 fd5d 	bl	8007cb8 <cos>
 80041fe:	ec53 2b10 	vmov	r2, r3, d0
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	f7fc f9ff 	bl	8000608 <__aeabi_dmul>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4614      	mov	r4, r2
 8004210:	461d      	mov	r5, r3
 8004212:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8004216:	f003 fd4f 	bl	8007cb8 <cos>
 800421a:	ec59 8b10 	vmov	r8, r9, d0
 800421e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004222:	f003 fe29 	bl	8007e78 <sin>
 8004226:	ec53 2b10 	vmov	r2, r3, d0
 800422a:	4640      	mov	r0, r8
 800422c:	4649      	mov	r1, r9
 800422e:	f7fc f9eb 	bl	8000608 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f82d 	bl	8000298 <__aeabi_dsub>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800424a:	f7fc fb07 	bl	800085c <__aeabi_ddiv>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// don't blom at atan2
	if (Ac == 0 && As == 0) {
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004262:	f7fc fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d025      	beq.n	80042b8 <ln_get_hrz_from_equ_sidereal_time+0x340>
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004278:	f7fc fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01a      	beq.n	80042b8 <ln_get_hrz_from_equ_sidereal_time+0x340>
	        if (object->dec > 0)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	f7fc fc4a 	bl	8000b28 <__aeabi_dcmpgt>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <ln_get_hrz_from_equ_sidereal_time+0x330>
			position->az = 180.0;
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 80042a2:	e9c1 2300 	strd	r2, r3, [r1]
		else
			position->az = 0.0;
		return;
 80042a6:	e024      	b.n	80042f2 <ln_get_hrz_from_equ_sidereal_time+0x37a>
			position->az = 0.0;
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 80042b6:	e01c      	b.n	80042f2 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}
	A = atan2 (As, Ac);
 80042b8:	ed97 1b06 	vldr	d1, [r7, #24]
 80042bc:	ed97 0b08 	vldr	d0, [r7, #32]
 80042c0:	f003 fece 	bl	8008060 <atan2>
 80042c4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* convert back to degrees */
	position->az = ln_range_degrees(ln_rad_to_deg (A));
 80042c8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80042cc:	f000 f934 	bl	8004538 <ln_rad_to_deg>
 80042d0:	eeb0 7a40 	vmov.f32	s14, s0
 80042d4:	eef0 7a60 	vmov.f32	s15, s1
 80042d8:	eeb0 0a47 	vmov.f32	s0, s14
 80042dc:	eef0 0a67 	vmov.f32	s1, s15
 80042e0:	f000 faac 	bl	800483c <ln_range_degrees>
 80042e4:	eeb0 7a40 	vmov.f32	s14, s0
 80042e8:	eef0 7a60 	vmov.f32	s15, s1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	ed83 7b00 	vstr	d7, [r3]
}
 80042f2:	3768      	adds	r7, #104	; 0x68
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w
 8004300:	40668000 	.word	0x40668000
 8004304:	40568000 	.word	0x40568000
 8004308:	c0568000 	.word	0xc0568000
 800430c:	382d7365 	.word	0x382d7365
 8004310:	3fd0c152 	.word	0x3fd0c152
 8004314:	88e368f1 	.word	0x88e368f1
 8004318:	3ee4f8b5 	.word	0x3ee4f8b5
 800431c:	00000000 	.word	0x00000000

08004320 <ln_get_equ_from_hrz>:
*
* Transform an objects horizontal coordinates into equatorial coordinates
* for the given julian day and observers position.
*/
void ln_get_equ_from_hrz (struct ln_hrz_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_equ_posn * position)
{
 8004320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004324:	ed2d 8b02 	vpush	{d8}
 8004328:	b094      	sub	sp, #80	; 0x50
 800432a:	af00      	add	r7, sp, #0
 800432c:	6178      	str	r0, [r7, #20]
 800432e:	6139      	str	r1, [r7, #16]
 8004330:	ed87 0b02 	vstr	d0, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
	long double H, longitude, declination, latitude, A, h, sidereal;

	/* change observer/object position into radians */

	/* object alt/az */
	A = ln_deg_to_rad (object->az);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	ed93 7b00 	vldr	d7, [r3]
 800433c:	eeb0 0a47 	vmov.f32	s0, s14
 8004340:	eef0 0a67 	vmov.f32	s1, s15
 8004344:	f000 f914 	bl	8004570 <ln_deg_to_rad>
 8004348:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	h = ln_deg_to_rad (object->alt);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004352:	eeb0 0a47 	vmov.f32	s0, s14
 8004356:	eef0 0a67 	vmov.f32	s1, s15
 800435a:	f000 f909 	bl	8004570 <ln_deg_to_rad>
 800435e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* observer long / lat */
	longitude = ln_deg_to_rad (observer->lng);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	ed93 7b00 	vldr	d7, [r3]
 8004368:	eeb0 0a47 	vmov.f32	s0, s14
 800436c:	eef0 0a67 	vmov.f32	s1, s15
 8004370:	f000 f8fe 	bl	8004570 <ln_deg_to_rad>
 8004374:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	latitude = ln_deg_to_rad (observer->lat);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ed93 7b02 	vldr	d7, [r3, #8]
 800437e:	eeb0 0a47 	vmov.f32	s0, s14
 8004382:	eef0 0a67 	vmov.f32	s1, s15
 8004386:	f000 f8f3 	bl	8004570 <ln_deg_to_rad>
 800438a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* equ on pg89 */
	H = atan2 (sin (A), ( cos(A) * sin (latitude) + tan(h) * cos (latitude)));
 800438e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004392:	f003 fd71 	bl	8007e78 <sin>
 8004396:	eeb0 8a40 	vmov.f32	s16, s0
 800439a:	eef0 8a60 	vmov.f32	s17, s1
 800439e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80043a2:	f003 fc89 	bl	8007cb8 <cos>
 80043a6:	ec55 4b10 	vmov	r4, r5, d0
 80043aa:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80043ae:	f003 fd63 	bl	8007e78 <sin>
 80043b2:	ec53 2b10 	vmov	r2, r3, d0
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fc f925 	bl	8000608 <__aeabi_dmul>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4614      	mov	r4, r2
 80043c4:	461d      	mov	r5, r3
 80043c6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80043ca:	f003 fdad 	bl	8007f28 <tan>
 80043ce:	ec59 8b10 	vmov	r8, r9, d0
 80043d2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80043d6:	f003 fc6f 	bl	8007cb8 <cos>
 80043da:	ec53 2b10 	vmov	r2, r3, d0
 80043de:	4640      	mov	r0, r8
 80043e0:	4649      	mov	r1, r9
 80043e2:	f7fc f911 	bl	8000608 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb ff55 	bl	800029c <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	ec43 2b17 	vmov	d7, r2, r3
 80043fa:	eeb0 1a47 	vmov.f32	s2, s14
 80043fe:	eef0 1a67 	vmov.f32	s3, s15
 8004402:	eeb0 0a48 	vmov.f32	s0, s16
 8004406:	eef0 0a68 	vmov.f32	s1, s17
 800440a:	f003 fe29 	bl	8008060 <atan2>
 800440e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	declination = sin(latitude) * sin(h) - cos(latitude) * cos(h) * cos(A);
 8004412:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8004416:	f003 fd2f 	bl	8007e78 <sin>
 800441a:	ec55 4b10 	vmov	r4, r5, d0
 800441e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8004422:	f003 fd29 	bl	8007e78 <sin>
 8004426:	ec53 2b10 	vmov	r2, r3, d0
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fc f8eb 	bl	8000608 <__aeabi_dmul>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4614      	mov	r4, r2
 8004438:	461d      	mov	r5, r3
 800443a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800443e:	f003 fc3b 	bl	8007cb8 <cos>
 8004442:	ec59 8b10 	vmov	r8, r9, d0
 8004446:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800444a:	f003 fc35 	bl	8007cb8 <cos>
 800444e:	ec53 2b10 	vmov	r2, r3, d0
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	f7fc f8d7 	bl	8000608 <__aeabi_dmul>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4690      	mov	r8, r2
 8004460:	4699      	mov	r9, r3
 8004462:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8004466:	f003 fc27 	bl	8007cb8 <cos>
 800446a:	ec53 2b10 	vmov	r2, r3, d0
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f7fc f8c9 	bl	8000608 <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fb ff0b 	bl	8000298 <__aeabi_dsub>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	e9c7 2308 	strd	r2, r3, [r7, #32]
	declination = asin (declination);
 800448a:	ed97 0b08 	vldr	d0, [r7, #32]
 800448e:	f003 fdb3 	bl	8007ff8 <asin>
 8004492:	ed87 0b08 	vstr	d0, [r7, #32]

	/* get ra = sidereal - longitude + H and change sidereal to radians*/
	sidereal = ln_get_apparent_sidereal_time(JD);
 8004496:	ed97 0b02 	vldr	d0, [r7, #8]
 800449a:	f7ff fd01 	bl	8003ea0 <ln_get_apparent_sidereal_time>
 800449e:	ed87 0b06 	vstr	d0, [r7, #24]
	sidereal *= 2.0 * M_PI / 24.0;
 80044a2:	a323      	add	r3, pc, #140	; (adr r3, 8004530 <ln_get_equ_from_hrz+0x210>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044ac:	f7fc f8ac 	bl	8000608 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position->ra = ln_range_degrees(ln_rad_to_deg (sidereal - H + longitude));
 80044b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044c0:	f7fb feea 	bl	8000298 <__aeabi_dsub>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044d0:	f7fb fee4 	bl	800029c <__adddf3>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	ec43 2b17 	vmov	d7, r2, r3
 80044dc:	eeb0 0a47 	vmov.f32	s0, s14
 80044e0:	eef0 0a67 	vmov.f32	s1, s15
 80044e4:	f000 f828 	bl	8004538 <ln_rad_to_deg>
 80044e8:	eeb0 7a40 	vmov.f32	s14, s0
 80044ec:	eef0 7a60 	vmov.f32	s15, s1
 80044f0:	eeb0 0a47 	vmov.f32	s0, s14
 80044f4:	eef0 0a67 	vmov.f32	s1, s15
 80044f8:	f000 f9a0 	bl	800483c <ln_range_degrees>
 80044fc:	eeb0 7a40 	vmov.f32	s14, s0
 8004500:	eef0 7a60 	vmov.f32	s15, s1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	ed83 7b00 	vstr	d7, [r3]
	position->dec = ln_rad_to_deg (declination);
 800450a:	ed97 0b08 	vldr	d0, [r7, #32]
 800450e:	f000 f813 	bl	8004538 <ln_rad_to_deg>
 8004512:	eeb0 7a40 	vmov.f32	s14, s0
 8004516:	eef0 7a60 	vmov.f32	s15, s1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	3750      	adds	r7, #80	; 0x50
 8004524:	46bd      	mov	sp, r7
 8004526:	ecbd 8b02 	vpop	{d8}
 800452a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800452e:	bf00      	nop
 8004530:	382d7365 	.word	0x382d7365
 8004534:	3fd0c152 	.word	0x3fd0c152

08004538 <ln_rad_to_deg>:
}


/* convert radians to degrees */
double ln_rad_to_deg (double radians)
{   
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	ed87 0b00 	vstr	d0, [r7]
	return (radians * R2D);
 8004542:	a309      	add	r3, pc, #36	; (adr r3, 8004568 <ln_rad_to_deg+0x30>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800454c:	f7fc f85c 	bl	8000608 <__aeabi_dmul>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	ec43 2b17 	vmov	d7, r2, r3
}    
 8004558:	eeb0 0a47 	vmov.f32	s0, s14
 800455c:	eef0 0a67 	vmov.f32	s1, s15
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	1a63c1f8 	.word	0x1a63c1f8
 800456c:	404ca5dc 	.word	0x404ca5dc

08004570 <ln_deg_to_rad>:

/* convert degrees to radians */
double ln_deg_to_rad (double degrees)
{   
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	ed87 0b00 	vstr	d0, [r7]
	return (degrees * D2R);
 800457a:	a309      	add	r3, pc, #36	; (adr r3, 80045a0 <ln_deg_to_rad+0x30>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004584:	f7fc f840 	bl	8000608 <__aeabi_dmul>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	ec43 2b17 	vmov	d7, r2, r3
}    
 8004590:	eeb0 0a47 	vmov.f32	s0, s14
 8004594:	eef0 0a67 	vmov.f32	s1, s15
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	a2529d39 	.word	0xa2529d39
 80045a4:	3f91df46 	.word	0x3f91df46

080045a8 <ln_hms_to_deg>:

/* convert hours:mins:secs to degrees */
double ln_hms_to_deg (struct ln_hms *hms)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees = ((double)hms->hours / 24) * 360;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ffad 	bl	8000514 <__aeabi_ui2d>
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <ln_hms_to_deg+0xbc>)
 80045c0:	f7fc f94c 	bl	800085c <__aeabi_ddiv>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <ln_hms_to_deg+0xc0>)
 80045d2:	f7fc f819 	bl	8000608 <__aeabi_dmul>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->minutes / 60) * 15;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	885b      	ldrh	r3, [r3, #2]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fb ff96 	bl	8000514 <__aeabi_ui2d>
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	4b1f      	ldr	r3, [pc, #124]	; (800466c <ln_hms_to_deg+0xc4>)
 80045ee:	f7fc f935 	bl	800085c <__aeabi_ddiv>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <ln_hms_to_deg+0xc8>)
 8004600:	f7fc f802 	bl	8000608 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800460c:	f7fb fe46 	bl	800029c <__adddf3>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->seconds / 60) * 0.25;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <ln_hms_to_deg+0xc4>)
 8004624:	f7fc f91a 	bl	800085c <__aeabi_ddiv>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <ln_hms_to_deg+0xcc>)
 8004636:	f7fb ffe7 	bl	8000608 <__aeabi_dmul>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004642:	f7fb fe2b 	bl	800029c <__adddf3>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return degrees;
 800464e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004652:	ec43 2b17 	vmov	d7, r2, r3
}
 8004656:	eeb0 0a47 	vmov.f32	s0, s14
 800465a:	eef0 0a67 	vmov.f32	s1, s15
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40380000 	.word	0x40380000
 8004668:	40768000 	.word	0x40768000
 800466c:	404e0000 	.word	0x404e0000
 8004670:	402e0000 	.word	0x402e0000
 8004674:	3fd00000 	.word	0x3fd00000

08004678 <ln_dms_to_deg>:
}


/* convert dms to degrees */
double ln_dms_to_deg (struct ln_dms *dms)
{
 8004678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees =  fabs((double)dms->degrees);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	885b      	ldrh	r3, [r3, #2]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb ff44 	bl	8000514 <__aeabi_ui2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->minutes / 60);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	889b      	ldrh	r3, [r3, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb ff3b 	bl	8000514 <__aeabi_ui2d>
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <ln_dms_to_deg+0xa8>)
 80046a4:	f7fc f8da 	bl	800085c <__aeabi_ddiv>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046b0:	f7fb fdf4 	bl	800029c <__adddf3>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->seconds / 3600);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80046c2:	a315      	add	r3, pc, #84	; (adr r3, 8004718 <ln_dms_to_deg+0xa0>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fc f8c8 	bl	800085c <__aeabi_ddiv>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4690      	mov	r8, r2
 80046d2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80046d6:	4642      	mov	r2, r8
 80046d8:	464b      	mov	r3, r9
 80046da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046de:	f7fb fddd 	bl	800029c <__adddf3>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// negative ?
	if (dms->neg)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <ln_dms_to_deg+0x86>
		degrees *= -1.0;
 80046f2:	68bc      	ldr	r4, [r7, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80046fa:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return degrees;
 80046fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004702:	ec43 2b17 	vmov	d7, r2, r3
}
 8004706:	eeb0 0a47 	vmov.f32	s0, s14
 800470a:	eef0 0a67 	vmov.f32	s1, s15
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004716:	bf00      	nop
 8004718:	00000000 	.word	0x00000000
 800471c:	40ac2000 	.word	0x40ac2000
 8004720:	404e0000 	.word	0x404e0000

08004724 <ln_deg_to_dms>:
    return radians;
}

/* convert degrees to dms */
void ln_deg_to_dms (double degrees, struct ln_dms * dms)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	ed87 0b02 	vstr	d0, [r7, #8]
 800472e:	6078      	str	r0, [r7, #4]
    double dtemp;

    if (degrees >= 0) 
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800473c:	f7fc f9ea 	bl	8000b14 <__aeabi_dcmpge>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <ln_deg_to_dms+0x2a>
		dms->neg = 0;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	e002      	b.n	8004754 <ln_deg_to_dms+0x30>
	else
		dms->neg = 1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	801a      	strh	r2, [r3, #0]

	degrees = fabs(degrees);
 8004754:	68bc      	ldr	r4, [r7, #8]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800475c:	e9c7 4502 	strd	r4, r5, [r7, #8]
	dms->degrees = (int)degrees;
 8004760:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004764:	f7fc fa00 	bl	8000b68 <__aeabi_d2iz>
 8004768:	4603      	mov	r3, r0
 800476a:	b29a      	uxth	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	805a      	strh	r2, [r3, #2]
	
    /* multiply remainder by 60 to get minutes */
    dtemp = 60*(degrees - dms->degrees);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	885b      	ldrh	r3, [r3, #2]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fedd 	bl	8000534 <__aeabi_i2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004782:	f7fb fd89 	bl	8000298 <__aeabi_dsub>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <ln_deg_to_dms+0x110>)
 8004794:	f7fb ff38 	bl	8000608 <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dms->minutes = (unsigned short)dtemp;
 80047a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047a4:	f7fc fa08 	bl	8000bb8 <__aeabi_d2uiz>
 80047a8:	4603      	mov	r3, r0
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	809a      	strh	r2, [r3, #4]
    
    /* multiply remainder by 60 to get seconds */
    dms->seconds = 60*(dtemp - dms->minutes);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	889b      	ldrh	r3, [r3, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fb febd 	bl	8000534 <__aeabi_i2d>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047c2:	f7fb fd69 	bl	8000298 <__aeabi_dsub>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b18      	ldr	r3, [pc, #96]	; (8004834 <ln_deg_to_dms+0x110>)
 80047d4:	f7fb ff18 	bl	8000608 <__aeabi_dmul>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    
    /* catch any overflows */
    if (dms->seconds > 59) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	4b12      	ldr	r3, [pc, #72]	; (8004838 <ln_deg_to_dms+0x114>)
 80047ee:	f7fc f99b 	bl	8000b28 <__aeabi_dcmpgt>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <ln_deg_to_dms+0xee>
    	dms->seconds = 0;
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	dms->minutes ++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	889b      	ldrh	r3, [r3, #4]
 800480a:	3301      	adds	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	809a      	strh	r2, [r3, #4]
    }
    if (dms->minutes > 59) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	889b      	ldrh	r3, [r3, #4]
 8004816:	2b3b      	cmp	r3, #59	; 0x3b
 8004818:	d908      	bls.n	800482c <ln_deg_to_dms+0x108>
    	dms->minutes = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	809a      	strh	r2, [r3, #4]
    	dms->degrees ++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	885b      	ldrh	r3, [r3, #2]
 8004824:	3301      	adds	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	805a      	strh	r2, [r3, #2]
    }
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bdb0      	pop	{r4, r5, r7, pc}
 8004834:	404e0000 	.word	0x404e0000
 8004838:	404d8000 	.word	0x404d8000

0800483c <ln_range_degrees>:
}


/* puts a large angle in the correct range 0 - 360 degrees */
double ln_range_degrees (double angle)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	ed87 0b00 	vstr	d0, [r7]
    double temp;
    
    if (angle >= 0.0 && angle < 360.0)
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004852:	f7fc f95f 	bl	8000b14 <__aeabi_dcmpge>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <ln_range_degrees+0x3a>
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <ln_range_degrees+0xc8>)
 8004862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004866:	f7fc f941 	bl	8000aec <__aeabi_dcmplt>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <ln_range_degrees+0x3a>
    	return angle;
 8004870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004874:	e03d      	b.n	80048f2 <ln_range_degrees+0xb6>
 
	temp = (int)(angle / 360);
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b22      	ldr	r3, [pc, #136]	; (8004904 <ln_range_degrees+0xc8>)
 800487c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004880:	f7fb ffec 	bl	800085c <__aeabi_ddiv>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	f7fc f96c 	bl	8000b68 <__aeabi_d2iz>
 8004890:	4603      	mov	r3, r0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe4e 	bl	8000534 <__aeabi_i2d>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (angle < 0.0)
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ac:	f7fc f91e 	bl	8000aec <__aeabi_dcmplt>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <ln_range_degrees+0x90>
	   	temp --;
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <ln_range_degrees+0xcc>)
 80048bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c0:	f7fb fcea 	bl	8000298 <__aeabi_dsub>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp *= 360;
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <ln_range_degrees+0xc8>)
 80048d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d6:	f7fb fe97 	bl	8000608 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return angle - temp;
 80048e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ea:	f7fb fcd5 	bl	8000298 <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
}
 80048f2:	ec43 2b17 	vmov	d7, r2, r3
 80048f6:	eeb0 0a47 	vmov.f32	s0, s14
 80048fa:	eef0 0a67 	vmov.f32	s1, s15
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40768000 	.word	0x40768000
 8004908:	3ff00000 	.word	0x3ff00000

0800490c <ln_hequ_to_equ>:
/*! \fn void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
* \brief human readable equatorial position to double equatorial position
* \ingroup conversion
*/
void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	pos->ra = ln_hms_to_deg (&hpos->ra);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fe45 	bl	80045a8 <ln_hms_to_deg>
 800491e:	eeb0 7a40 	vmov.f32	s14, s0
 8004922:	eef0 7a60 	vmov.f32	s15, s1
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	ed83 7b00 	vstr	d7, [r3]
	pos->dec = ln_dms_to_deg (&hpos->dec);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3310      	adds	r3, #16
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fea1 	bl	8004678 <ln_dms_to_deg>
 8004936:	eeb0 7a40 	vmov.f32	s14, s0
 800493a:	eef0 7a60 	vmov.f32	s15, s1
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <ln_hrz_to_hhrz>:
/*! \fn void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
* \brief double horizontal position to human readable horizontal position
* \ingroup conversion
*/
void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	ln_deg_to_dms (pos->alt, &hpos->alt);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	ed93 7b02 	vldr	d7, [r3, #8]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	3310      	adds	r3, #16
 8004960:	4618      	mov	r0, r3
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f7ff fedb 	bl	8004724 <ln_deg_to_dms>
	ln_deg_to_dms (pos->az, &hpos->az);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	ed93 7b00 	vldr	d7, [r3]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	eeb0 0a47 	vmov.f32	s0, s14
 800497c:	eef0 0a67 	vmov.f32	s1, s15
 8004980:	f7ff fed0 	bl	8004724 <ln_deg_to_dms>
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <ln_hlnlat_to_lnlat>:
/*! \fn void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
* \brief human readable long/lat position to double long/lat position
* \ingroup conversion
*/
void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	pos->lng = ln_dms_to_deg (&hpos->lng);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fe6d 	bl	8004678 <ln_dms_to_deg>
 800499e:	eeb0 7a40 	vmov.f32	s14, s0
 80049a2:	eef0 7a60 	vmov.f32	s15, s1
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	ed83 7b00 	vstr	d7, [r3]
	pos->lat = ln_dms_to_deg (&hpos->lat);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3310      	adds	r3, #16
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fe61 	bl	8004678 <ln_dms_to_deg>
 80049b6:	eeb0 7a40 	vmov.f32	s14, s0
 80049ba:	eef0 7a60 	vmov.f32	s15, s1
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_ZN13GeographicLib3DMS6EncodeEdRdS1_S1_>:
     * @param[in] ang angle (degrees)
     * @param[out] d degrees (an integer returned as a real)
     * @param[out] m arc minutes (an integer returned as a real)
     * @param[out] s arc seconds.
     **********************************************************************/
    static void Encode(real ang, real& d, real& m, real& s) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	ed87 0b04 	vstr	d0, [r7, #16]
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
      d = int(ang); ang = real(Math::dm) * (ang - d);
 80049dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049e0:	f7fc f8c2 	bl	8000b68 <__aeabi_d2iz>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb fda4 	bl	8000534 <__aeabi_i2d>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	68f9      	ldr	r1, [r7, #12]
 80049f2:	e9c1 2300 	strd	r2, r3, [r1]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a00:	f7fb fc4a 	bl	8000298 <__aeabi_dsub>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <_ZN13GeographicLib3DMS6EncodeEdRdS1_S1_+0xa0>)
 8004a12:	f7fb fdf9 	bl	8000608 <__aeabi_dmul>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m = int(ang); s = real(Math::ms) * (ang - m);
 8004a1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a22:	f7fc f8a1 	bl	8000b68 <__aeabi_d2iz>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fb fd83 	bl	8000534 <__aeabi_i2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	e9c1 2300 	strd	r2, r3, [r1]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a42:	f7fb fc29 	bl	8000298 <__aeabi_dsub>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <_ZN13GeographicLib3DMS6EncodeEdRdS1_S1_+0xa0>)
 8004a54:	f7fb fdd8 	bl	8000608 <__aeabi_dmul>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	404e0000 	.word	0x404e0000

08004a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b0aa      	sub	sp, #168	; 0xa8
 8004a74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a76:	f000 fd27 	bl	80054c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a7a:	f000 f9ed 	bl	8004e58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a7e:	f000 fab3 	bl	8004fe8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8004a82:	f000 fa7d 	bl	8004f80 <_ZL19MX_USART2_UART_Initv>
  MX_USART1_UART_Init();
 8004a86:	f000 fa47 	bl	8004f18 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
//  	microsReady = 30000; // 30s
  	flag = 0; // non-zero after first time accessed
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <main+0xec>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
	Ringbuf_init();
 8004a90:	f7fd ffa2 	bl	80029d8 <_Z12Ringbuf_initv>

	HAL_Delay(1000);
 8004a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a98:	f000 fd92 	bl	80055c0 <HAL_Delay>
	microsStart = HAL_GetTick();
 8004a9c:	f000 fd84 	bl	80055a8 <HAL_GetTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <main+0xf0>)
 8004aa6:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//	  ========== GPS Ring Buffer ==================================
	if (Wait_for("GG") == 1) { // "GPGGA" - need "A" for decodeGGA to work properly
 8004aa8:	482e      	ldr	r0, [pc, #184]	; (8004b64 <main+0xf4>)
 8004aaa:	f7fe f8e1 	bl	8002c70 <_Z8Wait_forPc>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <main+0x6a>
	  int value_1 = Copy_upto("*", GGA); // 1=successful copy
 8004abe:	492a      	ldr	r1, [pc, #168]	; (8004b68 <main+0xf8>)
 8004ac0:	482a      	ldr	r0, [pc, #168]	; (8004b6c <main+0xfc>)
 8004ac2:	f7fe f847 	bl	8002b54 <_Z9Copy_uptoPcS_>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  int value_2 = decodeGGA(GGA,&gpsData.ggastruct); // 0=fixed; 1=error
 8004acc:	4928      	ldr	r1, [pc, #160]	; (8004b70 <main+0x100>)
 8004ace:	4826      	ldr	r0, [pc, #152]	; (8004b68 <main+0xf8>)
 8004ad0:	f7fd f9ce 	bl	8001e70 <_Z9decodeGGAPcP9GGASTRUCT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	}

	if (Wait_for("RM") == 1) { // "GPRMC" - need "C" for decodeRMC to work properly
 8004ada:	4826      	ldr	r0, [pc, #152]	; (8004b74 <main+0x104>)
 8004adc:	f7fe f8c8 	bl	8002c70 <_Z8Wait_forPc>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <main+0x9c>
	  int value_3 = Copy_upto("*", RMC); // 1=successful copy
 8004af0:	4921      	ldr	r1, [pc, #132]	; (8004b78 <main+0x108>)
 8004af2:	481e      	ldr	r0, [pc, #120]	; (8004b6c <main+0xfc>)
 8004af4:	f7fe f82e 	bl	8002b54 <_Z9Copy_uptoPcS_>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  int value_4 = decodeRMC(RMC,&gpsData.rmcstruct); // 0=fixed; 1=error
 8004afe:	491f      	ldr	r1, [pc, #124]	; (8004b7c <main+0x10c>)
 8004b00:	481d      	ldr	r0, [pc, #116]	; (8004b78 <main+0x108>)
 8004b02:	f7fd fd21 	bl	8002548 <_Z9decodeRMCPcP9RMCSTRUCT>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	microsCurrent = HAL_GetTick();
 8004b0c:	f000 fd4c 	bl	80055a8 <HAL_GetTick>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <main+0x110>)
 8004b16:	601a      	str	r2, [r3, #0]
	char ready_msg[] = "\r\n GPS data is stable and ready for reading.";
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <main+0x114>)
 8004b1a:	463c      	mov	r4, r7
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b2a:	c407      	stmia	r4!, {r0, r1, r2}
 8004b2c:	7023      	strb	r3, [r4, #0]
	if ( ((microsCurrent-microsStart) >= microsReady) && (flag == 0) ) { // 30s
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <main+0x110>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <main+0xf0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <main+0x118>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	db27      	blt.n	8004b90 <main+0x120>
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <main+0xec>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d123      	bne.n	8004b90 <main+0x120>
	  flag = 1;
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <main+0xec>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)ready_msg, sizeof(ready_msg), 10);
 8004b4e:	4639      	mov	r1, r7
 8004b50:	230a      	movs	r3, #10
 8004b52:	222d      	movs	r2, #45	; 0x2d
 8004b54:	480d      	ldr	r0, [pc, #52]	; (8004b8c <main+0x11c>)
 8004b56:	f002 fa43 	bl	8006fe0 <HAL_UART_Transmit>
	  continue;
 8004b5a:	e15b      	b.n	8004e14 <main+0x3a4>
 8004b5c:	20000874 	.word	0x20000874
 8004b60:	2000086c 	.word	0x2000086c
 8004b64:	0800d6e8 	.word	0x0800d6e8
 8004b68:	20000760 	.word	0x20000760
 8004b6c:	0800d6ec 	.word	0x0800d6ec
 8004b70:	20000828 	.word	0x20000828
 8004b74:	0800d6f0 	.word	0x0800d6f0
 8004b78:	200007c4 	.word	0x200007c4
 8004b7c:	20000854 	.word	0x20000854
 8004b80:	20000870 	.word	0x20000870
 8004b84:	0800d6f4 	.word	0x0800d6f4
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	200006dc 	.word	0x200006dc
	} else if ((microsCurrent-microsStart) < microsReady) {
 8004b90:	4ba1      	ldr	r3, [pc, #644]	; (8004e18 <main+0x3a8>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4ba1      	ldr	r3, [pc, #644]	; (8004e1c <main+0x3ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1ad2      	subs	r2, r2, r3
 8004b9a:	4ba1      	ldr	r3, [pc, #644]	; (8004e20 <main+0x3b0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f2c0 8137 	blt.w	8004e12 <main+0x3a2>
		continue;
	} else if ((microsCurrent-microsStart) >= microsReady) {
 8004ba4:	4b9c      	ldr	r3, [pc, #624]	; (8004e18 <main+0x3a8>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b9c      	ldr	r3, [pc, #624]	; (8004e1c <main+0x3ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	4b9c      	ldr	r3, [pc, #624]	; (8004e20 <main+0x3b0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f6ff af78 	blt.w	8004aa8 <main+0x38>
		//	  ========== Conversions ==================================

		// get lat -> Encode(lat...)
		GGASTRUCT *gga = &gpsData.ggastruct;
 8004bb8:	4b9a      	ldr	r3, [pc, #616]	; (8004e24 <main+0x3b4>)
 8004bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		// float format
		float lat = gga->lcation.latitude;
 8004bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		float lng = gga->lcation.longitude;
 8004bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		char lat_dir = gga->lcation.NS;
 8004bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd6:	791b      	ldrb	r3, [r3, #4]
 8004bd8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		char lng_dir = gga->lcation.EW;
 8004bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		 * @param[out] d degrees (an integer returned as a real)
		 * @param[out] m arc minutes (an integer returned as a real)
		 * @param[out] s arc seconds.
		 * static void Encode(real ang, real& d, real& m, real& s) {...}
		 **********************************************************************/
		double d_1=0, d_2 =0;
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		double m_1=0, m_2 =0;
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double s_1=0, s_2 =0;
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		DMS::Encode(lat,d_1,m_1,s_1); // latitude
 8004c2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004c32:	f7fb fc91 	bl	8000558 <__aeabi_f2d>
 8004c36:	4604      	mov	r4, r0
 8004c38:	460d      	mov	r5, r1
 8004c3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c3e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004c42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c46:	4618      	mov	r0, r3
 8004c48:	ec45 4b10 	vmov	d0, r4, r5
 8004c4c:	f7ff febe 	bl	80049cc <_ZN13GeographicLib3DMS6EncodeEdRdS1_S1_>
		DMS::Encode(lng,d_2,m_2,s_2); // longitude
 8004c50:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004c54:	f7fb fc80 	bl	8000558 <__aeabi_f2d>
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c60:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c68:	4618      	mov	r0, r3
 8004c6a:	ec45 4b10 	vmov	d0, r4, r5
 8004c6e:	f7ff fead 	bl	80049cc <_ZN13GeographicLib3DMS6EncodeEdRdS1_S1_>

		// deal with negative direction
		int neg_lat = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		int neg_lng = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		if (lat_dir == 'S') neg_lat = 1;
 8004c7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004c82:	2b53      	cmp	r3, #83	; 0x53
 8004c84:	d102      	bne.n	8004c8c <main+0x21c>
 8004c86:	2301      	movs	r3, #1
 8004c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		if (lng_dir == 'W') neg_lng = 1;
 8004c8c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8004c90:	2b57      	cmp	r3, #87	; 0x57
 8004c92:	d102      	bne.n	8004c9a <main+0x22a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		 * lat: 43.659822
		 * lng: -79.397056
		 * DMS lat: 43° 39' 35.3592'' N
		 * DMS lng: 79° 23' 49.4016'' W
		 */
		hobserver.lng.neg = neg_lng; //1
 8004c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <main+0x3b8>)
 8004ca2:	801a      	strh	r2, [r3, #0]
		hobserver.lng.degrees = d_2; //79
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7fb ff84 	bl	8000bb8 <__aeabi_d2uiz>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b5c      	ldr	r3, [pc, #368]	; (8004e28 <main+0x3b8>)
 8004cb6:	805a      	strh	r2, [r3, #2]
		hobserver.lng.minutes = m_2; //14
 8004cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f7fb ff7a 	bl	8000bb8 <__aeabi_d2uiz>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	4b57      	ldr	r3, [pc, #348]	; (8004e28 <main+0x3b8>)
 8004cca:	809a      	strh	r2, [r3, #4]
		hobserver.lng.seconds = s_2; //16
 8004ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cd0:	4955      	ldr	r1, [pc, #340]	; (8004e28 <main+0x3b8>)
 8004cd2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		hobserver.lat.neg = neg_lat; //0
 8004cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	4b52      	ldr	r3, [pc, #328]	; (8004e28 <main+0x3b8>)
 8004cde:	821a      	strh	r2, [r3, #16]
		hobserver.lat.degrees = d_1; //43
 8004ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f7fb ff66 	bl	8000bb8 <__aeabi_d2uiz>
 8004cec:	4603      	mov	r3, r0
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <main+0x3b8>)
 8004cf2:	825a      	strh	r2, [r3, #18]
		hobserver.lat.minutes = m_1; //23
 8004cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f7fb ff5c 	bl	8000bb8 <__aeabi_d2uiz>
 8004d00:	4603      	mov	r3, r0
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <main+0x3b8>)
 8004d06:	829a      	strh	r2, [r3, #20]
		hobserver.lat.seconds = s_1; //44
 8004d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d0c:	4946      	ldr	r1, [pc, #280]	; (8004e28 <main+0x3b8>)
 8004d0e:	e9c1 2306 	strd	r2, r3, [r1, #24]

		/* Alnilam
		 * RA: 05h 36m 12s
		 * DEC: -01° 12' 06"
		 */
		hobject.ra.hours = 5;
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <main+0x3bc>)
 8004d14:	2205      	movs	r2, #5
 8004d16:	801a      	strh	r2, [r3, #0]
		hobject.ra.minutes = 36;
 8004d18:	4b44      	ldr	r3, [pc, #272]	; (8004e2c <main+0x3bc>)
 8004d1a:	2224      	movs	r2, #36	; 0x24
 8004d1c:	805a      	strh	r2, [r3, #2]
		hobject.ra.seconds = 12;
 8004d1e:	4943      	ldr	r1, [pc, #268]	; (8004e2c <main+0x3bc>)
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <main+0x3c0>)
 8004d26:	e9c1 2302 	strd	r2, r3, [r1, #8]
		hobject.dec.neg = 1;
 8004d2a:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <main+0x3bc>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	821a      	strh	r2, [r3, #16]
		hobject.dec.degrees = 1;
 8004d30:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <main+0x3bc>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	825a      	strh	r2, [r3, #18]
		hobject.dec.minutes = 12;
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <main+0x3bc>)
 8004d38:	220c      	movs	r2, #12
 8004d3a:	829a      	strh	r2, [r3, #20]
		hobject.dec.seconds = 6;
 8004d3c:	493b      	ldr	r1, [pc, #236]	; (8004e2c <main+0x3bc>)
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <main+0x3c4>)
 8004d44:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// works

		/* UT date and time */
		RMCSTRUCT *rmc = &gpsData.rmcstruct;
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <main+0x3c8>)
 8004d4a:	67fb      	str	r3, [r7, #124]	; 0x7c

		int gps_year = rmc->date.Yr; /*!< Years. All values are valid */
 8004d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	67bb      	str	r3, [r7, #120]	; 0x78
		int gps_month = rmc->date.Mon; /*!< Months. Valid values : 1 (January) - 12 (December) */
 8004d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	677b      	str	r3, [r7, #116]	; 0x74
		int gps_day = rmc->date.Day; /*!< Days. Valid values 1 - 28,29,30,31 Depends on month.*/
 8004d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	673b      	str	r3, [r7, #112]	; 0x70
		int gps_hour = gga->tim.hour; /*!< Hours. Valid values 0 - 23. */
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	66fb      	str	r3, [r7, #108]	; 0x6c
		int gps_minutes = gga->tim.min; /*!< Minutes. Valid values 0 - 59. */
 8004d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
		int gps_seconds = gga->tim.sec; /*!< Seconds. Valid values 0 - 59.99999.... */
 8004d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	667b      	str	r3, [r7, #100]	; 0x64

		date.years = 2000 + gps_year;
 8004d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d78:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <main+0x3cc>)
 8004d7e:	6013      	str	r3, [r2, #0]
		date.months = gps_month;
 8004d80:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <main+0x3cc>)
 8004d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d84:	6053      	str	r3, [r2, #4]
		date.days = gps_day;
 8004d86:	4a2d      	ldr	r2, [pc, #180]	; (8004e3c <main+0x3cc>)
 8004d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d8a:	6093      	str	r3, [r2, #8]
		date.hours = gps_hour;
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <main+0x3cc>)
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	60d3      	str	r3, [r2, #12]
		date.minutes = gps_minutes;
 8004d92:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <main+0x3cc>)
 8004d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d96:	6113      	str	r3, [r2, #16]
		date.seconds = gps_seconds;
 8004d98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d9a:	f7fb fbcb 	bl	8000534 <__aeabi_i2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4926      	ldr	r1, [pc, #152]	; (8004e3c <main+0x3cc>)
 8004da4:	e9c1 2306 	strd	r2, r3, [r1, #24]

		// Conversion *********************
		JD = ln_get_julian_day (&date);
 8004da8:	4824      	ldr	r0, [pc, #144]	; (8004e3c <main+0x3cc>)
 8004daa:	f7fe fb89 	bl	80034c0 <ln_get_julian_day>
 8004dae:	eeb0 7a40 	vmov.f32	s14, s0
 8004db2:	eef0 7a60 	vmov.f32	s15, s1
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <main+0x3d0>)
 8004db8:	ed83 7b00 	vstr	d7, [r3]
		ln_hequ_to_equ (&hobject, &object);
 8004dbc:	4921      	ldr	r1, [pc, #132]	; (8004e44 <main+0x3d4>)
 8004dbe:	481b      	ldr	r0, [pc, #108]	; (8004e2c <main+0x3bc>)
 8004dc0:	f7ff fda4 	bl	800490c <ln_hequ_to_equ>
		ln_hlnlat_to_lnlat (&hobserver, &observer);
 8004dc4:	4920      	ldr	r1, [pc, #128]	; (8004e48 <main+0x3d8>)
 8004dc6:	4818      	ldr	r0, [pc, #96]	; (8004e28 <main+0x3b8>)
 8004dc8:	f7ff fde0 	bl	800498c <ln_hlnlat_to_lnlat>

		ln_get_hrz_from_equ (&object, &observer, JD, &hrz);
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <main+0x3d0>)
 8004dce:	ed93 7b00 	vldr	d7, [r3]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <main+0x3dc>)
 8004dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8004dd8:	eef0 0a67 	vmov.f32	s1, s15
 8004ddc:	491a      	ldr	r1, [pc, #104]	; (8004e48 <main+0x3d8>)
 8004dde:	4819      	ldr	r0, [pc, #100]	; (8004e44 <main+0x3d4>)
 8004de0:	f7ff f8ae 	bl	8003f40 <ln_get_hrz_from_equ>
		ln_hrz_to_hhrz(&hrz, &hhrz);
 8004de4:	491a      	ldr	r1, [pc, #104]	; (8004e50 <main+0x3e0>)
 8004de6:	4819      	ldr	r0, [pc, #100]	; (8004e4c <main+0x3dc>)
 8004de8:	f7ff fdb0 	bl	800494c <ln_hrz_to_hhrz>

		ln_get_equ_from_hrz (&hrz, &observer, JD, &equ);
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <main+0x3d0>)
 8004dee:	ed93 7b00 	vldr	d7, [r3]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <main+0x3e4>)
 8004df4:	eeb0 0a47 	vmov.f32	s0, s14
 8004df8:	eef0 0a67 	vmov.f32	s1, s15
 8004dfc:	4912      	ldr	r1, [pc, #72]	; (8004e48 <main+0x3d8>)
 8004dfe:	4813      	ldr	r0, [pc, #76]	; (8004e4c <main+0x3dc>)
 8004e00:	f7ff fa8e 	bl	8004320 <ln_get_equ_from_hrz>

		d_1 = 0; // breakpoint
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004e10:	e64a      	b.n	8004aa8 <main+0x38>
		continue;
 8004e12:	bf00      	nop
//		HAL_UART_Transmit(&huart2, (uint8_t*)buf4, sizeof(buf4), 10);

	}
	// check if time is still incrementing

  }
 8004e14:	e648      	b.n	8004aa8 <main+0x38>
 8004e16:	bf00      	nop
 8004e18:	20000870 	.word	0x20000870
 8004e1c:	2000086c 	.word	0x2000086c
 8004e20:	20000000 	.word	0x20000000
 8004e24:	20000828 	.word	0x20000828
 8004e28:	20000898 	.word	0x20000898
 8004e2c:	20000878 	.word	0x20000878
 8004e30:	40280000 	.word	0x40280000
 8004e34:	40180000 	.word	0x40180000
 8004e38:	20000854 	.word	0x20000854
 8004e3c:	20000920 	.word	0x20000920
 8004e40:	20000918 	.word	0x20000918
 8004e44:	200008b8 	.word	0x200008b8
 8004e48:	20000908 	.word	0x20000908
 8004e4c:	200008d8 	.word	0x200008d8
 8004e50:	200008e8 	.word	0x200008e8
 8004e54:	200008c8 	.word	0x200008c8

08004e58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b096      	sub	sp, #88	; 0x58
 8004e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e5e:	f107 0314 	add.w	r3, r7, #20
 8004e62:	2244      	movs	r2, #68	; 0x44
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 fe90 	bl	800ab8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004e7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e7e:	f000 fe75 	bl	8005b6c <HAL_PWREx_ControlVoltageScaling>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8004e92:	f000 f90f 	bl	80050b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e96:	2302      	movs	r3, #2
 8004e98:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004eac:	2301      	movs	r3, #1
 8004eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004eb0:	230a      	movs	r3, #10
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004eb4:	2307      	movs	r3, #7
 8004eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fea7 	bl	8005c18 <HAL_RCC_OscConfig>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8004eda:	f000 f8eb 	bl	80050b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ede:	230f      	movs	r3, #15
 8004ee0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	2104      	movs	r1, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 faa2 	bl	8006440 <HAL_RCC_ClockConfig>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8004f0c:	f000 f8d2 	bl	80050b4 <Error_Handler>
  }
}
 8004f10:	bf00      	nop
 8004f12:	3758      	adds	r7, #88	; 0x58
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f1c:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <_ZL19MX_USART1_UART_Initv+0x64>)
 8004f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f3e:	220c      	movs	r2, #12
 8004f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f5a:	4807      	ldr	r0, [pc, #28]	; (8004f78 <_ZL19MX_USART1_UART_Initv+0x60>)
 8004f5c:	f001 fff2 	bl	8006f44 <HAL_UART_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8004f70:	f000 f8a0 	bl	80050b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000658 	.word	0x20000658
 8004f7c:	40013800 	.word	0x40013800

08004f80 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f84:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8004f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fc2:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8004fc4:	f001 ffbe 	bl	8006f44 <HAL_UART_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf14      	ite	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	2300      	moveq	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8004fd8:	f000 f86c 	bl	80050b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200006dc 	.word	0x200006dc
 8004fe4:	40004400 	.word	0x40004400

08004fe8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005004:	f043 0304 	orr.w	r3, r3, #4
 8005008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800500a:	4b28      	ldr	r3, [pc, #160]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005016:	4b25      	ldr	r3, [pc, #148]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	4a24      	ldr	r2, [pc, #144]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005046:	4b19      	ldr	r3, [pc, #100]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <_ZL12MX_GPIO_Initv+0xc4>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800505e:	2200      	movs	r2, #0
 8005060:	2120      	movs	r1, #32
 8005062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005066:	f000 fd5b 	bl	8005b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800506a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800506e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005070:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	4619      	mov	r1, r3
 8005080:	480b      	ldr	r0, [pc, #44]	; (80050b0 <_ZL12MX_GPIO_Initv+0xc8>)
 8005082:	f000 fbd3 	bl	800582c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8005086:	2320      	movs	r3, #32
 8005088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005092:	2300      	movs	r3, #0
 8005094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8005096:	f107 0314 	add.w	r3, r7, #20
 800509a:	4619      	mov	r1, r3
 800509c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050a0:	f000 fbc4 	bl	800582c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050a4:	bf00      	nop
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	48000800 	.word	0x48000800

080050b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050b8:	b672      	cpsid	i
}
 80050ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050bc:	e7fe      	b.n	80050bc <Error_Handler+0x8>
	...

080050c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <HAL_MspInit+0x44>)
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <HAL_MspInit+0x44>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6613      	str	r3, [r2, #96]	; 0x60
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_MspInit+0x44>)
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_MspInit+0x44>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <HAL_MspInit+0x44>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_MspInit+0x44>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40021000 	.word	0x40021000

08005108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b0a6      	sub	sp, #152	; 0x98
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005120:	f107 031c 	add.w	r3, r7, #28
 8005124:	2268      	movs	r2, #104	; 0x68
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f005 fd2f 	bl	800ab8c <memset>
  if(huart->Instance==USART1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a47      	ldr	r2, [pc, #284]	; (8005250 <HAL_UART_MspInit+0x148>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d145      	bne.n	80051c4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005138:	2301      	movs	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4618      	mov	r0, r3
 8005146:	f001 fb9f 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005150:	f7ff ffb0 	bl	80050b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	4a3e      	ldr	r2, [pc, #248]	; (8005254 <HAL_UART_MspInit+0x14c>)
 800515a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800515e:	6613      	str	r3, [r2, #96]	; 0x60
 8005160:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516c:	4b39      	ldr	r3, [pc, #228]	; (8005254 <HAL_UART_MspInit+0x14c>)
 800516e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005170:	4a38      	ldr	r2, [pc, #224]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005178:	4b36      	ldr	r3, [pc, #216]	; (8005254 <HAL_UART_MspInit+0x14c>)
 800517a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005184:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005198:	2303      	movs	r3, #3
 800519a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800519e:	2307      	movs	r3, #7
 80051a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051a8:	4619      	mov	r1, r3
 80051aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ae:	f000 fb3d 	bl	800582c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2100      	movs	r1, #0
 80051b6:	2025      	movs	r0, #37	; 0x25
 80051b8:	f000 fb01 	bl	80057be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80051bc:	2025      	movs	r0, #37	; 0x25
 80051be:	f000 fb1a 	bl	80057f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051c2:	e040      	b.n	8005246 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <HAL_UART_MspInit+0x150>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d13b      	bne.n	8005246 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051ce:	2302      	movs	r3, #2
 80051d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80051d2:	2300      	movs	r3, #0
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051d6:	f107 031c 	add.w	r3, r7, #28
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 fb54 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80051e6:	f7ff ff65 	bl	80050b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <HAL_UART_MspInit+0x14c>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a19      	ldr	r2, [pc, #100]	; (8005254 <HAL_UART_MspInit+0x14c>)
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <HAL_UART_MspInit+0x14c>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005202:	4b14      	ldr	r3, [pc, #80]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_UART_MspInit+0x14c>)
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800521a:	230c      	movs	r3, #12
 800521c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005220:	2302      	movs	r3, #2
 8005222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005232:	2307      	movs	r3, #7
 8005234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005238:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800523c:	4619      	mov	r1, r3
 800523e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005242:	f000 faf3 	bl	800582c <HAL_GPIO_Init>
}
 8005246:	bf00      	nop
 8005248:	3798      	adds	r7, #152	; 0x98
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40013800 	.word	0x40013800
 8005254:	40021000 	.word	0x40021000
 8005258:	40004400 	.word	0x40004400

0800525c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005260:	e7fe      	b.n	8005260 <NMI_Handler+0x4>

08005262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005266:	e7fe      	b.n	8005266 <HardFault_Handler+0x4>

08005268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800526c:	e7fe      	b.n	800526c <MemManage_Handler+0x4>

0800526e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800526e:	b480      	push	{r7}
 8005270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005272:	e7fe      	b.n	8005272 <BusFault_Handler+0x4>

08005274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005278:	e7fe      	b.n	8005278 <UsageFault_Handler+0x4>

0800527a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800527e:	bf00      	nop
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//	if (timeout > 0) timeout--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052a8:	f000 f96a 	bl	8005580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052ac:	bf00      	nop
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80052b4:	4802      	ldr	r0, [pc, #8]	; (80052c0 <USART1_IRQHandler+0x10>)
 80052b6:	f7fd fd7b 	bl	8002db0 <_Z8Uart_isrP20__UART_HandleTypeDef>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000658 	.word	0x20000658

080052c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return 1;
 80052c8:	2301      	movs	r3, #1
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_kill>:

int _kill(int pid, int sig)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052de:	f005 fc15 	bl	800ab0c <__errno>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2216      	movs	r2, #22
 80052e6:	601a      	str	r2, [r3, #0]
  return -1;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_exit>:

void _exit (int status)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ffe7 	bl	80052d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005306:	e7fe      	b.n	8005306 <_exit+0x12>

08005308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e00a      	b.n	8005330 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800531a:	f3af 8000 	nop.w
 800531e:	4601      	mov	r1, r0
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	60ba      	str	r2, [r7, #8]
 8005326:	b2ca      	uxtb	r2, r1
 8005328:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3301      	adds	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	dbf0      	blt.n	800531a <_read+0x12>
  }

  return len;
 8005338:	687b      	ldr	r3, [r7, #4]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b086      	sub	sp, #24
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e009      	b.n	8005368 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	60ba      	str	r2, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3301      	adds	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	dbf1      	blt.n	8005354 <_write+0x12>
  }
  return len;
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_close>:

int _close(int file)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a2:	605a      	str	r2, [r3, #4]
  return 0;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <_isatty>:

int _isatty(int file)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053ba:	2301      	movs	r3, #1
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <_sbrk+0x5c>)
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <_sbrk+0x60>)
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <_sbrk+0x64>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <_sbrk+0x64>)
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <_sbrk+0x68>)
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <_sbrk+0x64>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d207      	bcs.n	8005424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005414:	f005 fb7a 	bl	800ab0c <__errno>
 8005418:	4603      	mov	r3, r0
 800541a:	220c      	movs	r2, #12
 800541c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e009      	b.n	8005438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005424:	4b08      	ldr	r3, [pc, #32]	; (8005448 <_sbrk+0x64>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800542a:	4b07      	ldr	r3, [pc, #28]	; (8005448 <_sbrk+0x64>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	4a05      	ldr	r2, [pc, #20]	; (8005448 <_sbrk+0x64>)
 8005434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005436:	68fb      	ldr	r3, [r7, #12]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20028000 	.word	0x20028000
 8005444:	00000400 	.word	0x00000400
 8005448:	20000940 	.word	0x20000940
 800544c:	20000958 	.word	0x20000958

08005450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <SystemInit+0x20>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	4a05      	ldr	r2, [pc, #20]	; (8005470 <SystemInit+0x20>)
 800545c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005478:	f7ff ffea 	bl	8005450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800547c:	480c      	ldr	r0, [pc, #48]	; (80054b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800547e:	490d      	ldr	r1, [pc, #52]	; (80054b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <LoopForever+0xe>)
  movs r3, #0
 8005482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005484:	e002      	b.n	800548c <LoopCopyDataInit>

08005486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800548a:	3304      	adds	r3, #4

0800548c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800548c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800548e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005490:	d3f9      	bcc.n	8005486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005492:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005494:	4c0a      	ldr	r4, [pc, #40]	; (80054c0 <LoopForever+0x16>)
  movs r3, #0
 8005496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005498:	e001      	b.n	800549e <LoopFillZerobss>

0800549a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800549a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800549c:	3204      	adds	r2, #4

0800549e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800549e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a0:	d3fb      	bcc.n	800549a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054a2:	f005 fb39 	bl	800ab18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80054a6:	f7ff fae3 	bl	8004a70 <main>

080054aa <LoopForever>:

LoopForever:
    b LoopForever
 80054aa:	e7fe      	b.n	80054aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80054ac:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80054b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80054b8:	0800f6b4 	.word	0x0800f6b4
  ldr r2, =_sbss
 80054bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80054c0:	20000958 	.word	0x20000958

080054c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80054c4:	e7fe      	b.n	80054c4 <ADC1_IRQHandler>
	...

080054c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_Init+0x3c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <HAL_Init+0x3c>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054de:	2003      	movs	r0, #3
 80054e0:	f000 f962 	bl	80057a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054e4:	2000      	movs	r0, #0
 80054e6:	f000 f80f 	bl	8005508 <HAL_InitTick>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	71fb      	strb	r3, [r7, #7]
 80054f4:	e001      	b.n	80054fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054f6:	f7ff fde3 	bl	80050c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054fa:	79fb      	ldrb	r3, [r7, #7]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40022000 	.word	0x40022000

08005508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <HAL_InitTick+0x6c>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d023      	beq.n	8005564 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800551c:	4b16      	ldr	r3, [pc, #88]	; (8005578 <HAL_InitTick+0x70>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_InitTick+0x6c>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800552a:	fbb3 f3f1 	udiv	r3, r3, r1
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f96d 	bl	8005812 <HAL_SYSTICK_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b0f      	cmp	r3, #15
 8005542:	d809      	bhi.n	8005558 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005544:	2200      	movs	r2, #0
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
 800554c:	f000 f937 	bl	80057be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <HAL_InitTick+0x74>)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e007      	b.n	8005568 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e004      	b.n	8005568 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e001      	b.n	8005568 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2000000c 	.word	0x2000000c
 8005578:	20000004 	.word	0x20000004
 800557c:	20000008 	.word	0x20000008

08005580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_IncTick+0x20>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_IncTick+0x24>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <HAL_IncTick+0x24>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c
 80055a4:	20000944 	.word	0x20000944

080055a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return uwTick;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_GetTick+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000944 	.word	0x20000944

080055c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055c8:	f7ff ffee 	bl	80055a8 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d005      	beq.n	80055e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_Delay+0x44>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055e6:	bf00      	nop
 80055e8:	f7ff ffde 	bl	80055a8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d8f7      	bhi.n	80055e8 <HAL_Delay+0x28>
  {
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c

08005608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <__NVIC_SetPriorityGrouping+0x44>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005624:	4013      	ands	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800563a:	4a04      	ldr	r2, [pc, #16]	; (800564c <__NVIC_SetPriorityGrouping+0x44>)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	60d3      	str	r3, [r2, #12]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <__NVIC_GetPriorityGrouping+0x18>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	f003 0307 	and.w	r3, r3, #7
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000ed00 	.word	0xe000ed00

0800566c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	2b00      	cmp	r3, #0
 800567c:	db0b      	blt.n	8005696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f003 021f 	and.w	r2, r3, #31
 8005684:	4907      	ldr	r1, [pc, #28]	; (80056a4 <__NVIC_EnableIRQ+0x38>)
 8005686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2001      	movs	r0, #1
 800568e:	fa00 f202 	lsl.w	r2, r0, r2
 8005692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	e000e100 	.word	0xe000e100

080056a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db0a      	blt.n	80056d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	490c      	ldr	r1, [pc, #48]	; (80056f4 <__NVIC_SetPriority+0x4c>)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	440b      	add	r3, r1
 80056cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056d0:	e00a      	b.n	80056e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	4908      	ldr	r1, [pc, #32]	; (80056f8 <__NVIC_SetPriority+0x50>)
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3b04      	subs	r3, #4
 80056e0:	0112      	lsls	r2, r2, #4
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	440b      	add	r3, r1
 80056e6:	761a      	strb	r2, [r3, #24]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000e100 	.word	0xe000e100
 80056f8:	e000ed00 	.word	0xe000ed00

080056fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f1c3 0307 	rsb	r3, r3, #7
 8005716:	2b04      	cmp	r3, #4
 8005718:	bf28      	it	cs
 800571a:	2304      	movcs	r3, #4
 800571c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3304      	adds	r3, #4
 8005722:	2b06      	cmp	r3, #6
 8005724:	d902      	bls.n	800572c <NVIC_EncodePriority+0x30>
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3b03      	subs	r3, #3
 800572a:	e000      	b.n	800572e <NVIC_EncodePriority+0x32>
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	401a      	ands	r2, r3
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005744:	f04f 31ff 	mov.w	r1, #4294967295
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	fa01 f303 	lsl.w	r3, r1, r3
 800574e:	43d9      	mvns	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005754:	4313      	orrs	r3, r2
         );
}
 8005756:	4618      	mov	r0, r3
 8005758:	3724      	adds	r7, #36	; 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005774:	d301      	bcc.n	800577a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005776:	2301      	movs	r3, #1
 8005778:	e00f      	b.n	800579a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <SysTick_Config+0x40>)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3b01      	subs	r3, #1
 8005780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005782:	210f      	movs	r1, #15
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	f7ff ff8e 	bl	80056a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <SysTick_Config+0x40>)
 800578e:	2200      	movs	r2, #0
 8005790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005792:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <SysTick_Config+0x40>)
 8005794:	2207      	movs	r2, #7
 8005796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	e000e010 	.word	0xe000e010

080057a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ff29 	bl	8005608 <__NVIC_SetPriorityGrouping>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	4603      	mov	r3, r0
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057d0:	f7ff ff3e 	bl	8005650 <__NVIC_GetPriorityGrouping>
 80057d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	6978      	ldr	r0, [r7, #20]
 80057dc:	f7ff ff8e 	bl	80056fc <NVIC_EncodePriority>
 80057e0:	4602      	mov	r2, r0
 80057e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e6:	4611      	mov	r1, r2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff5d 	bl	80056a8 <__NVIC_SetPriority>
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	4603      	mov	r3, r0
 80057fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff ff31 	bl	800566c <__NVIC_EnableIRQ>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ffa2 	bl	8005764 <SysTick_Config>
 8005820:	4603      	mov	r3, r0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800583a:	e154      	b.n	8005ae6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8146 	beq.w	8005ae0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d005      	beq.n	800586c <HAL_GPIO_Init+0x40>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d130      	bne.n	80058ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4013      	ands	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058a2:	2201      	movs	r2, #1
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	fa02 f303 	lsl.w	r3, r2, r3
 80058aa:	43db      	mvns	r3, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0201 	and.w	r2, r3, #1
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d017      	beq.n	800590a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	2203      	movs	r2, #3
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4013      	ands	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d123      	bne.n	800595e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	08da      	lsrs	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3208      	adds	r2, #8
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	220f      	movs	r2, #15
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	08da      	lsrs	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3208      	adds	r2, #8
 8005958:	6939      	ldr	r1, [r7, #16]
 800595a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2203      	movs	r2, #3
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 0203 	and.w	r2, r3, #3
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80a0 	beq.w	8005ae0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a0:	4b58      	ldr	r3, [pc, #352]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6613      	str	r3, [r2, #96]	; 0x60
 80059ac:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <HAL_GPIO_Init+0x2d8>)
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059b8:	4a53      	ldr	r2, [pc, #332]	; (8005b08 <HAL_GPIO_Init+0x2dc>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4013      	ands	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059e2:	d019      	beq.n	8005a18 <HAL_GPIO_Init+0x1ec>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a49      	ldr	r2, [pc, #292]	; (8005b0c <HAL_GPIO_Init+0x2e0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <HAL_GPIO_Init+0x1e8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a48      	ldr	r2, [pc, #288]	; (8005b10 <HAL_GPIO_Init+0x2e4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00d      	beq.n	8005a10 <HAL_GPIO_Init+0x1e4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a47      	ldr	r2, [pc, #284]	; (8005b14 <HAL_GPIO_Init+0x2e8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <HAL_GPIO_Init+0x1e0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a46      	ldr	r2, [pc, #280]	; (8005b18 <HAL_GPIO_Init+0x2ec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_GPIO_Init+0x1dc>
 8005a04:	2304      	movs	r3, #4
 8005a06:	e008      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a08:	2307      	movs	r3, #7
 8005a0a:	e006      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e004      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e002      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_GPIO_Init+0x1ee>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	f002 0203 	and.w	r2, r2, #3
 8005a20:	0092      	lsls	r2, r2, #2
 8005a22:	4093      	lsls	r3, r2
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a2a:	4937      	ldr	r1, [pc, #220]	; (8005b08 <HAL_GPIO_Init+0x2dc>)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	3302      	adds	r3, #2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a38:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4013      	ands	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a62:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a86:	4a25      	ldr	r2, [pc, #148]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ab6:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_GPIO_Init+0x2f0>)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f47f aea3 	bne.w	800583c <HAL_GPIO_Init+0x10>
  }
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	48000400 	.word	0x48000400
 8005b10:	48000800 	.word	0x48000800
 8005b14:	48000c00 	.word	0x48000c00
 8005b18:	48001000 	.word	0x48001000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b30:	787b      	ldrb	r3, [r7, #1]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b3c:	e002      	b.n	8005b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40007000 	.word	0x40007000

08005b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7a:	d130      	bne.n	8005bde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d038      	beq.n	8005bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b92:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b9a:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2232      	movs	r2, #50	; 0x32
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	0c9b      	lsrs	r3, r3, #18
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb0:	e002      	b.n	8005bb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb8:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d102      	bne.n	8005bcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f2      	bne.n	8005bb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d110      	bne.n	8005bfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e00f      	b.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bea:	d007      	beq.n	8005bfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40007000 	.word	0x40007000
 8005c10:	20000004 	.word	0x20000004
 8005c14:	431bde83 	.word	0x431bde83

08005c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f000 bc02 	b.w	8006430 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c2c:	4b96      	ldr	r3, [pc, #600]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c36:	4b94      	ldr	r3, [pc, #592]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80e4 	beq.w	8005e16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_RCC_OscConfig+0x4c>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	f040 808b 	bne.w	8005d72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 8087 	bne.w	8005d72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c64:	4b88      	ldr	r3, [pc, #544]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_OscConfig+0x64>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e3d9      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCC_OscConfig+0x7e>
 8005c8c:	4b7e      	ldr	r3, [pc, #504]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c94:	e005      	b.n	8005ca2 <HAL_RCC_OscConfig+0x8a>
 8005c96:	4b7c      	ldr	r3, [pc, #496]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d223      	bcs.n	8005cee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fd8c 	bl	80067c8 <RCC_SetFlashLatencyFromMSIRange>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e3ba      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cba:	4b73      	ldr	r3, [pc, #460]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a72      	ldr	r2, [pc, #456]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	f043 0308 	orr.w	r3, r3, #8
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	4b70      	ldr	r3, [pc, #448]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	496d      	ldr	r1, [pc, #436]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cd8:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	4968      	ldr	r1, [pc, #416]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]
 8005cec:	e025      	b.n	8005d3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cee:	4b66      	ldr	r3, [pc, #408]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a65      	ldr	r2, [pc, #404]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cf4:	f043 0308 	orr.w	r3, r3, #8
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4960      	ldr	r1, [pc, #384]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d0c:	4b5e      	ldr	r3, [pc, #376]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	495b      	ldr	r1, [pc, #364]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fd4c 	bl	80067c8 <RCC_SetFlashLatencyFromMSIRange>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e37a      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d3a:	f000 fc81 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	4b51      	ldr	r3, [pc, #324]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	4950      	ldr	r1, [pc, #320]	; (8005e8c <HAL_RCC_OscConfig+0x274>)
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	fa22 f303 	lsr.w	r3, r2, r3
 8005d56:	4a4e      	ldr	r2, [pc, #312]	; (8005e90 <HAL_RCC_OscConfig+0x278>)
 8005d58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fbd2 	bl	8005508 <HAL_InitTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d052      	beq.n	8005e14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	e35e      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d032      	beq.n	8005de0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d7a:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a42      	ldr	r2, [pc, #264]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d86:	f7ff fc0f 	bl	80055a8 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d8e:	f7ff fc0b 	bl	80055a8 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e347      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005da0:	4b39      	ldr	r3, [pc, #228]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dac:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005db2:	f043 0308 	orr.w	r3, r3, #8
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	4930      	ldr	r1, [pc, #192]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	492b      	ldr	r1, [pc, #172]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	604b      	str	r3, [r1, #4]
 8005dde:	e01a      	b.n	8005e16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005de0:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a28      	ldr	r2, [pc, #160]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dec:	f7ff fbdc 	bl	80055a8 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005df4:	f7ff fbd8 	bl	80055a8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e314      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x1dc>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d073      	beq.n	8005f0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_OscConfig+0x21c>
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d10e      	bne.n	8005e4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d10b      	bne.n	8005e4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e34:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d063      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2f0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d15f      	bne.n	8005f08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e2f1      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e54:	d106      	bne.n	8005e64 <HAL_RCC_OscConfig+0x24c>
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e025      	b.n	8005eb0 <HAL_RCC_OscConfig+0x298>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e6c:	d114      	bne.n	8005e98 <HAL_RCC_OscConfig+0x280>
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a02      	ldr	r2, [pc, #8]	; (8005e88 <HAL_RCC_OscConfig+0x270>)
 8005e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e013      	b.n	8005eb0 <HAL_RCC_OscConfig+0x298>
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	0800eee0 	.word	0x0800eee0
 8005e90:	20000004 	.word	0x20000004
 8005e94:	20000008 	.word	0x20000008
 8005e98:	4ba0      	ldr	r3, [pc, #640]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a9f      	ldr	r2, [pc, #636]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	4b9d      	ldr	r3, [pc, #628]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a9c      	ldr	r2, [pc, #624]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d013      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7ff fb76 	bl	80055a8 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7ff fb72 	bl	80055a8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e2ae      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed2:	4b92      	ldr	r3, [pc, #584]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x2a8>
 8005ede:	e014      	b.n	8005f0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7ff fb62 	bl	80055a8 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7ff fb5e 	bl	80055a8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e29a      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005efa:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x2d0>
 8005f06:	e000      	b.n	8005f0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d060      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_OscConfig+0x310>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	d119      	bne.n	8005f56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d116      	bne.n	8005f56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f28:	4b7c      	ldr	r3, [pc, #496]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_OscConfig+0x328>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e277      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f40:	4b76      	ldr	r3, [pc, #472]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	4973      	ldr	r1, [pc, #460]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	e040      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d023      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f5e:	4b6f      	ldr	r3, [pc, #444]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6e      	ldr	r2, [pc, #440]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7ff fb1d 	bl	80055a8 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f72:	f7ff fb19 	bl	80055a8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e255      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f84:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b62      	ldr	r3, [pc, #392]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	495f      	ldr	r1, [pc, #380]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	e018      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa6:	4b5d      	ldr	r3, [pc, #372]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5c      	ldr	r2, [pc, #368]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7ff faf9 	bl	80055a8 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fba:	f7ff faf5 	bl	80055a8 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e231      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fcc:	4b53      	ldr	r3, [pc, #332]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f0      	bne.n	8005fba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d03c      	beq.n	800605e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01c      	beq.n	8006026 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fec:	4b4b      	ldr	r3, [pc, #300]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff2:	4a4a      	ldr	r2, [pc, #296]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7ff fad4 	bl	80055a8 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7ff fad0 	bl	80055a8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e20c      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0ef      	beq.n	8006004 <HAL_RCC_OscConfig+0x3ec>
 8006024:	e01b      	b.n	800605e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006026:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602c:	4a3b      	ldr	r2, [pc, #236]	; (800611c <HAL_RCC_OscConfig+0x504>)
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7ff fab7 	bl	80055a8 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800603e:	f7ff fab3 	bl	80055a8 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e1ef      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006050:	4b32      	ldr	r3, [pc, #200]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1ef      	bne.n	800603e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a6 	beq.w	80061b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10d      	bne.n	8006098 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <HAL_RCC_OscConfig+0x504>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006086:	6593      	str	r3, [r2, #88]	; 0x58
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <HAL_RCC_OscConfig+0x504>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006094:	2301      	movs	r3, #1
 8006096:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x508>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d118      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060a4:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <HAL_RCC_OscConfig+0x508>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_RCC_OscConfig+0x508>)
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b0:	f7ff fa7a 	bl	80055a8 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b8:	f7ff fa76 	bl	80055a8 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1b2      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ca:	4b15      	ldr	r3, [pc, #84]	; (8006120 <HAL_RCC_OscConfig+0x508>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d108      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4d8>
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <HAL_RCC_OscConfig+0x504>)
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <HAL_RCC_OscConfig+0x504>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060ee:	e029      	b.n	8006144 <HAL_RCC_OscConfig+0x52c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b05      	cmp	r3, #5
 80060f6:	d115      	bne.n	8006124 <HAL_RCC_OscConfig+0x50c>
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <HAL_RCC_OscConfig+0x504>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	4a07      	ldr	r2, [pc, #28]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006100:	f043 0304 	orr.w	r3, r3, #4
 8006104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_RCC_OscConfig+0x504>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	4a03      	ldr	r2, [pc, #12]	; (800611c <HAL_RCC_OscConfig+0x504>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006118:	e014      	b.n	8006144 <HAL_RCC_OscConfig+0x52c>
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000
 8006120:	40007000 	.word	0x40007000
 8006124:	4b9a      	ldr	r3, [pc, #616]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612a:	4a99      	ldr	r2, [pc, #612]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006134:	4b96      	ldr	r3, [pc, #600]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	4a95      	ldr	r2, [pc, #596]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800613c:	f023 0304 	bic.w	r3, r3, #4
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d016      	beq.n	800617a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7ff fa2c 	bl	80055a8 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006152:	e00a      	b.n	800616a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006154:	f7ff fa28 	bl	80055a8 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e162      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616a:	4b89      	ldr	r3, [pc, #548]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ed      	beq.n	8006154 <HAL_RCC_OscConfig+0x53c>
 8006178:	e015      	b.n	80061a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7ff fa15 	bl	80055a8 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7ff fa11 	bl	80055a8 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e14b      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006198:	4b7d      	ldr	r3, [pc, #500]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ed      	bne.n	8006182 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061a6:	7ffb      	ldrb	r3, [r7, #31]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d105      	bne.n	80061b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ac:	4b78      	ldr	r3, [pc, #480]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	4a77      	ldr	r2, [pc, #476]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03c      	beq.n	800623e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01c      	beq.n	8006206 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061cc:	4b70      	ldr	r3, [pc, #448]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d2:	4a6f      	ldr	r2, [pc, #444]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7ff f9e4 	bl	80055a8 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061e4:	f7ff f9e0 	bl	80055a8 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e11c      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061f6:	4b66      	ldr	r3, [pc, #408]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80061f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0ef      	beq.n	80061e4 <HAL_RCC_OscConfig+0x5cc>
 8006204:	e01b      	b.n	800623e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006206:	4b62      	ldr	r3, [pc, #392]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800620c:	4a60      	ldr	r2, [pc, #384]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006216:	f7ff f9c7 	bl	80055a8 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800621e:	f7ff f9c3 	bl	80055a8 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0ff      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006230:	4b57      	ldr	r3, [pc, #348]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ef      	bne.n	800621e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80f3 	beq.w	800642e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	2b02      	cmp	r3, #2
 800624e:	f040 80c9 	bne.w	80063e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006252:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0203 	and.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	429a      	cmp	r2, r3
 8006264:	d12c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	3b01      	subs	r3, #1
 8006272:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d123      	bne.n	80062c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d11b      	bne.n	80062c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d113      	bne.n	80062c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	3b01      	subs	r3, #1
 80062a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d109      	bne.n	80062c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	3b01      	subs	r3, #1
 80062ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d06b      	beq.n	8006398 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b0c      	cmp	r3, #12
 80062c4:	d062      	beq.n	800638c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062c6:	4b32      	ldr	r3, [pc, #200]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e0ac      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062d6:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80062dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062e2:	f7ff f961 	bl	80055a8 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ea:	f7ff f95d 	bl	80055a8 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e099      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062fc:	4b24      	ldr	r3, [pc, #144]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006308:	4b21      	ldr	r3, [pc, #132]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <HAL_RCC_OscConfig+0x77c>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006318:	3a01      	subs	r2, #1
 800631a:	0112      	lsls	r2, r2, #4
 800631c:	4311      	orrs	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006322:	0212      	lsls	r2, r2, #8
 8006324:	4311      	orrs	r1, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800632a:	0852      	lsrs	r2, r2, #1
 800632c:	3a01      	subs	r2, #1
 800632e:	0552      	lsls	r2, r2, #21
 8006330:	4311      	orrs	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006336:	0852      	lsrs	r2, r2, #1
 8006338:	3a01      	subs	r2, #1
 800633a:	0652      	lsls	r2, r2, #25
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006342:	06d2      	lsls	r2, r2, #27
 8006344:	430a      	orrs	r2, r1
 8006346:	4912      	ldr	r1, [pc, #72]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006348:	4313      	orrs	r3, r2
 800634a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006356:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006362:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006364:	f7ff f920 	bl	80055a8 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7ff f91c 	bl	80055a8 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e058      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <HAL_RCC_OscConfig+0x778>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800638a:	e050      	b.n	800642e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e04f      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
 8006390:	40021000 	.word	0x40021000
 8006394:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006398:	4b27      	ldr	r3, [pc, #156]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d144      	bne.n	800642e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a23      	ldr	r2, [pc, #140]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063b0:	4b21      	ldr	r3, [pc, #132]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a20      	ldr	r2, [pc, #128]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063bc:	f7ff f8f4 	bl	80055a8 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c4:	f7ff f8f0 	bl	80055a8 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e02c      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x7ac>
 80063e2:	e024      	b.n	800642e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b0c      	cmp	r3, #12
 80063e8:	d01f      	beq.n	800642a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a12      	ldr	r2, [pc, #72]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 80063f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7ff f8d7 	bl	80055a8 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063fe:	f7ff f8d3 	bl	80055a8 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e00f      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f0      	bne.n	80063fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	4905      	ldr	r1, [pc, #20]	; (8006438 <HAL_RCC_OscConfig+0x820>)
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_RCC_OscConfig+0x824>)
 8006424:	4013      	ands	r3, r2
 8006426:	60cb      	str	r3, [r1, #12]
 8006428:	e001      	b.n	800642e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40021000 	.word	0x40021000
 800643c:	feeefffc 	.word	0xfeeefffc

08006440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0e7      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006454:	4b75      	ldr	r3, [pc, #468]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d910      	bls.n	8006484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b72      	ldr	r3, [pc, #456]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 0207 	bic.w	r2, r3, #7
 800646a:	4970      	ldr	r1, [pc, #448]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b6e      	ldr	r3, [pc, #440]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0cf      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	4b66      	ldr	r3, [pc, #408]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800649c:	429a      	cmp	r2, r3
 800649e:	d908      	bls.n	80064b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a0:	4b63      	ldr	r3, [pc, #396]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4960      	ldr	r1, [pc, #384]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04c      	beq.n	8006558 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d107      	bne.n	80064d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c6:	4b5a      	ldr	r3, [pc, #360]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d121      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0a6      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064de:	4b54      	ldr	r3, [pc, #336]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d115      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e09a      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064f6:	4b4e      	ldr	r3, [pc, #312]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e08e      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006506:	4b4a      	ldr	r3, [pc, #296]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e086      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006516:	4b46      	ldr	r3, [pc, #280]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f023 0203 	bic.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4943      	ldr	r1, [pc, #268]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006528:	f7ff f83e 	bl	80055a8 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	e00a      	b.n	8006546 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006530:	f7ff f83a 	bl	80055a8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	; 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e06e      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 020c 	and.w	r2, r3, #12
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	429a      	cmp	r2, r3
 8006556:	d1eb      	bne.n	8006530 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	4b31      	ldr	r3, [pc, #196]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006570:	429a      	cmp	r2, r3
 8006572:	d208      	bcs.n	8006586 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	492b      	ldr	r1, [pc, #172]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006586:	4b29      	ldr	r3, [pc, #164]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d210      	bcs.n	80065b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f023 0207 	bic.w	r2, r3, #7
 800659c:	4923      	ldr	r1, [pc, #140]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCC_ClockConfig+0x1ec>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d001      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e036      	b.n	8006624 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c2:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	4918      	ldr	r1, [pc, #96]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065e0:	4b13      	ldr	r3, [pc, #76]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4910      	ldr	r1, [pc, #64]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065f4:	f000 f824 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <HAL_RCC_ClockConfig+0x1f0>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	490b      	ldr	r1, [pc, #44]	; (8006634 <HAL_RCC_ClockConfig+0x1f4>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <HAL_RCC_ClockConfig+0x1f8>)
 8006612:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <HAL_RCC_ClockConfig+0x1fc>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe ff75 	bl	8005508 <HAL_InitTick>
 800661e:	4603      	mov	r3, r0
 8006620:	72fb      	strb	r3, [r7, #11]

  return status;
 8006622:	7afb      	ldrb	r3, [r7, #11]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40022000 	.word	0x40022000
 8006630:	40021000 	.word	0x40021000
 8006634:	0800eee0 	.word	0x0800eee0
 8006638:	20000004 	.word	0x20000004
 800663c:	20000008 	.word	0x20000008

08006640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	; 0x24
 8006644:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800664e:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
 8006656:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x34>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b0c      	cmp	r3, #12
 800666c:	d121      	bne.n	80066b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d11e      	bne.n	80066b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006680:	4b31      	ldr	r3, [pc, #196]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	e005      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006690:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800669c:	4a2b      	ldr	r2, [pc, #172]	; (800674c <HAL_RCC_GetSysClockFreq+0x10c>)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d102      	bne.n	80066be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066b8:	4b25      	ldr	r3, [pc, #148]	; (8006750 <HAL_RCC_GetSysClockFreq+0x110>)
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e004      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066c4:	4b23      	ldr	r3, [pc, #140]	; (8006754 <HAL_RCC_GetSysClockFreq+0x114>)
 80066c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b0c      	cmp	r3, #12
 80066cc:	d134      	bne.n	8006738 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d003      	beq.n	80066e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d003      	beq.n	80066ec <HAL_RCC_GetSysClockFreq+0xac>
 80066e4:	e005      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <HAL_RCC_GetSysClockFreq+0x110>)
 80066e8:	617b      	str	r3, [r7, #20]
      break;
 80066ea:	e005      	b.n	80066f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80066ec:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_GetSysClockFreq+0x114>)
 80066ee:	617b      	str	r3, [r7, #20]
      break;
 80066f0:	e002      	b.n	80066f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	617b      	str	r3, [r7, #20]
      break;
 80066f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066f8:	4b13      	ldr	r3, [pc, #76]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	091b      	lsrs	r3, r3, #4
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	3301      	adds	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006706:	4b10      	ldr	r3, [pc, #64]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	fb03 f202 	mul.w	r2, r3, r2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <HAL_RCC_GetSysClockFreq+0x108>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	0e5b      	lsrs	r3, r3, #25
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	3301      	adds	r3, #1
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006738:	69bb      	ldr	r3, [r7, #24]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3724      	adds	r7, #36	; 0x24
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40021000 	.word	0x40021000
 800674c:	0800eef8 	.word	0x0800eef8
 8006750:	00f42400 	.word	0x00f42400
 8006754:	007a1200 	.word	0x007a1200

08006758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800675c:	4b03      	ldr	r3, [pc, #12]	; (800676c <HAL_RCC_GetHCLKFreq+0x14>)
 800675e:	681b      	ldr	r3, [r3, #0]
}
 8006760:	4618      	mov	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000004 	.word	0x20000004

08006770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006774:	f7ff fff0 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 8006778:	4602      	mov	r2, r0
 800677a:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	4904      	ldr	r1, [pc, #16]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006786:	5ccb      	ldrb	r3, [r1, r3]
 8006788:	f003 031f 	and.w	r3, r3, #31
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40021000 	.word	0x40021000
 8006798:	0800eef0 	.word	0x0800eef0

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067a0:	f7ff ffda 	bl	8006758 <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0adb      	lsrs	r3, r3, #11
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4904      	ldr	r1, [pc, #16]	; (80067c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40021000 	.word	0x40021000
 80067c4:	0800eef0 	.word	0x0800eef0

080067c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80067e0:	f7ff f9b6 	bl	8005b50 <HAL_PWREx_GetVoltageRange>
 80067e4:	6178      	str	r0, [r7, #20]
 80067e6:	e014      	b.n	8006812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	4a24      	ldr	r2, [pc, #144]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f2:	6593      	str	r3, [r2, #88]	; 0x58
 80067f4:	4b22      	ldr	r3, [pc, #136]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006800:	f7ff f9a6 	bl	8005b50 <HAL_PWREx_GetVoltageRange>
 8006804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006806:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d10b      	bne.n	8006832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b80      	cmp	r3, #128	; 0x80
 800681e:	d919      	bls.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2ba0      	cmp	r3, #160	; 0xa0
 8006824:	d902      	bls.n	800682c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006826:	2302      	movs	r3, #2
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e013      	b.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800682c:	2301      	movs	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e010      	b.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	d902      	bls.n	800683e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006838:	2303      	movs	r3, #3
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e00a      	b.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d102      	bne.n	800684a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006844:	2302      	movs	r3, #2
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	e004      	b.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b70      	cmp	r3, #112	; 0x70
 800684e:	d101      	bne.n	8006854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006850:	2301      	movs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006854:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 0207 	bic.w	r2, r3, #7
 800685c:	4909      	ldr	r1, [pc, #36]	; (8006884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006864:	4b07      	ldr	r3, [pc, #28]	; (8006884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d001      	beq.n	8006876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40021000 	.word	0x40021000
 8006884:	40022000 	.word	0x40022000

08006888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006890:	2300      	movs	r3, #0
 8006892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006894:	2300      	movs	r3, #0
 8006896:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d031      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068ac:	d01a      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80068ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80068b2:	d814      	bhi.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068bc:	d10f      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80068be:	4b5d      	ldr	r3, [pc, #372]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	4a5c      	ldr	r2, [pc, #368]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068ca:	e00c      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fa44 	bl	8006d60 <RCCEx_PLLSAI1_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	74fb      	strb	r3, [r7, #19]
      break;
 80068e2:	e000      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80068e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068ec:	4b51      	ldr	r3, [pc, #324]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	494e      	ldr	r1, [pc, #312]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006902:	e001      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006904:	7cfb      	ldrb	r3, [r7, #19]
 8006906:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 809e 	beq.w	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800691a:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00d      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006930:	4b40      	ldr	r3, [pc, #256]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6593      	str	r3, [r2, #88]	; 0x58
 800693c:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006948:	2301      	movs	r3, #1
 800694a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800694c:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a39      	ldr	r2, [pc, #228]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006958:	f7fe fe26 	bl	80055a8 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800695e:	e009      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006960:	f7fe fe22 	bl	80055a8 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	74fb      	strb	r3, [r7, #19]
        break;
 8006972:	e005      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006974:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ef      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006980:	7cfb      	ldrb	r3, [r7, #19]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d15a      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006990:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01e      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d019      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ae:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d016      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fe fde2 	bl	80055a8 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e6:	e00b      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fe fdde 	bl	80055a8 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d902      	bls.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	74fb      	strb	r3, [r7, #19]
            break;
 80069fe:	e006      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ec      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a22:	4904      	ldr	r1, [pc, #16]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a2a:	e009      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	74bb      	strb	r3, [r7, #18]
 8006a30:	e006      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006a32:	bf00      	nop
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	7cfb      	ldrb	r3, [r7, #19]
 8006a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a40:	7c7b      	ldrb	r3, [r7, #17]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d105      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a46:	4b9e      	ldr	r3, [pc, #632]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	4a9d      	ldr	r2, [pc, #628]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a5e:	4b98      	ldr	r3, [pc, #608]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f023 0203 	bic.w	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	4994      	ldr	r1, [pc, #592]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a80:	4b8f      	ldr	r3, [pc, #572]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a86:	f023 020c 	bic.w	r2, r3, #12
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	498c      	ldr	r1, [pc, #560]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aa2:	4b87      	ldr	r3, [pc, #540]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	4983      	ldr	r1, [pc, #524]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ac4:	4b7e      	ldr	r3, [pc, #504]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	497b      	ldr	r1, [pc, #492]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ae6:	4b76      	ldr	r3, [pc, #472]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	4972      	ldr	r1, [pc, #456]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b08:	4b6d      	ldr	r3, [pc, #436]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	496a      	ldr	r1, [pc, #424]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b2a:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b38:	4961      	ldr	r1, [pc, #388]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b4c:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	4959      	ldr	r1, [pc, #356]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b6e:	4b54      	ldr	r3, [pc, #336]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	4950      	ldr	r1, [pc, #320]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	4948      	ldr	r1, [pc, #288]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bb2:	4b43      	ldr	r3, [pc, #268]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb8:	f023 0203 	bic.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	493f      	ldr	r1, [pc, #252]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d028      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bd4:	4b3a      	ldr	r3, [pc, #232]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be2:	4937      	ldr	r1, [pc, #220]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bf4:	4b32      	ldr	r3, [pc, #200]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	4a31      	ldr	r2, [pc, #196]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bfe:	60d3      	str	r3, [r2, #12]
 8006c00:	e011      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c0a:	d10c      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f8a4 	bl	8006d60 <RCCEx_PLLSAI1_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8006c22:	7cfb      	ldrb	r3, [r7, #19]
 8006c24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d028      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c32:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	491f      	ldr	r1, [pc, #124]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c50:	d106      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c52:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5c:	60d3      	str	r3, [r2, #12]
 8006c5e:	e011      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c68:	d10c      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 f875 	bl	8006d60 <RCCEx_PLLSAI1_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c7a:	7cfb      	ldrb	r3, [r7, #19]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d02b      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	4908      	ldr	r1, [pc, #32]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cae:	d109      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb0:	4b03      	ldr	r3, [pc, #12]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a02      	ldr	r2, [pc, #8]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cba:	60d3      	str	r3, [r2, #12]
 8006cbc:	e014      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ccc:	d10c      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f843 	bl	8006d60 <RCCEx_PLLSAI1_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cde:	7cfb      	ldrb	r3, [r7, #19]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8006ce4:	7cfb      	ldrb	r3, [r7, #19]
 8006ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01c      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cf4:	4b19      	ldr	r3, [pc, #100]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	4916      	ldr	r1, [pc, #88]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d12:	d10c      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f820 	bl	8006d60 <RCCEx_PLLSAI1_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d24:	7cfb      	ldrb	r3, [r7, #19]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8006d2a:	7cfb      	ldrb	r3, [r7, #19]
 8006d2c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d48:	4904      	ldr	r1, [pc, #16]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d50:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000

08006d60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d6e:	4b74      	ldr	r3, [pc, #464]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d018      	beq.n	8006dac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d7a:	4b71      	ldr	r3, [pc, #452]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0203 	and.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d10d      	bne.n	8006da6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d92:	4b6b      	ldr	r3, [pc, #428]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	091b      	lsrs	r3, r3, #4
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
       ||
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d047      	beq.n	8006e36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e044      	b.n	8006e36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d018      	beq.n	8006de6 <RCCEx_PLLSAI1_Config+0x86>
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d825      	bhi.n	8006e04 <RCCEx_PLLSAI1_Config+0xa4>
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d002      	beq.n	8006dc2 <RCCEx_PLLSAI1_Config+0x62>
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d009      	beq.n	8006dd4 <RCCEx_PLLSAI1_Config+0x74>
 8006dc0:	e020      	b.n	8006e04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d11d      	bne.n	8006e0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd2:	e01a      	b.n	8006e0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dd4:	4b5a      	ldr	r3, [pc, #360]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d116      	bne.n	8006e0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de4:	e013      	b.n	8006e0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006de6:	4b56      	ldr	r3, [pc, #344]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10f      	bne.n	8006e12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df2:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e02:	e006      	b.n	8006e12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e004      	b.n	8006e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e12:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10d      	bne.n	8006e36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e1a:	4b49      	ldr	r3, [pc, #292]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6819      	ldr	r1, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	4943      	ldr	r1, [pc, #268]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d17c      	bne.n	8006f36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e3c:	4b40      	ldr	r3, [pc, #256]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a3f      	ldr	r2, [pc, #252]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e48:	f7fe fbae 	bl	80055a8 <HAL_GetTick>
 8006e4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e4e:	e009      	b.n	8006e64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e50:	f7fe fbaa 	bl	80055a8 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d902      	bls.n	8006e64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	73fb      	strb	r3, [r7, #15]
        break;
 8006e62:	e005      	b.n	8006e70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e64:	4b36      	ldr	r3, [pc, #216]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1ef      	bne.n	8006e50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d15f      	bne.n	8006f36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d110      	bne.n	8006e9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e7c:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006e84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6892      	ldr	r2, [r2, #8]
 8006e8c:	0211      	lsls	r1, r2, #8
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68d2      	ldr	r2, [r2, #12]
 8006e92:	06d2      	lsls	r2, r2, #27
 8006e94:	430a      	orrs	r2, r1
 8006e96:	492a      	ldr	r1, [pc, #168]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	610b      	str	r3, [r1, #16]
 8006e9c:	e027      	b.n	8006eee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d112      	bne.n	8006eca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ea4:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	0211      	lsls	r1, r2, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6912      	ldr	r2, [r2, #16]
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0552      	lsls	r2, r2, #21
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	491f      	ldr	r1, [pc, #124]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	610b      	str	r3, [r1, #16]
 8006ec8:	e011      	b.n	8006eee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	0211      	lsls	r1, r2, #8
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6952      	ldr	r2, [r2, #20]
 8006ee0:	0852      	lsrs	r2, r2, #1
 8006ee2:	3a01      	subs	r2, #1
 8006ee4:	0652      	lsls	r2, r2, #25
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	4915      	ldr	r1, [pc, #84]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ef8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006efa:	f7fe fb55 	bl	80055a8 <HAL_GetTick>
 8006efe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f00:	e009      	b.n	8006f16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f02:	f7fe fb51 	bl	80055a8 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d902      	bls.n	8006f16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	73fb      	strb	r3, [r7, #15]
          break;
 8006f14:	e005      	b.n	8006f22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ef      	beq.n	8006f02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	4903      	ldr	r1, [pc, #12]	; (8006f40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40021000 	.word	0x40021000

08006f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e040      	b.n	8006fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fe f8ce 	bl	8005108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	; 0x24
 8006f70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8c0 	bl	8007108 <UART_SetConfig>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e022      	b.n	8006fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb3a 	bl	8007614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fbc1 	bl	8007758 <UART_CheckIdleState>
 8006fd6:	4603      	mov	r3, r0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 8082 	bne.w	80070fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UART_Transmit+0x26>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e07a      	b.n	8007100 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UART_Transmit+0x38>
 8007014:	2302      	movs	r3, #2
 8007016:	e073      	b.n	8007100 <HAL_UART_Transmit+0x120>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2221      	movs	r2, #33	; 0x21
 800702c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702e:	f7fe fabb 	bl	80055a8 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704c:	d108      	bne.n	8007060 <HAL_UART_Transmit+0x80>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007070:	e02d      	b.n	80070ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fbb4 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e039      	b.n	8007100 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	881a      	ldrh	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709e:	b292      	uxth	r2, r2
 80070a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	3302      	adds	r3, #2
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e008      	b.n	80070bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b292      	uxth	r2, r2
 80070b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1cb      	bne.n	8007072 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2140      	movs	r1, #64	; 0x40
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fb80 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e005      	b.n	8007100 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e000      	b.n	8007100 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3720      	adds	r7, #32
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800710c:	b08a      	sub	sp, #40	; 0x28
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	431a      	orrs	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	431a      	orrs	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4313      	orrs	r3, r2
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4ba5      	ldr	r3, [pc, #660]	; (80073cc <UART_SetConfig+0x2c4>)
 8007138:	4013      	ands	r3, r2
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007140:	430b      	orrs	r3, r1
 8007142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a9a      	ldr	r2, [pc, #616]	; (80073d0 <UART_SetConfig+0x2c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007170:	4313      	orrs	r3, r2
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a91      	ldr	r2, [pc, #580]	; (80073d4 <UART_SetConfig+0x2cc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d126      	bne.n	80071e0 <UART_SetConfig+0xd8>
 8007192:	4b91      	ldr	r3, [pc, #580]	; (80073d8 <UART_SetConfig+0x2d0>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d81b      	bhi.n	80071d8 <UART_SetConfig+0xd0>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0xa0>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071c9 	.word	0x080071c9
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071be:	e0d6      	b.n	800736e <UART_SetConfig+0x266>
 80071c0:	2302      	movs	r3, #2
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c6:	e0d2      	b.n	800736e <UART_SetConfig+0x266>
 80071c8:	2304      	movs	r3, #4
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e0ce      	b.n	800736e <UART_SetConfig+0x266>
 80071d0:	2308      	movs	r3, #8
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e0ca      	b.n	800736e <UART_SetConfig+0x266>
 80071d8:	2310      	movs	r3, #16
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e0c6      	b.n	800736e <UART_SetConfig+0x266>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a7d      	ldr	r2, [pc, #500]	; (80073dc <UART_SetConfig+0x2d4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d138      	bne.n	800725c <UART_SetConfig+0x154>
 80071ea:	4b7b      	ldr	r3, [pc, #492]	; (80073d8 <UART_SetConfig+0x2d0>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f0:	f003 030c 	and.w	r3, r3, #12
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d82d      	bhi.n	8007254 <UART_SetConfig+0x14c>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0xf8>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007235 	.word	0x08007235
 8007204:	08007255 	.word	0x08007255
 8007208:	08007255 	.word	0x08007255
 800720c:	08007255 	.word	0x08007255
 8007210:	08007245 	.word	0x08007245
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
 800721c:	08007255 	.word	0x08007255
 8007220:	0800723d 	.word	0x0800723d
 8007224:	08007255 	.word	0x08007255
 8007228:	08007255 	.word	0x08007255
 800722c:	08007255 	.word	0x08007255
 8007230:	0800724d 	.word	0x0800724d
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e098      	b.n	800736e <UART_SetConfig+0x266>
 800723c:	2302      	movs	r3, #2
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e094      	b.n	800736e <UART_SetConfig+0x266>
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e090      	b.n	800736e <UART_SetConfig+0x266>
 800724c:	2308      	movs	r3, #8
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007252:	e08c      	b.n	800736e <UART_SetConfig+0x266>
 8007254:	2310      	movs	r3, #16
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725a:	e088      	b.n	800736e <UART_SetConfig+0x266>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a5f      	ldr	r2, [pc, #380]	; (80073e0 <UART_SetConfig+0x2d8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d125      	bne.n	80072b2 <UART_SetConfig+0x1aa>
 8007266:	4b5c      	ldr	r3, [pc, #368]	; (80073d8 <UART_SetConfig+0x2d0>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007270:	2b30      	cmp	r3, #48	; 0x30
 8007272:	d016      	beq.n	80072a2 <UART_SetConfig+0x19a>
 8007274:	2b30      	cmp	r3, #48	; 0x30
 8007276:	d818      	bhi.n	80072aa <UART_SetConfig+0x1a2>
 8007278:	2b20      	cmp	r3, #32
 800727a:	d00a      	beq.n	8007292 <UART_SetConfig+0x18a>
 800727c:	2b20      	cmp	r3, #32
 800727e:	d814      	bhi.n	80072aa <UART_SetConfig+0x1a2>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <UART_SetConfig+0x182>
 8007284:	2b10      	cmp	r3, #16
 8007286:	d008      	beq.n	800729a <UART_SetConfig+0x192>
 8007288:	e00f      	b.n	80072aa <UART_SetConfig+0x1a2>
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007290:	e06d      	b.n	800736e <UART_SetConfig+0x266>
 8007292:	2302      	movs	r3, #2
 8007294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007298:	e069      	b.n	800736e <UART_SetConfig+0x266>
 800729a:	2304      	movs	r3, #4
 800729c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a0:	e065      	b.n	800736e <UART_SetConfig+0x266>
 80072a2:	2308      	movs	r3, #8
 80072a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a8:	e061      	b.n	800736e <UART_SetConfig+0x266>
 80072aa:	2310      	movs	r3, #16
 80072ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b0:	e05d      	b.n	800736e <UART_SetConfig+0x266>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4b      	ldr	r2, [pc, #300]	; (80073e4 <UART_SetConfig+0x2dc>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d125      	bne.n	8007308 <UART_SetConfig+0x200>
 80072bc:	4b46      	ldr	r3, [pc, #280]	; (80073d8 <UART_SetConfig+0x2d0>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072c6:	2bc0      	cmp	r3, #192	; 0xc0
 80072c8:	d016      	beq.n	80072f8 <UART_SetConfig+0x1f0>
 80072ca:	2bc0      	cmp	r3, #192	; 0xc0
 80072cc:	d818      	bhi.n	8007300 <UART_SetConfig+0x1f8>
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d00a      	beq.n	80072e8 <UART_SetConfig+0x1e0>
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d814      	bhi.n	8007300 <UART_SetConfig+0x1f8>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <UART_SetConfig+0x1d8>
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d008      	beq.n	80072f0 <UART_SetConfig+0x1e8>
 80072de:	e00f      	b.n	8007300 <UART_SetConfig+0x1f8>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e6:	e042      	b.n	800736e <UART_SetConfig+0x266>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ee:	e03e      	b.n	800736e <UART_SetConfig+0x266>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f6:	e03a      	b.n	800736e <UART_SetConfig+0x266>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fe:	e036      	b.n	800736e <UART_SetConfig+0x266>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007306:	e032      	b.n	800736e <UART_SetConfig+0x266>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a30      	ldr	r2, [pc, #192]	; (80073d0 <UART_SetConfig+0x2c8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d12a      	bne.n	8007368 <UART_SetConfig+0x260>
 8007312:	4b31      	ldr	r3, [pc, #196]	; (80073d8 <UART_SetConfig+0x2d0>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800731c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007320:	d01a      	beq.n	8007358 <UART_SetConfig+0x250>
 8007322:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007326:	d81b      	bhi.n	8007360 <UART_SetConfig+0x258>
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732c:	d00c      	beq.n	8007348 <UART_SetConfig+0x240>
 800732e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007332:	d815      	bhi.n	8007360 <UART_SetConfig+0x258>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <UART_SetConfig+0x238>
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733c:	d008      	beq.n	8007350 <UART_SetConfig+0x248>
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x258>
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e012      	b.n	800736e <UART_SetConfig+0x266>
 8007348:	2302      	movs	r3, #2
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734e:	e00e      	b.n	800736e <UART_SetConfig+0x266>
 8007350:	2304      	movs	r3, #4
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	e00a      	b.n	800736e <UART_SetConfig+0x266>
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735e:	e006      	b.n	800736e <UART_SetConfig+0x266>
 8007360:	2310      	movs	r3, #16
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007366:	e002      	b.n	800736e <UART_SetConfig+0x266>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <UART_SetConfig+0x2c8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	f040 808b 	bne.w	8007490 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800737a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800737e:	2b08      	cmp	r3, #8
 8007380:	d834      	bhi.n	80073ec <UART_SetConfig+0x2e4>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <UART_SetConfig+0x280>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073ed 	.word	0x080073ed
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073ed 	.word	0x080073ed
 8007398:	080073bb 	.word	0x080073bb
 800739c:	080073ed 	.word	0x080073ed
 80073a0:	080073ed 	.word	0x080073ed
 80073a4:	080073ed 	.word	0x080073ed
 80073a8:	080073c3 	.word	0x080073c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7ff f9e0 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 80073b0:	61f8      	str	r0, [r7, #28]
        break;
 80073b2:	e021      	b.n	80073f8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <UART_SetConfig+0x2e0>)
 80073b6:	61fb      	str	r3, [r7, #28]
        break;
 80073b8:	e01e      	b.n	80073f8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ba:	f7ff f941 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80073be:	61f8      	str	r0, [r7, #28]
        break;
 80073c0:	e01a      	b.n	80073f8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c6:	61fb      	str	r3, [r7, #28]
        break;
 80073c8:	e016      	b.n	80073f8 <UART_SetConfig+0x2f0>
 80073ca:	bf00      	nop
 80073cc:	efff69f3 	.word	0xefff69f3
 80073d0:	40008000 	.word	0x40008000
 80073d4:	40013800 	.word	0x40013800
 80073d8:	40021000 	.word	0x40021000
 80073dc:	40004400 	.word	0x40004400
 80073e0:	40004800 	.word	0x40004800
 80073e4:	40004c00 	.word	0x40004c00
 80073e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80fa 	beq.w	80075f4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	429a      	cmp	r2, r3
 800740e:	d305      	bcc.n	800741c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	429a      	cmp	r2, r3
 800741a:	d903      	bls.n	8007424 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007422:	e0e7      	b.n	80075f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2200      	movs	r2, #0
 8007428:	461c      	mov	r4, r3
 800742a:	4615      	mov	r5, r2
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	022b      	lsls	r3, r5, #8
 8007436:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800743a:	0222      	lsls	r2, r4, #8
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	6849      	ldr	r1, [r1, #4]
 8007440:	0849      	lsrs	r1, r1, #1
 8007442:	2000      	movs	r0, #0
 8007444:	4688      	mov	r8, r1
 8007446:	4681      	mov	r9, r0
 8007448:	eb12 0a08 	adds.w	sl, r2, r8
 800744c:	eb43 0b09 	adc.w	fp, r3, r9
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800745e:	4650      	mov	r0, sl
 8007460:	4659      	mov	r1, fp
 8007462:	f7f9 fc19 	bl	8000c98 <__aeabi_uldivmod>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4613      	mov	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007474:	d308      	bcc.n	8007488 <UART_SetConfig+0x380>
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800747c:	d204      	bcs.n	8007488 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	60da      	str	r2, [r3, #12]
 8007486:	e0b5      	b.n	80075f4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800748e:	e0b1      	b.n	80075f4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	d15d      	bne.n	8007556 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800749a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d827      	bhi.n	80074f2 <UART_SetConfig+0x3ea>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x3a0>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074cd 	.word	0x080074cd
 80074ac:	080074d5 	.word	0x080074d5
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074f3 	.word	0x080074f3
 80074b8:	080074e3 	.word	0x080074e3
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074f3 	.word	0x080074f3
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	080074eb 	.word	0x080074eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074cc:	f7ff f950 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 80074d0:	61f8      	str	r0, [r7, #28]
        break;
 80074d2:	e014      	b.n	80074fe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d4:	f7ff f962 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 80074d8:	61f8      	str	r0, [r7, #28]
        break;
 80074da:	e010      	b.n	80074fe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074dc:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <UART_SetConfig+0x508>)
 80074de:	61fb      	str	r3, [r7, #28]
        break;
 80074e0:	e00d      	b.n	80074fe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e2:	f7ff f8ad 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80074e6:	61f8      	str	r0, [r7, #28]
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ee:	61fb      	str	r3, [r7, #28]
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d077      	beq.n	80075f4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	005a      	lsls	r2, r3, #1
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	085b      	lsrs	r3, r3, #1
 800750e:	441a      	add	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b0f      	cmp	r3, #15
 800751e:	d916      	bls.n	800754e <UART_SetConfig+0x446>
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007526:	d212      	bcs.n	800754e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f023 030f 	bic.w	r3, r3, #15
 8007530:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	b29b      	uxth	r3, r3
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	b29a      	uxth	r2, r3
 800753e:	8afb      	ldrh	r3, [r7, #22]
 8007540:	4313      	orrs	r3, r2
 8007542:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	8afa      	ldrh	r2, [r7, #22]
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	e052      	b.n	80075f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007554:	e04e      	b.n	80075f4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800755a:	2b08      	cmp	r3, #8
 800755c:	d827      	bhi.n	80075ae <UART_SetConfig+0x4a6>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x45c>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	080075af 	.word	0x080075af
 8007574:	0800759f 	.word	0x0800759f
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
 8007584:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7ff f8f2 	bl	8006770 <HAL_RCC_GetPCLK1Freq>
 800758c:	61f8      	str	r0, [r7, #28]
        break;
 800758e:	e014      	b.n	80075ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7ff f904 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8007594:	61f8      	str	r0, [r7, #28]
        break;
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <UART_SetConfig+0x508>)
 800759a:	61fb      	str	r3, [r7, #28]
        break;
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7ff f84f 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80075a2:	61f8      	str	r0, [r7, #28]
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075aa:	61fb      	str	r3, [r7, #28]
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075b8:	bf00      	nop
    }

    if (pclk != 0U)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d019      	beq.n	80075f4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085a      	lsrs	r2, r3, #1
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d909      	bls.n	80075ee <UART_SetConfig+0x4e6>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d205      	bcs.n	80075ee <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e002      	b.n	80075f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800760e:	bf00      	nop
 8007610:	00f42400 	.word	0x00f42400

08007614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01a      	beq.n	800772a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007712:	d10a      	bne.n	800772a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	605a      	str	r2, [r3, #4]
  }
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af02      	add	r7, sp, #8
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007768:	f7fd ff1e 	bl	80055a8 <HAL_GetTick>
 800776c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b08      	cmp	r3, #8
 800777a:	d10e      	bne.n	800779a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f82d 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e023      	b.n	80077e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d10e      	bne.n	80077c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f817 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e00d      	b.n	80077e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b09c      	sub	sp, #112	; 0x70
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fa:	e0a5      	b.n	8007948 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	f000 80a1 	beq.w	8007948 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fd fecf 	bl	80055a8 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <UART_WaitOnFlagUntilTimeout+0x32>
 8007816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007818:	2b00      	cmp	r3, #0
 800781a:	d13e      	bne.n	800789a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007830:	667b      	str	r3, [r7, #100]	; 0x64
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800783a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800783c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007840:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	663b      	str	r3, [r7, #96]	; 0x60
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800786e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007870:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800787c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e5      	bne.n	800784e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2220      	movs	r2, #32
 8007886:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e067      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d04f      	beq.n	8007948 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b6:	d147      	bne.n	8007948 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e6      	bne.n	80078c2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	613b      	str	r3, [r7, #16]
   return(result);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f023 0301 	bic.w	r3, r3, #1
 800790a:	66bb      	str	r3, [r7, #104]	; 0x68
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007914:	623a      	str	r2, [r7, #32]
 8007916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	69f9      	ldr	r1, [r7, #28]
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	61bb      	str	r3, [r7, #24]
   return(result);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e5      	bne.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e010      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69da      	ldr	r2, [r3, #28]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4013      	ands	r3, r2
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	429a      	cmp	r2, r3
 8007964:	f43f af4a 	beq.w	80077fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3770      	adds	r7, #112	; 0x70
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	0000      	movs	r0, r0
 8007974:	0000      	movs	r0, r0
	...

08007978 <atan>:
 8007978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	ec55 4b10 	vmov	r4, r5, d0
 8007980:	4bc3      	ldr	r3, [pc, #780]	; (8007c90 <atan+0x318>)
 8007982:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007986:	429e      	cmp	r6, r3
 8007988:	46ab      	mov	fp, r5
 800798a:	dd18      	ble.n	80079be <atan+0x46>
 800798c:	4bc1      	ldr	r3, [pc, #772]	; (8007c94 <atan+0x31c>)
 800798e:	429e      	cmp	r6, r3
 8007990:	dc01      	bgt.n	8007996 <atan+0x1e>
 8007992:	d109      	bne.n	80079a8 <atan+0x30>
 8007994:	b144      	cbz	r4, 80079a8 <atan+0x30>
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
 800799a:	4620      	mov	r0, r4
 800799c:	4629      	mov	r1, r5
 800799e:	f7f8 fc7d 	bl	800029c <__adddf3>
 80079a2:	4604      	mov	r4, r0
 80079a4:	460d      	mov	r5, r1
 80079a6:	e006      	b.n	80079b6 <atan+0x3e>
 80079a8:	f1bb 0f00 	cmp.w	fp, #0
 80079ac:	f300 8131 	bgt.w	8007c12 <atan+0x29a>
 80079b0:	a59b      	add	r5, pc, #620	; (adr r5, 8007c20 <atan+0x2a8>)
 80079b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079b6:	ec45 4b10 	vmov	d0, r4, r5
 80079ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	4bb6      	ldr	r3, [pc, #728]	; (8007c98 <atan+0x320>)
 80079c0:	429e      	cmp	r6, r3
 80079c2:	dc14      	bgt.n	80079ee <atan+0x76>
 80079c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80079c8:	429e      	cmp	r6, r3
 80079ca:	dc0d      	bgt.n	80079e8 <atan+0x70>
 80079cc:	a396      	add	r3, pc, #600	; (adr r3, 8007c28 <atan+0x2b0>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	ee10 0a10 	vmov	r0, s0
 80079d6:	4629      	mov	r1, r5
 80079d8:	f7f8 fc60 	bl	800029c <__adddf3>
 80079dc:	4baf      	ldr	r3, [pc, #700]	; (8007c9c <atan+0x324>)
 80079de:	2200      	movs	r2, #0
 80079e0:	f7f9 f8a2 	bl	8000b28 <__aeabi_dcmpgt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1e6      	bne.n	80079b6 <atan+0x3e>
 80079e8:	f04f 3aff 	mov.w	sl, #4294967295
 80079ec:	e02b      	b.n	8007a46 <atan+0xce>
 80079ee:	f000 f9b7 	bl	8007d60 <fabs>
 80079f2:	4bab      	ldr	r3, [pc, #684]	; (8007ca0 <atan+0x328>)
 80079f4:	429e      	cmp	r6, r3
 80079f6:	ec55 4b10 	vmov	r4, r5, d0
 80079fa:	f300 80bf 	bgt.w	8007b7c <atan+0x204>
 80079fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007a02:	429e      	cmp	r6, r3
 8007a04:	f300 80a0 	bgt.w	8007b48 <atan+0x1d0>
 8007a08:	ee10 2a10 	vmov	r2, s0
 8007a0c:	ee10 0a10 	vmov	r0, s0
 8007a10:	462b      	mov	r3, r5
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f8 fc42 	bl	800029c <__adddf3>
 8007a18:	4ba0      	ldr	r3, [pc, #640]	; (8007c9c <atan+0x324>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f7f8 fc3c 	bl	8000298 <__aeabi_dsub>
 8007a20:	2200      	movs	r2, #0
 8007a22:	4606      	mov	r6, r0
 8007a24:	460f      	mov	r7, r1
 8007a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f8 fc35 	bl	800029c <__adddf3>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 ff0f 	bl	800085c <__aeabi_ddiv>
 8007a3e:	f04f 0a00 	mov.w	sl, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	4622      	mov	r2, r4
 8007a48:	462b      	mov	r3, r5
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	f7f8 fddb 	bl	8000608 <__aeabi_dmul>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4680      	mov	r8, r0
 8007a58:	4689      	mov	r9, r1
 8007a5a:	f7f8 fdd5 	bl	8000608 <__aeabi_dmul>
 8007a5e:	a374      	add	r3, pc, #464	; (adr r3, 8007c30 <atan+0x2b8>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	f7f8 fdce 	bl	8000608 <__aeabi_dmul>
 8007a6c:	a372      	add	r3, pc, #456	; (adr r3, 8007c38 <atan+0x2c0>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fc13 	bl	800029c <__adddf3>
 8007a76:	4632      	mov	r2, r6
 8007a78:	463b      	mov	r3, r7
 8007a7a:	f7f8 fdc5 	bl	8000608 <__aeabi_dmul>
 8007a7e:	a370      	add	r3, pc, #448	; (adr r3, 8007c40 <atan+0x2c8>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fc0a 	bl	800029c <__adddf3>
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	f7f8 fdbc 	bl	8000608 <__aeabi_dmul>
 8007a90:	a36d      	add	r3, pc, #436	; (adr r3, 8007c48 <atan+0x2d0>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fc01 	bl	800029c <__adddf3>
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	f7f8 fdb3 	bl	8000608 <__aeabi_dmul>
 8007aa2:	a36b      	add	r3, pc, #428	; (adr r3, 8007c50 <atan+0x2d8>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fbf8 	bl	800029c <__adddf3>
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	a368      	add	r3, pc, #416	; (adr r3, 8007c58 <atan+0x2e0>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fbef 	bl	800029c <__adddf3>
 8007abe:	4642      	mov	r2, r8
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	f7f8 fda1 	bl	8000608 <__aeabi_dmul>
 8007ac6:	a366      	add	r3, pc, #408	; (adr r3, 8007c60 <atan+0x2e8>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	4680      	mov	r8, r0
 8007ace:	4689      	mov	r9, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f8 fd98 	bl	8000608 <__aeabi_dmul>
 8007ad8:	a363      	add	r3, pc, #396	; (adr r3, 8007c68 <atan+0x2f0>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f7f8 fbdb 	bl	8000298 <__aeabi_dsub>
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	f7f8 fd8f 	bl	8000608 <__aeabi_dmul>
 8007aea:	a361      	add	r3, pc, #388	; (adr r3, 8007c70 <atan+0x2f8>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fbd2 	bl	8000298 <__aeabi_dsub>
 8007af4:	4632      	mov	r2, r6
 8007af6:	463b      	mov	r3, r7
 8007af8:	f7f8 fd86 	bl	8000608 <__aeabi_dmul>
 8007afc:	a35e      	add	r3, pc, #376	; (adr r3, 8007c78 <atan+0x300>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fbc9 	bl	8000298 <__aeabi_dsub>
 8007b06:	4632      	mov	r2, r6
 8007b08:	463b      	mov	r3, r7
 8007b0a:	f7f8 fd7d 	bl	8000608 <__aeabi_dmul>
 8007b0e:	a35c      	add	r3, pc, #368	; (adr r3, 8007c80 <atan+0x308>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fbc0 	bl	8000298 <__aeabi_dsub>
 8007b18:	4632      	mov	r2, r6
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	f7f8 fd74 	bl	8000608 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 fbb8 	bl	800029c <__adddf3>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f7f8 fd6a 	bl	8000608 <__aeabi_dmul>
 8007b34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	d14b      	bne.n	8007bd6 <atan+0x25e>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fba9 	bl	8000298 <__aeabi_dsub>
 8007b46:	e72c      	b.n	80079a2 <atan+0x2a>
 8007b48:	ee10 0a10 	vmov	r0, s0
 8007b4c:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <atan+0x324>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 fba1 	bl	8000298 <__aeabi_dsub>
 8007b56:	4b51      	ldr	r3, [pc, #324]	; (8007c9c <atan+0x324>)
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fb9b 	bl	800029c <__adddf3>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	f7f8 fe75 	bl	800085c <__aeabi_ddiv>
 8007b72:	f04f 0a01 	mov.w	sl, #1
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	e764      	b.n	8007a46 <atan+0xce>
 8007b7c:	4b49      	ldr	r3, [pc, #292]	; (8007ca4 <atan+0x32c>)
 8007b7e:	429e      	cmp	r6, r3
 8007b80:	da1d      	bge.n	8007bbe <atan+0x246>
 8007b82:	ee10 0a10 	vmov	r0, s0
 8007b86:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <atan+0x330>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fb84 	bl	8000298 <__aeabi_dsub>
 8007b90:	4b45      	ldr	r3, [pc, #276]	; (8007ca8 <atan+0x330>)
 8007b92:	4606      	mov	r6, r0
 8007b94:	460f      	mov	r7, r1
 8007b96:	2200      	movs	r2, #0
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f7f8 fd34 	bl	8000608 <__aeabi_dmul>
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <atan+0x324>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f7f8 fb7a 	bl	800029c <__adddf3>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 fe54 	bl	800085c <__aeabi_ddiv>
 8007bb4:	f04f 0a02 	mov.w	sl, #2
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	e743      	b.n	8007a46 <atan+0xce>
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	ee10 2a10 	vmov	r2, s0
 8007bc4:	4939      	ldr	r1, [pc, #228]	; (8007cac <atan+0x334>)
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7f8 fe48 	bl	800085c <__aeabi_ddiv>
 8007bcc:	f04f 0a03 	mov.w	sl, #3
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	e737      	b.n	8007a46 <atan+0xce>
 8007bd6:	4b36      	ldr	r3, [pc, #216]	; (8007cb0 <atan+0x338>)
 8007bd8:	4e36      	ldr	r6, [pc, #216]	; (8007cb4 <atan+0x33c>)
 8007bda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007bde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007be2:	e9da 2300 	ldrd	r2, r3, [sl]
 8007be6:	f7f8 fb57 	bl	8000298 <__aeabi_dsub>
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	f7f8 fb53 	bl	8000298 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007bfa:	f7f8 fb4d 	bl	8000298 <__aeabi_dsub>
 8007bfe:	f1bb 0f00 	cmp.w	fp, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	f6bf aed6 	bge.w	80079b6 <atan+0x3e>
 8007c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c0e:	461d      	mov	r5, r3
 8007c10:	e6d1      	b.n	80079b6 <atan+0x3e>
 8007c12:	a51d      	add	r5, pc, #116	; (adr r5, 8007c88 <atan+0x310>)
 8007c14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c18:	e6cd      	b.n	80079b6 <atan+0x3e>
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w
 8007c20:	54442d18 	.word	0x54442d18
 8007c24:	bff921fb 	.word	0xbff921fb
 8007c28:	8800759c 	.word	0x8800759c
 8007c2c:	7e37e43c 	.word	0x7e37e43c
 8007c30:	e322da11 	.word	0xe322da11
 8007c34:	3f90ad3a 	.word	0x3f90ad3a
 8007c38:	24760deb 	.word	0x24760deb
 8007c3c:	3fa97b4b 	.word	0x3fa97b4b
 8007c40:	a0d03d51 	.word	0xa0d03d51
 8007c44:	3fb10d66 	.word	0x3fb10d66
 8007c48:	c54c206e 	.word	0xc54c206e
 8007c4c:	3fb745cd 	.word	0x3fb745cd
 8007c50:	920083ff 	.word	0x920083ff
 8007c54:	3fc24924 	.word	0x3fc24924
 8007c58:	5555550d 	.word	0x5555550d
 8007c5c:	3fd55555 	.word	0x3fd55555
 8007c60:	2c6a6c2f 	.word	0x2c6a6c2f
 8007c64:	bfa2b444 	.word	0xbfa2b444
 8007c68:	52defd9a 	.word	0x52defd9a
 8007c6c:	3fadde2d 	.word	0x3fadde2d
 8007c70:	af749a6d 	.word	0xaf749a6d
 8007c74:	3fb3b0f2 	.word	0x3fb3b0f2
 8007c78:	fe231671 	.word	0xfe231671
 8007c7c:	3fbc71c6 	.word	0x3fbc71c6
 8007c80:	9998ebc4 	.word	0x9998ebc4
 8007c84:	3fc99999 	.word	0x3fc99999
 8007c88:	54442d18 	.word	0x54442d18
 8007c8c:	3ff921fb 	.word	0x3ff921fb
 8007c90:	440fffff 	.word	0x440fffff
 8007c94:	7ff00000 	.word	0x7ff00000
 8007c98:	3fdbffff 	.word	0x3fdbffff
 8007c9c:	3ff00000 	.word	0x3ff00000
 8007ca0:	3ff2ffff 	.word	0x3ff2ffff
 8007ca4:	40038000 	.word	0x40038000
 8007ca8:	3ff80000 	.word	0x3ff80000
 8007cac:	bff00000 	.word	0xbff00000
 8007cb0:	0800ef48 	.word	0x0800ef48
 8007cb4:	0800ef28 	.word	0x0800ef28

08007cb8 <cos>:
 8007cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cba:	ec53 2b10 	vmov	r2, r3, d0
 8007cbe:	4826      	ldr	r0, [pc, #152]	; (8007d58 <cos+0xa0>)
 8007cc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cc4:	4281      	cmp	r1, r0
 8007cc6:	dc06      	bgt.n	8007cd6 <cos+0x1e>
 8007cc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007d50 <cos+0x98>
 8007ccc:	b005      	add	sp, #20
 8007cce:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd2:	f001 bf69 	b.w	8009ba8 <__kernel_cos>
 8007cd6:	4821      	ldr	r0, [pc, #132]	; (8007d5c <cos+0xa4>)
 8007cd8:	4281      	cmp	r1, r0
 8007cda:	dd09      	ble.n	8007cf0 <cos+0x38>
 8007cdc:	ee10 0a10 	vmov	r0, s0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f7f8 fad9 	bl	8000298 <__aeabi_dsub>
 8007ce6:	ec41 0b10 	vmov	d0, r0, r1
 8007cea:	b005      	add	sp, #20
 8007cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cf0:	4668      	mov	r0, sp
 8007cf2:	f001 fc99 	bl	8009628 <__ieee754_rem_pio2>
 8007cf6:	f000 0003 	and.w	r0, r0, #3
 8007cfa:	2801      	cmp	r0, #1
 8007cfc:	d00b      	beq.n	8007d16 <cos+0x5e>
 8007cfe:	2802      	cmp	r0, #2
 8007d00:	d016      	beq.n	8007d30 <cos+0x78>
 8007d02:	b9e0      	cbnz	r0, 8007d3e <cos+0x86>
 8007d04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d08:	ed9d 0b00 	vldr	d0, [sp]
 8007d0c:	f001 ff4c 	bl	8009ba8 <__kernel_cos>
 8007d10:	ec51 0b10 	vmov	r0, r1, d0
 8007d14:	e7e7      	b.n	8007ce6 <cos+0x2e>
 8007d16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d1a:	ed9d 0b00 	vldr	d0, [sp]
 8007d1e:	f002 fb5b 	bl	800a3d8 <__kernel_sin>
 8007d22:	ec53 2b10 	vmov	r2, r3, d0
 8007d26:	ee10 0a10 	vmov	r0, s0
 8007d2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d2e:	e7da      	b.n	8007ce6 <cos+0x2e>
 8007d30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d34:	ed9d 0b00 	vldr	d0, [sp]
 8007d38:	f001 ff36 	bl	8009ba8 <__kernel_cos>
 8007d3c:	e7f1      	b.n	8007d22 <cos+0x6a>
 8007d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d42:	ed9d 0b00 	vldr	d0, [sp]
 8007d46:	2001      	movs	r0, #1
 8007d48:	f002 fb46 	bl	800a3d8 <__kernel_sin>
 8007d4c:	e7e0      	b.n	8007d10 <cos+0x58>
 8007d4e:	bf00      	nop
	...
 8007d58:	3fe921fb 	.word	0x3fe921fb
 8007d5c:	7fefffff 	.word	0x7fefffff

08007d60 <fabs>:
 8007d60:	ec51 0b10 	vmov	r0, r1, d0
 8007d64:	ee10 2a10 	vmov	r2, s0
 8007d68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d6c:	ec43 2b10 	vmov	d0, r2, r3
 8007d70:	4770      	bx	lr
 8007d72:	0000      	movs	r0, r0
 8007d74:	0000      	movs	r0, r0
	...

08007d78 <floor>:
 8007d78:	ec51 0b10 	vmov	r0, r1, d0
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007d84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007d88:	2e13      	cmp	r6, #19
 8007d8a:	ee10 5a10 	vmov	r5, s0
 8007d8e:	ee10 8a10 	vmov	r8, s0
 8007d92:	460c      	mov	r4, r1
 8007d94:	dc32      	bgt.n	8007dfc <floor+0x84>
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	da14      	bge.n	8007dc4 <floor+0x4c>
 8007d9a:	a333      	add	r3, pc, #204	; (adr r3, 8007e68 <floor+0xf0>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa7c 	bl	800029c <__adddf3>
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	f7f8 febe 	bl	8000b28 <__aeabi_dcmpgt>
 8007dac:	b138      	cbz	r0, 8007dbe <floor+0x46>
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	da57      	bge.n	8007e62 <floor+0xea>
 8007db2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007db6:	431d      	orrs	r5, r3
 8007db8:	d001      	beq.n	8007dbe <floor+0x46>
 8007dba:	4c2d      	ldr	r4, [pc, #180]	; (8007e70 <floor+0xf8>)
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	e025      	b.n	8007e10 <floor+0x98>
 8007dc4:	4f2b      	ldr	r7, [pc, #172]	; (8007e74 <floor+0xfc>)
 8007dc6:	4137      	asrs	r7, r6
 8007dc8:	ea01 0307 	and.w	r3, r1, r7
 8007dcc:	4303      	orrs	r3, r0
 8007dce:	d01f      	beq.n	8007e10 <floor+0x98>
 8007dd0:	a325      	add	r3, pc, #148	; (adr r3, 8007e68 <floor+0xf0>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fa61 	bl	800029c <__adddf3>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f7f8 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d0eb      	beq.n	8007dbe <floor+0x46>
 8007de6:	2c00      	cmp	r4, #0
 8007de8:	bfbe      	ittt	lt
 8007dea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007dee:	fa43 f606 	asrlt.w	r6, r3, r6
 8007df2:	19a4      	addlt	r4, r4, r6
 8007df4:	ea24 0407 	bic.w	r4, r4, r7
 8007df8:	2500      	movs	r5, #0
 8007dfa:	e7e0      	b.n	8007dbe <floor+0x46>
 8007dfc:	2e33      	cmp	r6, #51	; 0x33
 8007dfe:	dd0b      	ble.n	8007e18 <floor+0xa0>
 8007e00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e04:	d104      	bne.n	8007e10 <floor+0x98>
 8007e06:	ee10 2a10 	vmov	r2, s0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	f7f8 fa46 	bl	800029c <__adddf3>
 8007e10:	ec41 0b10 	vmov	d0, r0, r1
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e20:	fa23 f707 	lsr.w	r7, r3, r7
 8007e24:	4207      	tst	r7, r0
 8007e26:	d0f3      	beq.n	8007e10 <floor+0x98>
 8007e28:	a30f      	add	r3, pc, #60	; (adr r3, 8007e68 <floor+0xf0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fa35 	bl	800029c <__adddf3>
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	f7f8 fe77 	bl	8000b28 <__aeabi_dcmpgt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0bf      	beq.n	8007dbe <floor+0x46>
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	da02      	bge.n	8007e48 <floor+0xd0>
 8007e42:	2e14      	cmp	r6, #20
 8007e44:	d103      	bne.n	8007e4e <floor+0xd6>
 8007e46:	3401      	adds	r4, #1
 8007e48:	ea25 0507 	bic.w	r5, r5, r7
 8007e4c:	e7b7      	b.n	8007dbe <floor+0x46>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007e54:	fa03 f606 	lsl.w	r6, r3, r6
 8007e58:	4435      	add	r5, r6
 8007e5a:	4545      	cmp	r5, r8
 8007e5c:	bf38      	it	cc
 8007e5e:	18e4      	addcc	r4, r4, r3
 8007e60:	e7f2      	b.n	8007e48 <floor+0xd0>
 8007e62:	2500      	movs	r5, #0
 8007e64:	462c      	mov	r4, r5
 8007e66:	e7aa      	b.n	8007dbe <floor+0x46>
 8007e68:	8800759c 	.word	0x8800759c
 8007e6c:	7e37e43c 	.word	0x7e37e43c
 8007e70:	bff00000 	.word	0xbff00000
 8007e74:	000fffff 	.word	0x000fffff

08007e78 <sin>:
 8007e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e7a:	ec53 2b10 	vmov	r2, r3, d0
 8007e7e:	4828      	ldr	r0, [pc, #160]	; (8007f20 <sin+0xa8>)
 8007e80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e84:	4281      	cmp	r1, r0
 8007e86:	dc07      	bgt.n	8007e98 <sin+0x20>
 8007e88:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f18 <sin+0xa0>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	b005      	add	sp, #20
 8007e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e94:	f002 baa0 	b.w	800a3d8 <__kernel_sin>
 8007e98:	4822      	ldr	r0, [pc, #136]	; (8007f24 <sin+0xac>)
 8007e9a:	4281      	cmp	r1, r0
 8007e9c:	dd09      	ble.n	8007eb2 <sin+0x3a>
 8007e9e:	ee10 0a10 	vmov	r0, s0
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f7f8 f9f8 	bl	8000298 <__aeabi_dsub>
 8007ea8:	ec41 0b10 	vmov	d0, r0, r1
 8007eac:	b005      	add	sp, #20
 8007eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eb2:	4668      	mov	r0, sp
 8007eb4:	f001 fbb8 	bl	8009628 <__ieee754_rem_pio2>
 8007eb8:	f000 0003 	and.w	r0, r0, #3
 8007ebc:	2801      	cmp	r0, #1
 8007ebe:	d00c      	beq.n	8007eda <sin+0x62>
 8007ec0:	2802      	cmp	r0, #2
 8007ec2:	d011      	beq.n	8007ee8 <sin+0x70>
 8007ec4:	b9f0      	cbnz	r0, 8007f04 <sin+0x8c>
 8007ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eca:	ed9d 0b00 	vldr	d0, [sp]
 8007ece:	2001      	movs	r0, #1
 8007ed0:	f002 fa82 	bl	800a3d8 <__kernel_sin>
 8007ed4:	ec51 0b10 	vmov	r0, r1, d0
 8007ed8:	e7e6      	b.n	8007ea8 <sin+0x30>
 8007eda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ede:	ed9d 0b00 	vldr	d0, [sp]
 8007ee2:	f001 fe61 	bl	8009ba8 <__kernel_cos>
 8007ee6:	e7f5      	b.n	8007ed4 <sin+0x5c>
 8007ee8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eec:	ed9d 0b00 	vldr	d0, [sp]
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	f002 fa71 	bl	800a3d8 <__kernel_sin>
 8007ef6:	ec53 2b10 	vmov	r2, r3, d0
 8007efa:	ee10 0a10 	vmov	r0, s0
 8007efe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f02:	e7d1      	b.n	8007ea8 <sin+0x30>
 8007f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f08:	ed9d 0b00 	vldr	d0, [sp]
 8007f0c:	f001 fe4c 	bl	8009ba8 <__kernel_cos>
 8007f10:	e7f1      	b.n	8007ef6 <sin+0x7e>
 8007f12:	bf00      	nop
 8007f14:	f3af 8000 	nop.w
	...
 8007f20:	3fe921fb 	.word	0x3fe921fb
 8007f24:	7fefffff 	.word	0x7fefffff

08007f28 <tan>:
 8007f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f2a:	ec53 2b10 	vmov	r2, r3, d0
 8007f2e:	4816      	ldr	r0, [pc, #88]	; (8007f88 <tan+0x60>)
 8007f30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f34:	4281      	cmp	r1, r0
 8007f36:	dc07      	bgt.n	8007f48 <tan+0x20>
 8007f38:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8007f80 <tan+0x58>
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	b005      	add	sp, #20
 8007f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f44:	f002 bb08 	b.w	800a558 <__kernel_tan>
 8007f48:	4810      	ldr	r0, [pc, #64]	; (8007f8c <tan+0x64>)
 8007f4a:	4281      	cmp	r1, r0
 8007f4c:	dd09      	ble.n	8007f62 <tan+0x3a>
 8007f4e:	ee10 0a10 	vmov	r0, s0
 8007f52:	4619      	mov	r1, r3
 8007f54:	f7f8 f9a0 	bl	8000298 <__aeabi_dsub>
 8007f58:	ec41 0b10 	vmov	d0, r0, r1
 8007f5c:	b005      	add	sp, #20
 8007f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f62:	4668      	mov	r0, sp
 8007f64:	f001 fb60 	bl	8009628 <__ieee754_rem_pio2>
 8007f68:	0040      	lsls	r0, r0, #1
 8007f6a:	f000 0002 	and.w	r0, r0, #2
 8007f6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f72:	ed9d 0b00 	vldr	d0, [sp]
 8007f76:	f1c0 0001 	rsb	r0, r0, #1
 8007f7a:	f002 faed 	bl	800a558 <__kernel_tan>
 8007f7e:	e7ed      	b.n	8007f5c <tan+0x34>
	...
 8007f88:	3fe921fb 	.word	0x3fe921fb
 8007f8c:	7fefffff 	.word	0x7fefffff

08007f90 <acos>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	ed2d 8b02 	vpush	{d8}
 8007f96:	ec55 4b10 	vmov	r4, r5, d0
 8007f9a:	f000 f8d5 	bl	8008148 <__ieee754_acos>
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8007faa:	eef0 8a60 	vmov.f32	s17, s1
 8007fae:	f7f8 fdc5 	bl	8000b3c <__aeabi_dcmpun>
 8007fb2:	b9a8      	cbnz	r0, 8007fe0 <acos+0x50>
 8007fb4:	ec45 4b10 	vmov	d0, r4, r5
 8007fb8:	f7ff fed2 	bl	8007d60 <fabs>
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <acos+0x60>)
 8007fbe:	ec51 0b10 	vmov	r0, r1, d0
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 fdb0 	bl	8000b28 <__aeabi_dcmpgt>
 8007fc8:	b150      	cbz	r0, 8007fe0 <acos+0x50>
 8007fca:	f002 fd9f 	bl	800ab0c <__errno>
 8007fce:	ecbd 8b02 	vpop	{d8}
 8007fd2:	2321      	movs	r3, #33	; 0x21
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fda:	4806      	ldr	r0, [pc, #24]	; (8007ff4 <acos+0x64>)
 8007fdc:	f002 bd04 	b.w	800a9e8 <nan>
 8007fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8007fe4:	eef0 0a68 	vmov.f32	s1, s17
 8007fe8:	ecbd 8b02 	vpop	{d8}
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	3ff00000 	.word	0x3ff00000
 8007ff4:	0800f317 	.word	0x0800f317

08007ff8 <asin>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	ed2d 8b02 	vpush	{d8}
 8007ffe:	ec55 4b10 	vmov	r4, r5, d0
 8008002:	f000 fb01 	bl	8008608 <__ieee754_asin>
 8008006:	4622      	mov	r2, r4
 8008008:	462b      	mov	r3, r5
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	eeb0 8a40 	vmov.f32	s16, s0
 8008012:	eef0 8a60 	vmov.f32	s17, s1
 8008016:	f7f8 fd91 	bl	8000b3c <__aeabi_dcmpun>
 800801a:	b9a8      	cbnz	r0, 8008048 <asin+0x50>
 800801c:	ec45 4b10 	vmov	d0, r4, r5
 8008020:	f7ff fe9e 	bl	8007d60 <fabs>
 8008024:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <asin+0x60>)
 8008026:	ec51 0b10 	vmov	r0, r1, d0
 800802a:	2200      	movs	r2, #0
 800802c:	f7f8 fd7c 	bl	8000b28 <__aeabi_dcmpgt>
 8008030:	b150      	cbz	r0, 8008048 <asin+0x50>
 8008032:	f002 fd6b 	bl	800ab0c <__errno>
 8008036:	ecbd 8b02 	vpop	{d8}
 800803a:	2321      	movs	r3, #33	; 0x21
 800803c:	6003      	str	r3, [r0, #0]
 800803e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008042:	4806      	ldr	r0, [pc, #24]	; (800805c <asin+0x64>)
 8008044:	f002 bcd0 	b.w	800a9e8 <nan>
 8008048:	eeb0 0a48 	vmov.f32	s0, s16
 800804c:	eef0 0a68 	vmov.f32	s1, s17
 8008050:	ecbd 8b02 	vpop	{d8}
 8008054:	bd38      	pop	{r3, r4, r5, pc}
 8008056:	bf00      	nop
 8008058:	3ff00000 	.word	0x3ff00000
 800805c:	0800f317 	.word	0x0800f317

08008060 <atan2>:
 8008060:	f000 bce6 	b.w	8008a30 <__ieee754_atan2>

08008064 <pow>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	ed2d 8b02 	vpush	{d8}
 800806a:	eeb0 8a40 	vmov.f32	s16, s0
 800806e:	eef0 8a60 	vmov.f32	s17, s1
 8008072:	ec55 4b11 	vmov	r4, r5, d1
 8008076:	f000 fda7 	bl	8008bc8 <__ieee754_pow>
 800807a:	4622      	mov	r2, r4
 800807c:	462b      	mov	r3, r5
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	ec57 6b10 	vmov	r6, r7, d0
 8008086:	f7f8 fd59 	bl	8000b3c <__aeabi_dcmpun>
 800808a:	2800      	cmp	r0, #0
 800808c:	d13b      	bne.n	8008106 <pow+0xa2>
 800808e:	ec51 0b18 	vmov	r0, r1, d8
 8008092:	2200      	movs	r2, #0
 8008094:	2300      	movs	r3, #0
 8008096:	f7f8 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800809a:	b1b8      	cbz	r0, 80080cc <pow+0x68>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4620      	mov	r0, r4
 80080a2:	4629      	mov	r1, r5
 80080a4:	f7f8 fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d146      	bne.n	800813a <pow+0xd6>
 80080ac:	ec45 4b10 	vmov	d0, r4, r5
 80080b0:	f002 fc8c 	bl	800a9cc <finite>
 80080b4:	b338      	cbz	r0, 8008106 <pow+0xa2>
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 fd15 	bl	8000aec <__aeabi_dcmplt>
 80080c2:	b300      	cbz	r0, 8008106 <pow+0xa2>
 80080c4:	f002 fd22 	bl	800ab0c <__errno>
 80080c8:	2322      	movs	r3, #34	; 0x22
 80080ca:	e01b      	b.n	8008104 <pow+0xa0>
 80080cc:	ec47 6b10 	vmov	d0, r6, r7
 80080d0:	f002 fc7c 	bl	800a9cc <finite>
 80080d4:	b9e0      	cbnz	r0, 8008110 <pow+0xac>
 80080d6:	eeb0 0a48 	vmov.f32	s0, s16
 80080da:	eef0 0a68 	vmov.f32	s1, s17
 80080de:	f002 fc75 	bl	800a9cc <finite>
 80080e2:	b1a8      	cbz	r0, 8008110 <pow+0xac>
 80080e4:	ec45 4b10 	vmov	d0, r4, r5
 80080e8:	f002 fc70 	bl	800a9cc <finite>
 80080ec:	b180      	cbz	r0, 8008110 <pow+0xac>
 80080ee:	4632      	mov	r2, r6
 80080f0:	463b      	mov	r3, r7
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 fd21 	bl	8000b3c <__aeabi_dcmpun>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d0e2      	beq.n	80080c4 <pow+0x60>
 80080fe:	f002 fd05 	bl	800ab0c <__errno>
 8008102:	2321      	movs	r3, #33	; 0x21
 8008104:	6003      	str	r3, [r0, #0]
 8008106:	ecbd 8b02 	vpop	{d8}
 800810a:	ec47 6b10 	vmov	d0, r6, r7
 800810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0f2      	beq.n	8008106 <pow+0xa2>
 8008120:	eeb0 0a48 	vmov.f32	s0, s16
 8008124:	eef0 0a68 	vmov.f32	s1, s17
 8008128:	f002 fc50 	bl	800a9cc <finite>
 800812c:	2800      	cmp	r0, #0
 800812e:	d0ea      	beq.n	8008106 <pow+0xa2>
 8008130:	ec45 4b10 	vmov	d0, r4, r5
 8008134:	f002 fc4a 	bl	800a9cc <finite>
 8008138:	e7c3      	b.n	80080c2 <pow+0x5e>
 800813a:	4f01      	ldr	r7, [pc, #4]	; (8008140 <pow+0xdc>)
 800813c:	2600      	movs	r6, #0
 800813e:	e7e2      	b.n	8008106 <pow+0xa2>
 8008140:	3ff00000 	.word	0x3ff00000
 8008144:	00000000 	.word	0x00000000

08008148 <__ieee754_acos>:
 8008148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	ec55 4b10 	vmov	r4, r5, d0
 8008150:	49b7      	ldr	r1, [pc, #732]	; (8008430 <__ieee754_acos+0x2e8>)
 8008152:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008156:	428b      	cmp	r3, r1
 8008158:	dd1b      	ble.n	8008192 <__ieee754_acos+0x4a>
 800815a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800815e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008162:	4323      	orrs	r3, r4
 8008164:	d106      	bne.n	8008174 <__ieee754_acos+0x2c>
 8008166:	2d00      	cmp	r5, #0
 8008168:	f300 8211 	bgt.w	800858e <__ieee754_acos+0x446>
 800816c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80083c8 <__ieee754_acos+0x280>
 8008170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	ee10 2a10 	vmov	r2, s0
 8008178:	462b      	mov	r3, r5
 800817a:	ee10 0a10 	vmov	r0, s0
 800817e:	4629      	mov	r1, r5
 8008180:	f7f8 f88a 	bl	8000298 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	f7f8 fb68 	bl	800085c <__aeabi_ddiv>
 800818c:	ec41 0b10 	vmov	d0, r0, r1
 8008190:	e7ee      	b.n	8008170 <__ieee754_acos+0x28>
 8008192:	49a8      	ldr	r1, [pc, #672]	; (8008434 <__ieee754_acos+0x2ec>)
 8008194:	428b      	cmp	r3, r1
 8008196:	f300 8087 	bgt.w	80082a8 <__ieee754_acos+0x160>
 800819a:	4aa7      	ldr	r2, [pc, #668]	; (8008438 <__ieee754_acos+0x2f0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	f340 81f9 	ble.w	8008594 <__ieee754_acos+0x44c>
 80081a2:	ee10 2a10 	vmov	r2, s0
 80081a6:	ee10 0a10 	vmov	r0, s0
 80081aa:	462b      	mov	r3, r5
 80081ac:	4629      	mov	r1, r5
 80081ae:	f7f8 fa2b 	bl	8000608 <__aeabi_dmul>
 80081b2:	a387      	add	r3, pc, #540	; (adr r3, 80083d0 <__ieee754_acos+0x288>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	4606      	mov	r6, r0
 80081ba:	460f      	mov	r7, r1
 80081bc:	f7f8 fa24 	bl	8000608 <__aeabi_dmul>
 80081c0:	a385      	add	r3, pc, #532	; (adr r3, 80083d8 <__ieee754_acos+0x290>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f869 	bl	800029c <__adddf3>
 80081ca:	4632      	mov	r2, r6
 80081cc:	463b      	mov	r3, r7
 80081ce:	f7f8 fa1b 	bl	8000608 <__aeabi_dmul>
 80081d2:	a383      	add	r3, pc, #524	; (adr r3, 80083e0 <__ieee754_acos+0x298>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 f85e 	bl	8000298 <__aeabi_dsub>
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	f7f8 fa12 	bl	8000608 <__aeabi_dmul>
 80081e4:	a380      	add	r3, pc, #512	; (adr r3, 80083e8 <__ieee754_acos+0x2a0>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f7f8 f857 	bl	800029c <__adddf3>
 80081ee:	4632      	mov	r2, r6
 80081f0:	463b      	mov	r3, r7
 80081f2:	f7f8 fa09 	bl	8000608 <__aeabi_dmul>
 80081f6:	a37e      	add	r3, pc, #504	; (adr r3, 80083f0 <__ieee754_acos+0x2a8>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f84c 	bl	8000298 <__aeabi_dsub>
 8008200:	4632      	mov	r2, r6
 8008202:	463b      	mov	r3, r7
 8008204:	f7f8 fa00 	bl	8000608 <__aeabi_dmul>
 8008208:	a37b      	add	r3, pc, #492	; (adr r3, 80083f8 <__ieee754_acos+0x2b0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 f845 	bl	800029c <__adddf3>
 8008212:	4632      	mov	r2, r6
 8008214:	463b      	mov	r3, r7
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	a379      	add	r3, pc, #484	; (adr r3, 8008400 <__ieee754_acos+0x2b8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	4680      	mov	r8, r0
 8008222:	4689      	mov	r9, r1
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	a376      	add	r3, pc, #472	; (adr r3, 8008408 <__ieee754_acos+0x2c0>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f831 	bl	8000298 <__aeabi_dsub>
 8008236:	4632      	mov	r2, r6
 8008238:	463b      	mov	r3, r7
 800823a:	f7f8 f9e5 	bl	8000608 <__aeabi_dmul>
 800823e:	a374      	add	r3, pc, #464	; (adr r3, 8008410 <__ieee754_acos+0x2c8>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 f82a 	bl	800029c <__adddf3>
 8008248:	4632      	mov	r2, r6
 800824a:	463b      	mov	r3, r7
 800824c:	f7f8 f9dc 	bl	8000608 <__aeabi_dmul>
 8008250:	a371      	add	r3, pc, #452	; (adr r3, 8008418 <__ieee754_acos+0x2d0>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f81f 	bl	8000298 <__aeabi_dsub>
 800825a:	4632      	mov	r2, r6
 800825c:	463b      	mov	r3, r7
 800825e:	f7f8 f9d3 	bl	8000608 <__aeabi_dmul>
 8008262:	4b76      	ldr	r3, [pc, #472]	; (800843c <__ieee754_acos+0x2f4>)
 8008264:	2200      	movs	r2, #0
 8008266:	f7f8 f819 	bl	800029c <__adddf3>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4640      	mov	r0, r8
 8008270:	4649      	mov	r1, r9
 8008272:	f7f8 faf3 	bl	800085c <__aeabi_ddiv>
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	a167      	add	r1, pc, #412	; (adr r1, 8008420 <__ieee754_acos+0x2d8>)
 8008284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008288:	f7f8 f806 	bl	8000298 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f800 	bl	8000298 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	a162      	add	r1, pc, #392	; (adr r1, 8008428 <__ieee754_acos+0x2e0>)
 800829e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082a2:	f7f7 fff9 	bl	8000298 <__aeabi_dsub>
 80082a6:	e771      	b.n	800818c <__ieee754_acos+0x44>
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	f280 80cb 	bge.w	8008444 <__ieee754_acos+0x2fc>
 80082ae:	ee10 0a10 	vmov	r0, s0
 80082b2:	4b62      	ldr	r3, [pc, #392]	; (800843c <__ieee754_acos+0x2f4>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f7 fff0 	bl	800029c <__adddf3>
 80082bc:	4b60      	ldr	r3, [pc, #384]	; (8008440 <__ieee754_acos+0x2f8>)
 80082be:	2200      	movs	r2, #0
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	a342      	add	r3, pc, #264	; (adr r3, 80083d0 <__ieee754_acos+0x288>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	4604      	mov	r4, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	f7f8 f99b 	bl	8000608 <__aeabi_dmul>
 80082d2:	a341      	add	r3, pc, #260	; (adr r3, 80083d8 <__ieee754_acos+0x290>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f7f7 ffe0 	bl	800029c <__adddf3>
 80082dc:	4622      	mov	r2, r4
 80082de:	462b      	mov	r3, r5
 80082e0:	f7f8 f992 	bl	8000608 <__aeabi_dmul>
 80082e4:	a33e      	add	r3, pc, #248	; (adr r3, 80083e0 <__ieee754_acos+0x298>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffd5 	bl	8000298 <__aeabi_dsub>
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	f7f8 f989 	bl	8000608 <__aeabi_dmul>
 80082f6:	a33c      	add	r3, pc, #240	; (adr r3, 80083e8 <__ieee754_acos+0x2a0>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f7 ffce 	bl	800029c <__adddf3>
 8008300:	4622      	mov	r2, r4
 8008302:	462b      	mov	r3, r5
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	a339      	add	r3, pc, #228	; (adr r3, 80083f0 <__ieee754_acos+0x2a8>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f7 ffc3 	bl	8000298 <__aeabi_dsub>
 8008312:	4622      	mov	r2, r4
 8008314:	462b      	mov	r3, r5
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	a337      	add	r3, pc, #220	; (adr r3, 80083f8 <__ieee754_acos+0x2b0>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f7f7 ffbc 	bl	800029c <__adddf3>
 8008324:	4622      	mov	r2, r4
 8008326:	462b      	mov	r3, r5
 8008328:	f7f8 f96e 	bl	8000608 <__aeabi_dmul>
 800832c:	ec45 4b10 	vmov	d0, r4, r5
 8008330:	4680      	mov	r8, r0
 8008332:	4689      	mov	r9, r1
 8008334:	f001 fb84 	bl	8009a40 <__ieee754_sqrt>
 8008338:	a331      	add	r3, pc, #196	; (adr r3, 8008400 <__ieee754_acos+0x2b8>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	ec57 6b10 	vmov	r6, r7, d0
 8008346:	f7f8 f95f 	bl	8000608 <__aeabi_dmul>
 800834a:	a32f      	add	r3, pc, #188	; (adr r3, 8008408 <__ieee754_acos+0x2c0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ffa2 	bl	8000298 <__aeabi_dsub>
 8008354:	4622      	mov	r2, r4
 8008356:	462b      	mov	r3, r5
 8008358:	f7f8 f956 	bl	8000608 <__aeabi_dmul>
 800835c:	a32c      	add	r3, pc, #176	; (adr r3, 8008410 <__ieee754_acos+0x2c8>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f7 ff9b 	bl	800029c <__adddf3>
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	f7f8 f94d 	bl	8000608 <__aeabi_dmul>
 800836e:	a32a      	add	r3, pc, #168	; (adr r3, 8008418 <__ieee754_acos+0x2d0>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f7f7 ff90 	bl	8000298 <__aeabi_dsub>
 8008378:	4622      	mov	r2, r4
 800837a:	462b      	mov	r3, r5
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	4b2e      	ldr	r3, [pc, #184]	; (800843c <__ieee754_acos+0x2f4>)
 8008382:	2200      	movs	r2, #0
 8008384:	f7f7 ff8a 	bl	800029c <__adddf3>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4640      	mov	r0, r8
 800838e:	4649      	mov	r1, r9
 8008390:	f7f8 fa64 	bl	800085c <__aeabi_ddiv>
 8008394:	4632      	mov	r2, r6
 8008396:	463b      	mov	r3, r7
 8008398:	f7f8 f936 	bl	8000608 <__aeabi_dmul>
 800839c:	a320      	add	r3, pc, #128	; (adr r3, 8008420 <__ieee754_acos+0x2d8>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff79 	bl	8000298 <__aeabi_dsub>
 80083a6:	4632      	mov	r2, r6
 80083a8:	463b      	mov	r3, r7
 80083aa:	f7f7 ff77 	bl	800029c <__adddf3>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	f7f7 ff73 	bl	800029c <__adddf3>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	a103      	add	r1, pc, #12	; (adr r1, 80083c8 <__ieee754_acos+0x280>)
 80083bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083c0:	e76f      	b.n	80082a2 <__ieee754_acos+0x15a>
 80083c2:	bf00      	nop
 80083c4:	f3af 8000 	nop.w
 80083c8:	54442d18 	.word	0x54442d18
 80083cc:	400921fb 	.word	0x400921fb
 80083d0:	0dfdf709 	.word	0x0dfdf709
 80083d4:	3f023de1 	.word	0x3f023de1
 80083d8:	7501b288 	.word	0x7501b288
 80083dc:	3f49efe0 	.word	0x3f49efe0
 80083e0:	b5688f3b 	.word	0xb5688f3b
 80083e4:	3fa48228 	.word	0x3fa48228
 80083e8:	0e884455 	.word	0x0e884455
 80083ec:	3fc9c155 	.word	0x3fc9c155
 80083f0:	03eb6f7d 	.word	0x03eb6f7d
 80083f4:	3fd4d612 	.word	0x3fd4d612
 80083f8:	55555555 	.word	0x55555555
 80083fc:	3fc55555 	.word	0x3fc55555
 8008400:	b12e9282 	.word	0xb12e9282
 8008404:	3fb3b8c5 	.word	0x3fb3b8c5
 8008408:	1b8d0159 	.word	0x1b8d0159
 800840c:	3fe6066c 	.word	0x3fe6066c
 8008410:	9c598ac8 	.word	0x9c598ac8
 8008414:	40002ae5 	.word	0x40002ae5
 8008418:	1c8a2d4b 	.word	0x1c8a2d4b
 800841c:	40033a27 	.word	0x40033a27
 8008420:	33145c07 	.word	0x33145c07
 8008424:	3c91a626 	.word	0x3c91a626
 8008428:	54442d18 	.word	0x54442d18
 800842c:	3ff921fb 	.word	0x3ff921fb
 8008430:	3fefffff 	.word	0x3fefffff
 8008434:	3fdfffff 	.word	0x3fdfffff
 8008438:	3c600000 	.word	0x3c600000
 800843c:	3ff00000 	.word	0x3ff00000
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	ee10 2a10 	vmov	r2, s0
 8008448:	462b      	mov	r3, r5
 800844a:	496d      	ldr	r1, [pc, #436]	; (8008600 <__ieee754_acos+0x4b8>)
 800844c:	2000      	movs	r0, #0
 800844e:	f7f7 ff23 	bl	8000298 <__aeabi_dsub>
 8008452:	4b6c      	ldr	r3, [pc, #432]	; (8008604 <__ieee754_acos+0x4bc>)
 8008454:	2200      	movs	r2, #0
 8008456:	f7f8 f8d7 	bl	8000608 <__aeabi_dmul>
 800845a:	4604      	mov	r4, r0
 800845c:	460d      	mov	r5, r1
 800845e:	ec45 4b10 	vmov	d0, r4, r5
 8008462:	f001 faed 	bl	8009a40 <__ieee754_sqrt>
 8008466:	a34e      	add	r3, pc, #312	; (adr r3, 80085a0 <__ieee754_acos+0x458>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	ec59 8b10 	vmov	r8, r9, d0
 8008474:	f7f8 f8c8 	bl	8000608 <__aeabi_dmul>
 8008478:	a34b      	add	r3, pc, #300	; (adr r3, 80085a8 <__ieee754_acos+0x460>)
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	f7f7 ff0d 	bl	800029c <__adddf3>
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	f7f8 f8bf 	bl	8000608 <__aeabi_dmul>
 800848a:	a349      	add	r3, pc, #292	; (adr r3, 80085b0 <__ieee754_acos+0x468>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f7 ff02 	bl	8000298 <__aeabi_dsub>
 8008494:	4622      	mov	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f7f8 f8b6 	bl	8000608 <__aeabi_dmul>
 800849c:	a346      	add	r3, pc, #280	; (adr r3, 80085b8 <__ieee754_acos+0x470>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 fefb 	bl	800029c <__adddf3>
 80084a6:	4622      	mov	r2, r4
 80084a8:	462b      	mov	r3, r5
 80084aa:	f7f8 f8ad 	bl	8000608 <__aeabi_dmul>
 80084ae:	a344      	add	r3, pc, #272	; (adr r3, 80085c0 <__ieee754_acos+0x478>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f7 fef0 	bl	8000298 <__aeabi_dsub>
 80084b8:	4622      	mov	r2, r4
 80084ba:	462b      	mov	r3, r5
 80084bc:	f7f8 f8a4 	bl	8000608 <__aeabi_dmul>
 80084c0:	a341      	add	r3, pc, #260	; (adr r3, 80085c8 <__ieee754_acos+0x480>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f7 fee9 	bl	800029c <__adddf3>
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	f7f8 f89b 	bl	8000608 <__aeabi_dmul>
 80084d2:	a33f      	add	r3, pc, #252	; (adr r3, 80085d0 <__ieee754_acos+0x488>)
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	4682      	mov	sl, r0
 80084da:	468b      	mov	fp, r1
 80084dc:	4620      	mov	r0, r4
 80084de:	4629      	mov	r1, r5
 80084e0:	f7f8 f892 	bl	8000608 <__aeabi_dmul>
 80084e4:	a33c      	add	r3, pc, #240	; (adr r3, 80085d8 <__ieee754_acos+0x490>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fed5 	bl	8000298 <__aeabi_dsub>
 80084ee:	4622      	mov	r2, r4
 80084f0:	462b      	mov	r3, r5
 80084f2:	f7f8 f889 	bl	8000608 <__aeabi_dmul>
 80084f6:	a33a      	add	r3, pc, #232	; (adr r3, 80085e0 <__ieee754_acos+0x498>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f7 fece 	bl	800029c <__adddf3>
 8008500:	4622      	mov	r2, r4
 8008502:	462b      	mov	r3, r5
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	a337      	add	r3, pc, #220	; (adr r3, 80085e8 <__ieee754_acos+0x4a0>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fec3 	bl	8000298 <__aeabi_dsub>
 8008512:	4622      	mov	r2, r4
 8008514:	462b      	mov	r3, r5
 8008516:	f7f8 f877 	bl	8000608 <__aeabi_dmul>
 800851a:	4b39      	ldr	r3, [pc, #228]	; (8008600 <__ieee754_acos+0x4b8>)
 800851c:	2200      	movs	r2, #0
 800851e:	f7f7 febd 	bl	800029c <__adddf3>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4650      	mov	r0, sl
 8008528:	4659      	mov	r1, fp
 800852a:	f7f8 f997 	bl	800085c <__aeabi_ddiv>
 800852e:	4642      	mov	r2, r8
 8008530:	464b      	mov	r3, r9
 8008532:	f7f8 f869 	bl	8000608 <__aeabi_dmul>
 8008536:	2600      	movs	r6, #0
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	4632      	mov	r2, r6
 800853e:	464b      	mov	r3, r9
 8008540:	4630      	mov	r0, r6
 8008542:	4649      	mov	r1, r9
 8008544:	f7f8 f860 	bl	8000608 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4620      	mov	r0, r4
 800854e:	4629      	mov	r1, r5
 8008550:	f7f7 fea2 	bl	8000298 <__aeabi_dsub>
 8008554:	4632      	mov	r2, r6
 8008556:	4604      	mov	r4, r0
 8008558:	460d      	mov	r5, r1
 800855a:	464b      	mov	r3, r9
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f7 fe9c 	bl	800029c <__adddf3>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4620      	mov	r0, r4
 800856a:	4629      	mov	r1, r5
 800856c:	f7f8 f976 	bl	800085c <__aeabi_ddiv>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4650      	mov	r0, sl
 8008576:	4659      	mov	r1, fp
 8008578:	f7f7 fe90 	bl	800029c <__adddf3>
 800857c:	4632      	mov	r2, r6
 800857e:	464b      	mov	r3, r9
 8008580:	f7f7 fe8c 	bl	800029c <__adddf3>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	f7f7 fe88 	bl	800029c <__adddf3>
 800858c:	e5fe      	b.n	800818c <__ieee754_acos+0x44>
 800858e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80085f0 <__ieee754_acos+0x4a8>
 8008592:	e5ed      	b.n	8008170 <__ieee754_acos+0x28>
 8008594:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80085f8 <__ieee754_acos+0x4b0>
 8008598:	e5ea      	b.n	8008170 <__ieee754_acos+0x28>
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w
 80085a0:	0dfdf709 	.word	0x0dfdf709
 80085a4:	3f023de1 	.word	0x3f023de1
 80085a8:	7501b288 	.word	0x7501b288
 80085ac:	3f49efe0 	.word	0x3f49efe0
 80085b0:	b5688f3b 	.word	0xb5688f3b
 80085b4:	3fa48228 	.word	0x3fa48228
 80085b8:	0e884455 	.word	0x0e884455
 80085bc:	3fc9c155 	.word	0x3fc9c155
 80085c0:	03eb6f7d 	.word	0x03eb6f7d
 80085c4:	3fd4d612 	.word	0x3fd4d612
 80085c8:	55555555 	.word	0x55555555
 80085cc:	3fc55555 	.word	0x3fc55555
 80085d0:	b12e9282 	.word	0xb12e9282
 80085d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80085d8:	1b8d0159 	.word	0x1b8d0159
 80085dc:	3fe6066c 	.word	0x3fe6066c
 80085e0:	9c598ac8 	.word	0x9c598ac8
 80085e4:	40002ae5 	.word	0x40002ae5
 80085e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80085ec:	40033a27 	.word	0x40033a27
	...
 80085f8:	54442d18 	.word	0x54442d18
 80085fc:	3ff921fb 	.word	0x3ff921fb
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	3fe00000 	.word	0x3fe00000

08008608 <__ieee754_asin>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	ed2d 8b04 	vpush	{d8-d9}
 8008610:	ec55 4b10 	vmov	r4, r5, d0
 8008614:	4bcc      	ldr	r3, [pc, #816]	; (8008948 <__ieee754_asin+0x340>)
 8008616:	b083      	sub	sp, #12
 8008618:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800861c:	4598      	cmp	r8, r3
 800861e:	9501      	str	r5, [sp, #4]
 8008620:	dd35      	ble.n	800868e <__ieee754_asin+0x86>
 8008622:	ee10 3a10 	vmov	r3, s0
 8008626:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800862a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800862e:	ea58 0303 	orrs.w	r3, r8, r3
 8008632:	d117      	bne.n	8008664 <__ieee754_asin+0x5c>
 8008634:	a3aa      	add	r3, pc, #680	; (adr r3, 80088e0 <__ieee754_asin+0x2d8>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	ee10 0a10 	vmov	r0, s0
 800863e:	4629      	mov	r1, r5
 8008640:	f7f7 ffe2 	bl	8000608 <__aeabi_dmul>
 8008644:	a3a8      	add	r3, pc, #672	; (adr r3, 80088e8 <__ieee754_asin+0x2e0>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4630      	mov	r0, r6
 800865c:	4639      	mov	r1, r7
 800865e:	f7f7 fe1d 	bl	800029c <__adddf3>
 8008662:	e00b      	b.n	800867c <__ieee754_asin+0x74>
 8008664:	ee10 2a10 	vmov	r2, s0
 8008668:	462b      	mov	r3, r5
 800866a:	ee10 0a10 	vmov	r0, s0
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 fe12 	bl	8000298 <__aeabi_dsub>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	f7f8 f8f0 	bl	800085c <__aeabi_ddiv>
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	ec45 4b10 	vmov	d0, r4, r5
 8008684:	b003      	add	sp, #12
 8008686:	ecbd 8b04 	vpop	{d8-d9}
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	4baf      	ldr	r3, [pc, #700]	; (800894c <__ieee754_asin+0x344>)
 8008690:	4598      	cmp	r8, r3
 8008692:	dc11      	bgt.n	80086b8 <__ieee754_asin+0xb0>
 8008694:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008698:	f280 80ae 	bge.w	80087f8 <__ieee754_asin+0x1f0>
 800869c:	a394      	add	r3, pc, #592	; (adr r3, 80088f0 <__ieee754_asin+0x2e8>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	ee10 0a10 	vmov	r0, s0
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 fdf8 	bl	800029c <__adddf3>
 80086ac:	4ba8      	ldr	r3, [pc, #672]	; (8008950 <__ieee754_asin+0x348>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	f7f8 fa3a 	bl	8000b28 <__aeabi_dcmpgt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d1e3      	bne.n	8008680 <__ieee754_asin+0x78>
 80086b8:	ec45 4b10 	vmov	d0, r4, r5
 80086bc:	f7ff fb50 	bl	8007d60 <fabs>
 80086c0:	49a3      	ldr	r1, [pc, #652]	; (8008950 <__ieee754_asin+0x348>)
 80086c2:	ec53 2b10 	vmov	r2, r3, d0
 80086c6:	2000      	movs	r0, #0
 80086c8:	f7f7 fde6 	bl	8000298 <__aeabi_dsub>
 80086cc:	4ba1      	ldr	r3, [pc, #644]	; (8008954 <__ieee754_asin+0x34c>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	f7f7 ff9a 	bl	8000608 <__aeabi_dmul>
 80086d4:	a388      	add	r3, pc, #544	; (adr r3, 80088f8 <__ieee754_asin+0x2f0>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	4604      	mov	r4, r0
 80086dc:	460d      	mov	r5, r1
 80086de:	f7f7 ff93 	bl	8000608 <__aeabi_dmul>
 80086e2:	a387      	add	r3, pc, #540	; (adr r3, 8008900 <__ieee754_asin+0x2f8>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdd8 	bl	800029c <__adddf3>
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	f7f7 ff8a 	bl	8000608 <__aeabi_dmul>
 80086f4:	a384      	add	r3, pc, #528	; (adr r3, 8008908 <__ieee754_asin+0x300>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdcd 	bl	8000298 <__aeabi_dsub>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	f7f7 ff81 	bl	8000608 <__aeabi_dmul>
 8008706:	a382      	add	r3, pc, #520	; (adr r3, 8008910 <__ieee754_asin+0x308>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdc6 	bl	800029c <__adddf3>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff78 	bl	8000608 <__aeabi_dmul>
 8008718:	a37f      	add	r3, pc, #508	; (adr r3, 8008918 <__ieee754_asin+0x310>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fdbb 	bl	8000298 <__aeabi_dsub>
 8008722:	4622      	mov	r2, r4
 8008724:	462b      	mov	r3, r5
 8008726:	f7f7 ff6f 	bl	8000608 <__aeabi_dmul>
 800872a:	a37d      	add	r3, pc, #500	; (adr r3, 8008920 <__ieee754_asin+0x318>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 fdb4 	bl	800029c <__adddf3>
 8008734:	4622      	mov	r2, r4
 8008736:	462b      	mov	r3, r5
 8008738:	f7f7 ff66 	bl	8000608 <__aeabi_dmul>
 800873c:	a37a      	add	r3, pc, #488	; (adr r3, 8008928 <__ieee754_asin+0x320>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	ec41 0b18 	vmov	d8, r0, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 ff5d 	bl	8000608 <__aeabi_dmul>
 800874e:	a378      	add	r3, pc, #480	; (adr r3, 8008930 <__ieee754_asin+0x328>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 fda0 	bl	8000298 <__aeabi_dsub>
 8008758:	4622      	mov	r2, r4
 800875a:	462b      	mov	r3, r5
 800875c:	f7f7 ff54 	bl	8000608 <__aeabi_dmul>
 8008760:	a375      	add	r3, pc, #468	; (adr r3, 8008938 <__ieee754_asin+0x330>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 fd99 	bl	800029c <__adddf3>
 800876a:	4622      	mov	r2, r4
 800876c:	462b      	mov	r3, r5
 800876e:	f7f7 ff4b 	bl	8000608 <__aeabi_dmul>
 8008772:	a373      	add	r3, pc, #460	; (adr r3, 8008940 <__ieee754_asin+0x338>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 fd8e 	bl	8000298 <__aeabi_dsub>
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	4b72      	ldr	r3, [pc, #456]	; (8008950 <__ieee754_asin+0x348>)
 8008786:	2200      	movs	r2, #0
 8008788:	f7f7 fd88 	bl	800029c <__adddf3>
 800878c:	ec45 4b10 	vmov	d0, r4, r5
 8008790:	4606      	mov	r6, r0
 8008792:	460f      	mov	r7, r1
 8008794:	f001 f954 	bl	8009a40 <__ieee754_sqrt>
 8008798:	4b6f      	ldr	r3, [pc, #444]	; (8008958 <__ieee754_asin+0x350>)
 800879a:	4598      	cmp	r8, r3
 800879c:	ec5b ab10 	vmov	sl, fp, d0
 80087a0:	f340 80dc 	ble.w	800895c <__ieee754_asin+0x354>
 80087a4:	4632      	mov	r2, r6
 80087a6:	463b      	mov	r3, r7
 80087a8:	ec51 0b18 	vmov	r0, r1, d8
 80087ac:	f7f8 f856 	bl	800085c <__aeabi_ddiv>
 80087b0:	4652      	mov	r2, sl
 80087b2:	465b      	mov	r3, fp
 80087b4:	f7f7 ff28 	bl	8000608 <__aeabi_dmul>
 80087b8:	4652      	mov	r2, sl
 80087ba:	465b      	mov	r3, fp
 80087bc:	f7f7 fd6e 	bl	800029c <__adddf3>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	f7f7 fd6a 	bl	800029c <__adddf3>
 80087c8:	a347      	add	r3, pc, #284	; (adr r3, 80088e8 <__ieee754_asin+0x2e0>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fd63 	bl	8000298 <__aeabi_dsub>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	a142      	add	r1, pc, #264	; (adr r1, 80088e0 <__ieee754_asin+0x2d8>)
 80087d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087dc:	f7f7 fd5c 	bl	8000298 <__aeabi_dsub>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfdc      	itt	le
 80087e6:	4602      	movle	r2, r0
 80087e8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	bfdc      	itt	le
 80087f2:	4614      	movle	r4, r2
 80087f4:	461d      	movle	r5, r3
 80087f6:	e743      	b.n	8008680 <__ieee754_asin+0x78>
 80087f8:	ee10 2a10 	vmov	r2, s0
 80087fc:	ee10 0a10 	vmov	r0, s0
 8008800:	462b      	mov	r3, r5
 8008802:	4629      	mov	r1, r5
 8008804:	f7f7 ff00 	bl	8000608 <__aeabi_dmul>
 8008808:	a33b      	add	r3, pc, #236	; (adr r3, 80088f8 <__ieee754_asin+0x2f0>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	f7f7 fef9 	bl	8000608 <__aeabi_dmul>
 8008816:	a33a      	add	r3, pc, #232	; (adr r3, 8008900 <__ieee754_asin+0x2f8>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	f7f7 fd3e 	bl	800029c <__adddf3>
 8008820:	4632      	mov	r2, r6
 8008822:	463b      	mov	r3, r7
 8008824:	f7f7 fef0 	bl	8000608 <__aeabi_dmul>
 8008828:	a337      	add	r3, pc, #220	; (adr r3, 8008908 <__ieee754_asin+0x300>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 fd33 	bl	8000298 <__aeabi_dsub>
 8008832:	4632      	mov	r2, r6
 8008834:	463b      	mov	r3, r7
 8008836:	f7f7 fee7 	bl	8000608 <__aeabi_dmul>
 800883a:	a335      	add	r3, pc, #212	; (adr r3, 8008910 <__ieee754_asin+0x308>)
 800883c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008840:	f7f7 fd2c 	bl	800029c <__adddf3>
 8008844:	4632      	mov	r2, r6
 8008846:	463b      	mov	r3, r7
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	a332      	add	r3, pc, #200	; (adr r3, 8008918 <__ieee754_asin+0x310>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f7f7 fd21 	bl	8000298 <__aeabi_dsub>
 8008856:	4632      	mov	r2, r6
 8008858:	463b      	mov	r3, r7
 800885a:	f7f7 fed5 	bl	8000608 <__aeabi_dmul>
 800885e:	a330      	add	r3, pc, #192	; (adr r3, 8008920 <__ieee754_asin+0x318>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fd1a 	bl	800029c <__adddf3>
 8008868:	4632      	mov	r2, r6
 800886a:	463b      	mov	r3, r7
 800886c:	f7f7 fecc 	bl	8000608 <__aeabi_dmul>
 8008870:	a32d      	add	r3, pc, #180	; (adr r3, 8008928 <__ieee754_asin+0x320>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	4680      	mov	r8, r0
 8008878:	4689      	mov	r9, r1
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f7 fec3 	bl	8000608 <__aeabi_dmul>
 8008882:	a32b      	add	r3, pc, #172	; (adr r3, 8008930 <__ieee754_asin+0x328>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fd06 	bl	8000298 <__aeabi_dsub>
 800888c:	4632      	mov	r2, r6
 800888e:	463b      	mov	r3, r7
 8008890:	f7f7 feba 	bl	8000608 <__aeabi_dmul>
 8008894:	a328      	add	r3, pc, #160	; (adr r3, 8008938 <__ieee754_asin+0x330>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fcff 	bl	800029c <__adddf3>
 800889e:	4632      	mov	r2, r6
 80088a0:	463b      	mov	r3, r7
 80088a2:	f7f7 feb1 	bl	8000608 <__aeabi_dmul>
 80088a6:	a326      	add	r3, pc, #152	; (adr r3, 8008940 <__ieee754_asin+0x338>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fcf4 	bl	8000298 <__aeabi_dsub>
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	f7f7 fea8 	bl	8000608 <__aeabi_dmul>
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <__ieee754_asin+0x348>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f7 fcee 	bl	800029c <__adddf3>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f7 ffc8 	bl	800085c <__aeabi_ddiv>
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	f7f7 fe9a 	bl	8000608 <__aeabi_dmul>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4620      	mov	r0, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	e6bf      	b.n	800865e <__ieee754_asin+0x56>
 80088de:	bf00      	nop
 80088e0:	54442d18 	.word	0x54442d18
 80088e4:	3ff921fb 	.word	0x3ff921fb
 80088e8:	33145c07 	.word	0x33145c07
 80088ec:	3c91a626 	.word	0x3c91a626
 80088f0:	8800759c 	.word	0x8800759c
 80088f4:	7e37e43c 	.word	0x7e37e43c
 80088f8:	0dfdf709 	.word	0x0dfdf709
 80088fc:	3f023de1 	.word	0x3f023de1
 8008900:	7501b288 	.word	0x7501b288
 8008904:	3f49efe0 	.word	0x3f49efe0
 8008908:	b5688f3b 	.word	0xb5688f3b
 800890c:	3fa48228 	.word	0x3fa48228
 8008910:	0e884455 	.word	0x0e884455
 8008914:	3fc9c155 	.word	0x3fc9c155
 8008918:	03eb6f7d 	.word	0x03eb6f7d
 800891c:	3fd4d612 	.word	0x3fd4d612
 8008920:	55555555 	.word	0x55555555
 8008924:	3fc55555 	.word	0x3fc55555
 8008928:	b12e9282 	.word	0xb12e9282
 800892c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008930:	1b8d0159 	.word	0x1b8d0159
 8008934:	3fe6066c 	.word	0x3fe6066c
 8008938:	9c598ac8 	.word	0x9c598ac8
 800893c:	40002ae5 	.word	0x40002ae5
 8008940:	1c8a2d4b 	.word	0x1c8a2d4b
 8008944:	40033a27 	.word	0x40033a27
 8008948:	3fefffff 	.word	0x3fefffff
 800894c:	3fdfffff 	.word	0x3fdfffff
 8008950:	3ff00000 	.word	0x3ff00000
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	3fef3332 	.word	0x3fef3332
 800895c:	ee10 2a10 	vmov	r2, s0
 8008960:	ee10 0a10 	vmov	r0, s0
 8008964:	465b      	mov	r3, fp
 8008966:	4659      	mov	r1, fp
 8008968:	f7f7 fc98 	bl	800029c <__adddf3>
 800896c:	4632      	mov	r2, r6
 800896e:	463b      	mov	r3, r7
 8008970:	ec41 0b19 	vmov	d9, r0, r1
 8008974:	ec51 0b18 	vmov	r0, r1, d8
 8008978:	f7f7 ff70 	bl	800085c <__aeabi_ddiv>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	ec51 0b19 	vmov	r0, r1, d9
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	f04f 0800 	mov.w	r8, #0
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	4642      	mov	r2, r8
 8008992:	465b      	mov	r3, fp
 8008994:	4640      	mov	r0, r8
 8008996:	4659      	mov	r1, fp
 8008998:	f7f7 fe36 	bl	8000608 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	4629      	mov	r1, r5
 80089a4:	f7f7 fc78 	bl	8000298 <__aeabi_dsub>
 80089a8:	4642      	mov	r2, r8
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	465b      	mov	r3, fp
 80089b0:	4650      	mov	r0, sl
 80089b2:	4659      	mov	r1, fp
 80089b4:	f7f7 fc72 	bl	800029c <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 ff4c 	bl	800085c <__aeabi_ddiv>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	f7f7 fc68 	bl	800029c <__adddf3>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	a113      	add	r1, pc, #76	; (adr r1, 8008a20 <__ieee754_asin+0x418>)
 80089d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d6:	f7f7 fc5f 	bl	8000298 <__aeabi_dsub>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 fc59 	bl	8000298 <__aeabi_dsub>
 80089e6:	4642      	mov	r2, r8
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	465b      	mov	r3, fp
 80089ee:	4640      	mov	r0, r8
 80089f0:	4659      	mov	r1, fp
 80089f2:	f7f7 fc53 	bl	800029c <__adddf3>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	a10b      	add	r1, pc, #44	; (adr r1, 8008a28 <__ieee754_asin+0x420>)
 80089fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a00:	f7f7 fc4a 	bl	8000298 <__aeabi_dsub>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fc44 	bl	8000298 <__aeabi_dsub>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	a104      	add	r1, pc, #16	; (adr r1, 8008a28 <__ieee754_asin+0x420>)
 8008a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1a:	e6df      	b.n	80087dc <__ieee754_asin+0x1d4>
 8008a1c:	f3af 8000 	nop.w
 8008a20:	33145c07 	.word	0x33145c07
 8008a24:	3c91a626 	.word	0x3c91a626
 8008a28:	54442d18 	.word	0x54442d18
 8008a2c:	3fe921fb 	.word	0x3fe921fb

08008a30 <__ieee754_atan2>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	ec57 6b11 	vmov	r6, r7, d1
 8008a38:	4273      	negs	r3, r6
 8008a3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008bc0 <__ieee754_atan2+0x190>
 8008a3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008a42:	4333      	orrs	r3, r6
 8008a44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008a48:	4573      	cmp	r3, lr
 8008a4a:	ec51 0b10 	vmov	r0, r1, d0
 8008a4e:	ee11 8a10 	vmov	r8, s2
 8008a52:	d80a      	bhi.n	8008a6a <__ieee754_atan2+0x3a>
 8008a54:	4244      	negs	r4, r0
 8008a56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a5a:	4304      	orrs	r4, r0
 8008a5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008a60:	4574      	cmp	r4, lr
 8008a62:	ee10 9a10 	vmov	r9, s0
 8008a66:	468c      	mov	ip, r1
 8008a68:	d907      	bls.n	8008a7a <__ieee754_atan2+0x4a>
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	f7f7 fc15 	bl	800029c <__adddf3>
 8008a72:	ec41 0b10 	vmov	d0, r0, r1
 8008a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008a7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a82:	4334      	orrs	r4, r6
 8008a84:	d103      	bne.n	8008a8e <__ieee754_atan2+0x5e>
 8008a86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8a:	f7fe bf75 	b.w	8007978 <atan>
 8008a8e:	17bc      	asrs	r4, r7, #30
 8008a90:	f004 0402 	and.w	r4, r4, #2
 8008a94:	ea53 0909 	orrs.w	r9, r3, r9
 8008a98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008a9c:	d107      	bne.n	8008aae <__ieee754_atan2+0x7e>
 8008a9e:	2c02      	cmp	r4, #2
 8008aa0:	d060      	beq.n	8008b64 <__ieee754_atan2+0x134>
 8008aa2:	2c03      	cmp	r4, #3
 8008aa4:	d1e5      	bne.n	8008a72 <__ieee754_atan2+0x42>
 8008aa6:	a142      	add	r1, pc, #264	; (adr r1, 8008bb0 <__ieee754_atan2+0x180>)
 8008aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aac:	e7e1      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008aae:	ea52 0808 	orrs.w	r8, r2, r8
 8008ab2:	d106      	bne.n	8008ac2 <__ieee754_atan2+0x92>
 8008ab4:	f1bc 0f00 	cmp.w	ip, #0
 8008ab8:	da5f      	bge.n	8008b7a <__ieee754_atan2+0x14a>
 8008aba:	a13f      	add	r1, pc, #252	; (adr r1, 8008bb8 <__ieee754_atan2+0x188>)
 8008abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac0:	e7d7      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008ac2:	4572      	cmp	r2, lr
 8008ac4:	d10f      	bne.n	8008ae6 <__ieee754_atan2+0xb6>
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	f104 34ff 	add.w	r4, r4, #4294967295
 8008acc:	d107      	bne.n	8008ade <__ieee754_atan2+0xae>
 8008ace:	2c02      	cmp	r4, #2
 8008ad0:	d84c      	bhi.n	8008b6c <__ieee754_atan2+0x13c>
 8008ad2:	4b35      	ldr	r3, [pc, #212]	; (8008ba8 <__ieee754_atan2+0x178>)
 8008ad4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008ad8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008adc:	e7c9      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008ade:	2c02      	cmp	r4, #2
 8008ae0:	d848      	bhi.n	8008b74 <__ieee754_atan2+0x144>
 8008ae2:	4b32      	ldr	r3, [pc, #200]	; (8008bac <__ieee754_atan2+0x17c>)
 8008ae4:	e7f6      	b.n	8008ad4 <__ieee754_atan2+0xa4>
 8008ae6:	4573      	cmp	r3, lr
 8008ae8:	d0e4      	beq.n	8008ab4 <__ieee754_atan2+0x84>
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008af0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008af4:	da1e      	bge.n	8008b34 <__ieee754_atan2+0x104>
 8008af6:	2f00      	cmp	r7, #0
 8008af8:	da01      	bge.n	8008afe <__ieee754_atan2+0xce>
 8008afa:	323c      	adds	r2, #60	; 0x3c
 8008afc:	db1e      	blt.n	8008b3c <__ieee754_atan2+0x10c>
 8008afe:	4632      	mov	r2, r6
 8008b00:	463b      	mov	r3, r7
 8008b02:	f7f7 feab 	bl	800085c <__aeabi_ddiv>
 8008b06:	ec41 0b10 	vmov	d0, r0, r1
 8008b0a:	f7ff f929 	bl	8007d60 <fabs>
 8008b0e:	f7fe ff33 	bl	8007978 <atan>
 8008b12:	ec51 0b10 	vmov	r0, r1, d0
 8008b16:	2c01      	cmp	r4, #1
 8008b18:	d013      	beq.n	8008b42 <__ieee754_atan2+0x112>
 8008b1a:	2c02      	cmp	r4, #2
 8008b1c:	d015      	beq.n	8008b4a <__ieee754_atan2+0x11a>
 8008b1e:	2c00      	cmp	r4, #0
 8008b20:	d0a7      	beq.n	8008a72 <__ieee754_atan2+0x42>
 8008b22:	a319      	add	r3, pc, #100	; (adr r3, 8008b88 <__ieee754_atan2+0x158>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fbb6 	bl	8000298 <__aeabi_dsub>
 8008b2c:	a318      	add	r3, pc, #96	; (adr r3, 8008b90 <__ieee754_atan2+0x160>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	e014      	b.n	8008b5e <__ieee754_atan2+0x12e>
 8008b34:	a118      	add	r1, pc, #96	; (adr r1, 8008b98 <__ieee754_atan2+0x168>)
 8008b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b3a:	e7ec      	b.n	8008b16 <__ieee754_atan2+0xe6>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	e7e9      	b.n	8008b16 <__ieee754_atan2+0xe6>
 8008b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b46:	4619      	mov	r1, r3
 8008b48:	e793      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b4a:	a30f      	add	r3, pc, #60	; (adr r3, 8008b88 <__ieee754_atan2+0x158>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fba2 	bl	8000298 <__aeabi_dsub>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	a10d      	add	r1, pc, #52	; (adr r1, 8008b90 <__ieee754_atan2+0x160>)
 8008b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b5e:	f7f7 fb9b 	bl	8000298 <__aeabi_dsub>
 8008b62:	e786      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b64:	a10a      	add	r1, pc, #40	; (adr r1, 8008b90 <__ieee754_atan2+0x160>)
 8008b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b6a:	e782      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b6c:	a10c      	add	r1, pc, #48	; (adr r1, 8008ba0 <__ieee754_atan2+0x170>)
 8008b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b72:	e77e      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b74:	2000      	movs	r0, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	e77b      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b7a:	a107      	add	r1, pc, #28	; (adr r1, 8008b98 <__ieee754_atan2+0x168>)
 8008b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b80:	e777      	b.n	8008a72 <__ieee754_atan2+0x42>
 8008b82:	bf00      	nop
 8008b84:	f3af 8000 	nop.w
 8008b88:	33145c07 	.word	0x33145c07
 8008b8c:	3ca1a626 	.word	0x3ca1a626
 8008b90:	54442d18 	.word	0x54442d18
 8008b94:	400921fb 	.word	0x400921fb
 8008b98:	54442d18 	.word	0x54442d18
 8008b9c:	3ff921fb 	.word	0x3ff921fb
 8008ba0:	54442d18 	.word	0x54442d18
 8008ba4:	3fe921fb 	.word	0x3fe921fb
 8008ba8:	0800ef68 	.word	0x0800ef68
 8008bac:	0800ef80 	.word	0x0800ef80
 8008bb0:	54442d18 	.word	0x54442d18
 8008bb4:	c00921fb 	.word	0xc00921fb
 8008bb8:	54442d18 	.word	0x54442d18
 8008bbc:	bff921fb 	.word	0xbff921fb
 8008bc0:	7ff00000 	.word	0x7ff00000
 8008bc4:	00000000 	.word	0x00000000

08008bc8 <__ieee754_pow>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	ed2d 8b06 	vpush	{d8-d10}
 8008bd0:	b089      	sub	sp, #36	; 0x24
 8008bd2:	ed8d 1b00 	vstr	d1, [sp]
 8008bd6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008bda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008bde:	ea58 0102 	orrs.w	r1, r8, r2
 8008be2:	ec57 6b10 	vmov	r6, r7, d0
 8008be6:	d115      	bne.n	8008c14 <__ieee754_pow+0x4c>
 8008be8:	19b3      	adds	r3, r6, r6
 8008bea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008bee:	4152      	adcs	r2, r2
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	4b89      	ldr	r3, [pc, #548]	; (8008e18 <__ieee754_pow+0x250>)
 8008bf4:	4193      	sbcs	r3, r2
 8008bf6:	f080 84d2 	bcs.w	800959e <__ieee754_pow+0x9d6>
 8008bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 fb4b 	bl	800029c <__adddf3>
 8008c06:	ec41 0b10 	vmov	d0, r0, r1
 8008c0a:	b009      	add	sp, #36	; 0x24
 8008c0c:	ecbd 8b06 	vpop	{d8-d10}
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	4b81      	ldr	r3, [pc, #516]	; (8008e1c <__ieee754_pow+0x254>)
 8008c16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	ee10 aa10 	vmov	sl, s0
 8008c20:	463d      	mov	r5, r7
 8008c22:	dc06      	bgt.n	8008c32 <__ieee754_pow+0x6a>
 8008c24:	d101      	bne.n	8008c2a <__ieee754_pow+0x62>
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	d1e7      	bne.n	8008bfa <__ieee754_pow+0x32>
 8008c2a:	4598      	cmp	r8, r3
 8008c2c:	dc01      	bgt.n	8008c32 <__ieee754_pow+0x6a>
 8008c2e:	d10f      	bne.n	8008c50 <__ieee754_pow+0x88>
 8008c30:	b172      	cbz	r2, 8008c50 <__ieee754_pow+0x88>
 8008c32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008c36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008c3a:	ea55 050a 	orrs.w	r5, r5, sl
 8008c3e:	d1dc      	bne.n	8008bfa <__ieee754_pow+0x32>
 8008c40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c44:	18db      	adds	r3, r3, r3
 8008c46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008c4a:	4152      	adcs	r2, r2
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	e7d0      	b.n	8008bf2 <__ieee754_pow+0x2a>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	da3b      	bge.n	8008ccc <__ieee754_pow+0x104>
 8008c54:	4b72      	ldr	r3, [pc, #456]	; (8008e20 <__ieee754_pow+0x258>)
 8008c56:	4598      	cmp	r8, r3
 8008c58:	dc51      	bgt.n	8008cfe <__ieee754_pow+0x136>
 8008c5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c5e:	4598      	cmp	r8, r3
 8008c60:	f340 84ac 	ble.w	80095bc <__ieee754_pow+0x9f4>
 8008c64:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c6c:	2b14      	cmp	r3, #20
 8008c6e:	dd0f      	ble.n	8008c90 <__ieee754_pow+0xc8>
 8008c70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c74:	fa22 f103 	lsr.w	r1, r2, r3
 8008c78:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	f040 849d 	bne.w	80095bc <__ieee754_pow+0x9f4>
 8008c82:	f001 0101 	and.w	r1, r1, #1
 8008c86:	f1c1 0302 	rsb	r3, r1, #2
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	b182      	cbz	r2, 8008cb0 <__ieee754_pow+0xe8>
 8008c8e:	e05f      	b.n	8008d50 <__ieee754_pow+0x188>
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	d15b      	bne.n	8008d4c <__ieee754_pow+0x184>
 8008c94:	f1c3 0314 	rsb	r3, r3, #20
 8008c98:	fa48 f103 	asr.w	r1, r8, r3
 8008c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca0:	4543      	cmp	r3, r8
 8008ca2:	f040 8488 	bne.w	80095b6 <__ieee754_pow+0x9ee>
 8008ca6:	f001 0101 	and.w	r1, r1, #1
 8008caa:	f1c1 0302 	rsb	r3, r1, #2
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	4b5c      	ldr	r3, [pc, #368]	; (8008e24 <__ieee754_pow+0x25c>)
 8008cb2:	4598      	cmp	r8, r3
 8008cb4:	d132      	bne.n	8008d1c <__ieee754_pow+0x154>
 8008cb6:	f1b9 0f00 	cmp.w	r9, #0
 8008cba:	f280 8478 	bge.w	80095ae <__ieee754_pow+0x9e6>
 8008cbe:	4959      	ldr	r1, [pc, #356]	; (8008e24 <__ieee754_pow+0x25c>)
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f7f7 fdc9 	bl	800085c <__aeabi_ddiv>
 8008cca:	e79c      	b.n	8008c06 <__ieee754_pow+0x3e>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	d13d      	bne.n	8008d50 <__ieee754_pow+0x188>
 8008cd4:	4b51      	ldr	r3, [pc, #324]	; (8008e1c <__ieee754_pow+0x254>)
 8008cd6:	4598      	cmp	r8, r3
 8008cd8:	d1ea      	bne.n	8008cb0 <__ieee754_pow+0xe8>
 8008cda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008cde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008ce2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ce6:	f000 845a 	beq.w	800959e <__ieee754_pow+0x9d6>
 8008cea:	4b4f      	ldr	r3, [pc, #316]	; (8008e28 <__ieee754_pow+0x260>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	dd08      	ble.n	8008d02 <__ieee754_pow+0x13a>
 8008cf0:	f1b9 0f00 	cmp.w	r9, #0
 8008cf4:	f2c0 8457 	blt.w	80095a6 <__ieee754_pow+0x9de>
 8008cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cfc:	e783      	b.n	8008c06 <__ieee754_pow+0x3e>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e7e5      	b.n	8008cce <__ieee754_pow+0x106>
 8008d02:	f1b9 0f00 	cmp.w	r9, #0
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 0100 	mov.w	r1, #0
 8008d0e:	f6bf af7a 	bge.w	8008c06 <__ieee754_pow+0x3e>
 8008d12:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008d16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008d1a:	e774      	b.n	8008c06 <__ieee754_pow+0x3e>
 8008d1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008d20:	d106      	bne.n	8008d30 <__ieee754_pow+0x168>
 8008d22:	4632      	mov	r2, r6
 8008d24:	463b      	mov	r3, r7
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 fc6d 	bl	8000608 <__aeabi_dmul>
 8008d2e:	e76a      	b.n	8008c06 <__ieee754_pow+0x3e>
 8008d30:	4b3e      	ldr	r3, [pc, #248]	; (8008e2c <__ieee754_pow+0x264>)
 8008d32:	4599      	cmp	r9, r3
 8008d34:	d10c      	bne.n	8008d50 <__ieee754_pow+0x188>
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	db0a      	blt.n	8008d50 <__ieee754_pow+0x188>
 8008d3a:	ec47 6b10 	vmov	d0, r6, r7
 8008d3e:	b009      	add	sp, #36	; 0x24
 8008d40:	ecbd 8b06 	vpop	{d8-d10}
 8008d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	f000 be7a 	b.w	8009a40 <__ieee754_sqrt>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	ec47 6b10 	vmov	d0, r6, r7
 8008d54:	f7ff f804 	bl	8007d60 <fabs>
 8008d58:	ec51 0b10 	vmov	r0, r1, d0
 8008d5c:	f1ba 0f00 	cmp.w	sl, #0
 8008d60:	d129      	bne.n	8008db6 <__ieee754_pow+0x1ee>
 8008d62:	b124      	cbz	r4, 8008d6e <__ieee754_pow+0x1a6>
 8008d64:	4b2f      	ldr	r3, [pc, #188]	; (8008e24 <__ieee754_pow+0x25c>)
 8008d66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d123      	bne.n	8008db6 <__ieee754_pow+0x1ee>
 8008d6e:	f1b9 0f00 	cmp.w	r9, #0
 8008d72:	da05      	bge.n	8008d80 <__ieee754_pow+0x1b8>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	2000      	movs	r0, #0
 8008d7a:	492a      	ldr	r1, [pc, #168]	; (8008e24 <__ieee754_pow+0x25c>)
 8008d7c:	f7f7 fd6e 	bl	800085c <__aeabi_ddiv>
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	f6bf af40 	bge.w	8008c06 <__ieee754_pow+0x3e>
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d90:	4323      	orrs	r3, r4
 8008d92:	d108      	bne.n	8008da6 <__ieee754_pow+0x1de>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f7f7 fa7c 	bl	8000298 <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	e78f      	b.n	8008cc6 <__ieee754_pow+0xfe>
 8008da6:	9b04      	ldr	r3, [sp, #16]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f47f af2c 	bne.w	8008c06 <__ieee754_pow+0x3e>
 8008dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db2:	4619      	mov	r1, r3
 8008db4:	e727      	b.n	8008c06 <__ieee754_pow+0x3e>
 8008db6:	0feb      	lsrs	r3, r5, #31
 8008db8:	3b01      	subs	r3, #1
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	9a06      	ldr	r2, [sp, #24]
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	d102      	bne.n	8008dca <__ieee754_pow+0x202>
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	e7e6      	b.n	8008d98 <__ieee754_pow+0x1d0>
 8008dca:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <__ieee754_pow+0x268>)
 8008dcc:	4598      	cmp	r8, r3
 8008dce:	f340 80fb 	ble.w	8008fc8 <__ieee754_pow+0x400>
 8008dd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008dd6:	4598      	cmp	r8, r3
 8008dd8:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <__ieee754_pow+0x260>)
 8008dda:	dd0c      	ble.n	8008df6 <__ieee754_pow+0x22e>
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	dc0f      	bgt.n	8008e00 <__ieee754_pow+0x238>
 8008de0:	f1b9 0f00 	cmp.w	r9, #0
 8008de4:	da0f      	bge.n	8008e06 <__ieee754_pow+0x23e>
 8008de6:	2000      	movs	r0, #0
 8008de8:	b009      	add	sp, #36	; 0x24
 8008dea:	ecbd 8b06 	vpop	{d8-d10}
 8008dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df2:	f001 bde2 	b.w	800a9ba <__math_oflow>
 8008df6:	429c      	cmp	r4, r3
 8008df8:	dbf2      	blt.n	8008de0 <__ieee754_pow+0x218>
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <__ieee754_pow+0x25c>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	dd19      	ble.n	8008e34 <__ieee754_pow+0x26c>
 8008e00:	f1b9 0f00 	cmp.w	r9, #0
 8008e04:	dcef      	bgt.n	8008de6 <__ieee754_pow+0x21e>
 8008e06:	2000      	movs	r0, #0
 8008e08:	b009      	add	sp, #36	; 0x24
 8008e0a:	ecbd 8b06 	vpop	{d8-d10}
 8008e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e12:	f001 bdc9 	b.w	800a9a8 <__math_uflow>
 8008e16:	bf00      	nop
 8008e18:	fff00000 	.word	0xfff00000
 8008e1c:	7ff00000 	.word	0x7ff00000
 8008e20:	433fffff 	.word	0x433fffff
 8008e24:	3ff00000 	.word	0x3ff00000
 8008e28:	3fefffff 	.word	0x3fefffff
 8008e2c:	3fe00000 	.word	0x3fe00000
 8008e30:	41e00000 	.word	0x41e00000
 8008e34:	4b60      	ldr	r3, [pc, #384]	; (8008fb8 <__ieee754_pow+0x3f0>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	f7f7 fa2e 	bl	8000298 <__aeabi_dsub>
 8008e3c:	a354      	add	r3, pc, #336	; (adr r3, 8008f90 <__ieee754_pow+0x3c8>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	4604      	mov	r4, r0
 8008e44:	460d      	mov	r5, r1
 8008e46:	f7f7 fbdf 	bl	8000608 <__aeabi_dmul>
 8008e4a:	a353      	add	r3, pc, #332	; (adr r3, 8008f98 <__ieee754_pow+0x3d0>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	4606      	mov	r6, r0
 8008e52:	460f      	mov	r7, r1
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f7f7 fbd6 	bl	8000608 <__aeabi_dmul>
 8008e5c:	4b57      	ldr	r3, [pc, #348]	; (8008fbc <__ieee754_pow+0x3f4>)
 8008e5e:	4682      	mov	sl, r0
 8008e60:	468b      	mov	fp, r1
 8008e62:	2200      	movs	r2, #0
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 fbce 	bl	8000608 <__aeabi_dmul>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	a14b      	add	r1, pc, #300	; (adr r1, 8008fa0 <__ieee754_pow+0x3d8>)
 8008e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e76:	f7f7 fa0f 	bl	8000298 <__aeabi_dsub>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	f7f7 fbc3 	bl	8000608 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	2000      	movs	r0, #0
 8008e88:	494d      	ldr	r1, [pc, #308]	; (8008fc0 <__ieee754_pow+0x3f8>)
 8008e8a:	f7f7 fa05 	bl	8000298 <__aeabi_dsub>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	4680      	mov	r8, r0
 8008e92:	4689      	mov	r9, r1
 8008e94:	462b      	mov	r3, r5
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fbb5 	bl	8000608 <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fbaf 	bl	8000608 <__aeabi_dmul>
 8008eaa:	a33f      	add	r3, pc, #252	; (adr r3, 8008fa8 <__ieee754_pow+0x3e0>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 fbaa 	bl	8000608 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4650      	mov	r0, sl
 8008eba:	4659      	mov	r1, fp
 8008ebc:	f7f7 f9ec 	bl	8000298 <__aeabi_dsub>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	4689      	mov	r9, r1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 f9e6 	bl	800029c <__adddf3>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	f7f7 f9dd 	bl	8000298 <__aeabi_dsub>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f7 f9d7 	bl	8000298 <__aeabi_dsub>
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	9a06      	ldr	r2, [sp, #24]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	f040 81e7 	bne.w	80092c8 <__ieee754_pow+0x700>
 8008efa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008fb0 <__ieee754_pow+0x3e8>
 8008efe:	eeb0 8a47 	vmov.f32	s16, s14
 8008f02:	eef0 8a67 	vmov.f32	s17, s15
 8008f06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f0a:	2600      	movs	r6, #0
 8008f0c:	4632      	mov	r2, r6
 8008f0e:	463b      	mov	r3, r7
 8008f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f14:	f7f7 f9c0 	bl	8000298 <__aeabi_dsub>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	f7f7 fb74 	bl	8000608 <__aeabi_dmul>
 8008f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f24:	4680      	mov	r8, r0
 8008f26:	4689      	mov	r9, r1
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	f7f7 fb6c 	bl	8000608 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 f9b0 	bl	800029c <__adddf3>
 8008f3c:	4632      	mov	r2, r6
 8008f3e:	463b      	mov	r3, r7
 8008f40:	4680      	mov	r8, r0
 8008f42:	4689      	mov	r9, r1
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	4602      	mov	r2, r0
 8008f54:	4649      	mov	r1, r9
 8008f56:	4640      	mov	r0, r8
 8008f58:	f7f7 f9a0 	bl	800029c <__adddf3>
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <__ieee754_pow+0x3fc>)
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	ec45 4b19 	vmov	d9, r4, r5
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	468b      	mov	fp, r1
 8008f6a:	f340 82f1 	ble.w	8009550 <__ieee754_pow+0x988>
 8008f6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f76:	4303      	orrs	r3, r0
 8008f78:	f000 81e4 	beq.w	8009344 <__ieee754_pow+0x77c>
 8008f7c:	ec51 0b18 	vmov	r0, r1, d8
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	f7f7 fdb2 	bl	8000aec <__aeabi_dcmplt>
 8008f88:	3800      	subs	r0, #0
 8008f8a:	bf18      	it	ne
 8008f8c:	2001      	movne	r0, #1
 8008f8e:	e72b      	b.n	8008de8 <__ieee754_pow+0x220>
 8008f90:	60000000 	.word	0x60000000
 8008f94:	3ff71547 	.word	0x3ff71547
 8008f98:	f85ddf44 	.word	0xf85ddf44
 8008f9c:	3e54ae0b 	.word	0x3e54ae0b
 8008fa0:	55555555 	.word	0x55555555
 8008fa4:	3fd55555 	.word	0x3fd55555
 8008fa8:	652b82fe 	.word	0x652b82fe
 8008fac:	3ff71547 	.word	0x3ff71547
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	bff00000 	.word	0xbff00000
 8008fb8:	3ff00000 	.word	0x3ff00000
 8008fbc:	3fd00000 	.word	0x3fd00000
 8008fc0:	3fe00000 	.word	0x3fe00000
 8008fc4:	408fffff 	.word	0x408fffff
 8008fc8:	4bd5      	ldr	r3, [pc, #852]	; (8009320 <__ieee754_pow+0x758>)
 8008fca:	402b      	ands	r3, r5
 8008fcc:	2200      	movs	r2, #0
 8008fce:	b92b      	cbnz	r3, 8008fdc <__ieee754_pow+0x414>
 8008fd0:	4bd4      	ldr	r3, [pc, #848]	; (8009324 <__ieee754_pow+0x75c>)
 8008fd2:	f7f7 fb19 	bl	8000608 <__aeabi_dmul>
 8008fd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008fda:	460c      	mov	r4, r1
 8008fdc:	1523      	asrs	r3, r4, #20
 8008fde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fe2:	4413      	add	r3, r2
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	4bd0      	ldr	r3, [pc, #832]	; (8009328 <__ieee754_pow+0x760>)
 8008fe8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008fec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ff6:	dd08      	ble.n	800900a <__ieee754_pow+0x442>
 8008ff8:	4bcc      	ldr	r3, [pc, #816]	; (800932c <__ieee754_pow+0x764>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	f340 8162 	ble.w	80092c4 <__ieee754_pow+0x6fc>
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	3301      	adds	r3, #1
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800900a:	2400      	movs	r4, #0
 800900c:	00e3      	lsls	r3, r4, #3
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	4bc7      	ldr	r3, [pc, #796]	; (8009330 <__ieee754_pow+0x768>)
 8009012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009016:	ed93 7b00 	vldr	d7, [r3]
 800901a:	4629      	mov	r1, r5
 800901c:	ec53 2b17 	vmov	r2, r3, d7
 8009020:	eeb0 9a47 	vmov.f32	s18, s14
 8009024:	eef0 9a67 	vmov.f32	s19, s15
 8009028:	4682      	mov	sl, r0
 800902a:	f7f7 f935 	bl	8000298 <__aeabi_dsub>
 800902e:	4652      	mov	r2, sl
 8009030:	4606      	mov	r6, r0
 8009032:	460f      	mov	r7, r1
 8009034:	462b      	mov	r3, r5
 8009036:	ec51 0b19 	vmov	r0, r1, d9
 800903a:	f7f7 f92f 	bl	800029c <__adddf3>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	2000      	movs	r0, #0
 8009044:	49bb      	ldr	r1, [pc, #748]	; (8009334 <__ieee754_pow+0x76c>)
 8009046:	f7f7 fc09 	bl	800085c <__aeabi_ddiv>
 800904a:	ec41 0b1a 	vmov	d10, r0, r1
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fad7 	bl	8000608 <__aeabi_dmul>
 800905a:	2300      	movs	r3, #0
 800905c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009066:	46ab      	mov	fp, r5
 8009068:	106d      	asrs	r5, r5, #1
 800906a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800906e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009072:	ec41 0b18 	vmov	d8, r0, r1
 8009076:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800907a:	2200      	movs	r2, #0
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	4614      	mov	r4, r2
 8009082:	461d      	mov	r5, r3
 8009084:	f7f7 fac0 	bl	8000608 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4630      	mov	r0, r6
 800908e:	4639      	mov	r1, r7
 8009090:	f7f7 f902 	bl	8000298 <__aeabi_dsub>
 8009094:	ec53 2b19 	vmov	r2, r3, d9
 8009098:	4606      	mov	r6, r0
 800909a:	460f      	mov	r7, r1
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f8fa 	bl	8000298 <__aeabi_dsub>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4650      	mov	r0, sl
 80090aa:	4659      	mov	r1, fp
 80090ac:	f7f7 f8f4 	bl	8000298 <__aeabi_dsub>
 80090b0:	4642      	mov	r2, r8
 80090b2:	464b      	mov	r3, r9
 80090b4:	f7f7 faa8 	bl	8000608 <__aeabi_dmul>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 f8ea 	bl	8000298 <__aeabi_dsub>
 80090c4:	ec53 2b1a 	vmov	r2, r3, d10
 80090c8:	f7f7 fa9e 	bl	8000608 <__aeabi_dmul>
 80090cc:	ec53 2b18 	vmov	r2, r3, d8
 80090d0:	ec41 0b19 	vmov	d9, r0, r1
 80090d4:	ec51 0b18 	vmov	r0, r1, d8
 80090d8:	f7f7 fa96 	bl	8000608 <__aeabi_dmul>
 80090dc:	a37c      	add	r3, pc, #496	; (adr r3, 80092d0 <__ieee754_pow+0x708>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	4604      	mov	r4, r0
 80090e4:	460d      	mov	r5, r1
 80090e6:	f7f7 fa8f 	bl	8000608 <__aeabi_dmul>
 80090ea:	a37b      	add	r3, pc, #492	; (adr r3, 80092d8 <__ieee754_pow+0x710>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f8d4 	bl	800029c <__adddf3>
 80090f4:	4622      	mov	r2, r4
 80090f6:	462b      	mov	r3, r5
 80090f8:	f7f7 fa86 	bl	8000608 <__aeabi_dmul>
 80090fc:	a378      	add	r3, pc, #480	; (adr r3, 80092e0 <__ieee754_pow+0x718>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8cb 	bl	800029c <__adddf3>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 fa7d 	bl	8000608 <__aeabi_dmul>
 800910e:	a376      	add	r3, pc, #472	; (adr r3, 80092e8 <__ieee754_pow+0x720>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f7f7 f8c2 	bl	800029c <__adddf3>
 8009118:	4622      	mov	r2, r4
 800911a:	462b      	mov	r3, r5
 800911c:	f7f7 fa74 	bl	8000608 <__aeabi_dmul>
 8009120:	a373      	add	r3, pc, #460	; (adr r3, 80092f0 <__ieee754_pow+0x728>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 f8b9 	bl	800029c <__adddf3>
 800912a:	4622      	mov	r2, r4
 800912c:	462b      	mov	r3, r5
 800912e:	f7f7 fa6b 	bl	8000608 <__aeabi_dmul>
 8009132:	a371      	add	r3, pc, #452	; (adr r3, 80092f8 <__ieee754_pow+0x730>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 f8b0 	bl	800029c <__adddf3>
 800913c:	4622      	mov	r2, r4
 800913e:	4606      	mov	r6, r0
 8009140:	460f      	mov	r7, r1
 8009142:	462b      	mov	r3, r5
 8009144:	4620      	mov	r0, r4
 8009146:	4629      	mov	r1, r5
 8009148:	f7f7 fa5e 	bl	8000608 <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fa58 	bl	8000608 <__aeabi_dmul>
 8009158:	4642      	mov	r2, r8
 800915a:	4604      	mov	r4, r0
 800915c:	460d      	mov	r5, r1
 800915e:	464b      	mov	r3, r9
 8009160:	ec51 0b18 	vmov	r0, r1, d8
 8009164:	f7f7 f89a 	bl	800029c <__adddf3>
 8009168:	ec53 2b19 	vmov	r2, r3, d9
 800916c:	f7f7 fa4c 	bl	8000608 <__aeabi_dmul>
 8009170:	4622      	mov	r2, r4
 8009172:	462b      	mov	r3, r5
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	4642      	mov	r2, r8
 800917a:	4682      	mov	sl, r0
 800917c:	468b      	mov	fp, r1
 800917e:	464b      	mov	r3, r9
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fa40 	bl	8000608 <__aeabi_dmul>
 8009188:	4b6b      	ldr	r3, [pc, #428]	; (8009338 <__ieee754_pow+0x770>)
 800918a:	2200      	movs	r2, #0
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	f7f7 f884 	bl	800029c <__adddf3>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	f7f7 f880 	bl	800029c <__adddf3>
 800919c:	2000      	movs	r0, #0
 800919e:	4604      	mov	r4, r0
 80091a0:	460d      	mov	r5, r1
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 fa2d 	bl	8000608 <__aeabi_dmul>
 80091ae:	4b62      	ldr	r3, [pc, #392]	; (8009338 <__ieee754_pow+0x770>)
 80091b0:	4680      	mov	r8, r0
 80091b2:	4689      	mov	r9, r1
 80091b4:	2200      	movs	r2, #0
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 f86d 	bl	8000298 <__aeabi_dsub>
 80091be:	4632      	mov	r2, r6
 80091c0:	463b      	mov	r3, r7
 80091c2:	f7f7 f869 	bl	8000298 <__aeabi_dsub>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4650      	mov	r0, sl
 80091cc:	4659      	mov	r1, fp
 80091ce:	f7f7 f863 	bl	8000298 <__aeabi_dsub>
 80091d2:	ec53 2b18 	vmov	r2, r3, d8
 80091d6:	f7f7 fa17 	bl	8000608 <__aeabi_dmul>
 80091da:	4622      	mov	r2, r4
 80091dc:	4606      	mov	r6, r0
 80091de:	460f      	mov	r7, r1
 80091e0:	462b      	mov	r3, r5
 80091e2:	ec51 0b19 	vmov	r0, r1, d9
 80091e6:	f7f7 fa0f 	bl	8000608 <__aeabi_dmul>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 f853 	bl	800029c <__adddf3>
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 f84b 	bl	800029c <__adddf3>
 8009206:	a33e      	add	r3, pc, #248	; (adr r3, 8009300 <__ieee754_pow+0x738>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	2000      	movs	r0, #0
 800920e:	4604      	mov	r4, r0
 8009210:	460d      	mov	r5, r1
 8009212:	f7f7 f9f9 	bl	8000608 <__aeabi_dmul>
 8009216:	4642      	mov	r2, r8
 8009218:	ec41 0b18 	vmov	d8, r0, r1
 800921c:	464b      	mov	r3, r9
 800921e:	4620      	mov	r0, r4
 8009220:	4629      	mov	r1, r5
 8009222:	f7f7 f839 	bl	8000298 <__aeabi_dsub>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 f833 	bl	8000298 <__aeabi_dsub>
 8009232:	a335      	add	r3, pc, #212	; (adr r3, 8009308 <__ieee754_pow+0x740>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f7 f9e6 	bl	8000608 <__aeabi_dmul>
 800923c:	a334      	add	r3, pc, #208	; (adr r3, 8009310 <__ieee754_pow+0x748>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	f7f7 f9dd 	bl	8000608 <__aeabi_dmul>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 f821 	bl	800029c <__adddf3>
 800925a:	9a07      	ldr	r2, [sp, #28]
 800925c:	4b37      	ldr	r3, [pc, #220]	; (800933c <__ieee754_pow+0x774>)
 800925e:	4413      	add	r3, r2
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f7 f81a 	bl	800029c <__adddf3>
 8009268:	4682      	mov	sl, r0
 800926a:	9805      	ldr	r0, [sp, #20]
 800926c:	468b      	mov	fp, r1
 800926e:	f7f7 f961 	bl	8000534 <__aeabi_i2d>
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	4b32      	ldr	r3, [pc, #200]	; (8009340 <__ieee754_pow+0x778>)
 8009276:	4413      	add	r3, r2
 8009278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800927c:	4606      	mov	r6, r0
 800927e:	460f      	mov	r7, r1
 8009280:	4652      	mov	r2, sl
 8009282:	465b      	mov	r3, fp
 8009284:	ec51 0b18 	vmov	r0, r1, d8
 8009288:	f7f7 f808 	bl	800029c <__adddf3>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	f7f7 f804 	bl	800029c <__adddf3>
 8009294:	4632      	mov	r2, r6
 8009296:	463b      	mov	r3, r7
 8009298:	f7f7 f800 	bl	800029c <__adddf3>
 800929c:	2000      	movs	r0, #0
 800929e:	4632      	mov	r2, r6
 80092a0:	463b      	mov	r3, r7
 80092a2:	4604      	mov	r4, r0
 80092a4:	460d      	mov	r5, r1
 80092a6:	f7f6 fff7 	bl	8000298 <__aeabi_dsub>
 80092aa:	4642      	mov	r2, r8
 80092ac:	464b      	mov	r3, r9
 80092ae:	f7f6 fff3 	bl	8000298 <__aeabi_dsub>
 80092b2:	ec53 2b18 	vmov	r2, r3, d8
 80092b6:	f7f6 ffef 	bl	8000298 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4650      	mov	r0, sl
 80092c0:	4659      	mov	r1, fp
 80092c2:	e610      	b.n	8008ee6 <__ieee754_pow+0x31e>
 80092c4:	2401      	movs	r4, #1
 80092c6:	e6a1      	b.n	800900c <__ieee754_pow+0x444>
 80092c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009318 <__ieee754_pow+0x750>
 80092cc:	e617      	b.n	8008efe <__ieee754_pow+0x336>
 80092ce:	bf00      	nop
 80092d0:	4a454eef 	.word	0x4a454eef
 80092d4:	3fca7e28 	.word	0x3fca7e28
 80092d8:	93c9db65 	.word	0x93c9db65
 80092dc:	3fcd864a 	.word	0x3fcd864a
 80092e0:	a91d4101 	.word	0xa91d4101
 80092e4:	3fd17460 	.word	0x3fd17460
 80092e8:	518f264d 	.word	0x518f264d
 80092ec:	3fd55555 	.word	0x3fd55555
 80092f0:	db6fabff 	.word	0xdb6fabff
 80092f4:	3fdb6db6 	.word	0x3fdb6db6
 80092f8:	33333303 	.word	0x33333303
 80092fc:	3fe33333 	.word	0x3fe33333
 8009300:	e0000000 	.word	0xe0000000
 8009304:	3feec709 	.word	0x3feec709
 8009308:	dc3a03fd 	.word	0xdc3a03fd
 800930c:	3feec709 	.word	0x3feec709
 8009310:	145b01f5 	.word	0x145b01f5
 8009314:	be3e2fe0 	.word	0xbe3e2fe0
 8009318:	00000000 	.word	0x00000000
 800931c:	3ff00000 	.word	0x3ff00000
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	43400000 	.word	0x43400000
 8009328:	0003988e 	.word	0x0003988e
 800932c:	000bb679 	.word	0x000bb679
 8009330:	0800ef98 	.word	0x0800ef98
 8009334:	3ff00000 	.word	0x3ff00000
 8009338:	40080000 	.word	0x40080000
 800933c:	0800efb8 	.word	0x0800efb8
 8009340:	0800efa8 	.word	0x0800efa8
 8009344:	a3b5      	add	r3, pc, #724	; (adr r3, 800961c <__ieee754_pow+0xa54>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f6 ffa5 	bl	800029c <__adddf3>
 8009352:	4622      	mov	r2, r4
 8009354:	ec41 0b1a 	vmov	d10, r0, r1
 8009358:	462b      	mov	r3, r5
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ff9b 	bl	8000298 <__aeabi_dsub>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	ec51 0b1a 	vmov	r0, r1, d10
 800936a:	f7f7 fbdd 	bl	8000b28 <__aeabi_dcmpgt>
 800936e:	2800      	cmp	r0, #0
 8009370:	f47f ae04 	bne.w	8008f7c <__ieee754_pow+0x3b4>
 8009374:	4aa4      	ldr	r2, [pc, #656]	; (8009608 <__ieee754_pow+0xa40>)
 8009376:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800937a:	4293      	cmp	r3, r2
 800937c:	f340 8108 	ble.w	8009590 <__ieee754_pow+0x9c8>
 8009380:	151b      	asrs	r3, r3, #20
 8009382:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009386:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800938a:	fa4a f303 	asr.w	r3, sl, r3
 800938e:	445b      	add	r3, fp
 8009390:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009394:	4e9d      	ldr	r6, [pc, #628]	; (800960c <__ieee754_pow+0xa44>)
 8009396:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800939a:	4116      	asrs	r6, r2
 800939c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80093a0:	2000      	movs	r0, #0
 80093a2:	ea23 0106 	bic.w	r1, r3, r6
 80093a6:	f1c2 0214 	rsb	r2, r2, #20
 80093aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80093ae:	fa4a fa02 	asr.w	sl, sl, r2
 80093b2:	f1bb 0f00 	cmp.w	fp, #0
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	bfb8      	it	lt
 80093c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80093c4:	f7f6 ff68 	bl	8000298 <__aeabi_dsub>
 80093c8:	ec41 0b19 	vmov	d9, r0, r1
 80093cc:	4642      	mov	r2, r8
 80093ce:	464b      	mov	r3, r9
 80093d0:	ec51 0b19 	vmov	r0, r1, d9
 80093d4:	f7f6 ff62 	bl	800029c <__adddf3>
 80093d8:	a37b      	add	r3, pc, #492	; (adr r3, 80095c8 <__ieee754_pow+0xa00>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	2000      	movs	r0, #0
 80093e0:	4604      	mov	r4, r0
 80093e2:	460d      	mov	r5, r1
 80093e4:	f7f7 f910 	bl	8000608 <__aeabi_dmul>
 80093e8:	ec53 2b19 	vmov	r2, r3, d9
 80093ec:	4606      	mov	r6, r0
 80093ee:	460f      	mov	r7, r1
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff50 	bl	8000298 <__aeabi_dsub>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f7f6 ff4a 	bl	8000298 <__aeabi_dsub>
 8009404:	a372      	add	r3, pc, #456	; (adr r3, 80095d0 <__ieee754_pow+0xa08>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f7 f8fd 	bl	8000608 <__aeabi_dmul>
 800940e:	a372      	add	r3, pc, #456	; (adr r3, 80095d8 <__ieee754_pow+0xa10>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	4680      	mov	r8, r0
 8009416:	4689      	mov	r9, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f7 f8f4 	bl	8000608 <__aeabi_dmul>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f6 ff38 	bl	800029c <__adddf3>
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f6 ff30 	bl	800029c <__adddf3>
 800943c:	4632      	mov	r2, r6
 800943e:	463b      	mov	r3, r7
 8009440:	4680      	mov	r8, r0
 8009442:	4689      	mov	r9, r1
 8009444:	f7f6 ff28 	bl	8000298 <__aeabi_dsub>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f6 ff22 	bl	8000298 <__aeabi_dsub>
 8009454:	4642      	mov	r2, r8
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	464b      	mov	r3, r9
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f7 f8d2 	bl	8000608 <__aeabi_dmul>
 8009464:	a35e      	add	r3, pc, #376	; (adr r3, 80095e0 <__ieee754_pow+0xa18>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	4604      	mov	r4, r0
 800946c:	460d      	mov	r5, r1
 800946e:	f7f7 f8cb 	bl	8000608 <__aeabi_dmul>
 8009472:	a35d      	add	r3, pc, #372	; (adr r3, 80095e8 <__ieee754_pow+0xa20>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f6 ff0e 	bl	8000298 <__aeabi_dsub>
 800947c:	4622      	mov	r2, r4
 800947e:	462b      	mov	r3, r5
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	a35a      	add	r3, pc, #360	; (adr r3, 80095f0 <__ieee754_pow+0xa28>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f6 ff07 	bl	800029c <__adddf3>
 800948e:	4622      	mov	r2, r4
 8009490:	462b      	mov	r3, r5
 8009492:	f7f7 f8b9 	bl	8000608 <__aeabi_dmul>
 8009496:	a358      	add	r3, pc, #352	; (adr r3, 80095f8 <__ieee754_pow+0xa30>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 fefc 	bl	8000298 <__aeabi_dsub>
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	f7f7 f8b0 	bl	8000608 <__aeabi_dmul>
 80094a8:	a355      	add	r3, pc, #340	; (adr r3, 8009600 <__ieee754_pow+0xa38>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f6 fef5 	bl	800029c <__adddf3>
 80094b2:	4622      	mov	r2, r4
 80094b4:	462b      	mov	r3, r5
 80094b6:	f7f7 f8a7 	bl	8000608 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4640      	mov	r0, r8
 80094c0:	4649      	mov	r1, r9
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	4604      	mov	r4, r0
 80094c8:	460d      	mov	r5, r1
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	f7f7 f899 	bl	8000608 <__aeabi_dmul>
 80094d6:	2200      	movs	r2, #0
 80094d8:	ec41 0b19 	vmov	d9, r0, r1
 80094dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094e0:	4620      	mov	r0, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f6 fed8 	bl	8000298 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	ec51 0b19 	vmov	r0, r1, d9
 80094f0:	f7f7 f9b4 	bl	800085c <__aeabi_ddiv>
 80094f4:	4632      	mov	r2, r6
 80094f6:	4604      	mov	r4, r0
 80094f8:	460d      	mov	r5, r1
 80094fa:	463b      	mov	r3, r7
 80094fc:	4640      	mov	r0, r8
 80094fe:	4649      	mov	r1, r9
 8009500:	f7f7 f882 	bl	8000608 <__aeabi_dmul>
 8009504:	4632      	mov	r2, r6
 8009506:	463b      	mov	r3, r7
 8009508:	f7f6 fec8 	bl	800029c <__adddf3>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	f7f6 fec0 	bl	8000298 <__aeabi_dsub>
 8009518:	4642      	mov	r2, r8
 800951a:	464b      	mov	r3, r9
 800951c:	f7f6 febc 	bl	8000298 <__aeabi_dsub>
 8009520:	460b      	mov	r3, r1
 8009522:	4602      	mov	r2, r0
 8009524:	493a      	ldr	r1, [pc, #232]	; (8009610 <__ieee754_pow+0xa48>)
 8009526:	2000      	movs	r0, #0
 8009528:	f7f6 feb6 	bl	8000298 <__aeabi_dsub>
 800952c:	ec41 0b10 	vmov	d0, r0, r1
 8009530:	ee10 3a90 	vmov	r3, s1
 8009534:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800953c:	da2b      	bge.n	8009596 <__ieee754_pow+0x9ce>
 800953e:	4650      	mov	r0, sl
 8009540:	f001 fa5a 	bl	800a9f8 <scalbn>
 8009544:	ec51 0b10 	vmov	r0, r1, d0
 8009548:	ec53 2b18 	vmov	r2, r3, d8
 800954c:	f7ff bbed 	b.w	8008d2a <__ieee754_pow+0x162>
 8009550:	4b30      	ldr	r3, [pc, #192]	; (8009614 <__ieee754_pow+0xa4c>)
 8009552:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009556:	429e      	cmp	r6, r3
 8009558:	f77f af0c 	ble.w	8009374 <__ieee754_pow+0x7ac>
 800955c:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <__ieee754_pow+0xa50>)
 800955e:	440b      	add	r3, r1
 8009560:	4303      	orrs	r3, r0
 8009562:	d009      	beq.n	8009578 <__ieee754_pow+0x9b0>
 8009564:	ec51 0b18 	vmov	r0, r1, d8
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	f7f7 fabe 	bl	8000aec <__aeabi_dcmplt>
 8009570:	3800      	subs	r0, #0
 8009572:	bf18      	it	ne
 8009574:	2001      	movne	r0, #1
 8009576:	e447      	b.n	8008e08 <__ieee754_pow+0x240>
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	f7f6 fe8c 	bl	8000298 <__aeabi_dsub>
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	f7f7 fac6 	bl	8000b14 <__aeabi_dcmpge>
 8009588:	2800      	cmp	r0, #0
 800958a:	f43f aef3 	beq.w	8009374 <__ieee754_pow+0x7ac>
 800958e:	e7e9      	b.n	8009564 <__ieee754_pow+0x99c>
 8009590:	f04f 0a00 	mov.w	sl, #0
 8009594:	e71a      	b.n	80093cc <__ieee754_pow+0x804>
 8009596:	ec51 0b10 	vmov	r0, r1, d0
 800959a:	4619      	mov	r1, r3
 800959c:	e7d4      	b.n	8009548 <__ieee754_pow+0x980>
 800959e:	491c      	ldr	r1, [pc, #112]	; (8009610 <__ieee754_pow+0xa48>)
 80095a0:	2000      	movs	r0, #0
 80095a2:	f7ff bb30 	b.w	8008c06 <__ieee754_pow+0x3e>
 80095a6:	2000      	movs	r0, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	f7ff bb2c 	b.w	8008c06 <__ieee754_pow+0x3e>
 80095ae:	4630      	mov	r0, r6
 80095b0:	4639      	mov	r1, r7
 80095b2:	f7ff bb28 	b.w	8008c06 <__ieee754_pow+0x3e>
 80095b6:	9204      	str	r2, [sp, #16]
 80095b8:	f7ff bb7a 	b.w	8008cb0 <__ieee754_pow+0xe8>
 80095bc:	2300      	movs	r3, #0
 80095be:	f7ff bb64 	b.w	8008c8a <__ieee754_pow+0xc2>
 80095c2:	bf00      	nop
 80095c4:	f3af 8000 	nop.w
 80095c8:	00000000 	.word	0x00000000
 80095cc:	3fe62e43 	.word	0x3fe62e43
 80095d0:	fefa39ef 	.word	0xfefa39ef
 80095d4:	3fe62e42 	.word	0x3fe62e42
 80095d8:	0ca86c39 	.word	0x0ca86c39
 80095dc:	be205c61 	.word	0xbe205c61
 80095e0:	72bea4d0 	.word	0x72bea4d0
 80095e4:	3e663769 	.word	0x3e663769
 80095e8:	c5d26bf1 	.word	0xc5d26bf1
 80095ec:	3ebbbd41 	.word	0x3ebbbd41
 80095f0:	af25de2c 	.word	0xaf25de2c
 80095f4:	3f11566a 	.word	0x3f11566a
 80095f8:	16bebd93 	.word	0x16bebd93
 80095fc:	3f66c16c 	.word	0x3f66c16c
 8009600:	5555553e 	.word	0x5555553e
 8009604:	3fc55555 	.word	0x3fc55555
 8009608:	3fe00000 	.word	0x3fe00000
 800960c:	000fffff 	.word	0x000fffff
 8009610:	3ff00000 	.word	0x3ff00000
 8009614:	4090cbff 	.word	0x4090cbff
 8009618:	3f6f3400 	.word	0x3f6f3400
 800961c:	652b82fe 	.word	0x652b82fe
 8009620:	3c971547 	.word	0x3c971547
 8009624:	00000000 	.word	0x00000000

08009628 <__ieee754_rem_pio2>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	ed2d 8b02 	vpush	{d8}
 8009630:	ec55 4b10 	vmov	r4, r5, d0
 8009634:	4bca      	ldr	r3, [pc, #808]	; (8009960 <__ieee754_rem_pio2+0x338>)
 8009636:	b08b      	sub	sp, #44	; 0x2c
 8009638:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800963c:	4598      	cmp	r8, r3
 800963e:	4682      	mov	sl, r0
 8009640:	9502      	str	r5, [sp, #8]
 8009642:	dc08      	bgt.n	8009656 <__ieee754_rem_pio2+0x2e>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	ed80 0b00 	vstr	d0, [r0]
 800964c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009650:	f04f 0b00 	mov.w	fp, #0
 8009654:	e028      	b.n	80096a8 <__ieee754_rem_pio2+0x80>
 8009656:	4bc3      	ldr	r3, [pc, #780]	; (8009964 <__ieee754_rem_pio2+0x33c>)
 8009658:	4598      	cmp	r8, r3
 800965a:	dc78      	bgt.n	800974e <__ieee754_rem_pio2+0x126>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	4ec2      	ldr	r6, [pc, #776]	; (8009968 <__ieee754_rem_pio2+0x340>)
 8009660:	2b00      	cmp	r3, #0
 8009662:	ee10 0a10 	vmov	r0, s0
 8009666:	a3b0      	add	r3, pc, #704	; (adr r3, 8009928 <__ieee754_rem_pio2+0x300>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	4629      	mov	r1, r5
 800966e:	dd39      	ble.n	80096e4 <__ieee754_rem_pio2+0xbc>
 8009670:	f7f6 fe12 	bl	8000298 <__aeabi_dsub>
 8009674:	45b0      	cmp	r8, r6
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	d01b      	beq.n	80096b4 <__ieee754_rem_pio2+0x8c>
 800967c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009930 <__ieee754_rem_pio2+0x308>)
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	f7f6 fe09 	bl	8000298 <__aeabi_dsub>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	e9ca 2300 	strd	r2, r3, [sl]
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	f7f6 fe01 	bl	8000298 <__aeabi_dsub>
 8009696:	a3a6      	add	r3, pc, #664	; (adr r3, 8009930 <__ieee754_rem_pio2+0x308>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f6 fdfc 	bl	8000298 <__aeabi_dsub>
 80096a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80096a4:	f04f 0b01 	mov.w	fp, #1
 80096a8:	4658      	mov	r0, fp
 80096aa:	b00b      	add	sp, #44	; 0x2c
 80096ac:	ecbd 8b02 	vpop	{d8}
 80096b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009938 <__ieee754_rem_pio2+0x310>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f6 fded 	bl	8000298 <__aeabi_dsub>
 80096be:	a3a0      	add	r3, pc, #640	; (adr r3, 8009940 <__ieee754_rem_pio2+0x318>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	f7f6 fde6 	bl	8000298 <__aeabi_dsub>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	e9ca 2300 	strd	r2, r3, [sl]
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fdde 	bl	8000298 <__aeabi_dsub>
 80096dc:	a398      	add	r3, pc, #608	; (adr r3, 8009940 <__ieee754_rem_pio2+0x318>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	e7db      	b.n	800969c <__ieee754_rem_pio2+0x74>
 80096e4:	f7f6 fdda 	bl	800029c <__adddf3>
 80096e8:	45b0      	cmp	r8, r6
 80096ea:	4604      	mov	r4, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	d016      	beq.n	800971e <__ieee754_rem_pio2+0xf6>
 80096f0:	a38f      	add	r3, pc, #572	; (adr r3, 8009930 <__ieee754_rem_pio2+0x308>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 fdd1 	bl	800029c <__adddf3>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9ca 2300 	strd	r2, r3, [sl]
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f6 fdc7 	bl	8000298 <__aeabi_dsub>
 800970a:	a389      	add	r3, pc, #548	; (adr r3, 8009930 <__ieee754_rem_pio2+0x308>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fdc4 	bl	800029c <__adddf3>
 8009714:	f04f 3bff 	mov.w	fp, #4294967295
 8009718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800971c:	e7c4      	b.n	80096a8 <__ieee754_rem_pio2+0x80>
 800971e:	a386      	add	r3, pc, #536	; (adr r3, 8009938 <__ieee754_rem_pio2+0x310>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 fdba 	bl	800029c <__adddf3>
 8009728:	a385      	add	r3, pc, #532	; (adr r3, 8009940 <__ieee754_rem_pio2+0x318>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	4604      	mov	r4, r0
 8009730:	460d      	mov	r5, r1
 8009732:	f7f6 fdb3 	bl	800029c <__adddf3>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	e9ca 2300 	strd	r2, r3, [sl]
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f6 fda9 	bl	8000298 <__aeabi_dsub>
 8009746:	a37e      	add	r3, pc, #504	; (adr r3, 8009940 <__ieee754_rem_pio2+0x318>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	e7e0      	b.n	8009710 <__ieee754_rem_pio2+0xe8>
 800974e:	4b87      	ldr	r3, [pc, #540]	; (800996c <__ieee754_rem_pio2+0x344>)
 8009750:	4598      	cmp	r8, r3
 8009752:	f300 80d9 	bgt.w	8009908 <__ieee754_rem_pio2+0x2e0>
 8009756:	f7fe fb03 	bl	8007d60 <fabs>
 800975a:	ec55 4b10 	vmov	r4, r5, d0
 800975e:	ee10 0a10 	vmov	r0, s0
 8009762:	a379      	add	r3, pc, #484	; (adr r3, 8009948 <__ieee754_rem_pio2+0x320>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 ff4d 	bl	8000608 <__aeabi_dmul>
 800976e:	4b80      	ldr	r3, [pc, #512]	; (8009970 <__ieee754_rem_pio2+0x348>)
 8009770:	2200      	movs	r2, #0
 8009772:	f7f6 fd93 	bl	800029c <__adddf3>
 8009776:	f7f7 f9f7 	bl	8000b68 <__aeabi_d2iz>
 800977a:	4683      	mov	fp, r0
 800977c:	f7f6 feda 	bl	8000534 <__aeabi_i2d>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	ec43 2b18 	vmov	d8, r2, r3
 8009788:	a367      	add	r3, pc, #412	; (adr r3, 8009928 <__ieee754_rem_pio2+0x300>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 ff3b 	bl	8000608 <__aeabi_dmul>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	f7f6 fd7d 	bl	8000298 <__aeabi_dsub>
 800979e:	a364      	add	r3, pc, #400	; (adr r3, 8009930 <__ieee754_rem_pio2+0x308>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
 80097a8:	ec51 0b18 	vmov	r0, r1, d8
 80097ac:	f7f6 ff2c 	bl	8000608 <__aeabi_dmul>
 80097b0:	f1bb 0f1f 	cmp.w	fp, #31
 80097b4:	4604      	mov	r4, r0
 80097b6:	460d      	mov	r5, r1
 80097b8:	dc0d      	bgt.n	80097d6 <__ieee754_rem_pio2+0x1ae>
 80097ba:	4b6e      	ldr	r3, [pc, #440]	; (8009974 <__ieee754_rem_pio2+0x34c>)
 80097bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c4:	4543      	cmp	r3, r8
 80097c6:	d006      	beq.n	80097d6 <__ieee754_rem_pio2+0x1ae>
 80097c8:	4622      	mov	r2, r4
 80097ca:	462b      	mov	r3, r5
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f7f6 fd62 	bl	8000298 <__aeabi_dsub>
 80097d4:	e00f      	b.n	80097f6 <__ieee754_rem_pio2+0x1ce>
 80097d6:	462b      	mov	r3, r5
 80097d8:	4622      	mov	r2, r4
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f6 fd5b 	bl	8000298 <__aeabi_dsub>
 80097e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80097f0:	f1b8 0f10 	cmp.w	r8, #16
 80097f4:	dc02      	bgt.n	80097fc <__ieee754_rem_pio2+0x1d4>
 80097f6:	e9ca 0100 	strd	r0, r1, [sl]
 80097fa:	e039      	b.n	8009870 <__ieee754_rem_pio2+0x248>
 80097fc:	a34e      	add	r3, pc, #312	; (adr r3, 8009938 <__ieee754_rem_pio2+0x310>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	ec51 0b18 	vmov	r0, r1, d8
 8009806:	f7f6 feff 	bl	8000608 <__aeabi_dmul>
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fd3f 	bl	8000298 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4680      	mov	r8, r0
 8009820:	4689      	mov	r9, r1
 8009822:	4630      	mov	r0, r6
 8009824:	4639      	mov	r1, r7
 8009826:	f7f6 fd37 	bl	8000298 <__aeabi_dsub>
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	f7f6 fd33 	bl	8000298 <__aeabi_dsub>
 8009832:	a343      	add	r3, pc, #268	; (adr r3, 8009940 <__ieee754_rem_pio2+0x318>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4604      	mov	r4, r0
 800983a:	460d      	mov	r5, r1
 800983c:	ec51 0b18 	vmov	r0, r1, d8
 8009840:	f7f6 fee2 	bl	8000608 <__aeabi_dmul>
 8009844:	4622      	mov	r2, r4
 8009846:	462b      	mov	r3, r5
 8009848:	f7f6 fd26 	bl	8000298 <__aeabi_dsub>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4604      	mov	r4, r0
 8009852:	460d      	mov	r5, r1
 8009854:	4640      	mov	r0, r8
 8009856:	4649      	mov	r1, r9
 8009858:	f7f6 fd1e 	bl	8000298 <__aeabi_dsub>
 800985c:	9a03      	ldr	r2, [sp, #12]
 800985e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b31      	cmp	r3, #49	; 0x31
 8009866:	dc24      	bgt.n	80098b2 <__ieee754_rem_pio2+0x28a>
 8009868:	e9ca 0100 	strd	r0, r1, [sl]
 800986c:	4646      	mov	r6, r8
 800986e:	464f      	mov	r7, r9
 8009870:	e9da 8900 	ldrd	r8, r9, [sl]
 8009874:	4630      	mov	r0, r6
 8009876:	4642      	mov	r2, r8
 8009878:	464b      	mov	r3, r9
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fd0c 	bl	8000298 <__aeabi_dsub>
 8009880:	462b      	mov	r3, r5
 8009882:	4622      	mov	r2, r4
 8009884:	f7f6 fd08 	bl	8000298 <__aeabi_dsub>
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009890:	f6bf af0a 	bge.w	80096a8 <__ieee754_rem_pio2+0x80>
 8009894:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009898:	f8ca 3004 	str.w	r3, [sl, #4]
 800989c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098a0:	f8ca 8000 	str.w	r8, [sl]
 80098a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80098a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80098ac:	f1cb 0b00 	rsb	fp, fp, #0
 80098b0:	e6fa      	b.n	80096a8 <__ieee754_rem_pio2+0x80>
 80098b2:	a327      	add	r3, pc, #156	; (adr r3, 8009950 <__ieee754_rem_pio2+0x328>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	ec51 0b18 	vmov	r0, r1, d8
 80098bc:	f7f6 fea4 	bl	8000608 <__aeabi_dmul>
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f6 fce4 	bl	8000298 <__aeabi_dsub>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	4640      	mov	r0, r8
 80098da:	4649      	mov	r1, r9
 80098dc:	f7f6 fcdc 	bl	8000298 <__aeabi_dsub>
 80098e0:	4622      	mov	r2, r4
 80098e2:	462b      	mov	r3, r5
 80098e4:	f7f6 fcd8 	bl	8000298 <__aeabi_dsub>
 80098e8:	a31b      	add	r3, pc, #108	; (adr r3, 8009958 <__ieee754_rem_pio2+0x330>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	4604      	mov	r4, r0
 80098f0:	460d      	mov	r5, r1
 80098f2:	ec51 0b18 	vmov	r0, r1, d8
 80098f6:	f7f6 fe87 	bl	8000608 <__aeabi_dmul>
 80098fa:	4622      	mov	r2, r4
 80098fc:	462b      	mov	r3, r5
 80098fe:	f7f6 fccb 	bl	8000298 <__aeabi_dsub>
 8009902:	4604      	mov	r4, r0
 8009904:	460d      	mov	r5, r1
 8009906:	e75f      	b.n	80097c8 <__ieee754_rem_pio2+0x1a0>
 8009908:	4b1b      	ldr	r3, [pc, #108]	; (8009978 <__ieee754_rem_pio2+0x350>)
 800990a:	4598      	cmp	r8, r3
 800990c:	dd36      	ble.n	800997c <__ieee754_rem_pio2+0x354>
 800990e:	ee10 2a10 	vmov	r2, s0
 8009912:	462b      	mov	r3, r5
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	f7f6 fcbe 	bl	8000298 <__aeabi_dsub>
 800991c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009920:	e9ca 0100 	strd	r0, r1, [sl]
 8009924:	e694      	b.n	8009650 <__ieee754_rem_pio2+0x28>
 8009926:	bf00      	nop
 8009928:	54400000 	.word	0x54400000
 800992c:	3ff921fb 	.word	0x3ff921fb
 8009930:	1a626331 	.word	0x1a626331
 8009934:	3dd0b461 	.word	0x3dd0b461
 8009938:	1a600000 	.word	0x1a600000
 800993c:	3dd0b461 	.word	0x3dd0b461
 8009940:	2e037073 	.word	0x2e037073
 8009944:	3ba3198a 	.word	0x3ba3198a
 8009948:	6dc9c883 	.word	0x6dc9c883
 800994c:	3fe45f30 	.word	0x3fe45f30
 8009950:	2e000000 	.word	0x2e000000
 8009954:	3ba3198a 	.word	0x3ba3198a
 8009958:	252049c1 	.word	0x252049c1
 800995c:	397b839a 	.word	0x397b839a
 8009960:	3fe921fb 	.word	0x3fe921fb
 8009964:	4002d97b 	.word	0x4002d97b
 8009968:	3ff921fb 	.word	0x3ff921fb
 800996c:	413921fb 	.word	0x413921fb
 8009970:	3fe00000 	.word	0x3fe00000
 8009974:	0800efc8 	.word	0x0800efc8
 8009978:	7fefffff 	.word	0x7fefffff
 800997c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009980:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009984:	ee10 0a10 	vmov	r0, s0
 8009988:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800998c:	ee10 6a10 	vmov	r6, s0
 8009990:	460f      	mov	r7, r1
 8009992:	f7f7 f8e9 	bl	8000b68 <__aeabi_d2iz>
 8009996:	f7f6 fdcd 	bl	8000534 <__aeabi_i2d>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099a6:	f7f6 fc77 	bl	8000298 <__aeabi_dsub>
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <__ieee754_rem_pio2+0x410>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	f7f6 fe2b 	bl	8000608 <__aeabi_dmul>
 80099b2:	460f      	mov	r7, r1
 80099b4:	4606      	mov	r6, r0
 80099b6:	f7f7 f8d7 	bl	8000b68 <__aeabi_d2iz>
 80099ba:	f7f6 fdbb 	bl	8000534 <__aeabi_i2d>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4630      	mov	r0, r6
 80099c4:	4639      	mov	r1, r7
 80099c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80099ca:	f7f6 fc65 	bl	8000298 <__aeabi_dsub>
 80099ce:	4b1a      	ldr	r3, [pc, #104]	; (8009a38 <__ieee754_rem_pio2+0x410>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099da:	ad04      	add	r5, sp, #16
 80099dc:	f04f 0803 	mov.w	r8, #3
 80099e0:	46a9      	mov	r9, r5
 80099e2:	2600      	movs	r6, #0
 80099e4:	2700      	movs	r7, #0
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80099ee:	46c3      	mov	fp, r8
 80099f0:	3d08      	subs	r5, #8
 80099f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80099f6:	f7f7 f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d1f3      	bne.n	80099e6 <__ieee754_rem_pio2+0x3be>
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <__ieee754_rem_pio2+0x414>)
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	2302      	movs	r3, #2
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	4622      	mov	r2, r4
 8009a08:	465b      	mov	r3, fp
 8009a0a:	4651      	mov	r1, sl
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f000 f993 	bl	8009d38 <__kernel_rem_pio2>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	4683      	mov	fp, r0
 8009a18:	f6bf ae46 	bge.w	80096a8 <__ieee754_rem_pio2+0x80>
 8009a1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009a20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a24:	e9ca 2300 	strd	r2, r3, [sl]
 8009a28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009a34:	e73a      	b.n	80098ac <__ieee754_rem_pio2+0x284>
 8009a36:	bf00      	nop
 8009a38:	41700000 	.word	0x41700000
 8009a3c:	0800f048 	.word	0x0800f048

08009a40 <__ieee754_sqrt>:
 8009a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a44:	ec55 4b10 	vmov	r4, r5, d0
 8009a48:	4e55      	ldr	r6, [pc, #340]	; (8009ba0 <__ieee754_sqrt+0x160>)
 8009a4a:	43ae      	bics	r6, r5
 8009a4c:	ee10 0a10 	vmov	r0, s0
 8009a50:	ee10 3a10 	vmov	r3, s0
 8009a54:	462a      	mov	r2, r5
 8009a56:	4629      	mov	r1, r5
 8009a58:	d110      	bne.n	8009a7c <__ieee754_sqrt+0x3c>
 8009a5a:	ee10 2a10 	vmov	r2, s0
 8009a5e:	462b      	mov	r3, r5
 8009a60:	f7f6 fdd2 	bl	8000608 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fc16 	bl	800029c <__adddf3>
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	ec45 4b10 	vmov	d0, r4, r5
 8009a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	dc10      	bgt.n	8009aa2 <__ieee754_sqrt+0x62>
 8009a80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a84:	4330      	orrs	r0, r6
 8009a86:	d0f5      	beq.n	8009a74 <__ieee754_sqrt+0x34>
 8009a88:	b15d      	cbz	r5, 8009aa2 <__ieee754_sqrt+0x62>
 8009a8a:	ee10 2a10 	vmov	r2, s0
 8009a8e:	462b      	mov	r3, r5
 8009a90:	ee10 0a10 	vmov	r0, s0
 8009a94:	f7f6 fc00 	bl	8000298 <__aeabi_dsub>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	f7f6 fede 	bl	800085c <__aeabi_ddiv>
 8009aa0:	e7e6      	b.n	8009a70 <__ieee754_sqrt+0x30>
 8009aa2:	1512      	asrs	r2, r2, #20
 8009aa4:	d074      	beq.n	8009b90 <__ieee754_sqrt+0x150>
 8009aa6:	07d4      	lsls	r4, r2, #31
 8009aa8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009aac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ab4:	bf5e      	ittt	pl
 8009ab6:	0fda      	lsrpl	r2, r3, #31
 8009ab8:	005b      	lslpl	r3, r3, #1
 8009aba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009abe:	2400      	movs	r4, #0
 8009ac0:	0fda      	lsrs	r2, r3, #31
 8009ac2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ac6:	107f      	asrs	r7, r7, #1
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	2516      	movs	r5, #22
 8009acc:	4620      	mov	r0, r4
 8009ace:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ad2:	1886      	adds	r6, r0, r2
 8009ad4:	428e      	cmp	r6, r1
 8009ad6:	bfde      	ittt	le
 8009ad8:	1b89      	suble	r1, r1, r6
 8009ada:	18b0      	addle	r0, r6, r2
 8009adc:	18a4      	addle	r4, r4, r2
 8009ade:	0049      	lsls	r1, r1, #1
 8009ae0:	3d01      	subs	r5, #1
 8009ae2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009ae6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009aea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009aee:	d1f0      	bne.n	8009ad2 <__ieee754_sqrt+0x92>
 8009af0:	462a      	mov	r2, r5
 8009af2:	f04f 0e20 	mov.w	lr, #32
 8009af6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009afa:	4281      	cmp	r1, r0
 8009afc:	eb06 0c05 	add.w	ip, r6, r5
 8009b00:	dc02      	bgt.n	8009b08 <__ieee754_sqrt+0xc8>
 8009b02:	d113      	bne.n	8009b2c <__ieee754_sqrt+0xec>
 8009b04:	459c      	cmp	ip, r3
 8009b06:	d811      	bhi.n	8009b2c <__ieee754_sqrt+0xec>
 8009b08:	f1bc 0f00 	cmp.w	ip, #0
 8009b0c:	eb0c 0506 	add.w	r5, ip, r6
 8009b10:	da43      	bge.n	8009b9a <__ieee754_sqrt+0x15a>
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	db41      	blt.n	8009b9a <__ieee754_sqrt+0x15a>
 8009b16:	f100 0801 	add.w	r8, r0, #1
 8009b1a:	1a09      	subs	r1, r1, r0
 8009b1c:	459c      	cmp	ip, r3
 8009b1e:	bf88      	it	hi
 8009b20:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009b24:	eba3 030c 	sub.w	r3, r3, ip
 8009b28:	4432      	add	r2, r6
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009b30:	f1be 0e01 	subs.w	lr, lr, #1
 8009b34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b40:	d1db      	bne.n	8009afa <__ieee754_sqrt+0xba>
 8009b42:	430b      	orrs	r3, r1
 8009b44:	d006      	beq.n	8009b54 <__ieee754_sqrt+0x114>
 8009b46:	1c50      	adds	r0, r2, #1
 8009b48:	bf13      	iteet	ne
 8009b4a:	3201      	addne	r2, #1
 8009b4c:	3401      	addeq	r4, #1
 8009b4e:	4672      	moveq	r2, lr
 8009b50:	f022 0201 	bicne.w	r2, r2, #1
 8009b54:	1063      	asrs	r3, r4, #1
 8009b56:	0852      	lsrs	r2, r2, #1
 8009b58:	07e1      	lsls	r1, r4, #31
 8009b5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009b5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009b62:	bf48      	it	mi
 8009b64:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009b68:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	e781      	b.n	8009a74 <__ieee754_sqrt+0x34>
 8009b70:	0ad9      	lsrs	r1, r3, #11
 8009b72:	3815      	subs	r0, #21
 8009b74:	055b      	lsls	r3, r3, #21
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d0fa      	beq.n	8009b70 <__ieee754_sqrt+0x130>
 8009b7a:	02cd      	lsls	r5, r1, #11
 8009b7c:	d50a      	bpl.n	8009b94 <__ieee754_sqrt+0x154>
 8009b7e:	f1c2 0420 	rsb	r4, r2, #32
 8009b82:	fa23 f404 	lsr.w	r4, r3, r4
 8009b86:	1e55      	subs	r5, r2, #1
 8009b88:	4093      	lsls	r3, r2
 8009b8a:	4321      	orrs	r1, r4
 8009b8c:	1b42      	subs	r2, r0, r5
 8009b8e:	e78a      	b.n	8009aa6 <__ieee754_sqrt+0x66>
 8009b90:	4610      	mov	r0, r2
 8009b92:	e7f0      	b.n	8009b76 <__ieee754_sqrt+0x136>
 8009b94:	0049      	lsls	r1, r1, #1
 8009b96:	3201      	adds	r2, #1
 8009b98:	e7ef      	b.n	8009b7a <__ieee754_sqrt+0x13a>
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	e7bd      	b.n	8009b1a <__ieee754_sqrt+0xda>
 8009b9e:	bf00      	nop
 8009ba0:	7ff00000 	.word	0x7ff00000
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <__kernel_cos>:
 8009ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	ec57 6b10 	vmov	r6, r7, d0
 8009bb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009bb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009bb8:	ed8d 1b00 	vstr	d1, [sp]
 8009bbc:	da07      	bge.n	8009bce <__kernel_cos+0x26>
 8009bbe:	ee10 0a10 	vmov	r0, s0
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 ffd0 	bl	8000b68 <__aeabi_d2iz>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f000 8088 	beq.w	8009cde <__kernel_cos+0x136>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	f7f6 fd17 	bl	8000608 <__aeabi_dmul>
 8009bda:	4b51      	ldr	r3, [pc, #324]	; (8009d20 <__kernel_cos+0x178>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	460d      	mov	r5, r1
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	a340      	add	r3, pc, #256	; (adr r3, 8009ce8 <__kernel_cos+0x140>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	4682      	mov	sl, r0
 8009bee:	468b      	mov	fp, r1
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f7f6 fd08 	bl	8000608 <__aeabi_dmul>
 8009bf8:	a33d      	add	r3, pc, #244	; (adr r3, 8009cf0 <__kernel_cos+0x148>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fb4d 	bl	800029c <__adddf3>
 8009c02:	4622      	mov	r2, r4
 8009c04:	462b      	mov	r3, r5
 8009c06:	f7f6 fcff 	bl	8000608 <__aeabi_dmul>
 8009c0a:	a33b      	add	r3, pc, #236	; (adr r3, 8009cf8 <__kernel_cos+0x150>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fb42 	bl	8000298 <__aeabi_dsub>
 8009c14:	4622      	mov	r2, r4
 8009c16:	462b      	mov	r3, r5
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	a338      	add	r3, pc, #224	; (adr r3, 8009d00 <__kernel_cos+0x158>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 fb3b 	bl	800029c <__adddf3>
 8009c26:	4622      	mov	r2, r4
 8009c28:	462b      	mov	r3, r5
 8009c2a:	f7f6 fced 	bl	8000608 <__aeabi_dmul>
 8009c2e:	a336      	add	r3, pc, #216	; (adr r3, 8009d08 <__kernel_cos+0x160>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f7f6 fb30 	bl	8000298 <__aeabi_dsub>
 8009c38:	4622      	mov	r2, r4
 8009c3a:	462b      	mov	r3, r5
 8009c3c:	f7f6 fce4 	bl	8000608 <__aeabi_dmul>
 8009c40:	a333      	add	r3, pc, #204	; (adr r3, 8009d10 <__kernel_cos+0x168>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fb29 	bl	800029c <__adddf3>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f7f6 fcdb 	bl	8000608 <__aeabi_dmul>
 8009c52:	4622      	mov	r2, r4
 8009c54:	462b      	mov	r3, r5
 8009c56:	f7f6 fcd7 	bl	8000608 <__aeabi_dmul>
 8009c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c5e:	4604      	mov	r4, r0
 8009c60:	460d      	mov	r5, r1
 8009c62:	4630      	mov	r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	f7f6 fccf 	bl	8000608 <__aeabi_dmul>
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	4629      	mov	r1, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7f6 fb11 	bl	8000298 <__aeabi_dsub>
 8009c76:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <__kernel_cos+0x17c>)
 8009c78:	4598      	cmp	r8, r3
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	dc10      	bgt.n	8009ca2 <__kernel_cos+0xfa>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4650      	mov	r0, sl
 8009c86:	4659      	mov	r1, fp
 8009c88:	f7f6 fb06 	bl	8000298 <__aeabi_dsub>
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4926      	ldr	r1, [pc, #152]	; (8009d28 <__kernel_cos+0x180>)
 8009c90:	4602      	mov	r2, r0
 8009c92:	2000      	movs	r0, #0
 8009c94:	f7f6 fb00 	bl	8000298 <__aeabi_dsub>
 8009c98:	ec41 0b10 	vmov	d0, r0, r1
 8009c9c:	b003      	add	sp, #12
 8009c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca2:	4b22      	ldr	r3, [pc, #136]	; (8009d2c <__kernel_cos+0x184>)
 8009ca4:	4920      	ldr	r1, [pc, #128]	; (8009d28 <__kernel_cos+0x180>)
 8009ca6:	4598      	cmp	r8, r3
 8009ca8:	bfcc      	ite	gt
 8009caa:	4d21      	ldrgt	r5, [pc, #132]	; (8009d30 <__kernel_cos+0x188>)
 8009cac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009cb0:	2400      	movs	r4, #0
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f7f6 faee 	bl	8000298 <__aeabi_dsub>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4680      	mov	r8, r0
 8009cc0:	4689      	mov	r9, r1
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	4650      	mov	r0, sl
 8009cc6:	4659      	mov	r1, fp
 8009cc8:	f7f6 fae6 	bl	8000298 <__aeabi_dsub>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fae2 	bl	8000298 <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4640      	mov	r0, r8
 8009cda:	4649      	mov	r1, r9
 8009cdc:	e7da      	b.n	8009c94 <__kernel_cos+0xec>
 8009cde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009d18 <__kernel_cos+0x170>
 8009ce2:	e7db      	b.n	8009c9c <__kernel_cos+0xf4>
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	be8838d4 	.word	0xbe8838d4
 8009cec:	bda8fae9 	.word	0xbda8fae9
 8009cf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009cf4:	3e21ee9e 	.word	0x3e21ee9e
 8009cf8:	809c52ad 	.word	0x809c52ad
 8009cfc:	3e927e4f 	.word	0x3e927e4f
 8009d00:	19cb1590 	.word	0x19cb1590
 8009d04:	3efa01a0 	.word	0x3efa01a0
 8009d08:	16c15177 	.word	0x16c15177
 8009d0c:	3f56c16c 	.word	0x3f56c16c
 8009d10:	5555554c 	.word	0x5555554c
 8009d14:	3fa55555 	.word	0x3fa55555
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	3fe00000 	.word	0x3fe00000
 8009d24:	3fd33332 	.word	0x3fd33332
 8009d28:	3ff00000 	.word	0x3ff00000
 8009d2c:	3fe90000 	.word	0x3fe90000
 8009d30:	3fd20000 	.word	0x3fd20000
 8009d34:	00000000 	.word	0x00000000

08009d38 <__kernel_rem_pio2>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	ed2d 8b02 	vpush	{d8}
 8009d40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009d44:	f112 0f14 	cmn.w	r2, #20
 8009d48:	9308      	str	r3, [sp, #32]
 8009d4a:	9101      	str	r1, [sp, #4]
 8009d4c:	4bc4      	ldr	r3, [pc, #784]	; (800a060 <__kernel_rem_pio2+0x328>)
 8009d4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009d50:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	9b08      	ldr	r3, [sp, #32]
 8009d5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d5e:	bfa8      	it	ge
 8009d60:	1ed4      	subge	r4, r2, #3
 8009d62:	9306      	str	r3, [sp, #24]
 8009d64:	bfb2      	itee	lt
 8009d66:	2400      	movlt	r4, #0
 8009d68:	2318      	movge	r3, #24
 8009d6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009d6e:	f06f 0317 	mvn.w	r3, #23
 8009d72:	fb04 3303 	mla	r3, r4, r3, r3
 8009d76:	eb03 0a02 	add.w	sl, r3, r2
 8009d7a:	9b02      	ldr	r3, [sp, #8]
 8009d7c:	9a06      	ldr	r2, [sp, #24]
 8009d7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a050 <__kernel_rem_pio2+0x318>
 8009d82:	eb03 0802 	add.w	r8, r3, r2
 8009d86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d88:	1aa7      	subs	r7, r4, r2
 8009d8a:	ae22      	add	r6, sp, #136	; 0x88
 8009d8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009d90:	2500      	movs	r5, #0
 8009d92:	4545      	cmp	r5, r8
 8009d94:	dd13      	ble.n	8009dbe <__kernel_rem_pio2+0x86>
 8009d96:	9b08      	ldr	r3, [sp, #32]
 8009d98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a050 <__kernel_rem_pio2+0x318>
 8009d9c:	aa22      	add	r2, sp, #136	; 0x88
 8009d9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009da2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	9b02      	ldr	r3, [sp, #8]
 8009dac:	4598      	cmp	r8, r3
 8009dae:	dc2f      	bgt.n	8009e10 <__kernel_rem_pio2+0xd8>
 8009db0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009db4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009db8:	462f      	mov	r7, r5
 8009dba:	2600      	movs	r6, #0
 8009dbc:	e01b      	b.n	8009df6 <__kernel_rem_pio2+0xbe>
 8009dbe:	42ef      	cmn	r7, r5
 8009dc0:	d407      	bmi.n	8009dd2 <__kernel_rem_pio2+0x9a>
 8009dc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009dc6:	f7f6 fbb5 	bl	8000534 <__aeabi_i2d>
 8009dca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009dce:	3501      	adds	r5, #1
 8009dd0:	e7df      	b.n	8009d92 <__kernel_rem_pio2+0x5a>
 8009dd2:	ec51 0b18 	vmov	r0, r1, d8
 8009dd6:	e7f8      	b.n	8009dca <__kernel_rem_pio2+0x92>
 8009dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ddc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009de0:	f7f6 fc12 	bl	8000608 <__aeabi_dmul>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dec:	f7f6 fa56 	bl	800029c <__adddf3>
 8009df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009df4:	3601      	adds	r6, #1
 8009df6:	9b06      	ldr	r3, [sp, #24]
 8009df8:	429e      	cmp	r6, r3
 8009dfa:	f1a7 0708 	sub.w	r7, r7, #8
 8009dfe:	ddeb      	ble.n	8009dd8 <__kernel_rem_pio2+0xa0>
 8009e00:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009e04:	f108 0801 	add.w	r8, r8, #1
 8009e08:	ecab 7b02 	vstmia	fp!, {d7}
 8009e0c:	3508      	adds	r5, #8
 8009e0e:	e7cc      	b.n	8009daa <__kernel_rem_pio2+0x72>
 8009e10:	9b02      	ldr	r3, [sp, #8]
 8009e12:	aa0e      	add	r2, sp, #56	; 0x38
 8009e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e18:	930d      	str	r3, [sp, #52]	; 0x34
 8009e1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009e1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009e20:	9c02      	ldr	r4, [sp, #8]
 8009e22:	930c      	str	r3, [sp, #48]	; 0x30
 8009e24:	00e3      	lsls	r3, r4, #3
 8009e26:	930a      	str	r3, [sp, #40]	; 0x28
 8009e28:	ab9a      	add	r3, sp, #616	; 0x268
 8009e2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009e32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009e36:	ab72      	add	r3, sp, #456	; 0x1c8
 8009e38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009e3c:	46c3      	mov	fp, r8
 8009e3e:	46a1      	mov	r9, r4
 8009e40:	f1b9 0f00 	cmp.w	r9, #0
 8009e44:	f1a5 0508 	sub.w	r5, r5, #8
 8009e48:	dc77      	bgt.n	8009f3a <__kernel_rem_pio2+0x202>
 8009e4a:	ec47 6b10 	vmov	d0, r6, r7
 8009e4e:	4650      	mov	r0, sl
 8009e50:	f000 fdd2 	bl	800a9f8 <scalbn>
 8009e54:	ec57 6b10 	vmov	r6, r7, d0
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009e5e:	ee10 0a10 	vmov	r0, s0
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fbd0 	bl	8000608 <__aeabi_dmul>
 8009e68:	ec41 0b10 	vmov	d0, r0, r1
 8009e6c:	f7fd ff84 	bl	8007d78 <floor>
 8009e70:	4b7c      	ldr	r3, [pc, #496]	; (800a064 <__kernel_rem_pio2+0x32c>)
 8009e72:	ec51 0b10 	vmov	r0, r1, d0
 8009e76:	2200      	movs	r2, #0
 8009e78:	f7f6 fbc6 	bl	8000608 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4630      	mov	r0, r6
 8009e82:	4639      	mov	r1, r7
 8009e84:	f7f6 fa08 	bl	8000298 <__aeabi_dsub>
 8009e88:	460f      	mov	r7, r1
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	f7f6 fe6c 	bl	8000b68 <__aeabi_d2iz>
 8009e90:	9004      	str	r0, [sp, #16]
 8009e92:	f7f6 fb4f 	bl	8000534 <__aeabi_i2d>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	f7f6 f9fb 	bl	8000298 <__aeabi_dsub>
 8009ea2:	f1ba 0f00 	cmp.w	sl, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460f      	mov	r7, r1
 8009eaa:	dd6d      	ble.n	8009f88 <__kernel_rem_pio2+0x250>
 8009eac:	1e62      	subs	r2, r4, #1
 8009eae:	ab0e      	add	r3, sp, #56	; 0x38
 8009eb0:	9d04      	ldr	r5, [sp, #16]
 8009eb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009eb6:	f1ca 0118 	rsb	r1, sl, #24
 8009eba:	fa40 f301 	asr.w	r3, r0, r1
 8009ebe:	441d      	add	r5, r3
 8009ec0:	408b      	lsls	r3, r1
 8009ec2:	1ac0      	subs	r0, r0, r3
 8009ec4:	ab0e      	add	r3, sp, #56	; 0x38
 8009ec6:	9504      	str	r5, [sp, #16]
 8009ec8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009ecc:	f1ca 0317 	rsb	r3, sl, #23
 8009ed0:	fa40 fb03 	asr.w	fp, r0, r3
 8009ed4:	f1bb 0f00 	cmp.w	fp, #0
 8009ed8:	dd65      	ble.n	8009fa6 <__kernel_rem_pio2+0x26e>
 8009eda:	9b04      	ldr	r3, [sp, #16]
 8009edc:	2200      	movs	r2, #0
 8009ede:	3301      	adds	r3, #1
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	4615      	mov	r5, r2
 8009ee4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009ee8:	4294      	cmp	r4, r2
 8009eea:	f300 809c 	bgt.w	800a026 <__kernel_rem_pio2+0x2ee>
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	dd07      	ble.n	8009f04 <__kernel_rem_pio2+0x1cc>
 8009ef4:	f1ba 0f01 	cmp.w	sl, #1
 8009ef8:	f000 80c0 	beq.w	800a07c <__kernel_rem_pio2+0x344>
 8009efc:	f1ba 0f02 	cmp.w	sl, #2
 8009f00:	f000 80c6 	beq.w	800a090 <__kernel_rem_pio2+0x358>
 8009f04:	f1bb 0f02 	cmp.w	fp, #2
 8009f08:	d14d      	bne.n	8009fa6 <__kernel_rem_pio2+0x26e>
 8009f0a:	4632      	mov	r2, r6
 8009f0c:	463b      	mov	r3, r7
 8009f0e:	4956      	ldr	r1, [pc, #344]	; (800a068 <__kernel_rem_pio2+0x330>)
 8009f10:	2000      	movs	r0, #0
 8009f12:	f7f6 f9c1 	bl	8000298 <__aeabi_dsub>
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	d043      	beq.n	8009fa6 <__kernel_rem_pio2+0x26e>
 8009f1e:	4650      	mov	r0, sl
 8009f20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a058 <__kernel_rem_pio2+0x320>
 8009f24:	f000 fd68 	bl	800a9f8 <scalbn>
 8009f28:	4630      	mov	r0, r6
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	ec53 2b10 	vmov	r2, r3, d0
 8009f30:	f7f6 f9b2 	bl	8000298 <__aeabi_dsub>
 8009f34:	4606      	mov	r6, r0
 8009f36:	460f      	mov	r7, r1
 8009f38:	e035      	b.n	8009fa6 <__kernel_rem_pio2+0x26e>
 8009f3a:	4b4c      	ldr	r3, [pc, #304]	; (800a06c <__kernel_rem_pio2+0x334>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4630      	mov	r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	f7f6 fb61 	bl	8000608 <__aeabi_dmul>
 8009f46:	f7f6 fe0f 	bl	8000b68 <__aeabi_d2iz>
 8009f4a:	f7f6 faf3 	bl	8000534 <__aeabi_i2d>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	ec43 2b18 	vmov	d8, r2, r3
 8009f56:	4b46      	ldr	r3, [pc, #280]	; (800a070 <__kernel_rem_pio2+0x338>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f7f6 fb55 	bl	8000608 <__aeabi_dmul>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	f7f6 f997 	bl	8000298 <__aeabi_dsub>
 8009f6a:	f7f6 fdfd 	bl	8000b68 <__aeabi_d2iz>
 8009f6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f72:	f84b 0b04 	str.w	r0, [fp], #4
 8009f76:	ec51 0b18 	vmov	r0, r1, d8
 8009f7a:	f7f6 f98f 	bl	800029c <__adddf3>
 8009f7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f82:	4606      	mov	r6, r0
 8009f84:	460f      	mov	r7, r1
 8009f86:	e75b      	b.n	8009e40 <__kernel_rem_pio2+0x108>
 8009f88:	d106      	bne.n	8009f98 <__kernel_rem_pio2+0x260>
 8009f8a:	1e63      	subs	r3, r4, #1
 8009f8c:	aa0e      	add	r2, sp, #56	; 0x38
 8009f8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009f92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009f96:	e79d      	b.n	8009ed4 <__kernel_rem_pio2+0x19c>
 8009f98:	4b36      	ldr	r3, [pc, #216]	; (800a074 <__kernel_rem_pio2+0x33c>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 fdba 	bl	8000b14 <__aeabi_dcmpge>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d13d      	bne.n	800a020 <__kernel_rem_pio2+0x2e8>
 8009fa4:	4683      	mov	fp, r0
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f7f6 fd93 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f000 80c0 	beq.w	800a138 <__kernel_rem_pio2+0x400>
 8009fb8:	1e65      	subs	r5, r4, #1
 8009fba:	462b      	mov	r3, r5
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	9902      	ldr	r1, [sp, #8]
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	da6c      	bge.n	800a09e <__kernel_rem_pio2+0x366>
 8009fc4:	2a00      	cmp	r2, #0
 8009fc6:	f000 8089 	beq.w	800a0dc <__kernel_rem_pio2+0x3a4>
 8009fca:	ab0e      	add	r3, sp, #56	; 0x38
 8009fcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8009fd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80ad 	beq.w	800a134 <__kernel_rem_pio2+0x3fc>
 8009fda:	4650      	mov	r0, sl
 8009fdc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a058 <__kernel_rem_pio2+0x320>
 8009fe0:	f000 fd0a 	bl	800a9f8 <scalbn>
 8009fe4:	ab9a      	add	r3, sp, #616	; 0x268
 8009fe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009fea:	ec57 6b10 	vmov	r6, r7, d0
 8009fee:	00ec      	lsls	r4, r5, #3
 8009ff0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009ff4:	46aa      	mov	sl, r5
 8009ff6:	f1ba 0f00 	cmp.w	sl, #0
 8009ffa:	f280 80d6 	bge.w	800a1aa <__kernel_rem_pio2+0x472>
 8009ffe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a050 <__kernel_rem_pio2+0x318>
 800a002:	462e      	mov	r6, r5
 800a004:	2e00      	cmp	r6, #0
 800a006:	f2c0 8104 	blt.w	800a212 <__kernel_rem_pio2+0x4da>
 800a00a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a00c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a010:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a078 <__kernel_rem_pio2+0x340>
 800a014:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a018:	f04f 0800 	mov.w	r8, #0
 800a01c:	1baf      	subs	r7, r5, r6
 800a01e:	e0ea      	b.n	800a1f6 <__kernel_rem_pio2+0x4be>
 800a020:	f04f 0b02 	mov.w	fp, #2
 800a024:	e759      	b.n	8009eda <__kernel_rem_pio2+0x1a2>
 800a026:	f8d8 3000 	ldr.w	r3, [r8]
 800a02a:	b955      	cbnz	r5, 800a042 <__kernel_rem_pio2+0x30a>
 800a02c:	b123      	cbz	r3, 800a038 <__kernel_rem_pio2+0x300>
 800a02e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a032:	f8c8 3000 	str.w	r3, [r8]
 800a036:	2301      	movs	r3, #1
 800a038:	3201      	adds	r2, #1
 800a03a:	f108 0804 	add.w	r8, r8, #4
 800a03e:	461d      	mov	r5, r3
 800a040:	e752      	b.n	8009ee8 <__kernel_rem_pio2+0x1b0>
 800a042:	1acb      	subs	r3, r1, r3
 800a044:	f8c8 3000 	str.w	r3, [r8]
 800a048:	462b      	mov	r3, r5
 800a04a:	e7f5      	b.n	800a038 <__kernel_rem_pio2+0x300>
 800a04c:	f3af 8000 	nop.w
	...
 800a05c:	3ff00000 	.word	0x3ff00000
 800a060:	0800f190 	.word	0x0800f190
 800a064:	40200000 	.word	0x40200000
 800a068:	3ff00000 	.word	0x3ff00000
 800a06c:	3e700000 	.word	0x3e700000
 800a070:	41700000 	.word	0x41700000
 800a074:	3fe00000 	.word	0x3fe00000
 800a078:	0800f150 	.word	0x0800f150
 800a07c:	1e62      	subs	r2, r4, #1
 800a07e:	ab0e      	add	r3, sp, #56	; 0x38
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a088:	a90e      	add	r1, sp, #56	; 0x38
 800a08a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a08e:	e739      	b.n	8009f04 <__kernel_rem_pio2+0x1cc>
 800a090:	1e62      	subs	r2, r4, #1
 800a092:	ab0e      	add	r3, sp, #56	; 0x38
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a09c:	e7f4      	b.n	800a088 <__kernel_rem_pio2+0x350>
 800a09e:	a90e      	add	r1, sp, #56	; 0x38
 800a0a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	e789      	b.n	8009fbe <__kernel_rem_pio2+0x286>
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d0fa      	beq.n	800a0aa <__kernel_rem_pio2+0x372>
 800a0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a0ba:	446a      	add	r2, sp
 800a0bc:	3a98      	subs	r2, #152	; 0x98
 800a0be:	920a      	str	r2, [sp, #40]	; 0x28
 800a0c0:	9a08      	ldr	r2, [sp, #32]
 800a0c2:	18e3      	adds	r3, r4, r3
 800a0c4:	18a5      	adds	r5, r4, r2
 800a0c6:	aa22      	add	r2, sp, #136	; 0x88
 800a0c8:	f104 0801 	add.w	r8, r4, #1
 800a0cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	4543      	cmp	r3, r8
 800a0d6:	da04      	bge.n	800a0e2 <__kernel_rem_pio2+0x3aa>
 800a0d8:	461c      	mov	r4, r3
 800a0da:	e6a3      	b.n	8009e24 <__kernel_rem_pio2+0xec>
 800a0dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7e4      	b.n	800a0ac <__kernel_rem_pio2+0x374>
 800a0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a0e8:	f7f6 fa24 	bl	8000534 <__aeabi_i2d>
 800a0ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f2:	46ab      	mov	fp, r5
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	2700      	movs	r7, #0
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	4599      	cmp	r9, r3
 800a102:	dd06      	ble.n	800a112 <__kernel_rem_pio2+0x3da>
 800a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a106:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	930a      	str	r3, [sp, #40]	; 0x28
 800a110:	e7df      	b.n	800a0d2 <__kernel_rem_pio2+0x39a>
 800a112:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a116:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a11a:	f7f6 fa75 	bl	8000608 <__aeabi_dmul>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4630      	mov	r0, r6
 800a124:	4639      	mov	r1, r7
 800a126:	f7f6 f8b9 	bl	800029c <__adddf3>
 800a12a:	f109 0901 	add.w	r9, r9, #1
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	e7e4      	b.n	800a0fe <__kernel_rem_pio2+0x3c6>
 800a134:	3d01      	subs	r5, #1
 800a136:	e748      	b.n	8009fca <__kernel_rem_pio2+0x292>
 800a138:	ec47 6b10 	vmov	d0, r6, r7
 800a13c:	f1ca 0000 	rsb	r0, sl, #0
 800a140:	f000 fc5a 	bl	800a9f8 <scalbn>
 800a144:	ec57 6b10 	vmov	r6, r7, d0
 800a148:	4ba0      	ldr	r3, [pc, #640]	; (800a3cc <__kernel_rem_pio2+0x694>)
 800a14a:	ee10 0a10 	vmov	r0, s0
 800a14e:	2200      	movs	r2, #0
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fcdf 	bl	8000b14 <__aeabi_dcmpge>
 800a156:	b1f8      	cbz	r0, 800a198 <__kernel_rem_pio2+0x460>
 800a158:	4b9d      	ldr	r3, [pc, #628]	; (800a3d0 <__kernel_rem_pio2+0x698>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 fa52 	bl	8000608 <__aeabi_dmul>
 800a164:	f7f6 fd00 	bl	8000b68 <__aeabi_d2iz>
 800a168:	4680      	mov	r8, r0
 800a16a:	f7f6 f9e3 	bl	8000534 <__aeabi_i2d>
 800a16e:	4b97      	ldr	r3, [pc, #604]	; (800a3cc <__kernel_rem_pio2+0x694>)
 800a170:	2200      	movs	r2, #0
 800a172:	f7f6 fa49 	bl	8000608 <__aeabi_dmul>
 800a176:	460b      	mov	r3, r1
 800a178:	4602      	mov	r2, r0
 800a17a:	4639      	mov	r1, r7
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7f6 f88b 	bl	8000298 <__aeabi_dsub>
 800a182:	f7f6 fcf1 	bl	8000b68 <__aeabi_d2iz>
 800a186:	1c65      	adds	r5, r4, #1
 800a188:	ab0e      	add	r3, sp, #56	; 0x38
 800a18a:	f10a 0a18 	add.w	sl, sl, #24
 800a18e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a192:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a196:	e720      	b.n	8009fda <__kernel_rem_pio2+0x2a2>
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 fce4 	bl	8000b68 <__aeabi_d2iz>
 800a1a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a1a2:	4625      	mov	r5, r4
 800a1a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a1a8:	e717      	b.n	8009fda <__kernel_rem_pio2+0x2a2>
 800a1aa:	ab0e      	add	r3, sp, #56	; 0x38
 800a1ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a1b0:	f7f6 f9c0 	bl	8000534 <__aeabi_i2d>
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	f7f6 fa26 	bl	8000608 <__aeabi_dmul>
 800a1bc:	4b84      	ldr	r3, [pc, #528]	; (800a3d0 <__kernel_rem_pio2+0x698>)
 800a1be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	f7f6 fa1e 	bl	8000608 <__aeabi_dmul>
 800a1cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	460f      	mov	r7, r1
 800a1d4:	e70f      	b.n	8009ff6 <__kernel_rem_pio2+0x2be>
 800a1d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a1da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a1de:	f7f6 fa13 	bl	8000608 <__aeabi_dmul>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1ea:	f7f6 f857 	bl	800029c <__adddf3>
 800a1ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1f2:	f108 0801 	add.w	r8, r8, #1
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	4598      	cmp	r8, r3
 800a1fa:	dc01      	bgt.n	800a200 <__kernel_rem_pio2+0x4c8>
 800a1fc:	45b8      	cmp	r8, r7
 800a1fe:	ddea      	ble.n	800a1d6 <__kernel_rem_pio2+0x49e>
 800a200:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a204:	ab4a      	add	r3, sp, #296	; 0x128
 800a206:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a20a:	ed87 7b00 	vstr	d7, [r7]
 800a20e:	3e01      	subs	r6, #1
 800a210:	e6f8      	b.n	800a004 <__kernel_rem_pio2+0x2cc>
 800a212:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a214:	2b02      	cmp	r3, #2
 800a216:	dc0b      	bgt.n	800a230 <__kernel_rem_pio2+0x4f8>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc35      	bgt.n	800a288 <__kernel_rem_pio2+0x550>
 800a21c:	d059      	beq.n	800a2d2 <__kernel_rem_pio2+0x59a>
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	f003 0007 	and.w	r0, r3, #7
 800a224:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a228:	ecbd 8b02 	vpop	{d8}
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a232:	2b03      	cmp	r3, #3
 800a234:	d1f3      	bne.n	800a21e <__kernel_rem_pio2+0x4e6>
 800a236:	ab4a      	add	r3, sp, #296	; 0x128
 800a238:	4423      	add	r3, r4
 800a23a:	9306      	str	r3, [sp, #24]
 800a23c:	461c      	mov	r4, r3
 800a23e:	469a      	mov	sl, r3
 800a240:	9502      	str	r5, [sp, #8]
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f1aa 0a08 	sub.w	sl, sl, #8
 800a24a:	dc6b      	bgt.n	800a324 <__kernel_rem_pio2+0x5ec>
 800a24c:	46aa      	mov	sl, r5
 800a24e:	f1ba 0f01 	cmp.w	sl, #1
 800a252:	f1a4 0408 	sub.w	r4, r4, #8
 800a256:	f300 8085 	bgt.w	800a364 <__kernel_rem_pio2+0x62c>
 800a25a:	9c06      	ldr	r4, [sp, #24]
 800a25c:	2000      	movs	r0, #0
 800a25e:	3408      	adds	r4, #8
 800a260:	2100      	movs	r1, #0
 800a262:	2d01      	cmp	r5, #1
 800a264:	f300 809d 	bgt.w	800a3a2 <__kernel_rem_pio2+0x66a>
 800a268:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a26c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a270:	f1bb 0f00 	cmp.w	fp, #0
 800a274:	f040 809b 	bne.w	800a3ae <__kernel_rem_pio2+0x676>
 800a278:	9b01      	ldr	r3, [sp, #4]
 800a27a:	e9c3 5600 	strd	r5, r6, [r3]
 800a27e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a282:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a286:	e7ca      	b.n	800a21e <__kernel_rem_pio2+0x4e6>
 800a288:	3408      	adds	r4, #8
 800a28a:	ab4a      	add	r3, sp, #296	; 0x128
 800a28c:	441c      	add	r4, r3
 800a28e:	462e      	mov	r6, r5
 800a290:	2000      	movs	r0, #0
 800a292:	2100      	movs	r1, #0
 800a294:	2e00      	cmp	r6, #0
 800a296:	da36      	bge.n	800a306 <__kernel_rem_pio2+0x5ce>
 800a298:	f1bb 0f00 	cmp.w	fp, #0
 800a29c:	d039      	beq.n	800a312 <__kernel_rem_pio2+0x5da>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a4:	9c01      	ldr	r4, [sp, #4]
 800a2a6:	e9c4 2300 	strd	r2, r3, [r4]
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a2b2:	f7f5 fff1 	bl	8000298 <__aeabi_dsub>
 800a2b6:	ae4c      	add	r6, sp, #304	; 0x130
 800a2b8:	2401      	movs	r4, #1
 800a2ba:	42a5      	cmp	r5, r4
 800a2bc:	da2c      	bge.n	800a318 <__kernel_rem_pio2+0x5e0>
 800a2be:	f1bb 0f00 	cmp.w	fp, #0
 800a2c2:	d002      	beq.n	800a2ca <__kernel_rem_pio2+0x592>
 800a2c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a2d0:	e7a5      	b.n	800a21e <__kernel_rem_pio2+0x4e6>
 800a2d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a2d6:	eb0d 0403 	add.w	r4, sp, r3
 800a2da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a2de:	2000      	movs	r0, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	da09      	bge.n	800a2fa <__kernel_rem_pio2+0x5c2>
 800a2e6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ea:	d002      	beq.n	800a2f2 <__kernel_rem_pio2+0x5ba>
 800a2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	9b01      	ldr	r3, [sp, #4]
 800a2f4:	e9c3 0100 	strd	r0, r1, [r3]
 800a2f8:	e791      	b.n	800a21e <__kernel_rem_pio2+0x4e6>
 800a2fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2fe:	f7f5 ffcd 	bl	800029c <__adddf3>
 800a302:	3d01      	subs	r5, #1
 800a304:	e7ed      	b.n	800a2e2 <__kernel_rem_pio2+0x5aa>
 800a306:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a30a:	f7f5 ffc7 	bl	800029c <__adddf3>
 800a30e:	3e01      	subs	r6, #1
 800a310:	e7c0      	b.n	800a294 <__kernel_rem_pio2+0x55c>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	e7c5      	b.n	800a2a4 <__kernel_rem_pio2+0x56c>
 800a318:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a31c:	f7f5 ffbe 	bl	800029c <__adddf3>
 800a320:	3401      	adds	r4, #1
 800a322:	e7ca      	b.n	800a2ba <__kernel_rem_pio2+0x582>
 800a324:	e9da 8900 	ldrd	r8, r9, [sl]
 800a328:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	3b01      	subs	r3, #1
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f5 ffaf 	bl	800029c <__adddf3>
 800a33e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4640      	mov	r0, r8
 800a348:	4649      	mov	r1, r9
 800a34a:	f7f5 ffa5 	bl	8000298 <__aeabi_dsub>
 800a34e:	4632      	mov	r2, r6
 800a350:	463b      	mov	r3, r7
 800a352:	f7f5 ffa3 	bl	800029c <__adddf3>
 800a356:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a35a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a35e:	ed8a 7b00 	vstr	d7, [sl]
 800a362:	e76e      	b.n	800a242 <__kernel_rem_pio2+0x50a>
 800a364:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a368:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a36c:	4640      	mov	r0, r8
 800a36e:	4632      	mov	r2, r6
 800a370:	463b      	mov	r3, r7
 800a372:	4649      	mov	r1, r9
 800a374:	f7f5 ff92 	bl	800029c <__adddf3>
 800a378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f5 ff88 	bl	8000298 <__aeabi_dsub>
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	f7f5 ff86 	bl	800029c <__adddf3>
 800a390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a394:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a398:	ed84 7b00 	vstr	d7, [r4]
 800a39c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3a0:	e755      	b.n	800a24e <__kernel_rem_pio2+0x516>
 800a3a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a3a6:	f7f5 ff79 	bl	800029c <__adddf3>
 800a3aa:	3d01      	subs	r5, #1
 800a3ac:	e759      	b.n	800a262 <__kernel_rem_pio2+0x52a>
 800a3ae:	9b01      	ldr	r3, [sp, #4]
 800a3b0:	9a01      	ldr	r2, [sp, #4]
 800a3b2:	601d      	str	r5, [r3, #0]
 800a3b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a3b8:	605c      	str	r4, [r3, #4]
 800a3ba:	609f      	str	r7, [r3, #8]
 800a3bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a3c0:	60d3      	str	r3, [r2, #12]
 800a3c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3c6:	6110      	str	r0, [r2, #16]
 800a3c8:	6153      	str	r3, [r2, #20]
 800a3ca:	e728      	b.n	800a21e <__kernel_rem_pio2+0x4e6>
 800a3cc:	41700000 	.word	0x41700000
 800a3d0:	3e700000 	.word	0x3e700000
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <__kernel_sin>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	ed2d 8b04 	vpush	{d8-d9}
 800a3e0:	eeb0 8a41 	vmov.f32	s16, s2
 800a3e4:	eef0 8a61 	vmov.f32	s17, s3
 800a3e8:	ec55 4b10 	vmov	r4, r5, d0
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a3f6:	9001      	str	r0, [sp, #4]
 800a3f8:	da06      	bge.n	800a408 <__kernel_sin+0x30>
 800a3fa:	ee10 0a10 	vmov	r0, s0
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f6 fbb2 	bl	8000b68 <__aeabi_d2iz>
 800a404:	2800      	cmp	r0, #0
 800a406:	d051      	beq.n	800a4ac <__kernel_sin+0xd4>
 800a408:	4622      	mov	r2, r4
 800a40a:	462b      	mov	r3, r5
 800a40c:	4620      	mov	r0, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	f7f6 f8fa 	bl	8000608 <__aeabi_dmul>
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f6 f8f2 	bl	8000608 <__aeabi_dmul>
 800a424:	a341      	add	r3, pc, #260	; (adr r3, 800a52c <__kernel_sin+0x154>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	4680      	mov	r8, r0
 800a42c:	4689      	mov	r9, r1
 800a42e:	4650      	mov	r0, sl
 800a430:	4659      	mov	r1, fp
 800a432:	f7f6 f8e9 	bl	8000608 <__aeabi_dmul>
 800a436:	a33f      	add	r3, pc, #252	; (adr r3, 800a534 <__kernel_sin+0x15c>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	f7f5 ff2c 	bl	8000298 <__aeabi_dsub>
 800a440:	4652      	mov	r2, sl
 800a442:	465b      	mov	r3, fp
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	a33c      	add	r3, pc, #240	; (adr r3, 800a53c <__kernel_sin+0x164>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 ff25 	bl	800029c <__adddf3>
 800a452:	4652      	mov	r2, sl
 800a454:	465b      	mov	r3, fp
 800a456:	f7f6 f8d7 	bl	8000608 <__aeabi_dmul>
 800a45a:	a33a      	add	r3, pc, #232	; (adr r3, 800a544 <__kernel_sin+0x16c>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f5 ff1a 	bl	8000298 <__aeabi_dsub>
 800a464:	4652      	mov	r2, sl
 800a466:	465b      	mov	r3, fp
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	a337      	add	r3, pc, #220	; (adr r3, 800a54c <__kernel_sin+0x174>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f5 ff13 	bl	800029c <__adddf3>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	b9eb      	cbnz	r3, 800a4ba <__kernel_sin+0xe2>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4650      	mov	r0, sl
 800a484:	4659      	mov	r1, fp
 800a486:	f7f6 f8bf 	bl	8000608 <__aeabi_dmul>
 800a48a:	a325      	add	r3, pc, #148	; (adr r3, 800a520 <__kernel_sin+0x148>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f5 ff02 	bl	8000298 <__aeabi_dsub>
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	f7f6 f8b6 	bl	8000608 <__aeabi_dmul>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	f7f5 fefa 	bl	800029c <__adddf3>
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	ec45 4b10 	vmov	d0, r4, r5
 800a4b0:	b003      	add	sp, #12
 800a4b2:	ecbd 8b04 	vpop	{d8-d9}
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <__kernel_sin+0x150>)
 800a4bc:	ec51 0b18 	vmov	r0, r1, d8
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f7f6 f8a1 	bl	8000608 <__aeabi_dmul>
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	ec41 0b19 	vmov	d9, r0, r1
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	f7f6 f899 	bl	8000608 <__aeabi_dmul>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	ec51 0b19 	vmov	r0, r1, d9
 800a4de:	f7f5 fedb 	bl	8000298 <__aeabi_dsub>
 800a4e2:	4652      	mov	r2, sl
 800a4e4:	465b      	mov	r3, fp
 800a4e6:	f7f6 f88f 	bl	8000608 <__aeabi_dmul>
 800a4ea:	ec53 2b18 	vmov	r2, r3, d8
 800a4ee:	f7f5 fed3 	bl	8000298 <__aeabi_dsub>
 800a4f2:	a30b      	add	r3, pc, #44	; (adr r3, 800a520 <__kernel_sin+0x148>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	4649      	mov	r1, r9
 800a500:	f7f6 f882 	bl	8000608 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f5 fec6 	bl	800029c <__adddf3>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4620      	mov	r0, r4
 800a516:	4629      	mov	r1, r5
 800a518:	f7f5 febe 	bl	8000298 <__aeabi_dsub>
 800a51c:	e7c4      	b.n	800a4a8 <__kernel_sin+0xd0>
 800a51e:	bf00      	nop
 800a520:	55555549 	.word	0x55555549
 800a524:	3fc55555 	.word	0x3fc55555
 800a528:	3fe00000 	.word	0x3fe00000
 800a52c:	5acfd57c 	.word	0x5acfd57c
 800a530:	3de5d93a 	.word	0x3de5d93a
 800a534:	8a2b9ceb 	.word	0x8a2b9ceb
 800a538:	3e5ae5e6 	.word	0x3e5ae5e6
 800a53c:	57b1fe7d 	.word	0x57b1fe7d
 800a540:	3ec71de3 	.word	0x3ec71de3
 800a544:	19c161d5 	.word	0x19c161d5
 800a548:	3f2a01a0 	.word	0x3f2a01a0
 800a54c:	1110f8a6 	.word	0x1110f8a6
 800a550:	3f811111 	.word	0x3f811111
 800a554:	00000000 	.word	0x00000000

0800a558 <__kernel_tan>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ed2d 8b06 	vpush	{d8-d10}
 800a560:	ec5b ab10 	vmov	sl, fp, d0
 800a564:	4be0      	ldr	r3, [pc, #896]	; (800a8e8 <__kernel_tan+0x390>)
 800a566:	b083      	sub	sp, #12
 800a568:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800a56c:	429f      	cmp	r7, r3
 800a56e:	ec59 8b11 	vmov	r8, r9, d1
 800a572:	4606      	mov	r6, r0
 800a574:	f8cd b000 	str.w	fp, [sp]
 800a578:	dc61      	bgt.n	800a63e <__kernel_tan+0xe6>
 800a57a:	ee10 0a10 	vmov	r0, s0
 800a57e:	4659      	mov	r1, fp
 800a580:	f7f6 faf2 	bl	8000b68 <__aeabi_d2iz>
 800a584:	4605      	mov	r5, r0
 800a586:	2800      	cmp	r0, #0
 800a588:	f040 8083 	bne.w	800a692 <__kernel_tan+0x13a>
 800a58c:	1c73      	adds	r3, r6, #1
 800a58e:	4652      	mov	r2, sl
 800a590:	4313      	orrs	r3, r2
 800a592:	433b      	orrs	r3, r7
 800a594:	d112      	bne.n	800a5bc <__kernel_tan+0x64>
 800a596:	ec4b ab10 	vmov	d0, sl, fp
 800a59a:	f7fd fbe1 	bl	8007d60 <fabs>
 800a59e:	49d3      	ldr	r1, [pc, #844]	; (800a8ec <__kernel_tan+0x394>)
 800a5a0:	ec53 2b10 	vmov	r2, r3, d0
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	f7f6 f959 	bl	800085c <__aeabi_ddiv>
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	468b      	mov	fp, r1
 800a5ae:	ec4b ab10 	vmov	d0, sl, fp
 800a5b2:	b003      	add	sp, #12
 800a5b4:	ecbd 8b06 	vpop	{d8-d10}
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	2e01      	cmp	r6, #1
 800a5be:	d0f6      	beq.n	800a5ae <__kernel_tan+0x56>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	4659      	mov	r1, fp
 800a5c8:	f7f5 fe68 	bl	800029c <__adddf3>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	49c6      	ldr	r1, [pc, #792]	; (800a8f0 <__kernel_tan+0x398>)
 800a5d6:	f7f6 f941 	bl	800085c <__aeabi_ddiv>
 800a5da:	e9cd 0100 	strd	r0, r1, [sp]
 800a5de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e2:	462e      	mov	r6, r5
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	462c      	mov	r4, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	f7f5 fe52 	bl	8000298 <__aeabi_dsub>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fe4c 	bl	8000298 <__aeabi_dsub>
 800a600:	4632      	mov	r2, r6
 800a602:	462b      	mov	r3, r5
 800a604:	f7f6 f800 	bl	8000608 <__aeabi_dmul>
 800a608:	4632      	mov	r2, r6
 800a60a:	4680      	mov	r8, r0
 800a60c:	4689      	mov	r9, r1
 800a60e:	462b      	mov	r3, r5
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f5 fff8 	bl	8000608 <__aeabi_dmul>
 800a618:	4bb4      	ldr	r3, [pc, #720]	; (800a8ec <__kernel_tan+0x394>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	f7f5 fe3e 	bl	800029c <__adddf3>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 fe38 	bl	800029c <__adddf3>
 800a62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a630:	f7f5 ffea 	bl	8000608 <__aeabi_dmul>
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	f7f5 fe30 	bl	800029c <__adddf3>
 800a63c:	e7b5      	b.n	800a5aa <__kernel_tan+0x52>
 800a63e:	4bad      	ldr	r3, [pc, #692]	; (800a8f4 <__kernel_tan+0x39c>)
 800a640:	429f      	cmp	r7, r3
 800a642:	dd26      	ble.n	800a692 <__kernel_tan+0x13a>
 800a644:	9b00      	ldr	r3, [sp, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	da09      	bge.n	800a65e <__kernel_tan+0x106>
 800a64a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a64e:	469b      	mov	fp, r3
 800a650:	ee10 aa10 	vmov	sl, s0
 800a654:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a658:	ee11 8a10 	vmov	r8, s2
 800a65c:	4699      	mov	r9, r3
 800a65e:	4652      	mov	r2, sl
 800a660:	465b      	mov	r3, fp
 800a662:	a183      	add	r1, pc, #524	; (adr r1, 800a870 <__kernel_tan+0x318>)
 800a664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a668:	f7f5 fe16 	bl	8000298 <__aeabi_dsub>
 800a66c:	4642      	mov	r2, r8
 800a66e:	464b      	mov	r3, r9
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	a180      	add	r1, pc, #512	; (adr r1, 800a878 <__kernel_tan+0x320>)
 800a676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a67a:	f7f5 fe0d 	bl	8000298 <__aeabi_dsub>
 800a67e:	4622      	mov	r2, r4
 800a680:	462b      	mov	r3, r5
 800a682:	f7f5 fe0b 	bl	800029c <__adddf3>
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	4682      	mov	sl, r0
 800a68c:	468b      	mov	fp, r1
 800a68e:	f04f 0900 	mov.w	r9, #0
 800a692:	4652      	mov	r2, sl
 800a694:	465b      	mov	r3, fp
 800a696:	4650      	mov	r0, sl
 800a698:	4659      	mov	r1, fp
 800a69a:	f7f5 ffb5 	bl	8000608 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	ec43 2b18 	vmov	d8, r2, r3
 800a6a6:	f7f5 ffaf 	bl	8000608 <__aeabi_dmul>
 800a6aa:	ec53 2b18 	vmov	r2, r3, d8
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	4650      	mov	r0, sl
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	f7f5 ffa7 	bl	8000608 <__aeabi_dmul>
 800a6ba:	a371      	add	r3, pc, #452	; (adr r3, 800a880 <__kernel_tan+0x328>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	ec41 0b19 	vmov	d9, r0, r1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 ff9e 	bl	8000608 <__aeabi_dmul>
 800a6cc:	a36e      	add	r3, pc, #440	; (adr r3, 800a888 <__kernel_tan+0x330>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f5 fde3 	bl	800029c <__adddf3>
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	462b      	mov	r3, r5
 800a6da:	f7f5 ff95 	bl	8000608 <__aeabi_dmul>
 800a6de:	a36c      	add	r3, pc, #432	; (adr r3, 800a890 <__kernel_tan+0x338>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f7f5 fdda 	bl	800029c <__adddf3>
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	f7f5 ff8c 	bl	8000608 <__aeabi_dmul>
 800a6f0:	a369      	add	r3, pc, #420	; (adr r3, 800a898 <__kernel_tan+0x340>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 fdd1 	bl	800029c <__adddf3>
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	462b      	mov	r3, r5
 800a6fe:	f7f5 ff83 	bl	8000608 <__aeabi_dmul>
 800a702:	a367      	add	r3, pc, #412	; (adr r3, 800a8a0 <__kernel_tan+0x348>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 fdc8 	bl	800029c <__adddf3>
 800a70c:	4622      	mov	r2, r4
 800a70e:	462b      	mov	r3, r5
 800a710:	f7f5 ff7a 	bl	8000608 <__aeabi_dmul>
 800a714:	a364      	add	r3, pc, #400	; (adr r3, 800a8a8 <__kernel_tan+0x350>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f7f5 fdbf 	bl	800029c <__adddf3>
 800a71e:	ec53 2b18 	vmov	r2, r3, d8
 800a722:	f7f5 ff71 	bl	8000608 <__aeabi_dmul>
 800a726:	a362      	add	r3, pc, #392	; (adr r3, 800a8b0 <__kernel_tan+0x358>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	ec41 0b1a 	vmov	d10, r0, r1
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f5 ff68 	bl	8000608 <__aeabi_dmul>
 800a738:	a35f      	add	r3, pc, #380	; (adr r3, 800a8b8 <__kernel_tan+0x360>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 fdad 	bl	800029c <__adddf3>
 800a742:	4622      	mov	r2, r4
 800a744:	462b      	mov	r3, r5
 800a746:	f7f5 ff5f 	bl	8000608 <__aeabi_dmul>
 800a74a:	a35d      	add	r3, pc, #372	; (adr r3, 800a8c0 <__kernel_tan+0x368>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fda4 	bl	800029c <__adddf3>
 800a754:	4622      	mov	r2, r4
 800a756:	462b      	mov	r3, r5
 800a758:	f7f5 ff56 	bl	8000608 <__aeabi_dmul>
 800a75c:	a35a      	add	r3, pc, #360	; (adr r3, 800a8c8 <__kernel_tan+0x370>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fd9b 	bl	800029c <__adddf3>
 800a766:	4622      	mov	r2, r4
 800a768:	462b      	mov	r3, r5
 800a76a:	f7f5 ff4d 	bl	8000608 <__aeabi_dmul>
 800a76e:	a358      	add	r3, pc, #352	; (adr r3, 800a8d0 <__kernel_tan+0x378>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd92 	bl	800029c <__adddf3>
 800a778:	4622      	mov	r2, r4
 800a77a:	462b      	mov	r3, r5
 800a77c:	f7f5 ff44 	bl	8000608 <__aeabi_dmul>
 800a780:	a355      	add	r3, pc, #340	; (adr r3, 800a8d8 <__kernel_tan+0x380>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd89 	bl	800029c <__adddf3>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	ec51 0b1a 	vmov	r0, r1, d10
 800a792:	f7f5 fd83 	bl	800029c <__adddf3>
 800a796:	ec53 2b19 	vmov	r2, r3, d9
 800a79a:	f7f5 ff35 	bl	8000608 <__aeabi_dmul>
 800a79e:	4642      	mov	r2, r8
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	f7f5 fd7b 	bl	800029c <__adddf3>
 800a7a6:	ec53 2b18 	vmov	r2, r3, d8
 800a7aa:	f7f5 ff2d 	bl	8000608 <__aeabi_dmul>
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	f7f5 fd73 	bl	800029c <__adddf3>
 800a7b6:	a34a      	add	r3, pc, #296	; (adr r3, 800a8e0 <__kernel_tan+0x388>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	ec51 0b19 	vmov	r0, r1, d9
 800a7c4:	f7f5 ff20 	bl	8000608 <__aeabi_dmul>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f7f5 fd66 	bl	800029c <__adddf3>
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	ec41 0b18 	vmov	d8, r0, r1
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	4659      	mov	r1, fp
 800a7da:	4650      	mov	r0, sl
 800a7dc:	f7f5 fd5e 	bl	800029c <__adddf3>
 800a7e0:	4b44      	ldr	r3, [pc, #272]	; (800a8f4 <__kernel_tan+0x39c>)
 800a7e2:	429f      	cmp	r7, r3
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	f340 8086 	ble.w	800a8f8 <__kernel_tan+0x3a0>
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7f5 fea1 	bl	8000534 <__aeabi_i2d>
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	462b      	mov	r3, r5
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f5 ff03 	bl	8000608 <__aeabi_dmul>
 800a802:	4642      	mov	r2, r8
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	464b      	mov	r3, r9
 800a80a:	4620      	mov	r0, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	f7f5 fd45 	bl	800029c <__adddf3>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f81f 	bl	800085c <__aeabi_ddiv>
 800a81e:	ec53 2b18 	vmov	r2, r3, d8
 800a822:	f7f5 fd39 	bl	8000298 <__aeabi_dsub>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4650      	mov	r0, sl
 800a82c:	4659      	mov	r1, fp
 800a82e:	f7f5 fd33 	bl	8000298 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	f7f5 fd31 	bl	800029c <__adddf3>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	9b00      	ldr	r3, [sp, #0]
 800a848:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800a84c:	f00a 0a02 	and.w	sl, sl, #2
 800a850:	4604      	mov	r4, r0
 800a852:	f1ca 0001 	rsb	r0, sl, #1
 800a856:	460d      	mov	r5, r1
 800a858:	f7f5 fe6c 	bl	8000534 <__aeabi_i2d>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4620      	mov	r0, r4
 800a862:	4629      	mov	r1, r5
 800a864:	f7f5 fed0 	bl	8000608 <__aeabi_dmul>
 800a868:	e69f      	b.n	800a5aa <__kernel_tan+0x52>
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w
 800a870:	54442d18 	.word	0x54442d18
 800a874:	3fe921fb 	.word	0x3fe921fb
 800a878:	33145c07 	.word	0x33145c07
 800a87c:	3c81a626 	.word	0x3c81a626
 800a880:	74bf7ad4 	.word	0x74bf7ad4
 800a884:	3efb2a70 	.word	0x3efb2a70
 800a888:	32f0a7e9 	.word	0x32f0a7e9
 800a88c:	3f12b80f 	.word	0x3f12b80f
 800a890:	1a8d1068 	.word	0x1a8d1068
 800a894:	3f3026f7 	.word	0x3f3026f7
 800a898:	fee08315 	.word	0xfee08315
 800a89c:	3f57dbc8 	.word	0x3f57dbc8
 800a8a0:	e96e8493 	.word	0xe96e8493
 800a8a4:	3f8226e3 	.word	0x3f8226e3
 800a8a8:	1bb341fe 	.word	0x1bb341fe
 800a8ac:	3faba1ba 	.word	0x3faba1ba
 800a8b0:	db605373 	.word	0xdb605373
 800a8b4:	bef375cb 	.word	0xbef375cb
 800a8b8:	a03792a6 	.word	0xa03792a6
 800a8bc:	3f147e88 	.word	0x3f147e88
 800a8c0:	f2f26501 	.word	0xf2f26501
 800a8c4:	3f4344d8 	.word	0x3f4344d8
 800a8c8:	c9560328 	.word	0xc9560328
 800a8cc:	3f6d6d22 	.word	0x3f6d6d22
 800a8d0:	8406d637 	.word	0x8406d637
 800a8d4:	3f9664f4 	.word	0x3f9664f4
 800a8d8:	1110fe7a 	.word	0x1110fe7a
 800a8dc:	3fc11111 	.word	0x3fc11111
 800a8e0:	55555563 	.word	0x55555563
 800a8e4:	3fd55555 	.word	0x3fd55555
 800a8e8:	3e2fffff 	.word	0x3e2fffff
 800a8ec:	3ff00000 	.word	0x3ff00000
 800a8f0:	bff00000 	.word	0xbff00000
 800a8f4:	3fe59427 	.word	0x3fe59427
 800a8f8:	2e01      	cmp	r6, #1
 800a8fa:	d02f      	beq.n	800a95c <__kernel_tan+0x404>
 800a8fc:	460f      	mov	r7, r1
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4689      	mov	r9, r1
 800a904:	2000      	movs	r0, #0
 800a906:	4917      	ldr	r1, [pc, #92]	; (800a964 <__kernel_tan+0x40c>)
 800a908:	f7f5 ffa8 	bl	800085c <__aeabi_ddiv>
 800a90c:	2600      	movs	r6, #0
 800a90e:	e9cd 0100 	strd	r0, r1, [sp]
 800a912:	4652      	mov	r2, sl
 800a914:	465b      	mov	r3, fp
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f5 fcbd 	bl	8000298 <__aeabi_dsub>
 800a91e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	ec51 0b18 	vmov	r0, r1, d8
 800a92a:	f7f5 fcb5 	bl	8000298 <__aeabi_dsub>
 800a92e:	4632      	mov	r2, r6
 800a930:	462b      	mov	r3, r5
 800a932:	f7f5 fe69 	bl	8000608 <__aeabi_dmul>
 800a936:	46b0      	mov	r8, r6
 800a938:	460f      	mov	r7, r1
 800a93a:	4642      	mov	r2, r8
 800a93c:	462b      	mov	r3, r5
 800a93e:	4634      	mov	r4, r6
 800a940:	4649      	mov	r1, r9
 800a942:	4606      	mov	r6, r0
 800a944:	4640      	mov	r0, r8
 800a946:	f7f5 fe5f 	bl	8000608 <__aeabi_dmul>
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <__kernel_tan+0x410>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	f7f5 fca5 	bl	800029c <__adddf3>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	e665      	b.n	800a628 <__kernel_tan+0xd0>
 800a95c:	4682      	mov	sl, r0
 800a95e:	468b      	mov	fp, r1
 800a960:	e625      	b.n	800a5ae <__kernel_tan+0x56>
 800a962:	bf00      	nop
 800a964:	bff00000 	.word	0xbff00000
 800a968:	3ff00000 	.word	0x3ff00000

0800a96c <with_errno>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	4616      	mov	r6, r2
 800a974:	f000 f8ca 	bl	800ab0c <__errno>
 800a978:	4629      	mov	r1, r5
 800a97a:	6006      	str	r6, [r0, #0]
 800a97c:	4620      	mov	r0, r4
 800a97e:	bd70      	pop	{r4, r5, r6, pc}

0800a980 <xflow>:
 800a980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a982:	4614      	mov	r4, r2
 800a984:	461d      	mov	r5, r3
 800a986:	b108      	cbz	r0, 800a98c <xflow+0xc>
 800a988:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a98c:	e9cd 2300 	strd	r2, r3, [sp]
 800a990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fe36 	bl	8000608 <__aeabi_dmul>
 800a99c:	2222      	movs	r2, #34	; 0x22
 800a99e:	b003      	add	sp, #12
 800a9a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a4:	f7ff bfe2 	b.w	800a96c <with_errno>

0800a9a8 <__math_uflow>:
 800a9a8:	b508      	push	{r3, lr}
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9b0:	f7ff ffe6 	bl	800a980 <xflow>
 800a9b4:	ec41 0b10 	vmov	d0, r0, r1
 800a9b8:	bd08      	pop	{r3, pc}

0800a9ba <__math_oflow>:
 800a9ba:	b508      	push	{r3, lr}
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a9c2:	f7ff ffdd 	bl	800a980 <xflow>
 800a9c6:	ec41 0b10 	vmov	d0, r0, r1
 800a9ca:	bd08      	pop	{r3, pc}

0800a9cc <finite>:
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	ed8d 0b00 	vstr	d0, [sp]
 800a9d2:	9801      	ldr	r0, [sp, #4]
 800a9d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a9d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9dc:	0fc0      	lsrs	r0, r0, #31
 800a9de:	b002      	add	sp, #8
 800a9e0:	4770      	bx	lr
 800a9e2:	0000      	movs	r0, r0
 800a9e4:	0000      	movs	r0, r0
	...

0800a9e8 <nan>:
 800a9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9f0 <nan+0x8>
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	00000000 	.word	0x00000000
 800a9f4:	7ff80000 	.word	0x7ff80000

0800a9f8 <scalbn>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	ec55 4b10 	vmov	r4, r5, d0
 800a9fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aa02:	4606      	mov	r6, r0
 800aa04:	462b      	mov	r3, r5
 800aa06:	b99a      	cbnz	r2, 800aa30 <scalbn+0x38>
 800aa08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa0c:	4323      	orrs	r3, r4
 800aa0e:	d036      	beq.n	800aa7e <scalbn+0x86>
 800aa10:	4b39      	ldr	r3, [pc, #228]	; (800aaf8 <scalbn+0x100>)
 800aa12:	4629      	mov	r1, r5
 800aa14:	ee10 0a10 	vmov	r0, s0
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fdf5 	bl	8000608 <__aeabi_dmul>
 800aa1e:	4b37      	ldr	r3, [pc, #220]	; (800aafc <scalbn+0x104>)
 800aa20:	429e      	cmp	r6, r3
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	da10      	bge.n	800aa4a <scalbn+0x52>
 800aa28:	a32b      	add	r3, pc, #172	; (adr r3, 800aad8 <scalbn+0xe0>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	e03a      	b.n	800aaa6 <scalbn+0xae>
 800aa30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800aa34:	428a      	cmp	r2, r1
 800aa36:	d10c      	bne.n	800aa52 <scalbn+0x5a>
 800aa38:	ee10 2a10 	vmov	r2, s0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fc2c 	bl	800029c <__adddf3>
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	e019      	b.n	800aa7e <scalbn+0x86>
 800aa4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa4e:	460b      	mov	r3, r1
 800aa50:	3a36      	subs	r2, #54	; 0x36
 800aa52:	4432      	add	r2, r6
 800aa54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa58:	428a      	cmp	r2, r1
 800aa5a:	dd08      	ble.n	800aa6e <scalbn+0x76>
 800aa5c:	2d00      	cmp	r5, #0
 800aa5e:	a120      	add	r1, pc, #128	; (adr r1, 800aae0 <scalbn+0xe8>)
 800aa60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa64:	da1c      	bge.n	800aaa0 <scalbn+0xa8>
 800aa66:	a120      	add	r1, pc, #128	; (adr r1, 800aae8 <scalbn+0xf0>)
 800aa68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6c:	e018      	b.n	800aaa0 <scalbn+0xa8>
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	dd08      	ble.n	800aa84 <scalbn+0x8c>
 800aa72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa7e:	ec45 4b10 	vmov	d0, r4, r5
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa88:	da19      	bge.n	800aabe <scalbn+0xc6>
 800aa8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa8e:	429e      	cmp	r6, r3
 800aa90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800aa94:	dd0a      	ble.n	800aaac <scalbn+0xb4>
 800aa96:	a112      	add	r1, pc, #72	; (adr r1, 800aae0 <scalbn+0xe8>)
 800aa98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1e2      	bne.n	800aa66 <scalbn+0x6e>
 800aaa0:	a30f      	add	r3, pc, #60	; (adr r3, 800aae0 <scalbn+0xe8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fdaf 	bl	8000608 <__aeabi_dmul>
 800aaaa:	e7cb      	b.n	800aa44 <scalbn+0x4c>
 800aaac:	a10a      	add	r1, pc, #40	; (adr r1, 800aad8 <scalbn+0xe0>)
 800aaae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0b8      	beq.n	800aa28 <scalbn+0x30>
 800aab6:	a10e      	add	r1, pc, #56	; (adr r1, 800aaf0 <scalbn+0xf8>)
 800aab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aabc:	e7b4      	b.n	800aa28 <scalbn+0x30>
 800aabe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aac2:	3236      	adds	r2, #54	; 0x36
 800aac4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aac8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aacc:	4620      	mov	r0, r4
 800aace:	4b0c      	ldr	r3, [pc, #48]	; (800ab00 <scalbn+0x108>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	e7e8      	b.n	800aaa6 <scalbn+0xae>
 800aad4:	f3af 8000 	nop.w
 800aad8:	c2f8f359 	.word	0xc2f8f359
 800aadc:	01a56e1f 	.word	0x01a56e1f
 800aae0:	8800759c 	.word	0x8800759c
 800aae4:	7e37e43c 	.word	0x7e37e43c
 800aae8:	8800759c 	.word	0x8800759c
 800aaec:	fe37e43c 	.word	0xfe37e43c
 800aaf0:	c2f8f359 	.word	0xc2f8f359
 800aaf4:	81a56e1f 	.word	0x81a56e1f
 800aaf8:	43500000 	.word	0x43500000
 800aafc:	ffff3cb0 	.word	0xffff3cb0
 800ab00:	3c900000 	.word	0x3c900000

0800ab04 <atoi>:
 800ab04:	220a      	movs	r2, #10
 800ab06:	2100      	movs	r1, #0
 800ab08:	f000 be24 	b.w	800b754 <strtol>

0800ab0c <__errno>:
 800ab0c:	4b01      	ldr	r3, [pc, #4]	; (800ab14 <__errno+0x8>)
 800ab0e:	6818      	ldr	r0, [r3, #0]
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000010 	.word	0x20000010

0800ab18 <__libc_init_array>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4d0d      	ldr	r5, [pc, #52]	; (800ab50 <__libc_init_array+0x38>)
 800ab1c:	4c0d      	ldr	r4, [pc, #52]	; (800ab54 <__libc_init_array+0x3c>)
 800ab1e:	1b64      	subs	r4, r4, r5
 800ab20:	10a4      	asrs	r4, r4, #2
 800ab22:	2600      	movs	r6, #0
 800ab24:	42a6      	cmp	r6, r4
 800ab26:	d109      	bne.n	800ab3c <__libc_init_array+0x24>
 800ab28:	4d0b      	ldr	r5, [pc, #44]	; (800ab58 <__libc_init_array+0x40>)
 800ab2a:	4c0c      	ldr	r4, [pc, #48]	; (800ab5c <__libc_init_array+0x44>)
 800ab2c:	f002 fdc4 	bl	800d6b8 <_init>
 800ab30:	1b64      	subs	r4, r4, r5
 800ab32:	10a4      	asrs	r4, r4, #2
 800ab34:	2600      	movs	r6, #0
 800ab36:	42a6      	cmp	r6, r4
 800ab38:	d105      	bne.n	800ab46 <__libc_init_array+0x2e>
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab40:	4798      	blx	r3
 800ab42:	3601      	adds	r6, #1
 800ab44:	e7ee      	b.n	800ab24 <__libc_init_array+0xc>
 800ab46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab4a:	4798      	blx	r3
 800ab4c:	3601      	adds	r6, #1
 800ab4e:	e7f2      	b.n	800ab36 <__libc_init_array+0x1e>
 800ab50:	0800f6ac 	.word	0x0800f6ac
 800ab54:	0800f6ac 	.word	0x0800f6ac
 800ab58:	0800f6ac 	.word	0x0800f6ac
 800ab5c:	0800f6b0 	.word	0x0800f6b0

0800ab60 <malloc>:
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <malloc+0xc>)
 800ab62:	4601      	mov	r1, r0
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	f000 b885 	b.w	800ac74 <_malloc_r>
 800ab6a:	bf00      	nop
 800ab6c:	20000010 	.word	0x20000010

0800ab70 <memcpy>:
 800ab70:	440a      	add	r2, r1
 800ab72:	4291      	cmp	r1, r2
 800ab74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab78:	d100      	bne.n	800ab7c <memcpy+0xc>
 800ab7a:	4770      	bx	lr
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab86:	4291      	cmp	r1, r2
 800ab88:	d1f9      	bne.n	800ab7e <memcpy+0xe>
 800ab8a:	bd10      	pop	{r4, pc}

0800ab8c <memset>:
 800ab8c:	4402      	add	r2, r0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d100      	bne.n	800ab96 <memset+0xa>
 800ab94:	4770      	bx	lr
 800ab96:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9a:	e7f9      	b.n	800ab90 <memset+0x4>

0800ab9c <_free_r>:
 800ab9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab9e:	2900      	cmp	r1, #0
 800aba0:	d044      	beq.n	800ac2c <_free_r+0x90>
 800aba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba6:	9001      	str	r0, [sp, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f1a1 0404 	sub.w	r4, r1, #4
 800abae:	bfb8      	it	lt
 800abb0:	18e4      	addlt	r4, r4, r3
 800abb2:	f001 fc9b 	bl	800c4ec <__malloc_lock>
 800abb6:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <_free_r+0x94>)
 800abb8:	9801      	ldr	r0, [sp, #4]
 800abba:	6813      	ldr	r3, [r2, #0]
 800abbc:	b933      	cbnz	r3, 800abcc <_free_r+0x30>
 800abbe:	6063      	str	r3, [r4, #4]
 800abc0:	6014      	str	r4, [r2, #0]
 800abc2:	b003      	add	sp, #12
 800abc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc8:	f001 bc96 	b.w	800c4f8 <__malloc_unlock>
 800abcc:	42a3      	cmp	r3, r4
 800abce:	d908      	bls.n	800abe2 <_free_r+0x46>
 800abd0:	6825      	ldr	r5, [r4, #0]
 800abd2:	1961      	adds	r1, r4, r5
 800abd4:	428b      	cmp	r3, r1
 800abd6:	bf01      	itttt	eq
 800abd8:	6819      	ldreq	r1, [r3, #0]
 800abda:	685b      	ldreq	r3, [r3, #4]
 800abdc:	1949      	addeq	r1, r1, r5
 800abde:	6021      	streq	r1, [r4, #0]
 800abe0:	e7ed      	b.n	800abbe <_free_r+0x22>
 800abe2:	461a      	mov	r2, r3
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	b10b      	cbz	r3, 800abec <_free_r+0x50>
 800abe8:	42a3      	cmp	r3, r4
 800abea:	d9fa      	bls.n	800abe2 <_free_r+0x46>
 800abec:	6811      	ldr	r1, [r2, #0]
 800abee:	1855      	adds	r5, r2, r1
 800abf0:	42a5      	cmp	r5, r4
 800abf2:	d10b      	bne.n	800ac0c <_free_r+0x70>
 800abf4:	6824      	ldr	r4, [r4, #0]
 800abf6:	4421      	add	r1, r4
 800abf8:	1854      	adds	r4, r2, r1
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	6011      	str	r1, [r2, #0]
 800abfe:	d1e0      	bne.n	800abc2 <_free_r+0x26>
 800ac00:	681c      	ldr	r4, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	6053      	str	r3, [r2, #4]
 800ac06:	4421      	add	r1, r4
 800ac08:	6011      	str	r1, [r2, #0]
 800ac0a:	e7da      	b.n	800abc2 <_free_r+0x26>
 800ac0c:	d902      	bls.n	800ac14 <_free_r+0x78>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	6003      	str	r3, [r0, #0]
 800ac12:	e7d6      	b.n	800abc2 <_free_r+0x26>
 800ac14:	6825      	ldr	r5, [r4, #0]
 800ac16:	1961      	adds	r1, r4, r5
 800ac18:	428b      	cmp	r3, r1
 800ac1a:	bf04      	itt	eq
 800ac1c:	6819      	ldreq	r1, [r3, #0]
 800ac1e:	685b      	ldreq	r3, [r3, #4]
 800ac20:	6063      	str	r3, [r4, #4]
 800ac22:	bf04      	itt	eq
 800ac24:	1949      	addeq	r1, r1, r5
 800ac26:	6021      	streq	r1, [r4, #0]
 800ac28:	6054      	str	r4, [r2, #4]
 800ac2a:	e7ca      	b.n	800abc2 <_free_r+0x26>
 800ac2c:	b003      	add	sp, #12
 800ac2e:	bd30      	pop	{r4, r5, pc}
 800ac30:	20000948 	.word	0x20000948

0800ac34 <sbrk_aligned>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	4e0e      	ldr	r6, [pc, #56]	; (800ac70 <sbrk_aligned+0x3c>)
 800ac38:	460c      	mov	r4, r1
 800ac3a:	6831      	ldr	r1, [r6, #0]
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	b911      	cbnz	r1, 800ac46 <sbrk_aligned+0x12>
 800ac40:	f000 fcf6 	bl	800b630 <_sbrk_r>
 800ac44:	6030      	str	r0, [r6, #0]
 800ac46:	4621      	mov	r1, r4
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f000 fcf1 	bl	800b630 <_sbrk_r>
 800ac4e:	1c43      	adds	r3, r0, #1
 800ac50:	d00a      	beq.n	800ac68 <sbrk_aligned+0x34>
 800ac52:	1cc4      	adds	r4, r0, #3
 800ac54:	f024 0403 	bic.w	r4, r4, #3
 800ac58:	42a0      	cmp	r0, r4
 800ac5a:	d007      	beq.n	800ac6c <sbrk_aligned+0x38>
 800ac5c:	1a21      	subs	r1, r4, r0
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 fce6 	bl	800b630 <_sbrk_r>
 800ac64:	3001      	adds	r0, #1
 800ac66:	d101      	bne.n	800ac6c <sbrk_aligned+0x38>
 800ac68:	f04f 34ff 	mov.w	r4, #4294967295
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	2000094c 	.word	0x2000094c

0800ac74 <_malloc_r>:
 800ac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac78:	1ccd      	adds	r5, r1, #3
 800ac7a:	f025 0503 	bic.w	r5, r5, #3
 800ac7e:	3508      	adds	r5, #8
 800ac80:	2d0c      	cmp	r5, #12
 800ac82:	bf38      	it	cc
 800ac84:	250c      	movcc	r5, #12
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	4607      	mov	r7, r0
 800ac8a:	db01      	blt.n	800ac90 <_malloc_r+0x1c>
 800ac8c:	42a9      	cmp	r1, r5
 800ac8e:	d905      	bls.n	800ac9c <_malloc_r+0x28>
 800ac90:	230c      	movs	r3, #12
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	2600      	movs	r6, #0
 800ac96:	4630      	mov	r0, r6
 800ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac9c:	4e2e      	ldr	r6, [pc, #184]	; (800ad58 <_malloc_r+0xe4>)
 800ac9e:	f001 fc25 	bl	800c4ec <__malloc_lock>
 800aca2:	6833      	ldr	r3, [r6, #0]
 800aca4:	461c      	mov	r4, r3
 800aca6:	bb34      	cbnz	r4, 800acf6 <_malloc_r+0x82>
 800aca8:	4629      	mov	r1, r5
 800acaa:	4638      	mov	r0, r7
 800acac:	f7ff ffc2 	bl	800ac34 <sbrk_aligned>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	4604      	mov	r4, r0
 800acb4:	d14d      	bne.n	800ad52 <_malloc_r+0xde>
 800acb6:	6834      	ldr	r4, [r6, #0]
 800acb8:	4626      	mov	r6, r4
 800acba:	2e00      	cmp	r6, #0
 800acbc:	d140      	bne.n	800ad40 <_malloc_r+0xcc>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	4631      	mov	r1, r6
 800acc2:	4638      	mov	r0, r7
 800acc4:	eb04 0803 	add.w	r8, r4, r3
 800acc8:	f000 fcb2 	bl	800b630 <_sbrk_r>
 800accc:	4580      	cmp	r8, r0
 800acce:	d13a      	bne.n	800ad46 <_malloc_r+0xd2>
 800acd0:	6821      	ldr	r1, [r4, #0]
 800acd2:	3503      	adds	r5, #3
 800acd4:	1a6d      	subs	r5, r5, r1
 800acd6:	f025 0503 	bic.w	r5, r5, #3
 800acda:	3508      	adds	r5, #8
 800acdc:	2d0c      	cmp	r5, #12
 800acde:	bf38      	it	cc
 800ace0:	250c      	movcc	r5, #12
 800ace2:	4629      	mov	r1, r5
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff ffa5 	bl	800ac34 <sbrk_aligned>
 800acea:	3001      	adds	r0, #1
 800acec:	d02b      	beq.n	800ad46 <_malloc_r+0xd2>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	442b      	add	r3, r5
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	e00e      	b.n	800ad14 <_malloc_r+0xa0>
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	1b52      	subs	r2, r2, r5
 800acfa:	d41e      	bmi.n	800ad3a <_malloc_r+0xc6>
 800acfc:	2a0b      	cmp	r2, #11
 800acfe:	d916      	bls.n	800ad2e <_malloc_r+0xba>
 800ad00:	1961      	adds	r1, r4, r5
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	6025      	str	r5, [r4, #0]
 800ad06:	bf18      	it	ne
 800ad08:	6059      	strne	r1, [r3, #4]
 800ad0a:	6863      	ldr	r3, [r4, #4]
 800ad0c:	bf08      	it	eq
 800ad0e:	6031      	streq	r1, [r6, #0]
 800ad10:	5162      	str	r2, [r4, r5]
 800ad12:	604b      	str	r3, [r1, #4]
 800ad14:	4638      	mov	r0, r7
 800ad16:	f104 060b 	add.w	r6, r4, #11
 800ad1a:	f001 fbed 	bl	800c4f8 <__malloc_unlock>
 800ad1e:	f026 0607 	bic.w	r6, r6, #7
 800ad22:	1d23      	adds	r3, r4, #4
 800ad24:	1af2      	subs	r2, r6, r3
 800ad26:	d0b6      	beq.n	800ac96 <_malloc_r+0x22>
 800ad28:	1b9b      	subs	r3, r3, r6
 800ad2a:	50a3      	str	r3, [r4, r2]
 800ad2c:	e7b3      	b.n	800ac96 <_malloc_r+0x22>
 800ad2e:	6862      	ldr	r2, [r4, #4]
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	bf0c      	ite	eq
 800ad34:	6032      	streq	r2, [r6, #0]
 800ad36:	605a      	strne	r2, [r3, #4]
 800ad38:	e7ec      	b.n	800ad14 <_malloc_r+0xa0>
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	6864      	ldr	r4, [r4, #4]
 800ad3e:	e7b2      	b.n	800aca6 <_malloc_r+0x32>
 800ad40:	4634      	mov	r4, r6
 800ad42:	6876      	ldr	r6, [r6, #4]
 800ad44:	e7b9      	b.n	800acba <_malloc_r+0x46>
 800ad46:	230c      	movs	r3, #12
 800ad48:	603b      	str	r3, [r7, #0]
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f001 fbd4 	bl	800c4f8 <__malloc_unlock>
 800ad50:	e7a1      	b.n	800ac96 <_malloc_r+0x22>
 800ad52:	6025      	str	r5, [r4, #0]
 800ad54:	e7de      	b.n	800ad14 <_malloc_r+0xa0>
 800ad56:	bf00      	nop
 800ad58:	20000948 	.word	0x20000948

0800ad5c <__cvt>:
 800ad5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad60:	ec55 4b10 	vmov	r4, r5, d0
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	460e      	mov	r6, r1
 800ad68:	4619      	mov	r1, r3
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	bfbb      	ittet	lt
 800ad6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad72:	461d      	movlt	r5, r3
 800ad74:	2300      	movge	r3, #0
 800ad76:	232d      	movlt	r3, #45	; 0x2d
 800ad78:	700b      	strb	r3, [r1, #0]
 800ad7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad80:	4691      	mov	r9, r2
 800ad82:	f023 0820 	bic.w	r8, r3, #32
 800ad86:	bfbc      	itt	lt
 800ad88:	4622      	movlt	r2, r4
 800ad8a:	4614      	movlt	r4, r2
 800ad8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad90:	d005      	beq.n	800ad9e <__cvt+0x42>
 800ad92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad96:	d100      	bne.n	800ad9a <__cvt+0x3e>
 800ad98:	3601      	adds	r6, #1
 800ad9a:	2102      	movs	r1, #2
 800ad9c:	e000      	b.n	800ada0 <__cvt+0x44>
 800ad9e:	2103      	movs	r1, #3
 800ada0:	ab03      	add	r3, sp, #12
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	ab02      	add	r3, sp, #8
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	ec45 4b10 	vmov	d0, r4, r5
 800adac:	4653      	mov	r3, sl
 800adae:	4632      	mov	r2, r6
 800adb0:	f000 fd86 	bl	800b8c0 <_dtoa_r>
 800adb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800adb8:	4607      	mov	r7, r0
 800adba:	d102      	bne.n	800adc2 <__cvt+0x66>
 800adbc:	f019 0f01 	tst.w	r9, #1
 800adc0:	d022      	beq.n	800ae08 <__cvt+0xac>
 800adc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adc6:	eb07 0906 	add.w	r9, r7, r6
 800adca:	d110      	bne.n	800adee <__cvt+0x92>
 800adcc:	783b      	ldrb	r3, [r7, #0]
 800adce:	2b30      	cmp	r3, #48	; 0x30
 800add0:	d10a      	bne.n	800ade8 <__cvt+0x8c>
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800adde:	b918      	cbnz	r0, 800ade8 <__cvt+0x8c>
 800ade0:	f1c6 0601 	rsb	r6, r6, #1
 800ade4:	f8ca 6000 	str.w	r6, [sl]
 800ade8:	f8da 3000 	ldr.w	r3, [sl]
 800adec:	4499      	add	r9, r3
 800adee:	2200      	movs	r2, #0
 800adf0:	2300      	movs	r3, #0
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7f5 fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800adfa:	b108      	cbz	r0, 800ae00 <__cvt+0xa4>
 800adfc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae00:	2230      	movs	r2, #48	; 0x30
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	454b      	cmp	r3, r9
 800ae06:	d307      	bcc.n	800ae18 <__cvt+0xbc>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae0c:	1bdb      	subs	r3, r3, r7
 800ae0e:	4638      	mov	r0, r7
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	b004      	add	sp, #16
 800ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae18:	1c59      	adds	r1, r3, #1
 800ae1a:	9103      	str	r1, [sp, #12]
 800ae1c:	701a      	strb	r2, [r3, #0]
 800ae1e:	e7f0      	b.n	800ae02 <__cvt+0xa6>

0800ae20 <__exponent>:
 800ae20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae22:	4603      	mov	r3, r0
 800ae24:	2900      	cmp	r1, #0
 800ae26:	bfb8      	it	lt
 800ae28:	4249      	neglt	r1, r1
 800ae2a:	f803 2b02 	strb.w	r2, [r3], #2
 800ae2e:	bfb4      	ite	lt
 800ae30:	222d      	movlt	r2, #45	; 0x2d
 800ae32:	222b      	movge	r2, #43	; 0x2b
 800ae34:	2909      	cmp	r1, #9
 800ae36:	7042      	strb	r2, [r0, #1]
 800ae38:	dd2a      	ble.n	800ae90 <__exponent+0x70>
 800ae3a:	f10d 0407 	add.w	r4, sp, #7
 800ae3e:	46a4      	mov	ip, r4
 800ae40:	270a      	movs	r7, #10
 800ae42:	46a6      	mov	lr, r4
 800ae44:	460a      	mov	r2, r1
 800ae46:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae4a:	fb07 1516 	mls	r5, r7, r6, r1
 800ae4e:	3530      	adds	r5, #48	; 0x30
 800ae50:	2a63      	cmp	r2, #99	; 0x63
 800ae52:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	dcf1      	bgt.n	800ae42 <__exponent+0x22>
 800ae5e:	3130      	adds	r1, #48	; 0x30
 800ae60:	f1ae 0502 	sub.w	r5, lr, #2
 800ae64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae68:	1c44      	adds	r4, r0, #1
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4561      	cmp	r1, ip
 800ae6e:	d30a      	bcc.n	800ae86 <__exponent+0x66>
 800ae70:	f10d 0209 	add.w	r2, sp, #9
 800ae74:	eba2 020e 	sub.w	r2, r2, lr
 800ae78:	4565      	cmp	r5, ip
 800ae7a:	bf88      	it	hi
 800ae7c:	2200      	movhi	r2, #0
 800ae7e:	4413      	add	r3, r2
 800ae80:	1a18      	subs	r0, r3, r0
 800ae82:	b003      	add	sp, #12
 800ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae8e:	e7ed      	b.n	800ae6c <__exponent+0x4c>
 800ae90:	2330      	movs	r3, #48	; 0x30
 800ae92:	3130      	adds	r1, #48	; 0x30
 800ae94:	7083      	strb	r3, [r0, #2]
 800ae96:	70c1      	strb	r1, [r0, #3]
 800ae98:	1d03      	adds	r3, r0, #4
 800ae9a:	e7f1      	b.n	800ae80 <__exponent+0x60>

0800ae9c <_printf_float>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	ed2d 8b02 	vpush	{d8}
 800aea4:	b08d      	sub	sp, #52	; 0x34
 800aea6:	460c      	mov	r4, r1
 800aea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aeac:	4616      	mov	r6, r2
 800aeae:	461f      	mov	r7, r3
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	f001 fb05 	bl	800c4c0 <_localeconv_r>
 800aeb6:	f8d0 a000 	ldr.w	sl, [r0]
 800aeba:	4650      	mov	r0, sl
 800aebc:	f7f5 f990 	bl	80001e0 <strlen>
 800aec0:	2300      	movs	r3, #0
 800aec2:	930a      	str	r3, [sp, #40]	; 0x28
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	9305      	str	r3, [sp, #20]
 800aec8:	f8d8 3000 	ldr.w	r3, [r8]
 800aecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aed0:	3307      	adds	r3, #7
 800aed2:	f023 0307 	bic.w	r3, r3, #7
 800aed6:	f103 0208 	add.w	r2, r3, #8
 800aeda:	f8c8 2000 	str.w	r2, [r8]
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aeea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aeee:	9307      	str	r3, [sp, #28]
 800aef0:	f8cd 8018 	str.w	r8, [sp, #24]
 800aef4:	ee08 0a10 	vmov	s16, r0
 800aef8:	4b9f      	ldr	r3, [pc, #636]	; (800b178 <_printf_float+0x2dc>)
 800aefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aefe:	f04f 32ff 	mov.w	r2, #4294967295
 800af02:	f7f5 fe1b 	bl	8000b3c <__aeabi_dcmpun>
 800af06:	bb88      	cbnz	r0, 800af6c <_printf_float+0xd0>
 800af08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af0c:	4b9a      	ldr	r3, [pc, #616]	; (800b178 <_printf_float+0x2dc>)
 800af0e:	f04f 32ff 	mov.w	r2, #4294967295
 800af12:	f7f5 fdf5 	bl	8000b00 <__aeabi_dcmple>
 800af16:	bb48      	cbnz	r0, 800af6c <_printf_float+0xd0>
 800af18:	2200      	movs	r2, #0
 800af1a:	2300      	movs	r3, #0
 800af1c:	4640      	mov	r0, r8
 800af1e:	4649      	mov	r1, r9
 800af20:	f7f5 fde4 	bl	8000aec <__aeabi_dcmplt>
 800af24:	b110      	cbz	r0, 800af2c <_printf_float+0x90>
 800af26:	232d      	movs	r3, #45	; 0x2d
 800af28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2c:	4b93      	ldr	r3, [pc, #588]	; (800b17c <_printf_float+0x2e0>)
 800af2e:	4894      	ldr	r0, [pc, #592]	; (800b180 <_printf_float+0x2e4>)
 800af30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af34:	bf94      	ite	ls
 800af36:	4698      	movls	r8, r3
 800af38:	4680      	movhi	r8, r0
 800af3a:	2303      	movs	r3, #3
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	f023 0204 	bic.w	r2, r3, #4
 800af44:	6022      	str	r2, [r4, #0]
 800af46:	f04f 0900 	mov.w	r9, #0
 800af4a:	9700      	str	r7, [sp, #0]
 800af4c:	4633      	mov	r3, r6
 800af4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800af50:	4621      	mov	r1, r4
 800af52:	4628      	mov	r0, r5
 800af54:	f000 f9d8 	bl	800b308 <_printf_common>
 800af58:	3001      	adds	r0, #1
 800af5a:	f040 8090 	bne.w	800b07e <_printf_float+0x1e2>
 800af5e:	f04f 30ff 	mov.w	r0, #4294967295
 800af62:	b00d      	add	sp, #52	; 0x34
 800af64:	ecbd 8b02 	vpop	{d8}
 800af68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6c:	4642      	mov	r2, r8
 800af6e:	464b      	mov	r3, r9
 800af70:	4640      	mov	r0, r8
 800af72:	4649      	mov	r1, r9
 800af74:	f7f5 fde2 	bl	8000b3c <__aeabi_dcmpun>
 800af78:	b140      	cbz	r0, 800af8c <_printf_float+0xf0>
 800af7a:	464b      	mov	r3, r9
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bfbc      	itt	lt
 800af80:	232d      	movlt	r3, #45	; 0x2d
 800af82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af86:	487f      	ldr	r0, [pc, #508]	; (800b184 <_printf_float+0x2e8>)
 800af88:	4b7f      	ldr	r3, [pc, #508]	; (800b188 <_printf_float+0x2ec>)
 800af8a:	e7d1      	b.n	800af30 <_printf_float+0x94>
 800af8c:	6863      	ldr	r3, [r4, #4]
 800af8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af92:	9206      	str	r2, [sp, #24]
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	d13f      	bne.n	800b018 <_printf_float+0x17c>
 800af98:	2306      	movs	r3, #6
 800af9a:	6063      	str	r3, [r4, #4]
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	6861      	ldr	r1, [r4, #4]
 800afa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afa4:	2300      	movs	r3, #0
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	ab0a      	add	r3, sp, #40	; 0x28
 800afaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afae:	ab09      	add	r3, sp, #36	; 0x24
 800afb0:	ec49 8b10 	vmov	d0, r8, r9
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	6022      	str	r2, [r4, #0]
 800afb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afbc:	4628      	mov	r0, r5
 800afbe:	f7ff fecd 	bl	800ad5c <__cvt>
 800afc2:	9b06      	ldr	r3, [sp, #24]
 800afc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afc6:	2b47      	cmp	r3, #71	; 0x47
 800afc8:	4680      	mov	r8, r0
 800afca:	d108      	bne.n	800afde <_printf_float+0x142>
 800afcc:	1cc8      	adds	r0, r1, #3
 800afce:	db02      	blt.n	800afd6 <_printf_float+0x13a>
 800afd0:	6863      	ldr	r3, [r4, #4]
 800afd2:	4299      	cmp	r1, r3
 800afd4:	dd41      	ble.n	800b05a <_printf_float+0x1be>
 800afd6:	f1ab 0b02 	sub.w	fp, fp, #2
 800afda:	fa5f fb8b 	uxtb.w	fp, fp
 800afde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afe2:	d820      	bhi.n	800b026 <_printf_float+0x18a>
 800afe4:	3901      	subs	r1, #1
 800afe6:	465a      	mov	r2, fp
 800afe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800afec:	9109      	str	r1, [sp, #36]	; 0x24
 800afee:	f7ff ff17 	bl	800ae20 <__exponent>
 800aff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff4:	1813      	adds	r3, r2, r0
 800aff6:	2a01      	cmp	r2, #1
 800aff8:	4681      	mov	r9, r0
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	dc02      	bgt.n	800b004 <_printf_float+0x168>
 800affe:	6822      	ldr	r2, [r4, #0]
 800b000:	07d2      	lsls	r2, r2, #31
 800b002:	d501      	bpl.n	800b008 <_printf_float+0x16c>
 800b004:	3301      	adds	r3, #1
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d09c      	beq.n	800af4a <_printf_float+0xae>
 800b010:	232d      	movs	r3, #45	; 0x2d
 800b012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b016:	e798      	b.n	800af4a <_printf_float+0xae>
 800b018:	9a06      	ldr	r2, [sp, #24]
 800b01a:	2a47      	cmp	r2, #71	; 0x47
 800b01c:	d1be      	bne.n	800af9c <_printf_float+0x100>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1bc      	bne.n	800af9c <_printf_float+0x100>
 800b022:	2301      	movs	r3, #1
 800b024:	e7b9      	b.n	800af9a <_printf_float+0xfe>
 800b026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b02a:	d118      	bne.n	800b05e <_printf_float+0x1c2>
 800b02c:	2900      	cmp	r1, #0
 800b02e:	6863      	ldr	r3, [r4, #4]
 800b030:	dd0b      	ble.n	800b04a <_printf_float+0x1ae>
 800b032:	6121      	str	r1, [r4, #16]
 800b034:	b913      	cbnz	r3, 800b03c <_printf_float+0x1a0>
 800b036:	6822      	ldr	r2, [r4, #0]
 800b038:	07d0      	lsls	r0, r2, #31
 800b03a:	d502      	bpl.n	800b042 <_printf_float+0x1a6>
 800b03c:	3301      	adds	r3, #1
 800b03e:	440b      	add	r3, r1
 800b040:	6123      	str	r3, [r4, #16]
 800b042:	65a1      	str	r1, [r4, #88]	; 0x58
 800b044:	f04f 0900 	mov.w	r9, #0
 800b048:	e7de      	b.n	800b008 <_printf_float+0x16c>
 800b04a:	b913      	cbnz	r3, 800b052 <_printf_float+0x1b6>
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	07d2      	lsls	r2, r2, #31
 800b050:	d501      	bpl.n	800b056 <_printf_float+0x1ba>
 800b052:	3302      	adds	r3, #2
 800b054:	e7f4      	b.n	800b040 <_printf_float+0x1a4>
 800b056:	2301      	movs	r3, #1
 800b058:	e7f2      	b.n	800b040 <_printf_float+0x1a4>
 800b05a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b060:	4299      	cmp	r1, r3
 800b062:	db05      	blt.n	800b070 <_printf_float+0x1d4>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	6121      	str	r1, [r4, #16]
 800b068:	07d8      	lsls	r0, r3, #31
 800b06a:	d5ea      	bpl.n	800b042 <_printf_float+0x1a6>
 800b06c:	1c4b      	adds	r3, r1, #1
 800b06e:	e7e7      	b.n	800b040 <_printf_float+0x1a4>
 800b070:	2900      	cmp	r1, #0
 800b072:	bfd4      	ite	le
 800b074:	f1c1 0202 	rsble	r2, r1, #2
 800b078:	2201      	movgt	r2, #1
 800b07a:	4413      	add	r3, r2
 800b07c:	e7e0      	b.n	800b040 <_printf_float+0x1a4>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	055a      	lsls	r2, r3, #21
 800b082:	d407      	bmi.n	800b094 <_printf_float+0x1f8>
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	4642      	mov	r2, r8
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	d12c      	bne.n	800b0ec <_printf_float+0x250>
 800b092:	e764      	b.n	800af5e <_printf_float+0xc2>
 800b094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b098:	f240 80e0 	bls.w	800b25c <_printf_float+0x3c0>
 800b09c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f7f5 fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d034      	beq.n	800b116 <_printf_float+0x27a>
 800b0ac:	4a37      	ldr	r2, [pc, #220]	; (800b18c <_printf_float+0x2f0>)
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f af51 	beq.w	800af5e <_printf_float+0xc2>
 800b0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	db02      	blt.n	800b0ca <_printf_float+0x22e>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07d8      	lsls	r0, r3, #31
 800b0c8:	d510      	bpl.n	800b0ec <_printf_float+0x250>
 800b0ca:	ee18 3a10 	vmov	r3, s16
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b8      	blx	r7
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f43f af41 	beq.w	800af5e <_printf_float+0xc2>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	f104 091a 	add.w	r9, r4, #26
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	4543      	cmp	r3, r8
 800b0ea:	dc09      	bgt.n	800b100 <_printf_float+0x264>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	079b      	lsls	r3, r3, #30
 800b0f0:	f100 8105 	bmi.w	800b2fe <_printf_float+0x462>
 800b0f4:	68e0      	ldr	r0, [r4, #12]
 800b0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f8:	4298      	cmp	r0, r3
 800b0fa:	bfb8      	it	lt
 800b0fc:	4618      	movlt	r0, r3
 800b0fe:	e730      	b.n	800af62 <_printf_float+0xc6>
 800b100:	2301      	movs	r3, #1
 800b102:	464a      	mov	r2, r9
 800b104:	4631      	mov	r1, r6
 800b106:	4628      	mov	r0, r5
 800b108:	47b8      	blx	r7
 800b10a:	3001      	adds	r0, #1
 800b10c:	f43f af27 	beq.w	800af5e <_printf_float+0xc2>
 800b110:	f108 0801 	add.w	r8, r8, #1
 800b114:	e7e6      	b.n	800b0e4 <_printf_float+0x248>
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc39      	bgt.n	800b190 <_printf_float+0x2f4>
 800b11c:	4a1b      	ldr	r2, [pc, #108]	; (800b18c <_printf_float+0x2f0>)
 800b11e:	2301      	movs	r3, #1
 800b120:	4631      	mov	r1, r6
 800b122:	4628      	mov	r0, r5
 800b124:	47b8      	blx	r7
 800b126:	3001      	adds	r0, #1
 800b128:	f43f af19 	beq.w	800af5e <_printf_float+0xc2>
 800b12c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b130:	4313      	orrs	r3, r2
 800b132:	d102      	bne.n	800b13a <_printf_float+0x29e>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	07d9      	lsls	r1, r3, #31
 800b138:	d5d8      	bpl.n	800b0ec <_printf_float+0x250>
 800b13a:	ee18 3a10 	vmov	r3, s16
 800b13e:	4652      	mov	r2, sl
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af09 	beq.w	800af5e <_printf_float+0xc2>
 800b14c:	f04f 0900 	mov.w	r9, #0
 800b150:	f104 0a1a 	add.w	sl, r4, #26
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	425b      	negs	r3, r3
 800b158:	454b      	cmp	r3, r9
 800b15a:	dc01      	bgt.n	800b160 <_printf_float+0x2c4>
 800b15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15e:	e792      	b.n	800b086 <_printf_float+0x1ea>
 800b160:	2301      	movs	r3, #1
 800b162:	4652      	mov	r2, sl
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f aef7 	beq.w	800af5e <_printf_float+0xc2>
 800b170:	f109 0901 	add.w	r9, r9, #1
 800b174:	e7ee      	b.n	800b154 <_printf_float+0x2b8>
 800b176:	bf00      	nop
 800b178:	7fefffff 	.word	0x7fefffff
 800b17c:	0800f2a8 	.word	0x0800f2a8
 800b180:	0800f2ac 	.word	0x0800f2ac
 800b184:	0800f2b4 	.word	0x0800f2b4
 800b188:	0800f2b0 	.word	0x0800f2b0
 800b18c:	0800f2b8 	.word	0x0800f2b8
 800b190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b194:	429a      	cmp	r2, r3
 800b196:	bfa8      	it	ge
 800b198:	461a      	movge	r2, r3
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	4691      	mov	r9, r2
 800b19e:	dc37      	bgt.n	800b210 <_printf_float+0x374>
 800b1a0:	f04f 0b00 	mov.w	fp, #0
 800b1a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1a8:	f104 021a 	add.w	r2, r4, #26
 800b1ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1ae:	9305      	str	r3, [sp, #20]
 800b1b0:	eba3 0309 	sub.w	r3, r3, r9
 800b1b4:	455b      	cmp	r3, fp
 800b1b6:	dc33      	bgt.n	800b220 <_printf_float+0x384>
 800b1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	db3b      	blt.n	800b238 <_printf_float+0x39c>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	07da      	lsls	r2, r3, #31
 800b1c4:	d438      	bmi.n	800b238 <_printf_float+0x39c>
 800b1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c8:	9a05      	ldr	r2, [sp, #20]
 800b1ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1cc:	1a9a      	subs	r2, r3, r2
 800b1ce:	eba3 0901 	sub.w	r9, r3, r1
 800b1d2:	4591      	cmp	r9, r2
 800b1d4:	bfa8      	it	ge
 800b1d6:	4691      	movge	r9, r2
 800b1d8:	f1b9 0f00 	cmp.w	r9, #0
 800b1dc:	dc35      	bgt.n	800b24a <_printf_float+0x3ae>
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1e6:	f104 0a1a 	add.w	sl, r4, #26
 800b1ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	eba3 0309 	sub.w	r3, r3, r9
 800b1f4:	4543      	cmp	r3, r8
 800b1f6:	f77f af79 	ble.w	800b0ec <_printf_float+0x250>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4652      	mov	r2, sl
 800b1fe:	4631      	mov	r1, r6
 800b200:	4628      	mov	r0, r5
 800b202:	47b8      	blx	r7
 800b204:	3001      	adds	r0, #1
 800b206:	f43f aeaa 	beq.w	800af5e <_printf_float+0xc2>
 800b20a:	f108 0801 	add.w	r8, r8, #1
 800b20e:	e7ec      	b.n	800b1ea <_printf_float+0x34e>
 800b210:	4613      	mov	r3, r2
 800b212:	4631      	mov	r1, r6
 800b214:	4642      	mov	r2, r8
 800b216:	4628      	mov	r0, r5
 800b218:	47b8      	blx	r7
 800b21a:	3001      	adds	r0, #1
 800b21c:	d1c0      	bne.n	800b1a0 <_printf_float+0x304>
 800b21e:	e69e      	b.n	800af5e <_printf_float+0xc2>
 800b220:	2301      	movs	r3, #1
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	9205      	str	r2, [sp, #20]
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f ae97 	beq.w	800af5e <_printf_float+0xc2>
 800b230:	9a05      	ldr	r2, [sp, #20]
 800b232:	f10b 0b01 	add.w	fp, fp, #1
 800b236:	e7b9      	b.n	800b1ac <_printf_float+0x310>
 800b238:	ee18 3a10 	vmov	r3, s16
 800b23c:	4652      	mov	r2, sl
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	d1be      	bne.n	800b1c6 <_printf_float+0x32a>
 800b248:	e689      	b.n	800af5e <_printf_float+0xc2>
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	464b      	mov	r3, r9
 800b24e:	4442      	add	r2, r8
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	d1c1      	bne.n	800b1de <_printf_float+0x342>
 800b25a:	e680      	b.n	800af5e <_printf_float+0xc2>
 800b25c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b25e:	2a01      	cmp	r2, #1
 800b260:	dc01      	bgt.n	800b266 <_printf_float+0x3ca>
 800b262:	07db      	lsls	r3, r3, #31
 800b264:	d538      	bpl.n	800b2d8 <_printf_float+0x43c>
 800b266:	2301      	movs	r3, #1
 800b268:	4642      	mov	r2, r8
 800b26a:	4631      	mov	r1, r6
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b8      	blx	r7
 800b270:	3001      	adds	r0, #1
 800b272:	f43f ae74 	beq.w	800af5e <_printf_float+0xc2>
 800b276:	ee18 3a10 	vmov	r3, s16
 800b27a:	4652      	mov	r2, sl
 800b27c:	4631      	mov	r1, r6
 800b27e:	4628      	mov	r0, r5
 800b280:	47b8      	blx	r7
 800b282:	3001      	adds	r0, #1
 800b284:	f43f ae6b 	beq.w	800af5e <_printf_float+0xc2>
 800b288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b28c:	2200      	movs	r2, #0
 800b28e:	2300      	movs	r3, #0
 800b290:	f7f5 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 800b294:	b9d8      	cbnz	r0, 800b2ce <_printf_float+0x432>
 800b296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b298:	f108 0201 	add.w	r2, r8, #1
 800b29c:	3b01      	subs	r3, #1
 800b29e:	4631      	mov	r1, r6
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	47b8      	blx	r7
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d10e      	bne.n	800b2c6 <_printf_float+0x42a>
 800b2a8:	e659      	b.n	800af5e <_printf_float+0xc2>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	4652      	mov	r2, sl
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	f43f ae52 	beq.w	800af5e <_printf_float+0xc2>
 800b2ba:	f108 0801 	add.w	r8, r8, #1
 800b2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	4543      	cmp	r3, r8
 800b2c4:	dcf1      	bgt.n	800b2aa <_printf_float+0x40e>
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2cc:	e6dc      	b.n	800b088 <_printf_float+0x1ec>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	f104 0a1a 	add.w	sl, r4, #26
 800b2d6:	e7f2      	b.n	800b2be <_printf_float+0x422>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4642      	mov	r2, r8
 800b2dc:	e7df      	b.n	800b29e <_printf_float+0x402>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	464a      	mov	r2, r9
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b8      	blx	r7
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f43f ae38 	beq.w	800af5e <_printf_float+0xc2>
 800b2ee:	f108 0801 	add.w	r8, r8, #1
 800b2f2:	68e3      	ldr	r3, [r4, #12]
 800b2f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2f6:	1a5b      	subs	r3, r3, r1
 800b2f8:	4543      	cmp	r3, r8
 800b2fa:	dcf0      	bgt.n	800b2de <_printf_float+0x442>
 800b2fc:	e6fa      	b.n	800b0f4 <_printf_float+0x258>
 800b2fe:	f04f 0800 	mov.w	r8, #0
 800b302:	f104 0919 	add.w	r9, r4, #25
 800b306:	e7f4      	b.n	800b2f2 <_printf_float+0x456>

0800b308 <_printf_common>:
 800b308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b30c:	4616      	mov	r6, r2
 800b30e:	4699      	mov	r9, r3
 800b310:	688a      	ldr	r2, [r1, #8]
 800b312:	690b      	ldr	r3, [r1, #16]
 800b314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b318:	4293      	cmp	r3, r2
 800b31a:	bfb8      	it	lt
 800b31c:	4613      	movlt	r3, r2
 800b31e:	6033      	str	r3, [r6, #0]
 800b320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b324:	4607      	mov	r7, r0
 800b326:	460c      	mov	r4, r1
 800b328:	b10a      	cbz	r2, 800b32e <_printf_common+0x26>
 800b32a:	3301      	adds	r3, #1
 800b32c:	6033      	str	r3, [r6, #0]
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	0699      	lsls	r1, r3, #26
 800b332:	bf42      	ittt	mi
 800b334:	6833      	ldrmi	r3, [r6, #0]
 800b336:	3302      	addmi	r3, #2
 800b338:	6033      	strmi	r3, [r6, #0]
 800b33a:	6825      	ldr	r5, [r4, #0]
 800b33c:	f015 0506 	ands.w	r5, r5, #6
 800b340:	d106      	bne.n	800b350 <_printf_common+0x48>
 800b342:	f104 0a19 	add.w	sl, r4, #25
 800b346:	68e3      	ldr	r3, [r4, #12]
 800b348:	6832      	ldr	r2, [r6, #0]
 800b34a:	1a9b      	subs	r3, r3, r2
 800b34c:	42ab      	cmp	r3, r5
 800b34e:	dc26      	bgt.n	800b39e <_printf_common+0x96>
 800b350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b354:	1e13      	subs	r3, r2, #0
 800b356:	6822      	ldr	r2, [r4, #0]
 800b358:	bf18      	it	ne
 800b35a:	2301      	movne	r3, #1
 800b35c:	0692      	lsls	r2, r2, #26
 800b35e:	d42b      	bmi.n	800b3b8 <_printf_common+0xb0>
 800b360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b364:	4649      	mov	r1, r9
 800b366:	4638      	mov	r0, r7
 800b368:	47c0      	blx	r8
 800b36a:	3001      	adds	r0, #1
 800b36c:	d01e      	beq.n	800b3ac <_printf_common+0xa4>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	68e5      	ldr	r5, [r4, #12]
 800b372:	6832      	ldr	r2, [r6, #0]
 800b374:	f003 0306 	and.w	r3, r3, #6
 800b378:	2b04      	cmp	r3, #4
 800b37a:	bf08      	it	eq
 800b37c:	1aad      	subeq	r5, r5, r2
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	6922      	ldr	r2, [r4, #16]
 800b382:	bf0c      	ite	eq
 800b384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b388:	2500      	movne	r5, #0
 800b38a:	4293      	cmp	r3, r2
 800b38c:	bfc4      	itt	gt
 800b38e:	1a9b      	subgt	r3, r3, r2
 800b390:	18ed      	addgt	r5, r5, r3
 800b392:	2600      	movs	r6, #0
 800b394:	341a      	adds	r4, #26
 800b396:	42b5      	cmp	r5, r6
 800b398:	d11a      	bne.n	800b3d0 <_printf_common+0xc8>
 800b39a:	2000      	movs	r0, #0
 800b39c:	e008      	b.n	800b3b0 <_printf_common+0xa8>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	4652      	mov	r2, sl
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	47c0      	blx	r8
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d103      	bne.n	800b3b4 <_printf_common+0xac>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b4:	3501      	adds	r5, #1
 800b3b6:	e7c6      	b.n	800b346 <_printf_common+0x3e>
 800b3b8:	18e1      	adds	r1, r4, r3
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	2030      	movs	r0, #48	; 0x30
 800b3be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3c2:	4422      	add	r2, r4
 800b3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3cc:	3302      	adds	r3, #2
 800b3ce:	e7c7      	b.n	800b360 <_printf_common+0x58>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	47c0      	blx	r8
 800b3da:	3001      	adds	r0, #1
 800b3dc:	d0e6      	beq.n	800b3ac <_printf_common+0xa4>
 800b3de:	3601      	adds	r6, #1
 800b3e0:	e7d9      	b.n	800b396 <_printf_common+0x8e>
	...

0800b3e4 <_printf_i>:
 800b3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	7e0f      	ldrb	r7, [r1, #24]
 800b3ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3ec:	2f78      	cmp	r7, #120	; 0x78
 800b3ee:	4691      	mov	r9, r2
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3fa:	d807      	bhi.n	800b40c <_printf_i+0x28>
 800b3fc:	2f62      	cmp	r7, #98	; 0x62
 800b3fe:	d80a      	bhi.n	800b416 <_printf_i+0x32>
 800b400:	2f00      	cmp	r7, #0
 800b402:	f000 80d8 	beq.w	800b5b6 <_printf_i+0x1d2>
 800b406:	2f58      	cmp	r7, #88	; 0x58
 800b408:	f000 80a3 	beq.w	800b552 <_printf_i+0x16e>
 800b40c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b414:	e03a      	b.n	800b48c <_printf_i+0xa8>
 800b416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b41a:	2b15      	cmp	r3, #21
 800b41c:	d8f6      	bhi.n	800b40c <_printf_i+0x28>
 800b41e:	a101      	add	r1, pc, #4	; (adr r1, 800b424 <_printf_i+0x40>)
 800b420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b424:	0800b47d 	.word	0x0800b47d
 800b428:	0800b491 	.word	0x0800b491
 800b42c:	0800b40d 	.word	0x0800b40d
 800b430:	0800b40d 	.word	0x0800b40d
 800b434:	0800b40d 	.word	0x0800b40d
 800b438:	0800b40d 	.word	0x0800b40d
 800b43c:	0800b491 	.word	0x0800b491
 800b440:	0800b40d 	.word	0x0800b40d
 800b444:	0800b40d 	.word	0x0800b40d
 800b448:	0800b40d 	.word	0x0800b40d
 800b44c:	0800b40d 	.word	0x0800b40d
 800b450:	0800b59d 	.word	0x0800b59d
 800b454:	0800b4c1 	.word	0x0800b4c1
 800b458:	0800b57f 	.word	0x0800b57f
 800b45c:	0800b40d 	.word	0x0800b40d
 800b460:	0800b40d 	.word	0x0800b40d
 800b464:	0800b5bf 	.word	0x0800b5bf
 800b468:	0800b40d 	.word	0x0800b40d
 800b46c:	0800b4c1 	.word	0x0800b4c1
 800b470:	0800b40d 	.word	0x0800b40d
 800b474:	0800b40d 	.word	0x0800b40d
 800b478:	0800b587 	.word	0x0800b587
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	1d1a      	adds	r2, r3, #4
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	602a      	str	r2, [r5, #0]
 800b484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b48c:	2301      	movs	r3, #1
 800b48e:	e0a3      	b.n	800b5d8 <_printf_i+0x1f4>
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	6829      	ldr	r1, [r5, #0]
 800b494:	0606      	lsls	r6, r0, #24
 800b496:	f101 0304 	add.w	r3, r1, #4
 800b49a:	d50a      	bpl.n	800b4b2 <_printf_i+0xce>
 800b49c:	680e      	ldr	r6, [r1, #0]
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	da03      	bge.n	800b4ac <_printf_i+0xc8>
 800b4a4:	232d      	movs	r3, #45	; 0x2d
 800b4a6:	4276      	negs	r6, r6
 800b4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ac:	485e      	ldr	r0, [pc, #376]	; (800b628 <_printf_i+0x244>)
 800b4ae:	230a      	movs	r3, #10
 800b4b0:	e019      	b.n	800b4e6 <_printf_i+0x102>
 800b4b2:	680e      	ldr	r6, [r1, #0]
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4ba:	bf18      	it	ne
 800b4bc:	b236      	sxthne	r6, r6
 800b4be:	e7ef      	b.n	800b4a0 <_printf_i+0xbc>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	6820      	ldr	r0, [r4, #0]
 800b4c4:	1d19      	adds	r1, r3, #4
 800b4c6:	6029      	str	r1, [r5, #0]
 800b4c8:	0601      	lsls	r1, r0, #24
 800b4ca:	d501      	bpl.n	800b4d0 <_printf_i+0xec>
 800b4cc:	681e      	ldr	r6, [r3, #0]
 800b4ce:	e002      	b.n	800b4d6 <_printf_i+0xf2>
 800b4d0:	0646      	lsls	r6, r0, #25
 800b4d2:	d5fb      	bpl.n	800b4cc <_printf_i+0xe8>
 800b4d4:	881e      	ldrh	r6, [r3, #0]
 800b4d6:	4854      	ldr	r0, [pc, #336]	; (800b628 <_printf_i+0x244>)
 800b4d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b4da:	bf0c      	ite	eq
 800b4dc:	2308      	moveq	r3, #8
 800b4de:	230a      	movne	r3, #10
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4e6:	6865      	ldr	r5, [r4, #4]
 800b4e8:	60a5      	str	r5, [r4, #8]
 800b4ea:	2d00      	cmp	r5, #0
 800b4ec:	bfa2      	ittt	ge
 800b4ee:	6821      	ldrge	r1, [r4, #0]
 800b4f0:	f021 0104 	bicge.w	r1, r1, #4
 800b4f4:	6021      	strge	r1, [r4, #0]
 800b4f6:	b90e      	cbnz	r6, 800b4fc <_printf_i+0x118>
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	d04d      	beq.n	800b598 <_printf_i+0x1b4>
 800b4fc:	4615      	mov	r5, r2
 800b4fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b502:	fb03 6711 	mls	r7, r3, r1, r6
 800b506:	5dc7      	ldrb	r7, [r0, r7]
 800b508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b50c:	4637      	mov	r7, r6
 800b50e:	42bb      	cmp	r3, r7
 800b510:	460e      	mov	r6, r1
 800b512:	d9f4      	bls.n	800b4fe <_printf_i+0x11a>
 800b514:	2b08      	cmp	r3, #8
 800b516:	d10b      	bne.n	800b530 <_printf_i+0x14c>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	07de      	lsls	r6, r3, #31
 800b51c:	d508      	bpl.n	800b530 <_printf_i+0x14c>
 800b51e:	6923      	ldr	r3, [r4, #16]
 800b520:	6861      	ldr	r1, [r4, #4]
 800b522:	4299      	cmp	r1, r3
 800b524:	bfde      	ittt	le
 800b526:	2330      	movle	r3, #48	; 0x30
 800b528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b52c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b530:	1b52      	subs	r2, r2, r5
 800b532:	6122      	str	r2, [r4, #16]
 800b534:	f8cd a000 	str.w	sl, [sp]
 800b538:	464b      	mov	r3, r9
 800b53a:	aa03      	add	r2, sp, #12
 800b53c:	4621      	mov	r1, r4
 800b53e:	4640      	mov	r0, r8
 800b540:	f7ff fee2 	bl	800b308 <_printf_common>
 800b544:	3001      	adds	r0, #1
 800b546:	d14c      	bne.n	800b5e2 <_printf_i+0x1fe>
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	b004      	add	sp, #16
 800b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b552:	4835      	ldr	r0, [pc, #212]	; (800b628 <_printf_i+0x244>)
 800b554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b558:	6829      	ldr	r1, [r5, #0]
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b560:	6029      	str	r1, [r5, #0]
 800b562:	061d      	lsls	r5, r3, #24
 800b564:	d514      	bpl.n	800b590 <_printf_i+0x1ac>
 800b566:	07df      	lsls	r7, r3, #31
 800b568:	bf44      	itt	mi
 800b56a:	f043 0320 	orrmi.w	r3, r3, #32
 800b56e:	6023      	strmi	r3, [r4, #0]
 800b570:	b91e      	cbnz	r6, 800b57a <_printf_i+0x196>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	f023 0320 	bic.w	r3, r3, #32
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	2310      	movs	r3, #16
 800b57c:	e7b0      	b.n	800b4e0 <_printf_i+0xfc>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	f043 0320 	orr.w	r3, r3, #32
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	2378      	movs	r3, #120	; 0x78
 800b588:	4828      	ldr	r0, [pc, #160]	; (800b62c <_printf_i+0x248>)
 800b58a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b58e:	e7e3      	b.n	800b558 <_printf_i+0x174>
 800b590:	0659      	lsls	r1, r3, #25
 800b592:	bf48      	it	mi
 800b594:	b2b6      	uxthmi	r6, r6
 800b596:	e7e6      	b.n	800b566 <_printf_i+0x182>
 800b598:	4615      	mov	r5, r2
 800b59a:	e7bb      	b.n	800b514 <_printf_i+0x130>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	6826      	ldr	r6, [r4, #0]
 800b5a0:	6961      	ldr	r1, [r4, #20]
 800b5a2:	1d18      	adds	r0, r3, #4
 800b5a4:	6028      	str	r0, [r5, #0]
 800b5a6:	0635      	lsls	r5, r6, #24
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	d501      	bpl.n	800b5b0 <_printf_i+0x1cc>
 800b5ac:	6019      	str	r1, [r3, #0]
 800b5ae:	e002      	b.n	800b5b6 <_printf_i+0x1d2>
 800b5b0:	0670      	lsls	r0, r6, #25
 800b5b2:	d5fb      	bpl.n	800b5ac <_printf_i+0x1c8>
 800b5b4:	8019      	strh	r1, [r3, #0]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	4615      	mov	r5, r2
 800b5bc:	e7ba      	b.n	800b534 <_printf_i+0x150>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	1d1a      	adds	r2, r3, #4
 800b5c2:	602a      	str	r2, [r5, #0]
 800b5c4:	681d      	ldr	r5, [r3, #0]
 800b5c6:	6862      	ldr	r2, [r4, #4]
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7f4 fe10 	bl	80001f0 <memchr>
 800b5d0:	b108      	cbz	r0, 800b5d6 <_printf_i+0x1f2>
 800b5d2:	1b40      	subs	r0, r0, r5
 800b5d4:	6060      	str	r0, [r4, #4]
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	6123      	str	r3, [r4, #16]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e0:	e7a8      	b.n	800b534 <_printf_i+0x150>
 800b5e2:	6923      	ldr	r3, [r4, #16]
 800b5e4:	462a      	mov	r2, r5
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	47d0      	blx	sl
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	d0ab      	beq.n	800b548 <_printf_i+0x164>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	079b      	lsls	r3, r3, #30
 800b5f4:	d413      	bmi.n	800b61e <_printf_i+0x23a>
 800b5f6:	68e0      	ldr	r0, [r4, #12]
 800b5f8:	9b03      	ldr	r3, [sp, #12]
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	bfb8      	it	lt
 800b5fe:	4618      	movlt	r0, r3
 800b600:	e7a4      	b.n	800b54c <_printf_i+0x168>
 800b602:	2301      	movs	r3, #1
 800b604:	4632      	mov	r2, r6
 800b606:	4649      	mov	r1, r9
 800b608:	4640      	mov	r0, r8
 800b60a:	47d0      	blx	sl
 800b60c:	3001      	adds	r0, #1
 800b60e:	d09b      	beq.n	800b548 <_printf_i+0x164>
 800b610:	3501      	adds	r5, #1
 800b612:	68e3      	ldr	r3, [r4, #12]
 800b614:	9903      	ldr	r1, [sp, #12]
 800b616:	1a5b      	subs	r3, r3, r1
 800b618:	42ab      	cmp	r3, r5
 800b61a:	dcf2      	bgt.n	800b602 <_printf_i+0x21e>
 800b61c:	e7eb      	b.n	800b5f6 <_printf_i+0x212>
 800b61e:	2500      	movs	r5, #0
 800b620:	f104 0619 	add.w	r6, r4, #25
 800b624:	e7f5      	b.n	800b612 <_printf_i+0x22e>
 800b626:	bf00      	nop
 800b628:	0800f2ba 	.word	0x0800f2ba
 800b62c:	0800f2cb 	.word	0x0800f2cb

0800b630 <_sbrk_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_sbrk_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f7f9 fed2 	bl	80053e4 <_sbrk>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_sbrk_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_sbrk_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20000950 	.word	0x20000950

0800b650 <_strtol_l.constprop.0>:
 800b650:	2b01      	cmp	r3, #1
 800b652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b656:	d001      	beq.n	800b65c <_strtol_l.constprop.0+0xc>
 800b658:	2b24      	cmp	r3, #36	; 0x24
 800b65a:	d906      	bls.n	800b66a <_strtol_l.constprop.0+0x1a>
 800b65c:	f7ff fa56 	bl	800ab0c <__errno>
 800b660:	2316      	movs	r3, #22
 800b662:	6003      	str	r3, [r0, #0]
 800b664:	2000      	movs	r0, #0
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b750 <_strtol_l.constprop.0+0x100>
 800b66e:	460d      	mov	r5, r1
 800b670:	462e      	mov	r6, r5
 800b672:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b676:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b67a:	f017 0708 	ands.w	r7, r7, #8
 800b67e:	d1f7      	bne.n	800b670 <_strtol_l.constprop.0+0x20>
 800b680:	2c2d      	cmp	r4, #45	; 0x2d
 800b682:	d132      	bne.n	800b6ea <_strtol_l.constprop.0+0x9a>
 800b684:	782c      	ldrb	r4, [r5, #0]
 800b686:	2701      	movs	r7, #1
 800b688:	1cb5      	adds	r5, r6, #2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d05b      	beq.n	800b746 <_strtol_l.constprop.0+0xf6>
 800b68e:	2b10      	cmp	r3, #16
 800b690:	d109      	bne.n	800b6a6 <_strtol_l.constprop.0+0x56>
 800b692:	2c30      	cmp	r4, #48	; 0x30
 800b694:	d107      	bne.n	800b6a6 <_strtol_l.constprop.0+0x56>
 800b696:	782c      	ldrb	r4, [r5, #0]
 800b698:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b69c:	2c58      	cmp	r4, #88	; 0x58
 800b69e:	d14d      	bne.n	800b73c <_strtol_l.constprop.0+0xec>
 800b6a0:	786c      	ldrb	r4, [r5, #1]
 800b6a2:	2310      	movs	r3, #16
 800b6a4:	3502      	adds	r5, #2
 800b6a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6ae:	f04f 0c00 	mov.w	ip, #0
 800b6b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b6b6:	4666      	mov	r6, ip
 800b6b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b6bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b6c0:	f1be 0f09 	cmp.w	lr, #9
 800b6c4:	d816      	bhi.n	800b6f4 <_strtol_l.constprop.0+0xa4>
 800b6c6:	4674      	mov	r4, lr
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	dd24      	ble.n	800b716 <_strtol_l.constprop.0+0xc6>
 800b6cc:	f1bc 0f00 	cmp.w	ip, #0
 800b6d0:	db1e      	blt.n	800b710 <_strtol_l.constprop.0+0xc0>
 800b6d2:	45b1      	cmp	r9, r6
 800b6d4:	d31c      	bcc.n	800b710 <_strtol_l.constprop.0+0xc0>
 800b6d6:	d101      	bne.n	800b6dc <_strtol_l.constprop.0+0x8c>
 800b6d8:	45a2      	cmp	sl, r4
 800b6da:	db19      	blt.n	800b710 <_strtol_l.constprop.0+0xc0>
 800b6dc:	fb06 4603 	mla	r6, r6, r3, r4
 800b6e0:	f04f 0c01 	mov.w	ip, #1
 800b6e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6e8:	e7e8      	b.n	800b6bc <_strtol_l.constprop.0+0x6c>
 800b6ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b6ec:	bf04      	itt	eq
 800b6ee:	782c      	ldrbeq	r4, [r5, #0]
 800b6f0:	1cb5      	addeq	r5, r6, #2
 800b6f2:	e7ca      	b.n	800b68a <_strtol_l.constprop.0+0x3a>
 800b6f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b6f8:	f1be 0f19 	cmp.w	lr, #25
 800b6fc:	d801      	bhi.n	800b702 <_strtol_l.constprop.0+0xb2>
 800b6fe:	3c37      	subs	r4, #55	; 0x37
 800b700:	e7e2      	b.n	800b6c8 <_strtol_l.constprop.0+0x78>
 800b702:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b706:	f1be 0f19 	cmp.w	lr, #25
 800b70a:	d804      	bhi.n	800b716 <_strtol_l.constprop.0+0xc6>
 800b70c:	3c57      	subs	r4, #87	; 0x57
 800b70e:	e7db      	b.n	800b6c8 <_strtol_l.constprop.0+0x78>
 800b710:	f04f 3cff 	mov.w	ip, #4294967295
 800b714:	e7e6      	b.n	800b6e4 <_strtol_l.constprop.0+0x94>
 800b716:	f1bc 0f00 	cmp.w	ip, #0
 800b71a:	da05      	bge.n	800b728 <_strtol_l.constprop.0+0xd8>
 800b71c:	2322      	movs	r3, #34	; 0x22
 800b71e:	6003      	str	r3, [r0, #0]
 800b720:	4646      	mov	r6, r8
 800b722:	b942      	cbnz	r2, 800b736 <_strtol_l.constprop.0+0xe6>
 800b724:	4630      	mov	r0, r6
 800b726:	e79e      	b.n	800b666 <_strtol_l.constprop.0+0x16>
 800b728:	b107      	cbz	r7, 800b72c <_strtol_l.constprop.0+0xdc>
 800b72a:	4276      	negs	r6, r6
 800b72c:	2a00      	cmp	r2, #0
 800b72e:	d0f9      	beq.n	800b724 <_strtol_l.constprop.0+0xd4>
 800b730:	f1bc 0f00 	cmp.w	ip, #0
 800b734:	d000      	beq.n	800b738 <_strtol_l.constprop.0+0xe8>
 800b736:	1e69      	subs	r1, r5, #1
 800b738:	6011      	str	r1, [r2, #0]
 800b73a:	e7f3      	b.n	800b724 <_strtol_l.constprop.0+0xd4>
 800b73c:	2430      	movs	r4, #48	; 0x30
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1b1      	bne.n	800b6a6 <_strtol_l.constprop.0+0x56>
 800b742:	2308      	movs	r3, #8
 800b744:	e7af      	b.n	800b6a6 <_strtol_l.constprop.0+0x56>
 800b746:	2c30      	cmp	r4, #48	; 0x30
 800b748:	d0a5      	beq.n	800b696 <_strtol_l.constprop.0+0x46>
 800b74a:	230a      	movs	r3, #10
 800b74c:	e7ab      	b.n	800b6a6 <_strtol_l.constprop.0+0x56>
 800b74e:	bf00      	nop
 800b750:	0800f1a1 	.word	0x0800f1a1

0800b754 <strtol>:
 800b754:	4613      	mov	r3, r2
 800b756:	460a      	mov	r2, r1
 800b758:	4601      	mov	r1, r0
 800b75a:	4802      	ldr	r0, [pc, #8]	; (800b764 <strtol+0x10>)
 800b75c:	6800      	ldr	r0, [r0, #0]
 800b75e:	f7ff bf77 	b.w	800b650 <_strtol_l.constprop.0>
 800b762:	bf00      	nop
 800b764:	20000010 	.word	0x20000010

0800b768 <__assert_func>:
 800b768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b76a:	4614      	mov	r4, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <__assert_func+0x2c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4605      	mov	r5, r0
 800b774:	68d8      	ldr	r0, [r3, #12]
 800b776:	b14c      	cbz	r4, 800b78c <__assert_func+0x24>
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <__assert_func+0x30>)
 800b77a:	9100      	str	r1, [sp, #0]
 800b77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b780:	4906      	ldr	r1, [pc, #24]	; (800b79c <__assert_func+0x34>)
 800b782:	462b      	mov	r3, r5
 800b784:	f000 fe8a 	bl	800c49c <fiprintf>
 800b788:	f001 fc7e 	bl	800d088 <abort>
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <__assert_func+0x38>)
 800b78e:	461c      	mov	r4, r3
 800b790:	e7f3      	b.n	800b77a <__assert_func+0x12>
 800b792:	bf00      	nop
 800b794:	20000010 	.word	0x20000010
 800b798:	0800f2dc 	.word	0x0800f2dc
 800b79c:	0800f2e9 	.word	0x0800f2e9
 800b7a0:	0800f317 	.word	0x0800f317

0800b7a4 <quorem>:
 800b7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	6903      	ldr	r3, [r0, #16]
 800b7aa:	690c      	ldr	r4, [r1, #16]
 800b7ac:	42a3      	cmp	r3, r4
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	f2c0 8081 	blt.w	800b8b6 <quorem+0x112>
 800b7b4:	3c01      	subs	r4, #1
 800b7b6:	f101 0814 	add.w	r8, r1, #20
 800b7ba:	f100 0514 	add.w	r5, r0, #20
 800b7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7c2:	9301      	str	r3, [sp, #4]
 800b7c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7dc:	d331      	bcc.n	800b842 <quorem+0x9e>
 800b7de:	f04f 0e00 	mov.w	lr, #0
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	46ac      	mov	ip, r5
 800b7e6:	46f2      	mov	sl, lr
 800b7e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7ec:	b293      	uxth	r3, r2
 800b7ee:	fb06 e303 	mla	r3, r6, r3, lr
 800b7f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ebaa 0303 	sub.w	r3, sl, r3
 800b7fc:	f8dc a000 	ldr.w	sl, [ip]
 800b800:	0c12      	lsrs	r2, r2, #16
 800b802:	fa13 f38a 	uxtah	r3, r3, sl
 800b806:	fb06 e202 	mla	r2, r6, r2, lr
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b812:	b292      	uxth	r2, r2
 800b814:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b81c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b820:	4581      	cmp	r9, r0
 800b822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b826:	f84c 3b04 	str.w	r3, [ip], #4
 800b82a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b82e:	d2db      	bcs.n	800b7e8 <quorem+0x44>
 800b830:	f855 300b 	ldr.w	r3, [r5, fp]
 800b834:	b92b      	cbnz	r3, 800b842 <quorem+0x9e>
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	3b04      	subs	r3, #4
 800b83a:	429d      	cmp	r5, r3
 800b83c:	461a      	mov	r2, r3
 800b83e:	d32e      	bcc.n	800b89e <quorem+0xfa>
 800b840:	613c      	str	r4, [r7, #16]
 800b842:	4638      	mov	r0, r7
 800b844:	f001 f8e0 	bl	800ca08 <__mcmp>
 800b848:	2800      	cmp	r0, #0
 800b84a:	db24      	blt.n	800b896 <quorem+0xf2>
 800b84c:	3601      	adds	r6, #1
 800b84e:	4628      	mov	r0, r5
 800b850:	f04f 0c00 	mov.w	ip, #0
 800b854:	f858 2b04 	ldr.w	r2, [r8], #4
 800b858:	f8d0 e000 	ldr.w	lr, [r0]
 800b85c:	b293      	uxth	r3, r2
 800b85e:	ebac 0303 	sub.w	r3, ip, r3
 800b862:	0c12      	lsrs	r2, r2, #16
 800b864:	fa13 f38e 	uxtah	r3, r3, lr
 800b868:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b86c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b870:	b29b      	uxth	r3, r3
 800b872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b876:	45c1      	cmp	r9, r8
 800b878:	f840 3b04 	str.w	r3, [r0], #4
 800b87c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b880:	d2e8      	bcs.n	800b854 <quorem+0xb0>
 800b882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b88a:	b922      	cbnz	r2, 800b896 <quorem+0xf2>
 800b88c:	3b04      	subs	r3, #4
 800b88e:	429d      	cmp	r5, r3
 800b890:	461a      	mov	r2, r3
 800b892:	d30a      	bcc.n	800b8aa <quorem+0x106>
 800b894:	613c      	str	r4, [r7, #16]
 800b896:	4630      	mov	r0, r6
 800b898:	b003      	add	sp, #12
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	6812      	ldr	r2, [r2, #0]
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	d1cc      	bne.n	800b840 <quorem+0x9c>
 800b8a6:	3c01      	subs	r4, #1
 800b8a8:	e7c7      	b.n	800b83a <quorem+0x96>
 800b8aa:	6812      	ldr	r2, [r2, #0]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	d1f0      	bne.n	800b894 <quorem+0xf0>
 800b8b2:	3c01      	subs	r4, #1
 800b8b4:	e7eb      	b.n	800b88e <quorem+0xea>
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	e7ee      	b.n	800b898 <quorem+0xf4>
 800b8ba:	0000      	movs	r0, r0
 800b8bc:	0000      	movs	r0, r0
	...

0800b8c0 <_dtoa_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	ed2d 8b04 	vpush	{d8-d9}
 800b8c8:	ec57 6b10 	vmov	r6, r7, d0
 800b8cc:	b093      	sub	sp, #76	; 0x4c
 800b8ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8d4:	9106      	str	r1, [sp, #24]
 800b8d6:	ee10 aa10 	vmov	sl, s0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8de:	930c      	str	r3, [sp, #48]	; 0x30
 800b8e0:	46bb      	mov	fp, r7
 800b8e2:	b975      	cbnz	r5, 800b902 <_dtoa_r+0x42>
 800b8e4:	2010      	movs	r0, #16
 800b8e6:	f7ff f93b 	bl	800ab60 <malloc>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	6260      	str	r0, [r4, #36]	; 0x24
 800b8ee:	b920      	cbnz	r0, 800b8fa <_dtoa_r+0x3a>
 800b8f0:	4ba7      	ldr	r3, [pc, #668]	; (800bb90 <_dtoa_r+0x2d0>)
 800b8f2:	21ea      	movs	r1, #234	; 0xea
 800b8f4:	48a7      	ldr	r0, [pc, #668]	; (800bb94 <_dtoa_r+0x2d4>)
 800b8f6:	f7ff ff37 	bl	800b768 <__assert_func>
 800b8fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8fe:	6005      	str	r5, [r0, #0]
 800b900:	60c5      	str	r5, [r0, #12]
 800b902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b904:	6819      	ldr	r1, [r3, #0]
 800b906:	b151      	cbz	r1, 800b91e <_dtoa_r+0x5e>
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	604a      	str	r2, [r1, #4]
 800b90c:	2301      	movs	r3, #1
 800b90e:	4093      	lsls	r3, r2
 800b910:	608b      	str	r3, [r1, #8]
 800b912:	4620      	mov	r0, r4
 800b914:	f000 fe36 	bl	800c584 <_Bfree>
 800b918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	1e3b      	subs	r3, r7, #0
 800b920:	bfaa      	itet	ge
 800b922:	2300      	movge	r3, #0
 800b924:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b928:	f8c8 3000 	strge.w	r3, [r8]
 800b92c:	4b9a      	ldr	r3, [pc, #616]	; (800bb98 <_dtoa_r+0x2d8>)
 800b92e:	bfbc      	itt	lt
 800b930:	2201      	movlt	r2, #1
 800b932:	f8c8 2000 	strlt.w	r2, [r8]
 800b936:	ea33 030b 	bics.w	r3, r3, fp
 800b93a:	d11b      	bne.n	800b974 <_dtoa_r+0xb4>
 800b93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b93e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b948:	4333      	orrs	r3, r6
 800b94a:	f000 8592 	beq.w	800c472 <_dtoa_r+0xbb2>
 800b94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b950:	b963      	cbnz	r3, 800b96c <_dtoa_r+0xac>
 800b952:	4b92      	ldr	r3, [pc, #584]	; (800bb9c <_dtoa_r+0x2dc>)
 800b954:	e022      	b.n	800b99c <_dtoa_r+0xdc>
 800b956:	4b92      	ldr	r3, [pc, #584]	; (800bba0 <_dtoa_r+0x2e0>)
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	3308      	adds	r3, #8
 800b95c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	9801      	ldr	r0, [sp, #4]
 800b962:	b013      	add	sp, #76	; 0x4c
 800b964:	ecbd 8b04 	vpop	{d8-d9}
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96c:	4b8b      	ldr	r3, [pc, #556]	; (800bb9c <_dtoa_r+0x2dc>)
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	3303      	adds	r3, #3
 800b972:	e7f3      	b.n	800b95c <_dtoa_r+0x9c>
 800b974:	2200      	movs	r2, #0
 800b976:	2300      	movs	r3, #0
 800b978:	4650      	mov	r0, sl
 800b97a:	4659      	mov	r1, fp
 800b97c:	f7f5 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800b980:	ec4b ab19 	vmov	d9, sl, fp
 800b984:	4680      	mov	r8, r0
 800b986:	b158      	cbz	r0, 800b9a0 <_dtoa_r+0xe0>
 800b988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b98a:	2301      	movs	r3, #1
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 856b 	beq.w	800c46c <_dtoa_r+0xbac>
 800b996:	4883      	ldr	r0, [pc, #524]	; (800bba4 <_dtoa_r+0x2e4>)
 800b998:	6018      	str	r0, [r3, #0]
 800b99a:	1e43      	subs	r3, r0, #1
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	e7df      	b.n	800b960 <_dtoa_r+0xa0>
 800b9a0:	ec4b ab10 	vmov	d0, sl, fp
 800b9a4:	aa10      	add	r2, sp, #64	; 0x40
 800b9a6:	a911      	add	r1, sp, #68	; 0x44
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f001 f8d3 	bl	800cb54 <__d2b>
 800b9ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b9b2:	ee08 0a10 	vmov	s16, r0
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	f000 8084 	beq.w	800bac4 <_dtoa_r+0x204>
 800b9bc:	ee19 3a90 	vmov	r3, s19
 800b9c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b9c8:	4656      	mov	r6, sl
 800b9ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b9ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b9d6:	4b74      	ldr	r3, [pc, #464]	; (800bba8 <_dtoa_r+0x2e8>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4630      	mov	r0, r6
 800b9dc:	4639      	mov	r1, r7
 800b9de:	f7f4 fc5b 	bl	8000298 <__aeabi_dsub>
 800b9e2:	a365      	add	r3, pc, #404	; (adr r3, 800bb78 <_dtoa_r+0x2b8>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fe0e 	bl	8000608 <__aeabi_dmul>
 800b9ec:	a364      	add	r3, pc, #400	; (adr r3, 800bb80 <_dtoa_r+0x2c0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f4 fc53 	bl	800029c <__adddf3>
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	f7f4 fd9a 	bl	8000534 <__aeabi_i2d>
 800ba00:	a361      	add	r3, pc, #388	; (adr r3, 800bb88 <_dtoa_r+0x2c8>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fdff 	bl	8000608 <__aeabi_dmul>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	4630      	mov	r0, r6
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f4 fc43 	bl	800029c <__adddf3>
 800ba16:	4606      	mov	r6, r0
 800ba18:	460f      	mov	r7, r1
 800ba1a:	f7f5 f8a5 	bl	8000b68 <__aeabi_d2iz>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	9000      	str	r0, [sp, #0]
 800ba22:	2300      	movs	r3, #0
 800ba24:	4630      	mov	r0, r6
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f5 f860 	bl	8000aec <__aeabi_dcmplt>
 800ba2c:	b150      	cbz	r0, 800ba44 <_dtoa_r+0x184>
 800ba2e:	9800      	ldr	r0, [sp, #0]
 800ba30:	f7f4 fd80 	bl	8000534 <__aeabi_i2d>
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	f7f5 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba3c:	b910      	cbnz	r0, 800ba44 <_dtoa_r+0x184>
 800ba3e:	9b00      	ldr	r3, [sp, #0]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	2b16      	cmp	r3, #22
 800ba48:	d85a      	bhi.n	800bb00 <_dtoa_r+0x240>
 800ba4a:	9a00      	ldr	r2, [sp, #0]
 800ba4c:	4b57      	ldr	r3, [pc, #348]	; (800bbac <_dtoa_r+0x2ec>)
 800ba4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	ec51 0b19 	vmov	r0, r1, d9
 800ba5a:	f7f5 f847 	bl	8000aec <__aeabi_dcmplt>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d050      	beq.n	800bb04 <_dtoa_r+0x244>
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba6e:	1b5d      	subs	r5, r3, r5
 800ba70:	1e6b      	subs	r3, r5, #1
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	bf45      	ittet	mi
 800ba76:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba7a:	9304      	strmi	r3, [sp, #16]
 800ba7c:	2300      	movpl	r3, #0
 800ba7e:	2300      	movmi	r3, #0
 800ba80:	bf4c      	ite	mi
 800ba82:	9305      	strmi	r3, [sp, #20]
 800ba84:	9304      	strpl	r3, [sp, #16]
 800ba86:	9b00      	ldr	r3, [sp, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	db3d      	blt.n	800bb08 <_dtoa_r+0x248>
 800ba8c:	9b05      	ldr	r3, [sp, #20]
 800ba8e:	9a00      	ldr	r2, [sp, #0]
 800ba90:	920a      	str	r2, [sp, #40]	; 0x28
 800ba92:	4413      	add	r3, r2
 800ba94:	9305      	str	r3, [sp, #20]
 800ba96:	2300      	movs	r3, #0
 800ba98:	9307      	str	r3, [sp, #28]
 800ba9a:	9b06      	ldr	r3, [sp, #24]
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	f200 8089 	bhi.w	800bbb4 <_dtoa_r+0x2f4>
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	bfc4      	itt	gt
 800baa6:	3b04      	subgt	r3, #4
 800baa8:	9306      	strgt	r3, [sp, #24]
 800baaa:	9b06      	ldr	r3, [sp, #24]
 800baac:	f1a3 0302 	sub.w	r3, r3, #2
 800bab0:	bfcc      	ite	gt
 800bab2:	2500      	movgt	r5, #0
 800bab4:	2501      	movle	r5, #1
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	f200 8087 	bhi.w	800bbca <_dtoa_r+0x30a>
 800babc:	e8df f003 	tbb	[pc, r3]
 800bac0:	59383a2d 	.word	0x59383a2d
 800bac4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bac8:	441d      	add	r5, r3
 800baca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bace:	2b20      	cmp	r3, #32
 800bad0:	bfc1      	itttt	gt
 800bad2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bad6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bada:	fa0b f303 	lslgt.w	r3, fp, r3
 800bade:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bae2:	bfda      	itte	le
 800bae4:	f1c3 0320 	rsble	r3, r3, #32
 800bae8:	fa06 f003 	lslle.w	r0, r6, r3
 800baec:	4318      	orrgt	r0, r3
 800baee:	f7f4 fd11 	bl	8000514 <__aeabi_ui2d>
 800baf2:	2301      	movs	r3, #1
 800baf4:	4606      	mov	r6, r0
 800baf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bafa:	3d01      	subs	r5, #1
 800bafc:	930e      	str	r3, [sp, #56]	; 0x38
 800bafe:	e76a      	b.n	800b9d6 <_dtoa_r+0x116>
 800bb00:	2301      	movs	r3, #1
 800bb02:	e7b2      	b.n	800ba6a <_dtoa_r+0x1aa>
 800bb04:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb06:	e7b1      	b.n	800ba6c <_dtoa_r+0x1ac>
 800bb08:	9b04      	ldr	r3, [sp, #16]
 800bb0a:	9a00      	ldr	r2, [sp, #0]
 800bb0c:	1a9b      	subs	r3, r3, r2
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	4253      	negs	r3, r2
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	2300      	movs	r3, #0
 800bb16:	930a      	str	r3, [sp, #40]	; 0x28
 800bb18:	e7bf      	b.n	800ba9a <_dtoa_r+0x1da>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	9308      	str	r3, [sp, #32]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	dc55      	bgt.n	800bbd0 <_dtoa_r+0x310>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb2e:	e00c      	b.n	800bb4a <_dtoa_r+0x28a>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e7f3      	b.n	800bb1c <_dtoa_r+0x25c>
 800bb34:	2300      	movs	r3, #0
 800bb36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	9302      	str	r3, [sp, #8]
 800bb40:	3301      	adds	r3, #1
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	9303      	str	r3, [sp, #12]
 800bb46:	bfb8      	it	lt
 800bb48:	2301      	movlt	r3, #1
 800bb4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	6042      	str	r2, [r0, #4]
 800bb50:	2204      	movs	r2, #4
 800bb52:	f102 0614 	add.w	r6, r2, #20
 800bb56:	429e      	cmp	r6, r3
 800bb58:	6841      	ldr	r1, [r0, #4]
 800bb5a:	d93d      	bls.n	800bbd8 <_dtoa_r+0x318>
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fcd1 	bl	800c504 <_Balloc>
 800bb62:	9001      	str	r0, [sp, #4]
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d13b      	bne.n	800bbe0 <_dtoa_r+0x320>
 800bb68:	4b11      	ldr	r3, [pc, #68]	; (800bbb0 <_dtoa_r+0x2f0>)
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb70:	e6c0      	b.n	800b8f4 <_dtoa_r+0x34>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e7df      	b.n	800bb36 <_dtoa_r+0x276>
 800bb76:	bf00      	nop
 800bb78:	636f4361 	.word	0x636f4361
 800bb7c:	3fd287a7 	.word	0x3fd287a7
 800bb80:	8b60c8b3 	.word	0x8b60c8b3
 800bb84:	3fc68a28 	.word	0x3fc68a28
 800bb88:	509f79fb 	.word	0x509f79fb
 800bb8c:	3fd34413 	.word	0x3fd34413
 800bb90:	0800f325 	.word	0x0800f325
 800bb94:	0800f33c 	.word	0x0800f33c
 800bb98:	7ff00000 	.word	0x7ff00000
 800bb9c:	0800f321 	.word	0x0800f321
 800bba0:	0800f318 	.word	0x0800f318
 800bba4:	0800f2b9 	.word	0x0800f2b9
 800bba8:	3ff80000 	.word	0x3ff80000
 800bbac:	0800f438 	.word	0x0800f438
 800bbb0:	0800f397 	.word	0x0800f397
 800bbb4:	2501      	movs	r5, #1
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	9306      	str	r3, [sp, #24]
 800bbba:	9508      	str	r5, [sp, #32]
 800bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2312      	movs	r3, #18
 800bbc8:	e7b0      	b.n	800bb2c <_dtoa_r+0x26c>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	9308      	str	r3, [sp, #32]
 800bbce:	e7f5      	b.n	800bbbc <_dtoa_r+0x2fc>
 800bbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bbd6:	e7b8      	b.n	800bb4a <_dtoa_r+0x28a>
 800bbd8:	3101      	adds	r1, #1
 800bbda:	6041      	str	r1, [r0, #4]
 800bbdc:	0052      	lsls	r2, r2, #1
 800bbde:	e7b8      	b.n	800bb52 <_dtoa_r+0x292>
 800bbe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbe2:	9a01      	ldr	r2, [sp, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	2b0e      	cmp	r3, #14
 800bbea:	f200 809d 	bhi.w	800bd28 <_dtoa_r+0x468>
 800bbee:	2d00      	cmp	r5, #0
 800bbf0:	f000 809a 	beq.w	800bd28 <_dtoa_r+0x468>
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dd32      	ble.n	800bc60 <_dtoa_r+0x3a0>
 800bbfa:	4ab7      	ldr	r2, [pc, #732]	; (800bed8 <_dtoa_r+0x618>)
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc08:	9b00      	ldr	r3, [sp, #0]
 800bc0a:	05d8      	lsls	r0, r3, #23
 800bc0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc10:	d516      	bpl.n	800bc40 <_dtoa_r+0x380>
 800bc12:	4bb2      	ldr	r3, [pc, #712]	; (800bedc <_dtoa_r+0x61c>)
 800bc14:	ec51 0b19 	vmov	r0, r1, d9
 800bc18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc1c:	f7f4 fe1e 	bl	800085c <__aeabi_ddiv>
 800bc20:	f007 070f 	and.w	r7, r7, #15
 800bc24:	4682      	mov	sl, r0
 800bc26:	468b      	mov	fp, r1
 800bc28:	2503      	movs	r5, #3
 800bc2a:	4eac      	ldr	r6, [pc, #688]	; (800bedc <_dtoa_r+0x61c>)
 800bc2c:	b957      	cbnz	r7, 800bc44 <_dtoa_r+0x384>
 800bc2e:	4642      	mov	r2, r8
 800bc30:	464b      	mov	r3, r9
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	f7f4 fe11 	bl	800085c <__aeabi_ddiv>
 800bc3a:	4682      	mov	sl, r0
 800bc3c:	468b      	mov	fp, r1
 800bc3e:	e028      	b.n	800bc92 <_dtoa_r+0x3d2>
 800bc40:	2502      	movs	r5, #2
 800bc42:	e7f2      	b.n	800bc2a <_dtoa_r+0x36a>
 800bc44:	07f9      	lsls	r1, r7, #31
 800bc46:	d508      	bpl.n	800bc5a <_dtoa_r+0x39a>
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc50:	f7f4 fcda 	bl	8000608 <__aeabi_dmul>
 800bc54:	3501      	adds	r5, #1
 800bc56:	4680      	mov	r8, r0
 800bc58:	4689      	mov	r9, r1
 800bc5a:	107f      	asrs	r7, r7, #1
 800bc5c:	3608      	adds	r6, #8
 800bc5e:	e7e5      	b.n	800bc2c <_dtoa_r+0x36c>
 800bc60:	f000 809b 	beq.w	800bd9a <_dtoa_r+0x4da>
 800bc64:	9b00      	ldr	r3, [sp, #0]
 800bc66:	4f9d      	ldr	r7, [pc, #628]	; (800bedc <_dtoa_r+0x61c>)
 800bc68:	425e      	negs	r6, r3
 800bc6a:	4b9b      	ldr	r3, [pc, #620]	; (800bed8 <_dtoa_r+0x618>)
 800bc6c:	f006 020f 	and.w	r2, r6, #15
 800bc70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	ec51 0b19 	vmov	r0, r1, d9
 800bc7c:	f7f4 fcc4 	bl	8000608 <__aeabi_dmul>
 800bc80:	1136      	asrs	r6, r6, #4
 800bc82:	4682      	mov	sl, r0
 800bc84:	468b      	mov	fp, r1
 800bc86:	2300      	movs	r3, #0
 800bc88:	2502      	movs	r5, #2
 800bc8a:	2e00      	cmp	r6, #0
 800bc8c:	d17a      	bne.n	800bd84 <_dtoa_r+0x4c4>
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1d3      	bne.n	800bc3a <_dtoa_r+0x37a>
 800bc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8082 	beq.w	800bd9e <_dtoa_r+0x4de>
 800bc9a:	4b91      	ldr	r3, [pc, #580]	; (800bee0 <_dtoa_r+0x620>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4650      	mov	r0, sl
 800bca0:	4659      	mov	r1, fp
 800bca2:	f7f4 ff23 	bl	8000aec <__aeabi_dcmplt>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d079      	beq.n	800bd9e <_dtoa_r+0x4de>
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d076      	beq.n	800bd9e <_dtoa_r+0x4de>
 800bcb0:	9b02      	ldr	r3, [sp, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	dd36      	ble.n	800bd24 <_dtoa_r+0x464>
 800bcb6:	9b00      	ldr	r3, [sp, #0]
 800bcb8:	4650      	mov	r0, sl
 800bcba:	4659      	mov	r1, fp
 800bcbc:	1e5f      	subs	r7, r3, #1
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4b88      	ldr	r3, [pc, #544]	; (800bee4 <_dtoa_r+0x624>)
 800bcc2:	f7f4 fca1 	bl	8000608 <__aeabi_dmul>
 800bcc6:	9e02      	ldr	r6, [sp, #8]
 800bcc8:	4682      	mov	sl, r0
 800bcca:	468b      	mov	fp, r1
 800bccc:	3501      	adds	r5, #1
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f7f4 fc30 	bl	8000534 <__aeabi_i2d>
 800bcd4:	4652      	mov	r2, sl
 800bcd6:	465b      	mov	r3, fp
 800bcd8:	f7f4 fc96 	bl	8000608 <__aeabi_dmul>
 800bcdc:	4b82      	ldr	r3, [pc, #520]	; (800bee8 <_dtoa_r+0x628>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	f7f4 fadc 	bl	800029c <__adddf3>
 800bce4:	46d0      	mov	r8, sl
 800bce6:	46d9      	mov	r9, fp
 800bce8:	4682      	mov	sl, r0
 800bcea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d158      	bne.n	800bda4 <_dtoa_r+0x4e4>
 800bcf2:	4b7e      	ldr	r3, [pc, #504]	; (800beec <_dtoa_r+0x62c>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	f7f4 facd 	bl	8000298 <__aeabi_dsub>
 800bcfe:	4652      	mov	r2, sl
 800bd00:	465b      	mov	r3, fp
 800bd02:	4680      	mov	r8, r0
 800bd04:	4689      	mov	r9, r1
 800bd06:	f7f4 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f040 8295 	bne.w	800c23a <_dtoa_r+0x97a>
 800bd10:	4652      	mov	r2, sl
 800bd12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fee7 	bl	8000aec <__aeabi_dcmplt>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f040 8289 	bne.w	800c236 <_dtoa_r+0x976>
 800bd24:	ec5b ab19 	vmov	sl, fp, d9
 800bd28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f2c0 8148 	blt.w	800bfc0 <_dtoa_r+0x700>
 800bd30:	9a00      	ldr	r2, [sp, #0]
 800bd32:	2a0e      	cmp	r2, #14
 800bd34:	f300 8144 	bgt.w	800bfc0 <_dtoa_r+0x700>
 800bd38:	4b67      	ldr	r3, [pc, #412]	; (800bed8 <_dtoa_r+0x618>)
 800bd3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f280 80d5 	bge.w	800bef4 <_dtoa_r+0x634>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f300 80d1 	bgt.w	800bef4 <_dtoa_r+0x634>
 800bd52:	f040 826f 	bne.w	800c234 <_dtoa_r+0x974>
 800bd56:	4b65      	ldr	r3, [pc, #404]	; (800beec <_dtoa_r+0x62c>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	f7f4 fc53 	bl	8000608 <__aeabi_dmul>
 800bd62:	4652      	mov	r2, sl
 800bd64:	465b      	mov	r3, fp
 800bd66:	f7f4 fed5 	bl	8000b14 <__aeabi_dcmpge>
 800bd6a:	9e03      	ldr	r6, [sp, #12]
 800bd6c:	4637      	mov	r7, r6
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f040 8245 	bne.w	800c1fe <_dtoa_r+0x93e>
 800bd74:	9d01      	ldr	r5, [sp, #4]
 800bd76:	2331      	movs	r3, #49	; 0x31
 800bd78:	f805 3b01 	strb.w	r3, [r5], #1
 800bd7c:	9b00      	ldr	r3, [sp, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	e240      	b.n	800c206 <_dtoa_r+0x946>
 800bd84:	07f2      	lsls	r2, r6, #31
 800bd86:	d505      	bpl.n	800bd94 <_dtoa_r+0x4d4>
 800bd88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd8c:	f7f4 fc3c 	bl	8000608 <__aeabi_dmul>
 800bd90:	3501      	adds	r5, #1
 800bd92:	2301      	movs	r3, #1
 800bd94:	1076      	asrs	r6, r6, #1
 800bd96:	3708      	adds	r7, #8
 800bd98:	e777      	b.n	800bc8a <_dtoa_r+0x3ca>
 800bd9a:	2502      	movs	r5, #2
 800bd9c:	e779      	b.n	800bc92 <_dtoa_r+0x3d2>
 800bd9e:	9f00      	ldr	r7, [sp, #0]
 800bda0:	9e03      	ldr	r6, [sp, #12]
 800bda2:	e794      	b.n	800bcce <_dtoa_r+0x40e>
 800bda4:	9901      	ldr	r1, [sp, #4]
 800bda6:	4b4c      	ldr	r3, [pc, #304]	; (800bed8 <_dtoa_r+0x618>)
 800bda8:	4431      	add	r1, r6
 800bdaa:	910d      	str	r1, [sp, #52]	; 0x34
 800bdac:	9908      	ldr	r1, [sp, #32]
 800bdae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdb6:	2900      	cmp	r1, #0
 800bdb8:	d043      	beq.n	800be42 <_dtoa_r+0x582>
 800bdba:	494d      	ldr	r1, [pc, #308]	; (800bef0 <_dtoa_r+0x630>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7f4 fd4d 	bl	800085c <__aeabi_ddiv>
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	f7f4 fa67 	bl	8000298 <__aeabi_dsub>
 800bdca:	9d01      	ldr	r5, [sp, #4]
 800bdcc:	4682      	mov	sl, r0
 800bdce:	468b      	mov	fp, r1
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f7f4 fec8 	bl	8000b68 <__aeabi_d2iz>
 800bdd8:	4606      	mov	r6, r0
 800bdda:	f7f4 fbab 	bl	8000534 <__aeabi_i2d>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	f7f4 fa57 	bl	8000298 <__aeabi_dsub>
 800bdea:	3630      	adds	r6, #48	; 0x30
 800bdec:	f805 6b01 	strb.w	r6, [r5], #1
 800bdf0:	4652      	mov	r2, sl
 800bdf2:	465b      	mov	r3, fp
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	f7f4 fe78 	bl	8000aec <__aeabi_dcmplt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d163      	bne.n	800bec8 <_dtoa_r+0x608>
 800be00:	4642      	mov	r2, r8
 800be02:	464b      	mov	r3, r9
 800be04:	4936      	ldr	r1, [pc, #216]	; (800bee0 <_dtoa_r+0x620>)
 800be06:	2000      	movs	r0, #0
 800be08:	f7f4 fa46 	bl	8000298 <__aeabi_dsub>
 800be0c:	4652      	mov	r2, sl
 800be0e:	465b      	mov	r3, fp
 800be10:	f7f4 fe6c 	bl	8000aec <__aeabi_dcmplt>
 800be14:	2800      	cmp	r0, #0
 800be16:	f040 80b5 	bne.w	800bf84 <_dtoa_r+0x6c4>
 800be1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1c:	429d      	cmp	r5, r3
 800be1e:	d081      	beq.n	800bd24 <_dtoa_r+0x464>
 800be20:	4b30      	ldr	r3, [pc, #192]	; (800bee4 <_dtoa_r+0x624>)
 800be22:	2200      	movs	r2, #0
 800be24:	4650      	mov	r0, sl
 800be26:	4659      	mov	r1, fp
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	4b2d      	ldr	r3, [pc, #180]	; (800bee4 <_dtoa_r+0x624>)
 800be2e:	4682      	mov	sl, r0
 800be30:	468b      	mov	fp, r1
 800be32:	4640      	mov	r0, r8
 800be34:	4649      	mov	r1, r9
 800be36:	2200      	movs	r2, #0
 800be38:	f7f4 fbe6 	bl	8000608 <__aeabi_dmul>
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	e7c6      	b.n	800bdd0 <_dtoa_r+0x510>
 800be42:	4650      	mov	r0, sl
 800be44:	4659      	mov	r1, fp
 800be46:	f7f4 fbdf 	bl	8000608 <__aeabi_dmul>
 800be4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be4c:	9d01      	ldr	r5, [sp, #4]
 800be4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be50:	4682      	mov	sl, r0
 800be52:	468b      	mov	fp, r1
 800be54:	4649      	mov	r1, r9
 800be56:	4640      	mov	r0, r8
 800be58:	f7f4 fe86 	bl	8000b68 <__aeabi_d2iz>
 800be5c:	4606      	mov	r6, r0
 800be5e:	f7f4 fb69 	bl	8000534 <__aeabi_i2d>
 800be62:	3630      	adds	r6, #48	; 0x30
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4640      	mov	r0, r8
 800be6a:	4649      	mov	r1, r9
 800be6c:	f7f4 fa14 	bl	8000298 <__aeabi_dsub>
 800be70:	f805 6b01 	strb.w	r6, [r5], #1
 800be74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be76:	429d      	cmp	r5, r3
 800be78:	4680      	mov	r8, r0
 800be7a:	4689      	mov	r9, r1
 800be7c:	f04f 0200 	mov.w	r2, #0
 800be80:	d124      	bne.n	800becc <_dtoa_r+0x60c>
 800be82:	4b1b      	ldr	r3, [pc, #108]	; (800bef0 <_dtoa_r+0x630>)
 800be84:	4650      	mov	r0, sl
 800be86:	4659      	mov	r1, fp
 800be88:	f7f4 fa08 	bl	800029c <__adddf3>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4640      	mov	r0, r8
 800be92:	4649      	mov	r1, r9
 800be94:	f7f4 fe48 	bl	8000b28 <__aeabi_dcmpgt>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d173      	bne.n	800bf84 <_dtoa_r+0x6c4>
 800be9c:	4652      	mov	r2, sl
 800be9e:	465b      	mov	r3, fp
 800bea0:	4913      	ldr	r1, [pc, #76]	; (800bef0 <_dtoa_r+0x630>)
 800bea2:	2000      	movs	r0, #0
 800bea4:	f7f4 f9f8 	bl	8000298 <__aeabi_dsub>
 800bea8:	4602      	mov	r2, r0
 800beaa:	460b      	mov	r3, r1
 800beac:	4640      	mov	r0, r8
 800beae:	4649      	mov	r1, r9
 800beb0:	f7f4 fe1c 	bl	8000aec <__aeabi_dcmplt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	f43f af35 	beq.w	800bd24 <_dtoa_r+0x464>
 800beba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bebc:	1e6b      	subs	r3, r5, #1
 800bebe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bec4:	2b30      	cmp	r3, #48	; 0x30
 800bec6:	d0f8      	beq.n	800beba <_dtoa_r+0x5fa>
 800bec8:	9700      	str	r7, [sp, #0]
 800beca:	e049      	b.n	800bf60 <_dtoa_r+0x6a0>
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <_dtoa_r+0x624>)
 800bece:	f7f4 fb9b 	bl	8000608 <__aeabi_dmul>
 800bed2:	4680      	mov	r8, r0
 800bed4:	4689      	mov	r9, r1
 800bed6:	e7bd      	b.n	800be54 <_dtoa_r+0x594>
 800bed8:	0800f438 	.word	0x0800f438
 800bedc:	0800f410 	.word	0x0800f410
 800bee0:	3ff00000 	.word	0x3ff00000
 800bee4:	40240000 	.word	0x40240000
 800bee8:	401c0000 	.word	0x401c0000
 800beec:	40140000 	.word	0x40140000
 800bef0:	3fe00000 	.word	0x3fe00000
 800bef4:	9d01      	ldr	r5, [sp, #4]
 800bef6:	4656      	mov	r6, sl
 800bef8:	465f      	mov	r7, fp
 800befa:	4642      	mov	r2, r8
 800befc:	464b      	mov	r3, r9
 800befe:	4630      	mov	r0, r6
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 fcab 	bl	800085c <__aeabi_ddiv>
 800bf06:	f7f4 fe2f 	bl	8000b68 <__aeabi_d2iz>
 800bf0a:	4682      	mov	sl, r0
 800bf0c:	f7f4 fb12 	bl	8000534 <__aeabi_i2d>
 800bf10:	4642      	mov	r2, r8
 800bf12:	464b      	mov	r3, r9
 800bf14:	f7f4 fb78 	bl	8000608 <__aeabi_dmul>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	4639      	mov	r1, r7
 800bf20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf24:	f7f4 f9b8 	bl	8000298 <__aeabi_dsub>
 800bf28:	f805 6b01 	strb.w	r6, [r5], #1
 800bf2c:	9e01      	ldr	r6, [sp, #4]
 800bf2e:	9f03      	ldr	r7, [sp, #12]
 800bf30:	1bae      	subs	r6, r5, r6
 800bf32:	42b7      	cmp	r7, r6
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	d135      	bne.n	800bfa6 <_dtoa_r+0x6e6>
 800bf3a:	f7f4 f9af 	bl	800029c <__adddf3>
 800bf3e:	4642      	mov	r2, r8
 800bf40:	464b      	mov	r3, r9
 800bf42:	4606      	mov	r6, r0
 800bf44:	460f      	mov	r7, r1
 800bf46:	f7f4 fdef 	bl	8000b28 <__aeabi_dcmpgt>
 800bf4a:	b9d0      	cbnz	r0, 800bf82 <_dtoa_r+0x6c2>
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	464b      	mov	r3, r9
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf58:	b110      	cbz	r0, 800bf60 <_dtoa_r+0x6a0>
 800bf5a:	f01a 0f01 	tst.w	sl, #1
 800bf5e:	d110      	bne.n	800bf82 <_dtoa_r+0x6c2>
 800bf60:	4620      	mov	r0, r4
 800bf62:	ee18 1a10 	vmov	r1, s16
 800bf66:	f000 fb0d 	bl	800c584 <_Bfree>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	9800      	ldr	r0, [sp, #0]
 800bf6e:	702b      	strb	r3, [r5, #0]
 800bf70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf72:	3001      	adds	r0, #1
 800bf74:	6018      	str	r0, [r3, #0]
 800bf76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f43f acf1 	beq.w	800b960 <_dtoa_r+0xa0>
 800bf7e:	601d      	str	r5, [r3, #0]
 800bf80:	e4ee      	b.n	800b960 <_dtoa_r+0xa0>
 800bf82:	9f00      	ldr	r7, [sp, #0]
 800bf84:	462b      	mov	r3, r5
 800bf86:	461d      	mov	r5, r3
 800bf88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf8c:	2a39      	cmp	r2, #57	; 0x39
 800bf8e:	d106      	bne.n	800bf9e <_dtoa_r+0x6de>
 800bf90:	9a01      	ldr	r2, [sp, #4]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d1f7      	bne.n	800bf86 <_dtoa_r+0x6c6>
 800bf96:	9901      	ldr	r1, [sp, #4]
 800bf98:	2230      	movs	r2, #48	; 0x30
 800bf9a:	3701      	adds	r7, #1
 800bf9c:	700a      	strb	r2, [r1, #0]
 800bf9e:	781a      	ldrb	r2, [r3, #0]
 800bfa0:	3201      	adds	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	e790      	b.n	800bec8 <_dtoa_r+0x608>
 800bfa6:	4ba6      	ldr	r3, [pc, #664]	; (800c240 <_dtoa_r+0x980>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f7f4 fb2d 	bl	8000608 <__aeabi_dmul>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460f      	mov	r7, r1
 800bfb6:	f7f4 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d09d      	beq.n	800befa <_dtoa_r+0x63a>
 800bfbe:	e7cf      	b.n	800bf60 <_dtoa_r+0x6a0>
 800bfc0:	9a08      	ldr	r2, [sp, #32]
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	f000 80d7 	beq.w	800c176 <_dtoa_r+0x8b6>
 800bfc8:	9a06      	ldr	r2, [sp, #24]
 800bfca:	2a01      	cmp	r2, #1
 800bfcc:	f300 80ba 	bgt.w	800c144 <_dtoa_r+0x884>
 800bfd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfd2:	2a00      	cmp	r2, #0
 800bfd4:	f000 80b2 	beq.w	800c13c <_dtoa_r+0x87c>
 800bfd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfdc:	9e07      	ldr	r6, [sp, #28]
 800bfde:	9d04      	ldr	r5, [sp, #16]
 800bfe0:	9a04      	ldr	r2, [sp, #16]
 800bfe2:	441a      	add	r2, r3
 800bfe4:	9204      	str	r2, [sp, #16]
 800bfe6:	9a05      	ldr	r2, [sp, #20]
 800bfe8:	2101      	movs	r1, #1
 800bfea:	441a      	add	r2, r3
 800bfec:	4620      	mov	r0, r4
 800bfee:	9205      	str	r2, [sp, #20]
 800bff0:	f000 fb80 	bl	800c6f4 <__i2b>
 800bff4:	4607      	mov	r7, r0
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	dd0c      	ble.n	800c014 <_dtoa_r+0x754>
 800bffa:	9b05      	ldr	r3, [sp, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dd09      	ble.n	800c014 <_dtoa_r+0x754>
 800c000:	42ab      	cmp	r3, r5
 800c002:	9a04      	ldr	r2, [sp, #16]
 800c004:	bfa8      	it	ge
 800c006:	462b      	movge	r3, r5
 800c008:	1ad2      	subs	r2, r2, r3
 800c00a:	9204      	str	r2, [sp, #16]
 800c00c:	9a05      	ldr	r2, [sp, #20]
 800c00e:	1aed      	subs	r5, r5, r3
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	9305      	str	r3, [sp, #20]
 800c014:	9b07      	ldr	r3, [sp, #28]
 800c016:	b31b      	cbz	r3, 800c060 <_dtoa_r+0x7a0>
 800c018:	9b08      	ldr	r3, [sp, #32]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80af 	beq.w	800c17e <_dtoa_r+0x8be>
 800c020:	2e00      	cmp	r6, #0
 800c022:	dd13      	ble.n	800c04c <_dtoa_r+0x78c>
 800c024:	4639      	mov	r1, r7
 800c026:	4632      	mov	r2, r6
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fc23 	bl	800c874 <__pow5mult>
 800c02e:	ee18 2a10 	vmov	r2, s16
 800c032:	4601      	mov	r1, r0
 800c034:	4607      	mov	r7, r0
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fb72 	bl	800c720 <__multiply>
 800c03c:	ee18 1a10 	vmov	r1, s16
 800c040:	4680      	mov	r8, r0
 800c042:	4620      	mov	r0, r4
 800c044:	f000 fa9e 	bl	800c584 <_Bfree>
 800c048:	ee08 8a10 	vmov	s16, r8
 800c04c:	9b07      	ldr	r3, [sp, #28]
 800c04e:	1b9a      	subs	r2, r3, r6
 800c050:	d006      	beq.n	800c060 <_dtoa_r+0x7a0>
 800c052:	ee18 1a10 	vmov	r1, s16
 800c056:	4620      	mov	r0, r4
 800c058:	f000 fc0c 	bl	800c874 <__pow5mult>
 800c05c:	ee08 0a10 	vmov	s16, r0
 800c060:	2101      	movs	r1, #1
 800c062:	4620      	mov	r0, r4
 800c064:	f000 fb46 	bl	800c6f4 <__i2b>
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	4606      	mov	r6, r0
 800c06e:	f340 8088 	ble.w	800c182 <_dtoa_r+0x8c2>
 800c072:	461a      	mov	r2, r3
 800c074:	4601      	mov	r1, r0
 800c076:	4620      	mov	r0, r4
 800c078:	f000 fbfc 	bl	800c874 <__pow5mult>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	4606      	mov	r6, r0
 800c082:	f340 8081 	ble.w	800c188 <_dtoa_r+0x8c8>
 800c086:	f04f 0800 	mov.w	r8, #0
 800c08a:	6933      	ldr	r3, [r6, #16]
 800c08c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c090:	6918      	ldr	r0, [r3, #16]
 800c092:	f000 fadf 	bl	800c654 <__hi0bits>
 800c096:	f1c0 0020 	rsb	r0, r0, #32
 800c09a:	9b05      	ldr	r3, [sp, #20]
 800c09c:	4418      	add	r0, r3
 800c09e:	f010 001f 	ands.w	r0, r0, #31
 800c0a2:	f000 8092 	beq.w	800c1ca <_dtoa_r+0x90a>
 800c0a6:	f1c0 0320 	rsb	r3, r0, #32
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	f340 808a 	ble.w	800c1c4 <_dtoa_r+0x904>
 800c0b0:	f1c0 001c 	rsb	r0, r0, #28
 800c0b4:	9b04      	ldr	r3, [sp, #16]
 800c0b6:	4403      	add	r3, r0
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	9b05      	ldr	r3, [sp, #20]
 800c0bc:	4403      	add	r3, r0
 800c0be:	4405      	add	r5, r0
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	9b04      	ldr	r3, [sp, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd07      	ble.n	800c0d8 <_dtoa_r+0x818>
 800c0c8:	ee18 1a10 	vmov	r1, s16
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f000 fc2a 	bl	800c928 <__lshift>
 800c0d4:	ee08 0a10 	vmov	s16, r0
 800c0d8:	9b05      	ldr	r3, [sp, #20]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dd05      	ble.n	800c0ea <_dtoa_r+0x82a>
 800c0de:	4631      	mov	r1, r6
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 fc20 	bl	800c928 <__lshift>
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d06e      	beq.n	800c1ce <_dtoa_r+0x90e>
 800c0f0:	ee18 0a10 	vmov	r0, s16
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	f000 fc87 	bl	800ca08 <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	da67      	bge.n	800c1ce <_dtoa_r+0x90e>
 800c0fe:	9b00      	ldr	r3, [sp, #0]
 800c100:	3b01      	subs	r3, #1
 800c102:	ee18 1a10 	vmov	r1, s16
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	220a      	movs	r2, #10
 800c10a:	2300      	movs	r3, #0
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fa5b 	bl	800c5c8 <__multadd>
 800c112:	9b08      	ldr	r3, [sp, #32]
 800c114:	ee08 0a10 	vmov	s16, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 81b1 	beq.w	800c480 <_dtoa_r+0xbc0>
 800c11e:	2300      	movs	r3, #0
 800c120:	4639      	mov	r1, r7
 800c122:	220a      	movs	r2, #10
 800c124:	4620      	mov	r0, r4
 800c126:	f000 fa4f 	bl	800c5c8 <__multadd>
 800c12a:	9b02      	ldr	r3, [sp, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	4607      	mov	r7, r0
 800c130:	f300 808e 	bgt.w	800c250 <_dtoa_r+0x990>
 800c134:	9b06      	ldr	r3, [sp, #24]
 800c136:	2b02      	cmp	r3, #2
 800c138:	dc51      	bgt.n	800c1de <_dtoa_r+0x91e>
 800c13a:	e089      	b.n	800c250 <_dtoa_r+0x990>
 800c13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c13e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c142:	e74b      	b.n	800bfdc <_dtoa_r+0x71c>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	1e5e      	subs	r6, r3, #1
 800c148:	9b07      	ldr	r3, [sp, #28]
 800c14a:	42b3      	cmp	r3, r6
 800c14c:	bfbf      	itttt	lt
 800c14e:	9b07      	ldrlt	r3, [sp, #28]
 800c150:	9607      	strlt	r6, [sp, #28]
 800c152:	1af2      	sublt	r2, r6, r3
 800c154:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c156:	bfb6      	itet	lt
 800c158:	189b      	addlt	r3, r3, r2
 800c15a:	1b9e      	subge	r6, r3, r6
 800c15c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	bfb8      	it	lt
 800c162:	2600      	movlt	r6, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfb7      	itett	lt
 800c168:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c16c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c170:	1a9d      	sublt	r5, r3, r2
 800c172:	2300      	movlt	r3, #0
 800c174:	e734      	b.n	800bfe0 <_dtoa_r+0x720>
 800c176:	9e07      	ldr	r6, [sp, #28]
 800c178:	9d04      	ldr	r5, [sp, #16]
 800c17a:	9f08      	ldr	r7, [sp, #32]
 800c17c:	e73b      	b.n	800bff6 <_dtoa_r+0x736>
 800c17e:	9a07      	ldr	r2, [sp, #28]
 800c180:	e767      	b.n	800c052 <_dtoa_r+0x792>
 800c182:	9b06      	ldr	r3, [sp, #24]
 800c184:	2b01      	cmp	r3, #1
 800c186:	dc18      	bgt.n	800c1ba <_dtoa_r+0x8fa>
 800c188:	f1ba 0f00 	cmp.w	sl, #0
 800c18c:	d115      	bne.n	800c1ba <_dtoa_r+0x8fa>
 800c18e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c192:	b993      	cbnz	r3, 800c1ba <_dtoa_r+0x8fa>
 800c194:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c198:	0d1b      	lsrs	r3, r3, #20
 800c19a:	051b      	lsls	r3, r3, #20
 800c19c:	b183      	cbz	r3, 800c1c0 <_dtoa_r+0x900>
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	9b05      	ldr	r3, [sp, #20]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	f04f 0801 	mov.w	r8, #1
 800c1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f47f af6a 	bne.w	800c08a <_dtoa_r+0x7ca>
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e76f      	b.n	800c09a <_dtoa_r+0x7da>
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	e7f6      	b.n	800c1ae <_dtoa_r+0x8ee>
 800c1c0:	4698      	mov	r8, r3
 800c1c2:	e7f4      	b.n	800c1ae <_dtoa_r+0x8ee>
 800c1c4:	f43f af7d 	beq.w	800c0c2 <_dtoa_r+0x802>
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	301c      	adds	r0, #28
 800c1cc:	e772      	b.n	800c0b4 <_dtoa_r+0x7f4>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	dc37      	bgt.n	800c244 <_dtoa_r+0x984>
 800c1d4:	9b06      	ldr	r3, [sp, #24]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	dd34      	ble.n	800c244 <_dtoa_r+0x984>
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	9302      	str	r3, [sp, #8]
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	b96b      	cbnz	r3, 800c1fe <_dtoa_r+0x93e>
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	2205      	movs	r2, #5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f9ee 	bl	800c5c8 <__multadd>
 800c1ec:	4601      	mov	r1, r0
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	ee18 0a10 	vmov	r0, s16
 800c1f4:	f000 fc08 	bl	800ca08 <__mcmp>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f73f adbb 	bgt.w	800bd74 <_dtoa_r+0x4b4>
 800c1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c200:	9d01      	ldr	r5, [sp, #4]
 800c202:	43db      	mvns	r3, r3
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	f04f 0800 	mov.w	r8, #0
 800c20a:	4631      	mov	r1, r6
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 f9b9 	bl	800c584 <_Bfree>
 800c212:	2f00      	cmp	r7, #0
 800c214:	f43f aea4 	beq.w	800bf60 <_dtoa_r+0x6a0>
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	d005      	beq.n	800c22a <_dtoa_r+0x96a>
 800c21e:	45b8      	cmp	r8, r7
 800c220:	d003      	beq.n	800c22a <_dtoa_r+0x96a>
 800c222:	4641      	mov	r1, r8
 800c224:	4620      	mov	r0, r4
 800c226:	f000 f9ad 	bl	800c584 <_Bfree>
 800c22a:	4639      	mov	r1, r7
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 f9a9 	bl	800c584 <_Bfree>
 800c232:	e695      	b.n	800bf60 <_dtoa_r+0x6a0>
 800c234:	2600      	movs	r6, #0
 800c236:	4637      	mov	r7, r6
 800c238:	e7e1      	b.n	800c1fe <_dtoa_r+0x93e>
 800c23a:	9700      	str	r7, [sp, #0]
 800c23c:	4637      	mov	r7, r6
 800c23e:	e599      	b.n	800bd74 <_dtoa_r+0x4b4>
 800c240:	40240000 	.word	0x40240000
 800c244:	9b08      	ldr	r3, [sp, #32]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 80ca 	beq.w	800c3e0 <_dtoa_r+0xb20>
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	9302      	str	r3, [sp, #8]
 800c250:	2d00      	cmp	r5, #0
 800c252:	dd05      	ble.n	800c260 <_dtoa_r+0x9a0>
 800c254:	4639      	mov	r1, r7
 800c256:	462a      	mov	r2, r5
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fb65 	bl	800c928 <__lshift>
 800c25e:	4607      	mov	r7, r0
 800c260:	f1b8 0f00 	cmp.w	r8, #0
 800c264:	d05b      	beq.n	800c31e <_dtoa_r+0xa5e>
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 f94b 	bl	800c504 <_Balloc>
 800c26e:	4605      	mov	r5, r0
 800c270:	b928      	cbnz	r0, 800c27e <_dtoa_r+0x9be>
 800c272:	4b87      	ldr	r3, [pc, #540]	; (800c490 <_dtoa_r+0xbd0>)
 800c274:	4602      	mov	r2, r0
 800c276:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c27a:	f7ff bb3b 	b.w	800b8f4 <_dtoa_r+0x34>
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	3202      	adds	r2, #2
 800c282:	0092      	lsls	r2, r2, #2
 800c284:	f107 010c 	add.w	r1, r7, #12
 800c288:	300c      	adds	r0, #12
 800c28a:	f7fe fc71 	bl	800ab70 <memcpy>
 800c28e:	2201      	movs	r2, #1
 800c290:	4629      	mov	r1, r5
 800c292:	4620      	mov	r0, r4
 800c294:	f000 fb48 	bl	800c928 <__lshift>
 800c298:	9b01      	ldr	r3, [sp, #4]
 800c29a:	f103 0901 	add.w	r9, r3, #1
 800c29e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	9305      	str	r3, [sp, #20]
 800c2a6:	f00a 0301 	and.w	r3, sl, #1
 800c2aa:	46b8      	mov	r8, r7
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	4631      	mov	r1, r6
 800c2b2:	ee18 0a10 	vmov	r0, s16
 800c2b6:	f7ff fa75 	bl	800b7a4 <quorem>
 800c2ba:	4641      	mov	r1, r8
 800c2bc:	9002      	str	r0, [sp, #8]
 800c2be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c2c2:	ee18 0a10 	vmov	r0, s16
 800c2c6:	f000 fb9f 	bl	800ca08 <__mcmp>
 800c2ca:	463a      	mov	r2, r7
 800c2cc:	9003      	str	r0, [sp, #12]
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fbb5 	bl	800ca40 <__mdiff>
 800c2d6:	68c2      	ldr	r2, [r0, #12]
 800c2d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c2dc:	4605      	mov	r5, r0
 800c2de:	bb02      	cbnz	r2, 800c322 <_dtoa_r+0xa62>
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	ee18 0a10 	vmov	r0, s16
 800c2e6:	f000 fb8f 	bl	800ca08 <__mcmp>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	9207      	str	r2, [sp, #28]
 800c2f2:	f000 f947 	bl	800c584 <_Bfree>
 800c2f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c2fa:	ea43 0102 	orr.w	r1, r3, r2
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	430b      	orrs	r3, r1
 800c302:	464d      	mov	r5, r9
 800c304:	d10f      	bne.n	800c326 <_dtoa_r+0xa66>
 800c306:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c30a:	d02a      	beq.n	800c362 <_dtoa_r+0xaa2>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dd02      	ble.n	800c318 <_dtoa_r+0xa58>
 800c312:	9b02      	ldr	r3, [sp, #8]
 800c314:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c318:	f88b a000 	strb.w	sl, [fp]
 800c31c:	e775      	b.n	800c20a <_dtoa_r+0x94a>
 800c31e:	4638      	mov	r0, r7
 800c320:	e7ba      	b.n	800c298 <_dtoa_r+0x9d8>
 800c322:	2201      	movs	r2, #1
 800c324:	e7e2      	b.n	800c2ec <_dtoa_r+0xa2c>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	db04      	blt.n	800c336 <_dtoa_r+0xa76>
 800c32c:	9906      	ldr	r1, [sp, #24]
 800c32e:	430b      	orrs	r3, r1
 800c330:	9904      	ldr	r1, [sp, #16]
 800c332:	430b      	orrs	r3, r1
 800c334:	d122      	bne.n	800c37c <_dtoa_r+0xabc>
 800c336:	2a00      	cmp	r2, #0
 800c338:	ddee      	ble.n	800c318 <_dtoa_r+0xa58>
 800c33a:	ee18 1a10 	vmov	r1, s16
 800c33e:	2201      	movs	r2, #1
 800c340:	4620      	mov	r0, r4
 800c342:	f000 faf1 	bl	800c928 <__lshift>
 800c346:	4631      	mov	r1, r6
 800c348:	ee08 0a10 	vmov	s16, r0
 800c34c:	f000 fb5c 	bl	800ca08 <__mcmp>
 800c350:	2800      	cmp	r0, #0
 800c352:	dc03      	bgt.n	800c35c <_dtoa_r+0xa9c>
 800c354:	d1e0      	bne.n	800c318 <_dtoa_r+0xa58>
 800c356:	f01a 0f01 	tst.w	sl, #1
 800c35a:	d0dd      	beq.n	800c318 <_dtoa_r+0xa58>
 800c35c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c360:	d1d7      	bne.n	800c312 <_dtoa_r+0xa52>
 800c362:	2339      	movs	r3, #57	; 0x39
 800c364:	f88b 3000 	strb.w	r3, [fp]
 800c368:	462b      	mov	r3, r5
 800c36a:	461d      	mov	r5, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c372:	2a39      	cmp	r2, #57	; 0x39
 800c374:	d071      	beq.n	800c45a <_dtoa_r+0xb9a>
 800c376:	3201      	adds	r2, #1
 800c378:	701a      	strb	r2, [r3, #0]
 800c37a:	e746      	b.n	800c20a <_dtoa_r+0x94a>
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	dd07      	ble.n	800c390 <_dtoa_r+0xad0>
 800c380:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c384:	d0ed      	beq.n	800c362 <_dtoa_r+0xaa2>
 800c386:	f10a 0301 	add.w	r3, sl, #1
 800c38a:	f88b 3000 	strb.w	r3, [fp]
 800c38e:	e73c      	b.n	800c20a <_dtoa_r+0x94a>
 800c390:	9b05      	ldr	r3, [sp, #20]
 800c392:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c396:	4599      	cmp	r9, r3
 800c398:	d047      	beq.n	800c42a <_dtoa_r+0xb6a>
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	2300      	movs	r3, #0
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f910 	bl	800c5c8 <__multadd>
 800c3a8:	45b8      	cmp	r8, r7
 800c3aa:	ee08 0a10 	vmov	s16, r0
 800c3ae:	f04f 0300 	mov.w	r3, #0
 800c3b2:	f04f 020a 	mov.w	r2, #10
 800c3b6:	4641      	mov	r1, r8
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	d106      	bne.n	800c3ca <_dtoa_r+0xb0a>
 800c3bc:	f000 f904 	bl	800c5c8 <__multadd>
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	f109 0901 	add.w	r9, r9, #1
 800c3c8:	e772      	b.n	800c2b0 <_dtoa_r+0x9f0>
 800c3ca:	f000 f8fd 	bl	800c5c8 <__multadd>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	4680      	mov	r8, r0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	220a      	movs	r2, #10
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 f8f6 	bl	800c5c8 <__multadd>
 800c3dc:	4607      	mov	r7, r0
 800c3de:	e7f1      	b.n	800c3c4 <_dtoa_r+0xb04>
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	9302      	str	r3, [sp, #8]
 800c3e4:	9d01      	ldr	r5, [sp, #4]
 800c3e6:	ee18 0a10 	vmov	r0, s16
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	f7ff f9da 	bl	800b7a4 <quorem>
 800c3f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c3f4:	9b01      	ldr	r3, [sp, #4]
 800c3f6:	f805 ab01 	strb.w	sl, [r5], #1
 800c3fa:	1aea      	subs	r2, r5, r3
 800c3fc:	9b02      	ldr	r3, [sp, #8]
 800c3fe:	4293      	cmp	r3, r2
 800c400:	dd09      	ble.n	800c416 <_dtoa_r+0xb56>
 800c402:	ee18 1a10 	vmov	r1, s16
 800c406:	2300      	movs	r3, #0
 800c408:	220a      	movs	r2, #10
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f8dc 	bl	800c5c8 <__multadd>
 800c410:	ee08 0a10 	vmov	s16, r0
 800c414:	e7e7      	b.n	800c3e6 <_dtoa_r+0xb26>
 800c416:	9b02      	ldr	r3, [sp, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfc8      	it	gt
 800c41c:	461d      	movgt	r5, r3
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	bfd8      	it	le
 800c422:	2501      	movle	r5, #1
 800c424:	441d      	add	r5, r3
 800c426:	f04f 0800 	mov.w	r8, #0
 800c42a:	ee18 1a10 	vmov	r1, s16
 800c42e:	2201      	movs	r2, #1
 800c430:	4620      	mov	r0, r4
 800c432:	f000 fa79 	bl	800c928 <__lshift>
 800c436:	4631      	mov	r1, r6
 800c438:	ee08 0a10 	vmov	s16, r0
 800c43c:	f000 fae4 	bl	800ca08 <__mcmp>
 800c440:	2800      	cmp	r0, #0
 800c442:	dc91      	bgt.n	800c368 <_dtoa_r+0xaa8>
 800c444:	d102      	bne.n	800c44c <_dtoa_r+0xb8c>
 800c446:	f01a 0f01 	tst.w	sl, #1
 800c44a:	d18d      	bne.n	800c368 <_dtoa_r+0xaa8>
 800c44c:	462b      	mov	r3, r5
 800c44e:	461d      	mov	r5, r3
 800c450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c454:	2a30      	cmp	r2, #48	; 0x30
 800c456:	d0fa      	beq.n	800c44e <_dtoa_r+0xb8e>
 800c458:	e6d7      	b.n	800c20a <_dtoa_r+0x94a>
 800c45a:	9a01      	ldr	r2, [sp, #4]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d184      	bne.n	800c36a <_dtoa_r+0xaaa>
 800c460:	9b00      	ldr	r3, [sp, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	2331      	movs	r3, #49	; 0x31
 800c468:	7013      	strb	r3, [r2, #0]
 800c46a:	e6ce      	b.n	800c20a <_dtoa_r+0x94a>
 800c46c:	4b09      	ldr	r3, [pc, #36]	; (800c494 <_dtoa_r+0xbd4>)
 800c46e:	f7ff ba95 	b.w	800b99c <_dtoa_r+0xdc>
 800c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c474:	2b00      	cmp	r3, #0
 800c476:	f47f aa6e 	bne.w	800b956 <_dtoa_r+0x96>
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <_dtoa_r+0xbd8>)
 800c47c:	f7ff ba8e 	b.w	800b99c <_dtoa_r+0xdc>
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dcae      	bgt.n	800c3e4 <_dtoa_r+0xb24>
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	f73f aea8 	bgt.w	800c1de <_dtoa_r+0x91e>
 800c48e:	e7a9      	b.n	800c3e4 <_dtoa_r+0xb24>
 800c490:	0800f397 	.word	0x0800f397
 800c494:	0800f2b8 	.word	0x0800f2b8
 800c498:	0800f318 	.word	0x0800f318

0800c49c <fiprintf>:
 800c49c:	b40e      	push	{r1, r2, r3}
 800c49e:	b503      	push	{r0, r1, lr}
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	ab03      	add	r3, sp, #12
 800c4a4:	4805      	ldr	r0, [pc, #20]	; (800c4bc <fiprintf+0x20>)
 800c4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	f000 fbed 	bl	800cc8c <_vfiprintf_r>
 800c4b2:	b002      	add	sp, #8
 800c4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b8:	b003      	add	sp, #12
 800c4ba:	4770      	bx	lr
 800c4bc:	20000010 	.word	0x20000010

0800c4c0 <_localeconv_r>:
 800c4c0:	4800      	ldr	r0, [pc, #0]	; (800c4c4 <_localeconv_r+0x4>)
 800c4c2:	4770      	bx	lr
 800c4c4:	20000164 	.word	0x20000164

0800c4c8 <__ascii_mbtowc>:
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	b901      	cbnz	r1, 800c4ce <__ascii_mbtowc+0x6>
 800c4cc:	a901      	add	r1, sp, #4
 800c4ce:	b142      	cbz	r2, 800c4e2 <__ascii_mbtowc+0x1a>
 800c4d0:	b14b      	cbz	r3, 800c4e6 <__ascii_mbtowc+0x1e>
 800c4d2:	7813      	ldrb	r3, [r2, #0]
 800c4d4:	600b      	str	r3, [r1, #0]
 800c4d6:	7812      	ldrb	r2, [r2, #0]
 800c4d8:	1e10      	subs	r0, r2, #0
 800c4da:	bf18      	it	ne
 800c4dc:	2001      	movne	r0, #1
 800c4de:	b002      	add	sp, #8
 800c4e0:	4770      	bx	lr
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	e7fb      	b.n	800c4de <__ascii_mbtowc+0x16>
 800c4e6:	f06f 0001 	mvn.w	r0, #1
 800c4ea:	e7f8      	b.n	800c4de <__ascii_mbtowc+0x16>

0800c4ec <__malloc_lock>:
 800c4ec:	4801      	ldr	r0, [pc, #4]	; (800c4f4 <__malloc_lock+0x8>)
 800c4ee:	f000 bf8b 	b.w	800d408 <__retarget_lock_acquire_recursive>
 800c4f2:	bf00      	nop
 800c4f4:	20000954 	.word	0x20000954

0800c4f8 <__malloc_unlock>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__malloc_unlock+0x8>)
 800c4fa:	f000 bf86 	b.w	800d40a <__retarget_lock_release_recursive>
 800c4fe:	bf00      	nop
 800c500:	20000954 	.word	0x20000954

0800c504 <_Balloc>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	b976      	cbnz	r6, 800c52c <_Balloc+0x28>
 800c50e:	2010      	movs	r0, #16
 800c510:	f7fe fb26 	bl	800ab60 <malloc>
 800c514:	4602      	mov	r2, r0
 800c516:	6260      	str	r0, [r4, #36]	; 0x24
 800c518:	b920      	cbnz	r0, 800c524 <_Balloc+0x20>
 800c51a:	4b18      	ldr	r3, [pc, #96]	; (800c57c <_Balloc+0x78>)
 800c51c:	4818      	ldr	r0, [pc, #96]	; (800c580 <_Balloc+0x7c>)
 800c51e:	2166      	movs	r1, #102	; 0x66
 800c520:	f7ff f922 	bl	800b768 <__assert_func>
 800c524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c528:	6006      	str	r6, [r0, #0]
 800c52a:	60c6      	str	r6, [r0, #12]
 800c52c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c52e:	68f3      	ldr	r3, [r6, #12]
 800c530:	b183      	cbz	r3, 800c554 <_Balloc+0x50>
 800c532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c53a:	b9b8      	cbnz	r0, 800c56c <_Balloc+0x68>
 800c53c:	2101      	movs	r1, #1
 800c53e:	fa01 f605 	lsl.w	r6, r1, r5
 800c542:	1d72      	adds	r2, r6, #5
 800c544:	0092      	lsls	r2, r2, #2
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fb60 	bl	800cc0c <_calloc_r>
 800c54c:	b160      	cbz	r0, 800c568 <_Balloc+0x64>
 800c54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c552:	e00e      	b.n	800c572 <_Balloc+0x6e>
 800c554:	2221      	movs	r2, #33	; 0x21
 800c556:	2104      	movs	r1, #4
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fb57 	bl	800cc0c <_calloc_r>
 800c55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c560:	60f0      	str	r0, [r6, #12]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e4      	bne.n	800c532 <_Balloc+0x2e>
 800c568:	2000      	movs	r0, #0
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	6802      	ldr	r2, [r0, #0]
 800c56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c572:	2300      	movs	r3, #0
 800c574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c578:	e7f7      	b.n	800c56a <_Balloc+0x66>
 800c57a:	bf00      	nop
 800c57c:	0800f325 	.word	0x0800f325
 800c580:	0800f3b2 	.word	0x0800f3b2

0800c584 <_Bfree>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c588:	4605      	mov	r5, r0
 800c58a:	460c      	mov	r4, r1
 800c58c:	b976      	cbnz	r6, 800c5ac <_Bfree+0x28>
 800c58e:	2010      	movs	r0, #16
 800c590:	f7fe fae6 	bl	800ab60 <malloc>
 800c594:	4602      	mov	r2, r0
 800c596:	6268      	str	r0, [r5, #36]	; 0x24
 800c598:	b920      	cbnz	r0, 800c5a4 <_Bfree+0x20>
 800c59a:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <_Bfree+0x3c>)
 800c59c:	4809      	ldr	r0, [pc, #36]	; (800c5c4 <_Bfree+0x40>)
 800c59e:	218a      	movs	r1, #138	; 0x8a
 800c5a0:	f7ff f8e2 	bl	800b768 <__assert_func>
 800c5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a8:	6006      	str	r6, [r0, #0]
 800c5aa:	60c6      	str	r6, [r0, #12]
 800c5ac:	b13c      	cbz	r4, 800c5be <_Bfree+0x3a>
 800c5ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5b0:	6862      	ldr	r2, [r4, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5b8:	6021      	str	r1, [r4, #0]
 800c5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	0800f325 	.word	0x0800f325
 800c5c4:	0800f3b2 	.word	0x0800f3b2

0800c5c8 <__multadd>:
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	690d      	ldr	r5, [r1, #16]
 800c5ce:	4607      	mov	r7, r0
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	461e      	mov	r6, r3
 800c5d4:	f101 0c14 	add.w	ip, r1, #20
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f8dc 3000 	ldr.w	r3, [ip]
 800c5de:	b299      	uxth	r1, r3
 800c5e0:	fb02 6101 	mla	r1, r2, r1, r6
 800c5e4:	0c1e      	lsrs	r6, r3, #16
 800c5e6:	0c0b      	lsrs	r3, r1, #16
 800c5e8:	fb02 3306 	mla	r3, r2, r6, r3
 800c5ec:	b289      	uxth	r1, r1
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5f4:	4285      	cmp	r5, r0
 800c5f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c5fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5fe:	dcec      	bgt.n	800c5da <__multadd+0x12>
 800c600:	b30e      	cbz	r6, 800c646 <__multadd+0x7e>
 800c602:	68a3      	ldr	r3, [r4, #8]
 800c604:	42ab      	cmp	r3, r5
 800c606:	dc19      	bgt.n	800c63c <__multadd+0x74>
 800c608:	6861      	ldr	r1, [r4, #4]
 800c60a:	4638      	mov	r0, r7
 800c60c:	3101      	adds	r1, #1
 800c60e:	f7ff ff79 	bl	800c504 <_Balloc>
 800c612:	4680      	mov	r8, r0
 800c614:	b928      	cbnz	r0, 800c622 <__multadd+0x5a>
 800c616:	4602      	mov	r2, r0
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <__multadd+0x84>)
 800c61a:	480d      	ldr	r0, [pc, #52]	; (800c650 <__multadd+0x88>)
 800c61c:	21b5      	movs	r1, #181	; 0xb5
 800c61e:	f7ff f8a3 	bl	800b768 <__assert_func>
 800c622:	6922      	ldr	r2, [r4, #16]
 800c624:	3202      	adds	r2, #2
 800c626:	f104 010c 	add.w	r1, r4, #12
 800c62a:	0092      	lsls	r2, r2, #2
 800c62c:	300c      	adds	r0, #12
 800c62e:	f7fe fa9f 	bl	800ab70 <memcpy>
 800c632:	4621      	mov	r1, r4
 800c634:	4638      	mov	r0, r7
 800c636:	f7ff ffa5 	bl	800c584 <_Bfree>
 800c63a:	4644      	mov	r4, r8
 800c63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c640:	3501      	adds	r5, #1
 800c642:	615e      	str	r6, [r3, #20]
 800c644:	6125      	str	r5, [r4, #16]
 800c646:	4620      	mov	r0, r4
 800c648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64c:	0800f397 	.word	0x0800f397
 800c650:	0800f3b2 	.word	0x0800f3b2

0800c654 <__hi0bits>:
 800c654:	0c03      	lsrs	r3, r0, #16
 800c656:	041b      	lsls	r3, r3, #16
 800c658:	b9d3      	cbnz	r3, 800c690 <__hi0bits+0x3c>
 800c65a:	0400      	lsls	r0, r0, #16
 800c65c:	2310      	movs	r3, #16
 800c65e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c662:	bf04      	itt	eq
 800c664:	0200      	lsleq	r0, r0, #8
 800c666:	3308      	addeq	r3, #8
 800c668:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c66c:	bf04      	itt	eq
 800c66e:	0100      	lsleq	r0, r0, #4
 800c670:	3304      	addeq	r3, #4
 800c672:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c676:	bf04      	itt	eq
 800c678:	0080      	lsleq	r0, r0, #2
 800c67a:	3302      	addeq	r3, #2
 800c67c:	2800      	cmp	r0, #0
 800c67e:	db05      	blt.n	800c68c <__hi0bits+0x38>
 800c680:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c684:	f103 0301 	add.w	r3, r3, #1
 800c688:	bf08      	it	eq
 800c68a:	2320      	moveq	r3, #32
 800c68c:	4618      	mov	r0, r3
 800c68e:	4770      	bx	lr
 800c690:	2300      	movs	r3, #0
 800c692:	e7e4      	b.n	800c65e <__hi0bits+0xa>

0800c694 <__lo0bits>:
 800c694:	6803      	ldr	r3, [r0, #0]
 800c696:	f013 0207 	ands.w	r2, r3, #7
 800c69a:	4601      	mov	r1, r0
 800c69c:	d00b      	beq.n	800c6b6 <__lo0bits+0x22>
 800c69e:	07da      	lsls	r2, r3, #31
 800c6a0:	d423      	bmi.n	800c6ea <__lo0bits+0x56>
 800c6a2:	0798      	lsls	r0, r3, #30
 800c6a4:	bf49      	itett	mi
 800c6a6:	085b      	lsrmi	r3, r3, #1
 800c6a8:	089b      	lsrpl	r3, r3, #2
 800c6aa:	2001      	movmi	r0, #1
 800c6ac:	600b      	strmi	r3, [r1, #0]
 800c6ae:	bf5c      	itt	pl
 800c6b0:	600b      	strpl	r3, [r1, #0]
 800c6b2:	2002      	movpl	r0, #2
 800c6b4:	4770      	bx	lr
 800c6b6:	b298      	uxth	r0, r3
 800c6b8:	b9a8      	cbnz	r0, 800c6e6 <__lo0bits+0x52>
 800c6ba:	0c1b      	lsrs	r3, r3, #16
 800c6bc:	2010      	movs	r0, #16
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	b90a      	cbnz	r2, 800c6c6 <__lo0bits+0x32>
 800c6c2:	3008      	adds	r0, #8
 800c6c4:	0a1b      	lsrs	r3, r3, #8
 800c6c6:	071a      	lsls	r2, r3, #28
 800c6c8:	bf04      	itt	eq
 800c6ca:	091b      	lsreq	r3, r3, #4
 800c6cc:	3004      	addeq	r0, #4
 800c6ce:	079a      	lsls	r2, r3, #30
 800c6d0:	bf04      	itt	eq
 800c6d2:	089b      	lsreq	r3, r3, #2
 800c6d4:	3002      	addeq	r0, #2
 800c6d6:	07da      	lsls	r2, r3, #31
 800c6d8:	d403      	bmi.n	800c6e2 <__lo0bits+0x4e>
 800c6da:	085b      	lsrs	r3, r3, #1
 800c6dc:	f100 0001 	add.w	r0, r0, #1
 800c6e0:	d005      	beq.n	800c6ee <__lo0bits+0x5a>
 800c6e2:	600b      	str	r3, [r1, #0]
 800c6e4:	4770      	bx	lr
 800c6e6:	4610      	mov	r0, r2
 800c6e8:	e7e9      	b.n	800c6be <__lo0bits+0x2a>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	4770      	bx	lr
 800c6ee:	2020      	movs	r0, #32
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <__i2b>:
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	f7ff ff03 	bl	800c504 <_Balloc>
 800c6fe:	4602      	mov	r2, r0
 800c700:	b928      	cbnz	r0, 800c70e <__i2b+0x1a>
 800c702:	4b05      	ldr	r3, [pc, #20]	; (800c718 <__i2b+0x24>)
 800c704:	4805      	ldr	r0, [pc, #20]	; (800c71c <__i2b+0x28>)
 800c706:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c70a:	f7ff f82d 	bl	800b768 <__assert_func>
 800c70e:	2301      	movs	r3, #1
 800c710:	6144      	str	r4, [r0, #20]
 800c712:	6103      	str	r3, [r0, #16]
 800c714:	bd10      	pop	{r4, pc}
 800c716:	bf00      	nop
 800c718:	0800f397 	.word	0x0800f397
 800c71c:	0800f3b2 	.word	0x0800f3b2

0800c720 <__multiply>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	4691      	mov	r9, r2
 800c726:	690a      	ldr	r2, [r1, #16]
 800c728:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	bfb8      	it	lt
 800c730:	460b      	movlt	r3, r1
 800c732:	460c      	mov	r4, r1
 800c734:	bfbc      	itt	lt
 800c736:	464c      	movlt	r4, r9
 800c738:	4699      	movlt	r9, r3
 800c73a:	6927      	ldr	r7, [r4, #16]
 800c73c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	6861      	ldr	r1, [r4, #4]
 800c744:	eb07 060a 	add.w	r6, r7, sl
 800c748:	42b3      	cmp	r3, r6
 800c74a:	b085      	sub	sp, #20
 800c74c:	bfb8      	it	lt
 800c74e:	3101      	addlt	r1, #1
 800c750:	f7ff fed8 	bl	800c504 <_Balloc>
 800c754:	b930      	cbnz	r0, 800c764 <__multiply+0x44>
 800c756:	4602      	mov	r2, r0
 800c758:	4b44      	ldr	r3, [pc, #272]	; (800c86c <__multiply+0x14c>)
 800c75a:	4845      	ldr	r0, [pc, #276]	; (800c870 <__multiply+0x150>)
 800c75c:	f240 115d 	movw	r1, #349	; 0x15d
 800c760:	f7ff f802 	bl	800b768 <__assert_func>
 800c764:	f100 0514 	add.w	r5, r0, #20
 800c768:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c76c:	462b      	mov	r3, r5
 800c76e:	2200      	movs	r2, #0
 800c770:	4543      	cmp	r3, r8
 800c772:	d321      	bcc.n	800c7b8 <__multiply+0x98>
 800c774:	f104 0314 	add.w	r3, r4, #20
 800c778:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c77c:	f109 0314 	add.w	r3, r9, #20
 800c780:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c784:	9202      	str	r2, [sp, #8]
 800c786:	1b3a      	subs	r2, r7, r4
 800c788:	3a15      	subs	r2, #21
 800c78a:	f022 0203 	bic.w	r2, r2, #3
 800c78e:	3204      	adds	r2, #4
 800c790:	f104 0115 	add.w	r1, r4, #21
 800c794:	428f      	cmp	r7, r1
 800c796:	bf38      	it	cc
 800c798:	2204      	movcc	r2, #4
 800c79a:	9201      	str	r2, [sp, #4]
 800c79c:	9a02      	ldr	r2, [sp, #8]
 800c79e:	9303      	str	r3, [sp, #12]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d80c      	bhi.n	800c7be <__multiply+0x9e>
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	dd03      	ble.n	800c7b0 <__multiply+0x90>
 800c7a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d05a      	beq.n	800c866 <__multiply+0x146>
 800c7b0:	6106      	str	r6, [r0, #16]
 800c7b2:	b005      	add	sp, #20
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	f843 2b04 	str.w	r2, [r3], #4
 800c7bc:	e7d8      	b.n	800c770 <__multiply+0x50>
 800c7be:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7c2:	f1ba 0f00 	cmp.w	sl, #0
 800c7c6:	d024      	beq.n	800c812 <__multiply+0xf2>
 800c7c8:	f104 0e14 	add.w	lr, r4, #20
 800c7cc:	46a9      	mov	r9, r5
 800c7ce:	f04f 0c00 	mov.w	ip, #0
 800c7d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7d6:	f8d9 1000 	ldr.w	r1, [r9]
 800c7da:	fa1f fb82 	uxth.w	fp, r2
 800c7de:	b289      	uxth	r1, r1
 800c7e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7ec:	4461      	add	r1, ip
 800c7ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7fa:	b289      	uxth	r1, r1
 800c7fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c800:	4577      	cmp	r7, lr
 800c802:	f849 1b04 	str.w	r1, [r9], #4
 800c806:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c80a:	d8e2      	bhi.n	800c7d2 <__multiply+0xb2>
 800c80c:	9a01      	ldr	r2, [sp, #4]
 800c80e:	f845 c002 	str.w	ip, [r5, r2]
 800c812:	9a03      	ldr	r2, [sp, #12]
 800c814:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c818:	3304      	adds	r3, #4
 800c81a:	f1b9 0f00 	cmp.w	r9, #0
 800c81e:	d020      	beq.n	800c862 <__multiply+0x142>
 800c820:	6829      	ldr	r1, [r5, #0]
 800c822:	f104 0c14 	add.w	ip, r4, #20
 800c826:	46ae      	mov	lr, r5
 800c828:	f04f 0a00 	mov.w	sl, #0
 800c82c:	f8bc b000 	ldrh.w	fp, [ip]
 800c830:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c834:	fb09 220b 	mla	r2, r9, fp, r2
 800c838:	4492      	add	sl, r2
 800c83a:	b289      	uxth	r1, r1
 800c83c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c840:	f84e 1b04 	str.w	r1, [lr], #4
 800c844:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c848:	f8be 1000 	ldrh.w	r1, [lr]
 800c84c:	0c12      	lsrs	r2, r2, #16
 800c84e:	fb09 1102 	mla	r1, r9, r2, r1
 800c852:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c856:	4567      	cmp	r7, ip
 800c858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c85c:	d8e6      	bhi.n	800c82c <__multiply+0x10c>
 800c85e:	9a01      	ldr	r2, [sp, #4]
 800c860:	50a9      	str	r1, [r5, r2]
 800c862:	3504      	adds	r5, #4
 800c864:	e79a      	b.n	800c79c <__multiply+0x7c>
 800c866:	3e01      	subs	r6, #1
 800c868:	e79c      	b.n	800c7a4 <__multiply+0x84>
 800c86a:	bf00      	nop
 800c86c:	0800f397 	.word	0x0800f397
 800c870:	0800f3b2 	.word	0x0800f3b2

0800c874 <__pow5mult>:
 800c874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c878:	4615      	mov	r5, r2
 800c87a:	f012 0203 	ands.w	r2, r2, #3
 800c87e:	4606      	mov	r6, r0
 800c880:	460f      	mov	r7, r1
 800c882:	d007      	beq.n	800c894 <__pow5mult+0x20>
 800c884:	4c25      	ldr	r4, [pc, #148]	; (800c91c <__pow5mult+0xa8>)
 800c886:	3a01      	subs	r2, #1
 800c888:	2300      	movs	r3, #0
 800c88a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c88e:	f7ff fe9b 	bl	800c5c8 <__multadd>
 800c892:	4607      	mov	r7, r0
 800c894:	10ad      	asrs	r5, r5, #2
 800c896:	d03d      	beq.n	800c914 <__pow5mult+0xa0>
 800c898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c89a:	b97c      	cbnz	r4, 800c8bc <__pow5mult+0x48>
 800c89c:	2010      	movs	r0, #16
 800c89e:	f7fe f95f 	bl	800ab60 <malloc>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	6270      	str	r0, [r6, #36]	; 0x24
 800c8a6:	b928      	cbnz	r0, 800c8b4 <__pow5mult+0x40>
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <__pow5mult+0xac>)
 800c8aa:	481e      	ldr	r0, [pc, #120]	; (800c924 <__pow5mult+0xb0>)
 800c8ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8b0:	f7fe ff5a 	bl	800b768 <__assert_func>
 800c8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b8:	6004      	str	r4, [r0, #0]
 800c8ba:	60c4      	str	r4, [r0, #12]
 800c8bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8c4:	b94c      	cbnz	r4, 800c8da <__pow5mult+0x66>
 800c8c6:	f240 2171 	movw	r1, #625	; 0x271
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ff12 	bl	800c6f4 <__i2b>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	6003      	str	r3, [r0, #0]
 800c8da:	f04f 0900 	mov.w	r9, #0
 800c8de:	07eb      	lsls	r3, r5, #31
 800c8e0:	d50a      	bpl.n	800c8f8 <__pow5mult+0x84>
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ff1a 	bl	800c720 <__multiply>
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7ff fe47 	bl	800c584 <_Bfree>
 800c8f6:	4647      	mov	r7, r8
 800c8f8:	106d      	asrs	r5, r5, #1
 800c8fa:	d00b      	beq.n	800c914 <__pow5mult+0xa0>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	b938      	cbnz	r0, 800c910 <__pow5mult+0x9c>
 800c900:	4622      	mov	r2, r4
 800c902:	4621      	mov	r1, r4
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff ff0b 	bl	800c720 <__multiply>
 800c90a:	6020      	str	r0, [r4, #0]
 800c90c:	f8c0 9000 	str.w	r9, [r0]
 800c910:	4604      	mov	r4, r0
 800c912:	e7e4      	b.n	800c8de <__pow5mult+0x6a>
 800c914:	4638      	mov	r0, r7
 800c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91a:	bf00      	nop
 800c91c:	0800f500 	.word	0x0800f500
 800c920:	0800f325 	.word	0x0800f325
 800c924:	0800f3b2 	.word	0x0800f3b2

0800c928 <__lshift>:
 800c928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c92c:	460c      	mov	r4, r1
 800c92e:	6849      	ldr	r1, [r1, #4]
 800c930:	6923      	ldr	r3, [r4, #16]
 800c932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	4607      	mov	r7, r0
 800c93a:	4691      	mov	r9, r2
 800c93c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c940:	f108 0601 	add.w	r6, r8, #1
 800c944:	42b3      	cmp	r3, r6
 800c946:	db0b      	blt.n	800c960 <__lshift+0x38>
 800c948:	4638      	mov	r0, r7
 800c94a:	f7ff fddb 	bl	800c504 <_Balloc>
 800c94e:	4605      	mov	r5, r0
 800c950:	b948      	cbnz	r0, 800c966 <__lshift+0x3e>
 800c952:	4602      	mov	r2, r0
 800c954:	4b2a      	ldr	r3, [pc, #168]	; (800ca00 <__lshift+0xd8>)
 800c956:	482b      	ldr	r0, [pc, #172]	; (800ca04 <__lshift+0xdc>)
 800c958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c95c:	f7fe ff04 	bl	800b768 <__assert_func>
 800c960:	3101      	adds	r1, #1
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	e7ee      	b.n	800c944 <__lshift+0x1c>
 800c966:	2300      	movs	r3, #0
 800c968:	f100 0114 	add.w	r1, r0, #20
 800c96c:	f100 0210 	add.w	r2, r0, #16
 800c970:	4618      	mov	r0, r3
 800c972:	4553      	cmp	r3, sl
 800c974:	db37      	blt.n	800c9e6 <__lshift+0xbe>
 800c976:	6920      	ldr	r0, [r4, #16]
 800c978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c97c:	f104 0314 	add.w	r3, r4, #20
 800c980:	f019 091f 	ands.w	r9, r9, #31
 800c984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c988:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c98c:	d02f      	beq.n	800c9ee <__lshift+0xc6>
 800c98e:	f1c9 0e20 	rsb	lr, r9, #32
 800c992:	468a      	mov	sl, r1
 800c994:	f04f 0c00 	mov.w	ip, #0
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	fa02 f209 	lsl.w	r2, r2, r9
 800c99e:	ea42 020c 	orr.w	r2, r2, ip
 800c9a2:	f84a 2b04 	str.w	r2, [sl], #4
 800c9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9aa:	4298      	cmp	r0, r3
 800c9ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9b0:	d8f2      	bhi.n	800c998 <__lshift+0x70>
 800c9b2:	1b03      	subs	r3, r0, r4
 800c9b4:	3b15      	subs	r3, #21
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	f104 0215 	add.w	r2, r4, #21
 800c9c0:	4290      	cmp	r0, r2
 800c9c2:	bf38      	it	cc
 800c9c4:	2304      	movcc	r3, #4
 800c9c6:	f841 c003 	str.w	ip, [r1, r3]
 800c9ca:	f1bc 0f00 	cmp.w	ip, #0
 800c9ce:	d001      	beq.n	800c9d4 <__lshift+0xac>
 800c9d0:	f108 0602 	add.w	r6, r8, #2
 800c9d4:	3e01      	subs	r6, #1
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	612e      	str	r6, [r5, #16]
 800c9da:	4621      	mov	r1, r4
 800c9dc:	f7ff fdd2 	bl	800c584 <_Bfree>
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	e7c1      	b.n	800c972 <__lshift+0x4a>
 800c9ee:	3904      	subs	r1, #4
 800c9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9f8:	4298      	cmp	r0, r3
 800c9fa:	d8f9      	bhi.n	800c9f0 <__lshift+0xc8>
 800c9fc:	e7ea      	b.n	800c9d4 <__lshift+0xac>
 800c9fe:	bf00      	nop
 800ca00:	0800f397 	.word	0x0800f397
 800ca04:	0800f3b2 	.word	0x0800f3b2

0800ca08 <__mcmp>:
 800ca08:	b530      	push	{r4, r5, lr}
 800ca0a:	6902      	ldr	r2, [r0, #16]
 800ca0c:	690c      	ldr	r4, [r1, #16]
 800ca0e:	1b12      	subs	r2, r2, r4
 800ca10:	d10e      	bne.n	800ca30 <__mcmp+0x28>
 800ca12:	f100 0314 	add.w	r3, r0, #20
 800ca16:	3114      	adds	r1, #20
 800ca18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca28:	42a5      	cmp	r5, r4
 800ca2a:	d003      	beq.n	800ca34 <__mcmp+0x2c>
 800ca2c:	d305      	bcc.n	800ca3a <__mcmp+0x32>
 800ca2e:	2201      	movs	r2, #1
 800ca30:	4610      	mov	r0, r2
 800ca32:	bd30      	pop	{r4, r5, pc}
 800ca34:	4283      	cmp	r3, r0
 800ca36:	d3f3      	bcc.n	800ca20 <__mcmp+0x18>
 800ca38:	e7fa      	b.n	800ca30 <__mcmp+0x28>
 800ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3e:	e7f7      	b.n	800ca30 <__mcmp+0x28>

0800ca40 <__mdiff>:
 800ca40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	460c      	mov	r4, r1
 800ca46:	4606      	mov	r6, r0
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4690      	mov	r8, r2
 800ca4e:	f7ff ffdb 	bl	800ca08 <__mcmp>
 800ca52:	1e05      	subs	r5, r0, #0
 800ca54:	d110      	bne.n	800ca78 <__mdiff+0x38>
 800ca56:	4629      	mov	r1, r5
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7ff fd53 	bl	800c504 <_Balloc>
 800ca5e:	b930      	cbnz	r0, 800ca6e <__mdiff+0x2e>
 800ca60:	4b3a      	ldr	r3, [pc, #232]	; (800cb4c <__mdiff+0x10c>)
 800ca62:	4602      	mov	r2, r0
 800ca64:	f240 2132 	movw	r1, #562	; 0x232
 800ca68:	4839      	ldr	r0, [pc, #228]	; (800cb50 <__mdiff+0x110>)
 800ca6a:	f7fe fe7d 	bl	800b768 <__assert_func>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca78:	bfa4      	itt	ge
 800ca7a:	4643      	movge	r3, r8
 800ca7c:	46a0      	movge	r8, r4
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca84:	bfa6      	itte	ge
 800ca86:	461c      	movge	r4, r3
 800ca88:	2500      	movge	r5, #0
 800ca8a:	2501      	movlt	r5, #1
 800ca8c:	f7ff fd3a 	bl	800c504 <_Balloc>
 800ca90:	b920      	cbnz	r0, 800ca9c <__mdiff+0x5c>
 800ca92:	4b2e      	ldr	r3, [pc, #184]	; (800cb4c <__mdiff+0x10c>)
 800ca94:	4602      	mov	r2, r0
 800ca96:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca9a:	e7e5      	b.n	800ca68 <__mdiff+0x28>
 800ca9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800caa0:	6926      	ldr	r6, [r4, #16]
 800caa2:	60c5      	str	r5, [r0, #12]
 800caa4:	f104 0914 	add.w	r9, r4, #20
 800caa8:	f108 0514 	add.w	r5, r8, #20
 800caac:	f100 0e14 	add.w	lr, r0, #20
 800cab0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cab4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cab8:	f108 0210 	add.w	r2, r8, #16
 800cabc:	46f2      	mov	sl, lr
 800cabe:	2100      	movs	r1, #0
 800cac0:	f859 3b04 	ldr.w	r3, [r9], #4
 800cac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cac8:	fa1f f883 	uxth.w	r8, r3
 800cacc:	fa11 f18b 	uxtah	r1, r1, fp
 800cad0:	0c1b      	lsrs	r3, r3, #16
 800cad2:	eba1 0808 	sub.w	r8, r1, r8
 800cad6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cada:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cade:	fa1f f888 	uxth.w	r8, r8
 800cae2:	1419      	asrs	r1, r3, #16
 800cae4:	454e      	cmp	r6, r9
 800cae6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800caea:	f84a 3b04 	str.w	r3, [sl], #4
 800caee:	d8e7      	bhi.n	800cac0 <__mdiff+0x80>
 800caf0:	1b33      	subs	r3, r6, r4
 800caf2:	3b15      	subs	r3, #21
 800caf4:	f023 0303 	bic.w	r3, r3, #3
 800caf8:	3304      	adds	r3, #4
 800cafa:	3415      	adds	r4, #21
 800cafc:	42a6      	cmp	r6, r4
 800cafe:	bf38      	it	cc
 800cb00:	2304      	movcc	r3, #4
 800cb02:	441d      	add	r5, r3
 800cb04:	4473      	add	r3, lr
 800cb06:	469e      	mov	lr, r3
 800cb08:	462e      	mov	r6, r5
 800cb0a:	4566      	cmp	r6, ip
 800cb0c:	d30e      	bcc.n	800cb2c <__mdiff+0xec>
 800cb0e:	f10c 0203 	add.w	r2, ip, #3
 800cb12:	1b52      	subs	r2, r2, r5
 800cb14:	f022 0203 	bic.w	r2, r2, #3
 800cb18:	3d03      	subs	r5, #3
 800cb1a:	45ac      	cmp	ip, r5
 800cb1c:	bf38      	it	cc
 800cb1e:	2200      	movcc	r2, #0
 800cb20:	441a      	add	r2, r3
 800cb22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb26:	b17b      	cbz	r3, 800cb48 <__mdiff+0x108>
 800cb28:	6107      	str	r7, [r0, #16]
 800cb2a:	e7a3      	b.n	800ca74 <__mdiff+0x34>
 800cb2c:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb30:	fa11 f288 	uxtah	r2, r1, r8
 800cb34:	1414      	asrs	r4, r2, #16
 800cb36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb3a:	b292      	uxth	r2, r2
 800cb3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb40:	f84e 2b04 	str.w	r2, [lr], #4
 800cb44:	1421      	asrs	r1, r4, #16
 800cb46:	e7e0      	b.n	800cb0a <__mdiff+0xca>
 800cb48:	3f01      	subs	r7, #1
 800cb4a:	e7ea      	b.n	800cb22 <__mdiff+0xe2>
 800cb4c:	0800f397 	.word	0x0800f397
 800cb50:	0800f3b2 	.word	0x0800f3b2

0800cb54 <__d2b>:
 800cb54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	4689      	mov	r9, r1
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	ec57 6b10 	vmov	r6, r7, d0
 800cb60:	4690      	mov	r8, r2
 800cb62:	f7ff fccf 	bl	800c504 <_Balloc>
 800cb66:	4604      	mov	r4, r0
 800cb68:	b930      	cbnz	r0, 800cb78 <__d2b+0x24>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	4b25      	ldr	r3, [pc, #148]	; (800cc04 <__d2b+0xb0>)
 800cb6e:	4826      	ldr	r0, [pc, #152]	; (800cc08 <__d2b+0xb4>)
 800cb70:	f240 310a 	movw	r1, #778	; 0x30a
 800cb74:	f7fe fdf8 	bl	800b768 <__assert_func>
 800cb78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb80:	bb35      	cbnz	r5, 800cbd0 <__d2b+0x7c>
 800cb82:	2e00      	cmp	r6, #0
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	d028      	beq.n	800cbda <__d2b+0x86>
 800cb88:	4668      	mov	r0, sp
 800cb8a:	9600      	str	r6, [sp, #0]
 800cb8c:	f7ff fd82 	bl	800c694 <__lo0bits>
 800cb90:	9900      	ldr	r1, [sp, #0]
 800cb92:	b300      	cbz	r0, 800cbd6 <__d2b+0x82>
 800cb94:	9a01      	ldr	r2, [sp, #4]
 800cb96:	f1c0 0320 	rsb	r3, r0, #32
 800cb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9e:	430b      	orrs	r3, r1
 800cba0:	40c2      	lsrs	r2, r0
 800cba2:	6163      	str	r3, [r4, #20]
 800cba4:	9201      	str	r2, [sp, #4]
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	61a3      	str	r3, [r4, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	bf14      	ite	ne
 800cbae:	2202      	movne	r2, #2
 800cbb0:	2201      	moveq	r2, #1
 800cbb2:	6122      	str	r2, [r4, #16]
 800cbb4:	b1d5      	cbz	r5, 800cbec <__d2b+0x98>
 800cbb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbba:	4405      	add	r5, r0
 800cbbc:	f8c9 5000 	str.w	r5, [r9]
 800cbc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbc4:	f8c8 0000 	str.w	r0, [r8]
 800cbc8:	4620      	mov	r0, r4
 800cbca:	b003      	add	sp, #12
 800cbcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbd4:	e7d5      	b.n	800cb82 <__d2b+0x2e>
 800cbd6:	6161      	str	r1, [r4, #20]
 800cbd8:	e7e5      	b.n	800cba6 <__d2b+0x52>
 800cbda:	a801      	add	r0, sp, #4
 800cbdc:	f7ff fd5a 	bl	800c694 <__lo0bits>
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	6163      	str	r3, [r4, #20]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	6122      	str	r2, [r4, #16]
 800cbe8:	3020      	adds	r0, #32
 800cbea:	e7e3      	b.n	800cbb4 <__d2b+0x60>
 800cbec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbf4:	f8c9 0000 	str.w	r0, [r9]
 800cbf8:	6918      	ldr	r0, [r3, #16]
 800cbfa:	f7ff fd2b 	bl	800c654 <__hi0bits>
 800cbfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc02:	e7df      	b.n	800cbc4 <__d2b+0x70>
 800cc04:	0800f397 	.word	0x0800f397
 800cc08:	0800f3b2 	.word	0x0800f3b2

0800cc0c <_calloc_r>:
 800cc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc0e:	fba1 2402 	umull	r2, r4, r1, r2
 800cc12:	b94c      	cbnz	r4, 800cc28 <_calloc_r+0x1c>
 800cc14:	4611      	mov	r1, r2
 800cc16:	9201      	str	r2, [sp, #4]
 800cc18:	f7fe f82c 	bl	800ac74 <_malloc_r>
 800cc1c:	9a01      	ldr	r2, [sp, #4]
 800cc1e:	4605      	mov	r5, r0
 800cc20:	b930      	cbnz	r0, 800cc30 <_calloc_r+0x24>
 800cc22:	4628      	mov	r0, r5
 800cc24:	b003      	add	sp, #12
 800cc26:	bd30      	pop	{r4, r5, pc}
 800cc28:	220c      	movs	r2, #12
 800cc2a:	6002      	str	r2, [r0, #0]
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	e7f8      	b.n	800cc22 <_calloc_r+0x16>
 800cc30:	4621      	mov	r1, r4
 800cc32:	f7fd ffab 	bl	800ab8c <memset>
 800cc36:	e7f4      	b.n	800cc22 <_calloc_r+0x16>

0800cc38 <__sfputc_r>:
 800cc38:	6893      	ldr	r3, [r2, #8]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	b410      	push	{r4}
 800cc40:	6093      	str	r3, [r2, #8]
 800cc42:	da08      	bge.n	800cc56 <__sfputc_r+0x1e>
 800cc44:	6994      	ldr	r4, [r2, #24]
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	db01      	blt.n	800cc4e <__sfputc_r+0x16>
 800cc4a:	290a      	cmp	r1, #10
 800cc4c:	d103      	bne.n	800cc56 <__sfputc_r+0x1e>
 800cc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc52:	f000 b94b 	b.w	800ceec <__swbuf_r>
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	1c58      	adds	r0, r3, #1
 800cc5a:	6010      	str	r0, [r2, #0]
 800cc5c:	7019      	strb	r1, [r3, #0]
 800cc5e:	4608      	mov	r0, r1
 800cc60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <__sfputs_r>:
 800cc66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc68:	4606      	mov	r6, r0
 800cc6a:	460f      	mov	r7, r1
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	18d5      	adds	r5, r2, r3
 800cc70:	42ac      	cmp	r4, r5
 800cc72:	d101      	bne.n	800cc78 <__sfputs_r+0x12>
 800cc74:	2000      	movs	r0, #0
 800cc76:	e007      	b.n	800cc88 <__sfputs_r+0x22>
 800cc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7c:	463a      	mov	r2, r7
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7ff ffda 	bl	800cc38 <__sfputc_r>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d1f3      	bne.n	800cc70 <__sfputs_r+0xa>
 800cc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc8c <_vfiprintf_r>:
 800cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc90:	460d      	mov	r5, r1
 800cc92:	b09d      	sub	sp, #116	; 0x74
 800cc94:	4614      	mov	r4, r2
 800cc96:	4698      	mov	r8, r3
 800cc98:	4606      	mov	r6, r0
 800cc9a:	b118      	cbz	r0, 800cca4 <_vfiprintf_r+0x18>
 800cc9c:	6983      	ldr	r3, [r0, #24]
 800cc9e:	b90b      	cbnz	r3, 800cca4 <_vfiprintf_r+0x18>
 800cca0:	f000 fb14 	bl	800d2cc <__sinit>
 800cca4:	4b89      	ldr	r3, [pc, #548]	; (800cecc <_vfiprintf_r+0x240>)
 800cca6:	429d      	cmp	r5, r3
 800cca8:	d11b      	bne.n	800cce2 <_vfiprintf_r+0x56>
 800ccaa:	6875      	ldr	r5, [r6, #4]
 800ccac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccae:	07d9      	lsls	r1, r3, #31
 800ccb0:	d405      	bmi.n	800ccbe <_vfiprintf_r+0x32>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	059a      	lsls	r2, r3, #22
 800ccb6:	d402      	bmi.n	800ccbe <_vfiprintf_r+0x32>
 800ccb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccba:	f000 fba5 	bl	800d408 <__retarget_lock_acquire_recursive>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	071b      	lsls	r3, r3, #28
 800ccc2:	d501      	bpl.n	800ccc8 <_vfiprintf_r+0x3c>
 800ccc4:	692b      	ldr	r3, [r5, #16]
 800ccc6:	b9eb      	cbnz	r3, 800cd04 <_vfiprintf_r+0x78>
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4630      	mov	r0, r6
 800cccc:	f000 f96e 	bl	800cfac <__swsetup_r>
 800ccd0:	b1c0      	cbz	r0, 800cd04 <_vfiprintf_r+0x78>
 800ccd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccd4:	07dc      	lsls	r4, r3, #31
 800ccd6:	d50e      	bpl.n	800ccf6 <_vfiprintf_r+0x6a>
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	b01d      	add	sp, #116	; 0x74
 800ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce2:	4b7b      	ldr	r3, [pc, #492]	; (800ced0 <_vfiprintf_r+0x244>)
 800cce4:	429d      	cmp	r5, r3
 800cce6:	d101      	bne.n	800ccec <_vfiprintf_r+0x60>
 800cce8:	68b5      	ldr	r5, [r6, #8]
 800ccea:	e7df      	b.n	800ccac <_vfiprintf_r+0x20>
 800ccec:	4b79      	ldr	r3, [pc, #484]	; (800ced4 <_vfiprintf_r+0x248>)
 800ccee:	429d      	cmp	r5, r3
 800ccf0:	bf08      	it	eq
 800ccf2:	68f5      	ldreq	r5, [r6, #12]
 800ccf4:	e7da      	b.n	800ccac <_vfiprintf_r+0x20>
 800ccf6:	89ab      	ldrh	r3, [r5, #12]
 800ccf8:	0598      	lsls	r0, r3, #22
 800ccfa:	d4ed      	bmi.n	800ccd8 <_vfiprintf_r+0x4c>
 800ccfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccfe:	f000 fb84 	bl	800d40a <__retarget_lock_release_recursive>
 800cd02:	e7e9      	b.n	800ccd8 <_vfiprintf_r+0x4c>
 800cd04:	2300      	movs	r3, #0
 800cd06:	9309      	str	r3, [sp, #36]	; 0x24
 800cd08:	2320      	movs	r3, #32
 800cd0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd12:	2330      	movs	r3, #48	; 0x30
 800cd14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ced8 <_vfiprintf_r+0x24c>
 800cd18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd1c:	f04f 0901 	mov.w	r9, #1
 800cd20:	4623      	mov	r3, r4
 800cd22:	469a      	mov	sl, r3
 800cd24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd28:	b10a      	cbz	r2, 800cd2e <_vfiprintf_r+0xa2>
 800cd2a:	2a25      	cmp	r2, #37	; 0x25
 800cd2c:	d1f9      	bne.n	800cd22 <_vfiprintf_r+0x96>
 800cd2e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd32:	d00b      	beq.n	800cd4c <_vfiprintf_r+0xc0>
 800cd34:	465b      	mov	r3, fp
 800cd36:	4622      	mov	r2, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7ff ff93 	bl	800cc66 <__sfputs_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	f000 80aa 	beq.w	800ce9a <_vfiprintf_r+0x20e>
 800cd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd48:	445a      	add	r2, fp
 800cd4a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 80a2 	beq.w	800ce9a <_vfiprintf_r+0x20e>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f04f 32ff 	mov.w	r2, #4294967295
 800cd5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd60:	f10a 0a01 	add.w	sl, sl, #1
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	9307      	str	r3, [sp, #28]
 800cd68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd6c:	931a      	str	r3, [sp, #104]	; 0x68
 800cd6e:	4654      	mov	r4, sl
 800cd70:	2205      	movs	r2, #5
 800cd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd76:	4858      	ldr	r0, [pc, #352]	; (800ced8 <_vfiprintf_r+0x24c>)
 800cd78:	f7f3 fa3a 	bl	80001f0 <memchr>
 800cd7c:	9a04      	ldr	r2, [sp, #16]
 800cd7e:	b9d8      	cbnz	r0, 800cdb8 <_vfiprintf_r+0x12c>
 800cd80:	06d1      	lsls	r1, r2, #27
 800cd82:	bf44      	itt	mi
 800cd84:	2320      	movmi	r3, #32
 800cd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd8a:	0713      	lsls	r3, r2, #28
 800cd8c:	bf44      	itt	mi
 800cd8e:	232b      	movmi	r3, #43	; 0x2b
 800cd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd94:	f89a 3000 	ldrb.w	r3, [sl]
 800cd98:	2b2a      	cmp	r3, #42	; 0x2a
 800cd9a:	d015      	beq.n	800cdc8 <_vfiprintf_r+0x13c>
 800cd9c:	9a07      	ldr	r2, [sp, #28]
 800cd9e:	4654      	mov	r4, sl
 800cda0:	2000      	movs	r0, #0
 800cda2:	f04f 0c0a 	mov.w	ip, #10
 800cda6:	4621      	mov	r1, r4
 800cda8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdac:	3b30      	subs	r3, #48	; 0x30
 800cdae:	2b09      	cmp	r3, #9
 800cdb0:	d94e      	bls.n	800ce50 <_vfiprintf_r+0x1c4>
 800cdb2:	b1b0      	cbz	r0, 800cde2 <_vfiprintf_r+0x156>
 800cdb4:	9207      	str	r2, [sp, #28]
 800cdb6:	e014      	b.n	800cde2 <_vfiprintf_r+0x156>
 800cdb8:	eba0 0308 	sub.w	r3, r0, r8
 800cdbc:	fa09 f303 	lsl.w	r3, r9, r3
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	46a2      	mov	sl, r4
 800cdc6:	e7d2      	b.n	800cd6e <_vfiprintf_r+0xe2>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	1d19      	adds	r1, r3, #4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	9103      	str	r1, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bfbb      	ittet	lt
 800cdd4:	425b      	neglt	r3, r3
 800cdd6:	f042 0202 	orrlt.w	r2, r2, #2
 800cdda:	9307      	strge	r3, [sp, #28]
 800cddc:	9307      	strlt	r3, [sp, #28]
 800cdde:	bfb8      	it	lt
 800cde0:	9204      	strlt	r2, [sp, #16]
 800cde2:	7823      	ldrb	r3, [r4, #0]
 800cde4:	2b2e      	cmp	r3, #46	; 0x2e
 800cde6:	d10c      	bne.n	800ce02 <_vfiprintf_r+0x176>
 800cde8:	7863      	ldrb	r3, [r4, #1]
 800cdea:	2b2a      	cmp	r3, #42	; 0x2a
 800cdec:	d135      	bne.n	800ce5a <_vfiprintf_r+0x1ce>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	1d1a      	adds	r2, r3, #4
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	9203      	str	r2, [sp, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bfb8      	it	lt
 800cdfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdfe:	3402      	adds	r4, #2
 800ce00:	9305      	str	r3, [sp, #20]
 800ce02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cee8 <_vfiprintf_r+0x25c>
 800ce06:	7821      	ldrb	r1, [r4, #0]
 800ce08:	2203      	movs	r2, #3
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	f7f3 f9f0 	bl	80001f0 <memchr>
 800ce10:	b140      	cbz	r0, 800ce24 <_vfiprintf_r+0x198>
 800ce12:	2340      	movs	r3, #64	; 0x40
 800ce14:	eba0 000a 	sub.w	r0, r0, sl
 800ce18:	fa03 f000 	lsl.w	r0, r3, r0
 800ce1c:	9b04      	ldr	r3, [sp, #16]
 800ce1e:	4303      	orrs	r3, r0
 800ce20:	3401      	adds	r4, #1
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce28:	482c      	ldr	r0, [pc, #176]	; (800cedc <_vfiprintf_r+0x250>)
 800ce2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce2e:	2206      	movs	r2, #6
 800ce30:	f7f3 f9de 	bl	80001f0 <memchr>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d03f      	beq.n	800ceb8 <_vfiprintf_r+0x22c>
 800ce38:	4b29      	ldr	r3, [pc, #164]	; (800cee0 <_vfiprintf_r+0x254>)
 800ce3a:	bb1b      	cbnz	r3, 800ce84 <_vfiprintf_r+0x1f8>
 800ce3c:	9b03      	ldr	r3, [sp, #12]
 800ce3e:	3307      	adds	r3, #7
 800ce40:	f023 0307 	bic.w	r3, r3, #7
 800ce44:	3308      	adds	r3, #8
 800ce46:	9303      	str	r3, [sp, #12]
 800ce48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4a:	443b      	add	r3, r7
 800ce4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4e:	e767      	b.n	800cd20 <_vfiprintf_r+0x94>
 800ce50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce54:	460c      	mov	r4, r1
 800ce56:	2001      	movs	r0, #1
 800ce58:	e7a5      	b.n	800cda6 <_vfiprintf_r+0x11a>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	3401      	adds	r4, #1
 800ce5e:	9305      	str	r3, [sp, #20]
 800ce60:	4619      	mov	r1, r3
 800ce62:	f04f 0c0a 	mov.w	ip, #10
 800ce66:	4620      	mov	r0, r4
 800ce68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce6c:	3a30      	subs	r2, #48	; 0x30
 800ce6e:	2a09      	cmp	r2, #9
 800ce70:	d903      	bls.n	800ce7a <_vfiprintf_r+0x1ee>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0c5      	beq.n	800ce02 <_vfiprintf_r+0x176>
 800ce76:	9105      	str	r1, [sp, #20]
 800ce78:	e7c3      	b.n	800ce02 <_vfiprintf_r+0x176>
 800ce7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce7e:	4604      	mov	r4, r0
 800ce80:	2301      	movs	r3, #1
 800ce82:	e7f0      	b.n	800ce66 <_vfiprintf_r+0x1da>
 800ce84:	ab03      	add	r3, sp, #12
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4b16      	ldr	r3, [pc, #88]	; (800cee4 <_vfiprintf_r+0x258>)
 800ce8c:	a904      	add	r1, sp, #16
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f7fe f804 	bl	800ae9c <_printf_float>
 800ce94:	4607      	mov	r7, r0
 800ce96:	1c78      	adds	r0, r7, #1
 800ce98:	d1d6      	bne.n	800ce48 <_vfiprintf_r+0x1bc>
 800ce9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce9c:	07d9      	lsls	r1, r3, #31
 800ce9e:	d405      	bmi.n	800ceac <_vfiprintf_r+0x220>
 800cea0:	89ab      	ldrh	r3, [r5, #12]
 800cea2:	059a      	lsls	r2, r3, #22
 800cea4:	d402      	bmi.n	800ceac <_vfiprintf_r+0x220>
 800cea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea8:	f000 faaf 	bl	800d40a <__retarget_lock_release_recursive>
 800ceac:	89ab      	ldrh	r3, [r5, #12]
 800ceae:	065b      	lsls	r3, r3, #25
 800ceb0:	f53f af12 	bmi.w	800ccd8 <_vfiprintf_r+0x4c>
 800ceb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceb6:	e711      	b.n	800ccdc <_vfiprintf_r+0x50>
 800ceb8:	ab03      	add	r3, sp, #12
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	462a      	mov	r2, r5
 800cebe:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <_vfiprintf_r+0x258>)
 800cec0:	a904      	add	r1, sp, #16
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7fe fa8e 	bl	800b3e4 <_printf_i>
 800cec8:	e7e4      	b.n	800ce94 <_vfiprintf_r+0x208>
 800ceca:	bf00      	nop
 800cecc:	0800f540 	.word	0x0800f540
 800ced0:	0800f560 	.word	0x0800f560
 800ced4:	0800f520 	.word	0x0800f520
 800ced8:	0800f50c 	.word	0x0800f50c
 800cedc:	0800f516 	.word	0x0800f516
 800cee0:	0800ae9d 	.word	0x0800ae9d
 800cee4:	0800cc67 	.word	0x0800cc67
 800cee8:	0800f512 	.word	0x0800f512

0800ceec <__swbuf_r>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	460e      	mov	r6, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	4605      	mov	r5, r0
 800cef4:	b118      	cbz	r0, 800cefe <__swbuf_r+0x12>
 800cef6:	6983      	ldr	r3, [r0, #24]
 800cef8:	b90b      	cbnz	r3, 800cefe <__swbuf_r+0x12>
 800cefa:	f000 f9e7 	bl	800d2cc <__sinit>
 800cefe:	4b21      	ldr	r3, [pc, #132]	; (800cf84 <__swbuf_r+0x98>)
 800cf00:	429c      	cmp	r4, r3
 800cf02:	d12b      	bne.n	800cf5c <__swbuf_r+0x70>
 800cf04:	686c      	ldr	r4, [r5, #4]
 800cf06:	69a3      	ldr	r3, [r4, #24]
 800cf08:	60a3      	str	r3, [r4, #8]
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	071a      	lsls	r2, r3, #28
 800cf0e:	d52f      	bpl.n	800cf70 <__swbuf_r+0x84>
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	b36b      	cbz	r3, 800cf70 <__swbuf_r+0x84>
 800cf14:	6923      	ldr	r3, [r4, #16]
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	1ac0      	subs	r0, r0, r3
 800cf1a:	6963      	ldr	r3, [r4, #20]
 800cf1c:	b2f6      	uxtb	r6, r6
 800cf1e:	4283      	cmp	r3, r0
 800cf20:	4637      	mov	r7, r6
 800cf22:	dc04      	bgt.n	800cf2e <__swbuf_r+0x42>
 800cf24:	4621      	mov	r1, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	f000 f93c 	bl	800d1a4 <_fflush_r>
 800cf2c:	bb30      	cbnz	r0, 800cf7c <__swbuf_r+0x90>
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	1c5a      	adds	r2, r3, #1
 800cf38:	6022      	str	r2, [r4, #0]
 800cf3a:	701e      	strb	r6, [r3, #0]
 800cf3c:	6963      	ldr	r3, [r4, #20]
 800cf3e:	3001      	adds	r0, #1
 800cf40:	4283      	cmp	r3, r0
 800cf42:	d004      	beq.n	800cf4e <__swbuf_r+0x62>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	07db      	lsls	r3, r3, #31
 800cf48:	d506      	bpl.n	800cf58 <__swbuf_r+0x6c>
 800cf4a:	2e0a      	cmp	r6, #10
 800cf4c:	d104      	bne.n	800cf58 <__swbuf_r+0x6c>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4628      	mov	r0, r5
 800cf52:	f000 f927 	bl	800d1a4 <_fflush_r>
 800cf56:	b988      	cbnz	r0, 800cf7c <__swbuf_r+0x90>
 800cf58:	4638      	mov	r0, r7
 800cf5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf5c:	4b0a      	ldr	r3, [pc, #40]	; (800cf88 <__swbuf_r+0x9c>)
 800cf5e:	429c      	cmp	r4, r3
 800cf60:	d101      	bne.n	800cf66 <__swbuf_r+0x7a>
 800cf62:	68ac      	ldr	r4, [r5, #8]
 800cf64:	e7cf      	b.n	800cf06 <__swbuf_r+0x1a>
 800cf66:	4b09      	ldr	r3, [pc, #36]	; (800cf8c <__swbuf_r+0xa0>)
 800cf68:	429c      	cmp	r4, r3
 800cf6a:	bf08      	it	eq
 800cf6c:	68ec      	ldreq	r4, [r5, #12]
 800cf6e:	e7ca      	b.n	800cf06 <__swbuf_r+0x1a>
 800cf70:	4621      	mov	r1, r4
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 f81a 	bl	800cfac <__swsetup_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d0cb      	beq.n	800cf14 <__swbuf_r+0x28>
 800cf7c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf80:	e7ea      	b.n	800cf58 <__swbuf_r+0x6c>
 800cf82:	bf00      	nop
 800cf84:	0800f540 	.word	0x0800f540
 800cf88:	0800f560 	.word	0x0800f560
 800cf8c:	0800f520 	.word	0x0800f520

0800cf90 <__ascii_wctomb>:
 800cf90:	b149      	cbz	r1, 800cfa6 <__ascii_wctomb+0x16>
 800cf92:	2aff      	cmp	r2, #255	; 0xff
 800cf94:	bf85      	ittet	hi
 800cf96:	238a      	movhi	r3, #138	; 0x8a
 800cf98:	6003      	strhi	r3, [r0, #0]
 800cf9a:	700a      	strbls	r2, [r1, #0]
 800cf9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfa0:	bf98      	it	ls
 800cfa2:	2001      	movls	r0, #1
 800cfa4:	4770      	bx	lr
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	4770      	bx	lr
	...

0800cfac <__swsetup_r>:
 800cfac:	4b32      	ldr	r3, [pc, #200]	; (800d078 <__swsetup_r+0xcc>)
 800cfae:	b570      	push	{r4, r5, r6, lr}
 800cfb0:	681d      	ldr	r5, [r3, #0]
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	b125      	cbz	r5, 800cfc2 <__swsetup_r+0x16>
 800cfb8:	69ab      	ldr	r3, [r5, #24]
 800cfba:	b913      	cbnz	r3, 800cfc2 <__swsetup_r+0x16>
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 f985 	bl	800d2cc <__sinit>
 800cfc2:	4b2e      	ldr	r3, [pc, #184]	; (800d07c <__swsetup_r+0xd0>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d10f      	bne.n	800cfe8 <__swsetup_r+0x3c>
 800cfc8:	686c      	ldr	r4, [r5, #4]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfd0:	0719      	lsls	r1, r3, #28
 800cfd2:	d42c      	bmi.n	800d02e <__swsetup_r+0x82>
 800cfd4:	06dd      	lsls	r5, r3, #27
 800cfd6:	d411      	bmi.n	800cffc <__swsetup_r+0x50>
 800cfd8:	2309      	movs	r3, #9
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfe0:	81a3      	strh	r3, [r4, #12]
 800cfe2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe6:	e03e      	b.n	800d066 <__swsetup_r+0xba>
 800cfe8:	4b25      	ldr	r3, [pc, #148]	; (800d080 <__swsetup_r+0xd4>)
 800cfea:	429c      	cmp	r4, r3
 800cfec:	d101      	bne.n	800cff2 <__swsetup_r+0x46>
 800cfee:	68ac      	ldr	r4, [r5, #8]
 800cff0:	e7eb      	b.n	800cfca <__swsetup_r+0x1e>
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <__swsetup_r+0xd8>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	bf08      	it	eq
 800cff8:	68ec      	ldreq	r4, [r5, #12]
 800cffa:	e7e6      	b.n	800cfca <__swsetup_r+0x1e>
 800cffc:	0758      	lsls	r0, r3, #29
 800cffe:	d512      	bpl.n	800d026 <__swsetup_r+0x7a>
 800d000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d002:	b141      	cbz	r1, 800d016 <__swsetup_r+0x6a>
 800d004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d008:	4299      	cmp	r1, r3
 800d00a:	d002      	beq.n	800d012 <__swsetup_r+0x66>
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7fd fdc5 	bl	800ab9c <_free_r>
 800d012:	2300      	movs	r3, #0
 800d014:	6363      	str	r3, [r4, #52]	; 0x34
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	2300      	movs	r3, #0
 800d020:	6063      	str	r3, [r4, #4]
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f043 0308 	orr.w	r3, r3, #8
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	6923      	ldr	r3, [r4, #16]
 800d030:	b94b      	cbnz	r3, 800d046 <__swsetup_r+0x9a>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d03c:	d003      	beq.n	800d046 <__swsetup_r+0x9a>
 800d03e:	4621      	mov	r1, r4
 800d040:	4630      	mov	r0, r6
 800d042:	f000 fa09 	bl	800d458 <__smakebuf_r>
 800d046:	89a0      	ldrh	r0, [r4, #12]
 800d048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d04c:	f010 0301 	ands.w	r3, r0, #1
 800d050:	d00a      	beq.n	800d068 <__swsetup_r+0xbc>
 800d052:	2300      	movs	r3, #0
 800d054:	60a3      	str	r3, [r4, #8]
 800d056:	6963      	ldr	r3, [r4, #20]
 800d058:	425b      	negs	r3, r3
 800d05a:	61a3      	str	r3, [r4, #24]
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	b943      	cbnz	r3, 800d072 <__swsetup_r+0xc6>
 800d060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d064:	d1ba      	bne.n	800cfdc <__swsetup_r+0x30>
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	0781      	lsls	r1, r0, #30
 800d06a:	bf58      	it	pl
 800d06c:	6963      	ldrpl	r3, [r4, #20]
 800d06e:	60a3      	str	r3, [r4, #8]
 800d070:	e7f4      	b.n	800d05c <__swsetup_r+0xb0>
 800d072:	2000      	movs	r0, #0
 800d074:	e7f7      	b.n	800d066 <__swsetup_r+0xba>
 800d076:	bf00      	nop
 800d078:	20000010 	.word	0x20000010
 800d07c:	0800f540 	.word	0x0800f540
 800d080:	0800f560 	.word	0x0800f560
 800d084:	0800f520 	.word	0x0800f520

0800d088 <abort>:
 800d088:	b508      	push	{r3, lr}
 800d08a:	2006      	movs	r0, #6
 800d08c:	f000 fa4c 	bl	800d528 <raise>
 800d090:	2001      	movs	r0, #1
 800d092:	f7f8 f92f 	bl	80052f4 <_exit>
	...

0800d098 <__sflush_r>:
 800d098:	898a      	ldrh	r2, [r1, #12]
 800d09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	4605      	mov	r5, r0
 800d0a0:	0710      	lsls	r0, r2, #28
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	d458      	bmi.n	800d158 <__sflush_r+0xc0>
 800d0a6:	684b      	ldr	r3, [r1, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dc05      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dc02      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	d0f9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0c4:	682f      	ldr	r7, [r5, #0]
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	d032      	beq.n	800d130 <__sflush_r+0x98>
 800d0ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	075a      	lsls	r2, r3, #29
 800d0d0:	d505      	bpl.n	800d0de <__sflush_r+0x46>
 800d0d2:	6863      	ldr	r3, [r4, #4]
 800d0d4:	1ac0      	subs	r0, r0, r3
 800d0d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0d8:	b10b      	cbz	r3, 800d0de <__sflush_r+0x46>
 800d0da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0dc:	1ac0      	subs	r0, r0, r3
 800d0de:	2300      	movs	r3, #0
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0e4:	6a21      	ldr	r1, [r4, #32]
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b0      	blx	r6
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	d106      	bne.n	800d0fe <__sflush_r+0x66>
 800d0f0:	6829      	ldr	r1, [r5, #0]
 800d0f2:	291d      	cmp	r1, #29
 800d0f4:	d82c      	bhi.n	800d150 <__sflush_r+0xb8>
 800d0f6:	4a2a      	ldr	r2, [pc, #168]	; (800d1a0 <__sflush_r+0x108>)
 800d0f8:	40ca      	lsrs	r2, r1
 800d0fa:	07d6      	lsls	r6, r2, #31
 800d0fc:	d528      	bpl.n	800d150 <__sflush_r+0xb8>
 800d0fe:	2200      	movs	r2, #0
 800d100:	6062      	str	r2, [r4, #4]
 800d102:	04d9      	lsls	r1, r3, #19
 800d104:	6922      	ldr	r2, [r4, #16]
 800d106:	6022      	str	r2, [r4, #0]
 800d108:	d504      	bpl.n	800d114 <__sflush_r+0x7c>
 800d10a:	1c42      	adds	r2, r0, #1
 800d10c:	d101      	bne.n	800d112 <__sflush_r+0x7a>
 800d10e:	682b      	ldr	r3, [r5, #0]
 800d110:	b903      	cbnz	r3, 800d114 <__sflush_r+0x7c>
 800d112:	6560      	str	r0, [r4, #84]	; 0x54
 800d114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d116:	602f      	str	r7, [r5, #0]
 800d118:	2900      	cmp	r1, #0
 800d11a:	d0ca      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d120:	4299      	cmp	r1, r3
 800d122:	d002      	beq.n	800d12a <__sflush_r+0x92>
 800d124:	4628      	mov	r0, r5
 800d126:	f7fd fd39 	bl	800ab9c <_free_r>
 800d12a:	2000      	movs	r0, #0
 800d12c:	6360      	str	r0, [r4, #52]	; 0x34
 800d12e:	e7c1      	b.n	800d0b4 <__sflush_r+0x1c>
 800d130:	6a21      	ldr	r1, [r4, #32]
 800d132:	2301      	movs	r3, #1
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	1c41      	adds	r1, r0, #1
 800d13a:	d1c7      	bne.n	800d0cc <__sflush_r+0x34>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c4      	beq.n	800d0cc <__sflush_r+0x34>
 800d142:	2b1d      	cmp	r3, #29
 800d144:	d001      	beq.n	800d14a <__sflush_r+0xb2>
 800d146:	2b16      	cmp	r3, #22
 800d148:	d101      	bne.n	800d14e <__sflush_r+0xb6>
 800d14a:	602f      	str	r7, [r5, #0]
 800d14c:	e7b1      	b.n	800d0b2 <__sflush_r+0x1a>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d154:	81a3      	strh	r3, [r4, #12]
 800d156:	e7ad      	b.n	800d0b4 <__sflush_r+0x1c>
 800d158:	690f      	ldr	r7, [r1, #16]
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	d0a9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d15e:	0793      	lsls	r3, r2, #30
 800d160:	680e      	ldr	r6, [r1, #0]
 800d162:	bf08      	it	eq
 800d164:	694b      	ldreq	r3, [r1, #20]
 800d166:	600f      	str	r7, [r1, #0]
 800d168:	bf18      	it	ne
 800d16a:	2300      	movne	r3, #0
 800d16c:	eba6 0807 	sub.w	r8, r6, r7
 800d170:	608b      	str	r3, [r1, #8]
 800d172:	f1b8 0f00 	cmp.w	r8, #0
 800d176:	dd9c      	ble.n	800d0b2 <__sflush_r+0x1a>
 800d178:	6a21      	ldr	r1, [r4, #32]
 800d17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d17c:	4643      	mov	r3, r8
 800d17e:	463a      	mov	r2, r7
 800d180:	4628      	mov	r0, r5
 800d182:	47b0      	blx	r6
 800d184:	2800      	cmp	r0, #0
 800d186:	dc06      	bgt.n	800d196 <__sflush_r+0xfe>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	f04f 30ff 	mov.w	r0, #4294967295
 800d194:	e78e      	b.n	800d0b4 <__sflush_r+0x1c>
 800d196:	4407      	add	r7, r0
 800d198:	eba8 0800 	sub.w	r8, r8, r0
 800d19c:	e7e9      	b.n	800d172 <__sflush_r+0xda>
 800d19e:	bf00      	nop
 800d1a0:	20400001 	.word	0x20400001

0800d1a4 <_fflush_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	b913      	cbnz	r3, 800d1b4 <_fflush_r+0x10>
 800d1ae:	2500      	movs	r5, #0
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	b118      	cbz	r0, 800d1be <_fflush_r+0x1a>
 800d1b6:	6983      	ldr	r3, [r0, #24]
 800d1b8:	b90b      	cbnz	r3, 800d1be <_fflush_r+0x1a>
 800d1ba:	f000 f887 	bl	800d2cc <__sinit>
 800d1be:	4b14      	ldr	r3, [pc, #80]	; (800d210 <_fflush_r+0x6c>)
 800d1c0:	429c      	cmp	r4, r3
 800d1c2:	d11b      	bne.n	800d1fc <_fflush_r+0x58>
 800d1c4:	686c      	ldr	r4, [r5, #4]
 800d1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d0ef      	beq.n	800d1ae <_fflush_r+0xa>
 800d1ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1d0:	07d0      	lsls	r0, r2, #31
 800d1d2:	d404      	bmi.n	800d1de <_fflush_r+0x3a>
 800d1d4:	0599      	lsls	r1, r3, #22
 800d1d6:	d402      	bmi.n	800d1de <_fflush_r+0x3a>
 800d1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1da:	f000 f915 	bl	800d408 <__retarget_lock_acquire_recursive>
 800d1de:	4628      	mov	r0, r5
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	f7ff ff59 	bl	800d098 <__sflush_r>
 800d1e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e8:	07da      	lsls	r2, r3, #31
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	d4e0      	bmi.n	800d1b0 <_fflush_r+0xc>
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	059b      	lsls	r3, r3, #22
 800d1f2:	d4dd      	bmi.n	800d1b0 <_fflush_r+0xc>
 800d1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1f6:	f000 f908 	bl	800d40a <__retarget_lock_release_recursive>
 800d1fa:	e7d9      	b.n	800d1b0 <_fflush_r+0xc>
 800d1fc:	4b05      	ldr	r3, [pc, #20]	; (800d214 <_fflush_r+0x70>)
 800d1fe:	429c      	cmp	r4, r3
 800d200:	d101      	bne.n	800d206 <_fflush_r+0x62>
 800d202:	68ac      	ldr	r4, [r5, #8]
 800d204:	e7df      	b.n	800d1c6 <_fflush_r+0x22>
 800d206:	4b04      	ldr	r3, [pc, #16]	; (800d218 <_fflush_r+0x74>)
 800d208:	429c      	cmp	r4, r3
 800d20a:	bf08      	it	eq
 800d20c:	68ec      	ldreq	r4, [r5, #12]
 800d20e:	e7da      	b.n	800d1c6 <_fflush_r+0x22>
 800d210:	0800f540 	.word	0x0800f540
 800d214:	0800f560 	.word	0x0800f560
 800d218:	0800f520 	.word	0x0800f520

0800d21c <std>:
 800d21c:	2300      	movs	r3, #0
 800d21e:	b510      	push	{r4, lr}
 800d220:	4604      	mov	r4, r0
 800d222:	e9c0 3300 	strd	r3, r3, [r0]
 800d226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d22a:	6083      	str	r3, [r0, #8]
 800d22c:	8181      	strh	r1, [r0, #12]
 800d22e:	6643      	str	r3, [r0, #100]	; 0x64
 800d230:	81c2      	strh	r2, [r0, #14]
 800d232:	6183      	str	r3, [r0, #24]
 800d234:	4619      	mov	r1, r3
 800d236:	2208      	movs	r2, #8
 800d238:	305c      	adds	r0, #92	; 0x5c
 800d23a:	f7fd fca7 	bl	800ab8c <memset>
 800d23e:	4b05      	ldr	r3, [pc, #20]	; (800d254 <std+0x38>)
 800d240:	6263      	str	r3, [r4, #36]	; 0x24
 800d242:	4b05      	ldr	r3, [pc, #20]	; (800d258 <std+0x3c>)
 800d244:	62a3      	str	r3, [r4, #40]	; 0x28
 800d246:	4b05      	ldr	r3, [pc, #20]	; (800d25c <std+0x40>)
 800d248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <std+0x44>)
 800d24c:	6224      	str	r4, [r4, #32]
 800d24e:	6323      	str	r3, [r4, #48]	; 0x30
 800d250:	bd10      	pop	{r4, pc}
 800d252:	bf00      	nop
 800d254:	0800d561 	.word	0x0800d561
 800d258:	0800d583 	.word	0x0800d583
 800d25c:	0800d5bb 	.word	0x0800d5bb
 800d260:	0800d5df 	.word	0x0800d5df

0800d264 <_cleanup_r>:
 800d264:	4901      	ldr	r1, [pc, #4]	; (800d26c <_cleanup_r+0x8>)
 800d266:	f000 b8af 	b.w	800d3c8 <_fwalk_reent>
 800d26a:	bf00      	nop
 800d26c:	0800d1a5 	.word	0x0800d1a5

0800d270 <__sfmoreglue>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	2268      	movs	r2, #104	; 0x68
 800d274:	1e4d      	subs	r5, r1, #1
 800d276:	4355      	muls	r5, r2
 800d278:	460e      	mov	r6, r1
 800d27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d27e:	f7fd fcf9 	bl	800ac74 <_malloc_r>
 800d282:	4604      	mov	r4, r0
 800d284:	b140      	cbz	r0, 800d298 <__sfmoreglue+0x28>
 800d286:	2100      	movs	r1, #0
 800d288:	e9c0 1600 	strd	r1, r6, [r0]
 800d28c:	300c      	adds	r0, #12
 800d28e:	60a0      	str	r0, [r4, #8]
 800d290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d294:	f7fd fc7a 	bl	800ab8c <memset>
 800d298:	4620      	mov	r0, r4
 800d29a:	bd70      	pop	{r4, r5, r6, pc}

0800d29c <__sfp_lock_acquire>:
 800d29c:	4801      	ldr	r0, [pc, #4]	; (800d2a4 <__sfp_lock_acquire+0x8>)
 800d29e:	f000 b8b3 	b.w	800d408 <__retarget_lock_acquire_recursive>
 800d2a2:	bf00      	nop
 800d2a4:	20000955 	.word	0x20000955

0800d2a8 <__sfp_lock_release>:
 800d2a8:	4801      	ldr	r0, [pc, #4]	; (800d2b0 <__sfp_lock_release+0x8>)
 800d2aa:	f000 b8ae 	b.w	800d40a <__retarget_lock_release_recursive>
 800d2ae:	bf00      	nop
 800d2b0:	20000955 	.word	0x20000955

0800d2b4 <__sinit_lock_acquire>:
 800d2b4:	4801      	ldr	r0, [pc, #4]	; (800d2bc <__sinit_lock_acquire+0x8>)
 800d2b6:	f000 b8a7 	b.w	800d408 <__retarget_lock_acquire_recursive>
 800d2ba:	bf00      	nop
 800d2bc:	20000956 	.word	0x20000956

0800d2c0 <__sinit_lock_release>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	; (800d2c8 <__sinit_lock_release+0x8>)
 800d2c2:	f000 b8a2 	b.w	800d40a <__retarget_lock_release_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	20000956 	.word	0x20000956

0800d2cc <__sinit>:
 800d2cc:	b510      	push	{r4, lr}
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	f7ff fff0 	bl	800d2b4 <__sinit_lock_acquire>
 800d2d4:	69a3      	ldr	r3, [r4, #24]
 800d2d6:	b11b      	cbz	r3, 800d2e0 <__sinit+0x14>
 800d2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2dc:	f7ff bff0 	b.w	800d2c0 <__sinit_lock_release>
 800d2e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2e4:	6523      	str	r3, [r4, #80]	; 0x50
 800d2e6:	4b13      	ldr	r3, [pc, #76]	; (800d334 <__sinit+0x68>)
 800d2e8:	4a13      	ldr	r2, [pc, #76]	; (800d338 <__sinit+0x6c>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	bf04      	itt	eq
 800d2f2:	2301      	moveq	r3, #1
 800d2f4:	61a3      	streq	r3, [r4, #24]
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f000 f820 	bl	800d33c <__sfp>
 800d2fc:	6060      	str	r0, [r4, #4]
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 f81c 	bl	800d33c <__sfp>
 800d304:	60a0      	str	r0, [r4, #8]
 800d306:	4620      	mov	r0, r4
 800d308:	f000 f818 	bl	800d33c <__sfp>
 800d30c:	2200      	movs	r2, #0
 800d30e:	60e0      	str	r0, [r4, #12]
 800d310:	2104      	movs	r1, #4
 800d312:	6860      	ldr	r0, [r4, #4]
 800d314:	f7ff ff82 	bl	800d21c <std>
 800d318:	68a0      	ldr	r0, [r4, #8]
 800d31a:	2201      	movs	r2, #1
 800d31c:	2109      	movs	r1, #9
 800d31e:	f7ff ff7d 	bl	800d21c <std>
 800d322:	68e0      	ldr	r0, [r4, #12]
 800d324:	2202      	movs	r2, #2
 800d326:	2112      	movs	r1, #18
 800d328:	f7ff ff78 	bl	800d21c <std>
 800d32c:	2301      	movs	r3, #1
 800d32e:	61a3      	str	r3, [r4, #24]
 800d330:	e7d2      	b.n	800d2d8 <__sinit+0xc>
 800d332:	bf00      	nop
 800d334:	0800f2a4 	.word	0x0800f2a4
 800d338:	0800d265 	.word	0x0800d265

0800d33c <__sfp>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	4607      	mov	r7, r0
 800d340:	f7ff ffac 	bl	800d29c <__sfp_lock_acquire>
 800d344:	4b1e      	ldr	r3, [pc, #120]	; (800d3c0 <__sfp+0x84>)
 800d346:	681e      	ldr	r6, [r3, #0]
 800d348:	69b3      	ldr	r3, [r6, #24]
 800d34a:	b913      	cbnz	r3, 800d352 <__sfp+0x16>
 800d34c:	4630      	mov	r0, r6
 800d34e:	f7ff ffbd 	bl	800d2cc <__sinit>
 800d352:	3648      	adds	r6, #72	; 0x48
 800d354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d358:	3b01      	subs	r3, #1
 800d35a:	d503      	bpl.n	800d364 <__sfp+0x28>
 800d35c:	6833      	ldr	r3, [r6, #0]
 800d35e:	b30b      	cbz	r3, 800d3a4 <__sfp+0x68>
 800d360:	6836      	ldr	r6, [r6, #0]
 800d362:	e7f7      	b.n	800d354 <__sfp+0x18>
 800d364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d368:	b9d5      	cbnz	r5, 800d3a0 <__sfp+0x64>
 800d36a:	4b16      	ldr	r3, [pc, #88]	; (800d3c4 <__sfp+0x88>)
 800d36c:	60e3      	str	r3, [r4, #12]
 800d36e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d372:	6665      	str	r5, [r4, #100]	; 0x64
 800d374:	f000 f847 	bl	800d406 <__retarget_lock_init_recursive>
 800d378:	f7ff ff96 	bl	800d2a8 <__sfp_lock_release>
 800d37c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d384:	6025      	str	r5, [r4, #0]
 800d386:	61a5      	str	r5, [r4, #24]
 800d388:	2208      	movs	r2, #8
 800d38a:	4629      	mov	r1, r5
 800d38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d390:	f7fd fbfc 	bl	800ab8c <memset>
 800d394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d39c:	4620      	mov	r0, r4
 800d39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a0:	3468      	adds	r4, #104	; 0x68
 800d3a2:	e7d9      	b.n	800d358 <__sfp+0x1c>
 800d3a4:	2104      	movs	r1, #4
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	f7ff ff62 	bl	800d270 <__sfmoreglue>
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	6030      	str	r0, [r6, #0]
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	d1d5      	bne.n	800d360 <__sfp+0x24>
 800d3b4:	f7ff ff78 	bl	800d2a8 <__sfp_lock_release>
 800d3b8:	230c      	movs	r3, #12
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	e7ee      	b.n	800d39c <__sfp+0x60>
 800d3be:	bf00      	nop
 800d3c0:	0800f2a4 	.word	0x0800f2a4
 800d3c4:	ffff0001 	.word	0xffff0001

0800d3c8 <_fwalk_reent>:
 800d3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	4688      	mov	r8, r1
 800d3d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3d4:	2700      	movs	r7, #0
 800d3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3da:	f1b9 0901 	subs.w	r9, r9, #1
 800d3de:	d505      	bpl.n	800d3ec <_fwalk_reent+0x24>
 800d3e0:	6824      	ldr	r4, [r4, #0]
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	d1f7      	bne.n	800d3d6 <_fwalk_reent+0xe>
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ec:	89ab      	ldrh	r3, [r5, #12]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d907      	bls.n	800d402 <_fwalk_reent+0x3a>
 800d3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	d003      	beq.n	800d402 <_fwalk_reent+0x3a>
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	47c0      	blx	r8
 800d400:	4307      	orrs	r7, r0
 800d402:	3568      	adds	r5, #104	; 0x68
 800d404:	e7e9      	b.n	800d3da <_fwalk_reent+0x12>

0800d406 <__retarget_lock_init_recursive>:
 800d406:	4770      	bx	lr

0800d408 <__retarget_lock_acquire_recursive>:
 800d408:	4770      	bx	lr

0800d40a <__retarget_lock_release_recursive>:
 800d40a:	4770      	bx	lr

0800d40c <__swhatbuf_r>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	460e      	mov	r6, r1
 800d410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d414:	2900      	cmp	r1, #0
 800d416:	b096      	sub	sp, #88	; 0x58
 800d418:	4614      	mov	r4, r2
 800d41a:	461d      	mov	r5, r3
 800d41c:	da08      	bge.n	800d430 <__swhatbuf_r+0x24>
 800d41e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	061a      	lsls	r2, r3, #24
 800d428:	d410      	bmi.n	800d44c <__swhatbuf_r+0x40>
 800d42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d42e:	e00e      	b.n	800d44e <__swhatbuf_r+0x42>
 800d430:	466a      	mov	r2, sp
 800d432:	f000 f8fb 	bl	800d62c <_fstat_r>
 800d436:	2800      	cmp	r0, #0
 800d438:	dbf1      	blt.n	800d41e <__swhatbuf_r+0x12>
 800d43a:	9a01      	ldr	r2, [sp, #4]
 800d43c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d444:	425a      	negs	r2, r3
 800d446:	415a      	adcs	r2, r3
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	e7ee      	b.n	800d42a <__swhatbuf_r+0x1e>
 800d44c:	2340      	movs	r3, #64	; 0x40
 800d44e:	2000      	movs	r0, #0
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	b016      	add	sp, #88	; 0x58
 800d454:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d458 <__smakebuf_r>:
 800d458:	898b      	ldrh	r3, [r1, #12]
 800d45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d45c:	079d      	lsls	r5, r3, #30
 800d45e:	4606      	mov	r6, r0
 800d460:	460c      	mov	r4, r1
 800d462:	d507      	bpl.n	800d474 <__smakebuf_r+0x1c>
 800d464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	2301      	movs	r3, #1
 800d46e:	6163      	str	r3, [r4, #20]
 800d470:	b002      	add	sp, #8
 800d472:	bd70      	pop	{r4, r5, r6, pc}
 800d474:	ab01      	add	r3, sp, #4
 800d476:	466a      	mov	r2, sp
 800d478:	f7ff ffc8 	bl	800d40c <__swhatbuf_r>
 800d47c:	9900      	ldr	r1, [sp, #0]
 800d47e:	4605      	mov	r5, r0
 800d480:	4630      	mov	r0, r6
 800d482:	f7fd fbf7 	bl	800ac74 <_malloc_r>
 800d486:	b948      	cbnz	r0, 800d49c <__smakebuf_r+0x44>
 800d488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d48c:	059a      	lsls	r2, r3, #22
 800d48e:	d4ef      	bmi.n	800d470 <__smakebuf_r+0x18>
 800d490:	f023 0303 	bic.w	r3, r3, #3
 800d494:	f043 0302 	orr.w	r3, r3, #2
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	e7e3      	b.n	800d464 <__smakebuf_r+0xc>
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <__smakebuf_r+0x7c>)
 800d49e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4a0:	89a3      	ldrh	r3, [r4, #12]
 800d4a2:	6020      	str	r0, [r4, #0]
 800d4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	9b00      	ldr	r3, [sp, #0]
 800d4ac:	6163      	str	r3, [r4, #20]
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	6120      	str	r0, [r4, #16]
 800d4b2:	b15b      	cbz	r3, 800d4cc <__smakebuf_r+0x74>
 800d4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f000 f8c9 	bl	800d650 <_isatty_r>
 800d4be:	b128      	cbz	r0, 800d4cc <__smakebuf_r+0x74>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	f023 0303 	bic.w	r3, r3, #3
 800d4c6:	f043 0301 	orr.w	r3, r3, #1
 800d4ca:	81a3      	strh	r3, [r4, #12]
 800d4cc:	89a0      	ldrh	r0, [r4, #12]
 800d4ce:	4305      	orrs	r5, r0
 800d4d0:	81a5      	strh	r5, [r4, #12]
 800d4d2:	e7cd      	b.n	800d470 <__smakebuf_r+0x18>
 800d4d4:	0800d265 	.word	0x0800d265

0800d4d8 <_raise_r>:
 800d4d8:	291f      	cmp	r1, #31
 800d4da:	b538      	push	{r3, r4, r5, lr}
 800d4dc:	4604      	mov	r4, r0
 800d4de:	460d      	mov	r5, r1
 800d4e0:	d904      	bls.n	800d4ec <_raise_r+0x14>
 800d4e2:	2316      	movs	r3, #22
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4ee:	b112      	cbz	r2, 800d4f6 <_raise_r+0x1e>
 800d4f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4f4:	b94b      	cbnz	r3, 800d50a <_raise_r+0x32>
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f000 f830 	bl	800d55c <_getpid_r>
 800d4fc:	462a      	mov	r2, r5
 800d4fe:	4601      	mov	r1, r0
 800d500:	4620      	mov	r0, r4
 800d502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d506:	f000 b817 	b.w	800d538 <_kill_r>
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d00a      	beq.n	800d524 <_raise_r+0x4c>
 800d50e:	1c59      	adds	r1, r3, #1
 800d510:	d103      	bne.n	800d51a <_raise_r+0x42>
 800d512:	2316      	movs	r3, #22
 800d514:	6003      	str	r3, [r0, #0]
 800d516:	2001      	movs	r0, #1
 800d518:	e7e7      	b.n	800d4ea <_raise_r+0x12>
 800d51a:	2400      	movs	r4, #0
 800d51c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d520:	4628      	mov	r0, r5
 800d522:	4798      	blx	r3
 800d524:	2000      	movs	r0, #0
 800d526:	e7e0      	b.n	800d4ea <_raise_r+0x12>

0800d528 <raise>:
 800d528:	4b02      	ldr	r3, [pc, #8]	; (800d534 <raise+0xc>)
 800d52a:	4601      	mov	r1, r0
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	f7ff bfd3 	b.w	800d4d8 <_raise_r>
 800d532:	bf00      	nop
 800d534:	20000010 	.word	0x20000010

0800d538 <_kill_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d07      	ldr	r5, [pc, #28]	; (800d558 <_kill_r+0x20>)
 800d53c:	2300      	movs	r3, #0
 800d53e:	4604      	mov	r4, r0
 800d540:	4608      	mov	r0, r1
 800d542:	4611      	mov	r1, r2
 800d544:	602b      	str	r3, [r5, #0]
 800d546:	f7f7 fec5 	bl	80052d4 <_kill>
 800d54a:	1c43      	adds	r3, r0, #1
 800d54c:	d102      	bne.n	800d554 <_kill_r+0x1c>
 800d54e:	682b      	ldr	r3, [r5, #0]
 800d550:	b103      	cbz	r3, 800d554 <_kill_r+0x1c>
 800d552:	6023      	str	r3, [r4, #0]
 800d554:	bd38      	pop	{r3, r4, r5, pc}
 800d556:	bf00      	nop
 800d558:	20000950 	.word	0x20000950

0800d55c <_getpid_r>:
 800d55c:	f7f7 beb2 	b.w	80052c4 <_getpid>

0800d560 <__sread>:
 800d560:	b510      	push	{r4, lr}
 800d562:	460c      	mov	r4, r1
 800d564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d568:	f000 f894 	bl	800d694 <_read_r>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	bfab      	itete	ge
 800d570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d572:	89a3      	ldrhlt	r3, [r4, #12]
 800d574:	181b      	addge	r3, r3, r0
 800d576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d57a:	bfac      	ite	ge
 800d57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d57e:	81a3      	strhlt	r3, [r4, #12]
 800d580:	bd10      	pop	{r4, pc}

0800d582 <__swrite>:
 800d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	461f      	mov	r7, r3
 800d588:	898b      	ldrh	r3, [r1, #12]
 800d58a:	05db      	lsls	r3, r3, #23
 800d58c:	4605      	mov	r5, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	4616      	mov	r6, r2
 800d592:	d505      	bpl.n	800d5a0 <__swrite+0x1e>
 800d594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d598:	2302      	movs	r3, #2
 800d59a:	2200      	movs	r2, #0
 800d59c:	f000 f868 	bl	800d670 <_lseek_r>
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b6:	f000 b817 	b.w	800d5e8 <_write_r>

0800d5ba <__sseek>:
 800d5ba:	b510      	push	{r4, lr}
 800d5bc:	460c      	mov	r4, r1
 800d5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c2:	f000 f855 	bl	800d670 <_lseek_r>
 800d5c6:	1c43      	adds	r3, r0, #1
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	bf15      	itete	ne
 800d5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5d6:	81a3      	strheq	r3, [r4, #12]
 800d5d8:	bf18      	it	ne
 800d5da:	81a3      	strhne	r3, [r4, #12]
 800d5dc:	bd10      	pop	{r4, pc}

0800d5de <__sclose>:
 800d5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e2:	f000 b813 	b.w	800d60c <_close_r>
	...

0800d5e8 <_write_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4d07      	ldr	r5, [pc, #28]	; (800d608 <_write_r+0x20>)
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	4608      	mov	r0, r1
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	602a      	str	r2, [r5, #0]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	f7f7 fea3 	bl	8005342 <_write>
 800d5fc:	1c43      	adds	r3, r0, #1
 800d5fe:	d102      	bne.n	800d606 <_write_r+0x1e>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	b103      	cbz	r3, 800d606 <_write_r+0x1e>
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	20000950 	.word	0x20000950

0800d60c <_close_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d06      	ldr	r5, [pc, #24]	; (800d628 <_close_r+0x1c>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	f7f7 feaf 	bl	800537a <_close>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_close_r+0x1a>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_close_r+0x1a>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20000950 	.word	0x20000950

0800d62c <_fstat_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_fstat_r+0x20>)
 800d630:	2300      	movs	r3, #0
 800d632:	4604      	mov	r4, r0
 800d634:	4608      	mov	r0, r1
 800d636:	4611      	mov	r1, r2
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	f7f7 feaa 	bl	8005392 <_fstat>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	d102      	bne.n	800d648 <_fstat_r+0x1c>
 800d642:	682b      	ldr	r3, [r5, #0]
 800d644:	b103      	cbz	r3, 800d648 <_fstat_r+0x1c>
 800d646:	6023      	str	r3, [r4, #0]
 800d648:	bd38      	pop	{r3, r4, r5, pc}
 800d64a:	bf00      	nop
 800d64c:	20000950 	.word	0x20000950

0800d650 <_isatty_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d06      	ldr	r5, [pc, #24]	; (800d66c <_isatty_r+0x1c>)
 800d654:	2300      	movs	r3, #0
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	f7f7 fea9 	bl	80053b2 <_isatty>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d102      	bne.n	800d66a <_isatty_r+0x1a>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b103      	cbz	r3, 800d66a <_isatty_r+0x1a>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	20000950 	.word	0x20000950

0800d670 <_lseek_r>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	4d07      	ldr	r5, [pc, #28]	; (800d690 <_lseek_r+0x20>)
 800d674:	4604      	mov	r4, r0
 800d676:	4608      	mov	r0, r1
 800d678:	4611      	mov	r1, r2
 800d67a:	2200      	movs	r2, #0
 800d67c:	602a      	str	r2, [r5, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	f7f7 fea2 	bl	80053c8 <_lseek>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_lseek_r+0x1e>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_lseek_r+0x1e>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	20000950 	.word	0x20000950

0800d694 <_read_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4d07      	ldr	r5, [pc, #28]	; (800d6b4 <_read_r+0x20>)
 800d698:	4604      	mov	r4, r0
 800d69a:	4608      	mov	r0, r1
 800d69c:	4611      	mov	r1, r2
 800d69e:	2200      	movs	r2, #0
 800d6a0:	602a      	str	r2, [r5, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f7f7 fe30 	bl	8005308 <_read>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d102      	bne.n	800d6b2 <_read_r+0x1e>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	b103      	cbz	r3, 800d6b2 <_read_r+0x1e>
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	20000950 	.word	0x20000950

0800d6b8 <_init>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	bf00      	nop
 800d6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6be:	bc08      	pop	{r3}
 800d6c0:	469e      	mov	lr, r3
 800d6c2:	4770      	bx	lr

0800d6c4 <_fini>:
 800d6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c6:	bf00      	nop
 800d6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ca:	bc08      	pop	{r3}
 800d6cc:	469e      	mov	lr, r3
 800d6ce:	4770      	bx	lr
