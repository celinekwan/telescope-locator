
stel-interrupts-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e20  08003e20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003e34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003e34  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7e  00000000  00000000  0002c60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002ec30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b61  00000000  00000000  0002f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9c3  00000000  00000000  00051089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd729  00000000  00000000  0005ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  0012a1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d84 	.word	0x08003d84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003d84 	.word	0x08003d84

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_UART_RxCpltCallback>:
char dec_str[10] = {0};
int result1;
int result2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	result1 = strcmp(stel_cmds, "#:GR#");
 80004f4:	491e      	ldr	r1, [pc, #120]	; (8000570 <HAL_UART_RxCpltCallback+0x84>)
 80004f6:	481f      	ldr	r0, [pc, #124]	; (8000574 <HAL_UART_RxCpltCallback+0x88>)
 80004f8:	f7ff fe6c 	bl	80001d4 <strcmp>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <HAL_UART_RxCpltCallback+0x8c>)
 8000500:	6013      	str	r3, [r2, #0]
	result2 = strcmp(stel_cmds, "#:GD#");
 8000502:	491e      	ldr	r1, [pc, #120]	; (800057c <HAL_UART_RxCpltCallback+0x90>)
 8000504:	481b      	ldr	r0, [pc, #108]	; (8000574 <HAL_UART_RxCpltCallback+0x88>)
 8000506:	f7ff fe65 	bl	80001d4 <strcmp>
 800050a:	4603      	mov	r3, r0
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 800050e:	6013      	str	r3, [r2, #0]

	if (result1==0) {
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <HAL_UART_RxCpltCallback+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d105      	bne.n	8000524 <HAL_UART_RxCpltCallback+0x38>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)ra_str, sizeof(ra_str));
 8000518:	2209      	movs	r2, #9
 800051a:	491a      	ldr	r1, [pc, #104]	; (8000584 <HAL_UART_RxCpltCallback+0x98>)
 800051c:	481a      	ldr	r0, [pc, #104]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 800051e:	f002 f87f 	bl	8002620 <HAL_UART_Transmit_IT>
 8000522:	e00e      	b.n	8000542 <HAL_UART_RxCpltCallback+0x56>
	} else if (result2==0) {
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <HAL_UART_RxCpltCallback+0x94>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d105      	bne.n	8000538 <HAL_UART_RxCpltCallback+0x4c>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)dec_str, sizeof(dec_str));
 800052c:	220a      	movs	r2, #10
 800052e:	4917      	ldr	r1, [pc, #92]	; (800058c <HAL_UART_RxCpltCallback+0xa0>)
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000532:	f002 f875 	bl	8002620 <HAL_UART_Transmit_IT>
 8000536:	e004      	b.n	8000542 <HAL_UART_RxCpltCallback+0x56>
	} else {
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)"\r\n Nothing", sizeof("\r\n Nothing"));
 8000538:	220b      	movs	r2, #11
 800053a:	4915      	ldr	r1, [pc, #84]	; (8000590 <HAL_UART_RxCpltCallback+0xa4>)
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 800053e:	f002 f86f 	bl	8002620 <HAL_UART_Transmit_IT>
	}

	for (int i=0; i<sizeof(stel_cmds); i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e007      	b.n	8000558 <HAL_UART_RxCpltCallback+0x6c>
		stel_cmds[i] = 0;
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <HAL_UART_RxCpltCallback+0x88>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<sizeof(stel_cmds); i++) {
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b04      	cmp	r3, #4
 800055c:	d9f4      	bls.n	8000548 <HAL_UART_RxCpltCallback+0x5c>
	}

	HAL_UART_Receive_IT(&huart2, stel_cmds, 5);
 800055e:	2205      	movs	r2, #5
 8000560:	4904      	ldr	r1, [pc, #16]	; (8000574 <HAL_UART_RxCpltCallback+0x88>)
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <HAL_UART_RxCpltCallback+0x9c>)
 8000564:	f002 f8ca 	bl	80026fc <HAL_UART_Receive_IT>
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	08003d9c 	.word	0x08003d9c
 8000574:	200000ac 	.word	0x200000ac
 8000578:	200000cc 	.word	0x200000cc
 800057c:	08003da4 	.word	0x08003da4
 8000580:	200000d0 	.word	0x200000d0
 8000584:	200000b4 	.word	0x200000b4
 8000588:	20000028 	.word	0x20000028
 800058c:	200000c0 	.word	0x200000c0
 8000590:	08003dac 	.word	0x08003dac

08000594 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fa14 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f82c 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f8ac 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f87a 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  strcpy(ra_str,"16:29:25#");
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <main+0x4c>)
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x50>)
 80005c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c2:	c303      	stmia	r3!, {r0, r1}
 80005c4:	801a      	strh	r2, [r3, #0]
  strcpy(dec_str,"-26'25:59#");
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <main+0x54>)
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x58>)
 80005ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80005cc:	c303      	stmia	r3!, {r0, r1}
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	3302      	adds	r3, #2
 80005d2:	0c12      	lsrs	r2, r2, #16
 80005d4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT (&huart2, stel_cmds, 5);
 80005d6:	2205      	movs	r2, #5
 80005d8:	490a      	ldr	r1, [pc, #40]	; (8000604 <main+0x5c>)
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <main+0x60>)
 80005dc:	f002 f88e 	bl	80026fc <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (LD4_GPIO_Port, LD4_Pin);
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 fdb9 	bl	800115c <HAL_GPIO_TogglePin>
	  HAL_Delay (250);
 80005ea:	20fa      	movs	r0, #250	; 0xfa
 80005ec:	f000 fa70 	bl	8000ad0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LD4_GPIO_Port, LD4_Pin);
 80005f0:	e7f6      	b.n	80005e0 <main+0x38>
 80005f2:	bf00      	nop
 80005f4:	200000b4 	.word	0x200000b4
 80005f8:	08003db8 	.word	0x08003db8
 80005fc:	200000c0 	.word	0x200000c0
 8000600:	08003dc4 	.word	0x08003dc4
 8000604:	200000ac 	.word	0x200000ac
 8000608:	20000028 	.word	0x20000028

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fbaa 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f000 fdbb 	bl	80011ac <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f8ce 	bl	80007dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fdf2 	bl	8001258 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f8af 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f9f2 	bl	8001a80 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f89b 	bl	80007dc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f001 ff46 	bl	8002584 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f86d 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 fccd 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000798:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0xc8>)
 80007aa:	f000 fb45 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80007ae:	2320      	movs	r3, #32
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 fb36 	bl	8000e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0a4      	sub	sp, #144	; 0x90
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2268      	movs	r2, #104	; 0x68
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fa8f 	bl	8003d74 <memset>
  if(huart->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <HAL_UART_MspInit+0xc0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d142      	bne.n	80008e6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fb2b 	bl	8001ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000878:	f7ff ffb0 	bl	80007dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000886:	6593      	str	r3, [r2, #88]	; 0x58
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0xc4>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ac:	230c      	movs	r3, #12
 80008ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c2:	2307      	movs	r3, #7
 80008c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fab1 	bl	8000e38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 f9f7 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e0:	2026      	movs	r0, #38	; 0x26
 80008e2:	f000 fa10 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3790      	adds	r7, #144	; 0x90
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8a4 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USART2_IRQHandler+0x10>)
 8000952:	f001 ff29 	bl	80027a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 f9bb 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fdf7 	bl	80005a8 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	200000d8 	.word	0x200000d8

080009d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_Init+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f962 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f80f 	bl	8000a18 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff feef 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f96d 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f937 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000d4 	.word	0x200000d4

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000d4 	.word	0x200000d4

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d008      	beq.n	8000d64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2204      	movs	r2, #4
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e022      	b.n	8000daa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 020e 	bic.w	r2, r2, #14
 8000d72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d88:	f003 021c 	and.w	r2, r3, #28
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d005      	beq.n	8000dda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e029      	b.n	8000e2e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 020e 	bic.w	r2, r2, #14
 8000de8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 021c 	and.w	r2, r3, #28
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
    }
  }
  return status;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e154      	b.n	80010f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8146 	beq.w	80010ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80a0 	beq.w	80010ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fac:	4b58      	ldr	r3, [pc, #352]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	4a57      	ldr	r2, [pc, #348]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HAL_GPIO_Init+0x2d8>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc4:	4a53      	ldr	r2, [pc, #332]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fee:	d019      	beq.n	8001024 <HAL_GPIO_Init+0x1ec>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2e0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1e8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2e4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1e4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a47      	ldr	r2, [pc, #284]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1e0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1dc>
 8001010:	2304      	movs	r3, #4
 8001012:	e008      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001014:	2307      	movs	r3, #7
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001018:	2303      	movs	r3, #3
 800101a:	e004      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 800101c:	2302      	movs	r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <HAL_GPIO_Init+0x1ee>
 8001024:	2300      	movs	r3, #0
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001036:	4937      	ldr	r1, [pc, #220]	; (8001114 <HAL_GPIO_Init+0x2dc>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f47f aea3 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	48000400 	.word	0x48000400
 800111c:	48000800 	.word	0x48000800
 8001120:	48000c00 	.word	0x48000c00
 8001124:	48001000 	.word	0x48001000
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001148:	e002      	b.n	8001150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43d9      	mvns	r1, r3
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	400b      	ands	r3, r1
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000

080011ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ba:	d130      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c8:	d038      	beq.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2232      	movs	r2, #50	; 0x32
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f0:	e002      	b.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001204:	d102      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f2      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001218:	d110      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e00f      	b.n	800123e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122a:	d007      	beq.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	f000 bc02 	b.w	8001a70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80e4 	beq.w	8001456 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_RCC_OscConfig+0x4c>
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	f040 808b 	bne.w	80013b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	f040 8087 	bne.w	80013b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a4:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x64>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e3d9      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_RCC_OscConfig+0x7e>
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d4:	e005      	b.n	80012e2 <HAL_RCC_OscConfig+0x8a>
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d223      	bcs.n	800132e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fd8c 	bl	8001e08 <RCC_SetFlashLatencyFromMSIRange>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ba      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fa:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a72      	ldr	r2, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	496d      	ldr	r1, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	4968      	ldr	r1, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e025      	b.n	800137a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4960      	ldr	r1, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	495b      	ldr	r1, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fd4c 	bl	8001e08 <RCC_SetFlashLatencyFromMSIRange>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e37a      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800137a:	f000 fc81 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	4950      	ldr	r1, [pc, #320]	; (80014cc <HAL_RCC_OscConfig+0x274>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_RCC_OscConfig+0x278>)
 8001398:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <HAL_RCC_OscConfig+0x27c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fb3a 	bl	8000a18 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d052      	beq.n	8001454 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	e35e      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d032      	beq.n	8001420 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb77 	bl	8000ab8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb73 	bl	8000ab8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e347      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a35      	ldr	r2, [pc, #212]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4930      	ldr	r1, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	492b      	ldr	r1, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
 800141e:	e01a      	b.n	8001456 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb44 	bl	8000ab8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001434:	f7ff fb40 	bl	8000ab8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e314      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1dc>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d073      	beq.n	800154a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b08      	cmp	r3, #8
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x21c>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d10e      	bne.n	800148c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d063      	beq.n	8001548 <HAL_RCC_OscConfig+0x2f0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d15f      	bne.n	8001548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e2f1      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x24c>
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e025      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d114      	bne.n	80014d8 <HAL_RCC_OscConfig+0x280>
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e013      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08003dd0 	.word	0x08003dd0
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a9f      	ldr	r2, [pc, #636]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a9c      	ldr	r2, [pc, #624]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fade 	bl	8000ab8 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fada 	bl	8000ab8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2ae      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001512:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2a8>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff faca 	bl	8000ab8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fac6 	bl	8000ab8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e29a      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d0>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d060      	beq.n	8001618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x310>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d119      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d116      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x328>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e277      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	4973      	ldr	r1, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	e040      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa85 	bl	8000ab8 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa81 	bl	8000ab8 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e255      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	495f      	ldr	r1, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e018      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5c      	ldr	r2, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa61 	bl	8000ab8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fa5d 	bl	8000ab8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e231      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d03c      	beq.n	800169e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fa3c 	bl	8000ab8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fa38 	bl	8000ab8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e20c      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ef      	beq.n	8001644 <HAL_RCC_OscConfig+0x3ec>
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa1f 	bl	8000ab8 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fa1b 	bl	8000ab8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1ef      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a6 	beq.w	80017f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d118      	bne.n	8001716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f9e2 	bl	8000ab8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f8:	f7ff f9de 	bl	8000ab8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1b2      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x4d8>
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172e:	e029      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d115      	bne.n	8001764 <HAL_RCC_OscConfig+0x50c>
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001758:	e014      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	4b9a      	ldr	r3, [pc, #616]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	4a99      	ldr	r2, [pc, #612]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a95      	ldr	r2, [pc, #596]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff f994 	bl	8000ab8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff f990 	bl	8000ab8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e162      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ed      	beq.n	8001794 <HAL_RCC_OscConfig+0x53c>
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff f97d 	bl	8000ab8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff f979 	bl	8000ab8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e14b      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ed      	bne.n	80017c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800180c:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800180e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001812:	4a6f      	ldr	r2, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f94c 	bl	8000ab8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001824:	f7ff f948 	bl	8000ab8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e11c      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x5cc>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001846:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184c:	4a60      	ldr	r2, [pc, #384]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff f92f 	bl	8000ab8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185e:	f7ff f92b 	bl	8000ab8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0ff      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80f3 	beq.w	8001a6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b02      	cmp	r3, #2
 800188e:	f040 80c9 	bne.w	8001a24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001892:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d12c      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	3b01      	subs	r3, #1
 80018b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d123      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d11b      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d113      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d109      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d06b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d062      	beq.n	80019cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0ac      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001922:	f7ff f8c9 	bl	8000ab8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f8c5 	bl	8000ab8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e099      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCC_OscConfig+0x77c>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001958:	3a01      	subs	r2, #1
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001962:	0212      	lsls	r2, r2, #8
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800196a:	0852      	lsrs	r2, r2, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	0552      	lsls	r2, r2, #21
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001976:	0852      	lsrs	r2, r2, #1
 8001978:	3a01      	subs	r2, #1
 800197a:	0652      	lsls	r2, r2, #25
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001982:	06d2      	lsls	r2, r2, #27
 8001984:	430a      	orrs	r2, r1
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a4:	f7ff f888 	bl	8000ab8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f884 	bl	8000ab8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e058      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_RCC_OscConfig+0x778>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ca:	e050      	b.n	8001a6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e04f      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
 80019d0:	40021000 	.word	0x40021000
 80019d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d144      	bne.n	8001a6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019fc:	f7ff f85c 	bl	8000ab8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f858 	bl	8000ab8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e02c      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x7ac>
 8001a22:	e024      	b.n	8001a6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d01f      	beq.n	8001a6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f83f 	bl	8000ab8 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f83b 	bl	8000ab8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4905      	ldr	r1, [pc, #20]	; (8001a78 <HAL_RCC_OscConfig+0x820>)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x824>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
 8001a68:	e001      	b.n	8001a6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	feeefffc 	.word	0xfeeefffc

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0e7      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d910      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4970      	ldr	r1, [pc, #448]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0cf      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d908      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4960      	ldr	r1, [pc, #384]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d04c      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d121      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0a6      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e09a      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b36:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e08e      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e086      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4943      	ldr	r1, [pc, #268]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7fe ffa6 	bl	8000ab8 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7fe ffa2 	bl	8000ab8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e06e      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d208      	bcs.n	8001bc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	492b      	ldr	r1, [pc, #172]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d210      	bcs.n	8001bf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 0207 	bic.w	r2, r3, #7
 8001bdc:	4923      	ldr	r1, [pc, #140]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e036      	b.n	8001c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4918      	ldr	r1, [pc, #96]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4910      	ldr	r1, [pc, #64]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c34:	f000 f824 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	490b      	ldr	r1, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x1f4>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_ClockConfig+0x1fc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fedd 	bl	8000a18 <HAL_InitTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c62:	7afb      	ldrb	r3, [r7, #11]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40022000 	.word	0x40022000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08003dd0 	.word	0x08003dd0
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d121      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d11e      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e005      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10d      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e004      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d134      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d003      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0xac>
 8001d24:	e005      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d28:	617b      	str	r3, [r7, #20]
      break;
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2e:	617b      	str	r3, [r7, #20]
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	fb03 f202 	mul.w	r2, r3, r2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	0e5b      	lsrs	r3, r3, #25
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d78:	69bb      	ldr	r3, [r7, #24]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08003de8 	.word	0x08003de8
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	007a1200 	.word	0x007a1200

08001d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08003de0 	.word	0x08003de0

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de0:	f7ff ffda 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4904      	ldr	r1, [pc, #16]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08003de0 	.word	0x08003de0

08001e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f9b6 	bl	8001190 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
 8001e26:	e014      	b.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	; 0x58
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f9a6 	bl	8001190 <HAL_PWREx_GetVoltageRange>
 8001e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e58:	d10b      	bne.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d919      	bls.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2ba0      	cmp	r3, #160	; 0xa0
 8001e64:	d902      	bls.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e013      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e010      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d902      	bls.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e00a      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d102      	bne.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e004      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b70      	cmp	r3, #112	; 0x70
 8001e8e:	d101      	bne.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 0207 	bic.w	r2, r3, #7
 8001e9c:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d031      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eec:	d01a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef2:	d814      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efc:	d10f      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fa44 	bl	80023a0 <RCCEx_PLLSAI1_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	494e      	ldr	r1, [pc, #312]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 809e 	beq.w	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a39      	ldr	r2, [pc, #228]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fd8e 	bl	8000ab8 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fd8a 	bl	8000ab8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d15a      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01e      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d019      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d016      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe fd4a 	bl	8000ab8 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	e00b      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fd46 	bl	8000ab8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d902      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	74fb      	strb	r3, [r7, #19]
            break;
 800203e:	e006      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ec      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002062:	4904      	ldr	r1, [pc, #16]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800206a:	e009      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
 8002070:	e006      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002080:	7c7b      	ldrb	r3, [r7, #17]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a9d      	ldr	r2, [pc, #628]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209e:	4b98      	ldr	r3, [pc, #608]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 0203 	bic.w	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4994      	ldr	r1, [pc, #592]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 020c 	bic.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	498c      	ldr	r1, [pc, #560]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e2:	4b87      	ldr	r3, [pc, #540]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	4983      	ldr	r1, [pc, #524]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002104:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	497b      	ldr	r1, [pc, #492]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4972      	ldr	r1, [pc, #456]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002148:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	496a      	ldr	r1, [pc, #424]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	4961      	ldr	r1, [pc, #388]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218c:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	4959      	ldr	r1, [pc, #356]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	4950      	ldr	r1, [pc, #320]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	4948      	ldr	r1, [pc, #288]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	493f      	ldr	r1, [pc, #252]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d028      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	4937      	ldr	r1, [pc, #220]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002232:	d106      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
 8002240:	e011      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800224a:	d10c      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	2101      	movs	r1, #1
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f8a4 	bl	80023a0 <RCCEx_PLLSAI1_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d028      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	491f      	ldr	r1, [pc, #124]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002290:	d106      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229c:	60d3      	str	r3, [r2, #12]
 800229e:	e011      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f875 	bl	80023a0 <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02b      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ee:	d109      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a02      	ldr	r2, [pc, #8]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
 80022fc:	e014      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230c:	d10c      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f843 	bl	80023a0 <RCCEx_PLLSAI1_Config>
 800231a:	4603      	mov	r3, r0
 800231c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01c      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002352:	d10c      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f820 	bl	80023a0 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002390:	7cbb      	ldrb	r3, [r7, #18]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ae:	4b74      	ldr	r3, [pc, #464]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d018      	beq.n	80023ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ba:	4b71      	ldr	r3, [pc, #452]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d10d      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
       ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023d2:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
       ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d047      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e044      	b.n	8002476 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d018      	beq.n	8002426 <RCCEx_PLLSAI1_Config+0x86>
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d825      	bhi.n	8002444 <RCCEx_PLLSAI1_Config+0xa4>
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d002      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0x62>
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d009      	beq.n	8002414 <RCCEx_PLLSAI1_Config+0x74>
 8002400:	e020      	b.n	8002444 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002412:	e01a      	b.n	800244a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002414:	4b5a      	ldr	r3, [pc, #360]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d116      	bne.n	800244e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e013      	b.n	800244e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002426:	4b56      	ldr	r3, [pc, #344]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002432:	4b53      	ldr	r3, [pc, #332]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002442:	e006      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e004      	b.n	8002454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002452:	bf00      	nop
    }

    if(status == HAL_OK)
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800245a:	4b49      	ldr	r3, [pc, #292]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	430b      	orrs	r3, r1
 8002470:	4943      	ldr	r1, [pc, #268]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d17c      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002488:	f7fe fb16 	bl	8000ab8 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800248e:	e009      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002490:	f7fe fb12 	bl	8000ab8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d902      	bls.n	80024a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	73fb      	strb	r3, [r7, #15]
        break;
 80024a2:	e005      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ef      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d15f      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d110      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	0211      	lsls	r1, r2, #8
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	06d2      	lsls	r2, r2, #27
 80024d4:	430a      	orrs	r2, r1
 80024d6:	492a      	ldr	r1, [pc, #168]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	610b      	str	r3, [r1, #16]
 80024dc:	e027      	b.n	800252e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d112      	bne.n	800250a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	0211      	lsls	r1, r2, #8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6912      	ldr	r2, [r2, #16]
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0552      	lsls	r2, r2, #21
 8002500:	430a      	orrs	r2, r1
 8002502:	491f      	ldr	r1, [pc, #124]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	610b      	str	r3, [r1, #16]
 8002508:	e011      	b.n	800252e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002512:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	0211      	lsls	r1, r2, #8
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6952      	ldr	r2, [r2, #20]
 8002520:	0852      	lsrs	r2, r2, #1
 8002522:	3a01      	subs	r2, #1
 8002524:	0652      	lsls	r2, r2, #25
 8002526:	430a      	orrs	r2, r1
 8002528:	4915      	ldr	r1, [pc, #84]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002538:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fabd 	bl	8000ab8 <HAL_GetTick>
 800253e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002540:	e009      	b.n	8002556 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002542:	f7fe fab9 	bl	8000ab8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	73fb      	strb	r3, [r7, #15]
          break;
 8002554:	e005      	b.n	8002562 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e040      	b.n	8002618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f942 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fbe8 	bl	8002d98 <UART_SetConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fe62 	bl	80032a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fee9 	bl	80033e8 <UART_CheckIdleState>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002632:	2b20      	cmp	r3, #32
 8002634:	d156      	bne.n	80026e4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_UART_Transmit_IT+0x22>
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e04f      	b.n	80026e6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_UART_Transmit_IT+0x34>
 8002650:	2302      	movs	r3, #2
 8002652:	e048      	b.n	80026e6 <HAL_UART_Transmit_IT+0xc6>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	88fa      	ldrh	r2, [r7, #6]
 8002666:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	88fa      	ldrh	r2, [r7, #6]
 800266e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2221      	movs	r2, #33	; 0x21
 8002684:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268e:	d107      	bne.n	80026a0 <HAL_UART_Transmit_IT+0x80>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_UART_Transmit_IT+0xd4>)
 800269c:	669a      	str	r2, [r3, #104]	; 0x68
 800269e:	e002      	b.n	80026a6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_UART_Transmit_IT+0xd8>)
 80026a4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	613b      	str	r3, [r7, #16]
   return(result);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	69f9      	ldr	r1, [r7, #28]
 80026d2:	6a3a      	ldr	r2, [r7, #32]
 80026d4:	e841 2300 	strex	r3, r2, [r1]
 80026d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e6      	bne.n	80026ae <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	372c      	adds	r7, #44	; 0x2c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	08003943 	.word	0x08003943
 80026f8:	0800388b 	.word	0x0800388b

080026fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270e:	2b20      	cmp	r3, #32
 8002710:	d142      	bne.n	8002798 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_UART_Receive_IT+0x22>
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e03b      	b.n	800279a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_UART_Receive_IT+0x34>
 800272c:	2302      	movs	r3, #2
 800272e:	e034      	b.n	800279a <HAL_UART_Receive_IT+0x9e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_UART_Receive_IT+0xa8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d01f      	beq.n	8002788 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	613b      	str	r3, [r7, #16]
   return(result);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	69f9      	ldr	r1, [r7, #28]
 800277a:	6a3a      	ldr	r2, [r7, #32]
 800277c:	e841 2300 	strex	r3, r2, [r1]
 8002780:	61bb      	str	r3, [r7, #24]
   return(result);
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e6      	bne.n	8002756 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	461a      	mov	r2, r3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 ff38 	bl	8003604 <UART_Start_Receive_IT>
 8002794:	4603      	mov	r3, r0
 8002796:	e000      	b.n	800279a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40008000 	.word	0x40008000

080027a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0ba      	sub	sp, #232	; 0xe8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80027d6:	4013      	ands	r3, r2
 80027d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d115      	bne.n	8002810 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00f      	beq.n	8002810 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 82a6 	beq.w	8002d52 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
      }
      return;
 800280e:	e2a0      	b.n	8002d52 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8117 	beq.w	8002a48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800281a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_UART_IRQHandler+0x298>)
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 810a 	beq.w	8002a48 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_UART_IRQHandler+0xbc>
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <HAL_UART_IRQHandler+0xec>
 8002870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2202      	movs	r2, #2
 8002882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d011      	beq.n	80028c4 <HAL_UART_IRQHandler+0x11c>
 80028a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2204      	movs	r2, #4
 80028b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ba:	f043 0202 	orr.w	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2208      	movs	r2, #8
 80028ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f6:	f043 0208 	orr.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <HAL_UART_IRQHandler+0x18a>
 800290c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00c      	beq.n	8002932 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 820c 	beq.w	8002d56 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800293e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800294a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800296c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d005      	beq.n	800298a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800297e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002982:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04f      	beq.n	8002a2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 ff04 	bl	8003798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d141      	bne.n	8002a22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3308      	adds	r3, #8
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3308      	adds	r3, #8
 80029c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1d9      	bne.n	800299e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_UART_IRQHandler+0x29c>)
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f9d9 	bl	8000db6 <HAL_DMA_Abort_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d017      	beq.n	8002a3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a14:	4610      	mov	r0, r2
 8002a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e00f      	b.n	8002a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9a6 	bl	8002d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	e00b      	b.n	8002a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f9a2 	bl	8002d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	e007      	b.n	8002a3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f99e 	bl	8002d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a38:	e18d      	b.n	8002d56 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3a:	bf00      	nop
    return;
 8002a3c:	e18b      	b.n	8002d56 <HAL_UART_IRQHandler+0x5ae>
 8002a3e:	bf00      	nop
 8002a40:	04000120 	.word	0x04000120
 8002a44:	0800385f 	.word	0x0800385f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	f040 8146 	bne.w	8002cde <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 813f 	beq.w	8002cde <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8138 	beq.w	8002cde <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2210      	movs	r2, #16
 8002a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	f040 80b4 	bne.w	8002bee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 815f 	beq.w	8002d5a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f080 8157 	bcs.w	8002d5a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8085 	bne.w	8002bd2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002af6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1da      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3308      	adds	r3, #8
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e1      	bne.n	8002b12 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3308      	adds	r3, #8
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e3      	bne.n	8002b4e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba2:	f023 0310 	bic.w	r3, r3, #16
 8002ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbc:	e841 2300 	strex	r3, r2, [r1]
 8002bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e4      	bne.n	8002b92 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f8b4 	bl	8000d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8ca 	bl	8002d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bec:	e0b5      	b.n	8002d5a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80a7 	beq.w	8002d5e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a2 	beq.w	8002d5e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e4      	bne.n	8002c1a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3308      	adds	r3, #8
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c74:	633a      	str	r2, [r7, #48]	; 0x30
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e3      	bne.n	8002c50 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0310 	bic.w	r3, r3, #16
 8002cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	69b9      	ldr	r1, [r7, #24]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e4      	bne.n	8002c9a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f852 	bl	8002d80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cdc:	e03f      	b.n	8002d5e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <HAL_UART_IRQHandler+0x560>
 8002cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f001 f808 	bl	8003d16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d06:	e02d      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    }
    return;
 8002d30:	e017      	b.n	8002d62 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d012      	beq.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
 8002d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fe59 	bl	8003a02 <UART_EndTransmit_IT>
    return;
 8002d50:	e008      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d52:	bf00      	nop
 8002d54:	e006      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d62:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d64:	37e8      	adds	r7, #232	; 0xe8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop

08002d6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b08a      	sub	sp, #40	; 0x28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4ba5      	ldr	r3, [pc, #660]	; (800305c <UART_SetConfig+0x2c4>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a9a      	ldr	r2, [pc, #616]	; (8003060 <UART_SetConfig+0x2c8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	4313      	orrs	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a91      	ldr	r2, [pc, #580]	; (8003064 <UART_SetConfig+0x2cc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d126      	bne.n	8002e70 <UART_SetConfig+0xd8>
 8002e22:	4b91      	ldr	r3, [pc, #580]	; (8003068 <UART_SetConfig+0x2d0>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d81b      	bhi.n	8002e68 <UART_SetConfig+0xd0>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0xa0>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e59 	.word	0x08002e59
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e61 	.word	0x08002e61
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e0d6      	b.n	8002ffe <UART_SetConfig+0x266>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e56:	e0d2      	b.n	8002ffe <UART_SetConfig+0x266>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5e:	e0ce      	b.n	8002ffe <UART_SetConfig+0x266>
 8002e60:	2308      	movs	r3, #8
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e66:	e0ca      	b.n	8002ffe <UART_SetConfig+0x266>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6e:	e0c6      	b.n	8002ffe <UART_SetConfig+0x266>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7d      	ldr	r2, [pc, #500]	; (800306c <UART_SetConfig+0x2d4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d138      	bne.n	8002eec <UART_SetConfig+0x154>
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <UART_SetConfig+0x2d0>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d82d      	bhi.n	8002ee4 <UART_SetConfig+0x14c>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <UART_SetConfig+0xf8>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002ee5 	.word	0x08002ee5
 8002e9c:	08002ee5 	.word	0x08002ee5
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002ee5 	.word	0x08002ee5
 8002eac:	08002ee5 	.word	0x08002ee5
 8002eb0:	08002ecd 	.word	0x08002ecd
 8002eb4:	08002ee5 	.word	0x08002ee5
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e098      	b.n	8002ffe <UART_SetConfig+0x266>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e094      	b.n	8002ffe <UART_SetConfig+0x266>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e090      	b.n	8002ffe <UART_SetConfig+0x266>
 8002edc:	2308      	movs	r3, #8
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e08c      	b.n	8002ffe <UART_SetConfig+0x266>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e088      	b.n	8002ffe <UART_SetConfig+0x266>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5f      	ldr	r2, [pc, #380]	; (8003070 <UART_SetConfig+0x2d8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d125      	bne.n	8002f42 <UART_SetConfig+0x1aa>
 8002ef6:	4b5c      	ldr	r3, [pc, #368]	; (8003068 <UART_SetConfig+0x2d0>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d016      	beq.n	8002f32 <UART_SetConfig+0x19a>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d818      	bhi.n	8002f3a <UART_SetConfig+0x1a2>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d00a      	beq.n	8002f22 <UART_SetConfig+0x18a>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d814      	bhi.n	8002f3a <UART_SetConfig+0x1a2>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <UART_SetConfig+0x182>
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	d008      	beq.n	8002f2a <UART_SetConfig+0x192>
 8002f18:	e00f      	b.n	8002f3a <UART_SetConfig+0x1a2>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f20:	e06d      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f22:	2302      	movs	r3, #2
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f28:	e069      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f30:	e065      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f32:	2308      	movs	r3, #8
 8002f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f38:	e061      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f40:	e05d      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <UART_SetConfig+0x2dc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d125      	bne.n	8002f98 <UART_SetConfig+0x200>
 8002f4c:	4b46      	ldr	r3, [pc, #280]	; (8003068 <UART_SetConfig+0x2d0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f56:	2bc0      	cmp	r3, #192	; 0xc0
 8002f58:	d016      	beq.n	8002f88 <UART_SetConfig+0x1f0>
 8002f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f5c:	d818      	bhi.n	8002f90 <UART_SetConfig+0x1f8>
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d00a      	beq.n	8002f78 <UART_SetConfig+0x1e0>
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d814      	bhi.n	8002f90 <UART_SetConfig+0x1f8>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <UART_SetConfig+0x1d8>
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d008      	beq.n	8002f80 <UART_SetConfig+0x1e8>
 8002f6e:	e00f      	b.n	8002f90 <UART_SetConfig+0x1f8>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e042      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e03e      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f80:	2304      	movs	r3, #4
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e03a      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f88:	2308      	movs	r3, #8
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e036      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f90:	2310      	movs	r3, #16
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e032      	b.n	8002ffe <UART_SetConfig+0x266>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <UART_SetConfig+0x2c8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12a      	bne.n	8002ff8 <UART_SetConfig+0x260>
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <UART_SetConfig+0x2d0>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb0:	d01a      	beq.n	8002fe8 <UART_SetConfig+0x250>
 8002fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb6:	d81b      	bhi.n	8002ff0 <UART_SetConfig+0x258>
 8002fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbc:	d00c      	beq.n	8002fd8 <UART_SetConfig+0x240>
 8002fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc2:	d815      	bhi.n	8002ff0 <UART_SetConfig+0x258>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <UART_SetConfig+0x238>
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d008      	beq.n	8002fe0 <UART_SetConfig+0x248>
 8002fce:	e00f      	b.n	8002ff0 <UART_SetConfig+0x258>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e012      	b.n	8002ffe <UART_SetConfig+0x266>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e00e      	b.n	8002ffe <UART_SetConfig+0x266>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe6:	e00a      	b.n	8002ffe <UART_SetConfig+0x266>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fee:	e006      	b.n	8002ffe <UART_SetConfig+0x266>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e002      	b.n	8002ffe <UART_SetConfig+0x266>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <UART_SetConfig+0x2c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	f040 808b 	bne.w	8003120 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800300a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800300e:	2b08      	cmp	r3, #8
 8003010:	d834      	bhi.n	800307c <UART_SetConfig+0x2e4>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x280>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800303d 	.word	0x0800303d
 800301c:	0800307d 	.word	0x0800307d
 8003020:	08003045 	.word	0x08003045
 8003024:	0800307d 	.word	0x0800307d
 8003028:	0800304b 	.word	0x0800304b
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800307d 	.word	0x0800307d
 8003034:	0800307d 	.word	0x0800307d
 8003038:	08003053 	.word	0x08003053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7fe feb8 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8003040:	61f8      	str	r0, [r7, #28]
        break;
 8003042:	e021      	b.n	8003088 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <UART_SetConfig+0x2e0>)
 8003046:	61fb      	str	r3, [r7, #28]
        break;
 8003048:	e01e      	b.n	8003088 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304a:	f7fe fe19 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 800304e:	61f8      	str	r0, [r7, #28]
        break;
 8003050:	e01a      	b.n	8003088 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	61fb      	str	r3, [r7, #28]
        break;
 8003058:	e016      	b.n	8003088 <UART_SetConfig+0x2f0>
 800305a:	bf00      	nop
 800305c:	efff69f3 	.word	0xefff69f3
 8003060:	40008000 	.word	0x40008000
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40004400 	.word	0x40004400
 8003070:	40004800 	.word	0x40004800
 8003074:	40004c00 	.word	0x40004c00
 8003078:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80fa 	beq.w	8003284 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d305      	bcc.n	80030ac <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d903      	bls.n	80030b4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030b2:	e0e7      	b.n	8003284 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2200      	movs	r2, #0
 80030b8:	461c      	mov	r4, r3
 80030ba:	4615      	mov	r5, r2
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	022b      	lsls	r3, r5, #8
 80030c6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030ca:	0222      	lsls	r2, r4, #8
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	6849      	ldr	r1, [r1, #4]
 80030d0:	0849      	lsrs	r1, r1, #1
 80030d2:	2000      	movs	r0, #0
 80030d4:	4688      	mov	r8, r1
 80030d6:	4681      	mov	r9, r0
 80030d8:	eb12 0a08 	adds.w	sl, r2, r8
 80030dc:	eb43 0b09 	adc.w	fp, r3, r9
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ee:	4650      	mov	r0, sl
 80030f0:	4659      	mov	r1, fp
 80030f2:	f7fd f879 	bl	80001e8 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4613      	mov	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d308      	bcc.n	8003118 <UART_SetConfig+0x380>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310c:	d204      	bcs.n	8003118 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	e0b5      	b.n	8003284 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800311e:	e0b1      	b.n	8003284 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	d15d      	bne.n	80031e6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800312a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800312e:	2b08      	cmp	r3, #8
 8003130:	d827      	bhi.n	8003182 <UART_SetConfig+0x3ea>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x3a0>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7fe fe28 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8003160:	61f8      	str	r0, [r7, #28]
        break;
 8003162:	e014      	b.n	800318e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7fe fe3a 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8003168:	61f8      	str	r0, [r7, #28]
        break;
 800316a:	e010      	b.n	800318e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <UART_SetConfig+0x508>)
 800316e:	61fb      	str	r3, [r7, #28]
        break;
 8003170:	e00d      	b.n	800318e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7fe fd85 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8003176:	61f8      	str	r0, [r7, #28]
        break;
 8003178:	e009      	b.n	800318e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	61fb      	str	r3, [r7, #28]
        break;
 8003180:	e005      	b.n	800318e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800318c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d077      	beq.n	8003284 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005a      	lsls	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d916      	bls.n	80031de <UART_SetConfig+0x446>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b6:	d212      	bcs.n	80031de <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f023 030f 	bic.w	r3, r3, #15
 80031c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	8afb      	ldrh	r3, [r7, #22]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	8afa      	ldrh	r2, [r7, #22]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	e052      	b.n	8003284 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031e4:	e04e      	b.n	8003284 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d827      	bhi.n	800323e <UART_SetConfig+0x4a6>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x45c>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003229 	.word	0x08003229
 8003200:	0800323f 	.word	0x0800323f
 8003204:	0800322f 	.word	0x0800322f
 8003208:	0800323f 	.word	0x0800323f
 800320c:	0800323f 	.word	0x0800323f
 8003210:	0800323f 	.word	0x0800323f
 8003214:	08003237 	.word	0x08003237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe fdca 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 800321c:	61f8      	str	r0, [r7, #28]
        break;
 800321e:	e014      	b.n	800324a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe fddc 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8003224:	61f8      	str	r0, [r7, #28]
        break;
 8003226:	e010      	b.n	800324a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <UART_SetConfig+0x508>)
 800322a:	61fb      	str	r3, [r7, #28]
        break;
 800322c:	e00d      	b.n	800324a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe fd27 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8003232:	61f8      	str	r0, [r7, #28]
        break;
 8003234:	e009      	b.n	800324a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323a:	61fb      	str	r3, [r7, #28]
        break;
 800323c:	e005      	b.n	800324a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003248:	bf00      	nop
    }

    if (pclk != 0U)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d019      	beq.n	8003284 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085a      	lsrs	r2, r3, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	441a      	add	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d909      	bls.n	800327e <UART_SetConfig+0x4e6>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d205      	bcs.n	800327e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	e002      	b.n	8003284 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003290:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003294:	4618      	mov	r0, r3
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	00f42400 	.word	0x00f42400

080032a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01a      	beq.n	80033ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a2:	d10a      	bne.n	80033ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f8:	f7fd fb5e 	bl	8000ab8 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d10e      	bne.n	800342a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800340c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f82d 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e023      	b.n	8003472 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d10e      	bne.n	8003456 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f817 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00d      	b.n	8003472 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b09c      	sub	sp, #112	; 0x70
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	e0a5      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	f000 80a1 	beq.w	80035d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fd fb0f 	bl	8000ab8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <UART_WaitOnFlagUntilTimeout+0x32>
 80034a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d13e      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034c0:	667b      	str	r3, [r7, #100]	; 0x64
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e6      	bne.n	80034ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	663b      	str	r3, [r7, #96]	; 0x60
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003504:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800350c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e067      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d04f      	beq.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d147      	bne.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003550:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
 8003572:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e6      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	613b      	str	r3, [r7, #16]
   return(result);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	66bb      	str	r3, [r7, #104]	; 0x68
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035a4:	623a      	str	r2, [r7, #32]
 80035a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	69f9      	ldr	r1, [r7, #28]
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e5      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e010      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	f43f af4a 	beq.w	800348c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3770      	adds	r7, #112	; 0x70
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003604:	b480      	push	{r7}
 8003606:	b097      	sub	sp, #92	; 0x5c
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d10e      	bne.n	8003656 <UART_Start_Receive_IT+0x52>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <UART_Start_Receive_IT+0x48>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800364a:	e02d      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	22ff      	movs	r2, #255	; 0xff
 8003650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003654:	e028      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <UART_Start_Receive_IT+0x76>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <UART_Start_Receive_IT+0x6c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	22ff      	movs	r2, #255	; 0xff
 800366a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800366e:	e01b      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	227f      	movs	r2, #127	; 0x7f
 8003674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003678:	e016      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003682:	d10d      	bne.n	80036a0 <UART_Start_Receive_IT+0x9c>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <UART_Start_Receive_IT+0x92>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	227f      	movs	r2, #127	; 0x7f
 8003690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003694:	e008      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	223f      	movs	r2, #63	; 0x3f
 800369a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800369e:	e003      	b.n	80036a8 <UART_Start_Receive_IT+0xa4>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2222      	movs	r2, #34	; 0x22
 80036b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3308      	adds	r3, #8
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	657b      	str	r3, [r7, #84]	; 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80036d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d107      	bne.n	8003704 <UART_Start_Receive_IT+0x100>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a24      	ldr	r2, [pc, #144]	; (8003790 <UART_Start_Receive_IT+0x18c>)
 8003700:	665a      	str	r2, [r3, #100]	; 0x64
 8003702:	e002      	b.n	800370a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a23      	ldr	r2, [pc, #140]	; (8003794 <UART_Start_Receive_IT+0x190>)
 8003708:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d019      	beq.n	800374e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800372e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
 800373a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800373e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_Start_Receive_IT+0x116>
 800374c:	e018      	b.n	8003780 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	613b      	str	r3, [r7, #16]
   return(result);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f043 0320 	orr.w	r3, r3, #32
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	61bb      	str	r3, [r7, #24]
   return(result);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	375c      	adds	r7, #92	; 0x5c
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	08003bb7 	.word	0x08003bb7
 8003794:	08003a57 	.word	0x08003a57

08003798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b095      	sub	sp, #84	; 0x54
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
 80037c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e6      	bne.n	80037a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e5      	bne.n	80037d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	2b01      	cmp	r3, #1
 800380c:	d118      	bne.n	8003840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	60bb      	str	r3, [r7, #8]
   return(result);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f023 0310 	bic.w	r3, r3, #16
 8003822:	647b      	str	r3, [r7, #68]	; 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e6      	bne.n	800380e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	; 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fa75 	bl	8002d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800388a:	b480      	push	{r7}
 800388c:	b08f      	sub	sp, #60	; 0x3c
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003896:	2b21      	cmp	r3, #33	; 0x21
 8003898:	d14d      	bne.n	8003936 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d132      	bne.n	800390c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ba:	637b      	str	r3, [r7, #52]	; 0x34
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e6      	bne.n	80038a6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ec:	633b      	str	r3, [r7, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800390a:	e014      	b.n	8003936 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b292      	uxth	r2, r2
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003936:	bf00      	nop
 8003938:	373c      	adds	r7, #60	; 0x3c
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b091      	sub	sp, #68	; 0x44
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800394e:	2b21      	cmp	r3, #33	; 0x21
 8003950:	d151      	bne.n	80039f6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d132      	bne.n	80039c4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	623b      	str	r3, [r7, #32]
   return(result);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
 800397e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	60fb      	str	r3, [r7, #12]
   return(result);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	617b      	str	r3, [r7, #20]
   return(result);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e6      	bne.n	8003990 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80039c2:	e018      	b.n	80039f6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	881a      	ldrh	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d6:	b292      	uxth	r2, r2
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80039f6:	bf00      	nop
 80039f8:	3744      	adds	r7, #68	; 0x44
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6979      	ldr	r1, [r7, #20]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	613b      	str	r3, [r7, #16]
   return(result);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e6      	bne.n	8003a0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fc fda3 	bl	8000594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a4e:	bf00      	nop
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b096      	sub	sp, #88	; 0x58
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6c:	2b22      	cmp	r3, #34	; 0x22
 8003a6e:	f040 8094 	bne.w	8003b9a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a80:	b2d9      	uxtb	r1, r3
 8003a82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d179      	bne.n	8003bae <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ace:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e6      	bne.n	8003aba <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	623b      	str	r3, [r7, #32]
   return(result);
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e5      	bne.n	8003aec <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d12e      	bne.n	8003b92 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0310 	bic.w	r3, r3, #16
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	617b      	str	r3, [r7, #20]
   return(result);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d103      	bne.n	8003b82 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff f8f8 	bl	8002d80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b90:	e00d      	b.n	8003bae <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fcaa 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8003b98:	e009      	b.n	8003bae <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	8b1b      	ldrh	r3, [r3, #24]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	b292      	uxth	r2, r2
 8003bac:	831a      	strh	r2, [r3, #24]
}
 8003bae:	bf00      	nop
 8003bb0:	3758      	adds	r7, #88	; 0x58
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b096      	sub	sp, #88	; 0x58
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bcc:	2b22      	cmp	r3, #34	; 0x22
 8003bce:	f040 8094 	bne.w	8003cfa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003be2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003be6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bea:	4013      	ands	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d179      	bne.n	8003d0e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3308      	adds	r3, #8
 8003c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d12e      	bne.n	8003cf2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f023 0310 	bic.w	r3, r3, #16
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6979      	ldr	r1, [r7, #20]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e6      	bne.n	8003c9a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d103      	bne.n	8003ce2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2210      	movs	r2, #16
 8003ce0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff f848 	bl	8002d80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cf0:	e00d      	b.n	8003d0e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fc fbfa 	bl	80004ec <HAL_UART_RxCpltCallback>
}
 8003cf8:	e009      	b.n	8003d0e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	8b1b      	ldrh	r3, [r3, #24]
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	831a      	strh	r2, [r3, #24]
}
 8003d0e:	bf00      	nop
 8003d10:	3758      	adds	r7, #88	; 0x58
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 f820 	bl	8003d84 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08003e20 	.word	0x08003e20
 8003d68:	08003e20 	.word	0x08003e20
 8003d6c:	08003e20 	.word	0x08003e20
 8003d70:	08003e24 	.word	0x08003e24

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <_init>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr

08003d90 <_fini>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr
