
BNO055-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004874  08004874  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800487c  0800487c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  080048f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080048f4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddfc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c19  00000000  00000000  0002de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00030698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224b6  00000000  00000000  000311c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e993  00000000  00000000  00053676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a30  00000000  00000000  00062009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132a39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f0  00000000  00000000  00132a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004714 	.word	0x08004714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004714 	.word	0x08004714

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <bno055_write_datum>:
void bno055_write_datum (uint8_t reg, uint8_t value);
void bno055_read_data (uint8_t reg, uint8_t numberofbytes);

// I2C Functions ********************************
// writes 1 byte
void bno055_write_datum (uint8_t reg, uint8_t value) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, BNO055_ADDRESS, data, 2, 10);
 800059c:	f107 020c 	add.w	r2, r7, #12
 80005a0:	230a      	movs	r3, #10
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2302      	movs	r3, #2
 80005a6:	2150      	movs	r1, #80	; 0x50
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <bno055_write_datum+0x34>)
 80005aa:	f001 f809 	bl	80015c0 <HAL_I2C_Master_Transmit>
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c

080005bc <bno055_read_data>:

// reads multiple bytes
void bno055_read_data (uint8_t reg, uint8_t numberofbytes) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read (&hi2c1, BNO055_ADDRESS, reg, 1, data_rec_bno, numberofbytes, 100);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	2164      	movs	r1, #100	; 0x64
 80005d6:	9102      	str	r1, [sp, #8]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <bno055_read_data+0x80>)
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	2150      	movs	r1, #80	; 0x50
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <bno055_read_data+0x84>)
 80005e4:	f001 f8e0 	bl	80017a8 <HAL_I2C_Mem_Read>
 80005e8:	4603      	mov	r3, r0
 80005ea:	73fb      	strb	r3, [r7, #15]

	// printing status
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n bno055_read_data", sizeof("\r\n bno055_read_data"), 10);
 80005ec:	230a      	movs	r3, #10
 80005ee:	2214      	movs	r2, #20
 80005f0:	4914      	ldr	r1, [pc, #80]	; (8000644 <bno055_read_data+0x88>)
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <bno055_read_data+0x8c>)
 80005f4:	f002 ff24 	bl	8003440 <HAL_UART_Transmit>
	if (HAL_ERROR == status) {
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d106      	bne.n	800060c <bno055_read_data+0x50>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n HAL_ERROR returned", sizeof("\r\n HAL_ERROR returned"), 10);
 80005fe:	230a      	movs	r3, #10
 8000600:	2216      	movs	r2, #22
 8000602:	4912      	ldr	r1, [pc, #72]	; (800064c <bno055_read_data+0x90>)
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <bno055_read_data+0x8c>)
 8000606:	f002 ff1b 	bl	8003440 <HAL_UART_Transmit>
	} else if (HAL_BUSY == status){
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n HAL_BUSY returned", sizeof("\r\n HAL_BUSY returned"), 10);
	} else if (HAL_OK == status) {
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n HAL_OK returned", sizeof("\r\n HAL_OK returned"), 10);
	}
}
 800060a:	e012      	b.n	8000632 <bno055_read_data+0x76>
	} else if (HAL_BUSY == status){
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d106      	bne.n	8000620 <bno055_read_data+0x64>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n HAL_BUSY returned", sizeof("\r\n HAL_BUSY returned"), 10);
 8000612:	230a      	movs	r3, #10
 8000614:	2215      	movs	r2, #21
 8000616:	490e      	ldr	r1, [pc, #56]	; (8000650 <bno055_read_data+0x94>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <bno055_read_data+0x8c>)
 800061a:	f002 ff11 	bl	8003440 <HAL_UART_Transmit>
}
 800061e:	e008      	b.n	8000632 <bno055_read_data+0x76>
	} else if (HAL_OK == status) {
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d105      	bne.n	8000632 <bno055_read_data+0x76>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n HAL_OK returned", sizeof("\r\n HAL_OK returned"), 10);
 8000626:	230a      	movs	r3, #10
 8000628:	2213      	movs	r2, #19
 800062a:	490a      	ldr	r1, [pc, #40]	; (8000654 <bno055_read_data+0x98>)
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <bno055_read_data+0x8c>)
 800062e:	f002 ff07 	bl	8003440 <HAL_UART_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000164 	.word	0x20000164
 8000640:	2000008c 	.word	0x2000008c
 8000644:	0800472c 	.word	0x0800472c
 8000648:	200000e0 	.word	0x200000e0
 800064c:	08004740 	.word	0x08004740
 8000650:	08004758 	.word	0x08004758
 8000654:	08004770 	.word	0x08004770

08000658 <bno055_config>:

// Config Functions ********************************
void bno055_config (void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	bno055_write_datum(OPR_MODE,NDOF_MODE); // Set operating mode to NDOF
 800065c:	210c      	movs	r1, #12
 800065e:	203d      	movs	r0, #61	; 0x3d
 8000660:	f7ff ff90 	bl	8000584 <bno055_write_datum>
//	bno055_write_datum(UNIT_SEL, DATA_FORMAT_SETTING); // Set unit selection to windows orientation, celsius, deg, dps, mg
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <bno055_read_calibrate_status>:

// Calibrate Function ********************************
void bno055_read_calibrate_status (void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8

	while ( (sys_stat!=3) || (gyr_stat!=3)|| (acc_stat!=3) || (mag_stat!=3) ) {
 800066e:	e03e      	b.n	80006ee <bno055_read_calibrate_status+0x86>
		bno055_read_data(CALIB_STAT,1);
 8000670:	2101      	movs	r1, #1
 8000672:	2035      	movs	r0, #53	; 0x35
 8000674:	f7ff ffa2 	bl	80005bc <bno055_read_data>

		sys_stat = ( data_rec_bno[0] & SYS_MASK ) >> 6;
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <bno055_read_calibrate_status+0xb8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	099b      	lsrs	r3, r3, #6
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <bno055_read_calibrate_status+0xbc>)
 8000682:	701a      	strb	r2, [r3, #0]
		gyr_stat = ( data_rec_bno[0] & GYR_MASK ) >> 4;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <bno055_read_calibrate_status+0xb8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	111b      	asrs	r3, r3, #4
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 0303 	and.w	r3, r3, #3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <bno055_read_calibrate_status+0xc0>)
 8000694:	701a      	strb	r2, [r3, #0]
		acc_stat = ( data_rec_bno[0] & ACC_MASK ) >> 2;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <bno055_read_calibrate_status+0xb8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	109b      	asrs	r3, r3, #2
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <bno055_read_calibrate_status+0xc4>)
 80006a6:	701a      	strb	r2, [r3, #0]
		mag_stat = ( data_rec_bno[0] & MAG_MASK ) ;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <bno055_read_calibrate_status+0xb8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <bno055_read_calibrate_status+0xc8>)
 80006b4:	701a      	strb	r2, [r3, #0]

		// Display data to UART port
		sprintf (disp_buf, "\r\n sys= %d \t gyr= %d \t acc= %d \t mag= %d", sys_stat, gyr_stat, acc_stat, mag_stat);
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <bno055_read_calibrate_status+0xbc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <bno055_read_calibrate_status+0xc0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <bno055_read_calibrate_status+0xc4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <bno055_read_calibrate_status+0xc8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	4603      	mov	r3, r0
 80006d2:	460a      	mov	r2, r1
 80006d4:	4917      	ldr	r1, [pc, #92]	; (8000734 <bno055_read_calibrate_status+0xcc>)
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <bno055_read_calibrate_status+0xd0>)
 80006d8:	f003 fbae 	bl	8003e38 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)disp_buf,sizeof(disp_buf),10);
 80006dc:	230a      	movs	r3, #10
 80006de:	2232      	movs	r2, #50	; 0x32
 80006e0:	4915      	ldr	r1, [pc, #84]	; (8000738 <bno055_read_calibrate_status+0xd0>)
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <bno055_read_calibrate_status+0xd4>)
 80006e4:	f002 feac 	bl	8003440 <HAL_UART_Transmit>

		HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 fc3d 	bl	8000f68 <HAL_Delay>
	while ( (sys_stat!=3) || (gyr_stat!=3)|| (acc_stat!=3) || (mag_stat!=3) ) {
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <bno055_read_calibrate_status+0xbc>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d1bc      	bne.n	8000670 <bno055_read_calibrate_status+0x8>
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <bno055_read_calibrate_status+0xc0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d1b8      	bne.n	8000670 <bno055_read_calibrate_status+0x8>
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <bno055_read_calibrate_status+0xc4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b03      	cmp	r3, #3
 8000704:	d1b4      	bne.n	8000670 <bno055_read_calibrate_status+0x8>
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <bno055_read_calibrate_status+0xc8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b03      	cmp	r3, #3
 800070c:	d1b0      	bne.n	8000670 <bno055_read_calibrate_status+0x8>
	}

	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n Calibration Complete!",sizeof("\r\n Calibration Complete!"),10);
 800070e:	230a      	movs	r3, #10
 8000710:	2219      	movs	r2, #25
 8000712:	490b      	ldr	r1, [pc, #44]	; (8000740 <bno055_read_calibrate_status+0xd8>)
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <bno055_read_calibrate_status+0xd4>)
 8000716:	f002 fe93 	bl	8003440 <HAL_UART_Transmit>

}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000164 	.word	0x20000164
 8000724:	200001a2 	.word	0x200001a2
 8000728:	200001a3 	.word	0x200001a3
 800072c:	200001a4 	.word	0x200001a4
 8000730:	200001a5 	.word	0x200001a5
 8000734:	08004784 	.word	0x08004784
 8000738:	20000170 	.word	0x20000170
 800073c:	200000e0 	.word	0x200000e0
 8000740:	080047b0 	.word	0x080047b0

08000744 <bno055_print_calibrate_status>:

// Print Calibration Register Values
void bno055_print_calibrate_status (void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af02      	add	r7, sp, #8
	bno055_read_data(CALIB_STAT,1);
 800074a:	2101      	movs	r1, #1
 800074c:	2035      	movs	r0, #53	; 0x35
 800074e:	f7ff ff35 	bl	80005bc <bno055_read_data>

	sys_stat = ( data_rec_bno[0] & SYS_MASK ) >> 6;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <bno055_print_calibrate_status+0x84>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	099b      	lsrs	r3, r3, #6
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <bno055_print_calibrate_status+0x88>)
 800075c:	701a      	strb	r2, [r3, #0]
	gyr_stat = ( data_rec_bno[0] & GYR_MASK ) >> 4;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <bno055_print_calibrate_status+0x84>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	111b      	asrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <bno055_print_calibrate_status+0x8c>)
 800076e:	701a      	strb	r2, [r3, #0]
	acc_stat = ( data_rec_bno[0] & ACC_MASK ) >> 2;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <bno055_print_calibrate_status+0x84>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	109b      	asrs	r3, r3, #2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <bno055_print_calibrate_status+0x90>)
 8000780:	701a      	strb	r2, [r3, #0]
	mag_stat = ( data_rec_bno[0] & MAG_MASK ) ;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <bno055_print_calibrate_status+0x84>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <bno055_print_calibrate_status+0x94>)
 800078e:	701a      	strb	r2, [r3, #0]

	// Display data to UART port
	sprintf (disp_buf, "\r\n sys= %d \t gyr= %d \t acc= %d \t mag= %d", sys_stat, gyr_stat, acc_stat, mag_stat);
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <bno055_print_calibrate_status+0x88>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <bno055_print_calibrate_status+0x8c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <bno055_print_calibrate_status+0x90>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <bno055_print_calibrate_status+0x94>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <bno055_print_calibrate_status+0x98>)
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <bno055_print_calibrate_status+0x9c>)
 80007b2:	f003 fb41 	bl	8003e38 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)disp_buf,sizeof(disp_buf),10);
 80007b6:	230a      	movs	r3, #10
 80007b8:	2232      	movs	r2, #50	; 0x32
 80007ba:	4909      	ldr	r1, [pc, #36]	; (80007e0 <bno055_print_calibrate_status+0x9c>)
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <bno055_print_calibrate_status+0xa0>)
 80007be:	f002 fe3f 	bl	8003440 <HAL_UART_Transmit>

}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000164 	.word	0x20000164
 80007cc:	200001a2 	.word	0x200001a2
 80007d0:	200001a3 	.word	0x200001a3
 80007d4:	200001a4 	.word	0x200001a4
 80007d8:	200001a5 	.word	0x200001a5
 80007dc:	08004784 	.word	0x08004784
 80007e0:	20000170 	.word	0x20000170
 80007e4:	200000e0 	.word	0x200000e0

080007e8 <print_EUL_data>:


// Utility functions ********************************
// prints x y z axis data of specified register
void print_EUL_data (uint8_t reg) { // changed from print_RAW_data
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af02      	add	r7, sp, #8
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	  // Note: Data output rate for fusion data in NDOF mode is 100Hz (i.e. every 10ms)

	  // Clear display buffer
	  for (int i=0; i<50; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	e007      	b.n	8000808 <print_EUL_data+0x20>
		  disp_buf[i] = NULL;
 80007f8:	4a30      	ldr	r2, [pc, #192]	; (80008bc <print_EUL_data+0xd4>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4413      	add	r3, r2
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<50; i++) {
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b31      	cmp	r3, #49	; 0x31
 800080c:	ddf4      	ble.n	80007f8 <print_EUL_data+0x10>
	  }

	  // Get 6 bytes of data
	  bno055_read_data(reg, 6);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2106      	movs	r1, #6
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fed2 	bl	80005bc <bno055_read_data>
	  x = (data_rec_bno[1]<<8) | data_rec_bno[0];
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <print_EUL_data+0xd8>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21a      	sxth	r2, r3
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <print_EUL_data+0xd8>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b21b      	sxth	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b21a      	sxth	r2, r3
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <print_EUL_data+0xdc>)
 800082c:	801a      	strh	r2, [r3, #0]
	  y = (data_rec_bno[3]<<8) | data_rec_bno[2];
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <print_EUL_data+0xd8>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	b21a      	sxth	r2, r3
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <print_EUL_data+0xd8>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	b21b      	sxth	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b21a      	sxth	r2, r3
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <print_EUL_data+0xe0>)
 8000842:	801a      	strh	r2, [r3, #0]
	  z = (data_rec_bno[5]<<8) | data_rec_bno[4];
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <print_EUL_data+0xd8>)
 8000846:	795b      	ldrb	r3, [r3, #5]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <print_EUL_data+0xd8>)
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <print_EUL_data+0xe4>)
 8000858:	801a      	strh	r2, [r3, #0]

	  // Convert with 16 LSB/ 1 deg
	  x = x >> 4; // Divide by 16
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <print_EUL_data+0xdc>)
 800085c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000860:	111b      	asrs	r3, r3, #4
 8000862:	b21a      	sxth	r2, r3
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <print_EUL_data+0xdc>)
 8000866:	801a      	strh	r2, [r3, #0]
	  y = y >> 4;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <print_EUL_data+0xe0>)
 800086a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086e:	111b      	asrs	r3, r3, #4
 8000870:	b21a      	sxth	r2, r3
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <print_EUL_data+0xe0>)
 8000874:	801a      	strh	r2, [r3, #0]
	  z = z >> 4;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <print_EUL_data+0xe4>)
 8000878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087c:	111b      	asrs	r3, r3, #4
 800087e:	b21a      	sxth	r2, r3
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <print_EUL_data+0xe4>)
 8000882:	801a      	strh	r2, [r3, #0]

	  // Display data to UART port
	  sprintf (disp_buf, "\r\n x= %d \t y= %d \t z= %d", x, y, z);
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <print_EUL_data+0xdc>)
 8000886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088a:	461a      	mov	r2, r3
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <print_EUL_data+0xe0>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	4619      	mov	r1, r3
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <print_EUL_data+0xe4>)
 8000896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	460b      	mov	r3, r1
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <print_EUL_data+0xe8>)
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <print_EUL_data+0xd4>)
 80008a2:	f003 fac9 	bl	8003e38 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)disp_buf,sizeof(disp_buf),10);
 80008a6:	230a      	movs	r3, #10
 80008a8:	2232      	movs	r2, #50	; 0x32
 80008aa:	4904      	ldr	r1, [pc, #16]	; (80008bc <print_EUL_data+0xd4>)
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <print_EUL_data+0xec>)
 80008ae:	f002 fdc7 	bl	8003440 <HAL_UART_Transmit>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000170 	.word	0x20000170
 80008c0:	20000164 	.word	0x20000164
 80008c4:	2000016a 	.word	0x2000016a
 80008c8:	2000016c 	.word	0x2000016c
 80008cc:	2000016e 	.word	0x2000016e
 80008d0:	080047cc 	.word	0x080047cc
 80008d4:	200000e0 	.word	0x200000e0

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fac8 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f81e 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f8de 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 f8ac 	bl	8000a44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ec:	f000 f86a 	bl	80009c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_config();
 80008f0:	f7ff feb2 	bl	8000658 <bno055_config>
  bno055_read_calibrate_status();
 80008f4:	f7ff feb8 	bl	8000668 <bno055_read_calibrate_status>
//	HAL_Delay(10);
//	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n Magn:********",sizeof("\r\n Magn:********"),10);
//	print_RAW_data(MAG_DATA_X_LSB);
//	HAL_Delay(10);

	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n Eul:********",sizeof("\r\n Eul:********"),10);
 80008f8:	230a      	movs	r3, #10
 80008fa:	2210      	movs	r2, #16
 80008fc:	4906      	ldr	r1, [pc, #24]	; (8000918 <main+0x40>)
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <main+0x44>)
 8000900:	f002 fd9e 	bl	8003440 <HAL_UART_Transmit>
	print_EUL_data(EUL_DATA_X_LSB);
 8000904:	201a      	movs	r0, #26
 8000906:	f7ff ff6f 	bl	80007e8 <print_EUL_data>

	bno055_print_calibrate_status(); // print & check calibration registers
 800090a:	f7ff ff1b 	bl	8000744 <bno055_print_calibrate_status>

	HAL_Delay(100);
 800090e:	2064      	movs	r0, #100	; 0x64
 8000910:	f000 fb2a 	bl	8000f68 <HAL_Delay>
	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n Eul:********",sizeof("\r\n Eul:********"),10);
 8000914:	e7f0      	b.n	80008f8 <main+0x20>
 8000916:	bf00      	nop
 8000918:	080047e8 	.word	0x080047e8
 800091c:	200000e0 	.word	0x200000e0

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2244      	movs	r2, #68	; 0x44
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fa7a 	bl	8003e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000946:	f001 fb41 	bl	8001fcc <HAL_PWREx_ControlVoltageScaling>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000950:	f000 f90e 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000966:	2302      	movs	r3, #2
 8000968:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096e:	230a      	movs	r3, #10
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097a:	2302      	movs	r3, #2
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb78 	bl	8002078 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098e:	f000 f8ef 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2303      	movs	r3, #3
 8000998:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	2104      	movs	r1, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 ff78 	bl	80028a0 <HAL_RCC_ClockConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b6:	f000 f8db 	bl	8000b70 <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	3758      	adds	r7, #88	; 0x58
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_I2C1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <MX_I2C1_Init+0x7c>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a00:	f000 fd4e 	bl	80014a0 <HAL_I2C_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a0a:	f000 f8b1 	bl	8000b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a12:	f001 fa35 	bl	8001e80 <HAL_I2CEx_ConfigAnalogFilter>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f8a8 	bl	8000b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_I2C1_Init+0x74>)
 8000a24:	f001 fa77 	bl	8001f16 <HAL_I2CEx_ConfigDigitalFilter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f89f 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	10909cec 	.word	0x10909cec

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART2_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x58>)
 8000a88:	f002 fc8c 	bl	80033a4 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f86d 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000e0 	.word	0x200000e0
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f000 fca5 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0xc8>)
 8000b3e:	f000 fb1d 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fb0e 	bl	800117c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	48000800 	.word	0x48000800

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0a4      	sub	sp, #144	; 0x90
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2268      	movs	r2, #104	; 0x68
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 f91f 	bl	8003e28 <memset>
  if(hi2c->Instance==I2C1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_I2C_MspInit+0xb0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13a      	bne.n	8000c6a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 f871 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff ffb0 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <HAL_I2C_MspInit+0xb8>)
 8000c4e:	f000 fa95 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_I2C_MspInit+0xb4>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3790      	adds	r7, #144	; 0x90
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0a4      	sub	sp, #144	; 0x90
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2268      	movs	r2, #104	; 0x68
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 f8c1 	bl	8003e28 <memset>
  if(huart->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <HAL_UART_MspInit+0xb0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13a      	bne.n	8000d26 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f813 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff ff52 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	4a18      	ldr	r2, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0xb4>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 fa2b 	bl	800117c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3790      	adds	r7, #144	; 0x90
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f8d0 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f003 f80a 	bl	8003dd4 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20028000 	.word	0x20028000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200001a8 	.word	0x200001a8
 8000df4:	200001c0 	.word	0x200001c0

08000df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 ffc9 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff fd43 	bl	80008d8 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e60:	08004884 	.word	0x08004884
  ldr r2, =_sbss
 8000e64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e68:	200001c0 	.word	0x200001c0

08000e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_Init+0x3c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_Init+0x3c>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f000 f944 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 f80f 	bl	8000eb0 <HAL_InitTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	e001      	b.n	8000ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9e:	f7ff fe6d 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d023      	beq.n	8000f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_InitTick+0x70>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f941 	bl	8001162 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d809      	bhi.n	8000f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f919 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0x74>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e004      	b.n	8000f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e001      	b.n	8000f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001ac 	.word	0x200001ac

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001ac 	.word	0x200001ac

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff47 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff5c 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffb0 	bl	80010d0 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	e154      	b.n	8001436 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8146 	beq.w	8001430 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x40>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d130      	bne.n	800121e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f2:	2201      	movs	r2, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 0201 	and.w	r2, r3, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d017      	beq.n	800125a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d123      	bne.n	80012ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a0 	beq.w	8001430 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6613      	str	r3, [r2, #96]	; 0x60
 80012fc:	4b55      	ldr	r3, [pc, #340]	; (8001454 <HAL_GPIO_Init+0x2d8>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001308:	4a53      	ldr	r2, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001332:	d019      	beq.n	8001368 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x2e0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1e4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1e0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1dc>
 8001354:	2304      	movs	r3, #4
 8001356:	e008      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001358:	2307      	movs	r3, #7
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 800135c:	2303      	movs	r3, #3
 800135e:	e004      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001360:	2302      	movs	r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_GPIO_Init+0x1ee>
 8001368:	2300      	movs	r3, #0
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137a:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2dc>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x2f0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_GPIO_Init+0x2f0>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f aea3 	bne.w	800118c <HAL_GPIO_Init+0x10>
  }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	48001000 	.word	0x48001000
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800148c:	e002      	b.n	8001494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e081      	b.n	80015b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fb7c 	bl	8000bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	; 0x24
 80014d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001500:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e006      	b.n	8001528 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001526:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d104      	bne.n	800153a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001538:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800155c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69d9      	ldr	r1, [r3, #28]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	461a      	mov	r2, r3
 80015cc:	460b      	mov	r3, r1
 80015ce:	817b      	strh	r3, [r7, #10]
 80015d0:	4613      	mov	r3, r2
 80015d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b20      	cmp	r3, #32
 80015de:	f040 80da 	bne.w	8001796 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x30>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e0d3      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015f8:	f7ff fcaa 	bl	8000f50 <HAL_GetTick>
 80015fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2319      	movs	r3, #25
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fa5e 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0be      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2221      	movs	r2, #33	; 0x21
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2210      	movs	r2, #16
 8001626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001646:	b29b      	uxth	r3, r3
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d90e      	bls.n	800166a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	22ff      	movs	r2, #255	; 0xff
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001656:	b2da      	uxtb	r2, r3
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fbda 	bl	8001e1c <I2C_TransferConfig>
 8001668:	e06c      	b.n	8001744 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	b2da      	uxtb	r2, r3
 800167a:	8979      	ldrh	r1, [r7, #10]
 800167c:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fbc9 	bl	8001e1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800168a:	e05b      	b.n	8001744 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	6a39      	ldr	r1, [r7, #32]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fa5b 	bl	8001b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e07b      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d034      	beq.n	8001744 <HAL_I2C_Master_Transmit+0x184>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d130      	bne.n	8001744 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f9ed 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e04d      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d90e      	bls.n	8001724 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fb7d 	bl	8001e1c <I2C_TransferConfig>
 8001722:	e00f      	b.n	8001744 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	b2da      	uxtb	r2, r3
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fb6c 	bl	8001e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d19e      	bne.n	800168c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6a39      	ldr	r1, [r7, #32]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fa3a 	bl	8001bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e01a      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2220      	movs	r2, #32
 8001768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001776:	400b      	ands	r3, r1
 8001778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	80002000 	.word	0x80002000
 80017a4:	fe00e800 	.word	0xfe00e800

080017a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	460b      	mov	r3, r1
 80017bc:	813b      	strh	r3, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 80fd 	bne.w	80019ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_I2C_Mem_Read+0x34>
 80017d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0f1      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_I2C_Mem_Read+0x4e>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e0ea      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fe:	f7ff fba7 	bl	8000f50 <HAL_GetTick>
 8001802:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2319      	movs	r3, #25
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f95b 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d5      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2222      	movs	r2, #34	; 0x22
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001848:	88f8      	ldrh	r0, [r7, #6]
 800184a:	893a      	ldrh	r2, [r7, #8]
 800184c:	8979      	ldrh	r1, [r7, #10]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4603      	mov	r3, r0
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f8bf 	bl	80019dc <I2C_RequestMemoryRead>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ad      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d90e      	bls.n	8001898 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <HAL_I2C_Mem_Read+0x22c>)
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fac3 	bl	8001e1c <I2C_TransferConfig>
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_I2C_Mem_Read+0x22c>)
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fab2 	bl	8001e1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	2104      	movs	r1, #4
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f902 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07c      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d034      	beq.n	8001978 <HAL_I2C_Mem_Read+0x1d0>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d130      	bne.n	8001978 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	2200      	movs	r2, #0
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f8d3 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e04d      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d90e      	bls.n	8001958 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001944:	b2da      	uxtb	r2, r3
 8001946:	8979      	ldrh	r1, [r7, #10]
 8001948:	2300      	movs	r3, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fa63 	bl	8001e1c <I2C_TransferConfig>
 8001956:	e00f      	b.n	8001978 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001966:	b2da      	uxtb	r2, r3
 8001968:	8979      	ldrh	r1, [r7, #10]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa52 	bl	8001e1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d19a      	bne.n	80018b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f920 	bl	8001bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e01a      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2220      	movs	r2, #32
 800199c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_I2C_Mem_Read+0x230>)
 80019aa:	400b      	ands	r3, r1
 80019ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	80002400 	.word	0x80002400
 80019d8:	fe00e800 	.word	0xfe00e800

080019dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	817b      	strh	r3, [r7, #10]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	8979      	ldrh	r1, [r7, #10]
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <I2C_RequestMemoryRead+0xa4>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fa0a 	bl	8001e1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f89d 	bl	8001b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e02c      	b.n	8001a76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d105      	bne.n	8001a2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a22:	893b      	ldrh	r3, [r7, #8]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a2c:	e015      	b.n	8001a5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a2e:	893b      	ldrh	r3, [r7, #8]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f883 	bl	8001b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e012      	b.n	8001a76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2140      	movs	r1, #64	; 0x40
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f831 	bl	8001acc <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	80002000 	.word	0x80002000

08001a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d007      	beq.n	8001ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	619a      	str	r2, [r3, #24]
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001adc:	e022      	b.n	8001b24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d01e      	beq.n	8001b24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae6:	f7ff fa33 	bl	8000f50 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d302      	bcc.n	8001afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d113      	bne.n	8001b24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00f      	b.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d0cd      	beq.n	8001ade <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b58:	e02c      	b.n	8001bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f870 	bl	8001c44 <I2C_IsErrorOccurred>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e02a      	b.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d01e      	beq.n	8001bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b76:	f7ff f9eb 	bl	8000f50 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d302      	bcc.n	8001b8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d113      	bne.n	8001bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e007      	b.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d1cb      	bne.n	8001b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd8:	e028      	b.n	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f830 	bl	8001c44 <I2C_IsErrorOccurred>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e026      	b.n	8001c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bee:	f7ff f9af 	bl	8000f50 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d302      	bcc.n	8001c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d113      	bne.n	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e007      	b.n	8001c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d1cf      	bne.n	8001bda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d075      	beq.n	8001d5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2210      	movs	r2, #16
 8001c76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c78:	e056      	b.n	8001d28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d052      	beq.n	8001d28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c82:	f7ff f965 	bl	8000f50 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <I2C_IsErrorOccurred+0x54>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d147      	bne.n	8001d28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001caa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cba:	d12e      	bne.n	8001d1a <I2C_IsErrorOccurred+0xd6>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc2:	d02a      	beq.n	8001d1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d027      	beq.n	8001d1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cda:	f7ff f939 	bl	8000f50 <HAL_GetTick>
 8001cde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce0:	e01b      	b.n	8001d1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ce2:	f7ff f935 	bl	8000f50 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b19      	cmp	r3, #25
 8001cee:	d914      	bls.n	8001d1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d1dc      	bne.n	8001ce2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d003      	beq.n	8001d3e <I2C_IsErrorOccurred+0xfa>
 8001d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d09d      	beq.n	8001c7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00b      	beq.n	8001da8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01c      	beq.n	8001e0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fe56 	bl	8001a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <I2C_IsErrorOccurred+0x1d4>)
 8001de4:	400b      	ands	r3, r1
 8001de6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	817b      	strh	r3, [r7, #10]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e34:	7a7b      	ldrb	r3, [r7, #9]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	0d5b      	lsrs	r3, r3, #21
 8001e56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <I2C_TransferConfig+0x60>)
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	ea02 0103 	and.w	r1, r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	03ff63ff 	.word	0x03ff63ff

08001e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d138      	bne.n	8001f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e032      	b.n	8001f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d139      	bne.n	8001fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e033      	b.n	8001fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2224      	movs	r2, #36	; 0x24
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	d130      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe8:	d038      	beq.n	800205c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2232      	movs	r2, #50	; 0x32
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002010:	e002      	b.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3b01      	subs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	d102      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f2      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d110      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e00f      	b.n	800205e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204a:	d007      	beq.n	800205c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002054:	4a05      	ldr	r2, [pc, #20]	; (800206c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40007000 	.word	0x40007000
 8002070:	20000000 	.word	0x20000000
 8002074:	431bde83 	.word	0x431bde83

08002078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	f000 bc02 	b.w	8002890 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	4b96      	ldr	r3, [pc, #600]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80e4 	beq.w	8002276 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4c>
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	f040 808b 	bne.w	80021d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	f040 8087 	bne.w	80021d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c4:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x64>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e3d9      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <HAL_RCC_OscConfig+0x7e>
 80020ec:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f4:	e005      	b.n	8002102 <HAL_RCC_OscConfig+0x8a>
 80020f6:	4b7c      	ldr	r3, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002102:	4293      	cmp	r3, r2
 8002104:	d223      	bcs.n	800214e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fd8c 	bl	8002c28 <RCC_SetFlashLatencyFromMSIRange>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e3ba      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211a:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a72      	ldr	r2, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	496d      	ldr	r1, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4968      	ldr	r1, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e025      	b.n	800219a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214e:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4960      	ldr	r1, [pc, #384]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	495b      	ldr	r1, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fd4c 	bl	8002c28 <RCC_SetFlashLatencyFromMSIRange>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e37a      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219a:	f000 fc81 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4950      	ldr	r1, [pc, #320]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_RCC_OscConfig+0x278>)
 80021b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ba:	4b4e      	ldr	r3, [pc, #312]	; (80022f4 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fe76 	bl	8000eb0 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d052      	beq.n	8002274 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	e35e      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d032      	beq.n	8002240 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a42      	ldr	r2, [pc, #264]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e6:	f7fe feb3 	bl	8000f50 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ee:	f7fe feaf 	bl	8000f50 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e347      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4930      	ldr	r1, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	492b      	ldr	r1, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
 800223e:	e01a      	b.n	8002276 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800224c:	f7fe fe80 	bl	8000f50 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002254:	f7fe fe7c 	bl	8000f50 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e314      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1dc>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d073      	beq.n	800236a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x21c>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d10e      	bne.n	80022ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d10b      	bne.n	80022ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d063      	beq.n	8002368 <HAL_RCC_OscConfig+0x2f0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d15f      	bne.n	8002368 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e2f1      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x24c>
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e025      	b.n	8002310 <HAL_RCC_OscConfig+0x298>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d114      	bne.n	80022f8 <HAL_RCC_OscConfig+0x280>
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a02      	ldr	r2, [pc, #8]	; (80022e8 <HAL_RCC_OscConfig+0x270>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x298>
 80022e8:	40021000 	.word	0x40021000
 80022ec:	080047f8 	.word	0x080047f8
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000004 	.word	0x20000004
 80022f8:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a9f      	ldr	r2, [pc, #636]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b9d      	ldr	r3, [pc, #628]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a9c      	ldr	r2, [pc, #624]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fe1a 	bl	8000f50 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fe16 	bl	8000f50 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e2ae      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x2a8>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fe06 	bl	8000f50 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fe02 	bl	8000f50 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e29a      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x2d0>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d060      	beq.n	8002438 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x310>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d116      	bne.n	80023b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_OscConfig+0x328>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e277      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	4973      	ldr	r1, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b4:	e040      	b.n	8002438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d023      	beq.n	8002406 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fdc1 	bl	8000f50 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fdbd 	bl	8000f50 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e255      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e4:	4b65      	ldr	r3, [pc, #404]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	495f      	ldr	r1, [pc, #380]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	e018      	b.n	8002438 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5c      	ldr	r2, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800240c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fd9d 	bl	8000f50 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fd99 	bl	8000f50 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e231      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d03c      	beq.n	80024be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01c      	beq.n	8002486 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244c:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800244e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002452:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fd78 	bl	8000f50 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fd74 	bl	8000f50 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e20c      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ef      	beq.n	8002464 <HAL_RCC_OscConfig+0x3ec>
 8002484:	e01b      	b.n	80024be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248c:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fd5b 	bl	8000f50 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249e:	f7fe fd57 	bl	8000f50 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1ef      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ef      	bne.n	800249e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 80a6 	beq.w	8002618 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x504>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_OscConfig+0x508>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d118      	bne.n	8002536 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_OscConfig+0x508>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x508>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002510:	f7fe fd1e 	bl	8000f50 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fd1a 	bl	8000f50 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1b2      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_RCC_OscConfig+0x508>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_RCC_OscConfig+0x4d8>
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254e:	e029      	b.n	80025a4 <HAL_RCC_OscConfig+0x52c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d115      	bne.n	8002584 <HAL_RCC_OscConfig+0x50c>
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_OscConfig+0x504>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x504>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x52c>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	4a99      	ldr	r2, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002594:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	4a95      	ldr	r2, [pc, #596]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d016      	beq.n	80025da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fcd0 	bl	8000f50 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fccc 	bl	8000f50 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e162      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ca:	4b89      	ldr	r3, [pc, #548]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ed      	beq.n	80025b4 <HAL_RCC_OscConfig+0x53c>
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fcb9 	bl	8000f50 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fcb5 	bl	8000f50 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e14b      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ed      	bne.n	80025e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b78      	ldr	r3, [pc, #480]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a77      	ldr	r2, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03c      	beq.n	800269e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800262e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002632:	4a6f      	ldr	r2, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fc88 	bl	8000f50 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002644:	f7fe fc84 	bl	8000f50 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e11c      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002656:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <HAL_RCC_OscConfig+0x5cc>
 8002664:	e01b      	b.n	800269e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266c:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fc6b 	bl	8000f50 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267e:	f7fe fc67 	bl	8000f50 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0ff      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002690:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80f3 	beq.w	800288e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	f040 80c9 	bne.w	8002844 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026b2:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0203 	and.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d12c      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	3b01      	subs	r3, #1
 80026d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d123      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d11b      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d113      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d109      	bne.n	8002720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	3b01      	subs	r3, #1
 800271a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d06b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d062      	beq.n	80027ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0ac      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002736:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800273c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002742:	f7fe fc05 	bl	8000f50 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fc01 	bl	8000f50 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e099      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002778:	3a01      	subs	r2, #1
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002782:	0212      	lsls	r2, r2, #8
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0552      	lsls	r2, r2, #21
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002796:	0852      	lsrs	r2, r2, #1
 8002798:	3a01      	subs	r2, #1
 800279a:	0652      	lsls	r2, r2, #25
 800279c:	4311      	orrs	r1, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a2:	06d2      	lsls	r2, r2, #27
 80027a4:	430a      	orrs	r2, r1
 80027a6:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027c4:	f7fe fbc4 	bl	8000f50 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe fbc0 	bl	8000f50 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e058      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_RCC_OscConfig+0x778>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ea:	e050      	b.n	800288e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e04f      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d144      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800281c:	f7fe fb98 	bl	8000f50 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fb94 	bl	8000f50 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e02c      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x7ac>
 8002842:	e024      	b.n	800288e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d01f      	beq.n	800288a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fb7b 	bl	8000f50 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fb77 	bl	8000f50 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4905      	ldr	r1, [pc, #20]	; (8002898 <HAL_RCC_OscConfig+0x820>)
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_OscConfig+0x824>)
 8002884:	4013      	ands	r3, r2
 8002886:	60cb      	str	r3, [r1, #12]
 8002888:	e001      	b.n	800288e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	feeefffc 	.word	0xfeeefffc

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0e7      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4970      	ldr	r1, [pc, #448]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b6e      	ldr	r3, [pc, #440]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cf      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d908      	bls.n	8002912 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4960      	ldr	r1, [pc, #384]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04c      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d121      	bne.n	8002976 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0a6      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d115      	bne.n	8002976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e09a      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002956:	4b4e      	ldr	r3, [pc, #312]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e08e      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002966:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e086      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4943      	ldr	r1, [pc, #268]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002988:	f7fe fae2 	bl	8000f50 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe fade 	bl	8000f50 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e06e      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d208      	bcs.n	80029e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	492b      	ldr	r1, [pc, #172]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d210      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 0207 	bic.w	r2, r3, #7
 80029fc:	4923      	ldr	r1, [pc, #140]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCC_ClockConfig+0x1ec>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e036      	b.n	8002a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	4918      	ldr	r1, [pc, #96]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4910      	ldr	r1, [pc, #64]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a54:	f000 f824 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	490b      	ldr	r1, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1f4>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1f8>)
 8002a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1fc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fa19 	bl	8000eb0 <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a82:	7afb      	ldrb	r3, [r7, #11]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	080047f8 	.word	0x080047f8
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d121      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d11e      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e005      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002afc:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	e004      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d134      	bne.n	8002b98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d003      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xac>
 8002b44:	e005      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b48:	617b      	str	r3, [r7, #20]
      break;
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b4e:	617b      	str	r3, [r7, #20]
      break;
 8002b50:	e002      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	617b      	str	r3, [r7, #20]
      break;
 8002b56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	3301      	adds	r3, #1
 8002b64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	fb03 f202 	mul.w	r2, r3, r2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	0e5b      	lsrs	r3, r3, #25
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b98:	69bb      	ldr	r3, [r7, #24]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08004810 	.word	0x08004810
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004808 	.word	0x08004808

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c00:	f7ff ffda 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004808 	.word	0x08004808

08002c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c40:	f7ff f9b6 	bl	8001fb0 <HAL_PWREx_GetVoltageRange>
 8002c44:	6178      	str	r0, [r7, #20]
 8002c46:	e014      	b.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c60:	f7ff f9a6 	bl	8001fb0 <HAL_PWREx_GetVoltageRange>
 8002c64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d10b      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d919      	bls.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2ba0      	cmp	r3, #160	; 0xa0
 8002c84:	d902      	bls.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c86:	2302      	movs	r3, #2
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e013      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e010      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d902      	bls.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c98:	2303      	movs	r3, #3
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e00a      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d102      	bne.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e004      	b.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b70      	cmp	r3, #112	; 0x70
 8002cae:	d101      	bne.n	8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40022000 	.word	0x40022000

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d031      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d0c:	d01a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d12:	d814      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d1c:	d10f      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a5c      	ldr	r2, [pc, #368]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fa44 	bl	80031c0 <RCCEx_PLLSAI1_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	74fb      	strb	r3, [r7, #19]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d4c:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	494e      	ldr	r1, [pc, #312]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 809e 	beq.w	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a3f      	ldr	r2, [pc, #252]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db8:	f7fe f8ca 	bl	8000f50 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbe:	e009      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc0:	f7fe f8c6 	bl	8000f50 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8002dd2:	e005      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d15a      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de6:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01e      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d019      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f886 	bl	8000f50 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	e00b      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fe f882 	bl	8000f50 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d902      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	74fb      	strb	r3, [r7, #19]
            break;
 8002e5e:	e006      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ec      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
 8002e90:	e006      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea0:	7c7b      	ldrb	r3, [r7, #17]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	4b9e      	ldr	r3, [pc, #632]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	4a9d      	ldr	r2, [pc, #628]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ebe:	4b98      	ldr	r3, [pc, #608]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4994      	ldr	r1, [pc, #592]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee0:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 020c 	bic.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	498c      	ldr	r1, [pc, #560]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f02:	4b87      	ldr	r3, [pc, #540]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	4983      	ldr	r1, [pc, #524]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	497b      	ldr	r1, [pc, #492]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4972      	ldr	r1, [pc, #456]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f68:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	496a      	ldr	r1, [pc, #424]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	4961      	ldr	r1, [pc, #388]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fac:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	4959      	ldr	r1, [pc, #356]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	4950      	ldr	r1, [pc, #320]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	4948      	ldr	r1, [pc, #288]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	493f      	ldr	r1, [pc, #252]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d028      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003042:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003052:	d106      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800305a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305e:	60d3      	str	r3, [r2, #12]
 8003060:	e011      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306a:	d10c      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f8a4 	bl	80031c0 <RCCEx_PLLSAI1_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d028      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	491f      	ldr	r1, [pc, #124]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b0:	d106      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030bc:	60d3      	str	r3, [r2, #12]
 80030be:	e011      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f875 	bl	80031c0 <RCCEx_PLLSAI1_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4908      	ldr	r1, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800310e:	d109      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a02      	ldr	r2, [pc, #8]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800311a:	60d3      	str	r3, [r2, #12]
 800311c:	e014      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800312c:	d10c      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f843 	bl	80031c0 <RCCEx_PLLSAI1_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003172:	d10c      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f820 	bl	80031c0 <RCCEx_PLLSAI1_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	4904      	ldr	r1, [pc, #16]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ce:	4b74      	ldr	r3, [pc, #464]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d018      	beq.n	800320c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031da:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0203 	and.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d10d      	bne.n	8003206 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
       ||
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031f2:	4b6b      	ldr	r3, [pc, #428]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
       ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d047      	beq.n	8003296 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e044      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d018      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0x86>
 8003214:	2b03      	cmp	r3, #3
 8003216:	d825      	bhi.n	8003264 <RCCEx_PLLSAI1_Config+0xa4>
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <RCCEx_PLLSAI1_Config+0x62>
 800321c:	2b02      	cmp	r3, #2
 800321e:	d009      	beq.n	8003234 <RCCEx_PLLSAI1_Config+0x74>
 8003220:	e020      	b.n	8003264 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003222:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11d      	bne.n	800326a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003232:	e01a      	b.n	800326a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e013      	b.n	800326e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003262:	e006      	b.n	8003272 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e004      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800326a:	bf00      	nop
 800326c:	e002      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003272:	bf00      	nop
    }

    if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6819      	ldr	r1, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	430b      	orrs	r3, r1
 8003290:	4943      	ldr	r1, [pc, #268]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d17c      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800329c:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fd fe52 	bl	8000f50 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ae:	e009      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b0:	f7fd fe4e 	bl	8000f50 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	73fb      	strb	r3, [r7, #15]
        break;
 80032c2:	e005      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ef      	bne.n	80032b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d15f      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d110      	bne.n	80032fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80032e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	0211      	lsls	r1, r2, #8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68d2      	ldr	r2, [r2, #12]
 80032f2:	06d2      	lsls	r2, r2, #27
 80032f4:	430a      	orrs	r2, r1
 80032f6:	492a      	ldr	r1, [pc, #168]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	610b      	str	r3, [r1, #16]
 80032fc:	e027      	b.n	800334e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d112      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800330c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	0211      	lsls	r1, r2, #8
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6912      	ldr	r2, [r2, #16]
 800331a:	0852      	lsrs	r2, r2, #1
 800331c:	3a01      	subs	r2, #1
 800331e:	0552      	lsls	r2, r2, #21
 8003320:	430a      	orrs	r2, r1
 8003322:	491f      	ldr	r1, [pc, #124]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	610b      	str	r3, [r1, #16]
 8003328:	e011      	b.n	800334e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003332:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	0211      	lsls	r1, r2, #8
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6952      	ldr	r2, [r2, #20]
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0652      	lsls	r2, r2, #25
 8003346:	430a      	orrs	r2, r1
 8003348:	4915      	ldr	r1, [pc, #84]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003358:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fd fdf9 	bl	8000f50 <HAL_GetTick>
 800335e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003360:	e009      	b.n	8003376 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003362:	f7fd fdf5 	bl	8000f50 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d902      	bls.n	8003376 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	73fb      	strb	r3, [r7, #15]
          break;
 8003374:	e005      	b.n	8003382 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e040      	b.n	8003438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd fc5a 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8c0 	bl	8003568 <UART_SetConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb3a 	bl	8003a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800340e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800341e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fbc1 	bl	8003bb8 <UART_CheckIdleState>
 8003436:	4603      	mov	r3, r0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003454:	2b20      	cmp	r3, #32
 8003456:	f040 8082 	bne.w	800355e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Transmit+0x26>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07a      	b.n	8003560 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_UART_Transmit+0x38>
 8003474:	2302      	movs	r3, #2
 8003476:	e073      	b.n	8003560 <HAL_UART_Transmit+0x120>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2221      	movs	r2, #33	; 0x21
 800348c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800348e:	f7fd fd5f 	bl	8000f50 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d108      	bne.n	80034c0 <HAL_UART_Transmit+0x80>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d104      	bne.n	80034c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e003      	b.n	80034c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034d0:	e02d      	b.n	800352e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fbb4 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e039      	b.n	8003560 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fe:	b292      	uxth	r2, r2
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	3302      	adds	r3, #2
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	e008      	b.n	800351c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b292      	uxth	r2, r2
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3301      	adds	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1cb      	bne.n	80034d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fb80 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e005      	b.n	8003560 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4313      	orrs	r3, r2
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4ba5      	ldr	r3, [pc, #660]	; (800382c <UART_SetConfig+0x2c4>)
 8003598:	4013      	ands	r3, r2
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a9a      	ldr	r2, [pc, #616]	; (8003830 <UART_SetConfig+0x2c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	4313      	orrs	r3, r2
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a91      	ldr	r2, [pc, #580]	; (8003834 <UART_SetConfig+0x2cc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d126      	bne.n	8003640 <UART_SetConfig+0xd8>
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <UART_SetConfig+0x2d0>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d81b      	bhi.n	8003638 <UART_SetConfig+0xd0>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0xa0>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	08003619 	.word	0x08003619
 800360c:	08003629 	.word	0x08003629
 8003610:	08003621 	.word	0x08003621
 8003614:	08003631 	.word	0x08003631
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e0d6      	b.n	80037ce <UART_SetConfig+0x266>
 8003620:	2302      	movs	r3, #2
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e0d2      	b.n	80037ce <UART_SetConfig+0x266>
 8003628:	2304      	movs	r3, #4
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e0ce      	b.n	80037ce <UART_SetConfig+0x266>
 8003630:	2308      	movs	r3, #8
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e0ca      	b.n	80037ce <UART_SetConfig+0x266>
 8003638:	2310      	movs	r3, #16
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e0c6      	b.n	80037ce <UART_SetConfig+0x266>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7d      	ldr	r2, [pc, #500]	; (800383c <UART_SetConfig+0x2d4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d138      	bne.n	80036bc <UART_SetConfig+0x154>
 800364a:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <UART_SetConfig+0x2d0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d82d      	bhi.n	80036b4 <UART_SetConfig+0x14c>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <UART_SetConfig+0xf8>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003695 	.word	0x08003695
 8003664:	080036b5 	.word	0x080036b5
 8003668:	080036b5 	.word	0x080036b5
 800366c:	080036b5 	.word	0x080036b5
 8003670:	080036a5 	.word	0x080036a5
 8003674:	080036b5 	.word	0x080036b5
 8003678:	080036b5 	.word	0x080036b5
 800367c:	080036b5 	.word	0x080036b5
 8003680:	0800369d 	.word	0x0800369d
 8003684:	080036b5 	.word	0x080036b5
 8003688:	080036b5 	.word	0x080036b5
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036ad 	.word	0x080036ad
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e098      	b.n	80037ce <UART_SetConfig+0x266>
 800369c:	2302      	movs	r3, #2
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a2:	e094      	b.n	80037ce <UART_SetConfig+0x266>
 80036a4:	2304      	movs	r3, #4
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036aa:	e090      	b.n	80037ce <UART_SetConfig+0x266>
 80036ac:	2308      	movs	r3, #8
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b2:	e08c      	b.n	80037ce <UART_SetConfig+0x266>
 80036b4:	2310      	movs	r3, #16
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ba:	e088      	b.n	80037ce <UART_SetConfig+0x266>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a5f      	ldr	r2, [pc, #380]	; (8003840 <UART_SetConfig+0x2d8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d125      	bne.n	8003712 <UART_SetConfig+0x1aa>
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <UART_SetConfig+0x2d0>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d016      	beq.n	8003702 <UART_SetConfig+0x19a>
 80036d4:	2b30      	cmp	r3, #48	; 0x30
 80036d6:	d818      	bhi.n	800370a <UART_SetConfig+0x1a2>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d00a      	beq.n	80036f2 <UART_SetConfig+0x18a>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d814      	bhi.n	800370a <UART_SetConfig+0x1a2>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <UART_SetConfig+0x182>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d008      	beq.n	80036fa <UART_SetConfig+0x192>
 80036e8:	e00f      	b.n	800370a <UART_SetConfig+0x1a2>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f0:	e06d      	b.n	80037ce <UART_SetConfig+0x266>
 80036f2:	2302      	movs	r3, #2
 80036f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f8:	e069      	b.n	80037ce <UART_SetConfig+0x266>
 80036fa:	2304      	movs	r3, #4
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003700:	e065      	b.n	80037ce <UART_SetConfig+0x266>
 8003702:	2308      	movs	r3, #8
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003708:	e061      	b.n	80037ce <UART_SetConfig+0x266>
 800370a:	2310      	movs	r3, #16
 800370c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003710:	e05d      	b.n	80037ce <UART_SetConfig+0x266>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <UART_SetConfig+0x2dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d125      	bne.n	8003768 <UART_SetConfig+0x200>
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <UART_SetConfig+0x2d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003726:	2bc0      	cmp	r3, #192	; 0xc0
 8003728:	d016      	beq.n	8003758 <UART_SetConfig+0x1f0>
 800372a:	2bc0      	cmp	r3, #192	; 0xc0
 800372c:	d818      	bhi.n	8003760 <UART_SetConfig+0x1f8>
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d00a      	beq.n	8003748 <UART_SetConfig+0x1e0>
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d814      	bhi.n	8003760 <UART_SetConfig+0x1f8>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <UART_SetConfig+0x1d8>
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d008      	beq.n	8003750 <UART_SetConfig+0x1e8>
 800373e:	e00f      	b.n	8003760 <UART_SetConfig+0x1f8>
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e042      	b.n	80037ce <UART_SetConfig+0x266>
 8003748:	2302      	movs	r3, #2
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e03e      	b.n	80037ce <UART_SetConfig+0x266>
 8003750:	2304      	movs	r3, #4
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e03a      	b.n	80037ce <UART_SetConfig+0x266>
 8003758:	2308      	movs	r3, #8
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e036      	b.n	80037ce <UART_SetConfig+0x266>
 8003760:	2310      	movs	r3, #16
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e032      	b.n	80037ce <UART_SetConfig+0x266>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a30      	ldr	r2, [pc, #192]	; (8003830 <UART_SetConfig+0x2c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d12a      	bne.n	80037c8 <UART_SetConfig+0x260>
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <UART_SetConfig+0x2d0>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800377c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003780:	d01a      	beq.n	80037b8 <UART_SetConfig+0x250>
 8003782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003786:	d81b      	bhi.n	80037c0 <UART_SetConfig+0x258>
 8003788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378c:	d00c      	beq.n	80037a8 <UART_SetConfig+0x240>
 800378e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003792:	d815      	bhi.n	80037c0 <UART_SetConfig+0x258>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <UART_SetConfig+0x238>
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d008      	beq.n	80037b0 <UART_SetConfig+0x248>
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x258>
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e012      	b.n	80037ce <UART_SetConfig+0x266>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e00e      	b.n	80037ce <UART_SetConfig+0x266>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e00a      	b.n	80037ce <UART_SetConfig+0x266>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e006      	b.n	80037ce <UART_SetConfig+0x266>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e002      	b.n	80037ce <UART_SetConfig+0x266>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <UART_SetConfig+0x2c8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f040 808b 	bne.w	80038f0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d834      	bhi.n	800384c <UART_SetConfig+0x2e4>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0x280>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	0800384d 	.word	0x0800384d
 80037f0:	08003815 	.word	0x08003815
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	0800381b 	.word	0x0800381b
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	0800384d 	.word	0x0800384d
 8003804:	0800384d 	.word	0x0800384d
 8003808:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7ff f9e0 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8003810:	61f8      	str	r0, [r7, #28]
        break;
 8003812:	e021      	b.n	8003858 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <UART_SetConfig+0x2e0>)
 8003816:	61fb      	str	r3, [r7, #28]
        break;
 8003818:	e01e      	b.n	8003858 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7ff f941 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 800381e:	61f8      	str	r0, [r7, #28]
        break;
 8003820:	e01a      	b.n	8003858 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	61fb      	str	r3, [r7, #28]
        break;
 8003828:	e016      	b.n	8003858 <UART_SetConfig+0x2f0>
 800382a:	bf00      	nop
 800382c:	efff69f3 	.word	0xefff69f3
 8003830:	40008000 	.word	0x40008000
 8003834:	40013800 	.word	0x40013800
 8003838:	40021000 	.word	0x40021000
 800383c:	40004400 	.word	0x40004400
 8003840:	40004800 	.word	0x40004800
 8003844:	40004c00 	.word	0x40004c00
 8003848:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80fa 	beq.w	8003a54 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d305      	bcc.n	800387c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	429a      	cmp	r2, r3
 800387a:	d903      	bls.n	8003884 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003882:	e0e7      	b.n	8003a54 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2200      	movs	r2, #0
 8003888:	461c      	mov	r4, r3
 800388a:	4615      	mov	r5, r2
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	022b      	lsls	r3, r5, #8
 8003896:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800389a:	0222      	lsls	r2, r4, #8
 800389c:	68f9      	ldr	r1, [r7, #12]
 800389e:	6849      	ldr	r1, [r1, #4]
 80038a0:	0849      	lsrs	r1, r1, #1
 80038a2:	2000      	movs	r0, #0
 80038a4:	4688      	mov	r8, r1
 80038a6:	4681      	mov	r9, r0
 80038a8:	eb12 0a08 	adds.w	sl, r2, r8
 80038ac:	eb43 0b09 	adc.w	fp, r3, r9
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038be:	4650      	mov	r0, sl
 80038c0:	4659      	mov	r1, fp
 80038c2:	f7fc fcdd 	bl	8000280 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4613      	mov	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d4:	d308      	bcc.n	80038e8 <UART_SetConfig+0x380>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038dc:	d204      	bcs.n	80038e8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	e0b5      	b.n	8003a54 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038ee:	e0b1      	b.n	8003a54 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f8:	d15d      	bne.n	80039b6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80038fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d827      	bhi.n	8003952 <UART_SetConfig+0x3ea>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0x3a0>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003935 	.word	0x08003935
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003953 	.word	0x08003953
 8003918:	08003943 	.word	0x08003943
 800391c:	08003953 	.word	0x08003953
 8003920:	08003953 	.word	0x08003953
 8003924:	08003953 	.word	0x08003953
 8003928:	0800394b 	.word	0x0800394b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff f950 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8003930:	61f8      	str	r0, [r7, #28]
        break;
 8003932:	e014      	b.n	800395e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003934:	f7ff f962 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8003938:	61f8      	str	r0, [r7, #28]
        break;
 800393a:	e010      	b.n	800395e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <UART_SetConfig+0x508>)
 800393e:	61fb      	str	r3, [r7, #28]
        break;
 8003940:	e00d      	b.n	800395e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003942:	f7ff f8ad 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003946:	61f8      	str	r0, [r7, #28]
        break;
 8003948:	e009      	b.n	800395e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e005      	b.n	800395e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800395c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d077      	beq.n	8003a54 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005a      	lsls	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d916      	bls.n	80039ae <UART_SetConfig+0x446>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003986:	d212      	bcs.n	80039ae <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f023 030f 	bic.w	r3, r3, #15
 8003990:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	b29b      	uxth	r3, r3
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	b29a      	uxth	r2, r3
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	8afa      	ldrh	r2, [r7, #22]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e052      	b.n	8003a54 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039b4:	e04e      	b.n	8003a54 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d827      	bhi.n	8003a0e <UART_SetConfig+0x4a6>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0x45c>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039f9 	.word	0x080039f9
 80039d0:	08003a0f 	.word	0x08003a0f
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	08003a0f 	.word	0x08003a0f
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a0f 	.word	0x08003a0f
 80039e4:	08003a07 	.word	0x08003a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e8:	f7ff f8f2 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 80039ec:	61f8      	str	r0, [r7, #28]
        break;
 80039ee:	e014      	b.n	8003a1a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7ff f904 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 80039f4:	61f8      	str	r0, [r7, #28]
        break;
 80039f6:	e010      	b.n	8003a1a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <UART_SetConfig+0x508>)
 80039fa:	61fb      	str	r3, [r7, #28]
        break;
 80039fc:	e00d      	b.n	8003a1a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fe:	f7ff f84f 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003a02:	61f8      	str	r0, [r7, #28]
        break;
 8003a04:	e009      	b.n	8003a1a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	61fb      	str	r3, [r7, #28]
        break;
 8003a0c:	e005      	b.n	8003a1a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a18:	bf00      	nop
    }

    if (pclk != 0U)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d019      	beq.n	8003a54 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	085a      	lsrs	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	d909      	bls.n	8003a4e <UART_SetConfig+0x4e6>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d205      	bcs.n	8003a4e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e002      	b.n	8003a54 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3728      	adds	r7, #40	; 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	00f42400 	.word	0x00f42400

08003a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01a      	beq.n	8003b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b72:	d10a      	bne.n	8003b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
  }
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc8:	f7fd f9c2 	bl	8000f50 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d10e      	bne.n	8003bfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f82d 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e023      	b.n	8003c42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d10e      	bne.n	8003c26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f817 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00d      	b.n	8003c42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b09c      	sub	sp, #112	; 0x70
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	e0a5      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	f000 80a1 	beq.w	8003da8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fd f973 	bl	8000f50 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d13e      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c90:	667b      	str	r3, [r7, #100]	; 0x64
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e6      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e067      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d04f      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d16:	d147      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
 8003d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	613b      	str	r3, [r7, #16]
   return(result);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d74:	623a      	str	r2, [r7, #32]
 8003d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e010      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	f43f af4a 	beq.w	8003c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3770      	adds	r7, #112	; 0x70
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <__errno>:
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <__errno+0x8>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	2000000c 	.word	0x2000000c

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4d0d      	ldr	r5, [pc, #52]	; (8003e18 <__libc_init_array+0x38>)
 8003de4:	4c0d      	ldr	r4, [pc, #52]	; (8003e1c <__libc_init_array+0x3c>)
 8003de6:	1b64      	subs	r4, r4, r5
 8003de8:	10a4      	asrs	r4, r4, #2
 8003dea:	2600      	movs	r6, #0
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	4d0b      	ldr	r5, [pc, #44]	; (8003e20 <__libc_init_array+0x40>)
 8003df2:	4c0c      	ldr	r4, [pc, #48]	; (8003e24 <__libc_init_array+0x44>)
 8003df4:	f000 fc8e 	bl	8004714 <_init>
 8003df8:	1b64      	subs	r4, r4, r5
 8003dfa:	10a4      	asrs	r4, r4, #2
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	0800487c 	.word	0x0800487c
 8003e1c:	0800487c 	.word	0x0800487c
 8003e20:	0800487c 	.word	0x0800487c
 8003e24:	08004880 	.word	0x08004880

08003e28 <memset>:
 8003e28:	4402      	add	r2, r0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <memset+0xa>
 8003e30:	4770      	bx	lr
 8003e32:	f803 1b01 	strb.w	r1, [r3], #1
 8003e36:	e7f9      	b.n	8003e2c <memset+0x4>

08003e38 <siprintf>:
 8003e38:	b40e      	push	{r1, r2, r3}
 8003e3a:	b500      	push	{lr}
 8003e3c:	b09c      	sub	sp, #112	; 0x70
 8003e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e40:	9002      	str	r0, [sp, #8]
 8003e42:	9006      	str	r0, [sp, #24]
 8003e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e48:	4809      	ldr	r0, [pc, #36]	; (8003e70 <siprintf+0x38>)
 8003e4a:	9107      	str	r1, [sp, #28]
 8003e4c:	9104      	str	r1, [sp, #16]
 8003e4e:	4909      	ldr	r1, [pc, #36]	; (8003e74 <siprintf+0x3c>)
 8003e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e54:	9105      	str	r1, [sp, #20]
 8003e56:	6800      	ldr	r0, [r0, #0]
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	a902      	add	r1, sp, #8
 8003e5c:	f000 f868 	bl	8003f30 <_svfiprintf_r>
 8003e60:	9b02      	ldr	r3, [sp, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	b01c      	add	sp, #112	; 0x70
 8003e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e6c:	b003      	add	sp, #12
 8003e6e:	4770      	bx	lr
 8003e70:	2000000c 	.word	0x2000000c
 8003e74:	ffff0208 	.word	0xffff0208

08003e78 <__ssputs_r>:
 8003e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7c:	688e      	ldr	r6, [r1, #8]
 8003e7e:	429e      	cmp	r6, r3
 8003e80:	4682      	mov	sl, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	4690      	mov	r8, r2
 8003e86:	461f      	mov	r7, r3
 8003e88:	d838      	bhi.n	8003efc <__ssputs_r+0x84>
 8003e8a:	898a      	ldrh	r2, [r1, #12]
 8003e8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e90:	d032      	beq.n	8003ef8 <__ssputs_r+0x80>
 8003e92:	6825      	ldr	r5, [r4, #0]
 8003e94:	6909      	ldr	r1, [r1, #16]
 8003e96:	eba5 0901 	sub.w	r9, r5, r1
 8003e9a:	6965      	ldr	r5, [r4, #20]
 8003e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	444b      	add	r3, r9
 8003ea8:	106d      	asrs	r5, r5, #1
 8003eaa:	429d      	cmp	r5, r3
 8003eac:	bf38      	it	cc
 8003eae:	461d      	movcc	r5, r3
 8003eb0:	0553      	lsls	r3, r2, #21
 8003eb2:	d531      	bpl.n	8003f18 <__ssputs_r+0xa0>
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f000 fb63 	bl	8004580 <_malloc_r>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	b950      	cbnz	r0, 8003ed4 <__ssputs_r+0x5c>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	f8ca 3000 	str.w	r3, [sl]
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed4:	6921      	ldr	r1, [r4, #16]
 8003ed6:	464a      	mov	r2, r9
 8003ed8:	f000 fabe 	bl	8004458 <memcpy>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	6126      	str	r6, [r4, #16]
 8003eea:	6165      	str	r5, [r4, #20]
 8003eec:	444e      	add	r6, r9
 8003eee:	eba5 0509 	sub.w	r5, r5, r9
 8003ef2:	6026      	str	r6, [r4, #0]
 8003ef4:	60a5      	str	r5, [r4, #8]
 8003ef6:	463e      	mov	r6, r7
 8003ef8:	42be      	cmp	r6, r7
 8003efa:	d900      	bls.n	8003efe <__ssputs_r+0x86>
 8003efc:	463e      	mov	r6, r7
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	4632      	mov	r2, r6
 8003f02:	4641      	mov	r1, r8
 8003f04:	f000 fab6 	bl	8004474 <memmove>
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	1b9b      	subs	r3, r3, r6
 8003f0c:	60a3      	str	r3, [r4, #8]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	4433      	add	r3, r6
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2000      	movs	r0, #0
 8003f16:	e7db      	b.n	8003ed0 <__ssputs_r+0x58>
 8003f18:	462a      	mov	r2, r5
 8003f1a:	f000 fba5 	bl	8004668 <_realloc_r>
 8003f1e:	4606      	mov	r6, r0
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d1e1      	bne.n	8003ee8 <__ssputs_r+0x70>
 8003f24:	6921      	ldr	r1, [r4, #16]
 8003f26:	4650      	mov	r0, sl
 8003f28:	f000 fabe 	bl	80044a8 <_free_r>
 8003f2c:	e7c7      	b.n	8003ebe <__ssputs_r+0x46>
	...

08003f30 <_svfiprintf_r>:
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	4698      	mov	r8, r3
 8003f36:	898b      	ldrh	r3, [r1, #12]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	b09d      	sub	sp, #116	; 0x74
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	460d      	mov	r5, r1
 8003f40:	4614      	mov	r4, r2
 8003f42:	d50e      	bpl.n	8003f62 <_svfiprintf_r+0x32>
 8003f44:	690b      	ldr	r3, [r1, #16]
 8003f46:	b963      	cbnz	r3, 8003f62 <_svfiprintf_r+0x32>
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	f000 fb19 	bl	8004580 <_malloc_r>
 8003f4e:	6028      	str	r0, [r5, #0]
 8003f50:	6128      	str	r0, [r5, #16]
 8003f52:	b920      	cbnz	r0, 8003f5e <_svfiprintf_r+0x2e>
 8003f54:	230c      	movs	r3, #12
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	e0d1      	b.n	8004102 <_svfiprintf_r+0x1d2>
 8003f5e:	2340      	movs	r3, #64	; 0x40
 8003f60:	616b      	str	r3, [r5, #20]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	2320      	movs	r3, #32
 8003f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f70:	2330      	movs	r3, #48	; 0x30
 8003f72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800411c <_svfiprintf_r+0x1ec>
 8003f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f7a:	f04f 0901 	mov.w	r9, #1
 8003f7e:	4623      	mov	r3, r4
 8003f80:	469a      	mov	sl, r3
 8003f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f86:	b10a      	cbz	r2, 8003f8c <_svfiprintf_r+0x5c>
 8003f88:	2a25      	cmp	r2, #37	; 0x25
 8003f8a:	d1f9      	bne.n	8003f80 <_svfiprintf_r+0x50>
 8003f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f90:	d00b      	beq.n	8003faa <_svfiprintf_r+0x7a>
 8003f92:	465b      	mov	r3, fp
 8003f94:	4622      	mov	r2, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f7ff ff6d 	bl	8003e78 <__ssputs_r>
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	f000 80aa 	beq.w	80040f8 <_svfiprintf_r+0x1c8>
 8003fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fa6:	445a      	add	r2, fp
 8003fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8003faa:	f89a 3000 	ldrb.w	r3, [sl]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80a2 	beq.w	80040f8 <_svfiprintf_r+0x1c8>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fbe:	f10a 0a01 	add.w	sl, sl, #1
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	9307      	str	r3, [sp, #28]
 8003fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fca:	931a      	str	r3, [sp, #104]	; 0x68
 8003fcc:	4654      	mov	r4, sl
 8003fce:	2205      	movs	r2, #5
 8003fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd4:	4851      	ldr	r0, [pc, #324]	; (800411c <_svfiprintf_r+0x1ec>)
 8003fd6:	f7fc f903 	bl	80001e0 <memchr>
 8003fda:	9a04      	ldr	r2, [sp, #16]
 8003fdc:	b9d8      	cbnz	r0, 8004016 <_svfiprintf_r+0xe6>
 8003fde:	06d0      	lsls	r0, r2, #27
 8003fe0:	bf44      	itt	mi
 8003fe2:	2320      	movmi	r3, #32
 8003fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fe8:	0711      	lsls	r1, r2, #28
 8003fea:	bf44      	itt	mi
 8003fec:	232b      	movmi	r3, #43	; 0x2b
 8003fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff8:	d015      	beq.n	8004026 <_svfiprintf_r+0xf6>
 8003ffa:	9a07      	ldr	r2, [sp, #28]
 8003ffc:	4654      	mov	r4, sl
 8003ffe:	2000      	movs	r0, #0
 8004000:	f04f 0c0a 	mov.w	ip, #10
 8004004:	4621      	mov	r1, r4
 8004006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800400a:	3b30      	subs	r3, #48	; 0x30
 800400c:	2b09      	cmp	r3, #9
 800400e:	d94e      	bls.n	80040ae <_svfiprintf_r+0x17e>
 8004010:	b1b0      	cbz	r0, 8004040 <_svfiprintf_r+0x110>
 8004012:	9207      	str	r2, [sp, #28]
 8004014:	e014      	b.n	8004040 <_svfiprintf_r+0x110>
 8004016:	eba0 0308 	sub.w	r3, r0, r8
 800401a:	fa09 f303 	lsl.w	r3, r9, r3
 800401e:	4313      	orrs	r3, r2
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	46a2      	mov	sl, r4
 8004024:	e7d2      	b.n	8003fcc <_svfiprintf_r+0x9c>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	1d19      	adds	r1, r3, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	9103      	str	r1, [sp, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfbb      	ittet	lt
 8004032:	425b      	neglt	r3, r3
 8004034:	f042 0202 	orrlt.w	r2, r2, #2
 8004038:	9307      	strge	r3, [sp, #28]
 800403a:	9307      	strlt	r3, [sp, #28]
 800403c:	bfb8      	it	lt
 800403e:	9204      	strlt	r2, [sp, #16]
 8004040:	7823      	ldrb	r3, [r4, #0]
 8004042:	2b2e      	cmp	r3, #46	; 0x2e
 8004044:	d10c      	bne.n	8004060 <_svfiprintf_r+0x130>
 8004046:	7863      	ldrb	r3, [r4, #1]
 8004048:	2b2a      	cmp	r3, #42	; 0x2a
 800404a:	d135      	bne.n	80040b8 <_svfiprintf_r+0x188>
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	9203      	str	r2, [sp, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	bfb8      	it	lt
 8004058:	f04f 33ff 	movlt.w	r3, #4294967295
 800405c:	3402      	adds	r4, #2
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800412c <_svfiprintf_r+0x1fc>
 8004064:	7821      	ldrb	r1, [r4, #0]
 8004066:	2203      	movs	r2, #3
 8004068:	4650      	mov	r0, sl
 800406a:	f7fc f8b9 	bl	80001e0 <memchr>
 800406e:	b140      	cbz	r0, 8004082 <_svfiprintf_r+0x152>
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	eba0 000a 	sub.w	r0, r0, sl
 8004076:	fa03 f000 	lsl.w	r0, r3, r0
 800407a:	9b04      	ldr	r3, [sp, #16]
 800407c:	4303      	orrs	r3, r0
 800407e:	3401      	adds	r4, #1
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004086:	4826      	ldr	r0, [pc, #152]	; (8004120 <_svfiprintf_r+0x1f0>)
 8004088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800408c:	2206      	movs	r2, #6
 800408e:	f7fc f8a7 	bl	80001e0 <memchr>
 8004092:	2800      	cmp	r0, #0
 8004094:	d038      	beq.n	8004108 <_svfiprintf_r+0x1d8>
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <_svfiprintf_r+0x1f4>)
 8004098:	bb1b      	cbnz	r3, 80040e2 <_svfiprintf_r+0x1b2>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	3307      	adds	r3, #7
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	3308      	adds	r3, #8
 80040a4:	9303      	str	r3, [sp, #12]
 80040a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a8:	4433      	add	r3, r6
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	e767      	b.n	8003f7e <_svfiprintf_r+0x4e>
 80040ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b2:	460c      	mov	r4, r1
 80040b4:	2001      	movs	r0, #1
 80040b6:	e7a5      	b.n	8004004 <_svfiprintf_r+0xd4>
 80040b8:	2300      	movs	r3, #0
 80040ba:	3401      	adds	r4, #1
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	4619      	mov	r1, r3
 80040c0:	f04f 0c0a 	mov.w	ip, #10
 80040c4:	4620      	mov	r0, r4
 80040c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ca:	3a30      	subs	r2, #48	; 0x30
 80040cc:	2a09      	cmp	r2, #9
 80040ce:	d903      	bls.n	80040d8 <_svfiprintf_r+0x1a8>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0c5      	beq.n	8004060 <_svfiprintf_r+0x130>
 80040d4:	9105      	str	r1, [sp, #20]
 80040d6:	e7c3      	b.n	8004060 <_svfiprintf_r+0x130>
 80040d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040dc:	4604      	mov	r4, r0
 80040de:	2301      	movs	r3, #1
 80040e0:	e7f0      	b.n	80040c4 <_svfiprintf_r+0x194>
 80040e2:	ab03      	add	r3, sp, #12
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	462a      	mov	r2, r5
 80040e8:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <_svfiprintf_r+0x1f8>)
 80040ea:	a904      	add	r1, sp, #16
 80040ec:	4638      	mov	r0, r7
 80040ee:	f3af 8000 	nop.w
 80040f2:	1c42      	adds	r2, r0, #1
 80040f4:	4606      	mov	r6, r0
 80040f6:	d1d6      	bne.n	80040a6 <_svfiprintf_r+0x176>
 80040f8:	89ab      	ldrh	r3, [r5, #12]
 80040fa:	065b      	lsls	r3, r3, #25
 80040fc:	f53f af2c 	bmi.w	8003f58 <_svfiprintf_r+0x28>
 8004100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004102:	b01d      	add	sp, #116	; 0x74
 8004104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004108:	ab03      	add	r3, sp, #12
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	462a      	mov	r2, r5
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <_svfiprintf_r+0x1f8>)
 8004110:	a904      	add	r1, sp, #16
 8004112:	4638      	mov	r0, r7
 8004114:	f000 f87a 	bl	800420c <_printf_i>
 8004118:	e7eb      	b.n	80040f2 <_svfiprintf_r+0x1c2>
 800411a:	bf00      	nop
 800411c:	08004840 	.word	0x08004840
 8004120:	0800484a 	.word	0x0800484a
 8004124:	00000000 	.word	0x00000000
 8004128:	08003e79 	.word	0x08003e79
 800412c:	08004846 	.word	0x08004846

08004130 <_printf_common>:
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	4616      	mov	r6, r2
 8004136:	4699      	mov	r9, r3
 8004138:	688a      	ldr	r2, [r1, #8]
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004140:	4293      	cmp	r3, r2
 8004142:	bfb8      	it	lt
 8004144:	4613      	movlt	r3, r2
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800414c:	4607      	mov	r7, r0
 800414e:	460c      	mov	r4, r1
 8004150:	b10a      	cbz	r2, 8004156 <_printf_common+0x26>
 8004152:	3301      	adds	r3, #1
 8004154:	6033      	str	r3, [r6, #0]
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	0699      	lsls	r1, r3, #26
 800415a:	bf42      	ittt	mi
 800415c:	6833      	ldrmi	r3, [r6, #0]
 800415e:	3302      	addmi	r3, #2
 8004160:	6033      	strmi	r3, [r6, #0]
 8004162:	6825      	ldr	r5, [r4, #0]
 8004164:	f015 0506 	ands.w	r5, r5, #6
 8004168:	d106      	bne.n	8004178 <_printf_common+0x48>
 800416a:	f104 0a19 	add.w	sl, r4, #25
 800416e:	68e3      	ldr	r3, [r4, #12]
 8004170:	6832      	ldr	r2, [r6, #0]
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	42ab      	cmp	r3, r5
 8004176:	dc26      	bgt.n	80041c6 <_printf_common+0x96>
 8004178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800417c:	1e13      	subs	r3, r2, #0
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	bf18      	it	ne
 8004182:	2301      	movne	r3, #1
 8004184:	0692      	lsls	r2, r2, #26
 8004186:	d42b      	bmi.n	80041e0 <_printf_common+0xb0>
 8004188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800418c:	4649      	mov	r1, r9
 800418e:	4638      	mov	r0, r7
 8004190:	47c0      	blx	r8
 8004192:	3001      	adds	r0, #1
 8004194:	d01e      	beq.n	80041d4 <_printf_common+0xa4>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	68e5      	ldr	r5, [r4, #12]
 800419a:	6832      	ldr	r2, [r6, #0]
 800419c:	f003 0306 	and.w	r3, r3, #6
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	bf08      	it	eq
 80041a4:	1aad      	subeq	r5, r5, r2
 80041a6:	68a3      	ldr	r3, [r4, #8]
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	bf0c      	ite	eq
 80041ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b0:	2500      	movne	r5, #0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bfc4      	itt	gt
 80041b6:	1a9b      	subgt	r3, r3, r2
 80041b8:	18ed      	addgt	r5, r5, r3
 80041ba:	2600      	movs	r6, #0
 80041bc:	341a      	adds	r4, #26
 80041be:	42b5      	cmp	r5, r6
 80041c0:	d11a      	bne.n	80041f8 <_printf_common+0xc8>
 80041c2:	2000      	movs	r0, #0
 80041c4:	e008      	b.n	80041d8 <_printf_common+0xa8>
 80041c6:	2301      	movs	r3, #1
 80041c8:	4652      	mov	r2, sl
 80041ca:	4649      	mov	r1, r9
 80041cc:	4638      	mov	r0, r7
 80041ce:	47c0      	blx	r8
 80041d0:	3001      	adds	r0, #1
 80041d2:	d103      	bne.n	80041dc <_printf_common+0xac>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	3501      	adds	r5, #1
 80041de:	e7c6      	b.n	800416e <_printf_common+0x3e>
 80041e0:	18e1      	adds	r1, r4, r3
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	2030      	movs	r0, #48	; 0x30
 80041e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ea:	4422      	add	r2, r4
 80041ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f4:	3302      	adds	r3, #2
 80041f6:	e7c7      	b.n	8004188 <_printf_common+0x58>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4622      	mov	r2, r4
 80041fc:	4649      	mov	r1, r9
 80041fe:	4638      	mov	r0, r7
 8004200:	47c0      	blx	r8
 8004202:	3001      	adds	r0, #1
 8004204:	d0e6      	beq.n	80041d4 <_printf_common+0xa4>
 8004206:	3601      	adds	r6, #1
 8004208:	e7d9      	b.n	80041be <_printf_common+0x8e>
	...

0800420c <_printf_i>:
 800420c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	7e0f      	ldrb	r7, [r1, #24]
 8004212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004214:	2f78      	cmp	r7, #120	; 0x78
 8004216:	4691      	mov	r9, r2
 8004218:	4680      	mov	r8, r0
 800421a:	460c      	mov	r4, r1
 800421c:	469a      	mov	sl, r3
 800421e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004222:	d807      	bhi.n	8004234 <_printf_i+0x28>
 8004224:	2f62      	cmp	r7, #98	; 0x62
 8004226:	d80a      	bhi.n	800423e <_printf_i+0x32>
 8004228:	2f00      	cmp	r7, #0
 800422a:	f000 80d8 	beq.w	80043de <_printf_i+0x1d2>
 800422e:	2f58      	cmp	r7, #88	; 0x58
 8004230:	f000 80a3 	beq.w	800437a <_printf_i+0x16e>
 8004234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800423c:	e03a      	b.n	80042b4 <_printf_i+0xa8>
 800423e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004242:	2b15      	cmp	r3, #21
 8004244:	d8f6      	bhi.n	8004234 <_printf_i+0x28>
 8004246:	a101      	add	r1, pc, #4	; (adr r1, 800424c <_printf_i+0x40>)
 8004248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800424c:	080042a5 	.word	0x080042a5
 8004250:	080042b9 	.word	0x080042b9
 8004254:	08004235 	.word	0x08004235
 8004258:	08004235 	.word	0x08004235
 800425c:	08004235 	.word	0x08004235
 8004260:	08004235 	.word	0x08004235
 8004264:	080042b9 	.word	0x080042b9
 8004268:	08004235 	.word	0x08004235
 800426c:	08004235 	.word	0x08004235
 8004270:	08004235 	.word	0x08004235
 8004274:	08004235 	.word	0x08004235
 8004278:	080043c5 	.word	0x080043c5
 800427c:	080042e9 	.word	0x080042e9
 8004280:	080043a7 	.word	0x080043a7
 8004284:	08004235 	.word	0x08004235
 8004288:	08004235 	.word	0x08004235
 800428c:	080043e7 	.word	0x080043e7
 8004290:	08004235 	.word	0x08004235
 8004294:	080042e9 	.word	0x080042e9
 8004298:	08004235 	.word	0x08004235
 800429c:	08004235 	.word	0x08004235
 80042a0:	080043af 	.word	0x080043af
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	1d1a      	adds	r2, r3, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	602a      	str	r2, [r5, #0]
 80042ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0a3      	b.n	8004400 <_printf_i+0x1f4>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	6829      	ldr	r1, [r5, #0]
 80042bc:	0606      	lsls	r6, r0, #24
 80042be:	f101 0304 	add.w	r3, r1, #4
 80042c2:	d50a      	bpl.n	80042da <_printf_i+0xce>
 80042c4:	680e      	ldr	r6, [r1, #0]
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	da03      	bge.n	80042d4 <_printf_i+0xc8>
 80042cc:	232d      	movs	r3, #45	; 0x2d
 80042ce:	4276      	negs	r6, r6
 80042d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042d4:	485e      	ldr	r0, [pc, #376]	; (8004450 <_printf_i+0x244>)
 80042d6:	230a      	movs	r3, #10
 80042d8:	e019      	b.n	800430e <_printf_i+0x102>
 80042da:	680e      	ldr	r6, [r1, #0]
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042e2:	bf18      	it	ne
 80042e4:	b236      	sxthne	r6, r6
 80042e6:	e7ef      	b.n	80042c8 <_printf_i+0xbc>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	6820      	ldr	r0, [r4, #0]
 80042ec:	1d19      	adds	r1, r3, #4
 80042ee:	6029      	str	r1, [r5, #0]
 80042f0:	0601      	lsls	r1, r0, #24
 80042f2:	d501      	bpl.n	80042f8 <_printf_i+0xec>
 80042f4:	681e      	ldr	r6, [r3, #0]
 80042f6:	e002      	b.n	80042fe <_printf_i+0xf2>
 80042f8:	0646      	lsls	r6, r0, #25
 80042fa:	d5fb      	bpl.n	80042f4 <_printf_i+0xe8>
 80042fc:	881e      	ldrh	r6, [r3, #0]
 80042fe:	4854      	ldr	r0, [pc, #336]	; (8004450 <_printf_i+0x244>)
 8004300:	2f6f      	cmp	r7, #111	; 0x6f
 8004302:	bf0c      	ite	eq
 8004304:	2308      	moveq	r3, #8
 8004306:	230a      	movne	r3, #10
 8004308:	2100      	movs	r1, #0
 800430a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800430e:	6865      	ldr	r5, [r4, #4]
 8004310:	60a5      	str	r5, [r4, #8]
 8004312:	2d00      	cmp	r5, #0
 8004314:	bfa2      	ittt	ge
 8004316:	6821      	ldrge	r1, [r4, #0]
 8004318:	f021 0104 	bicge.w	r1, r1, #4
 800431c:	6021      	strge	r1, [r4, #0]
 800431e:	b90e      	cbnz	r6, 8004324 <_printf_i+0x118>
 8004320:	2d00      	cmp	r5, #0
 8004322:	d04d      	beq.n	80043c0 <_printf_i+0x1b4>
 8004324:	4615      	mov	r5, r2
 8004326:	fbb6 f1f3 	udiv	r1, r6, r3
 800432a:	fb03 6711 	mls	r7, r3, r1, r6
 800432e:	5dc7      	ldrb	r7, [r0, r7]
 8004330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004334:	4637      	mov	r7, r6
 8004336:	42bb      	cmp	r3, r7
 8004338:	460e      	mov	r6, r1
 800433a:	d9f4      	bls.n	8004326 <_printf_i+0x11a>
 800433c:	2b08      	cmp	r3, #8
 800433e:	d10b      	bne.n	8004358 <_printf_i+0x14c>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	07de      	lsls	r6, r3, #31
 8004344:	d508      	bpl.n	8004358 <_printf_i+0x14c>
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	6861      	ldr	r1, [r4, #4]
 800434a:	4299      	cmp	r1, r3
 800434c:	bfde      	ittt	le
 800434e:	2330      	movle	r3, #48	; 0x30
 8004350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004358:	1b52      	subs	r2, r2, r5
 800435a:	6122      	str	r2, [r4, #16]
 800435c:	f8cd a000 	str.w	sl, [sp]
 8004360:	464b      	mov	r3, r9
 8004362:	aa03      	add	r2, sp, #12
 8004364:	4621      	mov	r1, r4
 8004366:	4640      	mov	r0, r8
 8004368:	f7ff fee2 	bl	8004130 <_printf_common>
 800436c:	3001      	adds	r0, #1
 800436e:	d14c      	bne.n	800440a <_printf_i+0x1fe>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	b004      	add	sp, #16
 8004376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437a:	4835      	ldr	r0, [pc, #212]	; (8004450 <_printf_i+0x244>)
 800437c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004380:	6829      	ldr	r1, [r5, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	f851 6b04 	ldr.w	r6, [r1], #4
 8004388:	6029      	str	r1, [r5, #0]
 800438a:	061d      	lsls	r5, r3, #24
 800438c:	d514      	bpl.n	80043b8 <_printf_i+0x1ac>
 800438e:	07df      	lsls	r7, r3, #31
 8004390:	bf44      	itt	mi
 8004392:	f043 0320 	orrmi.w	r3, r3, #32
 8004396:	6023      	strmi	r3, [r4, #0]
 8004398:	b91e      	cbnz	r6, 80043a2 <_printf_i+0x196>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f023 0320 	bic.w	r3, r3, #32
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	2310      	movs	r3, #16
 80043a4:	e7b0      	b.n	8004308 <_printf_i+0xfc>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	f043 0320 	orr.w	r3, r3, #32
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	2378      	movs	r3, #120	; 0x78
 80043b0:	4828      	ldr	r0, [pc, #160]	; (8004454 <_printf_i+0x248>)
 80043b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043b6:	e7e3      	b.n	8004380 <_printf_i+0x174>
 80043b8:	0659      	lsls	r1, r3, #25
 80043ba:	bf48      	it	mi
 80043bc:	b2b6      	uxthmi	r6, r6
 80043be:	e7e6      	b.n	800438e <_printf_i+0x182>
 80043c0:	4615      	mov	r5, r2
 80043c2:	e7bb      	b.n	800433c <_printf_i+0x130>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	6826      	ldr	r6, [r4, #0]
 80043c8:	6961      	ldr	r1, [r4, #20]
 80043ca:	1d18      	adds	r0, r3, #4
 80043cc:	6028      	str	r0, [r5, #0]
 80043ce:	0635      	lsls	r5, r6, #24
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0x1cc>
 80043d4:	6019      	str	r1, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0x1d2>
 80043d8:	0670      	lsls	r0, r6, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0x1c8>
 80043dc:	8019      	strh	r1, [r3, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	4615      	mov	r5, r2
 80043e4:	e7ba      	b.n	800435c <_printf_i+0x150>
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	1d1a      	adds	r2, r3, #4
 80043ea:	602a      	str	r2, [r5, #0]
 80043ec:	681d      	ldr	r5, [r3, #0]
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	2100      	movs	r1, #0
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7fb fef4 	bl	80001e0 <memchr>
 80043f8:	b108      	cbz	r0, 80043fe <_printf_i+0x1f2>
 80043fa:	1b40      	subs	r0, r0, r5
 80043fc:	6060      	str	r0, [r4, #4]
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	2300      	movs	r3, #0
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	e7a8      	b.n	800435c <_printf_i+0x150>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	462a      	mov	r2, r5
 800440e:	4649      	mov	r1, r9
 8004410:	4640      	mov	r0, r8
 8004412:	47d0      	blx	sl
 8004414:	3001      	adds	r0, #1
 8004416:	d0ab      	beq.n	8004370 <_printf_i+0x164>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	079b      	lsls	r3, r3, #30
 800441c:	d413      	bmi.n	8004446 <_printf_i+0x23a>
 800441e:	68e0      	ldr	r0, [r4, #12]
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	4298      	cmp	r0, r3
 8004424:	bfb8      	it	lt
 8004426:	4618      	movlt	r0, r3
 8004428:	e7a4      	b.n	8004374 <_printf_i+0x168>
 800442a:	2301      	movs	r3, #1
 800442c:	4632      	mov	r2, r6
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	47d0      	blx	sl
 8004434:	3001      	adds	r0, #1
 8004436:	d09b      	beq.n	8004370 <_printf_i+0x164>
 8004438:	3501      	adds	r5, #1
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	9903      	ldr	r1, [sp, #12]
 800443e:	1a5b      	subs	r3, r3, r1
 8004440:	42ab      	cmp	r3, r5
 8004442:	dcf2      	bgt.n	800442a <_printf_i+0x21e>
 8004444:	e7eb      	b.n	800441e <_printf_i+0x212>
 8004446:	2500      	movs	r5, #0
 8004448:	f104 0619 	add.w	r6, r4, #25
 800444c:	e7f5      	b.n	800443a <_printf_i+0x22e>
 800444e:	bf00      	nop
 8004450:	08004851 	.word	0x08004851
 8004454:	08004862 	.word	0x08004862

08004458 <memcpy>:
 8004458:	440a      	add	r2, r1
 800445a:	4291      	cmp	r1, r2
 800445c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004460:	d100      	bne.n	8004464 <memcpy+0xc>
 8004462:	4770      	bx	lr
 8004464:	b510      	push	{r4, lr}
 8004466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800446a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800446e:	4291      	cmp	r1, r2
 8004470:	d1f9      	bne.n	8004466 <memcpy+0xe>
 8004472:	bd10      	pop	{r4, pc}

08004474 <memmove>:
 8004474:	4288      	cmp	r0, r1
 8004476:	b510      	push	{r4, lr}
 8004478:	eb01 0402 	add.w	r4, r1, r2
 800447c:	d902      	bls.n	8004484 <memmove+0x10>
 800447e:	4284      	cmp	r4, r0
 8004480:	4623      	mov	r3, r4
 8004482:	d807      	bhi.n	8004494 <memmove+0x20>
 8004484:	1e43      	subs	r3, r0, #1
 8004486:	42a1      	cmp	r1, r4
 8004488:	d008      	beq.n	800449c <memmove+0x28>
 800448a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004492:	e7f8      	b.n	8004486 <memmove+0x12>
 8004494:	4402      	add	r2, r0
 8004496:	4601      	mov	r1, r0
 8004498:	428a      	cmp	r2, r1
 800449a:	d100      	bne.n	800449e <memmove+0x2a>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044a6:	e7f7      	b.n	8004498 <memmove+0x24>

080044a8 <_free_r>:
 80044a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044aa:	2900      	cmp	r1, #0
 80044ac:	d044      	beq.n	8004538 <_free_r+0x90>
 80044ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b2:	9001      	str	r0, [sp, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f1a1 0404 	sub.w	r4, r1, #4
 80044ba:	bfb8      	it	lt
 80044bc:	18e4      	addlt	r4, r4, r3
 80044be:	f000 f913 	bl	80046e8 <__malloc_lock>
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <_free_r+0x94>)
 80044c4:	9801      	ldr	r0, [sp, #4]
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	b933      	cbnz	r3, 80044d8 <_free_r+0x30>
 80044ca:	6063      	str	r3, [r4, #4]
 80044cc:	6014      	str	r4, [r2, #0]
 80044ce:	b003      	add	sp, #12
 80044d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044d4:	f000 b90e 	b.w	80046f4 <__malloc_unlock>
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d908      	bls.n	80044ee <_free_r+0x46>
 80044dc:	6825      	ldr	r5, [r4, #0]
 80044de:	1961      	adds	r1, r4, r5
 80044e0:	428b      	cmp	r3, r1
 80044e2:	bf01      	itttt	eq
 80044e4:	6819      	ldreq	r1, [r3, #0]
 80044e6:	685b      	ldreq	r3, [r3, #4]
 80044e8:	1949      	addeq	r1, r1, r5
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	e7ed      	b.n	80044ca <_free_r+0x22>
 80044ee:	461a      	mov	r2, r3
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b10b      	cbz	r3, 80044f8 <_free_r+0x50>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d9fa      	bls.n	80044ee <_free_r+0x46>
 80044f8:	6811      	ldr	r1, [r2, #0]
 80044fa:	1855      	adds	r5, r2, r1
 80044fc:	42a5      	cmp	r5, r4
 80044fe:	d10b      	bne.n	8004518 <_free_r+0x70>
 8004500:	6824      	ldr	r4, [r4, #0]
 8004502:	4421      	add	r1, r4
 8004504:	1854      	adds	r4, r2, r1
 8004506:	42a3      	cmp	r3, r4
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	d1e0      	bne.n	80044ce <_free_r+0x26>
 800450c:	681c      	ldr	r4, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6053      	str	r3, [r2, #4]
 8004512:	4421      	add	r1, r4
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	e7da      	b.n	80044ce <_free_r+0x26>
 8004518:	d902      	bls.n	8004520 <_free_r+0x78>
 800451a:	230c      	movs	r3, #12
 800451c:	6003      	str	r3, [r0, #0]
 800451e:	e7d6      	b.n	80044ce <_free_r+0x26>
 8004520:	6825      	ldr	r5, [r4, #0]
 8004522:	1961      	adds	r1, r4, r5
 8004524:	428b      	cmp	r3, r1
 8004526:	bf04      	itt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	bf04      	itt	eq
 8004530:	1949      	addeq	r1, r1, r5
 8004532:	6021      	streq	r1, [r4, #0]
 8004534:	6054      	str	r4, [r2, #4]
 8004536:	e7ca      	b.n	80044ce <_free_r+0x26>
 8004538:	b003      	add	sp, #12
 800453a:	bd30      	pop	{r4, r5, pc}
 800453c:	200001b0 	.word	0x200001b0

08004540 <sbrk_aligned>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0e      	ldr	r6, [pc, #56]	; (800457c <sbrk_aligned+0x3c>)
 8004544:	460c      	mov	r4, r1
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	4605      	mov	r5, r0
 800454a:	b911      	cbnz	r1, 8004552 <sbrk_aligned+0x12>
 800454c:	f000 f8bc 	bl	80046c8 <_sbrk_r>
 8004550:	6030      	str	r0, [r6, #0]
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f8b7 	bl	80046c8 <_sbrk_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d00a      	beq.n	8004574 <sbrk_aligned+0x34>
 800455e:	1cc4      	adds	r4, r0, #3
 8004560:	f024 0403 	bic.w	r4, r4, #3
 8004564:	42a0      	cmp	r0, r4
 8004566:	d007      	beq.n	8004578 <sbrk_aligned+0x38>
 8004568:	1a21      	subs	r1, r4, r0
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f8ac 	bl	80046c8 <_sbrk_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d101      	bne.n	8004578 <sbrk_aligned+0x38>
 8004574:	f04f 34ff 	mov.w	r4, #4294967295
 8004578:	4620      	mov	r0, r4
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	200001b4 	.word	0x200001b4

08004580 <_malloc_r>:
 8004580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004584:	1ccd      	adds	r5, r1, #3
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	2d00      	cmp	r5, #0
 8004594:	4607      	mov	r7, r0
 8004596:	db01      	blt.n	800459c <_malloc_r+0x1c>
 8004598:	42a9      	cmp	r1, r5
 800459a:	d905      	bls.n	80045a8 <_malloc_r+0x28>
 800459c:	230c      	movs	r3, #12
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	2600      	movs	r6, #0
 80045a2:	4630      	mov	r0, r6
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	4e2e      	ldr	r6, [pc, #184]	; (8004664 <_malloc_r+0xe4>)
 80045aa:	f000 f89d 	bl	80046e8 <__malloc_lock>
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	461c      	mov	r4, r3
 80045b2:	bb34      	cbnz	r4, 8004602 <_malloc_r+0x82>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4638      	mov	r0, r7
 80045b8:	f7ff ffc2 	bl	8004540 <sbrk_aligned>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	4604      	mov	r4, r0
 80045c0:	d14d      	bne.n	800465e <_malloc_r+0xde>
 80045c2:	6834      	ldr	r4, [r6, #0]
 80045c4:	4626      	mov	r6, r4
 80045c6:	2e00      	cmp	r6, #0
 80045c8:	d140      	bne.n	800464c <_malloc_r+0xcc>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	4631      	mov	r1, r6
 80045ce:	4638      	mov	r0, r7
 80045d0:	eb04 0803 	add.w	r8, r4, r3
 80045d4:	f000 f878 	bl	80046c8 <_sbrk_r>
 80045d8:	4580      	cmp	r8, r0
 80045da:	d13a      	bne.n	8004652 <_malloc_r+0xd2>
 80045dc:	6821      	ldr	r1, [r4, #0]
 80045de:	3503      	adds	r5, #3
 80045e0:	1a6d      	subs	r5, r5, r1
 80045e2:	f025 0503 	bic.w	r5, r5, #3
 80045e6:	3508      	adds	r5, #8
 80045e8:	2d0c      	cmp	r5, #12
 80045ea:	bf38      	it	cc
 80045ec:	250c      	movcc	r5, #12
 80045ee:	4629      	mov	r1, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7ff ffa5 	bl	8004540 <sbrk_aligned>
 80045f6:	3001      	adds	r0, #1
 80045f8:	d02b      	beq.n	8004652 <_malloc_r+0xd2>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	442b      	add	r3, r5
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	e00e      	b.n	8004620 <_malloc_r+0xa0>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	1b52      	subs	r2, r2, r5
 8004606:	d41e      	bmi.n	8004646 <_malloc_r+0xc6>
 8004608:	2a0b      	cmp	r2, #11
 800460a:	d916      	bls.n	800463a <_malloc_r+0xba>
 800460c:	1961      	adds	r1, r4, r5
 800460e:	42a3      	cmp	r3, r4
 8004610:	6025      	str	r5, [r4, #0]
 8004612:	bf18      	it	ne
 8004614:	6059      	strne	r1, [r3, #4]
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	bf08      	it	eq
 800461a:	6031      	streq	r1, [r6, #0]
 800461c:	5162      	str	r2, [r4, r5]
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	4638      	mov	r0, r7
 8004622:	f104 060b 	add.w	r6, r4, #11
 8004626:	f000 f865 	bl	80046f4 <__malloc_unlock>
 800462a:	f026 0607 	bic.w	r6, r6, #7
 800462e:	1d23      	adds	r3, r4, #4
 8004630:	1af2      	subs	r2, r6, r3
 8004632:	d0b6      	beq.n	80045a2 <_malloc_r+0x22>
 8004634:	1b9b      	subs	r3, r3, r6
 8004636:	50a3      	str	r3, [r4, r2]
 8004638:	e7b3      	b.n	80045a2 <_malloc_r+0x22>
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	42a3      	cmp	r3, r4
 800463e:	bf0c      	ite	eq
 8004640:	6032      	streq	r2, [r6, #0]
 8004642:	605a      	strne	r2, [r3, #4]
 8004644:	e7ec      	b.n	8004620 <_malloc_r+0xa0>
 8004646:	4623      	mov	r3, r4
 8004648:	6864      	ldr	r4, [r4, #4]
 800464a:	e7b2      	b.n	80045b2 <_malloc_r+0x32>
 800464c:	4634      	mov	r4, r6
 800464e:	6876      	ldr	r6, [r6, #4]
 8004650:	e7b9      	b.n	80045c6 <_malloc_r+0x46>
 8004652:	230c      	movs	r3, #12
 8004654:	603b      	str	r3, [r7, #0]
 8004656:	4638      	mov	r0, r7
 8004658:	f000 f84c 	bl	80046f4 <__malloc_unlock>
 800465c:	e7a1      	b.n	80045a2 <_malloc_r+0x22>
 800465e:	6025      	str	r5, [r4, #0]
 8004660:	e7de      	b.n	8004620 <_malloc_r+0xa0>
 8004662:	bf00      	nop
 8004664:	200001b0 	.word	0x200001b0

08004668 <_realloc_r>:
 8004668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800466c:	4680      	mov	r8, r0
 800466e:	4614      	mov	r4, r2
 8004670:	460e      	mov	r6, r1
 8004672:	b921      	cbnz	r1, 800467e <_realloc_r+0x16>
 8004674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	4611      	mov	r1, r2
 800467a:	f7ff bf81 	b.w	8004580 <_malloc_r>
 800467e:	b92a      	cbnz	r2, 800468c <_realloc_r+0x24>
 8004680:	f7ff ff12 	bl	80044a8 <_free_r>
 8004684:	4625      	mov	r5, r4
 8004686:	4628      	mov	r0, r5
 8004688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800468c:	f000 f838 	bl	8004700 <_malloc_usable_size_r>
 8004690:	4284      	cmp	r4, r0
 8004692:	4607      	mov	r7, r0
 8004694:	d802      	bhi.n	800469c <_realloc_r+0x34>
 8004696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800469a:	d812      	bhi.n	80046c2 <_realloc_r+0x5a>
 800469c:	4621      	mov	r1, r4
 800469e:	4640      	mov	r0, r8
 80046a0:	f7ff ff6e 	bl	8004580 <_malloc_r>
 80046a4:	4605      	mov	r5, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d0ed      	beq.n	8004686 <_realloc_r+0x1e>
 80046aa:	42bc      	cmp	r4, r7
 80046ac:	4622      	mov	r2, r4
 80046ae:	4631      	mov	r1, r6
 80046b0:	bf28      	it	cs
 80046b2:	463a      	movcs	r2, r7
 80046b4:	f7ff fed0 	bl	8004458 <memcpy>
 80046b8:	4631      	mov	r1, r6
 80046ba:	4640      	mov	r0, r8
 80046bc:	f7ff fef4 	bl	80044a8 <_free_r>
 80046c0:	e7e1      	b.n	8004686 <_realloc_r+0x1e>
 80046c2:	4635      	mov	r5, r6
 80046c4:	e7df      	b.n	8004686 <_realloc_r+0x1e>
	...

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d06      	ldr	r5, [pc, #24]	; (80046e4 <_sbrk_r+0x1c>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fb5a 	bl	8000d8c <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200001b8 	.word	0x200001b8

080046e8 <__malloc_lock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <__malloc_lock+0x8>)
 80046ea:	f000 b811 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200001bc 	.word	0x200001bc

080046f4 <__malloc_unlock>:
 80046f4:	4801      	ldr	r0, [pc, #4]	; (80046fc <__malloc_unlock+0x8>)
 80046f6:	f000 b80c 	b.w	8004712 <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200001bc 	.word	0x200001bc

08004700 <_malloc_usable_size_r>:
 8004700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004704:	1f18      	subs	r0, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	bfbc      	itt	lt
 800470a:	580b      	ldrlt	r3, [r1, r0]
 800470c:	18c0      	addlt	r0, r0, r3
 800470e:	4770      	bx	lr

08004710 <__retarget_lock_acquire_recursive>:
 8004710:	4770      	bx	lr

08004712 <__retarget_lock_release_recursive>:
 8004712:	4770      	bx	lr

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
