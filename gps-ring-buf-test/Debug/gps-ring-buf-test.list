
gps-ring-buf-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ffc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080091a0  080091a0  000191a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009680  08009680  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009688  08009688  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  200001e4  08009874  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08009874  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e210  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002e424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00030820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00031338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002312e  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e006  00000000  00000000  00054eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfa7b  00000000  00000000  00062eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013292f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004114  00000000  00000000  00132980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009184 	.word	0x08009184

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009184 	.word	0x08009184

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f64:	b08c      	sub	sp, #48	; 0x30
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f6c:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <decodeGGA+0x17c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ',' (after GGA/RMC)
 8000f76:	e004      	b.n	8000f82 <decodeGGA+0x22>
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <decodeGGA+0x17c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a57      	ldr	r2, [pc, #348]	; (80010dc <decodeGGA+0x17c>)
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <decodeGGA+0x17c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f90:	d1f2      	bne.n	8000f78 <decodeGGA+0x18>
	inx++;
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <decodeGGA+0x17c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <decodeGGA+0x17c>)
 8000f9a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f9c:	e004      	b.n	8000fa8 <decodeGGA+0x48>
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <decodeGGA+0x17c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <decodeGGA+0x17c>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <decodeGGA+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b2c      	cmp	r3, #44	; 0x2c
 8000fb6:	d1f2      	bne.n	8000f9e <decodeGGA+0x3e>
	inx++;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	; (80010dc <decodeGGA+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <decodeGGA+0x17c>)
 8000fc0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000fc2:	e004      	b.n	8000fce <decodeGGA+0x6e>
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <decodeGGA+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a44      	ldr	r2, [pc, #272]	; (80010dc <decodeGGA+0x17c>)
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <decodeGGA+0x17c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b2c      	cmp	r3, #44	; 0x2c
 8000fdc:	d1f2      	bne.n	8000fc4 <decodeGGA+0x64>
	inx++;
 8000fde:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <decodeGGA+0x17c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a3d      	ldr	r2, [pc, #244]	; (80010dc <decodeGGA+0x17c>)
 8000fe6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ',' (north/south)
 8000fe8:	e004      	b.n	8000ff4 <decodeGGA+0x94>
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <decodeGGA+0x17c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <decodeGGA+0x17c>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <decodeGGA+0x17c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b2c      	cmp	r3, #44	; 0x2c
 8001002:	d1f2      	bne.n	8000fea <decodeGGA+0x8a>
	inx++;
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <decodeGGA+0x17c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a34      	ldr	r2, [pc, #208]	; (80010dc <decodeGGA+0x17c>)
 800100c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800100e:	e004      	b.n	800101a <decodeGGA+0xba>
 8001010:	4b32      	ldr	r3, [pc, #200]	; (80010dc <decodeGGA+0x17c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <decodeGGA+0x17c>)
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <decodeGGA+0x17c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b2c      	cmp	r3, #44	; 0x2c
 8001028:	d1f2      	bne.n	8001010 <decodeGGA+0xb0>
	inx++;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <decodeGGA+0x17c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <decodeGGA+0x17c>)
 8001032:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ',' (east/west)
 8001034:	e004      	b.n	8001040 <decodeGGA+0xe0>
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <decodeGGA+0x17c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <decodeGGA+0x17c>)
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <decodeGGA+0x17c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2c      	cmp	r3, #44	; 0x2c
 800104e:	d1f2      	bne.n	8001036 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <decodeGGA+0x17c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <decodeGGA+0x17c>)
 8001058:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <decodeGGA+0x17c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b31      	cmp	r3, #49	; 0x31
 8001068:	d00f      	beq.n	800108a <decodeGGA+0x12a>
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <decodeGGA+0x17c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b32      	cmp	r3, #50	; 0x32
 8001078:	d007      	beq.n	800108a <decodeGGA+0x12a>
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <decodeGGA+0x17c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b36      	cmp	r3, #54	; 0x36
 8001088:	d106      	bne.n	8001098 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <decodeGGA+0x17c>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001096:	e009      	b.n	80010ac <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800109e:	2301      	movs	r3, #1
 80010a0:	e2e1      	b.n	8001666 <decodeGGA+0x706>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <decodeGGA+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <decodeGGA+0x17c>)
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <decodeGGA+0x17c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b2c      	cmp	r3, #44	; 0x2c
 80010ba:	d1f2      	bne.n	80010a2 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <decodeGGA+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <decodeGGA+0x17c>)
 80010c4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	220c      	movs	r2, #12
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f9c8 	bl	8005464 <memset>
	i=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010d8:	e016      	b.n	8001108 <decodeGGA+0x1a8>
 80010da:	bf00      	nop
 80010dc:	20000200 	.word	0x20000200
	{
		buffer[i] = GGAbuffer[inx];
 80010e0:	4b9f      	ldr	r3, [pc, #636]	; (8001360 <decodeGGA+0x400>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
		i++;
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	3301      	adds	r3, #1
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80010fe:	4b98      	ldr	r3, [pc, #608]	; (8001360 <decodeGGA+0x400>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a96      	ldr	r2, [pc, #600]	; (8001360 <decodeGGA+0x400>)
 8001106:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001108:	4b95      	ldr	r3, [pc, #596]	; (8001360 <decodeGGA+0x400>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b2c      	cmp	r3, #44	; 0x2c
 8001116:	d1e3      	bne.n	80010e0 <decodeGGA+0x180>
	}

//	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
	hr = (atoi(buffer)/10000) - 400/100; // hardcoded
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f004 f973 	bl	8005408 <atoi>
 8001122:	4603      	mov	r3, r0
 8001124:	4a8f      	ldr	r2, [pc, #572]	; (8001364 <decodeGGA+0x404>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1312      	asrs	r2, r2, #12
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	3b04      	subs	r3, #4
 8001132:	4a8d      	ldr	r2, [pc, #564]	; (8001368 <decodeGGA+0x408>)
 8001134:	6013      	str	r3, [r2, #0]
//	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
	min = ((atoi(buffer)/100)%100) - 400%100; // hardcoded
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f964 	bl	8005408 <atoi>
 8001140:	4603      	mov	r3, r0
 8001142:	4a8a      	ldr	r2, [pc, #552]	; (800136c <decodeGGA+0x40c>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1152      	asrs	r2, r2, #5
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad2      	subs	r2, r2, r3
 800114e:	4b87      	ldr	r3, [pc, #540]	; (800136c <decodeGGA+0x40c>)
 8001150:	fb83 1302 	smull	r1, r3, r3, r2
 8001154:	1159      	asrs	r1, r3, #5
 8001156:	17d3      	asrs	r3, r2, #31
 8001158:	1acb      	subs	r3, r1, r3
 800115a:	2164      	movs	r1, #100	; 0x64
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a83      	ldr	r2, [pc, #524]	; (8001370 <decodeGGA+0x410>)
 8001164:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <decodeGGA+0x410>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b3b      	cmp	r3, #59	; 0x3b
 800116c:	dd09      	ble.n	8001182 <decodeGGA+0x222>
	{
		min = min-60;
 800116e:	4b80      	ldr	r3, [pc, #512]	; (8001370 <decodeGGA+0x410>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3b3c      	subs	r3, #60	; 0x3c
 8001174:	4a7e      	ldr	r2, [pc, #504]	; (8001370 <decodeGGA+0x410>)
 8001176:	6013      	str	r3, [r2, #0]
		hr++;
 8001178:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <decodeGGA+0x408>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <decodeGGA+0x408>)
 8001180:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001182:	4b79      	ldr	r3, [pc, #484]	; (8001368 <decodeGGA+0x408>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da09      	bge.n	800119e <decodeGGA+0x23e>
	{
		hr=24+hr;
 800118a:	4b77      	ldr	r3, [pc, #476]	; (8001368 <decodeGGA+0x408>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3318      	adds	r3, #24
 8001190:	4a75      	ldr	r2, [pc, #468]	; (8001368 <decodeGGA+0x408>)
 8001192:	6013      	str	r3, [r2, #0]
		daychange--;
 8001194:	4b77      	ldr	r3, [pc, #476]	; (8001374 <decodeGGA+0x414>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	4a76      	ldr	r2, [pc, #472]	; (8001374 <decodeGGA+0x414>)
 800119c:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <decodeGGA+0x408>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b17      	cmp	r3, #23
 80011a4:	dd09      	ble.n	80011ba <decodeGGA+0x25a>
	{
		hr=hr-24;
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <decodeGGA+0x408>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3b18      	subs	r3, #24
 80011ac:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <decodeGGA+0x408>)
 80011ae:	6013      	str	r3, [r2, #0]
		daychange++;
 80011b0:	4b70      	ldr	r3, [pc, #448]	; (8001374 <decodeGGA+0x414>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a6f      	ldr	r2, [pc, #444]	; (8001374 <decodeGGA+0x414>)
 80011b8:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011ba:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <decodeGGA+0x408>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <decodeGGA+0x410>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f91a 	bl	8005408 <atoi>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <decodeGGA+0x40c>)
 80011d8:	fb83 1302 	smull	r1, r3, r3, r2
 80011dc:	1159      	asrs	r1, r3, #5
 80011de:	17d3      	asrs	r3, r2, #31
 80011e0:	1acb      	subs	r3, r1, r3
 80011e2:	2164      	movs	r1, #100	; 0x64
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <decodeGGA+0x400>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a5a      	ldr	r2, [pc, #360]	; (8001360 <decodeGGA+0x400>)
 80011f6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	220c      	movs	r2, #12
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f92f 	bl	8005464 <memset>
	i=0;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800120a:	e013      	b.n	8001234 <decodeGGA+0x2d4>
	{
		buffer[i] = GGAbuffer[inx];
 800120c:	4b54      	ldr	r3, [pc, #336]	; (8001360 <decodeGGA+0x400>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
		i++;
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	3301      	adds	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <decodeGGA+0x400>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <decodeGGA+0x400>)
 8001232:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001234:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <decodeGGA+0x400>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b2c      	cmp	r3, #44	; 0x2c
 8001242:	d1e3      	bne.n	800120c <decodeGGA+0x2ac>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	2b05      	cmp	r3, #5
 8001252:	d801      	bhi.n	8001258 <decodeGGA+0x2f8>
 8001254:	2302      	movs	r3, #2
 8001256:	e206      	b.n	8001666 <decodeGGA+0x706>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f8d3 	bl	8005408 <atoi>
 8001262:	4603      	mov	r3, r0
 8001264:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800126a:	e002      	b.n	8001272 <decodeGGA+0x312>
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	3301      	adds	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b2e      	cmp	r3, #46	; 0x2e
 800127e:	d1f5      	bne.n	800126c <decodeGGA+0x30c>
	j++;
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	3301      	adds	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ffa8 	bl	80001e0 <strlen>
 8001290:	4602      	mov	r2, r0
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	4413      	add	r3, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 f8b1 	bl	8005408 <atoi>
 80012a6:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f941 	bl	8000534 <__aeabi_i2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <decodeGGA+0x418>)
 80012b8:	f7ff fad0 	bl	800085c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4690      	mov	r8, r2
 80012c2:	4699      	mov	r9, r3
 80012c4:	69f8      	ldr	r0, [r7, #28]
 80012c6:	f7ff f935 	bl	8000534 <__aeabi_i2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3302      	adds	r3, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f92e 	bl	8000534 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b11 	vmov	d1, r2, r3
 80012e0:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8001358 <decodeGGA+0x3f8>
 80012e4:	f007 f834 	bl	8008350 <pow>
 80012e8:	ec53 2b10 	vmov	r2, r3, d0
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7ff fab4 	bl	800085c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4640      	mov	r0, r8
 80012fa:	4649      	mov	r1, r9
 80012fc:	f7fe ffce 	bl	800029c <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc56 	bl	8000bb8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	601a      	str	r2, [r3, #0]
	inx++;  
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <decodeGGA+0x400>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a10      	ldr	r2, [pc, #64]	; (8001360 <decodeGGA+0x400>)
 800131e:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <decodeGGA+0x400>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <decodeGGA+0x400>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <decodeGGA+0x400>)
 8001338:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <decodeGGA+0x400>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <decodeGGA+0x400>)
 8001342:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	220c      	movs	r2, #12
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f004 f889 	bl	8005464 <memset>
	i=0;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001356:	e025      	b.n	80013a4 <decodeGGA+0x444>
 8001358:	00000000 	.word	0x00000000
 800135c:	40240000 	.word	0x40240000
 8001360:	20000200 	.word	0x20000200
 8001364:	68db8bad 	.word	0x68db8bad
 8001368:	20000204 	.word	0x20000204
 800136c:	51eb851f 	.word	0x51eb851f
 8001370:	20000208 	.word	0x20000208
 8001374:	20000218 	.word	0x20000218
 8001378:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 800137c:	4b8a      	ldr	r3, [pc, #552]	; (80015a8 <decodeGGA+0x648>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	7819      	ldrb	r1, [r3, #0]
 8001388:	f107 020c 	add.w	r2, r7, #12
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
		i++;
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	3301      	adds	r3, #1
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800139a:	4b83      	ldr	r3, [pc, #524]	; (80015a8 <decodeGGA+0x648>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a81      	ldr	r2, [pc, #516]	; (80015a8 <decodeGGA+0x648>)
 80013a2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80013a4:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <decodeGGA+0x648>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b2c      	cmp	r3, #44	; 0x2c
 80013b2:	d1e3      	bne.n	800137c <decodeGGA+0x41c>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f825 	bl	8005408 <atoi>
 80013be:	4603      	mov	r3, r0
 80013c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80013c6:	e002      	b.n	80013ce <decodeGGA+0x46e>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	3301      	adds	r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b2e      	cmp	r3, #46	; 0x2e
 80013da:	d1f5      	bne.n	80013c8 <decodeGGA+0x468>
	j++;
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	3301      	adds	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe fefa 	bl	80001e0 <strlen>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	4413      	add	r3, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f004 f803 	bl	8005408 <atoi>
 8001402:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001404:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f893 	bl	8000534 <__aeabi_i2d>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b66      	ldr	r3, [pc, #408]	; (80015ac <decodeGGA+0x64c>)
 8001414:	f7ff fa22 	bl	800085c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4690      	mov	r8, r2
 800141e:	4699      	mov	r9, r3
 8001420:	69f8      	ldr	r0, [r7, #28]
 8001422:	f7ff f887 	bl	8000534 <__aeabi_i2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	3302      	adds	r3, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f880 	bl	8000534 <__aeabi_i2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	ec43 2b11 	vmov	d1, r2, r3
 800143c:	ed9f 0b58 	vldr	d0, [pc, #352]	; 80015a0 <decodeGGA+0x640>
 8001440:	f006 ff86 	bl	8008350 <pow>
 8001444:	ec53 2b10 	vmov	r2, r3, d0
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7ff fa06 	bl	800085c <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4640      	mov	r0, r8
 8001456:	4649      	mov	r1, r9
 8001458:	f7fe ff20 	bl	800029c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fba8 	bl	8000bb8 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]
	inx++;
 8001472:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <decodeGGA+0x648>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <decodeGGA+0x648>)
 800147a:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <decodeGGA+0x648>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <decodeGGA+0x648>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <decodeGGA+0x648>)
 8001494:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <decodeGGA+0x648>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <decodeGGA+0x648>)
 800149e:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <decodeGGA+0x648>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a40      	ldr	r2, [pc, #256]	; (80015a8 <decodeGGA+0x648>)
 80014a8:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <decodeGGA+0x648>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a3d      	ldr	r2, [pc, #244]	; (80015a8 <decodeGGA+0x648>)
 80014b2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	220c      	movs	r2, #12
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 ffd1 	bl	8005464 <memset>
	i=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014c6:	e013      	b.n	80014f0 <decodeGGA+0x590>
	{
		buffer[i] = GGAbuffer[inx];
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <decodeGGA+0x648>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	7819      	ldrb	r1, [r3, #0]
 80014d4:	f107 020c 	add.w	r2, r7, #12
 80014d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014da:	4413      	add	r3, r2
 80014dc:	460a      	mov	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
		i++;
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	3301      	adds	r3, #1
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <decodeGGA+0x648>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a2e      	ldr	r2, [pc, #184]	; (80015a8 <decodeGGA+0x648>)
 80014ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <decodeGGA+0x648>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b2c      	cmp	r3, #44	; 0x2c
 80014fe:	d1e3      	bne.n	80014c8 <decodeGGA+0x568>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4618      	mov	r0, r3
 8001506:	f003 ff7f 	bl	8005408 <atoi>
 800150a:	4602      	mov	r2, r0
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <decodeGGA+0x648>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <decodeGGA+0x648>)
 8001518:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 800151a:	e004      	b.n	8001526 <decodeGGA+0x5c6>
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <decodeGGA+0x648>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <decodeGGA+0x648>)
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <decodeGGA+0x648>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b2c      	cmp	r3, #44	; 0x2c
 8001534:	d1f2      	bne.n	800151c <decodeGGA+0x5bc>


	/*************** Altitude calculation ********************/
	inx++;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <decodeGGA+0x648>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <decodeGGA+0x648>)
 800153e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	220c      	movs	r2, #12
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f003 ff8b 	bl	8005464 <memset>
	i=0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001552:	e013      	b.n	800157c <decodeGGA+0x61c>
	{
		buffer[i] = GGAbuffer[inx];
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <decodeGGA+0x648>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	7819      	ldrb	r1, [r3, #0]
 8001560:	f107 020c 	add.w	r2, r7, #12
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	4413      	add	r3, r2
 8001568:	460a      	mov	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
		i++;
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	3301      	adds	r3, #1
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <decodeGGA+0x648>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <decodeGGA+0x648>)
 800157a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <decodeGGA+0x648>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b2c      	cmp	r3, #44	; 0x2c
 800158a:	d1e3      	bne.n	8001554 <decodeGGA+0x5f4>
	}
	num = (atoi(buffer));
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4618      	mov	r0, r3
 8001592:	f003 ff39 	bl	8005408 <atoi>
 8001596:	4603      	mov	r3, r0
 8001598:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800159e:	e00a      	b.n	80015b6 <decodeGGA+0x656>
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40240000 	.word	0x40240000
 80015a8:	20000200 	.word	0x20000200
 80015ac:	40590000 	.word	0x40590000
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	3301      	adds	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b2e      	cmp	r3, #46	; 0x2e
 80015c2:	d1f5      	bne.n	80015b0 <decodeGGA+0x650>
	j++;
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	3301      	adds	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe06 	bl	80001e0 <strlen>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	4413      	add	r3, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 ff0f 	bl	8005408 <atoi>
 80015ea:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80015ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff9f 	bl	8000534 <__aeabi_i2d>
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	69f8      	ldr	r0, [r7, #28]
 80015fc:	f7fe ff9a 	bl	8000534 <__aeabi_i2d>
 8001600:	4680      	mov	r8, r0
 8001602:	4689      	mov	r9, r1
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b11 	vmov	d1, r2, r3
 8001612:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001670 <decodeGGA+0x710>
 8001616:	f006 fe9b 	bl	8008350 <pow>
 800161a:	ec53 2b10 	vmov	r2, r3, d0
 800161e:	4640      	mov	r0, r8
 8001620:	4649      	mov	r1, r9
 8001622:	f7ff f91b 	bl	800085c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe fe35 	bl	800029c <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fabd 	bl	8000bb8 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	621a      	str	r2, [r3, #32]

	inx++;
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <decodeGGA+0x718>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <decodeGGA+0x718>)
 8001650:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <decodeGGA+0x718>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001664:	2300      	movs	r3, #0

}
 8001666:	4618      	mov	r0, r3
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001670:	00000000 	.word	0x00000000
 8001674:	40240000 	.word	0x40240000
 8001678:	20000200 	.word	0x20000200
 800167c:	00000000 	.word	0x00000000

08001680 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001684:	b090      	sub	sp, #64	; 0x40
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800168c:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <decodeRMC+0x260>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001696:	e004      	b.n	80016a2 <decodeRMC+0x22>
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <decodeRMC+0x260>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <decodeRMC+0x260>)
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <decodeRMC+0x260>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b2c      	cmp	r3, #44	; 0x2c
 80016b0:	d1f2      	bne.n	8001698 <decodeRMC+0x18>
	inx++;
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <decodeRMC+0x260>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <decodeRMC+0x260>)
 80016ba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80016bc:	e004      	b.n	80016c8 <decodeRMC+0x48>
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <decodeRMC+0x260>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a86      	ldr	r2, [pc, #536]	; (80018e0 <decodeRMC+0x260>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <decodeRMC+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b2c      	cmp	r3, #44	; 0x2c
 80016d6:	d1f2      	bne.n	80016be <decodeRMC+0x3e>
	inx++;
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <decodeRMC+0x260>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <decodeRMC+0x260>)
 80016e0:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <decodeRMC+0x260>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b41      	cmp	r3, #65	; 0x41
 80016f0:	d10d      	bne.n	800170e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	2201      	movs	r2, #1
 80016f6:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <decodeRMC+0x260>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <decodeRMC+0x260>)
 8001700:	6013      	str	r3, [r2, #0]
	inx++;
 8001702:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <decodeRMC+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a75      	ldr	r2, [pc, #468]	; (80018e0 <decodeRMC+0x260>)
 800170a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800170c:	e009      	b.n	8001722 <decodeRMC+0xa2>
		rmc->isValid =0;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
		return 1;
 8001714:	2301      	movs	r3, #1
 8001716:	e1d8      	b.n	8001aca <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001718:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <decodeRMC+0x260>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <decodeRMC+0x260>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <decodeRMC+0x260>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b2c      	cmp	r3, #44	; 0x2c
 8001730:	d1f2      	bne.n	8001718 <decodeRMC+0x98>
	inx++;
 8001732:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <decodeRMC+0x260>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <decodeRMC+0x260>)
 800173a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 800173c:	e004      	b.n	8001748 <decodeRMC+0xc8>
 800173e:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <decodeRMC+0x260>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <decodeRMC+0x260>)
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <decodeRMC+0x260>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b2c      	cmp	r3, #44	; 0x2c
 8001756:	d1f2      	bne.n	800173e <decodeRMC+0xbe>
	inx++;
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <decodeRMC+0x260>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a60      	ldr	r2, [pc, #384]	; (80018e0 <decodeRMC+0x260>)
 8001760:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001762:	e004      	b.n	800176e <decodeRMC+0xee>
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <decodeRMC+0x260>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <decodeRMC+0x260>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <decodeRMC+0x260>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b2c      	cmp	r3, #44	; 0x2c
 800177c:	d1f2      	bne.n	8001764 <decodeRMC+0xe4>
	inx++;
 800177e:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <decodeRMC+0x260>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <decodeRMC+0x260>)
 8001786:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001788:	e004      	b.n	8001794 <decodeRMC+0x114>
 800178a:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <decodeRMC+0x260>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <decodeRMC+0x260>)
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <decodeRMC+0x260>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b2c      	cmp	r3, #44	; 0x2c
 80017a2:	d1f2      	bne.n	800178a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80017a4:	4b4e      	ldr	r3, [pc, #312]	; (80018e0 <decodeRMC+0x260>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <decodeRMC+0x260>)
 80017ac:	6013      	str	r3, [r2, #0]
	i=0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	220c      	movs	r2, #12
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fe52 	bl	8005464 <memset>
	while (RMCbuffer[inx] != ',')
 80017c0:	e013      	b.n	80017ea <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <decodeRMC+0x260>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	7819      	ldrb	r1, [r3, #0]
 80017ce:	f107 0208 	add.w	r2, r7, #8
 80017d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d4:	4413      	add	r3, r2
 80017d6:	460a      	mov	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017dc:	3301      	adds	r3, #1
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <decodeRMC+0x260>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <decodeRMC+0x260>)
 80017e8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <decodeRMC+0x260>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b2c      	cmp	r3, #44	; 0x2c
 80017f8:	d1e3      	bne.n	80017c2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d056      	beq.n	80018b2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fdfd 	bl	8005408 <atoi>
 800180e:	4603      	mov	r3, r0
 8001810:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001816:	e002      	b.n	800181e <decodeRMC+0x19e>
 8001818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181a:	3301      	adds	r3, #1
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
 800181e:	f107 0208 	add.w	r2, r7, #8
 8001822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001824:	4413      	add	r3, r2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b2e      	cmp	r3, #46	; 0x2e
 800182a:	d1f5      	bne.n	8001818 <decodeRMC+0x198>
		j++;
 800182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182e:	3301      	adds	r3, #1
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fcd2 	bl	80001e0 <strlen>
 800183c:	4602      	mov	r2, r0
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	f107 0208 	add.w	r2, r7, #8
 800184a:	4413      	add	r3, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fddb 	bl	8005408 <atoi>
 8001852:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001854:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe6b 	bl	8000534 <__aeabi_i2d>
 800185e:	4604      	mov	r4, r0
 8001860:	460d      	mov	r5, r1
 8001862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001864:	f7fe fe66 	bl	8000534 <__aeabi_i2d>
 8001868:	4680      	mov	r8, r0
 800186a:	4689      	mov	r9, r1
 800186c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800186e:	f7fe fe61 	bl	8000534 <__aeabi_i2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	ec43 2b11 	vmov	d1, r2, r3
 800187a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80018d8 <decodeRMC+0x258>
 800187e:	f006 fd67 	bl	8008350 <pow>
 8001882:	ec53 2b10 	vmov	r2, r3, d0
 8001886:	4640      	mov	r0, r8
 8001888:	4649      	mov	r1, r9
 800188a:	f7fe ffe7 	bl	800085c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4620      	mov	r0, r4
 8001894:	4629      	mov	r1, r5
 8001896:	f7fe fd01 	bl	800029c <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f989 	bl	8000bb8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	e003      	b.n	80018ba <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <decodeRMC+0x260>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <decodeRMC+0x260>)
 80018c2:	6013      	str	r3, [r2, #0]
	i=0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	220c      	movs	r2, #12
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 fdc7 	bl	8005464 <memset>
	while (RMCbuffer[inx] != ',')
 80018d6:	e019      	b.n	800190c <decodeRMC+0x28c>
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40240000 	.word	0x40240000
 80018e0:	20000200 	.word	0x20000200
	{
		buffer[i] = RMCbuffer[inx];
 80018e4:	4b7e      	ldr	r3, [pc, #504]	; (8001ae0 <decodeRMC+0x460>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	7819      	ldrb	r1, [r3, #0]
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f6:	4413      	add	r3, r2
 80018f8:	460a      	mov	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
		i++;
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	3301      	adds	r3, #1
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001902:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <decodeRMC+0x460>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a75      	ldr	r2, [pc, #468]	; (8001ae0 <decodeRMC+0x460>)
 800190a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800190c:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <decodeRMC+0x460>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b2c      	cmp	r3, #44	; 0x2c
 800191a:	d1e3      	bne.n	80018e4 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d056      	beq.n	80019d4 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fd6c 	bl	8005408 <atoi>
 8001930:	4603      	mov	r3, r0
 8001932:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001938:	e002      	b.n	8001940 <decodeRMC+0x2c0>
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	3301      	adds	r3, #1
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
 8001940:	f107 0208 	add.w	r2, r7, #8
 8001944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b2e      	cmp	r3, #46	; 0x2e
 800194c:	d1f5      	bne.n	800193a <decodeRMC+0x2ba>
		j++;
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	3301      	adds	r3, #1
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fc41 	bl	80001e0 <strlen>
 800195e:	4602      	mov	r2, r0
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	f107 0208 	add.w	r2, r7, #8
 800196c:	4413      	add	r3, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fd4a 	bl	8005408 <atoi>
 8001974:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001976:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fdda 	bl	8000534 <__aeabi_i2d>
 8001980:	4604      	mov	r4, r0
 8001982:	460d      	mov	r5, r1
 8001984:	69b8      	ldr	r0, [r7, #24]
 8001986:	f7fe fdd5 	bl	8000534 <__aeabi_i2d>
 800198a:	4680      	mov	r8, r0
 800198c:	4689      	mov	r9, r1
 800198e:	69f8      	ldr	r0, [r7, #28]
 8001990:	f7fe fdd0 	bl	8000534 <__aeabi_i2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	ec43 2b11 	vmov	d1, r2, r3
 800199c:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001ad8 <decodeRMC+0x458>
 80019a0:	f006 fcd6 	bl	8008350 <pow>
 80019a4:	ec53 2b10 	vmov	r2, r3, d0
 80019a8:	4640      	mov	r0, r8
 80019aa:	4649      	mov	r1, r9
 80019ac:	f7fe ff56 	bl	800085c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc70 	bl	800029c <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f8f8 	bl	8000bb8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	e003      	b.n	80019dc <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <decodeRMC+0x460>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <decodeRMC+0x460>)
 80019e4:	6013      	str	r3, [r2, #0]
	i=0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	220c      	movs	r2, #12
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fd36 	bl	8005464 <memset>
	while (RMCbuffer[inx] != ',')
 80019f8:	e013      	b.n	8001a22 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <decodeRMC+0x460>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	7819      	ldrb	r1, [r3, #0]
 8001a06:	f107 0208 	add.w	r2, r7, #8
 8001a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0c:	4413      	add	r3, r2
 8001a0e:	460a      	mov	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
		i++;
 8001a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a14:	3301      	adds	r3, #1
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <decodeRMC+0x460>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <decodeRMC+0x460>)
 8001a20:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <decodeRMC+0x460>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a30:	d1e3      	bne.n	80019fa <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fce6 	bl	8005408 <atoi>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <decodeRMC+0x464>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1312      	asrs	r2, r2, #12
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <decodeRMC+0x468>)
 8001a4c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 fcd8 	bl	8005408 <atoi>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a24      	ldr	r2, [pc, #144]	; (8001aec <decodeRMC+0x46c>)
 8001a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a60:	1152      	asrs	r2, r2, #5
 8001a62:	17db      	asrs	r3, r3, #31
 8001a64:	1ad2      	subs	r2, r2, r3
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <decodeRMC+0x46c>)
 8001a68:	fb83 1302 	smull	r1, r3, r3, r2
 8001a6c:	1159      	asrs	r1, r3, #5
 8001a6e:	17d3      	asrs	r3, r2, #31
 8001a70:	1acb      	subs	r3, r1, r3
 8001a72:	2164      	movs	r1, #100	; 0x64
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <decodeRMC+0x470>)
 8001a7c:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fcc0 	bl	8005408 <atoi>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <decodeRMC+0x46c>)
 8001a8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a90:	1159      	asrs	r1, r3, #5
 8001a92:	17d3      	asrs	r3, r2, #31
 8001a94:	1acb      	subs	r3, r1, r3
 8001a96:	2164      	movs	r1, #100	; 0x64
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <decodeRMC+0x474>)
 8001aa0:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <decodeRMC+0x468>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <decodeRMC+0x478>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <decodeRMC+0x468>)
 8001aae:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <decodeRMC+0x468>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <decodeRMC+0x470>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <decodeRMC+0x474>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	609a      	str	r2, [r3, #8]

	return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3740      	adds	r7, #64	; 0x40
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	40240000 	.word	0x40240000
 8001ae0:	20000200 	.word	0x20000200
 8001ae4:	68db8bad 	.word	0x68db8bad
 8001ae8:	2000020c 	.word	0x2000020c
 8001aec:	51eb851f 	.word	0x51eb851f
 8001af0:	20000210 	.word	0x20000210
 8001af4:	20000214 	.word	0x20000214
 8001af8:	20000218 	.word	0x20000218

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001b00:	b09c      	sub	sp, #112	; 0x70
 8001b02:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f000 fe22 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f8d0 	bl	8001cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0c:	f000 f980 	bl	8001e10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b10:	f000 f91e 	bl	8001d50 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b14:	f000 f94c 	bl	8001db0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8001b18:	f000 fbd2 	bl	80022c0 <Ringbuf_init>
//  HAL_Delay(500);
  uint32_t microsReady, microsCurrent; // unsigned long
  microsReady = 30000; // 30s
 8001b1c:	f247 5330 	movw	r3, #30000	; 0x7530
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
  int flag = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  ========== Part 1 Code ==================================
	  if (Wait_for("GG") == 1) { // "GPGGA" - need "A" for decodeGGA to work properly
 8001b26:	484c      	ldr	r0, [pc, #304]	; (8001c58 <main+0x15c>)
 8001b28:	f000 fcf6 	bl	8002518 <Wait_for>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <main+0x46>
		  Copy_upto("*", GGA); // 1=successful copy
 8001b32:	494a      	ldr	r1, [pc, #296]	; (8001c5c <main+0x160>)
 8001b34:	484a      	ldr	r0, [pc, #296]	; (8001c60 <main+0x164>)
 8001b36:	f000 fc73 	bl	8002420 <Copy_upto>
		  decodeGGA(GGA,&gpsData.ggastruct); // 0=fixed; 1=error
 8001b3a:	494a      	ldr	r1, [pc, #296]	; (8001c64 <main+0x168>)
 8001b3c:	4847      	ldr	r0, [pc, #284]	; (8001c5c <main+0x160>)
 8001b3e:	f7ff fa0f 	bl	8000f60 <decodeGGA>
	  }

	  if (Wait_for("RM") == 1) { // "GPRMC" - need "C" for decodeRMC to work properly
 8001b42:	4849      	ldr	r0, [pc, #292]	; (8001c68 <main+0x16c>)
 8001b44:	f000 fce8 	bl	8002518 <Wait_for>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <main+0x62>
		  Copy_upto("*", RMC); // 1=successful copy
 8001b4e:	4947      	ldr	r1, [pc, #284]	; (8001c6c <main+0x170>)
 8001b50:	4843      	ldr	r0, [pc, #268]	; (8001c60 <main+0x164>)
 8001b52:	f000 fc65 	bl	8002420 <Copy_upto>
		  decodeRMC(RMC,&gpsData.rmcstruct); // 0=fixed; 1=error
 8001b56:	4946      	ldr	r1, [pc, #280]	; (8001c70 <main+0x174>)
 8001b58:	4844      	ldr	r0, [pc, #272]	; (8001c6c <main+0x170>)
 8001b5a:	f7ff fd91 	bl	8001680 <decodeRMC>
	  }

	  lat = gga->lcation.latitude;
 8001b5e:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <main+0x178>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a44      	ldr	r2, [pc, #272]	; (8001c78 <main+0x17c>)
 8001b66:	6013      	str	r3, [r2, #0]
	  lng = gga->lcation.longitude;
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <main+0x178>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <main+0x180>)
 8001b70:	6013      	str	r3, [r2, #0]

	  gps_year = rmc->date.Yr; /*!< Years. All values are valid */
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <main+0x184>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a42      	ldr	r2, [pc, #264]	; (8001c84 <main+0x188>)
 8001b7a:	6013      	str	r3, [r2, #0]
	  gps_month = rmc->date.Mon; /*!< Months. Valid values : 1 (January) - 12 (December) */
 8001b7c:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <main+0x184>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <main+0x18c>)
 8001b84:	6013      	str	r3, [r2, #0]
	  gps_day = rmc->date.Day; /*!< Days. Valid values 1 - 28,29,30,31 Depends on month.*/
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <main+0x184>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <main+0x190>)
 8001b8e:	6013      	str	r3, [r2, #0]
	  gps_hour = gga->tim.hour; /*!< Hours. Valid values 0 - 23. */
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <main+0x178>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <main+0x194>)
 8001b98:	6013      	str	r3, [r2, #0]
	  gps_minutes = gga->tim.min; /*!< Minutes. Valid values 0 - 59. */
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <main+0x178>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <main+0x198>)
 8001ba2:	6013      	str	r3, [r2, #0]
	  gps_seconds = gga->tim.sec; /*!< Seconds. Valid values 0 - 59.99999.... */
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <main+0x178>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <main+0x19c>)
 8001bac:	6013      	str	r3, [r2, #0]

	  sprintf(print_buf,"\r\n\n lat/lng: %.4f/%.4f\n mm/dd/yy: %d/%d/%d\n hh/mm/ss: %d/%d/%d",
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <main+0x17c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcd0 	bl	8000558 <__aeabi_f2d>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	460d      	mov	r5, r1
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <main+0x180>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcc9 	bl	8000558 <__aeabi_f2d>
 8001bc6:	4683      	mov	fp, r0
 8001bc8:	468c      	mov	ip, r1
 8001bca:	492e      	ldr	r1, [pc, #184]	; (8001c84 <main+0x188>)
 8001bcc:	6809      	ldr	r1, [r1, #0]
 8001bce:	482e      	ldr	r0, [pc, #184]	; (8001c88 <main+0x18c>)
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	4e2e      	ldr	r6, [pc, #184]	; (8001c8c <main+0x190>)
 8001bd4:	6836      	ldr	r6, [r6, #0]
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <main+0x194>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <main+0x198>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <main+0x19c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	9307      	str	r3, [sp, #28]
 8001be6:	9206      	str	r2, [sp, #24]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	9305      	str	r3, [sp, #20]
 8001bec:	9604      	str	r6, [sp, #16]
 8001bee:	9003      	str	r0, [sp, #12]
 8001bf0:	9102      	str	r1, [sp, #8]
 8001bf2:	e9cd bc00 	strd	fp, ip, [sp]
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <main+0x1a0>)
 8001bfc:	4828      	ldr	r0, [pc, #160]	; (8001ca0 <main+0x1a4>)
 8001bfe:	f004 f8a3 	bl	8005d48 <siprintf>
			  lat,lng,gps_year,gps_month,gps_day,gps_hour,gps_minutes,gps_seconds);
	  HAL_UART_Transmit(&huart2, (uint8_t*)print_buf, sizeof(print_buf),10);
 8001c02:	230a      	movs	r3, #10
 8001c04:	2264      	movs	r2, #100	; 0x64
 8001c06:	4926      	ldr	r1, [pc, #152]	; (8001ca0 <main+0x1a4>)
 8001c08:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <main+0x1a8>)
 8001c0a:	f002 fb85 	bl	8004318 <HAL_UART_Transmit>

	  microsCurrent = HAL_GetTick();
 8001c0e:	f000 fe0d 	bl	800282c <HAL_GetTick>
 8001c12:	6478      	str	r0, [r7, #68]	; 0x44
	  char ready_msg[] = "\r\n *********GPS data is stable and ready for reading.";
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <main+0x1ac>)
 8001c16:	f107 040c 	add.w	r4, r7, #12
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c2c:	6020      	str	r0, [r4, #0]
 8001c2e:	3404      	adds	r4, #4
 8001c30:	8021      	strh	r1, [r4, #0]
	  if ( (microsCurrent >= microsReady) && (flag == 0) ) { // 30s
 8001c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c36:	429a      	cmp	r2, r3
 8001c38:	f4ff af75 	bcc.w	8001b26 <main+0x2a>
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f47f af71 	bne.w	8001b26 <main+0x2a>
		  flag = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
		  HAL_UART_Transmit(&huart2, (uint8_t*)ready_msg, sizeof(ready_msg), 10);
 8001c48:	f107 010c 	add.w	r1, r7, #12
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	2236      	movs	r2, #54	; 0x36
 8001c50:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <main+0x1a8>)
 8001c52:	f002 fb61 	bl	8004318 <HAL_UART_Transmit>
  {
 8001c56:	e766      	b.n	8001b26 <main+0x2a>
 8001c58:	080091a0 	.word	0x080091a0
 8001c5c:	20000324 	.word	0x20000324
 8001c60:	080091a4 	.word	0x080091a4
 8001c64:	200003ec 	.word	0x200003ec
 8001c68:	080091a8 	.word	0x080091a8
 8001c6c:	20000388 	.word	0x20000388
 8001c70:	20000418 	.word	0x20000418
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000430 	.word	0x20000430
 8001c7c:	20000434 	.word	0x20000434
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000438 	.word	0x20000438
 8001c88:	2000043c 	.word	0x2000043c
 8001c8c:	20000440 	.word	0x20000440
 8001c90:	20000444 	.word	0x20000444
 8001c94:	20000448 	.word	0x20000448
 8001c98:	2000044c 	.word	0x2000044c
 8001c9c:	080091ac 	.word	0x080091ac
 8001ca0:	20000450 	.word	0x20000450
 8001ca4:	200002a0 	.word	0x200002a0
 8001ca8:	080091ec 	.word	0x080091ec

08001cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b096      	sub	sp, #88	; 0x58
 8001cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2244      	movs	r2, #68	; 0x44
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 fbd2 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cd2:	f001 f8e7 	bl	8002ea4 <HAL_PWREx_ControlVoltageScaling>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cdc:	f000 f8fe 	bl	8001edc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cea:	2340      	movs	r3, #64	; 0x40
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f91e 	bl	8002f50 <HAL_RCC_OscConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d1a:	f000 f8df 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1e:	230f      	movs	r3, #15
 8001d20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d22:	2303      	movs	r3, #3
 8001d24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2104      	movs	r1, #4
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fd1e 	bl	8003778 <HAL_RCC_ClockConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d42:	f000 f8cb 	bl	8001edc <Error_Handler>
  }
}
 8001d46:	bf00      	nop
 8001d48:	3758      	adds	r7, #88	; 0x58
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_USART1_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART1_UART_Init+0x58>)
 8001d94:	f002 fa72 	bl	800427c <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f000 f89d 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000021c 	.word	0x2000021c
 8001dac:	40013800 	.word	0x40013800

08001db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_USART2_UART_Init+0x5c>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART2_UART_Init+0x58>)
 8001df4:	f002 fa42 	bl	800427c <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dfe:	f000 f86d 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200002a0 	.word	0x200002a0
 8001e0c:	40004400 	.word	0x40004400

08001e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_GPIO_Init+0xc4>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f000 ffe3 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e98:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <MX_GPIO_Init+0xc8>)
 8001eaa:	f000 fe5b 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f000 fe4c 	bl	8002b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000800 	.word	0x48000800

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <Error_Handler+0x8>
	...

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_MspInit+0x44>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_MspInit+0x44>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_MspInit+0x44>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_MspInit+0x44>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0a6      	sub	sp, #152	; 0x98
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2268      	movs	r2, #104	; 0x68
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fa87 	bl	8005464 <memset>
  if(huart->Instance==USART1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_UART_MspInit+0x158>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d145      	bne.n	8001fec <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 fe27 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f78:	f7ff ffb0 	bl	8001edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f80:	4a42      	ldr	r2, [pc, #264]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f86:	6613      	str	r3, [r2, #96]	; 0x60
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_UART_MspInit+0x15c>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd6:	f000 fdc5 	bl	8002b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2025      	movs	r0, #37	; 0x25
 8001fe0:	f000 fd0b 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fe4:	2025      	movs	r0, #37	; 0x25
 8001fe6:	f000 fd24 	bl	8002a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fea:	e048      	b.n	800207e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_UART_MspInit+0x160>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d143      	bne.n	800207e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4618      	mov	r0, r3
 8002004:	f001 fddc 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800200e:	f7ff ff65 	bl	8001edc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_UART_MspInit+0x15c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_UART_MspInit+0x15c>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_UART_MspInit+0x15c>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_UART_MspInit+0x15c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_UART_MspInit+0x15c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_UART_MspInit+0x15c>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002042:	230c      	movs	r3, #12
 8002044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205a:	2307      	movs	r3, #7
 800205c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206a:	f000 fd7b 	bl	8002b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2026      	movs	r0, #38	; 0x26
 8002074:	f000 fcc1 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002078:	2026      	movs	r0, #38	; 0x26
 800207a:	f000 fcda 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3798      	adds	r7, #152	; 0x98
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40013800 	.word	0x40013800
 800208c:	40021000 	.word	0x40021000
 8002090:	40004400 	.word	0x40004400

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//	if (timeout > 0) timeout--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f000 fb90 	bl	8002804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <USART1_IRQHandler+0x10>)
 80020ee:	f000 fa9b 	bl	8002628 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000021c 	.word	0x2000021c

080020fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <USART2_IRQHandler+0x10>)
 8002102:	f002 f99d 	bl	8004440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200002a0 	.word	0x200002a0

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_kill>:

int _kill(int pid, int sig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212a:	f003 f971 	bl	8005410 <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2216      	movs	r2, #22
 8002132:	601a      	str	r2, [r3, #0]
  return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_exit>:

void _exit (int status)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe7 	bl	8002120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f003 f8d6 	bl	8005410 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20028000 	.word	0x20028000
 8002290:	00000400 	.word	0x00000400
 8002294:	200004b4 	.word	0x200004b4
 8002298:	200008e8 	.word	0x200008e8

0800229c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <SystemInit+0x20>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <SystemInit+0x20>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <Ringbuf_init+0x3c>)
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <Ringbuf_init+0x40>)
 80022c8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <Ringbuf_init+0x44>)
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <Ringbuf_init+0x48>)
 80022ce:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <Ringbuf_init+0x4c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <Ringbuf_init+0x4c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <Ringbuf_init+0x4c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <Ringbuf_init+0x4c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200008cc 	.word	0x200008cc
 8002300:	200004bc 	.word	0x200004bc
 8002304:	200008d0 	.word	0x200008d0
 8002308:	200006c4 	.word	0x200006c4
 800230c:	2000021c 	.word	0x2000021c

08002310 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d009      	beq.n	800234a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	79f9      	ldrb	r1, [r7, #7]
 8002340:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <Uart_read+0x54>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <Uart_read+0x54>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800236e:	429a      	cmp	r2, r3
 8002370:	d102      	bne.n	8002378 <Uart_read+0x20>
  {
    return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e013      	b.n	80023a0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <Uart_read+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <Uart_read+0x54>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <Uart_read+0x54>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <Uart_read+0x54>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800239a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800239e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	200008cc 	.word	0x200008cc

080023b0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <IsDataAvailable+0x30>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <IsDataAvailable+0x30>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  // checking the character that's at [buf_size + head - tail] positions
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	200008cc 	.word	0x200008cc

080023e4 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <Uart_peek+0x38>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <Uart_peek+0x38>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d102      	bne.n	8002402 <Uart_peek+0x1e>
  {
    return -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e006      	b.n	8002410 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <Uart_peek+0x38>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <Uart_peek+0x38>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800240e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	200008cc 	.word	0x200008cc

08002420 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
//	int len = strlen(string) ;
//	int len = sizeof (string) ;
	int len = 1; // WORKS!
 800242e:	2301      	movs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002436:	e01e      	b.n	8002476 <Copy_upto+0x56>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002438:	4b35      	ldr	r3, [pc, #212]	; (8002510 <Copy_upto+0xf0>)
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <Copy_upto+0xf0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	4403      	add	r3, r0
 800244a:	5c8a      	ldrb	r2, [r1, r2]
 800244c:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <Copy_upto+0xf0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <Copy_upto+0xf0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3301      	adds	r3, #1
 8002468:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800246a:	bf00      	nop
 800246c:	f7ff ffa0 	bl	80023b0 <IsDataAvailable>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0fa      	beq.n	800246c <Copy_upto+0x4c>
	while (Uart_peek() != string[so_far])
 8002476:	f7ff ffb5 	bl	80023e4 <Uart_peek>
 800247a:	4601      	mov	r1, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4299      	cmp	r1, r3
 8002486:	d1d7      	bne.n	8002438 <Copy_upto+0x18>

		}
	while (Uart_peek() == string [so_far])
 8002488:	e027      	b.n	80024da <Copy_upto+0xba>
	{
		so_far++;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002490:	f7ff ff62 	bl	8002358 <Uart_read>
 8002494:	4601      	mov	r1, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	613a      	str	r2, [r7, #16]
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d101      	bne.n	80024b2 <Copy_upto+0x92>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02a      	b.n	8002508 <Copy_upto+0xe8>
		timeout = TIMEOUT_DEF;
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <Copy_upto+0xf4>)
 80024b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024b8:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80024ba:	bf00      	nop
 80024bc:	f7ff ff78 	bl	80023b0 <IsDataAvailable>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <Copy_upto+0xae>
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <Copy_upto+0xf4>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f6      	bne.n	80024bc <Copy_upto+0x9c>
		if (timeout == 0) return 0;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <Copy_upto+0xf4>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <Copy_upto+0xba>
 80024d6:	2300      	movs	r3, #0
 80024d8:	e016      	b.n	8002508 <Copy_upto+0xe8>
	while (Uart_peek() == string [so_far])
 80024da:	f7ff ff83 	bl	80023e4 <Uart_peek>
 80024de:	4601      	mov	r1, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d0ce      	beq.n	800248a <Copy_upto+0x6a>
	}

	if (so_far != len)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d002      	beq.n	80024fa <Copy_upto+0xda>
	{
		so_far = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
		goto again;
 80024f8:	e79d      	b.n	8002436 <Copy_upto+0x16>
	}

	if (so_far == len) return 1;
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d101      	bne.n	8002506 <Copy_upto+0xe6>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <Copy_upto+0xe8>
	else return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200008cc 	.word	0x200008cc
 8002514:	200004b8 	.word	0x200004b8

08002518 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fd fe5b 	bl	80001e0 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <Wait_for+0x108>)
 8002530:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002534:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002536:	bf00      	nop
 8002538:	f7ff ff3a 	bl	80023b0 <IsDataAvailable>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <Wait_for+0x32>
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <Wait_for+0x108>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f6      	bne.n	8002538 <Wait_for+0x20>
	if (timeout == 0) return 0;
 800254a:	4b35      	ldr	r3, [pc, #212]	; (8002620 <Wait_for+0x108>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <Wait_for+0x6e>
 8002552:	2300      	movs	r3, #0
 8002554:	e060      	b.n	8002618 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <Wait_for+0x10c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <Wait_for+0x10c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002566:	429a      	cmp	r2, r3
 8002568:	d00b      	beq.n	8002582 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <Wait_for+0x10c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <Wait_for+0x10c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800257c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002580:	e001      	b.n	8002586 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002582:	2300      	movs	r3, #0
 8002584:	e048      	b.n	8002618 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002586:	f7ff ff2d 	bl	80023e4 <Uart_peek>
 800258a:	4601      	mov	r1, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4299      	cmp	r1, r3
 8002596:	d1de      	bne.n	8002556 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002598:	e027      	b.n	80025ea <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3301      	adds	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <Wait_for+0x10c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <Wait_for+0x10c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d101      	bne.n	80025c2 <Wait_for+0xaa>
 80025be:	2301      	movs	r3, #1
 80025c0:	e02a      	b.n	8002618 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <Wait_for+0x108>)
 80025c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025c8:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80025ca:	bf00      	nop
 80025cc:	f7ff fef0 	bl	80023b0 <IsDataAvailable>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <Wait_for+0xc6>
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <Wait_for+0x108>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f6      	bne.n	80025cc <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <Wait_for+0x108>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <Wait_for+0xd2>
 80025e6:	2300      	movs	r3, #0
 80025e8:	e016      	b.n	8002618 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80025ea:	f7ff fefb 	bl	80023e4 <Uart_peek>
 80025ee:	4601      	mov	r1, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4299      	cmp	r1, r3
 80025fa:	d0ce      	beq.n	800259a <Wait_for+0x82>
	}

	if (so_far != len)
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d002      	beq.n	800260a <Wait_for+0xf2>
	{
		so_far = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
		goto again;
 8002608:	e791      	b.n	800252e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	d101      	bne.n	8002616 <Wait_for+0xfe>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <Wait_for+0x100>
	else return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200004b8 	.word	0x200004b8
 8002624:	200008cc 	.word	0x200008cc

08002628 <Uart_isr>:


/* corrected version from May 6, 2023 */
void Uart_isr (UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    /* if DR is not empty and the Rx Int is enabled */
    if ((((&huart1)->Instance->ISR & USART_ISR_RXNE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <Uart_isr+0xc4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <Uart_isr+0x44>
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <Uart_isr+0xc4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00f      	beq.n	800266c <Uart_isr+0x44>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002658:	b29b      	uxth	r3, r3
 800265a:	75fb      	strb	r3, [r7, #23]
        store_char (c, _rx_buffer);  // store data in buffer
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <Uart_isr+0xc8>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fe53 	bl	8002310 <store_char>
        return;
 800266a:	e03b      	b.n	80026e4 <Uart_isr+0xbc>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((((&huart1)->Instance->ISR & USART_ISR_TXE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_TXEIE) != RESET))
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <Uart_isr+0xc4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d034      	beq.n	80026e4 <Uart_isr+0xbc>
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <Uart_isr+0xc4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02d      	beq.n	80026e4 <Uart_isr+0xbc>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <Uart_isr+0xcc>)
 800268a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <Uart_isr+0xcc>)
 8002690:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002694:	429a      	cmp	r2, r3
 8002696:	d108      	bne.n	80026aa <Uart_isr+0x82>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a6:	601a      	str	r2, [r3, #0]
    	      /* try explicitly calling huart2 */
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
    	      (&huart1)->Instance->TDR = c; // transmit data register

    	    }
    	return;
 80026a8:	e01b      	b.n	80026e2 <Uart_isr+0xba>
    		  volatile unsigned int tail_test = tx_buffer.tail;
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <Uart_isr+0xcc>)
 80026ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026b0:	613b      	str	r3, [r7, #16]
    		  volatile uint16_t c = tx_buffer.buffer[tx_buffer.tail]; // prevent optimized away
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <Uart_isr+0xcc>)
 80026b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <Uart_isr+0xcc>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	81fb      	strh	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE; // increment tail value of tx_buffer
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <Uart_isr+0xcc>)
 80026c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <Uart_isr+0xcc>)
 80026ce:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <Uart_isr+0xc4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
    	      (&huart1)->Instance->TDR = c; // transmit data register
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <Uart_isr+0xc4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	89fa      	ldrh	r2, [r7, #14]
 80026de:	b292      	uxth	r2, r2
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 80026e2:	bf00      	nop
    }
}
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000021c 	.word	0x2000021c
 80026f0:	200008cc 	.word	0x200008cc
 80026f4:	200006c4 	.word	0x200006c4

080026f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026fc:	f7ff fdce 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <LoopForever+0x6>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	; (8002738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <LoopForever+0xe>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	; (8002744 <LoopForever+0x16>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002726:	f002 fe79 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272a:	f7ff f9e7 	bl	8001afc <main>

0800272e <LoopForever>:

LoopForever:
    b LoopForever
 800272e:	e7fe      	b.n	800272e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002730:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800273c:	08009690 	.word	0x08009690
  ldr r2, =_sbss
 8002740:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002744:	200008e8 	.word	0x200008e8

08002748 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC1_IRQHandler>
	...

0800274c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_Init+0x3c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_Init+0x3c>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002762:	2003      	movs	r0, #3
 8002764:	f000 f93e 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002768:	2000      	movs	r0, #0
 800276a:	f000 f80f 	bl	800278c <HAL_InitTick>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	71fb      	strb	r3, [r7, #7]
 8002778:	e001      	b.n	800277e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800277a:	f7ff fbb5 	bl	8001ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277e:	79fb      	ldrb	r3, [r7, #7]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40022000 	.word	0x40022000

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_InitTick+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_InitTick+0x70>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_InitTick+0x6c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f949 	bl	8002a4e <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d809      	bhi.n	80027dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f000 f913 	bl	80029fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_InitTick+0x74>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e007      	b.n	80027ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e004      	b.n	80027ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e001      	b.n	80027ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000010 	.word	0x20000010
 80027fc:	20000008 	.word	0x20000008
 8002800:	2000000c 	.word	0x2000000c

08002804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x24>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_IncTick+0x24>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000010 	.word	0x20000010
 8002828:	200008d4 	.word	0x200008d4

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	200008d4 	.word	0x200008d4

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff3e 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff8e 	bl	8002938 <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5d 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffa2 	bl	80029a0 <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d008      	beq.n	8002a90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e022      	b.n	8002ad6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 020e 	bic.w	r2, r2, #14
 8002a9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f003 021c 	and.w	r2, r3, #28
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d005      	beq.n	8002b06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2204      	movs	r2, #4
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e029      	b.n	8002b5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020e 	bic.w	r2, r2, #14
 8002b14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 021c 	and.w	r2, r3, #28
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
    }
  }
  return status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b72:	e154      	b.n	8002e1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8146 	beq.w	8002e18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d005      	beq.n	8002ba4 <HAL_GPIO_Init+0x40>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d130      	bne.n	8002c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bda:	2201      	movs	r2, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 0201 	and.w	r2, r3, #1
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d017      	beq.n	8002c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d123      	bne.n	8002c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	6939      	ldr	r1, [r7, #16]
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a0 	beq.w	8002e18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4b58      	ldr	r3, [pc, #352]	; (8002e3c <HAL_GPIO_Init+0x2d8>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <HAL_GPIO_Init+0x2d8>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <HAL_GPIO_Init+0x2d8>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf0:	4a53      	ldr	r2, [pc, #332]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d1a:	d019      	beq.n	8002d50 <HAL_GPIO_Init+0x1ec>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a49      	ldr	r2, [pc, #292]	; (8002e44 <HAL_GPIO_Init+0x2e0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_GPIO_Init+0x1e8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_GPIO_Init+0x2e4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00d      	beq.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a47      	ldr	r2, [pc, #284]	; (8002e4c <HAL_GPIO_Init+0x2e8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_GPIO_Init+0x1e0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a46      	ldr	r2, [pc, #280]	; (8002e50 <HAL_GPIO_Init+0x2ec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_GPIO_Init+0x1dc>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	e008      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d40:	2307      	movs	r3, #7
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x1ee>
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x2dc>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d94:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de8:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e12:	4a10      	ldr	r2, [pc, #64]	; (8002e54 <HAL_GPIO_Init+0x2f0>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f aea3 	bne.w	8002b74 <HAL_GPIO_Init+0x10>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	48000800 	.word	0x48000800
 8002e4c:	48000c00 	.word	0x48000c00
 8002e50:	48001000 	.word	0x48001000
 8002e54:	40010400 	.word	0x40010400

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb2:	d130      	bne.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec0:	d038      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2232      	movs	r2, #50	; 0x32
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee8:	e002      	b.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efc:	d102      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f2      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f10:	d110      	bne.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e00f      	b.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d007      	beq.n	8002f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f2c:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f000 bc02 	b.w	8003768 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f64:	4b96      	ldr	r3, [pc, #600]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6e:	4b94      	ldr	r3, [pc, #592]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80e4 	beq.w	800314e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4c>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	f040 808b 	bne.w	80030aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	f040 8087 	bne.w	80030aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9c:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x64>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e3d9      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_RCC_OscConfig+0x7e>
 8002fc4:	4b7e      	ldr	r3, [pc, #504]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fcc:	e005      	b.n	8002fda <HAL_RCC_OscConfig+0x8a>
 8002fce:	4b7c      	ldr	r3, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d223      	bcs.n	8003026 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fd8c 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e3ba      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff2:	4b73      	ldr	r3, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a72      	ldr	r2, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	496d      	ldr	r1, [pc, #436]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	4968      	ldr	r1, [pc, #416]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	e025      	b.n	8003072 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003026:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a65      	ldr	r2, [pc, #404]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4960      	ldr	r1, [pc, #384]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003044:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	495b      	ldr	r1, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fd4c 	bl	8003b00 <RCC_SetFlashLatencyFromMSIRange>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e37a      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003072:	f000 fc81 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003076:	4602      	mov	r2, r0
 8003078:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4950      	ldr	r1, [pc, #320]	; (80031c4 <HAL_RCC_OscConfig+0x274>)
 8003084:	5ccb      	ldrb	r3, [r1, r3]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <HAL_RCC_OscConfig+0x278>)
 8003090:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <HAL_RCC_OscConfig+0x27c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fb78 	bl	800278c <HAL_InitTick>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d052      	beq.n	800314c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	e35e      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d032      	beq.n	8003118 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a42      	ldr	r2, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030be:	f7ff fbb5 	bl	800282c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c6:	f7ff fbb1 	bl	800282c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e347      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d8:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030ea:	f043 0308 	orr.w	r3, r3, #8
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4930      	ldr	r1, [pc, #192]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003102:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	492b      	ldr	r1, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
 8003116:	e01a      	b.n	800314e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003118:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003124:	f7ff fb82 	bl	800282c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800312c:	f7ff fb7e 	bl	800282c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e314      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x1dc>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d073      	beq.n	8003242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x21c>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d10e      	bne.n	8003184 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d063      	beq.n	8003240 <HAL_RCC_OscConfig+0x2f0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d15f      	bne.n	8003240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e2f1      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x24c>
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e025      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d114      	bne.n	80031d0 <HAL_RCC_OscConfig+0x280>
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a02      	ldr	r2, [pc, #8]	; (80031c0 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e013      	b.n	80031e8 <HAL_RCC_OscConfig+0x298>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08009224 	.word	0x08009224
 80031c8:	20000008 	.word	0x20000008
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9f      	ldr	r2, [pc, #636]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b9d      	ldr	r3, [pc, #628]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9c      	ldr	r2, [pc, #624]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7ff fb1c 	bl	800282c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff fb18 	bl	800282c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e2ae      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320a:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2a8>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7ff fb08 	bl	800282c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff fb04 	bl	800282c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e29a      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d0>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x310>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d119      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	4b7c      	ldr	r3, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x328>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e277      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	4973      	ldr	r1, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	e040      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d023      	beq.n	80032de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7ff fac3 	bl	800282c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7ff fabf 	bl	800282c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e255      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	061b      	lsls	r3, r3, #24
 80032d6:	495f      	ldr	r1, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5c      	ldr	r2, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7ff fa9f 	bl	800282c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f2:	f7ff fa9b 	bl	800282c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e231      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d03c      	beq.n	8003396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01c      	beq.n	800335e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003324:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	4a4a      	ldr	r2, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff fa7a 	bl	800282c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff fa76 	bl	800282c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e20c      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x3ec>
 800335c:	e01b      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003366:	f023 0301 	bic.w	r3, r3, #1
 800336a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7ff fa5d 	bl	800282c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7ff fa59 	bl	800282c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1ef      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800338a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80a6 	beq.w	80034f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	6593      	str	r3, [r2, #88]	; 0x58
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7ff fa20 	bl	800282c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff fa1c 	bl	800282c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1b2      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCC_OscConfig+0x508>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d8>
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003426:	e029      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b05      	cmp	r3, #5
 800342e:	d115      	bne.n	800345c <HAL_RCC_OscConfig+0x50c>
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a07      	ldr	r2, [pc, #28]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a03      	ldr	r2, [pc, #12]	; (8003454 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003450:	e014      	b.n	800347c <HAL_RCC_OscConfig+0x52c>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	40007000 	.word	0x40007000
 800345c:	4b9a      	ldr	r3, [pc, #616]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a99      	ldr	r2, [pc, #612]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a95      	ldr	r2, [pc, #596]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff f9d2 	bl	800282c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7ff f9ce 	bl	800282c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e162      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b89      	ldr	r3, [pc, #548]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ed      	beq.n	800348c <HAL_RCC_OscConfig+0x53c>
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7ff f9bb 	bl	800282c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7ff f9b7 	bl	800282c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e14b      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ed      	bne.n	80034ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b78      	ldr	r3, [pc, #480]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	4a77      	ldr	r2, [pc, #476]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d03c      	beq.n	8003576 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003504:	4b70      	ldr	r3, [pc, #448]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350a:	4a6f      	ldr	r2, [pc, #444]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7ff f98a 	bl	800282c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7ff f986 	bl	800282c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e11c      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800352e:	4b66      	ldr	r3, [pc, #408]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <HAL_RCC_OscConfig+0x5cc>
 800353c:	e01b      	b.n	8003576 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003544:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7ff f96d 	bl	800282c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003556:	f7ff f969 	bl	800282c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0ff      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800356a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80f3 	beq.w	8003766 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80c9 	bne.w	800371c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800358a:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0203 	and.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	429a      	cmp	r2, r3
 800359c:	d12c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	3b01      	subs	r3, #1
 80035aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d123      	bne.n	80035f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d11b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d113      	bne.n	80035f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d109      	bne.n	80035f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d06b      	beq.n	80036d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d062      	beq.n	80036c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0ac      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003614:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003618:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361a:	f7ff f907 	bl	800282c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7ff f903 	bl	800282c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e099      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x77c>)
 8003646:	4013      	ands	r3, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003650:	3a01      	subs	r2, #1
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800365a:	0212      	lsls	r2, r2, #8
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003662:	0852      	lsrs	r2, r2, #1
 8003664:	3a01      	subs	r2, #1
 8003666:	0552      	lsls	r2, r2, #21
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800366e:	0852      	lsrs	r2, r2, #1
 8003670:	3a01      	subs	r2, #1
 8003672:	0652      	lsls	r2, r2, #25
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800367a:	06d2      	lsls	r2, r2, #27
 800367c:	430a      	orrs	r2, r1
 800367e:	4912      	ldr	r1, [pc, #72]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 8003696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800369c:	f7ff f8c6 	bl	800282c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7ff f8c2 	bl	800282c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e058      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_RCC_OscConfig+0x778>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c2:	e050      	b.n	8003766 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04f      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d144      	bne.n	8003766 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036f4:	f7ff f89a 	bl	800282c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7ff f896 	bl	800282c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e02c      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x7ac>
 800371a:	e024      	b.n	8003766 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d01f      	beq.n	8003762 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 8003728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7ff f87d 	bl	800282c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7ff f879 	bl	800282c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e00f      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	4905      	ldr	r1, [pc, #20]	; (8003770 <HAL_RCC_OscConfig+0x820>)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x824>)
 800375c:	4013      	ands	r3, r2
 800375e:	60cb      	str	r3, [r1, #12]
 8003760:	e001      	b.n	8003766 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	feeefffc 	.word	0xfeeefffc

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0e7      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b75      	ldr	r3, [pc, #468]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d910      	bls.n	80037bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b72      	ldr	r3, [pc, #456]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0207 	bic.w	r2, r3, #7
 80037a2:	4970      	ldr	r1, [pc, #448]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0cf      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d908      	bls.n	80037ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d8:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4960      	ldr	r1, [pc, #384]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d04c      	beq.n	8003890 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b5a      	ldr	r3, [pc, #360]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d121      	bne.n	800384e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0a6      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	4b54      	ldr	r3, [pc, #336]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d115      	bne.n	800384e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e09a      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800382e:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e08e      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e086      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4b46      	ldr	r3, [pc, #280]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 0203 	bic.w	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4943      	ldr	r1, [pc, #268]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fe ffe4 	bl	800282c <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003866:	e00a      	b.n	800387e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003868:	f7fe ffe0 	bl	800282c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e06e      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	4b3a      	ldr	r3, [pc, #232]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 020c 	and.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d1eb      	bne.n	8003868 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d208      	bcs.n	80038be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	492b      	ldr	r1, [pc, #172]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038be:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d210      	bcs.n	80038ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	4923      	ldr	r1, [pc, #140]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038dc:	4b21      	ldr	r3, [pc, #132]	; (8003964 <HAL_RCC_ClockConfig+0x1ec>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e036      	b.n	800395c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4918      	ldr	r1, [pc, #96]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4910      	ldr	r1, [pc, #64]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800392c:	f000 f824 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1f4>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1f8>)
 800394a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1fc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ff1b 	bl	800278c <HAL_InitTick>
 8003956:	4603      	mov	r3, r0
 8003958:	72fb      	strb	r3, [r7, #11]

  return status;
 800395a:	7afb      	ldrb	r3, [r7, #11]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40022000 	.word	0x40022000
 8003968:	40021000 	.word	0x40021000
 800396c:	08009224 	.word	0x08009224
 8003970:	20000008 	.word	0x20000008
 8003974:	2000000c 	.word	0x2000000c

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003986:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003990:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x34>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d121      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d11e      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039ac:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	e005      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039c8:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d102      	bne.n	80039f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x110>)
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	e004      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039fc:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x114>)
 80039fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d134      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0xac>
 8003a1c:	e005      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a20:	617b      	str	r3, [r7, #20]
      break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a26:	617b      	str	r3, [r7, #20]
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	617b      	str	r3, [r7, #20]
      break;
 8003a2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	fb03 f202 	mul.w	r2, r3, r2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	0e5b      	lsrs	r3, r3, #25
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	3301      	adds	r3, #1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a70:	69bb      	ldr	r3, [r7, #24]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	0800923c 	.word	0x0800923c
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08009234 	.word	0x08009234

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ad8:	f7ff ffda 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08009234 	.word	0x08009234

08003b00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f9b6 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003b1c:	6178      	str	r0, [r7, #20]
 8003b1e:	e014      	b.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b38:	f7ff f9a6 	bl	8002e88 <HAL_PWREx_GetVoltageRange>
 8003b3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d10b      	bne.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	; 0x80
 8003b56:	d919      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003b5c:	d902      	bls.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e013      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e010      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d902      	bls.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b70:	2303      	movs	r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e00a      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d102      	bne.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e004      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b70      	cmp	r3, #112	; 0x70
 8003b86:	d101      	bne.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 0207 	bic.w	r2, r3, #7
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b9c:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40022000 	.word	0x40022000

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d031      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be4:	d01a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003be6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bea:	d814      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a5c      	ldr	r2, [pc, #368]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c02:	e00c      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fa44 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	494e      	ldr	r1, [pc, #312]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3a:	e001      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 809e 	beq.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c52:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	; 0x58
 8003c74:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c84:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a39      	ldr	r2, [pc, #228]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c90:	f7fe fdcc 	bl	800282c <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c96:	e009      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c98:	f7fe fdc8 	bl	800282c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d902      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	74fb      	strb	r3, [r7, #19]
        break;
 8003caa:	e005      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ef      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d15a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d019      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d06:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d016      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fd88 	bl	800282c <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fe fd84 	bl	800282c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d902      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	74fb      	strb	r3, [r7, #19]
            break;
 8003d36:	e006      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ec      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5a:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d62:	e009      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
 8003d68:	e006      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d78:	7c7b      	ldrb	r3, [r7, #17]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7e:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	4a9d      	ldr	r2, [pc, #628]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d96:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f023 0203 	bic.w	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4994      	ldr	r1, [pc, #592]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db8:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 020c 	bic.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	498c      	ldr	r1, [pc, #560]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dda:	4b87      	ldr	r3, [pc, #540]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	4983      	ldr	r1, [pc, #524]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	497b      	ldr	r1, [pc, #492]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	4972      	ldr	r1, [pc, #456]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	496a      	ldr	r1, [pc, #424]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	4961      	ldr	r1, [pc, #388]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e84:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	4959      	ldr	r1, [pc, #356]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea6:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	4950      	ldr	r1, [pc, #320]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	4948      	ldr	r1, [pc, #288]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef0:	f023 0203 	bic.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	493f      	ldr	r1, [pc, #252]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a31      	ldr	r2, [pc, #196]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
 8003f38:	e011      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f8a4 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f94:	60d3      	str	r3, [r2, #12]
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f875 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe6:	d109      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a02      	ldr	r2, [pc, #8]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e014      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f843 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01c      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404a:	d10c      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f820 	bl	8004098 <RCCEx_PLLSAI1_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004080:	4904      	ldr	r1, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004088:	7cbb      	ldrb	r3, [r7, #18]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000

08004098 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040a6:	4b74      	ldr	r3, [pc, #464]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040b2:	4b71      	ldr	r3, [pc, #452]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10d      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
       ||
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040ca:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
       ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d047      	beq.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e044      	b.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d018      	beq.n	800411e <RCCEx_PLLSAI1_Config+0x86>
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d825      	bhi.n	800413c <RCCEx_PLLSAI1_Config+0xa4>
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d002      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x62>
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d009      	beq.n	800410c <RCCEx_PLLSAI1_Config+0x74>
 80040f8:	e020      	b.n	800413c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410a:	e01a      	b.n	8004142 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800410c:	4b5a      	ldr	r3, [pc, #360]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e013      	b.n	8004146 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800411e:	4b56      	ldr	r3, [pc, #344]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800412a:	4b53      	ldr	r3, [pc, #332]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800413a:	e006      	b.n	800414a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e004      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414a:	bf00      	nop
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004152:	4b49      	ldr	r3, [pc, #292]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	430b      	orrs	r3, r1
 8004168:	4943      	ldr	r1, [pc, #268]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d17c      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800417e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fe fb54 	bl	800282c <HAL_GetTick>
 8004184:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004186:	e009      	b.n	800419c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004188:	f7fe fb50 	bl	800282c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d902      	bls.n	800419c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	73fb      	strb	r3, [r7, #15]
        break;
 800419a:	e005      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ef      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d15f      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d110      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b4:	4b30      	ldr	r3, [pc, #192]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	06d2      	lsls	r2, r2, #27
 80041cc:	430a      	orrs	r2, r1
 80041ce:	492a      	ldr	r1, [pc, #168]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
 80041d4:	e027      	b.n	8004226 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d112      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041dc:	4b26      	ldr	r3, [pc, #152]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6912      	ldr	r2, [r2, #16]
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0552      	lsls	r2, r2, #21
 80041f8:	430a      	orrs	r2, r1
 80041fa:	491f      	ldr	r1, [pc, #124]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
 8004200:	e011      	b.n	8004226 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800420a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6892      	ldr	r2, [r2, #8]
 8004212:	0211      	lsls	r1, r2, #8
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6952      	ldr	r2, [r2, #20]
 8004218:	0852      	lsrs	r2, r2, #1
 800421a:	3a01      	subs	r2, #1
 800421c:	0652      	lsls	r2, r2, #25
 800421e:	430a      	orrs	r2, r1
 8004220:	4915      	ldr	r1, [pc, #84]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a13      	ldr	r2, [pc, #76]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004230:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fe fafb 	bl	800282c <HAL_GetTick>
 8004236:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004238:	e009      	b.n	800424e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800423a:	f7fe faf7 	bl	800282c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d902      	bls.n	800424e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	73fb      	strb	r3, [r7, #15]
          break;
 800424c:	e005      	b.n	800425a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e040      	b.n	8004310 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fd fe46 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	; 0x24
 80042a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fbc2 	bl	8004a44 <UART_SetConfig>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e022      	b.n	8004310 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fe3c 	bl	8004f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fec3 	bl	8005094 <UART_CheckIdleState>
 800430e:	4603      	mov	r3, r0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432c:	2b20      	cmp	r3, #32
 800432e:	f040 8082 	bne.w	8004436 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_UART_Transmit+0x26>
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e07a      	b.n	8004438 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UART_Transmit+0x38>
 800434c:	2302      	movs	r3, #2
 800434e:	e073      	b.n	8004438 <HAL_UART_Transmit+0x120>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2221      	movs	r2, #33	; 0x21
 8004364:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004366:	f7fe fa61 	bl	800282c <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d108      	bne.n	8004398 <HAL_UART_Transmit+0x80>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043a8:	e02d      	b.n	8004406 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 feb6 	bl	8005126 <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e039      	b.n	8004438 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d6:	b292      	uxth	r2, r2
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3302      	adds	r3, #2
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e008      	b.n	80043f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b292      	uxth	r2, r2
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3301      	adds	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1cb      	bne.n	80043aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fe82 	bl	8005126 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e005      	b.n	8004438 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b0ba      	sub	sp, #232	; 0xe8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800446a:	f640 030f 	movw	r3, #2063	; 0x80f
 800446e:	4013      	ands	r3, r2
 8004470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d115      	bne.n	80044a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00f      	beq.n	80044a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 82a6 	beq.w	80049ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
      }
      return;
 80044a6:	e2a0      	b.n	80049ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8117 	beq.w	80046e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044c2:	4b85      	ldr	r3, [pc, #532]	; (80046d8 <HAL_UART_IRQHandler+0x298>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 810a 	beq.w	80046e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d011      	beq.n	80044fc <HAL_UART_IRQHandler+0xbc>
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2201      	movs	r2, #1
 80044ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d011      	beq.n	800452c <HAL_UART_IRQHandler+0xec>
 8004508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2202      	movs	r2, #2
 800451a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d011      	beq.n	800455c <HAL_UART_IRQHandler+0x11c>
 8004538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2204      	movs	r2, #4
 800454a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	f043 0202 	orr.w	r2, r3, #2
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d017      	beq.n	8004598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2208      	movs	r2, #8
 8004586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458e:	f043 0208 	orr.w	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_UART_IRQHandler+0x18a>
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00c      	beq.n	80045ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 820c 	beq.w	80049ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d005      	beq.n	8004622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800461a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04f      	beq.n	80046c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fe43 	bl	80052ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d141      	bne.n	80046ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800464c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800466e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1d9      	bne.n	8004636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	2b00      	cmp	r3, #0
 8004688:	d013      	beq.n	80046b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_UART_IRQHandler+0x29c>)
 8004690:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fa23 	bl	8002ae2 <HAL_DMA_Abort_IT>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d017      	beq.n	80046d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046ac:	4610      	mov	r0, r2
 80046ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	e00f      	b.n	80046d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9b0 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	e00b      	b.n	80046d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9ac 	bl	8004a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e007      	b.n	80046d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9a8 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80046d0:	e18d      	b.n	80049ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d2:	bf00      	nop
    return;
 80046d4:	e18b      	b.n	80049ee <HAL_UART_IRQHandler+0x5ae>
 80046d6:	bf00      	nop
 80046d8:	04000120 	.word	0x04000120
 80046dc:	08005375 	.word	0x08005375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 8146 	bne.w	8004976 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 813f 	beq.w	8004976 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8138 	beq.w	8004976 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	f040 80b4 	bne.w	8004886 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800472a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 815f 	beq.w	80049f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800473a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800473e:	429a      	cmp	r2, r3
 8004740:	f080 8157 	bcs.w	80049f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800474a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 8085 	bne.w	800486a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800478a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800478e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1da      	bne.n	8004760 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3308      	adds	r3, #8
 80047b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e1      	bne.n	80047aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800480a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800480c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800484c:	65bb      	str	r3, [r7, #88]	; 0x58
 800484e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e4      	bne.n	800482a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe f8fe 	bl	8002a66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004876:	b29b      	uxth	r3, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8d4 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004884:	e0b5      	b.n	80049f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004892:	b29b      	uxth	r3, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80a7 	beq.w	80049f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80048a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a2 	beq.w	80049f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
 80048d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e4      	bne.n	80048b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3308      	adds	r3, #8
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	623b      	str	r3, [r7, #32]
   return(result);
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800490c:	633a      	str	r2, [r7, #48]	; 0x30
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e3      	bne.n	80048e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	617b      	str	r3, [r7, #20]
   return(result);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e4      	bne.n	8004932 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f85c 	bl	8004a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004974:	e03f      	b.n	80049f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <HAL_UART_IRQHandler+0x560>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fd2b 	bl	80053f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800499e:	e02d      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00e      	beq.n	80049ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
    }
    return;
 80049c8:	e017      	b.n	80049fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d012      	beq.n	80049fc <HAL_UART_IRQHandler+0x5bc>
 80049d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fcdc 	bl	80053a0 <UART_EndTransmit_IT>
    return;
 80049e8:	e008      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80049ea:	bf00      	nop
 80049ec:	e006      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80049ee:	bf00      	nop
 80049f0:	e004      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80049fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80049fc:	37e8      	adds	r7, #232	; 0xe8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a48:	b08a      	sub	sp, #40	; 0x28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4ba5      	ldr	r3, [pc, #660]	; (8004d08 <UART_SetConfig+0x2c4>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a9a      	ldr	r2, [pc, #616]	; (8004d0c <UART_SetConfig+0x2c8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	4313      	orrs	r3, r2
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a91      	ldr	r2, [pc, #580]	; (8004d10 <UART_SetConfig+0x2cc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d126      	bne.n	8004b1c <UART_SetConfig+0xd8>
 8004ace:	4b91      	ldr	r3, [pc, #580]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d81b      	bhi.n	8004b14 <UART_SetConfig+0xd0>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xa0>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e0d6      	b.n	8004caa <UART_SetConfig+0x266>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	e0d2      	b.n	8004caa <UART_SetConfig+0x266>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0a:	e0ce      	b.n	8004caa <UART_SetConfig+0x266>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e0ca      	b.n	8004caa <UART_SetConfig+0x266>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e0c6      	b.n	8004caa <UART_SetConfig+0x266>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7d      	ldr	r2, [pc, #500]	; (8004d18 <UART_SetConfig+0x2d4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d138      	bne.n	8004b98 <UART_SetConfig+0x154>
 8004b26:	4b7b      	ldr	r3, [pc, #492]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d82d      	bhi.n	8004b90 <UART_SetConfig+0x14c>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0xf8>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004b91 	.word	0x08004b91
 8004b48:	08004b91 	.word	0x08004b91
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b91 	.word	0x08004b91
 8004b58:	08004b91 	.word	0x08004b91
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b91 	.word	0x08004b91
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004b91 	.word	0x08004b91
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e098      	b.n	8004caa <UART_SetConfig+0x266>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e094      	b.n	8004caa <UART_SetConfig+0x266>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e090      	b.n	8004caa <UART_SetConfig+0x266>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e08c      	b.n	8004caa <UART_SetConfig+0x266>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e088      	b.n	8004caa <UART_SetConfig+0x266>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	; (8004d1c <UART_SetConfig+0x2d8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d125      	bne.n	8004bee <UART_SetConfig+0x1aa>
 8004ba2:	4b5c      	ldr	r3, [pc, #368]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bac:	2b30      	cmp	r3, #48	; 0x30
 8004bae:	d016      	beq.n	8004bde <UART_SetConfig+0x19a>
 8004bb0:	2b30      	cmp	r3, #48	; 0x30
 8004bb2:	d818      	bhi.n	8004be6 <UART_SetConfig+0x1a2>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d00a      	beq.n	8004bce <UART_SetConfig+0x18a>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d814      	bhi.n	8004be6 <UART_SetConfig+0x1a2>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <UART_SetConfig+0x182>
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d008      	beq.n	8004bd6 <UART_SetConfig+0x192>
 8004bc4:	e00f      	b.n	8004be6 <UART_SetConfig+0x1a2>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bcc:	e06d      	b.n	8004caa <UART_SetConfig+0x266>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd4:	e069      	b.n	8004caa <UART_SetConfig+0x266>
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bdc:	e065      	b.n	8004caa <UART_SetConfig+0x266>
 8004bde:	2308      	movs	r3, #8
 8004be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be4:	e061      	b.n	8004caa <UART_SetConfig+0x266>
 8004be6:	2310      	movs	r3, #16
 8004be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bec:	e05d      	b.n	8004caa <UART_SetConfig+0x266>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a4b      	ldr	r2, [pc, #300]	; (8004d20 <UART_SetConfig+0x2dc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d125      	bne.n	8004c44 <UART_SetConfig+0x200>
 8004bf8:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c02:	2bc0      	cmp	r3, #192	; 0xc0
 8004c04:	d016      	beq.n	8004c34 <UART_SetConfig+0x1f0>
 8004c06:	2bc0      	cmp	r3, #192	; 0xc0
 8004c08:	d818      	bhi.n	8004c3c <UART_SetConfig+0x1f8>
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d00a      	beq.n	8004c24 <UART_SetConfig+0x1e0>
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d814      	bhi.n	8004c3c <UART_SetConfig+0x1f8>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <UART_SetConfig+0x1d8>
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x1e8>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x1f8>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e042      	b.n	8004caa <UART_SetConfig+0x266>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e03e      	b.n	8004caa <UART_SetConfig+0x266>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e03a      	b.n	8004caa <UART_SetConfig+0x266>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e036      	b.n	8004caa <UART_SetConfig+0x266>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e032      	b.n	8004caa <UART_SetConfig+0x266>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <UART_SetConfig+0x2c8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d12a      	bne.n	8004ca4 <UART_SetConfig+0x260>
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <UART_SetConfig+0x2d0>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5c:	d01a      	beq.n	8004c94 <UART_SetConfig+0x250>
 8004c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0x258>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x240>
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d815      	bhi.n	8004c9c <UART_SetConfig+0x258>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x238>
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x248>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x258>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e012      	b.n	8004caa <UART_SetConfig+0x266>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e00e      	b.n	8004caa <UART_SetConfig+0x266>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e00a      	b.n	8004caa <UART_SetConfig+0x266>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e006      	b.n	8004caa <UART_SetConfig+0x266>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e002      	b.n	8004caa <UART_SetConfig+0x266>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <UART_SetConfig+0x2c8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f040 808b 	bne.w	8004dcc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d834      	bhi.n	8004d28 <UART_SetConfig+0x2e4>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x280>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004cf7 	.word	0x08004cf7
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7fe fede 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004cec:	61f8      	str	r0, [r7, #28]
        break;
 8004cee:	e021      	b.n	8004d34 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <UART_SetConfig+0x2e0>)
 8004cf2:	61fb      	str	r3, [r7, #28]
        break;
 8004cf4:	e01e      	b.n	8004d34 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe fe3f 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8004cfa:	61f8      	str	r0, [r7, #28]
        break;
 8004cfc:	e01a      	b.n	8004d34 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e016      	b.n	8004d34 <UART_SetConfig+0x2f0>
 8004d06:	bf00      	nop
 8004d08:	efff69f3 	.word	0xefff69f3
 8004d0c:	40008000 	.word	0x40008000
 8004d10:	40013800 	.word	0x40013800
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40004400 	.word	0x40004400
 8004d1c:	40004800 	.word	0x40004800
 8004d20:	40004c00 	.word	0x40004c00
 8004d24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80fa 	beq.w	8004f30 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d305      	bcc.n	8004d58 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d5e:	e0e7      	b.n	8004f30 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	2200      	movs	r2, #0
 8004d64:	461c      	mov	r4, r3
 8004d66:	4615      	mov	r5, r2
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	022b      	lsls	r3, r5, #8
 8004d72:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d76:	0222      	lsls	r2, r4, #8
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	6849      	ldr	r1, [r1, #4]
 8004d7c:	0849      	lsrs	r1, r1, #1
 8004d7e:	2000      	movs	r0, #0
 8004d80:	4688      	mov	r8, r1
 8004d82:	4681      	mov	r9, r0
 8004d84:	eb12 0a08 	adds.w	sl, r2, r8
 8004d88:	eb43 0b09 	adc.w	fp, r3, r9
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	f7fb ff5b 	bl	8000c58 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4613      	mov	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db0:	d308      	bcc.n	8004dc4 <UART_SetConfig+0x380>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db8:	d204      	bcs.n	8004dc4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	e0b5      	b.n	8004f30 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dca:	e0b1      	b.n	8004f30 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd4:	d15d      	bne.n	8004e92 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d827      	bhi.n	8004e2e <UART_SetConfig+0x3ea>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x3a0>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fe fe4e 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	61f8      	str	r0, [r7, #28]
        break;
 8004e0e:	e014      	b.n	8004e3a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe fe60 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8004e14:	61f8      	str	r0, [r7, #28]
        break;
 8004e16:	e010      	b.n	8004e3a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b4c      	ldr	r3, [pc, #304]	; (8004f4c <UART_SetConfig+0x508>)
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e00d      	b.n	8004e3a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fe fdab 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8004e22:	61f8      	str	r0, [r7, #28]
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61fb      	str	r3, [r7, #28]
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d077      	beq.n	8004f30 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005a      	lsls	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b0f      	cmp	r3, #15
 8004e5a:	d916      	bls.n	8004e8a <UART_SetConfig+0x446>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e62:	d212      	bcs.n	8004e8a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f023 030f 	bic.w	r3, r3, #15
 8004e6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	8afa      	ldrh	r2, [r7, #22]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e052      	b.n	8004f30 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e90:	e04e      	b.n	8004f30 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d827      	bhi.n	8004eea <UART_SetConfig+0x4a6>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x45c>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004eeb 	.word	0x08004eeb
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004ee3 	.word	0x08004ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fe fdf0 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61f8      	str	r0, [r7, #28]
        break;
 8004eca:	e014      	b.n	8004ef6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fe fe02 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8004ed0:	61f8      	str	r0, [r7, #28]
        break;
 8004ed2:	e010      	b.n	8004ef6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <UART_SetConfig+0x508>)
 8004ed6:	61fb      	str	r3, [r7, #28]
        break;
 8004ed8:	e00d      	b.n	8004ef6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eda:	f7fe fd4d 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 8004ede:	61f8      	str	r0, [r7, #28]
        break;
 8004ee0:	e009      	b.n	8004ef6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e005      	b.n	8004ef6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d019      	beq.n	8004f30 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	085a      	lsrs	r2, r3, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d909      	bls.n	8004f2a <UART_SetConfig+0x4e6>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d205      	bcs.n	8004f2a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e002      	b.n	8004f30 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3728      	adds	r7, #40	; 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4a:	bf00      	nop
 8004f4c:	00f42400 	.word	0x00f42400

08004f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01a      	beq.n	8005066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504e:	d10a      	bne.n	8005066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a4:	f7fd fbc2 	bl	800282c <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d10e      	bne.n	80050d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f82d 	bl	8005126 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e023      	b.n	800511e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d10e      	bne.n	8005102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f817 	bl	8005126 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e00d      	b.n	800511e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b09c      	sub	sp, #112	; 0x70
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	4613      	mov	r3, r2
 8005134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005136:	e0a5      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	f000 80a1 	beq.w	8005284 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fd fb73 	bl	800282c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <UART_WaitOnFlagUntilTimeout+0x32>
 8005152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005154:	2b00      	cmp	r3, #0
 8005156:	d13e      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516c:	667b      	str	r3, [r7, #100]	; 0x64
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005178:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800517c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800519a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	663b      	str	r3, [r7, #96]	; 0x60
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80051ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e067      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d04f      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f2:	d147      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	637b      	str	r3, [r7, #52]	; 0x34
 800521e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	613b      	str	r3, [r7, #16]
   return(result);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	66bb      	str	r3, [r7, #104]	; 0x68
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005250:	623a      	str	r2, [r7, #32]
 8005252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	69f9      	ldr	r1, [r7, #28]
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	61bb      	str	r3, [r7, #24]
   return(result);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	429a      	cmp	r2, r3
 80052a0:	f43f af4a 	beq.w	8005138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3770      	adds	r7, #112	; 0x70
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b095      	sub	sp, #84	; 0x54
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	643b      	str	r3, [r7, #64]	; 0x40
 80052d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e6      	bne.n	80052b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	2b01      	cmp	r3, #1
 8005322:	d118      	bne.n	8005356 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	60bb      	str	r3, [r7, #8]
   return(result);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e6      	bne.n	8005324 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005368:	bf00      	nop
 800536a:	3754      	adds	r7, #84	; 0x54
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fb40 	bl	8004a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	613b      	str	r3, [r7, #16]
   return(result);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e6      	bne.n	80053a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fb0c 	bl	8004a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <atoi>:
 8005408:	220a      	movs	r2, #10
 800540a:	2100      	movs	r1, #0
 800540c:	f000 bd3e 	b.w	8005e8c <strtol>

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	; (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000014 	.word	0x20000014

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	; (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	; (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	; (8005460 <__libc_init_array+0x44>)
 8005430:	f003 fea8 	bl	8009184 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	08009688 	.word	0x08009688
 8005458:	08009688 	.word	0x08009688
 800545c:	08009688 	.word	0x08009688
 8005460:	0800968c 	.word	0x0800968c

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <__cvt>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	ec55 4b10 	vmov	r4, r5, d0
 800547c:	2d00      	cmp	r5, #0
 800547e:	460e      	mov	r6, r1
 8005480:	4619      	mov	r1, r3
 8005482:	462b      	mov	r3, r5
 8005484:	bfbb      	ittet	lt
 8005486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800548a:	461d      	movlt	r5, r3
 800548c:	2300      	movge	r3, #0
 800548e:	232d      	movlt	r3, #45	; 0x2d
 8005490:	700b      	strb	r3, [r1, #0]
 8005492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005498:	4691      	mov	r9, r2
 800549a:	f023 0820 	bic.w	r8, r3, #32
 800549e:	bfbc      	itt	lt
 80054a0:	4622      	movlt	r2, r4
 80054a2:	4614      	movlt	r4, r2
 80054a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a8:	d005      	beq.n	80054b6 <__cvt+0x42>
 80054aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054ae:	d100      	bne.n	80054b2 <__cvt+0x3e>
 80054b0:	3601      	adds	r6, #1
 80054b2:	2102      	movs	r1, #2
 80054b4:	e000      	b.n	80054b8 <__cvt+0x44>
 80054b6:	2103      	movs	r1, #3
 80054b8:	ab03      	add	r3, sp, #12
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	ab02      	add	r3, sp, #8
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	ec45 4b10 	vmov	d0, r4, r5
 80054c4:	4653      	mov	r3, sl
 80054c6:	4632      	mov	r2, r6
 80054c8:	f000 fd76 	bl	8005fb8 <_dtoa_r>
 80054cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054d0:	4607      	mov	r7, r0
 80054d2:	d102      	bne.n	80054da <__cvt+0x66>
 80054d4:	f019 0f01 	tst.w	r9, #1
 80054d8:	d022      	beq.n	8005520 <__cvt+0xac>
 80054da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054de:	eb07 0906 	add.w	r9, r7, r6
 80054e2:	d110      	bne.n	8005506 <__cvt+0x92>
 80054e4:	783b      	ldrb	r3, [r7, #0]
 80054e6:	2b30      	cmp	r3, #48	; 0x30
 80054e8:	d10a      	bne.n	8005500 <__cvt+0x8c>
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80054f6:	b918      	cbnz	r0, 8005500 <__cvt+0x8c>
 80054f8:	f1c6 0601 	rsb	r6, r6, #1
 80054fc:	f8ca 6000 	str.w	r6, [sl]
 8005500:	f8da 3000 	ldr.w	r3, [sl]
 8005504:	4499      	add	r9, r3
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fb fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005512:	b108      	cbz	r0, 8005518 <__cvt+0xa4>
 8005514:	f8cd 900c 	str.w	r9, [sp, #12]
 8005518:	2230      	movs	r2, #48	; 0x30
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	454b      	cmp	r3, r9
 800551e:	d307      	bcc.n	8005530 <__cvt+0xbc>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005524:	1bdb      	subs	r3, r3, r7
 8005526:	4638      	mov	r0, r7
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	b004      	add	sp, #16
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	1c59      	adds	r1, r3, #1
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e7f0      	b.n	800551a <__cvt+0xa6>

08005538 <__exponent>:
 8005538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553a:	4603      	mov	r3, r0
 800553c:	2900      	cmp	r1, #0
 800553e:	bfb8      	it	lt
 8005540:	4249      	neglt	r1, r1
 8005542:	f803 2b02 	strb.w	r2, [r3], #2
 8005546:	bfb4      	ite	lt
 8005548:	222d      	movlt	r2, #45	; 0x2d
 800554a:	222b      	movge	r2, #43	; 0x2b
 800554c:	2909      	cmp	r1, #9
 800554e:	7042      	strb	r2, [r0, #1]
 8005550:	dd2a      	ble.n	80055a8 <__exponent+0x70>
 8005552:	f10d 0407 	add.w	r4, sp, #7
 8005556:	46a4      	mov	ip, r4
 8005558:	270a      	movs	r7, #10
 800555a:	46a6      	mov	lr, r4
 800555c:	460a      	mov	r2, r1
 800555e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005562:	fb07 1516 	mls	r5, r7, r6, r1
 8005566:	3530      	adds	r5, #48	; 0x30
 8005568:	2a63      	cmp	r2, #99	; 0x63
 800556a:	f104 34ff 	add.w	r4, r4, #4294967295
 800556e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005572:	4631      	mov	r1, r6
 8005574:	dcf1      	bgt.n	800555a <__exponent+0x22>
 8005576:	3130      	adds	r1, #48	; 0x30
 8005578:	f1ae 0502 	sub.w	r5, lr, #2
 800557c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005580:	1c44      	adds	r4, r0, #1
 8005582:	4629      	mov	r1, r5
 8005584:	4561      	cmp	r1, ip
 8005586:	d30a      	bcc.n	800559e <__exponent+0x66>
 8005588:	f10d 0209 	add.w	r2, sp, #9
 800558c:	eba2 020e 	sub.w	r2, r2, lr
 8005590:	4565      	cmp	r5, ip
 8005592:	bf88      	it	hi
 8005594:	2200      	movhi	r2, #0
 8005596:	4413      	add	r3, r2
 8005598:	1a18      	subs	r0, r3, r0
 800559a:	b003      	add	sp, #12
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055a6:	e7ed      	b.n	8005584 <__exponent+0x4c>
 80055a8:	2330      	movs	r3, #48	; 0x30
 80055aa:	3130      	adds	r1, #48	; 0x30
 80055ac:	7083      	strb	r3, [r0, #2]
 80055ae:	70c1      	strb	r1, [r0, #3]
 80055b0:	1d03      	adds	r3, r0, #4
 80055b2:	e7f1      	b.n	8005598 <__exponent+0x60>

080055b4 <_printf_float>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	ed2d 8b02 	vpush	{d8}
 80055bc:	b08d      	sub	sp, #52	; 0x34
 80055be:	460c      	mov	r4, r1
 80055c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055c4:	4616      	mov	r6, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	4605      	mov	r5, r0
 80055ca:	f001 fae3 	bl	8006b94 <_localeconv_r>
 80055ce:	f8d0 a000 	ldr.w	sl, [r0]
 80055d2:	4650      	mov	r0, sl
 80055d4:	f7fa fe04 	bl	80001e0 <strlen>
 80055d8:	2300      	movs	r3, #0
 80055da:	930a      	str	r3, [sp, #40]	; 0x28
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	f8d8 3000 	ldr.w	r3, [r8]
 80055e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055e8:	3307      	adds	r3, #7
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	f103 0208 	add.w	r2, r3, #8
 80055f2:	f8c8 2000 	str.w	r2, [r8]
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	f8cd 8018 	str.w	r8, [sp, #24]
 800560c:	ee08 0a10 	vmov	s16, r0
 8005610:	4b9f      	ldr	r3, [pc, #636]	; (8005890 <_printf_float+0x2dc>)
 8005612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	f7fb fa8f 	bl	8000b3c <__aeabi_dcmpun>
 800561e:	bb88      	cbnz	r0, 8005684 <_printf_float+0xd0>
 8005620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005624:	4b9a      	ldr	r3, [pc, #616]	; (8005890 <_printf_float+0x2dc>)
 8005626:	f04f 32ff 	mov.w	r2, #4294967295
 800562a:	f7fb fa69 	bl	8000b00 <__aeabi_dcmple>
 800562e:	bb48      	cbnz	r0, 8005684 <_printf_float+0xd0>
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fb fa58 	bl	8000aec <__aeabi_dcmplt>
 800563c:	b110      	cbz	r0, 8005644 <_printf_float+0x90>
 800563e:	232d      	movs	r3, #45	; 0x2d
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005644:	4b93      	ldr	r3, [pc, #588]	; (8005894 <_printf_float+0x2e0>)
 8005646:	4894      	ldr	r0, [pc, #592]	; (8005898 <_printf_float+0x2e4>)
 8005648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800564c:	bf94      	ite	ls
 800564e:	4698      	movls	r8, r3
 8005650:	4680      	movhi	r8, r0
 8005652:	2303      	movs	r3, #3
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	f023 0204 	bic.w	r2, r3, #4
 800565c:	6022      	str	r2, [r4, #0]
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	9700      	str	r7, [sp, #0]
 8005664:	4633      	mov	r3, r6
 8005666:	aa0b      	add	r2, sp, #44	; 0x2c
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f9d8 	bl	8005a20 <_printf_common>
 8005670:	3001      	adds	r0, #1
 8005672:	f040 8090 	bne.w	8005796 <_printf_float+0x1e2>
 8005676:	f04f 30ff 	mov.w	r0, #4294967295
 800567a:	b00d      	add	sp, #52	; 0x34
 800567c:	ecbd 8b02 	vpop	{d8}
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fb fa56 	bl	8000b3c <__aeabi_dcmpun>
 8005690:	b140      	cbz	r0, 80056a4 <_printf_float+0xf0>
 8005692:	464b      	mov	r3, r9
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfbc      	itt	lt
 8005698:	232d      	movlt	r3, #45	; 0x2d
 800569a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800569e:	487f      	ldr	r0, [pc, #508]	; (800589c <_printf_float+0x2e8>)
 80056a0:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <_printf_float+0x2ec>)
 80056a2:	e7d1      	b.n	8005648 <_printf_float+0x94>
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056aa:	9206      	str	r2, [sp, #24]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	d13f      	bne.n	8005730 <_printf_float+0x17c>
 80056b0:	2306      	movs	r3, #6
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	9b05      	ldr	r3, [sp, #20]
 80056b6:	6861      	ldr	r1, [r4, #4]
 80056b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056bc:	2300      	movs	r3, #0
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	ab0a      	add	r3, sp, #40	; 0x28
 80056c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056c6:	ab09      	add	r3, sp, #36	; 0x24
 80056c8:	ec49 8b10 	vmov	d0, r8, r9
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7ff fecd 	bl	8005474 <__cvt>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056de:	2b47      	cmp	r3, #71	; 0x47
 80056e0:	4680      	mov	r8, r0
 80056e2:	d108      	bne.n	80056f6 <_printf_float+0x142>
 80056e4:	1cc8      	adds	r0, r1, #3
 80056e6:	db02      	blt.n	80056ee <_printf_float+0x13a>
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	4299      	cmp	r1, r3
 80056ec:	dd41      	ble.n	8005772 <_printf_float+0x1be>
 80056ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80056f2:	fa5f fb8b 	uxtb.w	fp, fp
 80056f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056fa:	d820      	bhi.n	800573e <_printf_float+0x18a>
 80056fc:	3901      	subs	r1, #1
 80056fe:	465a      	mov	r2, fp
 8005700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005704:	9109      	str	r1, [sp, #36]	; 0x24
 8005706:	f7ff ff17 	bl	8005538 <__exponent>
 800570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570c:	1813      	adds	r3, r2, r0
 800570e:	2a01      	cmp	r2, #1
 8005710:	4681      	mov	r9, r0
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	dc02      	bgt.n	800571c <_printf_float+0x168>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	07d2      	lsls	r2, r2, #31
 800571a:	d501      	bpl.n	8005720 <_printf_float+0x16c>
 800571c:	3301      	adds	r3, #1
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005724:	2b00      	cmp	r3, #0
 8005726:	d09c      	beq.n	8005662 <_printf_float+0xae>
 8005728:	232d      	movs	r3, #45	; 0x2d
 800572a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572e:	e798      	b.n	8005662 <_printf_float+0xae>
 8005730:	9a06      	ldr	r2, [sp, #24]
 8005732:	2a47      	cmp	r2, #71	; 0x47
 8005734:	d1be      	bne.n	80056b4 <_printf_float+0x100>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1bc      	bne.n	80056b4 <_printf_float+0x100>
 800573a:	2301      	movs	r3, #1
 800573c:	e7b9      	b.n	80056b2 <_printf_float+0xfe>
 800573e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005742:	d118      	bne.n	8005776 <_printf_float+0x1c2>
 8005744:	2900      	cmp	r1, #0
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	dd0b      	ble.n	8005762 <_printf_float+0x1ae>
 800574a:	6121      	str	r1, [r4, #16]
 800574c:	b913      	cbnz	r3, 8005754 <_printf_float+0x1a0>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	07d0      	lsls	r0, r2, #31
 8005752:	d502      	bpl.n	800575a <_printf_float+0x1a6>
 8005754:	3301      	adds	r3, #1
 8005756:	440b      	add	r3, r1
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	65a1      	str	r1, [r4, #88]	; 0x58
 800575c:	f04f 0900 	mov.w	r9, #0
 8005760:	e7de      	b.n	8005720 <_printf_float+0x16c>
 8005762:	b913      	cbnz	r3, 800576a <_printf_float+0x1b6>
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	07d2      	lsls	r2, r2, #31
 8005768:	d501      	bpl.n	800576e <_printf_float+0x1ba>
 800576a:	3302      	adds	r3, #2
 800576c:	e7f4      	b.n	8005758 <_printf_float+0x1a4>
 800576e:	2301      	movs	r3, #1
 8005770:	e7f2      	b.n	8005758 <_printf_float+0x1a4>
 8005772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005778:	4299      	cmp	r1, r3
 800577a:	db05      	blt.n	8005788 <_printf_float+0x1d4>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	6121      	str	r1, [r4, #16]
 8005780:	07d8      	lsls	r0, r3, #31
 8005782:	d5ea      	bpl.n	800575a <_printf_float+0x1a6>
 8005784:	1c4b      	adds	r3, r1, #1
 8005786:	e7e7      	b.n	8005758 <_printf_float+0x1a4>
 8005788:	2900      	cmp	r1, #0
 800578a:	bfd4      	ite	le
 800578c:	f1c1 0202 	rsble	r2, r1, #2
 8005790:	2201      	movgt	r2, #1
 8005792:	4413      	add	r3, r2
 8005794:	e7e0      	b.n	8005758 <_printf_float+0x1a4>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	055a      	lsls	r2, r3, #21
 800579a:	d407      	bmi.n	80057ac <_printf_float+0x1f8>
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	4642      	mov	r2, r8
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	d12c      	bne.n	8005804 <_printf_float+0x250>
 80057aa:	e764      	b.n	8005676 <_printf_float+0xc2>
 80057ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057b0:	f240 80e0 	bls.w	8005974 <_printf_float+0x3c0>
 80057b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b8:	2200      	movs	r2, #0
 80057ba:	2300      	movs	r3, #0
 80057bc:	f7fb f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d034      	beq.n	800582e <_printf_float+0x27a>
 80057c4:	4a37      	ldr	r2, [pc, #220]	; (80058a4 <_printf_float+0x2f0>)
 80057c6:	2301      	movs	r3, #1
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af51 	beq.w	8005676 <_printf_float+0xc2>
 80057d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d8:	429a      	cmp	r2, r3
 80057da:	db02      	blt.n	80057e2 <_printf_float+0x22e>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07d8      	lsls	r0, r3, #31
 80057e0:	d510      	bpl.n	8005804 <_printf_float+0x250>
 80057e2:	ee18 3a10 	vmov	r3, s16
 80057e6:	4652      	mov	r2, sl
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f af41 	beq.w	8005676 <_printf_float+0xc2>
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	f104 091a 	add.w	r9, r4, #26
 80057fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	4543      	cmp	r3, r8
 8005802:	dc09      	bgt.n	8005818 <_printf_float+0x264>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	f100 8105 	bmi.w	8005a16 <_printf_float+0x462>
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005810:	4298      	cmp	r0, r3
 8005812:	bfb8      	it	lt
 8005814:	4618      	movlt	r0, r3
 8005816:	e730      	b.n	800567a <_printf_float+0xc6>
 8005818:	2301      	movs	r3, #1
 800581a:	464a      	mov	r2, r9
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f af27 	beq.w	8005676 <_printf_float+0xc2>
 8005828:	f108 0801 	add.w	r8, r8, #1
 800582c:	e7e6      	b.n	80057fc <_printf_float+0x248>
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	dc39      	bgt.n	80058a8 <_printf_float+0x2f4>
 8005834:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <_printf_float+0x2f0>)
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af19 	beq.w	8005676 <_printf_float+0xc2>
 8005844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005848:	4313      	orrs	r3, r2
 800584a:	d102      	bne.n	8005852 <_printf_float+0x29e>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d5d8      	bpl.n	8005804 <_printf_float+0x250>
 8005852:	ee18 3a10 	vmov	r3, s16
 8005856:	4652      	mov	r2, sl
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af09 	beq.w	8005676 <_printf_float+0xc2>
 8005864:	f04f 0900 	mov.w	r9, #0
 8005868:	f104 0a1a 	add.w	sl, r4, #26
 800586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586e:	425b      	negs	r3, r3
 8005870:	454b      	cmp	r3, r9
 8005872:	dc01      	bgt.n	8005878 <_printf_float+0x2c4>
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	e792      	b.n	800579e <_printf_float+0x1ea>
 8005878:	2301      	movs	r3, #1
 800587a:	4652      	mov	r2, sl
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f aef7 	beq.w	8005676 <_printf_float+0xc2>
 8005888:	f109 0901 	add.w	r9, r9, #1
 800588c:	e7ee      	b.n	800586c <_printf_float+0x2b8>
 800588e:	bf00      	nop
 8005890:	7fefffff 	.word	0x7fefffff
 8005894:	08009270 	.word	0x08009270
 8005898:	08009274 	.word	0x08009274
 800589c:	0800927c 	.word	0x0800927c
 80058a0:	08009278 	.word	0x08009278
 80058a4:	08009280 	.word	0x08009280
 80058a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bfa8      	it	ge
 80058b0:	461a      	movge	r2, r3
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	4691      	mov	r9, r2
 80058b6:	dc37      	bgt.n	8005928 <_printf_float+0x374>
 80058b8:	f04f 0b00 	mov.w	fp, #0
 80058bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c0:	f104 021a 	add.w	r2, r4, #26
 80058c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	eba3 0309 	sub.w	r3, r3, r9
 80058cc:	455b      	cmp	r3, fp
 80058ce:	dc33      	bgt.n	8005938 <_printf_float+0x384>
 80058d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d4:	429a      	cmp	r2, r3
 80058d6:	db3b      	blt.n	8005950 <_printf_float+0x39c>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d438      	bmi.n	8005950 <_printf_float+0x39c>
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	9a05      	ldr	r2, [sp, #20]
 80058e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e4:	1a9a      	subs	r2, r3, r2
 80058e6:	eba3 0901 	sub.w	r9, r3, r1
 80058ea:	4591      	cmp	r9, r2
 80058ec:	bfa8      	it	ge
 80058ee:	4691      	movge	r9, r2
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	dc35      	bgt.n	8005962 <_printf_float+0x3ae>
 80058f6:	f04f 0800 	mov.w	r8, #0
 80058fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fe:	f104 0a1a 	add.w	sl, r4, #26
 8005902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	eba3 0309 	sub.w	r3, r3, r9
 800590c:	4543      	cmp	r3, r8
 800590e:	f77f af79 	ble.w	8005804 <_printf_float+0x250>
 8005912:	2301      	movs	r3, #1
 8005914:	4652      	mov	r2, sl
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f aeaa 	beq.w	8005676 <_printf_float+0xc2>
 8005922:	f108 0801 	add.w	r8, r8, #1
 8005926:	e7ec      	b.n	8005902 <_printf_float+0x34e>
 8005928:	4613      	mov	r3, r2
 800592a:	4631      	mov	r1, r6
 800592c:	4642      	mov	r2, r8
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d1c0      	bne.n	80058b8 <_printf_float+0x304>
 8005936:	e69e      	b.n	8005676 <_printf_float+0xc2>
 8005938:	2301      	movs	r3, #1
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	9205      	str	r2, [sp, #20]
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae97 	beq.w	8005676 <_printf_float+0xc2>
 8005948:	9a05      	ldr	r2, [sp, #20]
 800594a:	f10b 0b01 	add.w	fp, fp, #1
 800594e:	e7b9      	b.n	80058c4 <_printf_float+0x310>
 8005950:	ee18 3a10 	vmov	r3, s16
 8005954:	4652      	mov	r2, sl
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	d1be      	bne.n	80058de <_printf_float+0x32a>
 8005960:	e689      	b.n	8005676 <_printf_float+0xc2>
 8005962:	9a05      	ldr	r2, [sp, #20]
 8005964:	464b      	mov	r3, r9
 8005966:	4442      	add	r2, r8
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	d1c1      	bne.n	80058f6 <_printf_float+0x342>
 8005972:	e680      	b.n	8005676 <_printf_float+0xc2>
 8005974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005976:	2a01      	cmp	r2, #1
 8005978:	dc01      	bgt.n	800597e <_printf_float+0x3ca>
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d538      	bpl.n	80059f0 <_printf_float+0x43c>
 800597e:	2301      	movs	r3, #1
 8005980:	4642      	mov	r2, r8
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae74 	beq.w	8005676 <_printf_float+0xc2>
 800598e:	ee18 3a10 	vmov	r3, s16
 8005992:	4652      	mov	r2, sl
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f ae6b 	beq.w	8005676 <_printf_float+0xc2>
 80059a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	f7fb f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ac:	b9d8      	cbnz	r0, 80059e6 <_printf_float+0x432>
 80059ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b0:	f108 0201 	add.w	r2, r8, #1
 80059b4:	3b01      	subs	r3, #1
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d10e      	bne.n	80059de <_printf_float+0x42a>
 80059c0:	e659      	b.n	8005676 <_printf_float+0xc2>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae52 	beq.w	8005676 <_printf_float+0xc2>
 80059d2:	f108 0801 	add.w	r8, r8, #1
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	4543      	cmp	r3, r8
 80059dc:	dcf1      	bgt.n	80059c2 <_printf_float+0x40e>
 80059de:	464b      	mov	r3, r9
 80059e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059e4:	e6dc      	b.n	80057a0 <_printf_float+0x1ec>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	f104 0a1a 	add.w	sl, r4, #26
 80059ee:	e7f2      	b.n	80059d6 <_printf_float+0x422>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4642      	mov	r2, r8
 80059f4:	e7df      	b.n	80059b6 <_printf_float+0x402>
 80059f6:	2301      	movs	r3, #1
 80059f8:	464a      	mov	r2, r9
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae38 	beq.w	8005676 <_printf_float+0xc2>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a0e:	1a5b      	subs	r3, r3, r1
 8005a10:	4543      	cmp	r3, r8
 8005a12:	dcf0      	bgt.n	80059f6 <_printf_float+0x442>
 8005a14:	e6fa      	b.n	800580c <_printf_float+0x258>
 8005a16:	f04f 0800 	mov.w	r8, #0
 8005a1a:	f104 0919 	add.w	r9, r4, #25
 8005a1e:	e7f4      	b.n	8005a0a <_printf_float+0x456>

08005a20 <_printf_common>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	690b      	ldr	r3, [r1, #16]
 8005a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bfb8      	it	lt
 8005a34:	4613      	movlt	r3, r2
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b10a      	cbz	r2, 8005a46 <_printf_common+0x26>
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	6833      	ldrmi	r3, [r6, #0]
 8005a4e:	3302      	addmi	r3, #2
 8005a50:	6033      	strmi	r3, [r6, #0]
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	f015 0506 	ands.w	r5, r5, #6
 8005a58:	d106      	bne.n	8005a68 <_printf_common+0x48>
 8005a5a:	f104 0a19 	add.w	sl, r4, #25
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dc26      	bgt.n	8005ab6 <_printf_common+0x96>
 8005a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a6c:	1e13      	subs	r3, r2, #0
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	0692      	lsls	r2, r2, #26
 8005a76:	d42b      	bmi.n	8005ad0 <_printf_common+0xb0>
 8005a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d01e      	beq.n	8005ac4 <_printf_common+0xa4>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	68e5      	ldr	r5, [r4, #12]
 8005a8a:	6832      	ldr	r2, [r6, #0]
 8005a8c:	f003 0306 	and.w	r3, r3, #6
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	bf08      	it	eq
 8005a94:	1aad      	subeq	r5, r5, r2
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	bf0c      	ite	eq
 8005a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa0:	2500      	movne	r5, #0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfc4      	itt	gt
 8005aa6:	1a9b      	subgt	r3, r3, r2
 8005aa8:	18ed      	addgt	r5, r5, r3
 8005aaa:	2600      	movs	r6, #0
 8005aac:	341a      	adds	r4, #26
 8005aae:	42b5      	cmp	r5, r6
 8005ab0:	d11a      	bne.n	8005ae8 <_printf_common+0xc8>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e008      	b.n	8005ac8 <_printf_common+0xa8>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4652      	mov	r2, sl
 8005aba:	4649      	mov	r1, r9
 8005abc:	4638      	mov	r0, r7
 8005abe:	47c0      	blx	r8
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d103      	bne.n	8005acc <_printf_common+0xac>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005acc:	3501      	adds	r5, #1
 8005ace:	e7c6      	b.n	8005a5e <_printf_common+0x3e>
 8005ad0:	18e1      	adds	r1, r4, r3
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	2030      	movs	r0, #48	; 0x30
 8005ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ada:	4422      	add	r2, r4
 8005adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	e7c7      	b.n	8005a78 <_printf_common+0x58>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4622      	mov	r2, r4
 8005aec:	4649      	mov	r1, r9
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c0      	blx	r8
 8005af2:	3001      	adds	r0, #1
 8005af4:	d0e6      	beq.n	8005ac4 <_printf_common+0xa4>
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7d9      	b.n	8005aae <_printf_common+0x8e>
	...

08005afc <_printf_i>:
 8005afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	7e0f      	ldrb	r7, [r1, #24]
 8005b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b04:	2f78      	cmp	r7, #120	; 0x78
 8005b06:	4691      	mov	r9, r2
 8005b08:	4680      	mov	r8, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	469a      	mov	sl, r3
 8005b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b12:	d807      	bhi.n	8005b24 <_printf_i+0x28>
 8005b14:	2f62      	cmp	r7, #98	; 0x62
 8005b16:	d80a      	bhi.n	8005b2e <_printf_i+0x32>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	f000 80d8 	beq.w	8005cce <_printf_i+0x1d2>
 8005b1e:	2f58      	cmp	r7, #88	; 0x58
 8005b20:	f000 80a3 	beq.w	8005c6a <_printf_i+0x16e>
 8005b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b2c:	e03a      	b.n	8005ba4 <_printf_i+0xa8>
 8005b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b32:	2b15      	cmp	r3, #21
 8005b34:	d8f6      	bhi.n	8005b24 <_printf_i+0x28>
 8005b36:	a101      	add	r1, pc, #4	; (adr r1, 8005b3c <_printf_i+0x40>)
 8005b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b3c:	08005b95 	.word	0x08005b95
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005b25 	.word	0x08005b25
 8005b48:	08005b25 	.word	0x08005b25
 8005b4c:	08005b25 	.word	0x08005b25
 8005b50:	08005b25 	.word	0x08005b25
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005b25 	.word	0x08005b25
 8005b5c:	08005b25 	.word	0x08005b25
 8005b60:	08005b25 	.word	0x08005b25
 8005b64:	08005b25 	.word	0x08005b25
 8005b68:	08005cb5 	.word	0x08005cb5
 8005b6c:	08005bd9 	.word	0x08005bd9
 8005b70:	08005c97 	.word	0x08005c97
 8005b74:	08005b25 	.word	0x08005b25
 8005b78:	08005b25 	.word	0x08005b25
 8005b7c:	08005cd7 	.word	0x08005cd7
 8005b80:	08005b25 	.word	0x08005b25
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b25 	.word	0x08005b25
 8005b8c:	08005b25 	.word	0x08005b25
 8005b90:	08005c9f 	.word	0x08005c9f
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	1d1a      	adds	r2, r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	602a      	str	r2, [r5, #0]
 8005b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0a3      	b.n	8005cf0 <_printf_i+0x1f4>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	0606      	lsls	r6, r0, #24
 8005bae:	f101 0304 	add.w	r3, r1, #4
 8005bb2:	d50a      	bpl.n	8005bca <_printf_i+0xce>
 8005bb4:	680e      	ldr	r6, [r1, #0]
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	da03      	bge.n	8005bc4 <_printf_i+0xc8>
 8005bbc:	232d      	movs	r3, #45	; 0x2d
 8005bbe:	4276      	negs	r6, r6
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	485e      	ldr	r0, [pc, #376]	; (8005d40 <_printf_i+0x244>)
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	e019      	b.n	8005bfe <_printf_i+0x102>
 8005bca:	680e      	ldr	r6, [r1, #0]
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bd2:	bf18      	it	ne
 8005bd4:	b236      	sxthne	r6, r6
 8005bd6:	e7ef      	b.n	8005bb8 <_printf_i+0xbc>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	1d19      	adds	r1, r3, #4
 8005bde:	6029      	str	r1, [r5, #0]
 8005be0:	0601      	lsls	r1, r0, #24
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0xec>
 8005be4:	681e      	ldr	r6, [r3, #0]
 8005be6:	e002      	b.n	8005bee <_printf_i+0xf2>
 8005be8:	0646      	lsls	r6, r0, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0xe8>
 8005bec:	881e      	ldrh	r6, [r3, #0]
 8005bee:	4854      	ldr	r0, [pc, #336]	; (8005d40 <_printf_i+0x244>)
 8005bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2308      	moveq	r3, #8
 8005bf6:	230a      	movne	r3, #10
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bfe:	6865      	ldr	r5, [r4, #4]
 8005c00:	60a5      	str	r5, [r4, #8]
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	bfa2      	ittt	ge
 8005c06:	6821      	ldrge	r1, [r4, #0]
 8005c08:	f021 0104 	bicge.w	r1, r1, #4
 8005c0c:	6021      	strge	r1, [r4, #0]
 8005c0e:	b90e      	cbnz	r6, 8005c14 <_printf_i+0x118>
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	d04d      	beq.n	8005cb0 <_printf_i+0x1b4>
 8005c14:	4615      	mov	r5, r2
 8005c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c1e:	5dc7      	ldrb	r7, [r0, r7]
 8005c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c24:	4637      	mov	r7, r6
 8005c26:	42bb      	cmp	r3, r7
 8005c28:	460e      	mov	r6, r1
 8005c2a:	d9f4      	bls.n	8005c16 <_printf_i+0x11a>
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d10b      	bne.n	8005c48 <_printf_i+0x14c>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	07de      	lsls	r6, r3, #31
 8005c34:	d508      	bpl.n	8005c48 <_printf_i+0x14c>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	6861      	ldr	r1, [r4, #4]
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	bfde      	ittt	le
 8005c3e:	2330      	movle	r3, #48	; 0x30
 8005c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c48:	1b52      	subs	r2, r2, r5
 8005c4a:	6122      	str	r2, [r4, #16]
 8005c4c:	f8cd a000 	str.w	sl, [sp]
 8005c50:	464b      	mov	r3, r9
 8005c52:	aa03      	add	r2, sp, #12
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fee2 	bl	8005a20 <_printf_common>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d14c      	bne.n	8005cfa <_printf_i+0x1fe>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	b004      	add	sp, #16
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6a:	4835      	ldr	r0, [pc, #212]	; (8005d40 <_printf_i+0x244>)
 8005c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c70:	6829      	ldr	r1, [r5, #0]
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c78:	6029      	str	r1, [r5, #0]
 8005c7a:	061d      	lsls	r5, r3, #24
 8005c7c:	d514      	bpl.n	8005ca8 <_printf_i+0x1ac>
 8005c7e:	07df      	lsls	r7, r3, #31
 8005c80:	bf44      	itt	mi
 8005c82:	f043 0320 	orrmi.w	r3, r3, #32
 8005c86:	6023      	strmi	r3, [r4, #0]
 8005c88:	b91e      	cbnz	r6, 8005c92 <_printf_i+0x196>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	f023 0320 	bic.w	r3, r3, #32
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	2310      	movs	r3, #16
 8005c94:	e7b0      	b.n	8005bf8 <_printf_i+0xfc>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f043 0320 	orr.w	r3, r3, #32
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	2378      	movs	r3, #120	; 0x78
 8005ca0:	4828      	ldr	r0, [pc, #160]	; (8005d44 <_printf_i+0x248>)
 8005ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca6:	e7e3      	b.n	8005c70 <_printf_i+0x174>
 8005ca8:	0659      	lsls	r1, r3, #25
 8005caa:	bf48      	it	mi
 8005cac:	b2b6      	uxthmi	r6, r6
 8005cae:	e7e6      	b.n	8005c7e <_printf_i+0x182>
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	e7bb      	b.n	8005c2c <_printf_i+0x130>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	6826      	ldr	r6, [r4, #0]
 8005cb8:	6961      	ldr	r1, [r4, #20]
 8005cba:	1d18      	adds	r0, r3, #4
 8005cbc:	6028      	str	r0, [r5, #0]
 8005cbe:	0635      	lsls	r5, r6, #24
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_i+0x1cc>
 8005cc4:	6019      	str	r1, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <_printf_i+0x1d2>
 8005cc8:	0670      	lsls	r0, r6, #25
 8005cca:	d5fb      	bpl.n	8005cc4 <_printf_i+0x1c8>
 8005ccc:	8019      	strh	r1, [r3, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	4615      	mov	r5, r2
 8005cd4:	e7ba      	b.n	8005c4c <_printf_i+0x150>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	1d1a      	adds	r2, r3, #4
 8005cda:	602a      	str	r2, [r5, #0]
 8005cdc:	681d      	ldr	r5, [r3, #0]
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7fa fa84 	bl	80001f0 <memchr>
 8005ce8:	b108      	cbz	r0, 8005cee <_printf_i+0x1f2>
 8005cea:	1b40      	subs	r0, r0, r5
 8005cec:	6060      	str	r0, [r4, #4]
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	e7a8      	b.n	8005c4c <_printf_i+0x150>
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d0ab      	beq.n	8005c60 <_printf_i+0x164>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	079b      	lsls	r3, r3, #30
 8005d0c:	d413      	bmi.n	8005d36 <_printf_i+0x23a>
 8005d0e:	68e0      	ldr	r0, [r4, #12]
 8005d10:	9b03      	ldr	r3, [sp, #12]
 8005d12:	4298      	cmp	r0, r3
 8005d14:	bfb8      	it	lt
 8005d16:	4618      	movlt	r0, r3
 8005d18:	e7a4      	b.n	8005c64 <_printf_i+0x168>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4640      	mov	r0, r8
 8005d22:	47d0      	blx	sl
 8005d24:	3001      	adds	r0, #1
 8005d26:	d09b      	beq.n	8005c60 <_printf_i+0x164>
 8005d28:	3501      	adds	r5, #1
 8005d2a:	68e3      	ldr	r3, [r4, #12]
 8005d2c:	9903      	ldr	r1, [sp, #12]
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	dcf2      	bgt.n	8005d1a <_printf_i+0x21e>
 8005d34:	e7eb      	b.n	8005d0e <_printf_i+0x212>
 8005d36:	2500      	movs	r5, #0
 8005d38:	f104 0619 	add.w	r6, r4, #25
 8005d3c:	e7f5      	b.n	8005d2a <_printf_i+0x22e>
 8005d3e:	bf00      	nop
 8005d40:	08009282 	.word	0x08009282
 8005d44:	08009293 	.word	0x08009293

08005d48 <siprintf>:
 8005d48:	b40e      	push	{r1, r2, r3}
 8005d4a:	b500      	push	{lr}
 8005d4c:	b09c      	sub	sp, #112	; 0x70
 8005d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d50:	9002      	str	r0, [sp, #8]
 8005d52:	9006      	str	r0, [sp, #24]
 8005d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d58:	4809      	ldr	r0, [pc, #36]	; (8005d80 <siprintf+0x38>)
 8005d5a:	9107      	str	r1, [sp, #28]
 8005d5c:	9104      	str	r1, [sp, #16]
 8005d5e:	4909      	ldr	r1, [pc, #36]	; (8005d84 <siprintf+0x3c>)
 8005d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d64:	9105      	str	r1, [sp, #20]
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	a902      	add	r1, sp, #8
 8005d6c:	f001 fc02 	bl	8007574 <_svfiprintf_r>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	b01c      	add	sp, #112	; 0x70
 8005d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d7c:	b003      	add	sp, #12
 8005d7e:	4770      	bx	lr
 8005d80:	20000014 	.word	0x20000014
 8005d84:	ffff0208 	.word	0xffff0208

08005d88 <_strtol_l.constprop.0>:
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8e:	d001      	beq.n	8005d94 <_strtol_l.constprop.0+0xc>
 8005d90:	2b24      	cmp	r3, #36	; 0x24
 8005d92:	d906      	bls.n	8005da2 <_strtol_l.constprop.0+0x1a>
 8005d94:	f7ff fb3c 	bl	8005410 <__errno>
 8005d98:	2316      	movs	r3, #22
 8005d9a:	6003      	str	r3, [r0, #0]
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e88 <_strtol_l.constprop.0+0x100>
 8005da6:	460d      	mov	r5, r1
 8005da8:	462e      	mov	r6, r5
 8005daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005db2:	f017 0708 	ands.w	r7, r7, #8
 8005db6:	d1f7      	bne.n	8005da8 <_strtol_l.constprop.0+0x20>
 8005db8:	2c2d      	cmp	r4, #45	; 0x2d
 8005dba:	d132      	bne.n	8005e22 <_strtol_l.constprop.0+0x9a>
 8005dbc:	782c      	ldrb	r4, [r5, #0]
 8005dbe:	2701      	movs	r7, #1
 8005dc0:	1cb5      	adds	r5, r6, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05b      	beq.n	8005e7e <_strtol_l.constprop.0+0xf6>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d109      	bne.n	8005dde <_strtol_l.constprop.0+0x56>
 8005dca:	2c30      	cmp	r4, #48	; 0x30
 8005dcc:	d107      	bne.n	8005dde <_strtol_l.constprop.0+0x56>
 8005dce:	782c      	ldrb	r4, [r5, #0]
 8005dd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005dd4:	2c58      	cmp	r4, #88	; 0x58
 8005dd6:	d14d      	bne.n	8005e74 <_strtol_l.constprop.0+0xec>
 8005dd8:	786c      	ldrb	r4, [r5, #1]
 8005dda:	2310      	movs	r3, #16
 8005ddc:	3502      	adds	r5, #2
 8005dde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005de6:	f04f 0c00 	mov.w	ip, #0
 8005dea:	fbb8 f9f3 	udiv	r9, r8, r3
 8005dee:	4666      	mov	r6, ip
 8005df0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005df4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005df8:	f1be 0f09 	cmp.w	lr, #9
 8005dfc:	d816      	bhi.n	8005e2c <_strtol_l.constprop.0+0xa4>
 8005dfe:	4674      	mov	r4, lr
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	dd24      	ble.n	8005e4e <_strtol_l.constprop.0+0xc6>
 8005e04:	f1bc 0f00 	cmp.w	ip, #0
 8005e08:	db1e      	blt.n	8005e48 <_strtol_l.constprop.0+0xc0>
 8005e0a:	45b1      	cmp	r9, r6
 8005e0c:	d31c      	bcc.n	8005e48 <_strtol_l.constprop.0+0xc0>
 8005e0e:	d101      	bne.n	8005e14 <_strtol_l.constprop.0+0x8c>
 8005e10:	45a2      	cmp	sl, r4
 8005e12:	db19      	blt.n	8005e48 <_strtol_l.constprop.0+0xc0>
 8005e14:	fb06 4603 	mla	r6, r6, r3, r4
 8005e18:	f04f 0c01 	mov.w	ip, #1
 8005e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e20:	e7e8      	b.n	8005df4 <_strtol_l.constprop.0+0x6c>
 8005e22:	2c2b      	cmp	r4, #43	; 0x2b
 8005e24:	bf04      	itt	eq
 8005e26:	782c      	ldrbeq	r4, [r5, #0]
 8005e28:	1cb5      	addeq	r5, r6, #2
 8005e2a:	e7ca      	b.n	8005dc2 <_strtol_l.constprop.0+0x3a>
 8005e2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005e30:	f1be 0f19 	cmp.w	lr, #25
 8005e34:	d801      	bhi.n	8005e3a <_strtol_l.constprop.0+0xb2>
 8005e36:	3c37      	subs	r4, #55	; 0x37
 8005e38:	e7e2      	b.n	8005e00 <_strtol_l.constprop.0+0x78>
 8005e3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005e3e:	f1be 0f19 	cmp.w	lr, #25
 8005e42:	d804      	bhi.n	8005e4e <_strtol_l.constprop.0+0xc6>
 8005e44:	3c57      	subs	r4, #87	; 0x57
 8005e46:	e7db      	b.n	8005e00 <_strtol_l.constprop.0+0x78>
 8005e48:	f04f 3cff 	mov.w	ip, #4294967295
 8005e4c:	e7e6      	b.n	8005e1c <_strtol_l.constprop.0+0x94>
 8005e4e:	f1bc 0f00 	cmp.w	ip, #0
 8005e52:	da05      	bge.n	8005e60 <_strtol_l.constprop.0+0xd8>
 8005e54:	2322      	movs	r3, #34	; 0x22
 8005e56:	6003      	str	r3, [r0, #0]
 8005e58:	4646      	mov	r6, r8
 8005e5a:	b942      	cbnz	r2, 8005e6e <_strtol_l.constprop.0+0xe6>
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	e79e      	b.n	8005d9e <_strtol_l.constprop.0+0x16>
 8005e60:	b107      	cbz	r7, 8005e64 <_strtol_l.constprop.0+0xdc>
 8005e62:	4276      	negs	r6, r6
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	d0f9      	beq.n	8005e5c <_strtol_l.constprop.0+0xd4>
 8005e68:	f1bc 0f00 	cmp.w	ip, #0
 8005e6c:	d000      	beq.n	8005e70 <_strtol_l.constprop.0+0xe8>
 8005e6e:	1e69      	subs	r1, r5, #1
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	e7f3      	b.n	8005e5c <_strtol_l.constprop.0+0xd4>
 8005e74:	2430      	movs	r4, #48	; 0x30
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1b1      	bne.n	8005dde <_strtol_l.constprop.0+0x56>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	e7af      	b.n	8005dde <_strtol_l.constprop.0+0x56>
 8005e7e:	2c30      	cmp	r4, #48	; 0x30
 8005e80:	d0a5      	beq.n	8005dce <_strtol_l.constprop.0+0x46>
 8005e82:	230a      	movs	r3, #10
 8005e84:	e7ab      	b.n	8005dde <_strtol_l.constprop.0+0x56>
 8005e86:	bf00      	nop
 8005e88:	080092a5 	.word	0x080092a5

08005e8c <strtol>:
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	460a      	mov	r2, r1
 8005e90:	4601      	mov	r1, r0
 8005e92:	4802      	ldr	r0, [pc, #8]	; (8005e9c <strtol+0x10>)
 8005e94:	6800      	ldr	r0, [r0, #0]
 8005e96:	f7ff bf77 	b.w	8005d88 <_strtol_l.constprop.0>
 8005e9a:	bf00      	nop
 8005e9c:	20000014 	.word	0x20000014

08005ea0 <quorem>:
 8005ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	6903      	ldr	r3, [r0, #16]
 8005ea6:	690c      	ldr	r4, [r1, #16]
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	4607      	mov	r7, r0
 8005eac:	f2c0 8081 	blt.w	8005fb2 <quorem+0x112>
 8005eb0:	3c01      	subs	r4, #1
 8005eb2:	f101 0814 	add.w	r8, r1, #20
 8005eb6:	f100 0514 	add.w	r5, r0, #20
 8005eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ed0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ed8:	d331      	bcc.n	8005f3e <quorem+0x9e>
 8005eda:	f04f 0e00 	mov.w	lr, #0
 8005ede:	4640      	mov	r0, r8
 8005ee0:	46ac      	mov	ip, r5
 8005ee2:	46f2      	mov	sl, lr
 8005ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ee8:	b293      	uxth	r3, r2
 8005eea:	fb06 e303 	mla	r3, r6, r3, lr
 8005eee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef8:	f8dc a000 	ldr.w	sl, [ip]
 8005efc:	0c12      	lsrs	r2, r2, #16
 8005efe:	fa13 f38a 	uxtah	r3, r3, sl
 8005f02:	fb06 e202 	mla	r2, r6, r2, lr
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f18:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f1c:	4581      	cmp	r9, r0
 8005f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f22:	f84c 3b04 	str.w	r3, [ip], #4
 8005f26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f2a:	d2db      	bcs.n	8005ee4 <quorem+0x44>
 8005f2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f30:	b92b      	cbnz	r3, 8005f3e <quorem+0x9e>
 8005f32:	9b01      	ldr	r3, [sp, #4]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	429d      	cmp	r5, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	d32e      	bcc.n	8005f9a <quorem+0xfa>
 8005f3c:	613c      	str	r4, [r7, #16]
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f001 f8c4 	bl	80070cc <__mcmp>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	db24      	blt.n	8005f92 <quorem+0xf2>
 8005f48:	3601      	adds	r6, #1
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f54:	f8d0 e000 	ldr.w	lr, [r0]
 8005f58:	b293      	uxth	r3, r2
 8005f5a:	ebac 0303 	sub.w	r3, ip, r3
 8005f5e:	0c12      	lsrs	r2, r2, #16
 8005f60:	fa13 f38e 	uxtah	r3, r3, lr
 8005f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f72:	45c1      	cmp	r9, r8
 8005f74:	f840 3b04 	str.w	r3, [r0], #4
 8005f78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f7c:	d2e8      	bcs.n	8005f50 <quorem+0xb0>
 8005f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f86:	b922      	cbnz	r2, 8005f92 <quorem+0xf2>
 8005f88:	3b04      	subs	r3, #4
 8005f8a:	429d      	cmp	r5, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	d30a      	bcc.n	8005fa6 <quorem+0x106>
 8005f90:	613c      	str	r4, [r7, #16]
 8005f92:	4630      	mov	r0, r6
 8005f94:	b003      	add	sp, #12
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d1cc      	bne.n	8005f3c <quorem+0x9c>
 8005fa2:	3c01      	subs	r4, #1
 8005fa4:	e7c7      	b.n	8005f36 <quorem+0x96>
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	d1f0      	bne.n	8005f90 <quorem+0xf0>
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	e7eb      	b.n	8005f8a <quorem+0xea>
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e7ee      	b.n	8005f94 <quorem+0xf4>
	...

08005fb8 <_dtoa_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	ed2d 8b04 	vpush	{d8-d9}
 8005fc0:	ec57 6b10 	vmov	r6, r7, d0
 8005fc4:	b093      	sub	sp, #76	; 0x4c
 8005fc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fcc:	9106      	str	r1, [sp, #24]
 8005fce:	ee10 aa10 	vmov	sl, s0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd8:	46bb      	mov	fp, r7
 8005fda:	b975      	cbnz	r5, 8005ffa <_dtoa_r+0x42>
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f000 fddd 	bl	8006b9c <malloc>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6260      	str	r0, [r4, #36]	; 0x24
 8005fe6:	b920      	cbnz	r0, 8005ff2 <_dtoa_r+0x3a>
 8005fe8:	4ba7      	ldr	r3, [pc, #668]	; (8006288 <_dtoa_r+0x2d0>)
 8005fea:	21ea      	movs	r1, #234	; 0xea
 8005fec:	48a7      	ldr	r0, [pc, #668]	; (800628c <_dtoa_r+0x2d4>)
 8005fee:	f001 fbd1 	bl	8007794 <__assert_func>
 8005ff2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ff6:	6005      	str	r5, [r0, #0]
 8005ff8:	60c5      	str	r5, [r0, #12]
 8005ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	b151      	cbz	r1, 8006016 <_dtoa_r+0x5e>
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	604a      	str	r2, [r1, #4]
 8006004:	2301      	movs	r3, #1
 8006006:	4093      	lsls	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
 800600a:	4620      	mov	r0, r4
 800600c:	f000 fe1c 	bl	8006c48 <_Bfree>
 8006010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	1e3b      	subs	r3, r7, #0
 8006018:	bfaa      	itet	ge
 800601a:	2300      	movge	r3, #0
 800601c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006020:	f8c8 3000 	strge.w	r3, [r8]
 8006024:	4b9a      	ldr	r3, [pc, #616]	; (8006290 <_dtoa_r+0x2d8>)
 8006026:	bfbc      	itt	lt
 8006028:	2201      	movlt	r2, #1
 800602a:	f8c8 2000 	strlt.w	r2, [r8]
 800602e:	ea33 030b 	bics.w	r3, r3, fp
 8006032:	d11b      	bne.n	800606c <_dtoa_r+0xb4>
 8006034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006036:	f242 730f 	movw	r3, #9999	; 0x270f
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006040:	4333      	orrs	r3, r6
 8006042:	f000 8592 	beq.w	8006b6a <_dtoa_r+0xbb2>
 8006046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006048:	b963      	cbnz	r3, 8006064 <_dtoa_r+0xac>
 800604a:	4b92      	ldr	r3, [pc, #584]	; (8006294 <_dtoa_r+0x2dc>)
 800604c:	e022      	b.n	8006094 <_dtoa_r+0xdc>
 800604e:	4b92      	ldr	r3, [pc, #584]	; (8006298 <_dtoa_r+0x2e0>)
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	3308      	adds	r3, #8
 8006054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	9801      	ldr	r0, [sp, #4]
 800605a:	b013      	add	sp, #76	; 0x4c
 800605c:	ecbd 8b04 	vpop	{d8-d9}
 8006060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006064:	4b8b      	ldr	r3, [pc, #556]	; (8006294 <_dtoa_r+0x2dc>)
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	3303      	adds	r3, #3
 800606a:	e7f3      	b.n	8006054 <_dtoa_r+0x9c>
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	4650      	mov	r0, sl
 8006072:	4659      	mov	r1, fp
 8006074:	f7fa fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8006078:	ec4b ab19 	vmov	d9, sl, fp
 800607c:	4680      	mov	r8, r0
 800607e:	b158      	cbz	r0, 8006098 <_dtoa_r+0xe0>
 8006080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006082:	2301      	movs	r3, #1
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 856b 	beq.w	8006b64 <_dtoa_r+0xbac>
 800608e:	4883      	ldr	r0, [pc, #524]	; (800629c <_dtoa_r+0x2e4>)
 8006090:	6018      	str	r0, [r3, #0]
 8006092:	1e43      	subs	r3, r0, #1
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	e7df      	b.n	8006058 <_dtoa_r+0xa0>
 8006098:	ec4b ab10 	vmov	d0, sl, fp
 800609c:	aa10      	add	r2, sp, #64	; 0x40
 800609e:	a911      	add	r1, sp, #68	; 0x44
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 f8b9 	bl	8007218 <__d2b>
 80060a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80060aa:	ee08 0a10 	vmov	s16, r0
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	f000 8084 	beq.w	80061bc <_dtoa_r+0x204>
 80060b4:	ee19 3a90 	vmov	r3, s19
 80060b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80060c0:	4656      	mov	r6, sl
 80060c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80060c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80060ce:	4b74      	ldr	r3, [pc, #464]	; (80062a0 <_dtoa_r+0x2e8>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	4630      	mov	r0, r6
 80060d4:	4639      	mov	r1, r7
 80060d6:	f7fa f8df 	bl	8000298 <__aeabi_dsub>
 80060da:	a365      	add	r3, pc, #404	; (adr r3, 8006270 <_dtoa_r+0x2b8>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f7fa fa92 	bl	8000608 <__aeabi_dmul>
 80060e4:	a364      	add	r3, pc, #400	; (adr r3, 8006278 <_dtoa_r+0x2c0>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa f8d7 	bl	800029c <__adddf3>
 80060ee:	4606      	mov	r6, r0
 80060f0:	4628      	mov	r0, r5
 80060f2:	460f      	mov	r7, r1
 80060f4:	f7fa fa1e 	bl	8000534 <__aeabi_i2d>
 80060f8:	a361      	add	r3, pc, #388	; (adr r3, 8006280 <_dtoa_r+0x2c8>)
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f7fa fa83 	bl	8000608 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	f7fa f8c7 	bl	800029c <__adddf3>
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	f7fa fd29 	bl	8000b68 <__aeabi_d2iz>
 8006116:	2200      	movs	r2, #0
 8006118:	9000      	str	r0, [sp, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa fce4 	bl	8000aec <__aeabi_dcmplt>
 8006124:	b150      	cbz	r0, 800613c <_dtoa_r+0x184>
 8006126:	9800      	ldr	r0, [sp, #0]
 8006128:	f7fa fa04 	bl	8000534 <__aeabi_i2d>
 800612c:	4632      	mov	r2, r6
 800612e:	463b      	mov	r3, r7
 8006130:	f7fa fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006134:	b910      	cbnz	r0, 800613c <_dtoa_r+0x184>
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	2b16      	cmp	r3, #22
 8006140:	d85a      	bhi.n	80061f8 <_dtoa_r+0x240>
 8006142:	9a00      	ldr	r2, [sp, #0]
 8006144:	4b57      	ldr	r3, [pc, #348]	; (80062a4 <_dtoa_r+0x2ec>)
 8006146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	ec51 0b19 	vmov	r0, r1, d9
 8006152:	f7fa fccb 	bl	8000aec <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	d050      	beq.n	80061fc <_dtoa_r+0x244>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	930b      	str	r3, [sp, #44]	; 0x2c
 8006164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006166:	1b5d      	subs	r5, r3, r5
 8006168:	1e6b      	subs	r3, r5, #1
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	bf45      	ittet	mi
 800616e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006172:	9304      	strmi	r3, [sp, #16]
 8006174:	2300      	movpl	r3, #0
 8006176:	2300      	movmi	r3, #0
 8006178:	bf4c      	ite	mi
 800617a:	9305      	strmi	r3, [sp, #20]
 800617c:	9304      	strpl	r3, [sp, #16]
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	db3d      	blt.n	8006200 <_dtoa_r+0x248>
 8006184:	9b05      	ldr	r3, [sp, #20]
 8006186:	9a00      	ldr	r2, [sp, #0]
 8006188:	920a      	str	r2, [sp, #40]	; 0x28
 800618a:	4413      	add	r3, r2
 800618c:	9305      	str	r3, [sp, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9307      	str	r3, [sp, #28]
 8006192:	9b06      	ldr	r3, [sp, #24]
 8006194:	2b09      	cmp	r3, #9
 8006196:	f200 8089 	bhi.w	80062ac <_dtoa_r+0x2f4>
 800619a:	2b05      	cmp	r3, #5
 800619c:	bfc4      	itt	gt
 800619e:	3b04      	subgt	r3, #4
 80061a0:	9306      	strgt	r3, [sp, #24]
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	f1a3 0302 	sub.w	r3, r3, #2
 80061a8:	bfcc      	ite	gt
 80061aa:	2500      	movgt	r5, #0
 80061ac:	2501      	movle	r5, #1
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f200 8087 	bhi.w	80062c2 <_dtoa_r+0x30a>
 80061b4:	e8df f003 	tbb	[pc, r3]
 80061b8:	59383a2d 	.word	0x59383a2d
 80061bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061c0:	441d      	add	r5, r3
 80061c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	bfc1      	itttt	gt
 80061ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80061d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80061d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061da:	bfda      	itte	le
 80061dc:	f1c3 0320 	rsble	r3, r3, #32
 80061e0:	fa06 f003 	lslle.w	r0, r6, r3
 80061e4:	4318      	orrgt	r0, r3
 80061e6:	f7fa f995 	bl	8000514 <__aeabi_ui2d>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4606      	mov	r6, r0
 80061ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80061f2:	3d01      	subs	r5, #1
 80061f4:	930e      	str	r3, [sp, #56]	; 0x38
 80061f6:	e76a      	b.n	80060ce <_dtoa_r+0x116>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e7b2      	b.n	8006162 <_dtoa_r+0x1aa>
 80061fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80061fe:	e7b1      	b.n	8006164 <_dtoa_r+0x1ac>
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	9a00      	ldr	r2, [sp, #0]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	4253      	negs	r3, r2
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	2300      	movs	r3, #0
 800620e:	930a      	str	r3, [sp, #40]	; 0x28
 8006210:	e7bf      	b.n	8006192 <_dtoa_r+0x1da>
 8006212:	2300      	movs	r3, #0
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc55      	bgt.n	80062c8 <_dtoa_r+0x310>
 800621c:	2301      	movs	r3, #1
 800621e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006222:	461a      	mov	r2, r3
 8006224:	9209      	str	r2, [sp, #36]	; 0x24
 8006226:	e00c      	b.n	8006242 <_dtoa_r+0x28a>
 8006228:	2301      	movs	r3, #1
 800622a:	e7f3      	b.n	8006214 <_dtoa_r+0x25c>
 800622c:	2300      	movs	r3, #0
 800622e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006230:	9308      	str	r3, [sp, #32]
 8006232:	9b00      	ldr	r3, [sp, #0]
 8006234:	4413      	add	r3, r2
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	3301      	adds	r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	bfb8      	it	lt
 8006240:	2301      	movlt	r3, #1
 8006242:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006244:	2200      	movs	r2, #0
 8006246:	6042      	str	r2, [r0, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	f102 0614 	add.w	r6, r2, #20
 800624e:	429e      	cmp	r6, r3
 8006250:	6841      	ldr	r1, [r0, #4]
 8006252:	d93d      	bls.n	80062d0 <_dtoa_r+0x318>
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fcb7 	bl	8006bc8 <_Balloc>
 800625a:	9001      	str	r0, [sp, #4]
 800625c:	2800      	cmp	r0, #0
 800625e:	d13b      	bne.n	80062d8 <_dtoa_r+0x320>
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <_dtoa_r+0x2f0>)
 8006262:	4602      	mov	r2, r0
 8006264:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006268:	e6c0      	b.n	8005fec <_dtoa_r+0x34>
 800626a:	2301      	movs	r3, #1
 800626c:	e7df      	b.n	800622e <_dtoa_r+0x276>
 800626e:	bf00      	nop
 8006270:	636f4361 	.word	0x636f4361
 8006274:	3fd287a7 	.word	0x3fd287a7
 8006278:	8b60c8b3 	.word	0x8b60c8b3
 800627c:	3fc68a28 	.word	0x3fc68a28
 8006280:	509f79fb 	.word	0x509f79fb
 8006284:	3fd34413 	.word	0x3fd34413
 8006288:	080093b2 	.word	0x080093b2
 800628c:	080093c9 	.word	0x080093c9
 8006290:	7ff00000 	.word	0x7ff00000
 8006294:	080093ae 	.word	0x080093ae
 8006298:	080093a5 	.word	0x080093a5
 800629c:	08009281 	.word	0x08009281
 80062a0:	3ff80000 	.word	0x3ff80000
 80062a4:	080094c0 	.word	0x080094c0
 80062a8:	08009424 	.word	0x08009424
 80062ac:	2501      	movs	r5, #1
 80062ae:	2300      	movs	r3, #0
 80062b0:	9306      	str	r3, [sp, #24]
 80062b2:	9508      	str	r5, [sp, #32]
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	2312      	movs	r3, #18
 80062c0:	e7b0      	b.n	8006224 <_dtoa_r+0x26c>
 80062c2:	2301      	movs	r3, #1
 80062c4:	9308      	str	r3, [sp, #32]
 80062c6:	e7f5      	b.n	80062b4 <_dtoa_r+0x2fc>
 80062c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ce:	e7b8      	b.n	8006242 <_dtoa_r+0x28a>
 80062d0:	3101      	adds	r1, #1
 80062d2:	6041      	str	r1, [r0, #4]
 80062d4:	0052      	lsls	r2, r2, #1
 80062d6:	e7b8      	b.n	800624a <_dtoa_r+0x292>
 80062d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062da:	9a01      	ldr	r2, [sp, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	2b0e      	cmp	r3, #14
 80062e2:	f200 809d 	bhi.w	8006420 <_dtoa_r+0x468>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 809a 	beq.w	8006420 <_dtoa_r+0x468>
 80062ec:	9b00      	ldr	r3, [sp, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd32      	ble.n	8006358 <_dtoa_r+0x3a0>
 80062f2:	4ab7      	ldr	r2, [pc, #732]	; (80065d0 <_dtoa_r+0x618>)
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006300:	9b00      	ldr	r3, [sp, #0]
 8006302:	05d8      	lsls	r0, r3, #23
 8006304:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006308:	d516      	bpl.n	8006338 <_dtoa_r+0x380>
 800630a:	4bb2      	ldr	r3, [pc, #712]	; (80065d4 <_dtoa_r+0x61c>)
 800630c:	ec51 0b19 	vmov	r0, r1, d9
 8006310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006314:	f7fa faa2 	bl	800085c <__aeabi_ddiv>
 8006318:	f007 070f 	and.w	r7, r7, #15
 800631c:	4682      	mov	sl, r0
 800631e:	468b      	mov	fp, r1
 8006320:	2503      	movs	r5, #3
 8006322:	4eac      	ldr	r6, [pc, #688]	; (80065d4 <_dtoa_r+0x61c>)
 8006324:	b957      	cbnz	r7, 800633c <_dtoa_r+0x384>
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa fa95 	bl	800085c <__aeabi_ddiv>
 8006332:	4682      	mov	sl, r0
 8006334:	468b      	mov	fp, r1
 8006336:	e028      	b.n	800638a <_dtoa_r+0x3d2>
 8006338:	2502      	movs	r5, #2
 800633a:	e7f2      	b.n	8006322 <_dtoa_r+0x36a>
 800633c:	07f9      	lsls	r1, r7, #31
 800633e:	d508      	bpl.n	8006352 <_dtoa_r+0x39a>
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006348:	f7fa f95e 	bl	8000608 <__aeabi_dmul>
 800634c:	3501      	adds	r5, #1
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	107f      	asrs	r7, r7, #1
 8006354:	3608      	adds	r6, #8
 8006356:	e7e5      	b.n	8006324 <_dtoa_r+0x36c>
 8006358:	f000 809b 	beq.w	8006492 <_dtoa_r+0x4da>
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	4f9d      	ldr	r7, [pc, #628]	; (80065d4 <_dtoa_r+0x61c>)
 8006360:	425e      	negs	r6, r3
 8006362:	4b9b      	ldr	r3, [pc, #620]	; (80065d0 <_dtoa_r+0x618>)
 8006364:	f006 020f 	and.w	r2, r6, #15
 8006368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	ec51 0b19 	vmov	r0, r1, d9
 8006374:	f7fa f948 	bl	8000608 <__aeabi_dmul>
 8006378:	1136      	asrs	r6, r6, #4
 800637a:	4682      	mov	sl, r0
 800637c:	468b      	mov	fp, r1
 800637e:	2300      	movs	r3, #0
 8006380:	2502      	movs	r5, #2
 8006382:	2e00      	cmp	r6, #0
 8006384:	d17a      	bne.n	800647c <_dtoa_r+0x4c4>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d3      	bne.n	8006332 <_dtoa_r+0x37a>
 800638a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8082 	beq.w	8006496 <_dtoa_r+0x4de>
 8006392:	4b91      	ldr	r3, [pc, #580]	; (80065d8 <_dtoa_r+0x620>)
 8006394:	2200      	movs	r2, #0
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7fa fba7 	bl	8000aec <__aeabi_dcmplt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d079      	beq.n	8006496 <_dtoa_r+0x4de>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d076      	beq.n	8006496 <_dtoa_r+0x4de>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd36      	ble.n	800641c <_dtoa_r+0x464>
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	4650      	mov	r0, sl
 80063b2:	4659      	mov	r1, fp
 80063b4:	1e5f      	subs	r7, r3, #1
 80063b6:	2200      	movs	r2, #0
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <_dtoa_r+0x624>)
 80063ba:	f7fa f925 	bl	8000608 <__aeabi_dmul>
 80063be:	9e02      	ldr	r6, [sp, #8]
 80063c0:	4682      	mov	sl, r0
 80063c2:	468b      	mov	fp, r1
 80063c4:	3501      	adds	r5, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	f7fa f8b4 	bl	8000534 <__aeabi_i2d>
 80063cc:	4652      	mov	r2, sl
 80063ce:	465b      	mov	r3, fp
 80063d0:	f7fa f91a 	bl	8000608 <__aeabi_dmul>
 80063d4:	4b82      	ldr	r3, [pc, #520]	; (80065e0 <_dtoa_r+0x628>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f7f9 ff60 	bl	800029c <__adddf3>
 80063dc:	46d0      	mov	r8, sl
 80063de:	46d9      	mov	r9, fp
 80063e0:	4682      	mov	sl, r0
 80063e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	d158      	bne.n	800649c <_dtoa_r+0x4e4>
 80063ea:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <_dtoa_r+0x62c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7f9 ff51 	bl	8000298 <__aeabi_dsub>
 80063f6:	4652      	mov	r2, sl
 80063f8:	465b      	mov	r3, fp
 80063fa:	4680      	mov	r8, r0
 80063fc:	4689      	mov	r9, r1
 80063fe:	f7fa fb93 	bl	8000b28 <__aeabi_dcmpgt>
 8006402:	2800      	cmp	r0, #0
 8006404:	f040 8295 	bne.w	8006932 <_dtoa_r+0x97a>
 8006408:	4652      	mov	r2, sl
 800640a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa fb6b 	bl	8000aec <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f040 8289 	bne.w	800692e <_dtoa_r+0x976>
 800641c:	ec5b ab19 	vmov	sl, fp, d9
 8006420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006422:	2b00      	cmp	r3, #0
 8006424:	f2c0 8148 	blt.w	80066b8 <_dtoa_r+0x700>
 8006428:	9a00      	ldr	r2, [sp, #0]
 800642a:	2a0e      	cmp	r2, #14
 800642c:	f300 8144 	bgt.w	80066b8 <_dtoa_r+0x700>
 8006430:	4b67      	ldr	r3, [pc, #412]	; (80065d0 <_dtoa_r+0x618>)
 8006432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	f280 80d5 	bge.w	80065ec <_dtoa_r+0x634>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f300 80d1 	bgt.w	80065ec <_dtoa_r+0x634>
 800644a:	f040 826f 	bne.w	800692c <_dtoa_r+0x974>
 800644e:	4b65      	ldr	r3, [pc, #404]	; (80065e4 <_dtoa_r+0x62c>)
 8006450:	2200      	movs	r2, #0
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	f7fa fb59 	bl	8000b14 <__aeabi_dcmpge>
 8006462:	9e03      	ldr	r6, [sp, #12]
 8006464:	4637      	mov	r7, r6
 8006466:	2800      	cmp	r0, #0
 8006468:	f040 8245 	bne.w	80068f6 <_dtoa_r+0x93e>
 800646c:	9d01      	ldr	r5, [sp, #4]
 800646e:	2331      	movs	r3, #49	; 0x31
 8006470:	f805 3b01 	strb.w	r3, [r5], #1
 8006474:	9b00      	ldr	r3, [sp, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	e240      	b.n	80068fe <_dtoa_r+0x946>
 800647c:	07f2      	lsls	r2, r6, #31
 800647e:	d505      	bpl.n	800648c <_dtoa_r+0x4d4>
 8006480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006484:	f7fa f8c0 	bl	8000608 <__aeabi_dmul>
 8006488:	3501      	adds	r5, #1
 800648a:	2301      	movs	r3, #1
 800648c:	1076      	asrs	r6, r6, #1
 800648e:	3708      	adds	r7, #8
 8006490:	e777      	b.n	8006382 <_dtoa_r+0x3ca>
 8006492:	2502      	movs	r5, #2
 8006494:	e779      	b.n	800638a <_dtoa_r+0x3d2>
 8006496:	9f00      	ldr	r7, [sp, #0]
 8006498:	9e03      	ldr	r6, [sp, #12]
 800649a:	e794      	b.n	80063c6 <_dtoa_r+0x40e>
 800649c:	9901      	ldr	r1, [sp, #4]
 800649e:	4b4c      	ldr	r3, [pc, #304]	; (80065d0 <_dtoa_r+0x618>)
 80064a0:	4431      	add	r1, r6
 80064a2:	910d      	str	r1, [sp, #52]	; 0x34
 80064a4:	9908      	ldr	r1, [sp, #32]
 80064a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d043      	beq.n	800653a <_dtoa_r+0x582>
 80064b2:	494d      	ldr	r1, [pc, #308]	; (80065e8 <_dtoa_r+0x630>)
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7fa f9d1 	bl	800085c <__aeabi_ddiv>
 80064ba:	4652      	mov	r2, sl
 80064bc:	465b      	mov	r3, fp
 80064be:	f7f9 feeb 	bl	8000298 <__aeabi_dsub>
 80064c2:	9d01      	ldr	r5, [sp, #4]
 80064c4:	4682      	mov	sl, r0
 80064c6:	468b      	mov	fp, r1
 80064c8:	4649      	mov	r1, r9
 80064ca:	4640      	mov	r0, r8
 80064cc:	f7fa fb4c 	bl	8000b68 <__aeabi_d2iz>
 80064d0:	4606      	mov	r6, r0
 80064d2:	f7fa f82f 	bl	8000534 <__aeabi_i2d>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7f9 fedb 	bl	8000298 <__aeabi_dsub>
 80064e2:	3630      	adds	r6, #48	; 0x30
 80064e4:	f805 6b01 	strb.w	r6, [r5], #1
 80064e8:	4652      	mov	r2, sl
 80064ea:	465b      	mov	r3, fp
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	f7fa fafc 	bl	8000aec <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d163      	bne.n	80065c0 <_dtoa_r+0x608>
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	4936      	ldr	r1, [pc, #216]	; (80065d8 <_dtoa_r+0x620>)
 80064fe:	2000      	movs	r0, #0
 8006500:	f7f9 feca 	bl	8000298 <__aeabi_dsub>
 8006504:	4652      	mov	r2, sl
 8006506:	465b      	mov	r3, fp
 8006508:	f7fa faf0 	bl	8000aec <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	f040 80b5 	bne.w	800667c <_dtoa_r+0x6c4>
 8006512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006514:	429d      	cmp	r5, r3
 8006516:	d081      	beq.n	800641c <_dtoa_r+0x464>
 8006518:	4b30      	ldr	r3, [pc, #192]	; (80065dc <_dtoa_r+0x624>)
 800651a:	2200      	movs	r2, #0
 800651c:	4650      	mov	r0, sl
 800651e:	4659      	mov	r1, fp
 8006520:	f7fa f872 	bl	8000608 <__aeabi_dmul>
 8006524:	4b2d      	ldr	r3, [pc, #180]	; (80065dc <_dtoa_r+0x624>)
 8006526:	4682      	mov	sl, r0
 8006528:	468b      	mov	fp, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	2200      	movs	r2, #0
 8006530:	f7fa f86a 	bl	8000608 <__aeabi_dmul>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	e7c6      	b.n	80064c8 <_dtoa_r+0x510>
 800653a:	4650      	mov	r0, sl
 800653c:	4659      	mov	r1, fp
 800653e:	f7fa f863 	bl	8000608 <__aeabi_dmul>
 8006542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006544:	9d01      	ldr	r5, [sp, #4]
 8006546:	930f      	str	r3, [sp, #60]	; 0x3c
 8006548:	4682      	mov	sl, r0
 800654a:	468b      	mov	fp, r1
 800654c:	4649      	mov	r1, r9
 800654e:	4640      	mov	r0, r8
 8006550:	f7fa fb0a 	bl	8000b68 <__aeabi_d2iz>
 8006554:	4606      	mov	r6, r0
 8006556:	f7f9 ffed 	bl	8000534 <__aeabi_i2d>
 800655a:	3630      	adds	r6, #48	; 0x30
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4640      	mov	r0, r8
 8006562:	4649      	mov	r1, r9
 8006564:	f7f9 fe98 	bl	8000298 <__aeabi_dsub>
 8006568:	f805 6b01 	strb.w	r6, [r5], #1
 800656c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800656e:	429d      	cmp	r5, r3
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	d124      	bne.n	80065c4 <_dtoa_r+0x60c>
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <_dtoa_r+0x630>)
 800657c:	4650      	mov	r0, sl
 800657e:	4659      	mov	r1, fp
 8006580:	f7f9 fe8c 	bl	800029c <__adddf3>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa facc 	bl	8000b28 <__aeabi_dcmpgt>
 8006590:	2800      	cmp	r0, #0
 8006592:	d173      	bne.n	800667c <_dtoa_r+0x6c4>
 8006594:	4652      	mov	r2, sl
 8006596:	465b      	mov	r3, fp
 8006598:	4913      	ldr	r1, [pc, #76]	; (80065e8 <_dtoa_r+0x630>)
 800659a:	2000      	movs	r0, #0
 800659c:	f7f9 fe7c 	bl	8000298 <__aeabi_dsub>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7fa faa0 	bl	8000aec <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f af35 	beq.w	800641c <_dtoa_r+0x464>
 80065b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065b4:	1e6b      	subs	r3, r5, #1
 80065b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065bc:	2b30      	cmp	r3, #48	; 0x30
 80065be:	d0f8      	beq.n	80065b2 <_dtoa_r+0x5fa>
 80065c0:	9700      	str	r7, [sp, #0]
 80065c2:	e049      	b.n	8006658 <_dtoa_r+0x6a0>
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <_dtoa_r+0x624>)
 80065c6:	f7fa f81f 	bl	8000608 <__aeabi_dmul>
 80065ca:	4680      	mov	r8, r0
 80065cc:	4689      	mov	r9, r1
 80065ce:	e7bd      	b.n	800654c <_dtoa_r+0x594>
 80065d0:	080094c0 	.word	0x080094c0
 80065d4:	08009498 	.word	0x08009498
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	40240000 	.word	0x40240000
 80065e0:	401c0000 	.word	0x401c0000
 80065e4:	40140000 	.word	0x40140000
 80065e8:	3fe00000 	.word	0x3fe00000
 80065ec:	9d01      	ldr	r5, [sp, #4]
 80065ee:	4656      	mov	r6, sl
 80065f0:	465f      	mov	r7, fp
 80065f2:	4642      	mov	r2, r8
 80065f4:	464b      	mov	r3, r9
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7fa f92f 	bl	800085c <__aeabi_ddiv>
 80065fe:	f7fa fab3 	bl	8000b68 <__aeabi_d2iz>
 8006602:	4682      	mov	sl, r0
 8006604:	f7f9 ff96 	bl	8000534 <__aeabi_i2d>
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	f7f9 fffc 	bl	8000608 <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4630      	mov	r0, r6
 8006616:	4639      	mov	r1, r7
 8006618:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800661c:	f7f9 fe3c 	bl	8000298 <__aeabi_dsub>
 8006620:	f805 6b01 	strb.w	r6, [r5], #1
 8006624:	9e01      	ldr	r6, [sp, #4]
 8006626:	9f03      	ldr	r7, [sp, #12]
 8006628:	1bae      	subs	r6, r5, r6
 800662a:	42b7      	cmp	r7, r6
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	d135      	bne.n	800669e <_dtoa_r+0x6e6>
 8006632:	f7f9 fe33 	bl	800029c <__adddf3>
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	4606      	mov	r6, r0
 800663c:	460f      	mov	r7, r1
 800663e:	f7fa fa73 	bl	8000b28 <__aeabi_dcmpgt>
 8006642:	b9d0      	cbnz	r0, 800667a <_dtoa_r+0x6c2>
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7fa fa44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006650:	b110      	cbz	r0, 8006658 <_dtoa_r+0x6a0>
 8006652:	f01a 0f01 	tst.w	sl, #1
 8006656:	d110      	bne.n	800667a <_dtoa_r+0x6c2>
 8006658:	4620      	mov	r0, r4
 800665a:	ee18 1a10 	vmov	r1, s16
 800665e:	f000 faf3 	bl	8006c48 <_Bfree>
 8006662:	2300      	movs	r3, #0
 8006664:	9800      	ldr	r0, [sp, #0]
 8006666:	702b      	strb	r3, [r5, #0]
 8006668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666a:	3001      	adds	r0, #1
 800666c:	6018      	str	r0, [r3, #0]
 800666e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006670:	2b00      	cmp	r3, #0
 8006672:	f43f acf1 	beq.w	8006058 <_dtoa_r+0xa0>
 8006676:	601d      	str	r5, [r3, #0]
 8006678:	e4ee      	b.n	8006058 <_dtoa_r+0xa0>
 800667a:	9f00      	ldr	r7, [sp, #0]
 800667c:	462b      	mov	r3, r5
 800667e:	461d      	mov	r5, r3
 8006680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006684:	2a39      	cmp	r2, #57	; 0x39
 8006686:	d106      	bne.n	8006696 <_dtoa_r+0x6de>
 8006688:	9a01      	ldr	r2, [sp, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d1f7      	bne.n	800667e <_dtoa_r+0x6c6>
 800668e:	9901      	ldr	r1, [sp, #4]
 8006690:	2230      	movs	r2, #48	; 0x30
 8006692:	3701      	adds	r7, #1
 8006694:	700a      	strb	r2, [r1, #0]
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	3201      	adds	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e790      	b.n	80065c0 <_dtoa_r+0x608>
 800669e:	4ba6      	ldr	r3, [pc, #664]	; (8006938 <_dtoa_r+0x980>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	f7f9 ffb1 	bl	8000608 <__aeabi_dmul>
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	f7fa fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d09d      	beq.n	80065f2 <_dtoa_r+0x63a>
 80066b6:	e7cf      	b.n	8006658 <_dtoa_r+0x6a0>
 80066b8:	9a08      	ldr	r2, [sp, #32]
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	f000 80d7 	beq.w	800686e <_dtoa_r+0x8b6>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	f300 80ba 	bgt.w	800683c <_dtoa_r+0x884>
 80066c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	f000 80b2 	beq.w	8006834 <_dtoa_r+0x87c>
 80066d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066d4:	9e07      	ldr	r6, [sp, #28]
 80066d6:	9d04      	ldr	r5, [sp, #16]
 80066d8:	9a04      	ldr	r2, [sp, #16]
 80066da:	441a      	add	r2, r3
 80066dc:	9204      	str	r2, [sp, #16]
 80066de:	9a05      	ldr	r2, [sp, #20]
 80066e0:	2101      	movs	r1, #1
 80066e2:	441a      	add	r2, r3
 80066e4:	4620      	mov	r0, r4
 80066e6:	9205      	str	r2, [sp, #20]
 80066e8:	f000 fb66 	bl	8006db8 <__i2b>
 80066ec:	4607      	mov	r7, r0
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	dd0c      	ble.n	800670c <_dtoa_r+0x754>
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd09      	ble.n	800670c <_dtoa_r+0x754>
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	9a04      	ldr	r2, [sp, #16]
 80066fc:	bfa8      	it	ge
 80066fe:	462b      	movge	r3, r5
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	9204      	str	r2, [sp, #16]
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	1aed      	subs	r5, r5, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	b31b      	cbz	r3, 8006758 <_dtoa_r+0x7a0>
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80af 	beq.w	8006876 <_dtoa_r+0x8be>
 8006718:	2e00      	cmp	r6, #0
 800671a:	dd13      	ble.n	8006744 <_dtoa_r+0x78c>
 800671c:	4639      	mov	r1, r7
 800671e:	4632      	mov	r2, r6
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fc09 	bl	8006f38 <__pow5mult>
 8006726:	ee18 2a10 	vmov	r2, s16
 800672a:	4601      	mov	r1, r0
 800672c:	4607      	mov	r7, r0
 800672e:	4620      	mov	r0, r4
 8006730:	f000 fb58 	bl	8006de4 <__multiply>
 8006734:	ee18 1a10 	vmov	r1, s16
 8006738:	4680      	mov	r8, r0
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fa84 	bl	8006c48 <_Bfree>
 8006740:	ee08 8a10 	vmov	s16, r8
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	1b9a      	subs	r2, r3, r6
 8006748:	d006      	beq.n	8006758 <_dtoa_r+0x7a0>
 800674a:	ee18 1a10 	vmov	r1, s16
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fbf2 	bl	8006f38 <__pow5mult>
 8006754:	ee08 0a10 	vmov	s16, r0
 8006758:	2101      	movs	r1, #1
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fb2c 	bl	8006db8 <__i2b>
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	4606      	mov	r6, r0
 8006766:	f340 8088 	ble.w	800687a <_dtoa_r+0x8c2>
 800676a:	461a      	mov	r2, r3
 800676c:	4601      	mov	r1, r0
 800676e:	4620      	mov	r0, r4
 8006770:	f000 fbe2 	bl	8006f38 <__pow5mult>
 8006774:	9b06      	ldr	r3, [sp, #24]
 8006776:	2b01      	cmp	r3, #1
 8006778:	4606      	mov	r6, r0
 800677a:	f340 8081 	ble.w	8006880 <_dtoa_r+0x8c8>
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	6933      	ldr	r3, [r6, #16]
 8006784:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006788:	6918      	ldr	r0, [r3, #16]
 800678a:	f000 fac5 	bl	8006d18 <__hi0bits>
 800678e:	f1c0 0020 	rsb	r0, r0, #32
 8006792:	9b05      	ldr	r3, [sp, #20]
 8006794:	4418      	add	r0, r3
 8006796:	f010 001f 	ands.w	r0, r0, #31
 800679a:	f000 8092 	beq.w	80068c2 <_dtoa_r+0x90a>
 800679e:	f1c0 0320 	rsb	r3, r0, #32
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	f340 808a 	ble.w	80068bc <_dtoa_r+0x904>
 80067a8:	f1c0 001c 	rsb	r0, r0, #28
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	4403      	add	r3, r0
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	4403      	add	r3, r0
 80067b6:	4405      	add	r5, r0
 80067b8:	9305      	str	r3, [sp, #20]
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dd07      	ble.n	80067d0 <_dtoa_r+0x818>
 80067c0:	ee18 1a10 	vmov	r1, s16
 80067c4:	461a      	mov	r2, r3
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 fc10 	bl	8006fec <__lshift>
 80067cc:	ee08 0a10 	vmov	s16, r0
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd05      	ble.n	80067e2 <_dtoa_r+0x82a>
 80067d6:	4631      	mov	r1, r6
 80067d8:	461a      	mov	r2, r3
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fc06 	bl	8006fec <__lshift>
 80067e0:	4606      	mov	r6, r0
 80067e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d06e      	beq.n	80068c6 <_dtoa_r+0x90e>
 80067e8:	ee18 0a10 	vmov	r0, s16
 80067ec:	4631      	mov	r1, r6
 80067ee:	f000 fc6d 	bl	80070cc <__mcmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	da67      	bge.n	80068c6 <_dtoa_r+0x90e>
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	ee18 1a10 	vmov	r1, s16
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	220a      	movs	r2, #10
 8006802:	2300      	movs	r3, #0
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fa41 	bl	8006c8c <__multadd>
 800680a:	9b08      	ldr	r3, [sp, #32]
 800680c:	ee08 0a10 	vmov	s16, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 81b1 	beq.w	8006b78 <_dtoa_r+0xbc0>
 8006816:	2300      	movs	r3, #0
 8006818:	4639      	mov	r1, r7
 800681a:	220a      	movs	r2, #10
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fa35 	bl	8006c8c <__multadd>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	4607      	mov	r7, r0
 8006828:	f300 808e 	bgt.w	8006948 <_dtoa_r+0x990>
 800682c:	9b06      	ldr	r3, [sp, #24]
 800682e:	2b02      	cmp	r3, #2
 8006830:	dc51      	bgt.n	80068d6 <_dtoa_r+0x91e>
 8006832:	e089      	b.n	8006948 <_dtoa_r+0x990>
 8006834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800683a:	e74b      	b.n	80066d4 <_dtoa_r+0x71c>
 800683c:	9b03      	ldr	r3, [sp, #12]
 800683e:	1e5e      	subs	r6, r3, #1
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	42b3      	cmp	r3, r6
 8006844:	bfbf      	itttt	lt
 8006846:	9b07      	ldrlt	r3, [sp, #28]
 8006848:	9607      	strlt	r6, [sp, #28]
 800684a:	1af2      	sublt	r2, r6, r3
 800684c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800684e:	bfb6      	itet	lt
 8006850:	189b      	addlt	r3, r3, r2
 8006852:	1b9e      	subge	r6, r3, r6
 8006854:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	bfb8      	it	lt
 800685a:	2600      	movlt	r6, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	bfb7      	itett	lt
 8006860:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006864:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006868:	1a9d      	sublt	r5, r3, r2
 800686a:	2300      	movlt	r3, #0
 800686c:	e734      	b.n	80066d8 <_dtoa_r+0x720>
 800686e:	9e07      	ldr	r6, [sp, #28]
 8006870:	9d04      	ldr	r5, [sp, #16]
 8006872:	9f08      	ldr	r7, [sp, #32]
 8006874:	e73b      	b.n	80066ee <_dtoa_r+0x736>
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	e767      	b.n	800674a <_dtoa_r+0x792>
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2b01      	cmp	r3, #1
 800687e:	dc18      	bgt.n	80068b2 <_dtoa_r+0x8fa>
 8006880:	f1ba 0f00 	cmp.w	sl, #0
 8006884:	d115      	bne.n	80068b2 <_dtoa_r+0x8fa>
 8006886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800688a:	b993      	cbnz	r3, 80068b2 <_dtoa_r+0x8fa>
 800688c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006890:	0d1b      	lsrs	r3, r3, #20
 8006892:	051b      	lsls	r3, r3, #20
 8006894:	b183      	cbz	r3, 80068b8 <_dtoa_r+0x900>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	3301      	adds	r3, #1
 800689a:	9304      	str	r3, [sp, #16]
 800689c:	9b05      	ldr	r3, [sp, #20]
 800689e:	3301      	adds	r3, #1
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f04f 0801 	mov.w	r8, #1
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f47f af6a 	bne.w	8006782 <_dtoa_r+0x7ca>
 80068ae:	2001      	movs	r0, #1
 80068b0:	e76f      	b.n	8006792 <_dtoa_r+0x7da>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	e7f6      	b.n	80068a6 <_dtoa_r+0x8ee>
 80068b8:	4698      	mov	r8, r3
 80068ba:	e7f4      	b.n	80068a6 <_dtoa_r+0x8ee>
 80068bc:	f43f af7d 	beq.w	80067ba <_dtoa_r+0x802>
 80068c0:	4618      	mov	r0, r3
 80068c2:	301c      	adds	r0, #28
 80068c4:	e772      	b.n	80067ac <_dtoa_r+0x7f4>
 80068c6:	9b03      	ldr	r3, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dc37      	bgt.n	800693c <_dtoa_r+0x984>
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	dd34      	ble.n	800693c <_dtoa_r+0x984>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	9b02      	ldr	r3, [sp, #8]
 80068d8:	b96b      	cbnz	r3, 80068f6 <_dtoa_r+0x93e>
 80068da:	4631      	mov	r1, r6
 80068dc:	2205      	movs	r2, #5
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f9d4 	bl	8006c8c <__multadd>
 80068e4:	4601      	mov	r1, r0
 80068e6:	4606      	mov	r6, r0
 80068e8:	ee18 0a10 	vmov	r0, s16
 80068ec:	f000 fbee 	bl	80070cc <__mcmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f73f adbb 	bgt.w	800646c <_dtoa_r+0x4b4>
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	9d01      	ldr	r5, [sp, #4]
 80068fa:	43db      	mvns	r3, r3
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	4631      	mov	r1, r6
 8006904:	4620      	mov	r0, r4
 8006906:	f000 f99f 	bl	8006c48 <_Bfree>
 800690a:	2f00      	cmp	r7, #0
 800690c:	f43f aea4 	beq.w	8006658 <_dtoa_r+0x6a0>
 8006910:	f1b8 0f00 	cmp.w	r8, #0
 8006914:	d005      	beq.n	8006922 <_dtoa_r+0x96a>
 8006916:	45b8      	cmp	r8, r7
 8006918:	d003      	beq.n	8006922 <_dtoa_r+0x96a>
 800691a:	4641      	mov	r1, r8
 800691c:	4620      	mov	r0, r4
 800691e:	f000 f993 	bl	8006c48 <_Bfree>
 8006922:	4639      	mov	r1, r7
 8006924:	4620      	mov	r0, r4
 8006926:	f000 f98f 	bl	8006c48 <_Bfree>
 800692a:	e695      	b.n	8006658 <_dtoa_r+0x6a0>
 800692c:	2600      	movs	r6, #0
 800692e:	4637      	mov	r7, r6
 8006930:	e7e1      	b.n	80068f6 <_dtoa_r+0x93e>
 8006932:	9700      	str	r7, [sp, #0]
 8006934:	4637      	mov	r7, r6
 8006936:	e599      	b.n	800646c <_dtoa_r+0x4b4>
 8006938:	40240000 	.word	0x40240000
 800693c:	9b08      	ldr	r3, [sp, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 80ca 	beq.w	8006ad8 <_dtoa_r+0xb20>
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	2d00      	cmp	r5, #0
 800694a:	dd05      	ble.n	8006958 <_dtoa_r+0x9a0>
 800694c:	4639      	mov	r1, r7
 800694e:	462a      	mov	r2, r5
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fb4b 	bl	8006fec <__lshift>
 8006956:	4607      	mov	r7, r0
 8006958:	f1b8 0f00 	cmp.w	r8, #0
 800695c:	d05b      	beq.n	8006a16 <_dtoa_r+0xa5e>
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4620      	mov	r0, r4
 8006962:	f000 f931 	bl	8006bc8 <_Balloc>
 8006966:	4605      	mov	r5, r0
 8006968:	b928      	cbnz	r0, 8006976 <_dtoa_r+0x9be>
 800696a:	4b87      	ldr	r3, [pc, #540]	; (8006b88 <_dtoa_r+0xbd0>)
 800696c:	4602      	mov	r2, r0
 800696e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006972:	f7ff bb3b 	b.w	8005fec <_dtoa_r+0x34>
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	3202      	adds	r2, #2
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	f107 010c 	add.w	r1, r7, #12
 8006980:	300c      	adds	r0, #12
 8006982:	f000 f913 	bl	8006bac <memcpy>
 8006986:	2201      	movs	r2, #1
 8006988:	4629      	mov	r1, r5
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fb2e 	bl	8006fec <__lshift>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	f103 0901 	add.w	r9, r3, #1
 8006996:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800699a:	4413      	add	r3, r2
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	f00a 0301 	and.w	r3, sl, #1
 80069a2:	46b8      	mov	r8, r7
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	4607      	mov	r7, r0
 80069a8:	4631      	mov	r1, r6
 80069aa:	ee18 0a10 	vmov	r0, s16
 80069ae:	f7ff fa77 	bl	8005ea0 <quorem>
 80069b2:	4641      	mov	r1, r8
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069ba:	ee18 0a10 	vmov	r0, s16
 80069be:	f000 fb85 	bl	80070cc <__mcmp>
 80069c2:	463a      	mov	r2, r7
 80069c4:	9003      	str	r0, [sp, #12]
 80069c6:	4631      	mov	r1, r6
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fb9b 	bl	8007104 <__mdiff>
 80069ce:	68c2      	ldr	r2, [r0, #12]
 80069d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80069d4:	4605      	mov	r5, r0
 80069d6:	bb02      	cbnz	r2, 8006a1a <_dtoa_r+0xa62>
 80069d8:	4601      	mov	r1, r0
 80069da:	ee18 0a10 	vmov	r0, s16
 80069de:	f000 fb75 	bl	80070cc <__mcmp>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4629      	mov	r1, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	9207      	str	r2, [sp, #28]
 80069ea:	f000 f92d 	bl	8006c48 <_Bfree>
 80069ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80069f2:	ea43 0102 	orr.w	r1, r3, r2
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	430b      	orrs	r3, r1
 80069fa:	464d      	mov	r5, r9
 80069fc:	d10f      	bne.n	8006a1e <_dtoa_r+0xa66>
 80069fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a02:	d02a      	beq.n	8006a5a <_dtoa_r+0xaa2>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd02      	ble.n	8006a10 <_dtoa_r+0xa58>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006a10:	f88b a000 	strb.w	sl, [fp]
 8006a14:	e775      	b.n	8006902 <_dtoa_r+0x94a>
 8006a16:	4638      	mov	r0, r7
 8006a18:	e7ba      	b.n	8006990 <_dtoa_r+0x9d8>
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	e7e2      	b.n	80069e4 <_dtoa_r+0xa2c>
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	db04      	blt.n	8006a2e <_dtoa_r+0xa76>
 8006a24:	9906      	ldr	r1, [sp, #24]
 8006a26:	430b      	orrs	r3, r1
 8006a28:	9904      	ldr	r1, [sp, #16]
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	d122      	bne.n	8006a74 <_dtoa_r+0xabc>
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	ddee      	ble.n	8006a10 <_dtoa_r+0xa58>
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	2201      	movs	r2, #1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fad7 	bl	8006fec <__lshift>
 8006a3e:	4631      	mov	r1, r6
 8006a40:	ee08 0a10 	vmov	s16, r0
 8006a44:	f000 fb42 	bl	80070cc <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	dc03      	bgt.n	8006a54 <_dtoa_r+0xa9c>
 8006a4c:	d1e0      	bne.n	8006a10 <_dtoa_r+0xa58>
 8006a4e:	f01a 0f01 	tst.w	sl, #1
 8006a52:	d0dd      	beq.n	8006a10 <_dtoa_r+0xa58>
 8006a54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a58:	d1d7      	bne.n	8006a0a <_dtoa_r+0xa52>
 8006a5a:	2339      	movs	r3, #57	; 0x39
 8006a5c:	f88b 3000 	strb.w	r3, [fp]
 8006a60:	462b      	mov	r3, r5
 8006a62:	461d      	mov	r5, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a6a:	2a39      	cmp	r2, #57	; 0x39
 8006a6c:	d071      	beq.n	8006b52 <_dtoa_r+0xb9a>
 8006a6e:	3201      	adds	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e746      	b.n	8006902 <_dtoa_r+0x94a>
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	dd07      	ble.n	8006a88 <_dtoa_r+0xad0>
 8006a78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a7c:	d0ed      	beq.n	8006a5a <_dtoa_r+0xaa2>
 8006a7e:	f10a 0301 	add.w	r3, sl, #1
 8006a82:	f88b 3000 	strb.w	r3, [fp]
 8006a86:	e73c      	b.n	8006902 <_dtoa_r+0x94a>
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006a8e:	4599      	cmp	r9, r3
 8006a90:	d047      	beq.n	8006b22 <_dtoa_r+0xb6a>
 8006a92:	ee18 1a10 	vmov	r1, s16
 8006a96:	2300      	movs	r3, #0
 8006a98:	220a      	movs	r2, #10
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 f8f6 	bl	8006c8c <__multadd>
 8006aa0:	45b8      	cmp	r8, r7
 8006aa2:	ee08 0a10 	vmov	s16, r0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	f04f 020a 	mov.w	r2, #10
 8006aae:	4641      	mov	r1, r8
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	d106      	bne.n	8006ac2 <_dtoa_r+0xb0a>
 8006ab4:	f000 f8ea 	bl	8006c8c <__multadd>
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4607      	mov	r7, r0
 8006abc:	f109 0901 	add.w	r9, r9, #1
 8006ac0:	e772      	b.n	80069a8 <_dtoa_r+0x9f0>
 8006ac2:	f000 f8e3 	bl	8006c8c <__multadd>
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	4680      	mov	r8, r0
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f8dc 	bl	8006c8c <__multadd>
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	e7f1      	b.n	8006abc <_dtoa_r+0xb04>
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	ee18 0a10 	vmov	r0, s16
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	f7ff f9dc 	bl	8005ea0 <quorem>
 8006ae8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	f805 ab01 	strb.w	sl, [r5], #1
 8006af2:	1aea      	subs	r2, r5, r3
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	4293      	cmp	r3, r2
 8006af8:	dd09      	ble.n	8006b0e <_dtoa_r+0xb56>
 8006afa:	ee18 1a10 	vmov	r1, s16
 8006afe:	2300      	movs	r3, #0
 8006b00:	220a      	movs	r2, #10
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f8c2 	bl	8006c8c <__multadd>
 8006b08:	ee08 0a10 	vmov	s16, r0
 8006b0c:	e7e7      	b.n	8006ade <_dtoa_r+0xb26>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfc8      	it	gt
 8006b14:	461d      	movgt	r5, r3
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	bfd8      	it	le
 8006b1a:	2501      	movle	r5, #1
 8006b1c:	441d      	add	r5, r3
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	ee18 1a10 	vmov	r1, s16
 8006b26:	2201      	movs	r2, #1
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fa5f 	bl	8006fec <__lshift>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	ee08 0a10 	vmov	s16, r0
 8006b34:	f000 faca 	bl	80070cc <__mcmp>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dc91      	bgt.n	8006a60 <_dtoa_r+0xaa8>
 8006b3c:	d102      	bne.n	8006b44 <_dtoa_r+0xb8c>
 8006b3e:	f01a 0f01 	tst.w	sl, #1
 8006b42:	d18d      	bne.n	8006a60 <_dtoa_r+0xaa8>
 8006b44:	462b      	mov	r3, r5
 8006b46:	461d      	mov	r5, r3
 8006b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b4c:	2a30      	cmp	r2, #48	; 0x30
 8006b4e:	d0fa      	beq.n	8006b46 <_dtoa_r+0xb8e>
 8006b50:	e6d7      	b.n	8006902 <_dtoa_r+0x94a>
 8006b52:	9a01      	ldr	r2, [sp, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d184      	bne.n	8006a62 <_dtoa_r+0xaaa>
 8006b58:	9b00      	ldr	r3, [sp, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2331      	movs	r3, #49	; 0x31
 8006b60:	7013      	strb	r3, [r2, #0]
 8006b62:	e6ce      	b.n	8006902 <_dtoa_r+0x94a>
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <_dtoa_r+0xbd4>)
 8006b66:	f7ff ba95 	b.w	8006094 <_dtoa_r+0xdc>
 8006b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aa6e 	bne.w	800604e <_dtoa_r+0x96>
 8006b72:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <_dtoa_r+0xbd8>)
 8006b74:	f7ff ba8e 	b.w	8006094 <_dtoa_r+0xdc>
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dcae      	bgt.n	8006adc <_dtoa_r+0xb24>
 8006b7e:	9b06      	ldr	r3, [sp, #24]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	f73f aea8 	bgt.w	80068d6 <_dtoa_r+0x91e>
 8006b86:	e7a9      	b.n	8006adc <_dtoa_r+0xb24>
 8006b88:	08009424 	.word	0x08009424
 8006b8c:	08009280 	.word	0x08009280
 8006b90:	080093a5 	.word	0x080093a5

08006b94 <_localeconv_r>:
 8006b94:	4800      	ldr	r0, [pc, #0]	; (8006b98 <_localeconv_r+0x4>)
 8006b96:	4770      	bx	lr
 8006b98:	20000168 	.word	0x20000168

08006b9c <malloc>:
 8006b9c:	4b02      	ldr	r3, [pc, #8]	; (8006ba8 <malloc+0xc>)
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f000 bc17 	b.w	80073d4 <_malloc_r>
 8006ba6:	bf00      	nop
 8006ba8:	20000014 	.word	0x20000014

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <_Balloc>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	b976      	cbnz	r6, 8006bf0 <_Balloc+0x28>
 8006bd2:	2010      	movs	r0, #16
 8006bd4:	f7ff ffe2 	bl	8006b9c <malloc>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6260      	str	r0, [r4, #36]	; 0x24
 8006bdc:	b920      	cbnz	r0, 8006be8 <_Balloc+0x20>
 8006bde:	4b18      	ldr	r3, [pc, #96]	; (8006c40 <_Balloc+0x78>)
 8006be0:	4818      	ldr	r0, [pc, #96]	; (8006c44 <_Balloc+0x7c>)
 8006be2:	2166      	movs	r1, #102	; 0x66
 8006be4:	f000 fdd6 	bl	8007794 <__assert_func>
 8006be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bec:	6006      	str	r6, [r0, #0]
 8006bee:	60c6      	str	r6, [r0, #12]
 8006bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bf2:	68f3      	ldr	r3, [r6, #12]
 8006bf4:	b183      	cbz	r3, 8006c18 <_Balloc+0x50>
 8006bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bfe:	b9b8      	cbnz	r0, 8006c30 <_Balloc+0x68>
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f605 	lsl.w	r6, r1, r5
 8006c06:	1d72      	adds	r2, r6, #5
 8006c08:	0092      	lsls	r2, r2, #2
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fb60 	bl	80072d0 <_calloc_r>
 8006c10:	b160      	cbz	r0, 8006c2c <_Balloc+0x64>
 8006c12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c16:	e00e      	b.n	8006c36 <_Balloc+0x6e>
 8006c18:	2221      	movs	r2, #33	; 0x21
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fb57 	bl	80072d0 <_calloc_r>
 8006c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c24:	60f0      	str	r0, [r6, #12]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e4      	bne.n	8006bf6 <_Balloc+0x2e>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	6802      	ldr	r2, [r0, #0]
 8006c32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c36:	2300      	movs	r3, #0
 8006c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c3c:	e7f7      	b.n	8006c2e <_Balloc+0x66>
 8006c3e:	bf00      	nop
 8006c40:	080093b2 	.word	0x080093b2
 8006c44:	08009435 	.word	0x08009435

08006c48 <_Bfree>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b976      	cbnz	r6, 8006c70 <_Bfree+0x28>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f7ff ffa2 	bl	8006b9c <malloc>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6268      	str	r0, [r5, #36]	; 0x24
 8006c5c:	b920      	cbnz	r0, 8006c68 <_Bfree+0x20>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <_Bfree+0x3c>)
 8006c60:	4809      	ldr	r0, [pc, #36]	; (8006c88 <_Bfree+0x40>)
 8006c62:	218a      	movs	r1, #138	; 0x8a
 8006c64:	f000 fd96 	bl	8007794 <__assert_func>
 8006c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c6c:	6006      	str	r6, [r0, #0]
 8006c6e:	60c6      	str	r6, [r0, #12]
 8006c70:	b13c      	cbz	r4, 8006c82 <_Bfree+0x3a>
 8006c72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c74:	6862      	ldr	r2, [r4, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c7c:	6021      	str	r1, [r4, #0]
 8006c7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	080093b2 	.word	0x080093b2
 8006c88:	08009435 	.word	0x08009435

08006c8c <__multadd>:
 8006c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c90:	690d      	ldr	r5, [r1, #16]
 8006c92:	4607      	mov	r7, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	461e      	mov	r6, r3
 8006c98:	f101 0c14 	add.w	ip, r1, #20
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ca2:	b299      	uxth	r1, r3
 8006ca4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ca8:	0c1e      	lsrs	r6, r3, #16
 8006caa:	0c0b      	lsrs	r3, r1, #16
 8006cac:	fb02 3306 	mla	r3, r2, r6, r3
 8006cb0:	b289      	uxth	r1, r1
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cb8:	4285      	cmp	r5, r0
 8006cba:	f84c 1b04 	str.w	r1, [ip], #4
 8006cbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cc2:	dcec      	bgt.n	8006c9e <__multadd+0x12>
 8006cc4:	b30e      	cbz	r6, 8006d0a <__multadd+0x7e>
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	dc19      	bgt.n	8006d00 <__multadd+0x74>
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4638      	mov	r0, r7
 8006cd0:	3101      	adds	r1, #1
 8006cd2:	f7ff ff79 	bl	8006bc8 <_Balloc>
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	b928      	cbnz	r0, 8006ce6 <__multadd+0x5a>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <__multadd+0x84>)
 8006cde:	480d      	ldr	r0, [pc, #52]	; (8006d14 <__multadd+0x88>)
 8006ce0:	21b5      	movs	r1, #181	; 0xb5
 8006ce2:	f000 fd57 	bl	8007794 <__assert_func>
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	3202      	adds	r2, #2
 8006cea:	f104 010c 	add.w	r1, r4, #12
 8006cee:	0092      	lsls	r2, r2, #2
 8006cf0:	300c      	adds	r0, #12
 8006cf2:	f7ff ff5b 	bl	8006bac <memcpy>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ffa5 	bl	8006c48 <_Bfree>
 8006cfe:	4644      	mov	r4, r8
 8006d00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d04:	3501      	adds	r5, #1
 8006d06:	615e      	str	r6, [r3, #20]
 8006d08:	6125      	str	r5, [r4, #16]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d10:	08009424 	.word	0x08009424
 8006d14:	08009435 	.word	0x08009435

08006d18 <__hi0bits>:
 8006d18:	0c03      	lsrs	r3, r0, #16
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	b9d3      	cbnz	r3, 8006d54 <__hi0bits+0x3c>
 8006d1e:	0400      	lsls	r0, r0, #16
 8006d20:	2310      	movs	r3, #16
 8006d22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d26:	bf04      	itt	eq
 8006d28:	0200      	lsleq	r0, r0, #8
 8006d2a:	3308      	addeq	r3, #8
 8006d2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d30:	bf04      	itt	eq
 8006d32:	0100      	lsleq	r0, r0, #4
 8006d34:	3304      	addeq	r3, #4
 8006d36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d3a:	bf04      	itt	eq
 8006d3c:	0080      	lsleq	r0, r0, #2
 8006d3e:	3302      	addeq	r3, #2
 8006d40:	2800      	cmp	r0, #0
 8006d42:	db05      	blt.n	8006d50 <__hi0bits+0x38>
 8006d44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d48:	f103 0301 	add.w	r3, r3, #1
 8006d4c:	bf08      	it	eq
 8006d4e:	2320      	moveq	r3, #32
 8006d50:	4618      	mov	r0, r3
 8006d52:	4770      	bx	lr
 8006d54:	2300      	movs	r3, #0
 8006d56:	e7e4      	b.n	8006d22 <__hi0bits+0xa>

08006d58 <__lo0bits>:
 8006d58:	6803      	ldr	r3, [r0, #0]
 8006d5a:	f013 0207 	ands.w	r2, r3, #7
 8006d5e:	4601      	mov	r1, r0
 8006d60:	d00b      	beq.n	8006d7a <__lo0bits+0x22>
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d423      	bmi.n	8006dae <__lo0bits+0x56>
 8006d66:	0798      	lsls	r0, r3, #30
 8006d68:	bf49      	itett	mi
 8006d6a:	085b      	lsrmi	r3, r3, #1
 8006d6c:	089b      	lsrpl	r3, r3, #2
 8006d6e:	2001      	movmi	r0, #1
 8006d70:	600b      	strmi	r3, [r1, #0]
 8006d72:	bf5c      	itt	pl
 8006d74:	600b      	strpl	r3, [r1, #0]
 8006d76:	2002      	movpl	r0, #2
 8006d78:	4770      	bx	lr
 8006d7a:	b298      	uxth	r0, r3
 8006d7c:	b9a8      	cbnz	r0, 8006daa <__lo0bits+0x52>
 8006d7e:	0c1b      	lsrs	r3, r3, #16
 8006d80:	2010      	movs	r0, #16
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	b90a      	cbnz	r2, 8006d8a <__lo0bits+0x32>
 8006d86:	3008      	adds	r0, #8
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	071a      	lsls	r2, r3, #28
 8006d8c:	bf04      	itt	eq
 8006d8e:	091b      	lsreq	r3, r3, #4
 8006d90:	3004      	addeq	r0, #4
 8006d92:	079a      	lsls	r2, r3, #30
 8006d94:	bf04      	itt	eq
 8006d96:	089b      	lsreq	r3, r3, #2
 8006d98:	3002      	addeq	r0, #2
 8006d9a:	07da      	lsls	r2, r3, #31
 8006d9c:	d403      	bmi.n	8006da6 <__lo0bits+0x4e>
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	f100 0001 	add.w	r0, r0, #1
 8006da4:	d005      	beq.n	8006db2 <__lo0bits+0x5a>
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	4770      	bx	lr
 8006daa:	4610      	mov	r0, r2
 8006dac:	e7e9      	b.n	8006d82 <__lo0bits+0x2a>
 8006dae:	2000      	movs	r0, #0
 8006db0:	4770      	bx	lr
 8006db2:	2020      	movs	r0, #32
 8006db4:	4770      	bx	lr
	...

08006db8 <__i2b>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	f7ff ff03 	bl	8006bc8 <_Balloc>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	b928      	cbnz	r0, 8006dd2 <__i2b+0x1a>
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <__i2b+0x24>)
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <__i2b+0x28>)
 8006dca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dce:	f000 fce1 	bl	8007794 <__assert_func>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	6144      	str	r4, [r0, #20]
 8006dd6:	6103      	str	r3, [r0, #16]
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	08009424 	.word	0x08009424
 8006de0:	08009435 	.word	0x08009435

08006de4 <__multiply>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	4691      	mov	r9, r2
 8006dea:	690a      	ldr	r2, [r1, #16]
 8006dec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	bfb8      	it	lt
 8006df4:	460b      	movlt	r3, r1
 8006df6:	460c      	mov	r4, r1
 8006df8:	bfbc      	itt	lt
 8006dfa:	464c      	movlt	r4, r9
 8006dfc:	4699      	movlt	r9, r3
 8006dfe:	6927      	ldr	r7, [r4, #16]
 8006e00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	6861      	ldr	r1, [r4, #4]
 8006e08:	eb07 060a 	add.w	r6, r7, sl
 8006e0c:	42b3      	cmp	r3, r6
 8006e0e:	b085      	sub	sp, #20
 8006e10:	bfb8      	it	lt
 8006e12:	3101      	addlt	r1, #1
 8006e14:	f7ff fed8 	bl	8006bc8 <_Balloc>
 8006e18:	b930      	cbnz	r0, 8006e28 <__multiply+0x44>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b44      	ldr	r3, [pc, #272]	; (8006f30 <__multiply+0x14c>)
 8006e1e:	4845      	ldr	r0, [pc, #276]	; (8006f34 <__multiply+0x150>)
 8006e20:	f240 115d 	movw	r1, #349	; 0x15d
 8006e24:	f000 fcb6 	bl	8007794 <__assert_func>
 8006e28:	f100 0514 	add.w	r5, r0, #20
 8006e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e30:	462b      	mov	r3, r5
 8006e32:	2200      	movs	r2, #0
 8006e34:	4543      	cmp	r3, r8
 8006e36:	d321      	bcc.n	8006e7c <__multiply+0x98>
 8006e38:	f104 0314 	add.w	r3, r4, #20
 8006e3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e40:	f109 0314 	add.w	r3, r9, #20
 8006e44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	1b3a      	subs	r2, r7, r4
 8006e4c:	3a15      	subs	r2, #21
 8006e4e:	f022 0203 	bic.w	r2, r2, #3
 8006e52:	3204      	adds	r2, #4
 8006e54:	f104 0115 	add.w	r1, r4, #21
 8006e58:	428f      	cmp	r7, r1
 8006e5a:	bf38      	it	cc
 8006e5c:	2204      	movcc	r2, #4
 8006e5e:	9201      	str	r2, [sp, #4]
 8006e60:	9a02      	ldr	r2, [sp, #8]
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d80c      	bhi.n	8006e82 <__multiply+0x9e>
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	dd03      	ble.n	8006e74 <__multiply+0x90>
 8006e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d05a      	beq.n	8006f2a <__multiply+0x146>
 8006e74:	6106      	str	r6, [r0, #16]
 8006e76:	b005      	add	sp, #20
 8006e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7c:	f843 2b04 	str.w	r2, [r3], #4
 8006e80:	e7d8      	b.n	8006e34 <__multiply+0x50>
 8006e82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e86:	f1ba 0f00 	cmp.w	sl, #0
 8006e8a:	d024      	beq.n	8006ed6 <__multiply+0xf2>
 8006e8c:	f104 0e14 	add.w	lr, r4, #20
 8006e90:	46a9      	mov	r9, r5
 8006e92:	f04f 0c00 	mov.w	ip, #0
 8006e96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006e9e:	fa1f fb82 	uxth.w	fp, r2
 8006ea2:	b289      	uxth	r1, r1
 8006ea4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ea8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006eac:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb0:	4461      	add	r1, ip
 8006eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ebe:	b289      	uxth	r1, r1
 8006ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ec4:	4577      	cmp	r7, lr
 8006ec6:	f849 1b04 	str.w	r1, [r9], #4
 8006eca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ece:	d8e2      	bhi.n	8006e96 <__multiply+0xb2>
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	f845 c002 	str.w	ip, [r5, r2]
 8006ed6:	9a03      	ldr	r2, [sp, #12]
 8006ed8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006edc:	3304      	adds	r3, #4
 8006ede:	f1b9 0f00 	cmp.w	r9, #0
 8006ee2:	d020      	beq.n	8006f26 <__multiply+0x142>
 8006ee4:	6829      	ldr	r1, [r5, #0]
 8006ee6:	f104 0c14 	add.w	ip, r4, #20
 8006eea:	46ae      	mov	lr, r5
 8006eec:	f04f 0a00 	mov.w	sl, #0
 8006ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ef4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ef8:	fb09 220b 	mla	r2, r9, fp, r2
 8006efc:	4492      	add	sl, r2
 8006efe:	b289      	uxth	r1, r1
 8006f00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f04:	f84e 1b04 	str.w	r1, [lr], #4
 8006f08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	fb09 1102 	mla	r1, r9, r2, r1
 8006f16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f1a:	4567      	cmp	r7, ip
 8006f1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f20:	d8e6      	bhi.n	8006ef0 <__multiply+0x10c>
 8006f22:	9a01      	ldr	r2, [sp, #4]
 8006f24:	50a9      	str	r1, [r5, r2]
 8006f26:	3504      	adds	r5, #4
 8006f28:	e79a      	b.n	8006e60 <__multiply+0x7c>
 8006f2a:	3e01      	subs	r6, #1
 8006f2c:	e79c      	b.n	8006e68 <__multiply+0x84>
 8006f2e:	bf00      	nop
 8006f30:	08009424 	.word	0x08009424
 8006f34:	08009435 	.word	0x08009435

08006f38 <__pow5mult>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	4615      	mov	r5, r2
 8006f3e:	f012 0203 	ands.w	r2, r2, #3
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	d007      	beq.n	8006f58 <__pow5mult+0x20>
 8006f48:	4c25      	ldr	r4, [pc, #148]	; (8006fe0 <__pow5mult+0xa8>)
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f52:	f7ff fe9b 	bl	8006c8c <__multadd>
 8006f56:	4607      	mov	r7, r0
 8006f58:	10ad      	asrs	r5, r5, #2
 8006f5a:	d03d      	beq.n	8006fd8 <__pow5mult+0xa0>
 8006f5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f5e:	b97c      	cbnz	r4, 8006f80 <__pow5mult+0x48>
 8006f60:	2010      	movs	r0, #16
 8006f62:	f7ff fe1b 	bl	8006b9c <malloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	6270      	str	r0, [r6, #36]	; 0x24
 8006f6a:	b928      	cbnz	r0, 8006f78 <__pow5mult+0x40>
 8006f6c:	4b1d      	ldr	r3, [pc, #116]	; (8006fe4 <__pow5mult+0xac>)
 8006f6e:	481e      	ldr	r0, [pc, #120]	; (8006fe8 <__pow5mult+0xb0>)
 8006f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f74:	f000 fc0e 	bl	8007794 <__assert_func>
 8006f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f7c:	6004      	str	r4, [r0, #0]
 8006f7e:	60c4      	str	r4, [r0, #12]
 8006f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f88:	b94c      	cbnz	r4, 8006f9e <__pow5mult+0x66>
 8006f8a:	f240 2171 	movw	r1, #625	; 0x271
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff12 	bl	8006db8 <__i2b>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 0900 	mov.w	r9, #0
 8006fa2:	07eb      	lsls	r3, r5, #31
 8006fa4:	d50a      	bpl.n	8006fbc <__pow5mult+0x84>
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff1a 	bl	8006de4 <__multiply>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff fe47 	bl	8006c48 <_Bfree>
 8006fba:	4647      	mov	r7, r8
 8006fbc:	106d      	asrs	r5, r5, #1
 8006fbe:	d00b      	beq.n	8006fd8 <__pow5mult+0xa0>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	b938      	cbnz	r0, 8006fd4 <__pow5mult+0x9c>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ff0b 	bl	8006de4 <__multiply>
 8006fce:	6020      	str	r0, [r4, #0]
 8006fd0:	f8c0 9000 	str.w	r9, [r0]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	e7e4      	b.n	8006fa2 <__pow5mult+0x6a>
 8006fd8:	4638      	mov	r0, r7
 8006fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fde:	bf00      	nop
 8006fe0:	08009588 	.word	0x08009588
 8006fe4:	080093b2 	.word	0x080093b2
 8006fe8:	08009435 	.word	0x08009435

08006fec <__lshift>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	6849      	ldr	r1, [r1, #4]
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4691      	mov	r9, r2
 8007000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007004:	f108 0601 	add.w	r6, r8, #1
 8007008:	42b3      	cmp	r3, r6
 800700a:	db0b      	blt.n	8007024 <__lshift+0x38>
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff fddb 	bl	8006bc8 <_Balloc>
 8007012:	4605      	mov	r5, r0
 8007014:	b948      	cbnz	r0, 800702a <__lshift+0x3e>
 8007016:	4602      	mov	r2, r0
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <__lshift+0xd8>)
 800701a:	482b      	ldr	r0, [pc, #172]	; (80070c8 <__lshift+0xdc>)
 800701c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007020:	f000 fbb8 	bl	8007794 <__assert_func>
 8007024:	3101      	adds	r1, #1
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	e7ee      	b.n	8007008 <__lshift+0x1c>
 800702a:	2300      	movs	r3, #0
 800702c:	f100 0114 	add.w	r1, r0, #20
 8007030:	f100 0210 	add.w	r2, r0, #16
 8007034:	4618      	mov	r0, r3
 8007036:	4553      	cmp	r3, sl
 8007038:	db37      	blt.n	80070aa <__lshift+0xbe>
 800703a:	6920      	ldr	r0, [r4, #16]
 800703c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007040:	f104 0314 	add.w	r3, r4, #20
 8007044:	f019 091f 	ands.w	r9, r9, #31
 8007048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800704c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007050:	d02f      	beq.n	80070b2 <__lshift+0xc6>
 8007052:	f1c9 0e20 	rsb	lr, r9, #32
 8007056:	468a      	mov	sl, r1
 8007058:	f04f 0c00 	mov.w	ip, #0
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	fa02 f209 	lsl.w	r2, r2, r9
 8007062:	ea42 020c 	orr.w	r2, r2, ip
 8007066:	f84a 2b04 	str.w	r2, [sl], #4
 800706a:	f853 2b04 	ldr.w	r2, [r3], #4
 800706e:	4298      	cmp	r0, r3
 8007070:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007074:	d8f2      	bhi.n	800705c <__lshift+0x70>
 8007076:	1b03      	subs	r3, r0, r4
 8007078:	3b15      	subs	r3, #21
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	3304      	adds	r3, #4
 8007080:	f104 0215 	add.w	r2, r4, #21
 8007084:	4290      	cmp	r0, r2
 8007086:	bf38      	it	cc
 8007088:	2304      	movcc	r3, #4
 800708a:	f841 c003 	str.w	ip, [r1, r3]
 800708e:	f1bc 0f00 	cmp.w	ip, #0
 8007092:	d001      	beq.n	8007098 <__lshift+0xac>
 8007094:	f108 0602 	add.w	r6, r8, #2
 8007098:	3e01      	subs	r6, #1
 800709a:	4638      	mov	r0, r7
 800709c:	612e      	str	r6, [r5, #16]
 800709e:	4621      	mov	r1, r4
 80070a0:	f7ff fdd2 	bl	8006c48 <_Bfree>
 80070a4:	4628      	mov	r0, r5
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7c1      	b.n	8007036 <__lshift+0x4a>
 80070b2:	3904      	subs	r1, #4
 80070b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070bc:	4298      	cmp	r0, r3
 80070be:	d8f9      	bhi.n	80070b4 <__lshift+0xc8>
 80070c0:	e7ea      	b.n	8007098 <__lshift+0xac>
 80070c2:	bf00      	nop
 80070c4:	08009424 	.word	0x08009424
 80070c8:	08009435 	.word	0x08009435

080070cc <__mcmp>:
 80070cc:	b530      	push	{r4, r5, lr}
 80070ce:	6902      	ldr	r2, [r0, #16]
 80070d0:	690c      	ldr	r4, [r1, #16]
 80070d2:	1b12      	subs	r2, r2, r4
 80070d4:	d10e      	bne.n	80070f4 <__mcmp+0x28>
 80070d6:	f100 0314 	add.w	r3, r0, #20
 80070da:	3114      	adds	r1, #20
 80070dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070ec:	42a5      	cmp	r5, r4
 80070ee:	d003      	beq.n	80070f8 <__mcmp+0x2c>
 80070f0:	d305      	bcc.n	80070fe <__mcmp+0x32>
 80070f2:	2201      	movs	r2, #1
 80070f4:	4610      	mov	r0, r2
 80070f6:	bd30      	pop	{r4, r5, pc}
 80070f8:	4283      	cmp	r3, r0
 80070fa:	d3f3      	bcc.n	80070e4 <__mcmp+0x18>
 80070fc:	e7fa      	b.n	80070f4 <__mcmp+0x28>
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e7f7      	b.n	80070f4 <__mcmp+0x28>

08007104 <__mdiff>:
 8007104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	4606      	mov	r6, r0
 800710c:	4611      	mov	r1, r2
 800710e:	4620      	mov	r0, r4
 8007110:	4690      	mov	r8, r2
 8007112:	f7ff ffdb 	bl	80070cc <__mcmp>
 8007116:	1e05      	subs	r5, r0, #0
 8007118:	d110      	bne.n	800713c <__mdiff+0x38>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff fd53 	bl	8006bc8 <_Balloc>
 8007122:	b930      	cbnz	r0, 8007132 <__mdiff+0x2e>
 8007124:	4b3a      	ldr	r3, [pc, #232]	; (8007210 <__mdiff+0x10c>)
 8007126:	4602      	mov	r2, r0
 8007128:	f240 2132 	movw	r1, #562	; 0x232
 800712c:	4839      	ldr	r0, [pc, #228]	; (8007214 <__mdiff+0x110>)
 800712e:	f000 fb31 	bl	8007794 <__assert_func>
 8007132:	2301      	movs	r3, #1
 8007134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	bfa4      	itt	ge
 800713e:	4643      	movge	r3, r8
 8007140:	46a0      	movge	r8, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007148:	bfa6      	itte	ge
 800714a:	461c      	movge	r4, r3
 800714c:	2500      	movge	r5, #0
 800714e:	2501      	movlt	r5, #1
 8007150:	f7ff fd3a 	bl	8006bc8 <_Balloc>
 8007154:	b920      	cbnz	r0, 8007160 <__mdiff+0x5c>
 8007156:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <__mdiff+0x10c>)
 8007158:	4602      	mov	r2, r0
 800715a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800715e:	e7e5      	b.n	800712c <__mdiff+0x28>
 8007160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007164:	6926      	ldr	r6, [r4, #16]
 8007166:	60c5      	str	r5, [r0, #12]
 8007168:	f104 0914 	add.w	r9, r4, #20
 800716c:	f108 0514 	add.w	r5, r8, #20
 8007170:	f100 0e14 	add.w	lr, r0, #20
 8007174:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800717c:	f108 0210 	add.w	r2, r8, #16
 8007180:	46f2      	mov	sl, lr
 8007182:	2100      	movs	r1, #0
 8007184:	f859 3b04 	ldr.w	r3, [r9], #4
 8007188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800718c:	fa1f f883 	uxth.w	r8, r3
 8007190:	fa11 f18b 	uxtah	r1, r1, fp
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	eba1 0808 	sub.w	r8, r1, r8
 800719a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800719e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071a2:	fa1f f888 	uxth.w	r8, r8
 80071a6:	1419      	asrs	r1, r3, #16
 80071a8:	454e      	cmp	r6, r9
 80071aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071ae:	f84a 3b04 	str.w	r3, [sl], #4
 80071b2:	d8e7      	bhi.n	8007184 <__mdiff+0x80>
 80071b4:	1b33      	subs	r3, r6, r4
 80071b6:	3b15      	subs	r3, #21
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	3304      	adds	r3, #4
 80071be:	3415      	adds	r4, #21
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	bf38      	it	cc
 80071c4:	2304      	movcc	r3, #4
 80071c6:	441d      	add	r5, r3
 80071c8:	4473      	add	r3, lr
 80071ca:	469e      	mov	lr, r3
 80071cc:	462e      	mov	r6, r5
 80071ce:	4566      	cmp	r6, ip
 80071d0:	d30e      	bcc.n	80071f0 <__mdiff+0xec>
 80071d2:	f10c 0203 	add.w	r2, ip, #3
 80071d6:	1b52      	subs	r2, r2, r5
 80071d8:	f022 0203 	bic.w	r2, r2, #3
 80071dc:	3d03      	subs	r5, #3
 80071de:	45ac      	cmp	ip, r5
 80071e0:	bf38      	it	cc
 80071e2:	2200      	movcc	r2, #0
 80071e4:	441a      	add	r2, r3
 80071e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071ea:	b17b      	cbz	r3, 800720c <__mdiff+0x108>
 80071ec:	6107      	str	r7, [r0, #16]
 80071ee:	e7a3      	b.n	8007138 <__mdiff+0x34>
 80071f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80071f4:	fa11 f288 	uxtah	r2, r1, r8
 80071f8:	1414      	asrs	r4, r2, #16
 80071fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071fe:	b292      	uxth	r2, r2
 8007200:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007204:	f84e 2b04 	str.w	r2, [lr], #4
 8007208:	1421      	asrs	r1, r4, #16
 800720a:	e7e0      	b.n	80071ce <__mdiff+0xca>
 800720c:	3f01      	subs	r7, #1
 800720e:	e7ea      	b.n	80071e6 <__mdiff+0xe2>
 8007210:	08009424 	.word	0x08009424
 8007214:	08009435 	.word	0x08009435

08007218 <__d2b>:
 8007218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800721c:	4689      	mov	r9, r1
 800721e:	2101      	movs	r1, #1
 8007220:	ec57 6b10 	vmov	r6, r7, d0
 8007224:	4690      	mov	r8, r2
 8007226:	f7ff fccf 	bl	8006bc8 <_Balloc>
 800722a:	4604      	mov	r4, r0
 800722c:	b930      	cbnz	r0, 800723c <__d2b+0x24>
 800722e:	4602      	mov	r2, r0
 8007230:	4b25      	ldr	r3, [pc, #148]	; (80072c8 <__d2b+0xb0>)
 8007232:	4826      	ldr	r0, [pc, #152]	; (80072cc <__d2b+0xb4>)
 8007234:	f240 310a 	movw	r1, #778	; 0x30a
 8007238:	f000 faac 	bl	8007794 <__assert_func>
 800723c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007244:	bb35      	cbnz	r5, 8007294 <__d2b+0x7c>
 8007246:	2e00      	cmp	r6, #0
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	d028      	beq.n	800729e <__d2b+0x86>
 800724c:	4668      	mov	r0, sp
 800724e:	9600      	str	r6, [sp, #0]
 8007250:	f7ff fd82 	bl	8006d58 <__lo0bits>
 8007254:	9900      	ldr	r1, [sp, #0]
 8007256:	b300      	cbz	r0, 800729a <__d2b+0x82>
 8007258:	9a01      	ldr	r2, [sp, #4]
 800725a:	f1c0 0320 	rsb	r3, r0, #32
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	430b      	orrs	r3, r1
 8007264:	40c2      	lsrs	r2, r0
 8007266:	6163      	str	r3, [r4, #20]
 8007268:	9201      	str	r2, [sp, #4]
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	61a3      	str	r3, [r4, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf14      	ite	ne
 8007272:	2202      	movne	r2, #2
 8007274:	2201      	moveq	r2, #1
 8007276:	6122      	str	r2, [r4, #16]
 8007278:	b1d5      	cbz	r5, 80072b0 <__d2b+0x98>
 800727a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800727e:	4405      	add	r5, r0
 8007280:	f8c9 5000 	str.w	r5, [r9]
 8007284:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007288:	f8c8 0000 	str.w	r0, [r8]
 800728c:	4620      	mov	r0, r4
 800728e:	b003      	add	sp, #12
 8007290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007298:	e7d5      	b.n	8007246 <__d2b+0x2e>
 800729a:	6161      	str	r1, [r4, #20]
 800729c:	e7e5      	b.n	800726a <__d2b+0x52>
 800729e:	a801      	add	r0, sp, #4
 80072a0:	f7ff fd5a 	bl	8006d58 <__lo0bits>
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	6163      	str	r3, [r4, #20]
 80072a8:	2201      	movs	r2, #1
 80072aa:	6122      	str	r2, [r4, #16]
 80072ac:	3020      	adds	r0, #32
 80072ae:	e7e3      	b.n	8007278 <__d2b+0x60>
 80072b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072b8:	f8c9 0000 	str.w	r0, [r9]
 80072bc:	6918      	ldr	r0, [r3, #16]
 80072be:	f7ff fd2b 	bl	8006d18 <__hi0bits>
 80072c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072c6:	e7df      	b.n	8007288 <__d2b+0x70>
 80072c8:	08009424 	.word	0x08009424
 80072cc:	08009435 	.word	0x08009435

080072d0 <_calloc_r>:
 80072d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072d2:	fba1 2402 	umull	r2, r4, r1, r2
 80072d6:	b94c      	cbnz	r4, 80072ec <_calloc_r+0x1c>
 80072d8:	4611      	mov	r1, r2
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	f000 f87a 	bl	80073d4 <_malloc_r>
 80072e0:	9a01      	ldr	r2, [sp, #4]
 80072e2:	4605      	mov	r5, r0
 80072e4:	b930      	cbnz	r0, 80072f4 <_calloc_r+0x24>
 80072e6:	4628      	mov	r0, r5
 80072e8:	b003      	add	sp, #12
 80072ea:	bd30      	pop	{r4, r5, pc}
 80072ec:	220c      	movs	r2, #12
 80072ee:	6002      	str	r2, [r0, #0]
 80072f0:	2500      	movs	r5, #0
 80072f2:	e7f8      	b.n	80072e6 <_calloc_r+0x16>
 80072f4:	4621      	mov	r1, r4
 80072f6:	f7fe f8b5 	bl	8005464 <memset>
 80072fa:	e7f4      	b.n	80072e6 <_calloc_r+0x16>

080072fc <_free_r>:
 80072fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072fe:	2900      	cmp	r1, #0
 8007300:	d044      	beq.n	800738c <_free_r+0x90>
 8007302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007306:	9001      	str	r0, [sp, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f1a1 0404 	sub.w	r4, r1, #4
 800730e:	bfb8      	it	lt
 8007310:	18e4      	addlt	r4, r4, r3
 8007312:	f000 fa9b 	bl	800784c <__malloc_lock>
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <_free_r+0x94>)
 8007318:	9801      	ldr	r0, [sp, #4]
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	b933      	cbnz	r3, 800732c <_free_r+0x30>
 800731e:	6063      	str	r3, [r4, #4]
 8007320:	6014      	str	r4, [r2, #0]
 8007322:	b003      	add	sp, #12
 8007324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007328:	f000 ba96 	b.w	8007858 <__malloc_unlock>
 800732c:	42a3      	cmp	r3, r4
 800732e:	d908      	bls.n	8007342 <_free_r+0x46>
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	1961      	adds	r1, r4, r5
 8007334:	428b      	cmp	r3, r1
 8007336:	bf01      	itttt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	1949      	addeq	r1, r1, r5
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	e7ed      	b.n	800731e <_free_r+0x22>
 8007342:	461a      	mov	r2, r3
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b10b      	cbz	r3, 800734c <_free_r+0x50>
 8007348:	42a3      	cmp	r3, r4
 800734a:	d9fa      	bls.n	8007342 <_free_r+0x46>
 800734c:	6811      	ldr	r1, [r2, #0]
 800734e:	1855      	adds	r5, r2, r1
 8007350:	42a5      	cmp	r5, r4
 8007352:	d10b      	bne.n	800736c <_free_r+0x70>
 8007354:	6824      	ldr	r4, [r4, #0]
 8007356:	4421      	add	r1, r4
 8007358:	1854      	adds	r4, r2, r1
 800735a:	42a3      	cmp	r3, r4
 800735c:	6011      	str	r1, [r2, #0]
 800735e:	d1e0      	bne.n	8007322 <_free_r+0x26>
 8007360:	681c      	ldr	r4, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	4421      	add	r1, r4
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	e7da      	b.n	8007322 <_free_r+0x26>
 800736c:	d902      	bls.n	8007374 <_free_r+0x78>
 800736e:	230c      	movs	r3, #12
 8007370:	6003      	str	r3, [r0, #0]
 8007372:	e7d6      	b.n	8007322 <_free_r+0x26>
 8007374:	6825      	ldr	r5, [r4, #0]
 8007376:	1961      	adds	r1, r4, r5
 8007378:	428b      	cmp	r3, r1
 800737a:	bf04      	itt	eq
 800737c:	6819      	ldreq	r1, [r3, #0]
 800737e:	685b      	ldreq	r3, [r3, #4]
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	bf04      	itt	eq
 8007384:	1949      	addeq	r1, r1, r5
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	6054      	str	r4, [r2, #4]
 800738a:	e7ca      	b.n	8007322 <_free_r+0x26>
 800738c:	b003      	add	sp, #12
 800738e:	bd30      	pop	{r4, r5, pc}
 8007390:	200008d8 	.word	0x200008d8

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0e      	ldr	r6, [pc, #56]	; (80073d0 <sbrk_aligned+0x3c>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f000 f9e8 	bl	8007774 <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 f9e3 	bl	8007774 <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d00a      	beq.n	80073c8 <sbrk_aligned+0x34>
 80073b2:	1cc4      	adds	r4, r0, #3
 80073b4:	f024 0403 	bic.w	r4, r4, #3
 80073b8:	42a0      	cmp	r0, r4
 80073ba:	d007      	beq.n	80073cc <sbrk_aligned+0x38>
 80073bc:	1a21      	subs	r1, r4, r0
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 f9d8 	bl	8007774 <_sbrk_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	d101      	bne.n	80073cc <sbrk_aligned+0x38>
 80073c8:	f04f 34ff 	mov.w	r4, #4294967295
 80073cc:	4620      	mov	r0, r4
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	200008dc 	.word	0x200008dc

080073d4 <_malloc_r>:
 80073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d8:	1ccd      	adds	r5, r1, #3
 80073da:	f025 0503 	bic.w	r5, r5, #3
 80073de:	3508      	adds	r5, #8
 80073e0:	2d0c      	cmp	r5, #12
 80073e2:	bf38      	it	cc
 80073e4:	250c      	movcc	r5, #12
 80073e6:	2d00      	cmp	r5, #0
 80073e8:	4607      	mov	r7, r0
 80073ea:	db01      	blt.n	80073f0 <_malloc_r+0x1c>
 80073ec:	42a9      	cmp	r1, r5
 80073ee:	d905      	bls.n	80073fc <_malloc_r+0x28>
 80073f0:	230c      	movs	r3, #12
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	2600      	movs	r6, #0
 80073f6:	4630      	mov	r0, r6
 80073f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073fc:	4e2e      	ldr	r6, [pc, #184]	; (80074b8 <_malloc_r+0xe4>)
 80073fe:	f000 fa25 	bl	800784c <__malloc_lock>
 8007402:	6833      	ldr	r3, [r6, #0]
 8007404:	461c      	mov	r4, r3
 8007406:	bb34      	cbnz	r4, 8007456 <_malloc_r+0x82>
 8007408:	4629      	mov	r1, r5
 800740a:	4638      	mov	r0, r7
 800740c:	f7ff ffc2 	bl	8007394 <sbrk_aligned>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	4604      	mov	r4, r0
 8007414:	d14d      	bne.n	80074b2 <_malloc_r+0xde>
 8007416:	6834      	ldr	r4, [r6, #0]
 8007418:	4626      	mov	r6, r4
 800741a:	2e00      	cmp	r6, #0
 800741c:	d140      	bne.n	80074a0 <_malloc_r+0xcc>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	4631      	mov	r1, r6
 8007422:	4638      	mov	r0, r7
 8007424:	eb04 0803 	add.w	r8, r4, r3
 8007428:	f000 f9a4 	bl	8007774 <_sbrk_r>
 800742c:	4580      	cmp	r8, r0
 800742e:	d13a      	bne.n	80074a6 <_malloc_r+0xd2>
 8007430:	6821      	ldr	r1, [r4, #0]
 8007432:	3503      	adds	r5, #3
 8007434:	1a6d      	subs	r5, r5, r1
 8007436:	f025 0503 	bic.w	r5, r5, #3
 800743a:	3508      	adds	r5, #8
 800743c:	2d0c      	cmp	r5, #12
 800743e:	bf38      	it	cc
 8007440:	250c      	movcc	r5, #12
 8007442:	4629      	mov	r1, r5
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ffa5 	bl	8007394 <sbrk_aligned>
 800744a:	3001      	adds	r0, #1
 800744c:	d02b      	beq.n	80074a6 <_malloc_r+0xd2>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	442b      	add	r3, r5
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	e00e      	b.n	8007474 <_malloc_r+0xa0>
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	1b52      	subs	r2, r2, r5
 800745a:	d41e      	bmi.n	800749a <_malloc_r+0xc6>
 800745c:	2a0b      	cmp	r2, #11
 800745e:	d916      	bls.n	800748e <_malloc_r+0xba>
 8007460:	1961      	adds	r1, r4, r5
 8007462:	42a3      	cmp	r3, r4
 8007464:	6025      	str	r5, [r4, #0]
 8007466:	bf18      	it	ne
 8007468:	6059      	strne	r1, [r3, #4]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	bf08      	it	eq
 800746e:	6031      	streq	r1, [r6, #0]
 8007470:	5162      	str	r2, [r4, r5]
 8007472:	604b      	str	r3, [r1, #4]
 8007474:	4638      	mov	r0, r7
 8007476:	f104 060b 	add.w	r6, r4, #11
 800747a:	f000 f9ed 	bl	8007858 <__malloc_unlock>
 800747e:	f026 0607 	bic.w	r6, r6, #7
 8007482:	1d23      	adds	r3, r4, #4
 8007484:	1af2      	subs	r2, r6, r3
 8007486:	d0b6      	beq.n	80073f6 <_malloc_r+0x22>
 8007488:	1b9b      	subs	r3, r3, r6
 800748a:	50a3      	str	r3, [r4, r2]
 800748c:	e7b3      	b.n	80073f6 <_malloc_r+0x22>
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	42a3      	cmp	r3, r4
 8007492:	bf0c      	ite	eq
 8007494:	6032      	streq	r2, [r6, #0]
 8007496:	605a      	strne	r2, [r3, #4]
 8007498:	e7ec      	b.n	8007474 <_malloc_r+0xa0>
 800749a:	4623      	mov	r3, r4
 800749c:	6864      	ldr	r4, [r4, #4]
 800749e:	e7b2      	b.n	8007406 <_malloc_r+0x32>
 80074a0:	4634      	mov	r4, r6
 80074a2:	6876      	ldr	r6, [r6, #4]
 80074a4:	e7b9      	b.n	800741a <_malloc_r+0x46>
 80074a6:	230c      	movs	r3, #12
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 f9d4 	bl	8007858 <__malloc_unlock>
 80074b0:	e7a1      	b.n	80073f6 <_malloc_r+0x22>
 80074b2:	6025      	str	r5, [r4, #0]
 80074b4:	e7de      	b.n	8007474 <_malloc_r+0xa0>
 80074b6:	bf00      	nop
 80074b8:	200008d8 	.word	0x200008d8

080074bc <__ssputs_r>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	688e      	ldr	r6, [r1, #8]
 80074c2:	429e      	cmp	r6, r3
 80074c4:	4682      	mov	sl, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4690      	mov	r8, r2
 80074ca:	461f      	mov	r7, r3
 80074cc:	d838      	bhi.n	8007540 <__ssputs_r+0x84>
 80074ce:	898a      	ldrh	r2, [r1, #12]
 80074d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074d4:	d032      	beq.n	800753c <__ssputs_r+0x80>
 80074d6:	6825      	ldr	r5, [r4, #0]
 80074d8:	6909      	ldr	r1, [r1, #16]
 80074da:	eba5 0901 	sub.w	r9, r5, r1
 80074de:	6965      	ldr	r5, [r4, #20]
 80074e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074e8:	3301      	adds	r3, #1
 80074ea:	444b      	add	r3, r9
 80074ec:	106d      	asrs	r5, r5, #1
 80074ee:	429d      	cmp	r5, r3
 80074f0:	bf38      	it	cc
 80074f2:	461d      	movcc	r5, r3
 80074f4:	0553      	lsls	r3, r2, #21
 80074f6:	d531      	bpl.n	800755c <__ssputs_r+0xa0>
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7ff ff6b 	bl	80073d4 <_malloc_r>
 80074fe:	4606      	mov	r6, r0
 8007500:	b950      	cbnz	r0, 8007518 <__ssputs_r+0x5c>
 8007502:	230c      	movs	r3, #12
 8007504:	f8ca 3000 	str.w	r3, [sl]
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	6921      	ldr	r1, [r4, #16]
 800751a:	464a      	mov	r2, r9
 800751c:	f7ff fb46 	bl	8006bac <memcpy>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	6126      	str	r6, [r4, #16]
 800752e:	6165      	str	r5, [r4, #20]
 8007530:	444e      	add	r6, r9
 8007532:	eba5 0509 	sub.w	r5, r5, r9
 8007536:	6026      	str	r6, [r4, #0]
 8007538:	60a5      	str	r5, [r4, #8]
 800753a:	463e      	mov	r6, r7
 800753c:	42be      	cmp	r6, r7
 800753e:	d900      	bls.n	8007542 <__ssputs_r+0x86>
 8007540:	463e      	mov	r6, r7
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	4632      	mov	r2, r6
 8007546:	4641      	mov	r1, r8
 8007548:	f000 f966 	bl	8007818 <memmove>
 800754c:	68a3      	ldr	r3, [r4, #8]
 800754e:	1b9b      	subs	r3, r3, r6
 8007550:	60a3      	str	r3, [r4, #8]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	4433      	add	r3, r6
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	2000      	movs	r0, #0
 800755a:	e7db      	b.n	8007514 <__ssputs_r+0x58>
 800755c:	462a      	mov	r2, r5
 800755e:	f000 f981 	bl	8007864 <_realloc_r>
 8007562:	4606      	mov	r6, r0
 8007564:	2800      	cmp	r0, #0
 8007566:	d1e1      	bne.n	800752c <__ssputs_r+0x70>
 8007568:	6921      	ldr	r1, [r4, #16]
 800756a:	4650      	mov	r0, sl
 800756c:	f7ff fec6 	bl	80072fc <_free_r>
 8007570:	e7c7      	b.n	8007502 <__ssputs_r+0x46>
	...

08007574 <_svfiprintf_r>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	4698      	mov	r8, r3
 800757a:	898b      	ldrh	r3, [r1, #12]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	b09d      	sub	sp, #116	; 0x74
 8007580:	4607      	mov	r7, r0
 8007582:	460d      	mov	r5, r1
 8007584:	4614      	mov	r4, r2
 8007586:	d50e      	bpl.n	80075a6 <_svfiprintf_r+0x32>
 8007588:	690b      	ldr	r3, [r1, #16]
 800758a:	b963      	cbnz	r3, 80075a6 <_svfiprintf_r+0x32>
 800758c:	2140      	movs	r1, #64	; 0x40
 800758e:	f7ff ff21 	bl	80073d4 <_malloc_r>
 8007592:	6028      	str	r0, [r5, #0]
 8007594:	6128      	str	r0, [r5, #16]
 8007596:	b920      	cbnz	r0, 80075a2 <_svfiprintf_r+0x2e>
 8007598:	230c      	movs	r3, #12
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e0d1      	b.n	8007746 <_svfiprintf_r+0x1d2>
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	616b      	str	r3, [r5, #20]
 80075a6:	2300      	movs	r3, #0
 80075a8:	9309      	str	r3, [sp, #36]	; 0x24
 80075aa:	2320      	movs	r3, #32
 80075ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b4:	2330      	movs	r3, #48	; 0x30
 80075b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007760 <_svfiprintf_r+0x1ec>
 80075ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075be:	f04f 0901 	mov.w	r9, #1
 80075c2:	4623      	mov	r3, r4
 80075c4:	469a      	mov	sl, r3
 80075c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ca:	b10a      	cbz	r2, 80075d0 <_svfiprintf_r+0x5c>
 80075cc:	2a25      	cmp	r2, #37	; 0x25
 80075ce:	d1f9      	bne.n	80075c4 <_svfiprintf_r+0x50>
 80075d0:	ebba 0b04 	subs.w	fp, sl, r4
 80075d4:	d00b      	beq.n	80075ee <_svfiprintf_r+0x7a>
 80075d6:	465b      	mov	r3, fp
 80075d8:	4622      	mov	r2, r4
 80075da:	4629      	mov	r1, r5
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff ff6d 	bl	80074bc <__ssputs_r>
 80075e2:	3001      	adds	r0, #1
 80075e4:	f000 80aa 	beq.w	800773c <_svfiprintf_r+0x1c8>
 80075e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ea:	445a      	add	r2, fp
 80075ec:	9209      	str	r2, [sp, #36]	; 0x24
 80075ee:	f89a 3000 	ldrb.w	r3, [sl]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80a2 	beq.w	800773c <_svfiprintf_r+0x1c8>
 80075f8:	2300      	movs	r3, #0
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007602:	f10a 0a01 	add.w	sl, sl, #1
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800760e:	931a      	str	r3, [sp, #104]	; 0x68
 8007610:	4654      	mov	r4, sl
 8007612:	2205      	movs	r2, #5
 8007614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007618:	4851      	ldr	r0, [pc, #324]	; (8007760 <_svfiprintf_r+0x1ec>)
 800761a:	f7f8 fde9 	bl	80001f0 <memchr>
 800761e:	9a04      	ldr	r2, [sp, #16]
 8007620:	b9d8      	cbnz	r0, 800765a <_svfiprintf_r+0xe6>
 8007622:	06d0      	lsls	r0, r2, #27
 8007624:	bf44      	itt	mi
 8007626:	2320      	movmi	r3, #32
 8007628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800762c:	0711      	lsls	r1, r2, #28
 800762e:	bf44      	itt	mi
 8007630:	232b      	movmi	r3, #43	; 0x2b
 8007632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007636:	f89a 3000 	ldrb.w	r3, [sl]
 800763a:	2b2a      	cmp	r3, #42	; 0x2a
 800763c:	d015      	beq.n	800766a <_svfiprintf_r+0xf6>
 800763e:	9a07      	ldr	r2, [sp, #28]
 8007640:	4654      	mov	r4, sl
 8007642:	2000      	movs	r0, #0
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	4621      	mov	r1, r4
 800764a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800764e:	3b30      	subs	r3, #48	; 0x30
 8007650:	2b09      	cmp	r3, #9
 8007652:	d94e      	bls.n	80076f2 <_svfiprintf_r+0x17e>
 8007654:	b1b0      	cbz	r0, 8007684 <_svfiprintf_r+0x110>
 8007656:	9207      	str	r2, [sp, #28]
 8007658:	e014      	b.n	8007684 <_svfiprintf_r+0x110>
 800765a:	eba0 0308 	sub.w	r3, r0, r8
 800765e:	fa09 f303 	lsl.w	r3, r9, r3
 8007662:	4313      	orrs	r3, r2
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	46a2      	mov	sl, r4
 8007668:	e7d2      	b.n	8007610 <_svfiprintf_r+0x9c>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	9103      	str	r1, [sp, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	bfbb      	ittet	lt
 8007676:	425b      	neglt	r3, r3
 8007678:	f042 0202 	orrlt.w	r2, r2, #2
 800767c:	9307      	strge	r3, [sp, #28]
 800767e:	9307      	strlt	r3, [sp, #28]
 8007680:	bfb8      	it	lt
 8007682:	9204      	strlt	r2, [sp, #16]
 8007684:	7823      	ldrb	r3, [r4, #0]
 8007686:	2b2e      	cmp	r3, #46	; 0x2e
 8007688:	d10c      	bne.n	80076a4 <_svfiprintf_r+0x130>
 800768a:	7863      	ldrb	r3, [r4, #1]
 800768c:	2b2a      	cmp	r3, #42	; 0x2a
 800768e:	d135      	bne.n	80076fc <_svfiprintf_r+0x188>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	9203      	str	r2, [sp, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bfb8      	it	lt
 800769c:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a0:	3402      	adds	r4, #2
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007770 <_svfiprintf_r+0x1fc>
 80076a8:	7821      	ldrb	r1, [r4, #0]
 80076aa:	2203      	movs	r2, #3
 80076ac:	4650      	mov	r0, sl
 80076ae:	f7f8 fd9f 	bl	80001f0 <memchr>
 80076b2:	b140      	cbz	r0, 80076c6 <_svfiprintf_r+0x152>
 80076b4:	2340      	movs	r3, #64	; 0x40
 80076b6:	eba0 000a 	sub.w	r0, r0, sl
 80076ba:	fa03 f000 	lsl.w	r0, r3, r0
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	4303      	orrs	r3, r0
 80076c2:	3401      	adds	r4, #1
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ca:	4826      	ldr	r0, [pc, #152]	; (8007764 <_svfiprintf_r+0x1f0>)
 80076cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076d0:	2206      	movs	r2, #6
 80076d2:	f7f8 fd8d 	bl	80001f0 <memchr>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d038      	beq.n	800774c <_svfiprintf_r+0x1d8>
 80076da:	4b23      	ldr	r3, [pc, #140]	; (8007768 <_svfiprintf_r+0x1f4>)
 80076dc:	bb1b      	cbnz	r3, 8007726 <_svfiprintf_r+0x1b2>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	3307      	adds	r3, #7
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	3308      	adds	r3, #8
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ec:	4433      	add	r3, r6
 80076ee:	9309      	str	r3, [sp, #36]	; 0x24
 80076f0:	e767      	b.n	80075c2 <_svfiprintf_r+0x4e>
 80076f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f6:	460c      	mov	r4, r1
 80076f8:	2001      	movs	r0, #1
 80076fa:	e7a5      	b.n	8007648 <_svfiprintf_r+0xd4>
 80076fc:	2300      	movs	r3, #0
 80076fe:	3401      	adds	r4, #1
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	4619      	mov	r1, r3
 8007704:	f04f 0c0a 	mov.w	ip, #10
 8007708:	4620      	mov	r0, r4
 800770a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770e:	3a30      	subs	r2, #48	; 0x30
 8007710:	2a09      	cmp	r2, #9
 8007712:	d903      	bls.n	800771c <_svfiprintf_r+0x1a8>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0c5      	beq.n	80076a4 <_svfiprintf_r+0x130>
 8007718:	9105      	str	r1, [sp, #20]
 800771a:	e7c3      	b.n	80076a4 <_svfiprintf_r+0x130>
 800771c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007720:	4604      	mov	r4, r0
 8007722:	2301      	movs	r3, #1
 8007724:	e7f0      	b.n	8007708 <_svfiprintf_r+0x194>
 8007726:	ab03      	add	r3, sp, #12
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	462a      	mov	r2, r5
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <_svfiprintf_r+0x1f8>)
 800772e:	a904      	add	r1, sp, #16
 8007730:	4638      	mov	r0, r7
 8007732:	f7fd ff3f 	bl	80055b4 <_printf_float>
 8007736:	1c42      	adds	r2, r0, #1
 8007738:	4606      	mov	r6, r0
 800773a:	d1d6      	bne.n	80076ea <_svfiprintf_r+0x176>
 800773c:	89ab      	ldrh	r3, [r5, #12]
 800773e:	065b      	lsls	r3, r3, #25
 8007740:	f53f af2c 	bmi.w	800759c <_svfiprintf_r+0x28>
 8007744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007746:	b01d      	add	sp, #116	; 0x74
 8007748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <_svfiprintf_r+0x1f8>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	4638      	mov	r0, r7
 8007758:	f7fe f9d0 	bl	8005afc <_printf_i>
 800775c:	e7eb      	b.n	8007736 <_svfiprintf_r+0x1c2>
 800775e:	bf00      	nop
 8007760:	08009594 	.word	0x08009594
 8007764:	0800959e 	.word	0x0800959e
 8007768:	080055b5 	.word	0x080055b5
 800776c:	080074bd 	.word	0x080074bd
 8007770:	0800959a 	.word	0x0800959a

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7fa fd56 	bl	8002230 <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	200008e0 	.word	0x200008e0

08007794 <__assert_func>:
 8007794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007796:	4614      	mov	r4, r2
 8007798:	461a      	mov	r2, r3
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <__assert_func+0x2c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4605      	mov	r5, r0
 80077a0:	68d8      	ldr	r0, [r3, #12]
 80077a2:	b14c      	cbz	r4, 80077b8 <__assert_func+0x24>
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <__assert_func+0x30>)
 80077a6:	9100      	str	r1, [sp, #0]
 80077a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077ac:	4906      	ldr	r1, [pc, #24]	; (80077c8 <__assert_func+0x34>)
 80077ae:	462b      	mov	r3, r5
 80077b0:	f000 f80e 	bl	80077d0 <fiprintf>
 80077b4:	f000 faac 	bl	8007d10 <abort>
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <__assert_func+0x38>)
 80077ba:	461c      	mov	r4, r3
 80077bc:	e7f3      	b.n	80077a6 <__assert_func+0x12>
 80077be:	bf00      	nop
 80077c0:	20000014 	.word	0x20000014
 80077c4:	080095a5 	.word	0x080095a5
 80077c8:	080095b2 	.word	0x080095b2
 80077cc:	080095e0 	.word	0x080095e0

080077d0 <fiprintf>:
 80077d0:	b40e      	push	{r1, r2, r3}
 80077d2:	b503      	push	{r0, r1, lr}
 80077d4:	4601      	mov	r1, r0
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <fiprintf+0x20>)
 80077da:	f853 2b04 	ldr.w	r2, [r3], #4
 80077de:	6800      	ldr	r0, [r0, #0]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	f000 f897 	bl	8007914 <_vfiprintf_r>
 80077e6:	b002      	add	sp, #8
 80077e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ec:	b003      	add	sp, #12
 80077ee:	4770      	bx	lr
 80077f0:	20000014 	.word	0x20000014

080077f4 <__ascii_mbtowc>:
 80077f4:	b082      	sub	sp, #8
 80077f6:	b901      	cbnz	r1, 80077fa <__ascii_mbtowc+0x6>
 80077f8:	a901      	add	r1, sp, #4
 80077fa:	b142      	cbz	r2, 800780e <__ascii_mbtowc+0x1a>
 80077fc:	b14b      	cbz	r3, 8007812 <__ascii_mbtowc+0x1e>
 80077fe:	7813      	ldrb	r3, [r2, #0]
 8007800:	600b      	str	r3, [r1, #0]
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	1e10      	subs	r0, r2, #0
 8007806:	bf18      	it	ne
 8007808:	2001      	movne	r0, #1
 800780a:	b002      	add	sp, #8
 800780c:	4770      	bx	lr
 800780e:	4610      	mov	r0, r2
 8007810:	e7fb      	b.n	800780a <__ascii_mbtowc+0x16>
 8007812:	f06f 0001 	mvn.w	r0, #1
 8007816:	e7f8      	b.n	800780a <__ascii_mbtowc+0x16>

08007818 <memmove>:
 8007818:	4288      	cmp	r0, r1
 800781a:	b510      	push	{r4, lr}
 800781c:	eb01 0402 	add.w	r4, r1, r2
 8007820:	d902      	bls.n	8007828 <memmove+0x10>
 8007822:	4284      	cmp	r4, r0
 8007824:	4623      	mov	r3, r4
 8007826:	d807      	bhi.n	8007838 <memmove+0x20>
 8007828:	1e43      	subs	r3, r0, #1
 800782a:	42a1      	cmp	r1, r4
 800782c:	d008      	beq.n	8007840 <memmove+0x28>
 800782e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007836:	e7f8      	b.n	800782a <memmove+0x12>
 8007838:	4402      	add	r2, r0
 800783a:	4601      	mov	r1, r0
 800783c:	428a      	cmp	r2, r1
 800783e:	d100      	bne.n	8007842 <memmove+0x2a>
 8007840:	bd10      	pop	{r4, pc}
 8007842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800784a:	e7f7      	b.n	800783c <memmove+0x24>

0800784c <__malloc_lock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_lock+0x8>)
 800784e:	f000 bc1f 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007852:	bf00      	nop
 8007854:	200008e4 	.word	0x200008e4

08007858 <__malloc_unlock>:
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <__malloc_unlock+0x8>)
 800785a:	f000 bc1a 	b.w	8008092 <__retarget_lock_release_recursive>
 800785e:	bf00      	nop
 8007860:	200008e4 	.word	0x200008e4

08007864 <_realloc_r>:
 8007864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007868:	4680      	mov	r8, r0
 800786a:	4614      	mov	r4, r2
 800786c:	460e      	mov	r6, r1
 800786e:	b921      	cbnz	r1, 800787a <_realloc_r+0x16>
 8007870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	4611      	mov	r1, r2
 8007876:	f7ff bdad 	b.w	80073d4 <_malloc_r>
 800787a:	b92a      	cbnz	r2, 8007888 <_realloc_r+0x24>
 800787c:	f7ff fd3e 	bl	80072fc <_free_r>
 8007880:	4625      	mov	r5, r4
 8007882:	4628      	mov	r0, r5
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	f000 fc6a 	bl	8008160 <_malloc_usable_size_r>
 800788c:	4284      	cmp	r4, r0
 800788e:	4607      	mov	r7, r0
 8007890:	d802      	bhi.n	8007898 <_realloc_r+0x34>
 8007892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007896:	d812      	bhi.n	80078be <_realloc_r+0x5a>
 8007898:	4621      	mov	r1, r4
 800789a:	4640      	mov	r0, r8
 800789c:	f7ff fd9a 	bl	80073d4 <_malloc_r>
 80078a0:	4605      	mov	r5, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d0ed      	beq.n	8007882 <_realloc_r+0x1e>
 80078a6:	42bc      	cmp	r4, r7
 80078a8:	4622      	mov	r2, r4
 80078aa:	4631      	mov	r1, r6
 80078ac:	bf28      	it	cs
 80078ae:	463a      	movcs	r2, r7
 80078b0:	f7ff f97c 	bl	8006bac <memcpy>
 80078b4:	4631      	mov	r1, r6
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff fd20 	bl	80072fc <_free_r>
 80078bc:	e7e1      	b.n	8007882 <_realloc_r+0x1e>
 80078be:	4635      	mov	r5, r6
 80078c0:	e7df      	b.n	8007882 <_realloc_r+0x1e>

080078c2 <__sfputc_r>:
 80078c2:	6893      	ldr	r3, [r2, #8]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	b410      	push	{r4}
 80078ca:	6093      	str	r3, [r2, #8]
 80078cc:	da08      	bge.n	80078e0 <__sfputc_r+0x1e>
 80078ce:	6994      	ldr	r4, [r2, #24]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	db01      	blt.n	80078d8 <__sfputc_r+0x16>
 80078d4:	290a      	cmp	r1, #10
 80078d6:	d103      	bne.n	80078e0 <__sfputc_r+0x1e>
 80078d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078dc:	f000 b94a 	b.w	8007b74 <__swbuf_r>
 80078e0:	6813      	ldr	r3, [r2, #0]
 80078e2:	1c58      	adds	r0, r3, #1
 80078e4:	6010      	str	r0, [r2, #0]
 80078e6:	7019      	strb	r1, [r3, #0]
 80078e8:	4608      	mov	r0, r1
 80078ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <__sfputs_r>:
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	18d5      	adds	r5, r2, r3
 80078fa:	42ac      	cmp	r4, r5
 80078fc:	d101      	bne.n	8007902 <__sfputs_r+0x12>
 80078fe:	2000      	movs	r0, #0
 8007900:	e007      	b.n	8007912 <__sfputs_r+0x22>
 8007902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007906:	463a      	mov	r2, r7
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ffda 	bl	80078c2 <__sfputc_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d1f3      	bne.n	80078fa <__sfputs_r+0xa>
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007914 <_vfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	460d      	mov	r5, r1
 800791a:	b09d      	sub	sp, #116	; 0x74
 800791c:	4614      	mov	r4, r2
 800791e:	4698      	mov	r8, r3
 8007920:	4606      	mov	r6, r0
 8007922:	b118      	cbz	r0, 800792c <_vfiprintf_r+0x18>
 8007924:	6983      	ldr	r3, [r0, #24]
 8007926:	b90b      	cbnz	r3, 800792c <_vfiprintf_r+0x18>
 8007928:	f000 fb14 	bl	8007f54 <__sinit>
 800792c:	4b89      	ldr	r3, [pc, #548]	; (8007b54 <_vfiprintf_r+0x240>)
 800792e:	429d      	cmp	r5, r3
 8007930:	d11b      	bne.n	800796a <_vfiprintf_r+0x56>
 8007932:	6875      	ldr	r5, [r6, #4]
 8007934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	d405      	bmi.n	8007946 <_vfiprintf_r+0x32>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	059a      	lsls	r2, r3, #22
 800793e:	d402      	bmi.n	8007946 <_vfiprintf_r+0x32>
 8007940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007942:	f000 fba5 	bl	8008090 <__retarget_lock_acquire_recursive>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	d501      	bpl.n	8007950 <_vfiprintf_r+0x3c>
 800794c:	692b      	ldr	r3, [r5, #16]
 800794e:	b9eb      	cbnz	r3, 800798c <_vfiprintf_r+0x78>
 8007950:	4629      	mov	r1, r5
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f96e 	bl	8007c34 <__swsetup_r>
 8007958:	b1c0      	cbz	r0, 800798c <_vfiprintf_r+0x78>
 800795a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800795c:	07dc      	lsls	r4, r3, #31
 800795e:	d50e      	bpl.n	800797e <_vfiprintf_r+0x6a>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	b01d      	add	sp, #116	; 0x74
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4b7b      	ldr	r3, [pc, #492]	; (8007b58 <_vfiprintf_r+0x244>)
 800796c:	429d      	cmp	r5, r3
 800796e:	d101      	bne.n	8007974 <_vfiprintf_r+0x60>
 8007970:	68b5      	ldr	r5, [r6, #8]
 8007972:	e7df      	b.n	8007934 <_vfiprintf_r+0x20>
 8007974:	4b79      	ldr	r3, [pc, #484]	; (8007b5c <_vfiprintf_r+0x248>)
 8007976:	429d      	cmp	r5, r3
 8007978:	bf08      	it	eq
 800797a:	68f5      	ldreq	r5, [r6, #12]
 800797c:	e7da      	b.n	8007934 <_vfiprintf_r+0x20>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4ed      	bmi.n	8007960 <_vfiprintf_r+0x4c>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f000 fb84 	bl	8008092 <__retarget_lock_release_recursive>
 800798a:	e7e9      	b.n	8007960 <_vfiprintf_r+0x4c>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b60 <_vfiprintf_r+0x24c>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0xa2>
 80079b2:	2a25      	cmp	r2, #37	; 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x96>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xc0>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ff94 	bl	80078f0 <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80aa 	beq.w	8007b22 <_vfiprintf_r+0x20e>
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	; 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a2 	beq.w	8007b22 <_vfiprintf_r+0x20e>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f4:	931a      	str	r3, [sp, #104]	; 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4858      	ldr	r0, [pc, #352]	; (8007b60 <_vfiprintf_r+0x24c>)
 8007a00:	f7f8 fbf6 	bl	80001f0 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x12c>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	; 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x13c>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94e      	bls.n	8007ad8 <_vfiprintf_r+0x1c4>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x156>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x156>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xe2>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d10c      	bne.n	8007a8a <_vfiprintf_r+0x176>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d135      	bne.n	8007ae2 <_vfiprintf_r+0x1ce>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfb8      	it	lt
 8007a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a86:	3402      	adds	r4, #2
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b70 <_vfiprintf_r+0x25c>
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	2203      	movs	r2, #3
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7f8 fbac 	bl	80001f0 <memchr>
 8007a98:	b140      	cbz	r0, 8007aac <_vfiprintf_r+0x198>
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	eba0 000a 	sub.w	r0, r0, sl
 8007aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	4303      	orrs	r3, r0
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	482c      	ldr	r0, [pc, #176]	; (8007b64 <_vfiprintf_r+0x250>)
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	f7f8 fb9a 	bl	80001f0 <memchr>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d03f      	beq.n	8007b40 <_vfiprintf_r+0x22c>
 8007ac0:	4b29      	ldr	r3, [pc, #164]	; (8007b68 <_vfiprintf_r+0x254>)
 8007ac2:	bb1b      	cbnz	r3, 8007b0c <_vfiprintf_r+0x1f8>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	3308      	adds	r3, #8
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad2:	443b      	add	r3, r7
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	e767      	b.n	80079a8 <_vfiprintf_r+0x94>
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	460c      	mov	r4, r1
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7a5      	b.n	8007a2e <_vfiprintf_r+0x11a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af4:	3a30      	subs	r2, #48	; 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d903      	bls.n	8007b02 <_vfiprintf_r+0x1ee>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c5      	beq.n	8007a8a <_vfiprintf_r+0x176>
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	e7c3      	b.n	8007a8a <_vfiprintf_r+0x176>
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	4604      	mov	r4, r0
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f0      	b.n	8007aee <_vfiprintf_r+0x1da>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <_vfiprintf_r+0x258>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7fd fd4c 	bl	80055b4 <_printf_float>
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	1c78      	adds	r0, r7, #1
 8007b20:	d1d6      	bne.n	8007ad0 <_vfiprintf_r+0x1bc>
 8007b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b24:	07d9      	lsls	r1, r3, #31
 8007b26:	d405      	bmi.n	8007b34 <_vfiprintf_r+0x220>
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	059a      	lsls	r2, r3, #22
 8007b2c:	d402      	bmi.n	8007b34 <_vfiprintf_r+0x220>
 8007b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b30:	f000 faaf 	bl	8008092 <__retarget_lock_release_recursive>
 8007b34:	89ab      	ldrh	r3, [r5, #12]
 8007b36:	065b      	lsls	r3, r3, #25
 8007b38:	f53f af12 	bmi.w	8007960 <_vfiprintf_r+0x4c>
 8007b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3e:	e711      	b.n	8007964 <_vfiprintf_r+0x50>
 8007b40:	ab03      	add	r3, sp, #12
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	462a      	mov	r2, r5
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <_vfiprintf_r+0x258>)
 8007b48:	a904      	add	r1, sp, #16
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7fd ffd6 	bl	8005afc <_printf_i>
 8007b50:	e7e4      	b.n	8007b1c <_vfiprintf_r+0x208>
 8007b52:	bf00      	nop
 8007b54:	0800960c 	.word	0x0800960c
 8007b58:	0800962c 	.word	0x0800962c
 8007b5c:	080095ec 	.word	0x080095ec
 8007b60:	08009594 	.word	0x08009594
 8007b64:	0800959e 	.word	0x0800959e
 8007b68:	080055b5 	.word	0x080055b5
 8007b6c:	080078f1 	.word	0x080078f1
 8007b70:	0800959a 	.word	0x0800959a

08007b74 <__swbuf_r>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	460e      	mov	r6, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	b118      	cbz	r0, 8007b86 <__swbuf_r+0x12>
 8007b7e:	6983      	ldr	r3, [r0, #24]
 8007b80:	b90b      	cbnz	r3, 8007b86 <__swbuf_r+0x12>
 8007b82:	f000 f9e7 	bl	8007f54 <__sinit>
 8007b86:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <__swbuf_r+0x98>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d12b      	bne.n	8007be4 <__swbuf_r+0x70>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	69a3      	ldr	r3, [r4, #24]
 8007b90:	60a3      	str	r3, [r4, #8]
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	071a      	lsls	r2, r3, #28
 8007b96:	d52f      	bpl.n	8007bf8 <__swbuf_r+0x84>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	b36b      	cbz	r3, 8007bf8 <__swbuf_r+0x84>
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	1ac0      	subs	r0, r0, r3
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	b2f6      	uxtb	r6, r6
 8007ba6:	4283      	cmp	r3, r0
 8007ba8:	4637      	mov	r7, r6
 8007baa:	dc04      	bgt.n	8007bb6 <__swbuf_r+0x42>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f93c 	bl	8007e2c <_fflush_r>
 8007bb4:	bb30      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	60a3      	str	r3, [r4, #8]
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	6022      	str	r2, [r4, #0]
 8007bc2:	701e      	strb	r6, [r3, #0]
 8007bc4:	6963      	ldr	r3, [r4, #20]
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	4283      	cmp	r3, r0
 8007bca:	d004      	beq.n	8007bd6 <__swbuf_r+0x62>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	07db      	lsls	r3, r3, #31
 8007bd0:	d506      	bpl.n	8007be0 <__swbuf_r+0x6c>
 8007bd2:	2e0a      	cmp	r6, #10
 8007bd4:	d104      	bne.n	8007be0 <__swbuf_r+0x6c>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f927 	bl	8007e2c <_fflush_r>
 8007bde:	b988      	cbnz	r0, 8007c04 <__swbuf_r+0x90>
 8007be0:	4638      	mov	r0, r7
 8007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <__swbuf_r+0x9c>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d101      	bne.n	8007bee <__swbuf_r+0x7a>
 8007bea:	68ac      	ldr	r4, [r5, #8]
 8007bec:	e7cf      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <__swbuf_r+0xa0>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	bf08      	it	eq
 8007bf4:	68ec      	ldreq	r4, [r5, #12]
 8007bf6:	e7ca      	b.n	8007b8e <__swbuf_r+0x1a>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 f81a 	bl	8007c34 <__swsetup_r>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0cb      	beq.n	8007b9c <__swbuf_r+0x28>
 8007c04:	f04f 37ff 	mov.w	r7, #4294967295
 8007c08:	e7ea      	b.n	8007be0 <__swbuf_r+0x6c>
 8007c0a:	bf00      	nop
 8007c0c:	0800960c 	.word	0x0800960c
 8007c10:	0800962c 	.word	0x0800962c
 8007c14:	080095ec 	.word	0x080095ec

08007c18 <__ascii_wctomb>:
 8007c18:	b149      	cbz	r1, 8007c2e <__ascii_wctomb+0x16>
 8007c1a:	2aff      	cmp	r2, #255	; 0xff
 8007c1c:	bf85      	ittet	hi
 8007c1e:	238a      	movhi	r3, #138	; 0x8a
 8007c20:	6003      	strhi	r3, [r0, #0]
 8007c22:	700a      	strbls	r2, [r1, #0]
 8007c24:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c28:	bf98      	it	ls
 8007c2a:	2001      	movls	r0, #1
 8007c2c:	4770      	bx	lr
 8007c2e:	4608      	mov	r0, r1
 8007c30:	4770      	bx	lr
	...

08007c34 <__swsetup_r>:
 8007c34:	4b32      	ldr	r3, [pc, #200]	; (8007d00 <__swsetup_r+0xcc>)
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	681d      	ldr	r5, [r3, #0]
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	b125      	cbz	r5, 8007c4a <__swsetup_r+0x16>
 8007c40:	69ab      	ldr	r3, [r5, #24]
 8007c42:	b913      	cbnz	r3, 8007c4a <__swsetup_r+0x16>
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 f985 	bl	8007f54 <__sinit>
 8007c4a:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <__swsetup_r+0xd0>)
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	d10f      	bne.n	8007c70 <__swsetup_r+0x3c>
 8007c50:	686c      	ldr	r4, [r5, #4]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c58:	0719      	lsls	r1, r3, #28
 8007c5a:	d42c      	bmi.n	8007cb6 <__swsetup_r+0x82>
 8007c5c:	06dd      	lsls	r5, r3, #27
 8007c5e:	d411      	bmi.n	8007c84 <__swsetup_r+0x50>
 8007c60:	2309      	movs	r3, #9
 8007c62:	6033      	str	r3, [r6, #0]
 8007c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	e03e      	b.n	8007cee <__swsetup_r+0xba>
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <__swsetup_r+0xd4>)
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d101      	bne.n	8007c7a <__swsetup_r+0x46>
 8007c76:	68ac      	ldr	r4, [r5, #8]
 8007c78:	e7eb      	b.n	8007c52 <__swsetup_r+0x1e>
 8007c7a:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <__swsetup_r+0xd8>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	bf08      	it	eq
 8007c80:	68ec      	ldreq	r4, [r5, #12]
 8007c82:	e7e6      	b.n	8007c52 <__swsetup_r+0x1e>
 8007c84:	0758      	lsls	r0, r3, #29
 8007c86:	d512      	bpl.n	8007cae <__swsetup_r+0x7a>
 8007c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c8a:	b141      	cbz	r1, 8007c9e <__swsetup_r+0x6a>
 8007c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c90:	4299      	cmp	r1, r3
 8007c92:	d002      	beq.n	8007c9a <__swsetup_r+0x66>
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff fb31 	bl	80072fc <_free_r>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	6063      	str	r3, [r4, #4]
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	f043 0308 	orr.w	r3, r3, #8
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	6923      	ldr	r3, [r4, #16]
 8007cb8:	b94b      	cbnz	r3, 8007cce <__swsetup_r+0x9a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d003      	beq.n	8007cce <__swsetup_r+0x9a>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f000 fa09 	bl	80080e0 <__smakebuf_r>
 8007cce:	89a0      	ldrh	r0, [r4, #12]
 8007cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cd4:	f010 0301 	ands.w	r3, r0, #1
 8007cd8:	d00a      	beq.n	8007cf0 <__swsetup_r+0xbc>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	61a3      	str	r3, [r4, #24]
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	b943      	cbnz	r3, 8007cfa <__swsetup_r+0xc6>
 8007ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cec:	d1ba      	bne.n	8007c64 <__swsetup_r+0x30>
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	0781      	lsls	r1, r0, #30
 8007cf2:	bf58      	it	pl
 8007cf4:	6963      	ldrpl	r3, [r4, #20]
 8007cf6:	60a3      	str	r3, [r4, #8]
 8007cf8:	e7f4      	b.n	8007ce4 <__swsetup_r+0xb0>
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e7f7      	b.n	8007cee <__swsetup_r+0xba>
 8007cfe:	bf00      	nop
 8007d00:	20000014 	.word	0x20000014
 8007d04:	0800960c 	.word	0x0800960c
 8007d08:	0800962c 	.word	0x0800962c
 8007d0c:	080095ec 	.word	0x080095ec

08007d10 <abort>:
 8007d10:	b508      	push	{r3, lr}
 8007d12:	2006      	movs	r0, #6
 8007d14:	f000 fa54 	bl	80081c0 <raise>
 8007d18:	2001      	movs	r0, #1
 8007d1a:	f7fa fa11 	bl	8002140 <_exit>
	...

08007d20 <__sflush_r>:
 8007d20:	898a      	ldrh	r2, [r1, #12]
 8007d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d26:	4605      	mov	r5, r0
 8007d28:	0710      	lsls	r0, r2, #28
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	d458      	bmi.n	8007de0 <__sflush_r+0xc0>
 8007d2e:	684b      	ldr	r3, [r1, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	dc05      	bgt.n	8007d40 <__sflush_r+0x20>
 8007d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dc02      	bgt.n	8007d40 <__sflush_r+0x20>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	d0f9      	beq.n	8007d3a <__sflush_r+0x1a>
 8007d46:	2300      	movs	r3, #0
 8007d48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d4c:	682f      	ldr	r7, [r5, #0]
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	d032      	beq.n	8007db8 <__sflush_r+0x98>
 8007d52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	075a      	lsls	r2, r3, #29
 8007d58:	d505      	bpl.n	8007d66 <__sflush_r+0x46>
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	1ac0      	subs	r0, r0, r3
 8007d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d60:	b10b      	cbz	r3, 8007d66 <__sflush_r+0x46>
 8007d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d64:	1ac0      	subs	r0, r0, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	4602      	mov	r2, r0
 8007d6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	4628      	mov	r0, r5
 8007d70:	47b0      	blx	r6
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	d106      	bne.n	8007d86 <__sflush_r+0x66>
 8007d78:	6829      	ldr	r1, [r5, #0]
 8007d7a:	291d      	cmp	r1, #29
 8007d7c:	d82c      	bhi.n	8007dd8 <__sflush_r+0xb8>
 8007d7e:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <__sflush_r+0x108>)
 8007d80:	40ca      	lsrs	r2, r1
 8007d82:	07d6      	lsls	r6, r2, #31
 8007d84:	d528      	bpl.n	8007dd8 <__sflush_r+0xb8>
 8007d86:	2200      	movs	r2, #0
 8007d88:	6062      	str	r2, [r4, #4]
 8007d8a:	04d9      	lsls	r1, r3, #19
 8007d8c:	6922      	ldr	r2, [r4, #16]
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	d504      	bpl.n	8007d9c <__sflush_r+0x7c>
 8007d92:	1c42      	adds	r2, r0, #1
 8007d94:	d101      	bne.n	8007d9a <__sflush_r+0x7a>
 8007d96:	682b      	ldr	r3, [r5, #0]
 8007d98:	b903      	cbnz	r3, 8007d9c <__sflush_r+0x7c>
 8007d9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d9e:	602f      	str	r7, [r5, #0]
 8007da0:	2900      	cmp	r1, #0
 8007da2:	d0ca      	beq.n	8007d3a <__sflush_r+0x1a>
 8007da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da8:	4299      	cmp	r1, r3
 8007daa:	d002      	beq.n	8007db2 <__sflush_r+0x92>
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff faa5 	bl	80072fc <_free_r>
 8007db2:	2000      	movs	r0, #0
 8007db4:	6360      	str	r0, [r4, #52]	; 0x34
 8007db6:	e7c1      	b.n	8007d3c <__sflush_r+0x1c>
 8007db8:	6a21      	ldr	r1, [r4, #32]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b0      	blx	r6
 8007dc0:	1c41      	adds	r1, r0, #1
 8007dc2:	d1c7      	bne.n	8007d54 <__sflush_r+0x34>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0c4      	beq.n	8007d54 <__sflush_r+0x34>
 8007dca:	2b1d      	cmp	r3, #29
 8007dcc:	d001      	beq.n	8007dd2 <__sflush_r+0xb2>
 8007dce:	2b16      	cmp	r3, #22
 8007dd0:	d101      	bne.n	8007dd6 <__sflush_r+0xb6>
 8007dd2:	602f      	str	r7, [r5, #0]
 8007dd4:	e7b1      	b.n	8007d3a <__sflush_r+0x1a>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e7ad      	b.n	8007d3c <__sflush_r+0x1c>
 8007de0:	690f      	ldr	r7, [r1, #16]
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	d0a9      	beq.n	8007d3a <__sflush_r+0x1a>
 8007de6:	0793      	lsls	r3, r2, #30
 8007de8:	680e      	ldr	r6, [r1, #0]
 8007dea:	bf08      	it	eq
 8007dec:	694b      	ldreq	r3, [r1, #20]
 8007dee:	600f      	str	r7, [r1, #0]
 8007df0:	bf18      	it	ne
 8007df2:	2300      	movne	r3, #0
 8007df4:	eba6 0807 	sub.w	r8, r6, r7
 8007df8:	608b      	str	r3, [r1, #8]
 8007dfa:	f1b8 0f00 	cmp.w	r8, #0
 8007dfe:	dd9c      	ble.n	8007d3a <__sflush_r+0x1a>
 8007e00:	6a21      	ldr	r1, [r4, #32]
 8007e02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e04:	4643      	mov	r3, r8
 8007e06:	463a      	mov	r2, r7
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b0      	blx	r6
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dc06      	bgt.n	8007e1e <__sflush_r+0xfe>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	e78e      	b.n	8007d3c <__sflush_r+0x1c>
 8007e1e:	4407      	add	r7, r0
 8007e20:	eba8 0800 	sub.w	r8, r8, r0
 8007e24:	e7e9      	b.n	8007dfa <__sflush_r+0xda>
 8007e26:	bf00      	nop
 8007e28:	20400001 	.word	0x20400001

08007e2c <_fflush_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	690b      	ldr	r3, [r1, #16]
 8007e30:	4605      	mov	r5, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	b913      	cbnz	r3, 8007e3c <_fflush_r+0x10>
 8007e36:	2500      	movs	r5, #0
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	b118      	cbz	r0, 8007e46 <_fflush_r+0x1a>
 8007e3e:	6983      	ldr	r3, [r0, #24]
 8007e40:	b90b      	cbnz	r3, 8007e46 <_fflush_r+0x1a>
 8007e42:	f000 f887 	bl	8007f54 <__sinit>
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <_fflush_r+0x6c>)
 8007e48:	429c      	cmp	r4, r3
 8007e4a:	d11b      	bne.n	8007e84 <_fflush_r+0x58>
 8007e4c:	686c      	ldr	r4, [r5, #4]
 8007e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0ef      	beq.n	8007e36 <_fflush_r+0xa>
 8007e56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e58:	07d0      	lsls	r0, r2, #31
 8007e5a:	d404      	bmi.n	8007e66 <_fflush_r+0x3a>
 8007e5c:	0599      	lsls	r1, r3, #22
 8007e5e:	d402      	bmi.n	8007e66 <_fflush_r+0x3a>
 8007e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e62:	f000 f915 	bl	8008090 <__retarget_lock_acquire_recursive>
 8007e66:	4628      	mov	r0, r5
 8007e68:	4621      	mov	r1, r4
 8007e6a:	f7ff ff59 	bl	8007d20 <__sflush_r>
 8007e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e70:	07da      	lsls	r2, r3, #31
 8007e72:	4605      	mov	r5, r0
 8007e74:	d4e0      	bmi.n	8007e38 <_fflush_r+0xc>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	059b      	lsls	r3, r3, #22
 8007e7a:	d4dd      	bmi.n	8007e38 <_fflush_r+0xc>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7e:	f000 f908 	bl	8008092 <__retarget_lock_release_recursive>
 8007e82:	e7d9      	b.n	8007e38 <_fflush_r+0xc>
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <_fflush_r+0x70>)
 8007e86:	429c      	cmp	r4, r3
 8007e88:	d101      	bne.n	8007e8e <_fflush_r+0x62>
 8007e8a:	68ac      	ldr	r4, [r5, #8]
 8007e8c:	e7df      	b.n	8007e4e <_fflush_r+0x22>
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <_fflush_r+0x74>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	bf08      	it	eq
 8007e94:	68ec      	ldreq	r4, [r5, #12]
 8007e96:	e7da      	b.n	8007e4e <_fflush_r+0x22>
 8007e98:	0800960c 	.word	0x0800960c
 8007e9c:	0800962c 	.word	0x0800962c
 8007ea0:	080095ec 	.word	0x080095ec

08007ea4 <std>:
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8007eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eb2:	6083      	str	r3, [r0, #8]
 8007eb4:	8181      	strh	r1, [r0, #12]
 8007eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007eb8:	81c2      	strh	r2, [r0, #14]
 8007eba:	6183      	str	r3, [r0, #24]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	305c      	adds	r0, #92	; 0x5c
 8007ec2:	f7fd facf 	bl	8005464 <memset>
 8007ec6:	4b05      	ldr	r3, [pc, #20]	; (8007edc <std+0x38>)
 8007ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <std+0x3c>)
 8007ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <std+0x40>)
 8007ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <std+0x44>)
 8007ed4:	6224      	str	r4, [r4, #32]
 8007ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	080081f9 	.word	0x080081f9
 8007ee0:	0800821b 	.word	0x0800821b
 8007ee4:	08008253 	.word	0x08008253
 8007ee8:	08008277 	.word	0x08008277

08007eec <_cleanup_r>:
 8007eec:	4901      	ldr	r1, [pc, #4]	; (8007ef4 <_cleanup_r+0x8>)
 8007eee:	f000 b8af 	b.w	8008050 <_fwalk_reent>
 8007ef2:	bf00      	nop
 8007ef4:	08007e2d 	.word	0x08007e2d

08007ef8 <__sfmoreglue>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	2268      	movs	r2, #104	; 0x68
 8007efc:	1e4d      	subs	r5, r1, #1
 8007efe:	4355      	muls	r5, r2
 8007f00:	460e      	mov	r6, r1
 8007f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f06:	f7ff fa65 	bl	80073d4 <_malloc_r>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	b140      	cbz	r0, 8007f20 <__sfmoreglue+0x28>
 8007f0e:	2100      	movs	r1, #0
 8007f10:	e9c0 1600 	strd	r1, r6, [r0]
 8007f14:	300c      	adds	r0, #12
 8007f16:	60a0      	str	r0, [r4, #8]
 8007f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f1c:	f7fd faa2 	bl	8005464 <memset>
 8007f20:	4620      	mov	r0, r4
 8007f22:	bd70      	pop	{r4, r5, r6, pc}

08007f24 <__sfp_lock_acquire>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__sfp_lock_acquire+0x8>)
 8007f26:	f000 b8b3 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	200008e5 	.word	0x200008e5

08007f30 <__sfp_lock_release>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__sfp_lock_release+0x8>)
 8007f32:	f000 b8ae 	b.w	8008092 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	200008e5 	.word	0x200008e5

08007f3c <__sinit_lock_acquire>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__sinit_lock_acquire+0x8>)
 8007f3e:	f000 b8a7 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	200008e6 	.word	0x200008e6

08007f48 <__sinit_lock_release>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__sinit_lock_release+0x8>)
 8007f4a:	f000 b8a2 	b.w	8008092 <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	200008e6 	.word	0x200008e6

08007f54 <__sinit>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	4604      	mov	r4, r0
 8007f58:	f7ff fff0 	bl	8007f3c <__sinit_lock_acquire>
 8007f5c:	69a3      	ldr	r3, [r4, #24]
 8007f5e:	b11b      	cbz	r3, 8007f68 <__sinit+0x14>
 8007f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f64:	f7ff bff0 	b.w	8007f48 <__sinit_lock_release>
 8007f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <__sinit+0x68>)
 8007f70:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <__sinit+0x6c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	bf04      	itt	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	61a3      	streq	r3, [r4, #24]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 f820 	bl	8007fc4 <__sfp>
 8007f84:	6060      	str	r0, [r4, #4]
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 f81c 	bl	8007fc4 <__sfp>
 8007f8c:	60a0      	str	r0, [r4, #8]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 f818 	bl	8007fc4 <__sfp>
 8007f94:	2200      	movs	r2, #0
 8007f96:	60e0      	str	r0, [r4, #12]
 8007f98:	2104      	movs	r1, #4
 8007f9a:	6860      	ldr	r0, [r4, #4]
 8007f9c:	f7ff ff82 	bl	8007ea4 <std>
 8007fa0:	68a0      	ldr	r0, [r4, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	2109      	movs	r1, #9
 8007fa6:	f7ff ff7d 	bl	8007ea4 <std>
 8007faa:	68e0      	ldr	r0, [r4, #12]
 8007fac:	2202      	movs	r2, #2
 8007fae:	2112      	movs	r1, #18
 8007fb0:	f7ff ff78 	bl	8007ea4 <std>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	61a3      	str	r3, [r4, #24]
 8007fb8:	e7d2      	b.n	8007f60 <__sinit+0xc>
 8007fba:	bf00      	nop
 8007fbc:	0800926c 	.word	0x0800926c
 8007fc0:	08007eed 	.word	0x08007eed

08007fc4 <__sfp>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	f7ff ffac 	bl	8007f24 <__sfp_lock_acquire>
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <__sfp+0x84>)
 8007fce:	681e      	ldr	r6, [r3, #0]
 8007fd0:	69b3      	ldr	r3, [r6, #24]
 8007fd2:	b913      	cbnz	r3, 8007fda <__sfp+0x16>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ffbd 	bl	8007f54 <__sinit>
 8007fda:	3648      	adds	r6, #72	; 0x48
 8007fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	d503      	bpl.n	8007fec <__sfp+0x28>
 8007fe4:	6833      	ldr	r3, [r6, #0]
 8007fe6:	b30b      	cbz	r3, 800802c <__sfp+0x68>
 8007fe8:	6836      	ldr	r6, [r6, #0]
 8007fea:	e7f7      	b.n	8007fdc <__sfp+0x18>
 8007fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ff0:	b9d5      	cbnz	r5, 8008028 <__sfp+0x64>
 8007ff2:	4b16      	ldr	r3, [pc, #88]	; (800804c <__sfp+0x88>)
 8007ff4:	60e3      	str	r3, [r4, #12]
 8007ff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8007ffc:	f000 f847 	bl	800808e <__retarget_lock_init_recursive>
 8008000:	f7ff ff96 	bl	8007f30 <__sfp_lock_release>
 8008004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800800c:	6025      	str	r5, [r4, #0]
 800800e:	61a5      	str	r5, [r4, #24]
 8008010:	2208      	movs	r2, #8
 8008012:	4629      	mov	r1, r5
 8008014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008018:	f7fd fa24 	bl	8005464 <memset>
 800801c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008024:	4620      	mov	r0, r4
 8008026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008028:	3468      	adds	r4, #104	; 0x68
 800802a:	e7d9      	b.n	8007fe0 <__sfp+0x1c>
 800802c:	2104      	movs	r1, #4
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ff62 	bl	8007ef8 <__sfmoreglue>
 8008034:	4604      	mov	r4, r0
 8008036:	6030      	str	r0, [r6, #0]
 8008038:	2800      	cmp	r0, #0
 800803a:	d1d5      	bne.n	8007fe8 <__sfp+0x24>
 800803c:	f7ff ff78 	bl	8007f30 <__sfp_lock_release>
 8008040:	230c      	movs	r3, #12
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	e7ee      	b.n	8008024 <__sfp+0x60>
 8008046:	bf00      	nop
 8008048:	0800926c 	.word	0x0800926c
 800804c:	ffff0001 	.word	0xffff0001

08008050 <_fwalk_reent>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	4606      	mov	r6, r0
 8008056:	4688      	mov	r8, r1
 8008058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800805c:	2700      	movs	r7, #0
 800805e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008062:	f1b9 0901 	subs.w	r9, r9, #1
 8008066:	d505      	bpl.n	8008074 <_fwalk_reent+0x24>
 8008068:	6824      	ldr	r4, [r4, #0]
 800806a:	2c00      	cmp	r4, #0
 800806c:	d1f7      	bne.n	800805e <_fwalk_reent+0xe>
 800806e:	4638      	mov	r0, r7
 8008070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008074:	89ab      	ldrh	r3, [r5, #12]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d907      	bls.n	800808a <_fwalk_reent+0x3a>
 800807a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800807e:	3301      	adds	r3, #1
 8008080:	d003      	beq.n	800808a <_fwalk_reent+0x3a>
 8008082:	4629      	mov	r1, r5
 8008084:	4630      	mov	r0, r6
 8008086:	47c0      	blx	r8
 8008088:	4307      	orrs	r7, r0
 800808a:	3568      	adds	r5, #104	; 0x68
 800808c:	e7e9      	b.n	8008062 <_fwalk_reent+0x12>

0800808e <__retarget_lock_init_recursive>:
 800808e:	4770      	bx	lr

08008090 <__retarget_lock_acquire_recursive>:
 8008090:	4770      	bx	lr

08008092 <__retarget_lock_release_recursive>:
 8008092:	4770      	bx	lr

08008094 <__swhatbuf_r>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	460e      	mov	r6, r1
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	2900      	cmp	r1, #0
 800809e:	b096      	sub	sp, #88	; 0x58
 80080a0:	4614      	mov	r4, r2
 80080a2:	461d      	mov	r5, r3
 80080a4:	da08      	bge.n	80080b8 <__swhatbuf_r+0x24>
 80080a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	061a      	lsls	r2, r3, #24
 80080b0:	d410      	bmi.n	80080d4 <__swhatbuf_r+0x40>
 80080b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b6:	e00e      	b.n	80080d6 <__swhatbuf_r+0x42>
 80080b8:	466a      	mov	r2, sp
 80080ba:	f000 f903 	bl	80082c4 <_fstat_r>
 80080be:	2800      	cmp	r0, #0
 80080c0:	dbf1      	blt.n	80080a6 <__swhatbuf_r+0x12>
 80080c2:	9a01      	ldr	r2, [sp, #4]
 80080c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080cc:	425a      	negs	r2, r3
 80080ce:	415a      	adcs	r2, r3
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	e7ee      	b.n	80080b2 <__swhatbuf_r+0x1e>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	2000      	movs	r0, #0
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	b016      	add	sp, #88	; 0x58
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080080e0 <__smakebuf_r>:
 80080e0:	898b      	ldrh	r3, [r1, #12]
 80080e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080e4:	079d      	lsls	r5, r3, #30
 80080e6:	4606      	mov	r6, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	d507      	bpl.n	80080fc <__smakebuf_r+0x1c>
 80080ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	2301      	movs	r3, #1
 80080f6:	6163      	str	r3, [r4, #20]
 80080f8:	b002      	add	sp, #8
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	ab01      	add	r3, sp, #4
 80080fe:	466a      	mov	r2, sp
 8008100:	f7ff ffc8 	bl	8008094 <__swhatbuf_r>
 8008104:	9900      	ldr	r1, [sp, #0]
 8008106:	4605      	mov	r5, r0
 8008108:	4630      	mov	r0, r6
 800810a:	f7ff f963 	bl	80073d4 <_malloc_r>
 800810e:	b948      	cbnz	r0, 8008124 <__smakebuf_r+0x44>
 8008110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008114:	059a      	lsls	r2, r3, #22
 8008116:	d4ef      	bmi.n	80080f8 <__smakebuf_r+0x18>
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e7e3      	b.n	80080ec <__smakebuf_r+0xc>
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <__smakebuf_r+0x7c>)
 8008126:	62b3      	str	r3, [r6, #40]	; 0x28
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	6163      	str	r3, [r4, #20]
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	6120      	str	r0, [r4, #16]
 800813a:	b15b      	cbz	r3, 8008154 <__smakebuf_r+0x74>
 800813c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008140:	4630      	mov	r0, r6
 8008142:	f000 f8d1 	bl	80082e8 <_isatty_r>
 8008146:	b128      	cbz	r0, 8008154 <__smakebuf_r+0x74>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	89a0      	ldrh	r0, [r4, #12]
 8008156:	4305      	orrs	r5, r0
 8008158:	81a5      	strh	r5, [r4, #12]
 800815a:	e7cd      	b.n	80080f8 <__smakebuf_r+0x18>
 800815c:	08007eed 	.word	0x08007eed

08008160 <_malloc_usable_size_r>:
 8008160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008164:	1f18      	subs	r0, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfbc      	itt	lt
 800816a:	580b      	ldrlt	r3, [r1, r0]
 800816c:	18c0      	addlt	r0, r0, r3
 800816e:	4770      	bx	lr

08008170 <_raise_r>:
 8008170:	291f      	cmp	r1, #31
 8008172:	b538      	push	{r3, r4, r5, lr}
 8008174:	4604      	mov	r4, r0
 8008176:	460d      	mov	r5, r1
 8008178:	d904      	bls.n	8008184 <_raise_r+0x14>
 800817a:	2316      	movs	r3, #22
 800817c:	6003      	str	r3, [r0, #0]
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008186:	b112      	cbz	r2, 800818e <_raise_r+0x1e>
 8008188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800818c:	b94b      	cbnz	r3, 80081a2 <_raise_r+0x32>
 800818e:	4620      	mov	r0, r4
 8008190:	f000 f830 	bl	80081f4 <_getpid_r>
 8008194:	462a      	mov	r2, r5
 8008196:	4601      	mov	r1, r0
 8008198:	4620      	mov	r0, r4
 800819a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800819e:	f000 b817 	b.w	80081d0 <_kill_r>
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d00a      	beq.n	80081bc <_raise_r+0x4c>
 80081a6:	1c59      	adds	r1, r3, #1
 80081a8:	d103      	bne.n	80081b2 <_raise_r+0x42>
 80081aa:	2316      	movs	r3, #22
 80081ac:	6003      	str	r3, [r0, #0]
 80081ae:	2001      	movs	r0, #1
 80081b0:	e7e7      	b.n	8008182 <_raise_r+0x12>
 80081b2:	2400      	movs	r4, #0
 80081b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081b8:	4628      	mov	r0, r5
 80081ba:	4798      	blx	r3
 80081bc:	2000      	movs	r0, #0
 80081be:	e7e0      	b.n	8008182 <_raise_r+0x12>

080081c0 <raise>:
 80081c0:	4b02      	ldr	r3, [pc, #8]	; (80081cc <raise+0xc>)
 80081c2:	4601      	mov	r1, r0
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f7ff bfd3 	b.w	8008170 <_raise_r>
 80081ca:	bf00      	nop
 80081cc:	20000014 	.word	0x20000014

080081d0 <_kill_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_kill_r+0x20>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	f7f9 ff9f 	bl	8002120 <_kill>
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	d102      	bne.n	80081ec <_kill_r+0x1c>
 80081e6:	682b      	ldr	r3, [r5, #0]
 80081e8:	b103      	cbz	r3, 80081ec <_kill_r+0x1c>
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
 80081ee:	bf00      	nop
 80081f0:	200008e0 	.word	0x200008e0

080081f4 <_getpid_r>:
 80081f4:	f7f9 bf8c 	b.w	8002110 <_getpid>

080081f8 <__sread>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008200:	f000 f894 	bl	800832c <_read_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	bfab      	itete	ge
 8008208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800820a:	89a3      	ldrhlt	r3, [r4, #12]
 800820c:	181b      	addge	r3, r3, r0
 800820e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008212:	bfac      	ite	ge
 8008214:	6563      	strge	r3, [r4, #84]	; 0x54
 8008216:	81a3      	strhlt	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__swrite>:
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	461f      	mov	r7, r3
 8008220:	898b      	ldrh	r3, [r1, #12]
 8008222:	05db      	lsls	r3, r3, #23
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4616      	mov	r6, r2
 800822a:	d505      	bpl.n	8008238 <__swrite+0x1e>
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	2302      	movs	r3, #2
 8008232:	2200      	movs	r2, #0
 8008234:	f000 f868 	bl	8008308 <_lseek_r>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	f000 b817 	b.w	8008280 <_write_r>

08008252 <__sseek>:
 8008252:	b510      	push	{r4, lr}
 8008254:	460c      	mov	r4, r1
 8008256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825a:	f000 f855 	bl	8008308 <_lseek_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	bf15      	itete	ne
 8008264:	6560      	strne	r0, [r4, #84]	; 0x54
 8008266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800826e:	81a3      	strheq	r3, [r4, #12]
 8008270:	bf18      	it	ne
 8008272:	81a3      	strhne	r3, [r4, #12]
 8008274:	bd10      	pop	{r4, pc}

08008276 <__sclose>:
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f000 b813 	b.w	80082a4 <_close_r>
	...

08008280 <_write_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d07      	ldr	r5, [pc, #28]	; (80082a0 <_write_r+0x20>)
 8008284:	4604      	mov	r4, r0
 8008286:	4608      	mov	r0, r1
 8008288:	4611      	mov	r1, r2
 800828a:	2200      	movs	r2, #0
 800828c:	602a      	str	r2, [r5, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	f7f9 ff7d 	bl	800218e <_write>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_write_r+0x1e>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_write_r+0x1e>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	200008e0 	.word	0x200008e0

080082a4 <_close_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d06      	ldr	r5, [pc, #24]	; (80082c0 <_close_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f7f9 ff89 	bl	80021c6 <_close>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_close_r+0x1a>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_close_r+0x1a>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	200008e0 	.word	0x200008e0

080082c4 <_fstat_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d07      	ldr	r5, [pc, #28]	; (80082e4 <_fstat_r+0x20>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	602b      	str	r3, [r5, #0]
 80082d2:	f7f9 ff84 	bl	80021de <_fstat>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	d102      	bne.n	80082e0 <_fstat_r+0x1c>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	b103      	cbz	r3, 80082e0 <_fstat_r+0x1c>
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	bf00      	nop
 80082e4:	200008e0 	.word	0x200008e0

080082e8 <_isatty_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d06      	ldr	r5, [pc, #24]	; (8008304 <_isatty_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7f9 ff83 	bl	80021fe <_isatty>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_isatty_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_isatty_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	200008e0 	.word	0x200008e0

08008308 <_lseek_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_lseek_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7f9 ff7c 	bl	8002214 <_lseek>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_lseek_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_lseek_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200008e0 	.word	0x200008e0

0800832c <_read_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_read_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f9 ff0a 	bl	8002154 <_read>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_read_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_read_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	200008e0 	.word	0x200008e0

08008350 <pow>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	ed2d 8b02 	vpush	{d8}
 8008356:	eeb0 8a40 	vmov.f32	s16, s0
 800835a:	eef0 8a60 	vmov.f32	s17, s1
 800835e:	ec55 4b11 	vmov	r4, r5, d1
 8008362:	f000 f865 	bl	8008430 <__ieee754_pow>
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	ec57 6b10 	vmov	r6, r7, d0
 8008372:	f7f8 fbe3 	bl	8000b3c <__aeabi_dcmpun>
 8008376:	2800      	cmp	r0, #0
 8008378:	d13b      	bne.n	80083f2 <pow+0xa2>
 800837a:	ec51 0b18 	vmov	r0, r1, d8
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	f7f8 fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008386:	b1b8      	cbz	r0, 80083b8 <pow+0x68>
 8008388:	2200      	movs	r2, #0
 800838a:	2300      	movs	r3, #0
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f8 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008394:	2800      	cmp	r0, #0
 8008396:	d146      	bne.n	8008426 <pow+0xd6>
 8008398:	ec45 4b10 	vmov	d0, r4, r5
 800839c:	f000 fe61 	bl	8009062 <finite>
 80083a0:	b338      	cbz	r0, 80083f2 <pow+0xa2>
 80083a2:	2200      	movs	r2, #0
 80083a4:	2300      	movs	r3, #0
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f8 fb9f 	bl	8000aec <__aeabi_dcmplt>
 80083ae:	b300      	cbz	r0, 80083f2 <pow+0xa2>
 80083b0:	f7fd f82e 	bl	8005410 <__errno>
 80083b4:	2322      	movs	r3, #34	; 0x22
 80083b6:	e01b      	b.n	80083f0 <pow+0xa0>
 80083b8:	ec47 6b10 	vmov	d0, r6, r7
 80083bc:	f000 fe51 	bl	8009062 <finite>
 80083c0:	b9e0      	cbnz	r0, 80083fc <pow+0xac>
 80083c2:	eeb0 0a48 	vmov.f32	s0, s16
 80083c6:	eef0 0a68 	vmov.f32	s1, s17
 80083ca:	f000 fe4a 	bl	8009062 <finite>
 80083ce:	b1a8      	cbz	r0, 80083fc <pow+0xac>
 80083d0:	ec45 4b10 	vmov	d0, r4, r5
 80083d4:	f000 fe45 	bl	8009062 <finite>
 80083d8:	b180      	cbz	r0, 80083fc <pow+0xac>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f8 fbab 	bl	8000b3c <__aeabi_dcmpun>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0e2      	beq.n	80083b0 <pow+0x60>
 80083ea:	f7fd f811 	bl	8005410 <__errno>
 80083ee:	2321      	movs	r3, #33	; 0x21
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	ecbd 8b02 	vpop	{d8}
 80083f6:	ec47 6b10 	vmov	d0, r6, r7
 80083fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f8 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008408:	2800      	cmp	r0, #0
 800840a:	d0f2      	beq.n	80083f2 <pow+0xa2>
 800840c:	eeb0 0a48 	vmov.f32	s0, s16
 8008410:	eef0 0a68 	vmov.f32	s1, s17
 8008414:	f000 fe25 	bl	8009062 <finite>
 8008418:	2800      	cmp	r0, #0
 800841a:	d0ea      	beq.n	80083f2 <pow+0xa2>
 800841c:	ec45 4b10 	vmov	d0, r4, r5
 8008420:	f000 fe1f 	bl	8009062 <finite>
 8008424:	e7c3      	b.n	80083ae <pow+0x5e>
 8008426:	4f01      	ldr	r7, [pc, #4]	; (800842c <pow+0xdc>)
 8008428:	2600      	movs	r6, #0
 800842a:	e7e2      	b.n	80083f2 <pow+0xa2>
 800842c:	3ff00000 	.word	0x3ff00000

08008430 <__ieee754_pow>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	ed2d 8b06 	vpush	{d8-d10}
 8008438:	b089      	sub	sp, #36	; 0x24
 800843a:	ed8d 1b00 	vstr	d1, [sp]
 800843e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008442:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008446:	ea58 0102 	orrs.w	r1, r8, r2
 800844a:	ec57 6b10 	vmov	r6, r7, d0
 800844e:	d115      	bne.n	800847c <__ieee754_pow+0x4c>
 8008450:	19b3      	adds	r3, r6, r6
 8008452:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008456:	4152      	adcs	r2, r2
 8008458:	4299      	cmp	r1, r3
 800845a:	4b89      	ldr	r3, [pc, #548]	; (8008680 <__ieee754_pow+0x250>)
 800845c:	4193      	sbcs	r3, r2
 800845e:	f080 84d2 	bcs.w	8008e06 <__ieee754_pow+0x9d6>
 8008462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7f7 ff17 	bl	800029c <__adddf3>
 800846e:	ec41 0b10 	vmov	d0, r0, r1
 8008472:	b009      	add	sp, #36	; 0x24
 8008474:	ecbd 8b06 	vpop	{d8-d10}
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	4b81      	ldr	r3, [pc, #516]	; (8008684 <__ieee754_pow+0x254>)
 800847e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008482:	429c      	cmp	r4, r3
 8008484:	ee10 aa10 	vmov	sl, s0
 8008488:	463d      	mov	r5, r7
 800848a:	dc06      	bgt.n	800849a <__ieee754_pow+0x6a>
 800848c:	d101      	bne.n	8008492 <__ieee754_pow+0x62>
 800848e:	2e00      	cmp	r6, #0
 8008490:	d1e7      	bne.n	8008462 <__ieee754_pow+0x32>
 8008492:	4598      	cmp	r8, r3
 8008494:	dc01      	bgt.n	800849a <__ieee754_pow+0x6a>
 8008496:	d10f      	bne.n	80084b8 <__ieee754_pow+0x88>
 8008498:	b172      	cbz	r2, 80084b8 <__ieee754_pow+0x88>
 800849a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800849e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80084a2:	ea55 050a 	orrs.w	r5, r5, sl
 80084a6:	d1dc      	bne.n	8008462 <__ieee754_pow+0x32>
 80084a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084ac:	18db      	adds	r3, r3, r3
 80084ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80084b2:	4152      	adcs	r2, r2
 80084b4:	429d      	cmp	r5, r3
 80084b6:	e7d0      	b.n	800845a <__ieee754_pow+0x2a>
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	da3b      	bge.n	8008534 <__ieee754_pow+0x104>
 80084bc:	4b72      	ldr	r3, [pc, #456]	; (8008688 <__ieee754_pow+0x258>)
 80084be:	4598      	cmp	r8, r3
 80084c0:	dc51      	bgt.n	8008566 <__ieee754_pow+0x136>
 80084c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80084c6:	4598      	cmp	r8, r3
 80084c8:	f340 84ac 	ble.w	8008e24 <__ieee754_pow+0x9f4>
 80084cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80084d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084d4:	2b14      	cmp	r3, #20
 80084d6:	dd0f      	ble.n	80084f8 <__ieee754_pow+0xc8>
 80084d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084dc:	fa22 f103 	lsr.w	r1, r2, r3
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	4293      	cmp	r3, r2
 80084e6:	f040 849d 	bne.w	8008e24 <__ieee754_pow+0x9f4>
 80084ea:	f001 0101 	and.w	r1, r1, #1
 80084ee:	f1c1 0302 	rsb	r3, r1, #2
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	b182      	cbz	r2, 8008518 <__ieee754_pow+0xe8>
 80084f6:	e05f      	b.n	80085b8 <__ieee754_pow+0x188>
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	d15b      	bne.n	80085b4 <__ieee754_pow+0x184>
 80084fc:	f1c3 0314 	rsb	r3, r3, #20
 8008500:	fa48 f103 	asr.w	r1, r8, r3
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	4543      	cmp	r3, r8
 800850a:	f040 8488 	bne.w	8008e1e <__ieee754_pow+0x9ee>
 800850e:	f001 0101 	and.w	r1, r1, #1
 8008512:	f1c1 0302 	rsb	r3, r1, #2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	4b5c      	ldr	r3, [pc, #368]	; (800868c <__ieee754_pow+0x25c>)
 800851a:	4598      	cmp	r8, r3
 800851c:	d132      	bne.n	8008584 <__ieee754_pow+0x154>
 800851e:	f1b9 0f00 	cmp.w	r9, #0
 8008522:	f280 8478 	bge.w	8008e16 <__ieee754_pow+0x9e6>
 8008526:	4959      	ldr	r1, [pc, #356]	; (800868c <__ieee754_pow+0x25c>)
 8008528:	4632      	mov	r2, r6
 800852a:	463b      	mov	r3, r7
 800852c:	2000      	movs	r0, #0
 800852e:	f7f8 f995 	bl	800085c <__aeabi_ddiv>
 8008532:	e79c      	b.n	800846e <__ieee754_pow+0x3e>
 8008534:	2300      	movs	r3, #0
 8008536:	9304      	str	r3, [sp, #16]
 8008538:	2a00      	cmp	r2, #0
 800853a:	d13d      	bne.n	80085b8 <__ieee754_pow+0x188>
 800853c:	4b51      	ldr	r3, [pc, #324]	; (8008684 <__ieee754_pow+0x254>)
 800853e:	4598      	cmp	r8, r3
 8008540:	d1ea      	bne.n	8008518 <__ieee754_pow+0xe8>
 8008542:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008546:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800854a:	ea53 030a 	orrs.w	r3, r3, sl
 800854e:	f000 845a 	beq.w	8008e06 <__ieee754_pow+0x9d6>
 8008552:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <__ieee754_pow+0x260>)
 8008554:	429c      	cmp	r4, r3
 8008556:	dd08      	ble.n	800856a <__ieee754_pow+0x13a>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	f2c0 8457 	blt.w	8008e0e <__ieee754_pow+0x9de>
 8008560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008564:	e783      	b.n	800846e <__ieee754_pow+0x3e>
 8008566:	2302      	movs	r3, #2
 8008568:	e7e5      	b.n	8008536 <__ieee754_pow+0x106>
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	f04f 0000 	mov.w	r0, #0
 8008572:	f04f 0100 	mov.w	r1, #0
 8008576:	f6bf af7a 	bge.w	800846e <__ieee754_pow+0x3e>
 800857a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800857e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008582:	e774      	b.n	800846e <__ieee754_pow+0x3e>
 8008584:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008588:	d106      	bne.n	8008598 <__ieee754_pow+0x168>
 800858a:	4632      	mov	r2, r6
 800858c:	463b      	mov	r3, r7
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f8 f839 	bl	8000608 <__aeabi_dmul>
 8008596:	e76a      	b.n	800846e <__ieee754_pow+0x3e>
 8008598:	4b3e      	ldr	r3, [pc, #248]	; (8008694 <__ieee754_pow+0x264>)
 800859a:	4599      	cmp	r9, r3
 800859c:	d10c      	bne.n	80085b8 <__ieee754_pow+0x188>
 800859e:	2d00      	cmp	r5, #0
 80085a0:	db0a      	blt.n	80085b8 <__ieee754_pow+0x188>
 80085a2:	ec47 6b10 	vmov	d0, r6, r7
 80085a6:	b009      	add	sp, #36	; 0x24
 80085a8:	ecbd 8b06 	vpop	{d8-d10}
 80085ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	f000 bc6c 	b.w	8008e8c <__ieee754_sqrt>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	ec47 6b10 	vmov	d0, r6, r7
 80085bc:	f000 fd48 	bl	8009050 <fabs>
 80085c0:	ec51 0b10 	vmov	r0, r1, d0
 80085c4:	f1ba 0f00 	cmp.w	sl, #0
 80085c8:	d129      	bne.n	800861e <__ieee754_pow+0x1ee>
 80085ca:	b124      	cbz	r4, 80085d6 <__ieee754_pow+0x1a6>
 80085cc:	4b2f      	ldr	r3, [pc, #188]	; (800868c <__ieee754_pow+0x25c>)
 80085ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d123      	bne.n	800861e <__ieee754_pow+0x1ee>
 80085d6:	f1b9 0f00 	cmp.w	r9, #0
 80085da:	da05      	bge.n	80085e8 <__ieee754_pow+0x1b8>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	2000      	movs	r0, #0
 80085e2:	492a      	ldr	r1, [pc, #168]	; (800868c <__ieee754_pow+0x25c>)
 80085e4:	f7f8 f93a 	bl	800085c <__aeabi_ddiv>
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	f6bf af40 	bge.w	800846e <__ieee754_pow+0x3e>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085f8:	4323      	orrs	r3, r4
 80085fa:	d108      	bne.n	800860e <__ieee754_pow+0x1de>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	f7f7 fe48 	bl	8000298 <__aeabi_dsub>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e78f      	b.n	800852e <__ieee754_pow+0xfe>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b01      	cmp	r3, #1
 8008612:	f47f af2c 	bne.w	800846e <__ieee754_pow+0x3e>
 8008616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800861a:	4619      	mov	r1, r3
 800861c:	e727      	b.n	800846e <__ieee754_pow+0x3e>
 800861e:	0feb      	lsrs	r3, r5, #31
 8008620:	3b01      	subs	r3, #1
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	9a06      	ldr	r2, [sp, #24]
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	d102      	bne.n	8008632 <__ieee754_pow+0x202>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	e7e6      	b.n	8008600 <__ieee754_pow+0x1d0>
 8008632:	4b19      	ldr	r3, [pc, #100]	; (8008698 <__ieee754_pow+0x268>)
 8008634:	4598      	cmp	r8, r3
 8008636:	f340 80fb 	ble.w	8008830 <__ieee754_pow+0x400>
 800863a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800863e:	4598      	cmp	r8, r3
 8008640:	4b13      	ldr	r3, [pc, #76]	; (8008690 <__ieee754_pow+0x260>)
 8008642:	dd0c      	ble.n	800865e <__ieee754_pow+0x22e>
 8008644:	429c      	cmp	r4, r3
 8008646:	dc0f      	bgt.n	8008668 <__ieee754_pow+0x238>
 8008648:	f1b9 0f00 	cmp.w	r9, #0
 800864c:	da0f      	bge.n	800866e <__ieee754_pow+0x23e>
 800864e:	2000      	movs	r0, #0
 8008650:	b009      	add	sp, #36	; 0x24
 8008652:	ecbd 8b06 	vpop	{d8-d10}
 8008656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	f000 bcf0 	b.w	800903e <__math_oflow>
 800865e:	429c      	cmp	r4, r3
 8008660:	dbf2      	blt.n	8008648 <__ieee754_pow+0x218>
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <__ieee754_pow+0x25c>)
 8008664:	429c      	cmp	r4, r3
 8008666:	dd19      	ble.n	800869c <__ieee754_pow+0x26c>
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	dcef      	bgt.n	800864e <__ieee754_pow+0x21e>
 800866e:	2000      	movs	r0, #0
 8008670:	b009      	add	sp, #36	; 0x24
 8008672:	ecbd 8b06 	vpop	{d8-d10}
 8008676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	f000 bcd7 	b.w	800902c <__math_uflow>
 800867e:	bf00      	nop
 8008680:	fff00000 	.word	0xfff00000
 8008684:	7ff00000 	.word	0x7ff00000
 8008688:	433fffff 	.word	0x433fffff
 800868c:	3ff00000 	.word	0x3ff00000
 8008690:	3fefffff 	.word	0x3fefffff
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	41e00000 	.word	0x41e00000
 800869c:	4b60      	ldr	r3, [pc, #384]	; (8008820 <__ieee754_pow+0x3f0>)
 800869e:	2200      	movs	r2, #0
 80086a0:	f7f7 fdfa 	bl	8000298 <__aeabi_dsub>
 80086a4:	a354      	add	r3, pc, #336	; (adr r3, 80087f8 <__ieee754_pow+0x3c8>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	a353      	add	r3, pc, #332	; (adr r3, 8008800 <__ieee754_pow+0x3d0>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	4606      	mov	r6, r0
 80086ba:	460f      	mov	r7, r1
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 ffa2 	bl	8000608 <__aeabi_dmul>
 80086c4:	4b57      	ldr	r3, [pc, #348]	; (8008824 <__ieee754_pow+0x3f4>)
 80086c6:	4682      	mov	sl, r0
 80086c8:	468b      	mov	fp, r1
 80086ca:	2200      	movs	r2, #0
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 ff9a 	bl	8000608 <__aeabi_dmul>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	a14b      	add	r1, pc, #300	; (adr r1, 8008808 <__ieee754_pow+0x3d8>)
 80086da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086de:	f7f7 fddb 	bl	8000298 <__aeabi_dsub>
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	f7f7 ff8f 	bl	8000608 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	2000      	movs	r0, #0
 80086f0:	494d      	ldr	r1, [pc, #308]	; (8008828 <__ieee754_pow+0x3f8>)
 80086f2:	f7f7 fdd1 	bl	8000298 <__aeabi_dsub>
 80086f6:	4622      	mov	r2, r4
 80086f8:	4680      	mov	r8, r0
 80086fa:	4689      	mov	r9, r1
 80086fc:	462b      	mov	r3, r5
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f7 ff81 	bl	8000608 <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	f7f7 ff7b 	bl	8000608 <__aeabi_dmul>
 8008712:	a33f      	add	r3, pc, #252	; (adr r3, 8008810 <__ieee754_pow+0x3e0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 ff76 	bl	8000608 <__aeabi_dmul>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	f7f7 fdb8 	bl	8000298 <__aeabi_dsub>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fdb2 	bl	800029c <__adddf3>
 8008738:	2000      	movs	r0, #0
 800873a:	4632      	mov	r2, r6
 800873c:	463b      	mov	r3, r7
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	f7f7 fda9 	bl	8000298 <__aeabi_dsub>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	f7f7 fda3 	bl	8000298 <__aeabi_dsub>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	9a06      	ldr	r2, [sp, #24]
 8008756:	3b01      	subs	r3, #1
 8008758:	4313      	orrs	r3, r2
 800875a:	4682      	mov	sl, r0
 800875c:	468b      	mov	fp, r1
 800875e:	f040 81e7 	bne.w	8008b30 <__ieee754_pow+0x700>
 8008762:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008818 <__ieee754_pow+0x3e8>
 8008766:	eeb0 8a47 	vmov.f32	s16, s14
 800876a:	eef0 8a67 	vmov.f32	s17, s15
 800876e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008772:	2600      	movs	r6, #0
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877c:	f7f7 fd8c 	bl	8000298 <__aeabi_dsub>
 8008780:	4622      	mov	r2, r4
 8008782:	462b      	mov	r3, r5
 8008784:	f7f7 ff40 	bl	8000608 <__aeabi_dmul>
 8008788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878c:	4680      	mov	r8, r0
 800878e:	4689      	mov	r9, r1
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	f7f7 ff38 	bl	8000608 <__aeabi_dmul>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f7 fd7c 	bl	800029c <__adddf3>
 80087a4:	4632      	mov	r2, r6
 80087a6:	463b      	mov	r3, r7
 80087a8:	4680      	mov	r8, r0
 80087aa:	4689      	mov	r9, r1
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	460b      	mov	r3, r1
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	4602      	mov	r2, r0
 80087bc:	4649      	mov	r1, r9
 80087be:	4640      	mov	r0, r8
 80087c0:	f7f7 fd6c 	bl	800029c <__adddf3>
 80087c4:	4b19      	ldr	r3, [pc, #100]	; (800882c <__ieee754_pow+0x3fc>)
 80087c6:	4299      	cmp	r1, r3
 80087c8:	ec45 4b19 	vmov	d9, r4, r5
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	468b      	mov	fp, r1
 80087d2:	f340 82f1 	ble.w	8008db8 <__ieee754_pow+0x988>
 80087d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087de:	4303      	orrs	r3, r0
 80087e0:	f000 81e4 	beq.w	8008bac <__ieee754_pow+0x77c>
 80087e4:	ec51 0b18 	vmov	r0, r1, d8
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	f7f8 f97e 	bl	8000aec <__aeabi_dcmplt>
 80087f0:	3800      	subs	r0, #0
 80087f2:	bf18      	it	ne
 80087f4:	2001      	movne	r0, #1
 80087f6:	e72b      	b.n	8008650 <__ieee754_pow+0x220>
 80087f8:	60000000 	.word	0x60000000
 80087fc:	3ff71547 	.word	0x3ff71547
 8008800:	f85ddf44 	.word	0xf85ddf44
 8008804:	3e54ae0b 	.word	0x3e54ae0b
 8008808:	55555555 	.word	0x55555555
 800880c:	3fd55555 	.word	0x3fd55555
 8008810:	652b82fe 	.word	0x652b82fe
 8008814:	3ff71547 	.word	0x3ff71547
 8008818:	00000000 	.word	0x00000000
 800881c:	bff00000 	.word	0xbff00000
 8008820:	3ff00000 	.word	0x3ff00000
 8008824:	3fd00000 	.word	0x3fd00000
 8008828:	3fe00000 	.word	0x3fe00000
 800882c:	408fffff 	.word	0x408fffff
 8008830:	4bd5      	ldr	r3, [pc, #852]	; (8008b88 <__ieee754_pow+0x758>)
 8008832:	402b      	ands	r3, r5
 8008834:	2200      	movs	r2, #0
 8008836:	b92b      	cbnz	r3, 8008844 <__ieee754_pow+0x414>
 8008838:	4bd4      	ldr	r3, [pc, #848]	; (8008b8c <__ieee754_pow+0x75c>)
 800883a:	f7f7 fee5 	bl	8000608 <__aeabi_dmul>
 800883e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008842:	460c      	mov	r4, r1
 8008844:	1523      	asrs	r3, r4, #20
 8008846:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800884a:	4413      	add	r3, r2
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	4bd0      	ldr	r3, [pc, #832]	; (8008b90 <__ieee754_pow+0x760>)
 8008850:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008854:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008858:	429c      	cmp	r4, r3
 800885a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800885e:	dd08      	ble.n	8008872 <__ieee754_pow+0x442>
 8008860:	4bcc      	ldr	r3, [pc, #816]	; (8008b94 <__ieee754_pow+0x764>)
 8008862:	429c      	cmp	r4, r3
 8008864:	f340 8162 	ble.w	8008b2c <__ieee754_pow+0x6fc>
 8008868:	9b05      	ldr	r3, [sp, #20]
 800886a:	3301      	adds	r3, #1
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008872:	2400      	movs	r4, #0
 8008874:	00e3      	lsls	r3, r4, #3
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	4bc7      	ldr	r3, [pc, #796]	; (8008b98 <__ieee754_pow+0x768>)
 800887a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800887e:	ed93 7b00 	vldr	d7, [r3]
 8008882:	4629      	mov	r1, r5
 8008884:	ec53 2b17 	vmov	r2, r3, d7
 8008888:	eeb0 9a47 	vmov.f32	s18, s14
 800888c:	eef0 9a67 	vmov.f32	s19, s15
 8008890:	4682      	mov	sl, r0
 8008892:	f7f7 fd01 	bl	8000298 <__aeabi_dsub>
 8008896:	4652      	mov	r2, sl
 8008898:	4606      	mov	r6, r0
 800889a:	460f      	mov	r7, r1
 800889c:	462b      	mov	r3, r5
 800889e:	ec51 0b19 	vmov	r0, r1, d9
 80088a2:	f7f7 fcfb 	bl	800029c <__adddf3>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	2000      	movs	r0, #0
 80088ac:	49bb      	ldr	r1, [pc, #748]	; (8008b9c <__ieee754_pow+0x76c>)
 80088ae:	f7f7 ffd5 	bl	800085c <__aeabi_ddiv>
 80088b2:	ec41 0b1a 	vmov	d10, r0, r1
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fea3 	bl	8000608 <__aeabi_dmul>
 80088c2:	2300      	movs	r3, #0
 80088c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c8:	9302      	str	r3, [sp, #8]
 80088ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088ce:	46ab      	mov	fp, r5
 80088d0:	106d      	asrs	r5, r5, #1
 80088d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088da:	ec41 0b18 	vmov	d8, r0, r1
 80088de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80088e2:	2200      	movs	r2, #0
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	4614      	mov	r4, r2
 80088ea:	461d      	mov	r5, r3
 80088ec:	f7f7 fe8c 	bl	8000608 <__aeabi_dmul>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4630      	mov	r0, r6
 80088f6:	4639      	mov	r1, r7
 80088f8:	f7f7 fcce 	bl	8000298 <__aeabi_dsub>
 80088fc:	ec53 2b19 	vmov	r2, r3, d9
 8008900:	4606      	mov	r6, r0
 8008902:	460f      	mov	r7, r1
 8008904:	4620      	mov	r0, r4
 8008906:	4629      	mov	r1, r5
 8008908:	f7f7 fcc6 	bl	8000298 <__aeabi_dsub>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f7 fcc0 	bl	8000298 <__aeabi_dsub>
 8008918:	4642      	mov	r2, r8
 800891a:	464b      	mov	r3, r9
 800891c:	f7f7 fe74 	bl	8000608 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f7 fcb6 	bl	8000298 <__aeabi_dsub>
 800892c:	ec53 2b1a 	vmov	r2, r3, d10
 8008930:	f7f7 fe6a 	bl	8000608 <__aeabi_dmul>
 8008934:	ec53 2b18 	vmov	r2, r3, d8
 8008938:	ec41 0b19 	vmov	d9, r0, r1
 800893c:	ec51 0b18 	vmov	r0, r1, d8
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	a37c      	add	r3, pc, #496	; (adr r3, 8008b38 <__ieee754_pow+0x708>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	4604      	mov	r4, r0
 800894c:	460d      	mov	r5, r1
 800894e:	f7f7 fe5b 	bl	8000608 <__aeabi_dmul>
 8008952:	a37b      	add	r3, pc, #492	; (adr r3, 8008b40 <__ieee754_pow+0x710>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f7 fca0 	bl	800029c <__adddf3>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	f7f7 fe52 	bl	8000608 <__aeabi_dmul>
 8008964:	a378      	add	r3, pc, #480	; (adr r3, 8008b48 <__ieee754_pow+0x718>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f7 fc97 	bl	800029c <__adddf3>
 800896e:	4622      	mov	r2, r4
 8008970:	462b      	mov	r3, r5
 8008972:	f7f7 fe49 	bl	8000608 <__aeabi_dmul>
 8008976:	a376      	add	r3, pc, #472	; (adr r3, 8008b50 <__ieee754_pow+0x720>)
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f7f7 fc8e 	bl	800029c <__adddf3>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	a373      	add	r3, pc, #460	; (adr r3, 8008b58 <__ieee754_pow+0x728>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fc85 	bl	800029c <__adddf3>
 8008992:	4622      	mov	r2, r4
 8008994:	462b      	mov	r3, r5
 8008996:	f7f7 fe37 	bl	8000608 <__aeabi_dmul>
 800899a:	a371      	add	r3, pc, #452	; (adr r3, 8008b60 <__ieee754_pow+0x730>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fc7c 	bl	800029c <__adddf3>
 80089a4:	4622      	mov	r2, r4
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	462b      	mov	r3, r5
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fe2a 	bl	8000608 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4630      	mov	r0, r6
 80089ba:	4639      	mov	r1, r7
 80089bc:	f7f7 fe24 	bl	8000608 <__aeabi_dmul>
 80089c0:	4642      	mov	r2, r8
 80089c2:	4604      	mov	r4, r0
 80089c4:	460d      	mov	r5, r1
 80089c6:	464b      	mov	r3, r9
 80089c8:	ec51 0b18 	vmov	r0, r1, d8
 80089cc:	f7f7 fc66 	bl	800029c <__adddf3>
 80089d0:	ec53 2b19 	vmov	r2, r3, d9
 80089d4:	f7f7 fe18 	bl	8000608 <__aeabi_dmul>
 80089d8:	4622      	mov	r2, r4
 80089da:	462b      	mov	r3, r5
 80089dc:	f7f7 fc5e 	bl	800029c <__adddf3>
 80089e0:	4642      	mov	r2, r8
 80089e2:	4682      	mov	sl, r0
 80089e4:	468b      	mov	fp, r1
 80089e6:	464b      	mov	r3, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	4b6b      	ldr	r3, [pc, #428]	; (8008ba0 <__ieee754_pow+0x770>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	f7f7 fc50 	bl	800029c <__adddf3>
 80089fc:	4652      	mov	r2, sl
 80089fe:	465b      	mov	r3, fp
 8008a00:	f7f7 fc4c 	bl	800029c <__adddf3>
 8008a04:	2000      	movs	r0, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4649      	mov	r1, r9
 8008a12:	f7f7 fdf9 	bl	8000608 <__aeabi_dmul>
 8008a16:	4b62      	ldr	r3, [pc, #392]	; (8008ba0 <__ieee754_pow+0x770>)
 8008a18:	4680      	mov	r8, r0
 8008a1a:	4689      	mov	r9, r1
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7f7 fc39 	bl	8000298 <__aeabi_dsub>
 8008a26:	4632      	mov	r2, r6
 8008a28:	463b      	mov	r3, r7
 8008a2a:	f7f7 fc35 	bl	8000298 <__aeabi_dsub>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4650      	mov	r0, sl
 8008a34:	4659      	mov	r1, fp
 8008a36:	f7f7 fc2f 	bl	8000298 <__aeabi_dsub>
 8008a3a:	ec53 2b18 	vmov	r2, r3, d8
 8008a3e:	f7f7 fde3 	bl	8000608 <__aeabi_dmul>
 8008a42:	4622      	mov	r2, r4
 8008a44:	4606      	mov	r6, r0
 8008a46:	460f      	mov	r7, r1
 8008a48:	462b      	mov	r3, r5
 8008a4a:	ec51 0b19 	vmov	r0, r1, d9
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fc1f 	bl	800029c <__adddf3>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fc17 	bl	800029c <__adddf3>
 8008a6e:	a33e      	add	r3, pc, #248	; (adr r3, 8008b68 <__ieee754_pow+0x738>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	2000      	movs	r0, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f7 fdc5 	bl	8000608 <__aeabi_dmul>
 8008a7e:	4642      	mov	r2, r8
 8008a80:	ec41 0b18 	vmov	d8, r0, r1
 8008a84:	464b      	mov	r3, r9
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fc05 	bl	8000298 <__aeabi_dsub>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4630      	mov	r0, r6
 8008a94:	4639      	mov	r1, r7
 8008a96:	f7f7 fbff 	bl	8000298 <__aeabi_dsub>
 8008a9a:	a335      	add	r3, pc, #212	; (adr r3, 8008b70 <__ieee754_pow+0x740>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fdb2 	bl	8000608 <__aeabi_dmul>
 8008aa4:	a334      	add	r3, pc, #208	; (adr r3, 8008b78 <__ieee754_pow+0x748>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 fda9 	bl	8000608 <__aeabi_dmul>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fbed 	bl	800029c <__adddf3>
 8008ac2:	9a07      	ldr	r2, [sp, #28]
 8008ac4:	4b37      	ldr	r3, [pc, #220]	; (8008ba4 <__ieee754_pow+0x774>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fbe6 	bl	800029c <__adddf3>
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	468b      	mov	fp, r1
 8008ad6:	f7f7 fd2d 	bl	8000534 <__aeabi_i2d>
 8008ada:	9a07      	ldr	r2, [sp, #28]
 8008adc:	4b32      	ldr	r3, [pc, #200]	; (8008ba8 <__ieee754_pow+0x778>)
 8008ade:	4413      	add	r3, r2
 8008ae0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	465b      	mov	r3, fp
 8008aec:	ec51 0b18 	vmov	r0, r1, d8
 8008af0:	f7f7 fbd4 	bl	800029c <__adddf3>
 8008af4:	4642      	mov	r2, r8
 8008af6:	464b      	mov	r3, r9
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	4632      	mov	r2, r6
 8008afe:	463b      	mov	r3, r7
 8008b00:	f7f7 fbcc 	bl	800029c <__adddf3>
 8008b04:	2000      	movs	r0, #0
 8008b06:	4632      	mov	r2, r6
 8008b08:	463b      	mov	r3, r7
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	f7f7 fbc3 	bl	8000298 <__aeabi_dsub>
 8008b12:	4642      	mov	r2, r8
 8008b14:	464b      	mov	r3, r9
 8008b16:	f7f7 fbbf 	bl	8000298 <__aeabi_dsub>
 8008b1a:	ec53 2b18 	vmov	r2, r3, d8
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4650      	mov	r0, sl
 8008b28:	4659      	mov	r1, fp
 8008b2a:	e610      	b.n	800874e <__ieee754_pow+0x31e>
 8008b2c:	2401      	movs	r4, #1
 8008b2e:	e6a1      	b.n	8008874 <__ieee754_pow+0x444>
 8008b30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008b80 <__ieee754_pow+0x750>
 8008b34:	e617      	b.n	8008766 <__ieee754_pow+0x336>
 8008b36:	bf00      	nop
 8008b38:	4a454eef 	.word	0x4a454eef
 8008b3c:	3fca7e28 	.word	0x3fca7e28
 8008b40:	93c9db65 	.word	0x93c9db65
 8008b44:	3fcd864a 	.word	0x3fcd864a
 8008b48:	a91d4101 	.word	0xa91d4101
 8008b4c:	3fd17460 	.word	0x3fd17460
 8008b50:	518f264d 	.word	0x518f264d
 8008b54:	3fd55555 	.word	0x3fd55555
 8008b58:	db6fabff 	.word	0xdb6fabff
 8008b5c:	3fdb6db6 	.word	0x3fdb6db6
 8008b60:	33333303 	.word	0x33333303
 8008b64:	3fe33333 	.word	0x3fe33333
 8008b68:	e0000000 	.word	0xe0000000
 8008b6c:	3feec709 	.word	0x3feec709
 8008b70:	dc3a03fd 	.word	0xdc3a03fd
 8008b74:	3feec709 	.word	0x3feec709
 8008b78:	145b01f5 	.word	0x145b01f5
 8008b7c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b80:	00000000 	.word	0x00000000
 8008b84:	3ff00000 	.word	0x3ff00000
 8008b88:	7ff00000 	.word	0x7ff00000
 8008b8c:	43400000 	.word	0x43400000
 8008b90:	0003988e 	.word	0x0003988e
 8008b94:	000bb679 	.word	0x000bb679
 8008b98:	08009650 	.word	0x08009650
 8008b9c:	3ff00000 	.word	0x3ff00000
 8008ba0:	40080000 	.word	0x40080000
 8008ba4:	08009670 	.word	0x08009670
 8008ba8:	08009660 	.word	0x08009660
 8008bac:	a3b5      	add	r3, pc, #724	; (adr r3, 8008e84 <__ieee754_pow+0xa54>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	f7f7 fb71 	bl	800029c <__adddf3>
 8008bba:	4622      	mov	r2, r4
 8008bbc:	ec41 0b1a 	vmov	d10, r0, r1
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb67 	bl	8000298 <__aeabi_dsub>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	ec51 0b1a 	vmov	r0, r1, d10
 8008bd2:	f7f7 ffa9 	bl	8000b28 <__aeabi_dcmpgt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f47f ae04 	bne.w	80087e4 <__ieee754_pow+0x3b4>
 8008bdc:	4aa4      	ldr	r2, [pc, #656]	; (8008e70 <__ieee754_pow+0xa40>)
 8008bde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008be2:	4293      	cmp	r3, r2
 8008be4:	f340 8108 	ble.w	8008df8 <__ieee754_pow+0x9c8>
 8008be8:	151b      	asrs	r3, r3, #20
 8008bea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008bf2:	fa4a f303 	asr.w	r3, sl, r3
 8008bf6:	445b      	add	r3, fp
 8008bf8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008bfc:	4e9d      	ldr	r6, [pc, #628]	; (8008e74 <__ieee754_pow+0xa44>)
 8008bfe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c02:	4116      	asrs	r6, r2
 8008c04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c08:	2000      	movs	r0, #0
 8008c0a:	ea23 0106 	bic.w	r1, r3, r6
 8008c0e:	f1c2 0214 	rsb	r2, r2, #20
 8008c12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c16:	fa4a fa02 	asr.w	sl, sl, r2
 8008c1a:	f1bb 0f00 	cmp.w	fp, #0
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	bfb8      	it	lt
 8008c28:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c2c:	f7f7 fb34 	bl	8000298 <__aeabi_dsub>
 8008c30:	ec41 0b19 	vmov	d9, r0, r1
 8008c34:	4642      	mov	r2, r8
 8008c36:	464b      	mov	r3, r9
 8008c38:	ec51 0b19 	vmov	r0, r1, d9
 8008c3c:	f7f7 fb2e 	bl	800029c <__adddf3>
 8008c40:	a37b      	add	r3, pc, #492	; (adr r3, 8008e30 <__ieee754_pow+0xa00>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	2000      	movs	r0, #0
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	ec53 2b19 	vmov	r2, r3, d9
 8008c54:	4606      	mov	r6, r0
 8008c56:	460f      	mov	r7, r1
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fb1c 	bl	8000298 <__aeabi_dsub>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4640      	mov	r0, r8
 8008c66:	4649      	mov	r1, r9
 8008c68:	f7f7 fb16 	bl	8000298 <__aeabi_dsub>
 8008c6c:	a372      	add	r3, pc, #456	; (adr r3, 8008e38 <__ieee754_pow+0xa08>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	a372      	add	r3, pc, #456	; (adr r3, 8008e40 <__ieee754_pow+0xa10>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4689      	mov	r9, r1
 8008c80:	4620      	mov	r0, r4
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	4649      	mov	r1, r9
 8008c90:	f7f7 fb04 	bl	800029c <__adddf3>
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fafc 	bl	800029c <__adddf3>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	4680      	mov	r8, r0
 8008caa:	4689      	mov	r9, r1
 8008cac:	f7f7 faf4 	bl	8000298 <__aeabi_dsub>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 faee 	bl	8000298 <__aeabi_dsub>
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	a35e      	add	r3, pc, #376	; (adr r3, 8008e48 <__ieee754_pow+0xa18>)
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	f7f7 fc97 	bl	8000608 <__aeabi_dmul>
 8008cda:	a35d      	add	r3, pc, #372	; (adr r3, 8008e50 <__ieee754_pow+0xa20>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fada 	bl	8000298 <__aeabi_dsub>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f7f7 fc8e 	bl	8000608 <__aeabi_dmul>
 8008cec:	a35a      	add	r3, pc, #360	; (adr r3, 8008e58 <__ieee754_pow+0xa28>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fad3 	bl	800029c <__adddf3>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	f7f7 fc85 	bl	8000608 <__aeabi_dmul>
 8008cfe:	a358      	add	r3, pc, #352	; (adr r3, 8008e60 <__ieee754_pow+0xa30>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fac8 	bl	8000298 <__aeabi_dsub>
 8008d08:	4622      	mov	r2, r4
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	f7f7 fc7c 	bl	8000608 <__aeabi_dmul>
 8008d10:	a355      	add	r3, pc, #340	; (adr r3, 8008e68 <__ieee754_pow+0xa38>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fac1 	bl	800029c <__adddf3>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fc73 	bl	8000608 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f7f7 fab5 	bl	8000298 <__aeabi_dsub>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	460d      	mov	r5, r1
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 fc65 	bl	8000608 <__aeabi_dmul>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	ec41 0b19 	vmov	d9, r0, r1
 8008d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 faa4 	bl	8000298 <__aeabi_dsub>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	ec51 0b19 	vmov	r0, r1, d9
 8008d58:	f7f7 fd80 	bl	800085c <__aeabi_ddiv>
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	463b      	mov	r3, r7
 8008d64:	4640      	mov	r0, r8
 8008d66:	4649      	mov	r1, r9
 8008d68:	f7f7 fc4e 	bl	8000608 <__aeabi_dmul>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	f7f7 fa94 	bl	800029c <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fa8c 	bl	8000298 <__aeabi_dsub>
 8008d80:	4642      	mov	r2, r8
 8008d82:	464b      	mov	r3, r9
 8008d84:	f7f7 fa88 	bl	8000298 <__aeabi_dsub>
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	493a      	ldr	r1, [pc, #232]	; (8008e78 <__ieee754_pow+0xa48>)
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f7f7 fa82 	bl	8000298 <__aeabi_dsub>
 8008d94:	ec41 0b10 	vmov	d0, r0, r1
 8008d98:	ee10 3a90 	vmov	r3, s1
 8008d9c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da4:	da2b      	bge.n	8008dfe <__ieee754_pow+0x9ce>
 8008da6:	4650      	mov	r0, sl
 8008da8:	f000 f966 	bl	8009078 <scalbn>
 8008dac:	ec51 0b10 	vmov	r0, r1, d0
 8008db0:	ec53 2b18 	vmov	r2, r3, d8
 8008db4:	f7ff bbed 	b.w	8008592 <__ieee754_pow+0x162>
 8008db8:	4b30      	ldr	r3, [pc, #192]	; (8008e7c <__ieee754_pow+0xa4c>)
 8008dba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008dbe:	429e      	cmp	r6, r3
 8008dc0:	f77f af0c 	ble.w	8008bdc <__ieee754_pow+0x7ac>
 8008dc4:	4b2e      	ldr	r3, [pc, #184]	; (8008e80 <__ieee754_pow+0xa50>)
 8008dc6:	440b      	add	r3, r1
 8008dc8:	4303      	orrs	r3, r0
 8008dca:	d009      	beq.n	8008de0 <__ieee754_pow+0x9b0>
 8008dcc:	ec51 0b18 	vmov	r0, r1, d8
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f7f7 fe8a 	bl	8000aec <__aeabi_dcmplt>
 8008dd8:	3800      	subs	r0, #0
 8008dda:	bf18      	it	ne
 8008ddc:	2001      	movne	r0, #1
 8008dde:	e447      	b.n	8008670 <__ieee754_pow+0x240>
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	f7f7 fa58 	bl	8000298 <__aeabi_dsub>
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	f7f7 fe92 	bl	8000b14 <__aeabi_dcmpge>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f43f aef3 	beq.w	8008bdc <__ieee754_pow+0x7ac>
 8008df6:	e7e9      	b.n	8008dcc <__ieee754_pow+0x99c>
 8008df8:	f04f 0a00 	mov.w	sl, #0
 8008dfc:	e71a      	b.n	8008c34 <__ieee754_pow+0x804>
 8008dfe:	ec51 0b10 	vmov	r0, r1, d0
 8008e02:	4619      	mov	r1, r3
 8008e04:	e7d4      	b.n	8008db0 <__ieee754_pow+0x980>
 8008e06:	491c      	ldr	r1, [pc, #112]	; (8008e78 <__ieee754_pow+0xa48>)
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f7ff bb30 	b.w	800846e <__ieee754_pow+0x3e>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	f7ff bb2c 	b.w	800846e <__ieee754_pow+0x3e>
 8008e16:	4630      	mov	r0, r6
 8008e18:	4639      	mov	r1, r7
 8008e1a:	f7ff bb28 	b.w	800846e <__ieee754_pow+0x3e>
 8008e1e:	9204      	str	r2, [sp, #16]
 8008e20:	f7ff bb7a 	b.w	8008518 <__ieee754_pow+0xe8>
 8008e24:	2300      	movs	r3, #0
 8008e26:	f7ff bb64 	b.w	80084f2 <__ieee754_pow+0xc2>
 8008e2a:	bf00      	nop
 8008e2c:	f3af 8000 	nop.w
 8008e30:	00000000 	.word	0x00000000
 8008e34:	3fe62e43 	.word	0x3fe62e43
 8008e38:	fefa39ef 	.word	0xfefa39ef
 8008e3c:	3fe62e42 	.word	0x3fe62e42
 8008e40:	0ca86c39 	.word	0x0ca86c39
 8008e44:	be205c61 	.word	0xbe205c61
 8008e48:	72bea4d0 	.word	0x72bea4d0
 8008e4c:	3e663769 	.word	0x3e663769
 8008e50:	c5d26bf1 	.word	0xc5d26bf1
 8008e54:	3ebbbd41 	.word	0x3ebbbd41
 8008e58:	af25de2c 	.word	0xaf25de2c
 8008e5c:	3f11566a 	.word	0x3f11566a
 8008e60:	16bebd93 	.word	0x16bebd93
 8008e64:	3f66c16c 	.word	0x3f66c16c
 8008e68:	5555553e 	.word	0x5555553e
 8008e6c:	3fc55555 	.word	0x3fc55555
 8008e70:	3fe00000 	.word	0x3fe00000
 8008e74:	000fffff 	.word	0x000fffff
 8008e78:	3ff00000 	.word	0x3ff00000
 8008e7c:	4090cbff 	.word	0x4090cbff
 8008e80:	3f6f3400 	.word	0x3f6f3400
 8008e84:	652b82fe 	.word	0x652b82fe
 8008e88:	3c971547 	.word	0x3c971547

08008e8c <__ieee754_sqrt>:
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	ec55 4b10 	vmov	r4, r5, d0
 8008e94:	4e55      	ldr	r6, [pc, #340]	; (8008fec <__ieee754_sqrt+0x160>)
 8008e96:	43ae      	bics	r6, r5
 8008e98:	ee10 0a10 	vmov	r0, s0
 8008e9c:	ee10 3a10 	vmov	r3, s0
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	d110      	bne.n	8008ec8 <__ieee754_sqrt+0x3c>
 8008ea6:	ee10 2a10 	vmov	r2, s0
 8008eaa:	462b      	mov	r3, r5
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 f9f0 	bl	800029c <__adddf3>
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	460d      	mov	r5, r1
 8008ec0:	ec45 4b10 	vmov	d0, r4, r5
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	dc10      	bgt.n	8008eee <__ieee754_sqrt+0x62>
 8008ecc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ed0:	4330      	orrs	r0, r6
 8008ed2:	d0f5      	beq.n	8008ec0 <__ieee754_sqrt+0x34>
 8008ed4:	b15d      	cbz	r5, 8008eee <__ieee754_sqrt+0x62>
 8008ed6:	ee10 2a10 	vmov	r2, s0
 8008eda:	462b      	mov	r3, r5
 8008edc:	ee10 0a10 	vmov	r0, s0
 8008ee0:	f7f7 f9da 	bl	8000298 <__aeabi_dsub>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	f7f7 fcb8 	bl	800085c <__aeabi_ddiv>
 8008eec:	e7e6      	b.n	8008ebc <__ieee754_sqrt+0x30>
 8008eee:	1512      	asrs	r2, r2, #20
 8008ef0:	d074      	beq.n	8008fdc <__ieee754_sqrt+0x150>
 8008ef2:	07d4      	lsls	r4, r2, #31
 8008ef4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008ef8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f00:	bf5e      	ittt	pl
 8008f02:	0fda      	lsrpl	r2, r3, #31
 8008f04:	005b      	lslpl	r3, r3, #1
 8008f06:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008f0a:	2400      	movs	r4, #0
 8008f0c:	0fda      	lsrs	r2, r3, #31
 8008f0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008f12:	107f      	asrs	r7, r7, #1
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	2516      	movs	r5, #22
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008f1e:	1886      	adds	r6, r0, r2
 8008f20:	428e      	cmp	r6, r1
 8008f22:	bfde      	ittt	le
 8008f24:	1b89      	suble	r1, r1, r6
 8008f26:	18b0      	addle	r0, r6, r2
 8008f28:	18a4      	addle	r4, r4, r2
 8008f2a:	0049      	lsls	r1, r1, #1
 8008f2c:	3d01      	subs	r5, #1
 8008f2e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008f32:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f3a:	d1f0      	bne.n	8008f1e <__ieee754_sqrt+0x92>
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	f04f 0e20 	mov.w	lr, #32
 8008f42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f46:	4281      	cmp	r1, r0
 8008f48:	eb06 0c05 	add.w	ip, r6, r5
 8008f4c:	dc02      	bgt.n	8008f54 <__ieee754_sqrt+0xc8>
 8008f4e:	d113      	bne.n	8008f78 <__ieee754_sqrt+0xec>
 8008f50:	459c      	cmp	ip, r3
 8008f52:	d811      	bhi.n	8008f78 <__ieee754_sqrt+0xec>
 8008f54:	f1bc 0f00 	cmp.w	ip, #0
 8008f58:	eb0c 0506 	add.w	r5, ip, r6
 8008f5c:	da43      	bge.n	8008fe6 <__ieee754_sqrt+0x15a>
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	db41      	blt.n	8008fe6 <__ieee754_sqrt+0x15a>
 8008f62:	f100 0801 	add.w	r8, r0, #1
 8008f66:	1a09      	subs	r1, r1, r0
 8008f68:	459c      	cmp	ip, r3
 8008f6a:	bf88      	it	hi
 8008f6c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008f70:	eba3 030c 	sub.w	r3, r3, ip
 8008f74:	4432      	add	r2, r6
 8008f76:	4640      	mov	r0, r8
 8008f78:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008f7c:	f1be 0e01 	subs.w	lr, lr, #1
 8008f80:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f8c:	d1db      	bne.n	8008f46 <__ieee754_sqrt+0xba>
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	d006      	beq.n	8008fa0 <__ieee754_sqrt+0x114>
 8008f92:	1c50      	adds	r0, r2, #1
 8008f94:	bf13      	iteet	ne
 8008f96:	3201      	addne	r2, #1
 8008f98:	3401      	addeq	r4, #1
 8008f9a:	4672      	moveq	r2, lr
 8008f9c:	f022 0201 	bicne.w	r2, r2, #1
 8008fa0:	1063      	asrs	r3, r4, #1
 8008fa2:	0852      	lsrs	r2, r2, #1
 8008fa4:	07e1      	lsls	r1, r4, #31
 8008fa6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008faa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008fae:	bf48      	it	mi
 8008fb0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008fb4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008fb8:	4614      	mov	r4, r2
 8008fba:	e781      	b.n	8008ec0 <__ieee754_sqrt+0x34>
 8008fbc:	0ad9      	lsrs	r1, r3, #11
 8008fbe:	3815      	subs	r0, #21
 8008fc0:	055b      	lsls	r3, r3, #21
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d0fa      	beq.n	8008fbc <__ieee754_sqrt+0x130>
 8008fc6:	02cd      	lsls	r5, r1, #11
 8008fc8:	d50a      	bpl.n	8008fe0 <__ieee754_sqrt+0x154>
 8008fca:	f1c2 0420 	rsb	r4, r2, #32
 8008fce:	fa23 f404 	lsr.w	r4, r3, r4
 8008fd2:	1e55      	subs	r5, r2, #1
 8008fd4:	4093      	lsls	r3, r2
 8008fd6:	4321      	orrs	r1, r4
 8008fd8:	1b42      	subs	r2, r0, r5
 8008fda:	e78a      	b.n	8008ef2 <__ieee754_sqrt+0x66>
 8008fdc:	4610      	mov	r0, r2
 8008fde:	e7f0      	b.n	8008fc2 <__ieee754_sqrt+0x136>
 8008fe0:	0049      	lsls	r1, r1, #1
 8008fe2:	3201      	adds	r2, #1
 8008fe4:	e7ef      	b.n	8008fc6 <__ieee754_sqrt+0x13a>
 8008fe6:	4680      	mov	r8, r0
 8008fe8:	e7bd      	b.n	8008f66 <__ieee754_sqrt+0xda>
 8008fea:	bf00      	nop
 8008fec:	7ff00000 	.word	0x7ff00000

08008ff0 <with_errno>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4616      	mov	r6, r2
 8008ff8:	f7fc fa0a 	bl	8005410 <__errno>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	6006      	str	r6, [r0, #0]
 8009000:	4620      	mov	r0, r4
 8009002:	bd70      	pop	{r4, r5, r6, pc}

08009004 <xflow>:
 8009004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009006:	4614      	mov	r4, r2
 8009008:	461d      	mov	r5, r3
 800900a:	b108      	cbz	r0, 8009010 <xflow+0xc>
 800900c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009010:	e9cd 2300 	strd	r2, r3, [sp]
 8009014:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009018:	4620      	mov	r0, r4
 800901a:	4629      	mov	r1, r5
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	2222      	movs	r2, #34	; 0x22
 8009022:	b003      	add	sp, #12
 8009024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009028:	f7ff bfe2 	b.w	8008ff0 <with_errno>

0800902c <__math_uflow>:
 800902c:	b508      	push	{r3, lr}
 800902e:	2200      	movs	r2, #0
 8009030:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009034:	f7ff ffe6 	bl	8009004 <xflow>
 8009038:	ec41 0b10 	vmov	d0, r0, r1
 800903c:	bd08      	pop	{r3, pc}

0800903e <__math_oflow>:
 800903e:	b508      	push	{r3, lr}
 8009040:	2200      	movs	r2, #0
 8009042:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009046:	f7ff ffdd 	bl	8009004 <xflow>
 800904a:	ec41 0b10 	vmov	d0, r0, r1
 800904e:	bd08      	pop	{r3, pc}

08009050 <fabs>:
 8009050:	ec51 0b10 	vmov	r0, r1, d0
 8009054:	ee10 2a10 	vmov	r2, s0
 8009058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800905c:	ec43 2b10 	vmov	d0, r2, r3
 8009060:	4770      	bx	lr

08009062 <finite>:
 8009062:	b082      	sub	sp, #8
 8009064:	ed8d 0b00 	vstr	d0, [sp]
 8009068:	9801      	ldr	r0, [sp, #4]
 800906a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800906e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009072:	0fc0      	lsrs	r0, r0, #31
 8009074:	b002      	add	sp, #8
 8009076:	4770      	bx	lr

08009078 <scalbn>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	ec55 4b10 	vmov	r4, r5, d0
 800907e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009082:	4606      	mov	r6, r0
 8009084:	462b      	mov	r3, r5
 8009086:	b99a      	cbnz	r2, 80090b0 <scalbn+0x38>
 8009088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800908c:	4323      	orrs	r3, r4
 800908e:	d036      	beq.n	80090fe <scalbn+0x86>
 8009090:	4b39      	ldr	r3, [pc, #228]	; (8009178 <scalbn+0x100>)
 8009092:	4629      	mov	r1, r5
 8009094:	ee10 0a10 	vmov	r0, s0
 8009098:	2200      	movs	r2, #0
 800909a:	f7f7 fab5 	bl	8000608 <__aeabi_dmul>
 800909e:	4b37      	ldr	r3, [pc, #220]	; (800917c <scalbn+0x104>)
 80090a0:	429e      	cmp	r6, r3
 80090a2:	4604      	mov	r4, r0
 80090a4:	460d      	mov	r5, r1
 80090a6:	da10      	bge.n	80090ca <scalbn+0x52>
 80090a8:	a32b      	add	r3, pc, #172	; (adr r3, 8009158 <scalbn+0xe0>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	e03a      	b.n	8009126 <scalbn+0xae>
 80090b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090b4:	428a      	cmp	r2, r1
 80090b6:	d10c      	bne.n	80090d2 <scalbn+0x5a>
 80090b8:	ee10 2a10 	vmov	r2, s0
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 f8ec 	bl	800029c <__adddf3>
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	e019      	b.n	80090fe <scalbn+0x86>
 80090ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090ce:	460b      	mov	r3, r1
 80090d0:	3a36      	subs	r2, #54	; 0x36
 80090d2:	4432      	add	r2, r6
 80090d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090d8:	428a      	cmp	r2, r1
 80090da:	dd08      	ble.n	80090ee <scalbn+0x76>
 80090dc:	2d00      	cmp	r5, #0
 80090de:	a120      	add	r1, pc, #128	; (adr r1, 8009160 <scalbn+0xe8>)
 80090e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e4:	da1c      	bge.n	8009120 <scalbn+0xa8>
 80090e6:	a120      	add	r1, pc, #128	; (adr r1, 8009168 <scalbn+0xf0>)
 80090e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ec:	e018      	b.n	8009120 <scalbn+0xa8>
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	dd08      	ble.n	8009104 <scalbn+0x8c>
 80090f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80090fe:	ec45 4b10 	vmov	d0, r4, r5
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009108:	da19      	bge.n	800913e <scalbn+0xc6>
 800910a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800910e:	429e      	cmp	r6, r3
 8009110:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009114:	dd0a      	ble.n	800912c <scalbn+0xb4>
 8009116:	a112      	add	r1, pc, #72	; (adr r1, 8009160 <scalbn+0xe8>)
 8009118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e2      	bne.n	80090e6 <scalbn+0x6e>
 8009120:	a30f      	add	r3, pc, #60	; (adr r3, 8009160 <scalbn+0xe8>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 fa6f 	bl	8000608 <__aeabi_dmul>
 800912a:	e7cb      	b.n	80090c4 <scalbn+0x4c>
 800912c:	a10a      	add	r1, pc, #40	; (adr r1, 8009158 <scalbn+0xe0>)
 800912e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0b8      	beq.n	80090a8 <scalbn+0x30>
 8009136:	a10e      	add	r1, pc, #56	; (adr r1, 8009170 <scalbn+0xf8>)
 8009138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800913c:	e7b4      	b.n	80090a8 <scalbn+0x30>
 800913e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009142:	3236      	adds	r2, #54	; 0x36
 8009144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009148:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800914c:	4620      	mov	r0, r4
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <scalbn+0x108>)
 8009150:	2200      	movs	r2, #0
 8009152:	e7e8      	b.n	8009126 <scalbn+0xae>
 8009154:	f3af 8000 	nop.w
 8009158:	c2f8f359 	.word	0xc2f8f359
 800915c:	01a56e1f 	.word	0x01a56e1f
 8009160:	8800759c 	.word	0x8800759c
 8009164:	7e37e43c 	.word	0x7e37e43c
 8009168:	8800759c 	.word	0x8800759c
 800916c:	fe37e43c 	.word	0xfe37e43c
 8009170:	c2f8f359 	.word	0xc2f8f359
 8009174:	81a56e1f 	.word	0x81a56e1f
 8009178:	43500000 	.word	0x43500000
 800917c:	ffff3cb0 	.word	0xffff3cb0
 8009180:	3c900000 	.word	0x3c900000

08009184 <_init>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr

08009190 <_fini>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr
