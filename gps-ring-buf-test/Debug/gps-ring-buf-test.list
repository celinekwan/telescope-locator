
gps-ring-buf-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006070  08006070  00016070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000070  080062a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  080062a8  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d926  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002182  00000000  00000000  0002d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223f6  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2c6  00000000  00000000  0005332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce38e  00000000  00000000  000605f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012e982  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  0012e9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006054 	.word	0x08006054

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08006054 	.word	0x08006054

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b974 	b.w	8000e60 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9d08      	ldr	r5, [sp, #32]
 8000b96:	4604      	mov	r4, r0
 8000b98:	468e      	mov	lr, r1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d14d      	bne.n	8000c3a <__udivmoddi4+0xaa>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	d969      	bls.n	8000c78 <__udivmoddi4+0xe8>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b152      	cbz	r2, 8000bc0 <__udivmoddi4+0x30>
 8000baa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bae:	f1c2 0120 	rsb	r1, r2, #32
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bba:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbe:	4094      	lsls	r4, r2
 8000bc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc4:	0c21      	lsrs	r1, r4, #16
 8000bc6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bca:	fa1f f78c 	uxth.w	r7, ip
 8000bce:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bd6:	fb06 f107 	mul.w	r1, r6, r7
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	d90a      	bls.n	8000bf4 <__udivmoddi4+0x64>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 811f 	bcs.w	8000e28 <__udivmoddi4+0x298>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 811c 	bls.w	8000e28 <__udivmoddi4+0x298>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 f707 	mul.w	r7, r0, r7
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x92>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c14:	f080 810a 	bcs.w	8000e2c <__udivmoddi4+0x29c>
 8000c18:	42a7      	cmp	r7, r4
 8000c1a:	f240 8107 	bls.w	8000e2c <__udivmoddi4+0x29c>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c26:	1be4      	subs	r4, r4, r7
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa4>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xc2>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	f000 80ef 	beq.w	8000e22 <__udivmoddi4+0x292>
 8000c44:	2600      	movs	r6, #0
 8000c46:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f683 	clz	r6, r3
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d14a      	bne.n	8000cf0 <__udivmoddi4+0x160>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd4>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80f9 	bhi.w	8000e56 <__udivmoddi4+0x2c6>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	469e      	mov	lr, r3
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa4>
 8000c72:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa4>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xec>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 8092 	bne.w	8000daa <__udivmoddi4+0x21a>
 8000c86:	eba1 010c 	sub.w	r1, r1, ip
 8000c8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	2601      	movs	r6, #1
 8000c94:	0c20      	lsrs	r0, r4, #16
 8000c96:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c9e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca2:	fb0e f003 	mul.w	r0, lr, r3
 8000ca6:	4288      	cmp	r0, r1
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x12c>
 8000caa:	eb1c 0101 	adds.w	r1, ip, r1
 8000cae:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x12a>
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	f200 80cb 	bhi.w	8000e50 <__udivmoddi4+0x2c0>
 8000cba:	4643      	mov	r3, r8
 8000cbc:	1a09      	subs	r1, r1, r0
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ccc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x156>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x154>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f200 80bb 	bhi.w	8000e5a <__udivmoddi4+0x2ca>
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cee:	e79c      	b.n	8000c2a <__udivmoddi4+0x9a>
 8000cf0:	f1c6 0720 	rsb	r7, r6, #32
 8000cf4:	40b3      	lsls	r3, r6
 8000cf6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa20 f407 	lsr.w	r4, r0, r7
 8000d02:	fa01 f306 	lsl.w	r3, r1, r6
 8000d06:	431c      	orrs	r4, r3
 8000d08:	40f9      	lsrs	r1, r7
 8000d0a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d12:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d16:	0c20      	lsrs	r0, r4, #16
 8000d18:	fa1f fe8c 	uxth.w	lr, ip
 8000d1c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d24:	fb08 f00e 	mul.w	r0, r8, lr
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b8>
 8000d30:	eb1c 0101 	adds.w	r1, ip, r1
 8000d34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2bc>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2bc>
 8000d42:	f1a8 0802 	sub.w	r8, r8, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d50:	fb09 1110 	mls	r1, r9, r0, r1
 8000d54:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d5c:	458e      	cmp	lr, r1
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1e2>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d68:	d26c      	bcs.n	8000e44 <__udivmoddi4+0x2b4>
 8000d6a:	458e      	cmp	lr, r1
 8000d6c:	d96a      	bls.n	8000e44 <__udivmoddi4+0x2b4>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4461      	add	r1, ip
 8000d72:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d76:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7a:	eba1 010e 	sub.w	r1, r1, lr
 8000d7e:	42a1      	cmp	r1, r4
 8000d80:	46c8      	mov	r8, r9
 8000d82:	46a6      	mov	lr, r4
 8000d84:	d356      	bcc.n	8000e34 <__udivmoddi4+0x2a4>
 8000d86:	d053      	beq.n	8000e30 <__udivmoddi4+0x2a0>
 8000d88:	b15d      	cbz	r5, 8000da2 <__udivmoddi4+0x212>
 8000d8a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d8e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d92:	fa01 f707 	lsl.w	r7, r1, r7
 8000d96:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9a:	40f1      	lsrs	r1, r6
 8000d9c:	431f      	orrs	r7, r3
 8000d9e:	e9c5 7100 	strd	r7, r1, [r5]
 8000da2:	2600      	movs	r6, #0
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	40d8      	lsrs	r0, r3
 8000db0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db4:	fa21 f303 	lsr.w	r3, r1, r3
 8000db8:	4091      	lsls	r1, r2
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dcc:	0c0b      	lsrs	r3, r1, #16
 8000dce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dd6:	429e      	cmp	r6, r3
 8000dd8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x260>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de6:	d22f      	bcs.n	8000e48 <__udivmoddi4+0x2b8>
 8000de8:	429e      	cmp	r6, r3
 8000dea:	d92d      	bls.n	8000e48 <__udivmoddi4+0x2b8>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4463      	add	r3, ip
 8000df0:	1b9b      	subs	r3, r3, r6
 8000df2:	b289      	uxth	r1, r1
 8000df4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb06 f30e 	mul.w	r3, r6, lr
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x28a>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e10:	d216      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d914      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000e16:	3e02      	subs	r6, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e20:	e738      	b.n	8000c94 <__udivmoddi4+0x104>
 8000e22:	462e      	mov	r6, r5
 8000e24:	4628      	mov	r0, r5
 8000e26:	e705      	b.n	8000c34 <__udivmoddi4+0xa4>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	e6e3      	b.n	8000bf4 <__udivmoddi4+0x64>
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	e6f8      	b.n	8000c22 <__udivmoddi4+0x92>
 8000e30:	454b      	cmp	r3, r9
 8000e32:	d2a9      	bcs.n	8000d88 <__udivmoddi4+0x1f8>
 8000e34:	ebb9 0802 	subs.w	r8, r9, r2
 8000e38:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	e7a3      	b.n	8000d88 <__udivmoddi4+0x1f8>
 8000e40:	4646      	mov	r6, r8
 8000e42:	e7ea      	b.n	8000e1a <__udivmoddi4+0x28a>
 8000e44:	4620      	mov	r0, r4
 8000e46:	e794      	b.n	8000d72 <__udivmoddi4+0x1e2>
 8000e48:	4640      	mov	r0, r8
 8000e4a:	e7d1      	b.n	8000df0 <__udivmoddi4+0x260>
 8000e4c:	46d0      	mov	r8, sl
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b8>
 8000e50:	3b02      	subs	r3, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	e732      	b.n	8000cbc <__udivmoddi4+0x12c>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e709      	b.n	8000c6e <__udivmoddi4+0xde>
 8000e5a:	4464      	add	r4, ip
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	e742      	b.n	8000ce6 <__udivmoddi4+0x156>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e6c:	b08c      	sub	sp, #48	; 0x30
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000e74:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <decodeGGA+0x17c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ',' (after GGA/RMC)
 8000e7e:	e004      	b.n	8000e8a <decodeGGA+0x22>
 8000e80:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <decodeGGA+0x17c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a57      	ldr	r2, [pc, #348]	; (8000fe4 <decodeGGA+0x17c>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <decodeGGA+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b2c      	cmp	r3, #44	; 0x2c
 8000e98:	d1f2      	bne.n	8000e80 <decodeGGA+0x18>
	inx++;
 8000e9a:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <decodeGGA+0x17c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <decodeGGA+0x17c>)
 8000ea2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000ea4:	e004      	b.n	8000eb0 <decodeGGA+0x48>
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <decodeGGA+0x17c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a4d      	ldr	r2, [pc, #308]	; (8000fe4 <decodeGGA+0x17c>)
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <decodeGGA+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b2c      	cmp	r3, #44	; 0x2c
 8000ebe:	d1f2      	bne.n	8000ea6 <decodeGGA+0x3e>
	inx++;
 8000ec0:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <decodeGGA+0x17c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <decodeGGA+0x17c>)
 8000ec8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000eca:	e004      	b.n	8000ed6 <decodeGGA+0x6e>
 8000ecc:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <decodeGGA+0x17c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <decodeGGA+0x17c>)
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <decodeGGA+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ee4:	d1f2      	bne.n	8000ecc <decodeGGA+0x64>
	inx++;
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <decodeGGA+0x17c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a3d      	ldr	r2, [pc, #244]	; (8000fe4 <decodeGGA+0x17c>)
 8000eee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ',' (north/south)
 8000ef0:	e004      	b.n	8000efc <decodeGGA+0x94>
 8000ef2:	4b3c      	ldr	r3, [pc, #240]	; (8000fe4 <decodeGGA+0x17c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a3a      	ldr	r2, [pc, #232]	; (8000fe4 <decodeGGA+0x17c>)
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <decodeGGA+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b2c      	cmp	r3, #44	; 0x2c
 8000f0a:	d1f2      	bne.n	8000ef2 <decodeGGA+0x8a>
	inx++;
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <decodeGGA+0x17c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <decodeGGA+0x17c>)
 8000f14:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000f16:	e004      	b.n	8000f22 <decodeGGA+0xba>
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <decodeGGA+0x17c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <decodeGGA+0x17c>)
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <decodeGGA+0x17c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f30:	d1f2      	bne.n	8000f18 <decodeGGA+0xb0>
	inx++;
 8000f32:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <decodeGGA+0x17c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <decodeGGA+0x17c>)
 8000f3a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ',' (east/west)
 8000f3c:	e004      	b.n	8000f48 <decodeGGA+0xe0>
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <decodeGGA+0x17c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <decodeGGA+0x17c>)
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <decodeGGA+0x17c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b2c      	cmp	r3, #44	; 0x2c
 8000f56:	d1f2      	bne.n	8000f3e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <decodeGGA+0x17c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <decodeGGA+0x17c>)
 8000f60:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <decodeGGA+0x17c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b31      	cmp	r3, #49	; 0x31
 8000f70:	d00f      	beq.n	8000f92 <decodeGGA+0x12a>
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <decodeGGA+0x17c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b32      	cmp	r3, #50	; 0x32
 8000f80:	d007      	beq.n	8000f92 <decodeGGA+0x12a>
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <decodeGGA+0x17c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b36      	cmp	r3, #54	; 0x36
 8000f90:	d106      	bne.n	8000fa0 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <decodeGGA+0x17c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f9e:	e009      	b.n	8000fb4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e2e1      	b.n	800156e <decodeGGA+0x706>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <decodeGGA+0x17c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <decodeGGA+0x17c>)
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <decodeGGA+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc2:	d1f2      	bne.n	8000faa <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <decodeGGA+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <decodeGGA+0x17c>)
 8000fcc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 f88e 	bl	80050f8 <memset>
	i=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000fe0:	e016      	b.n	8001010 <decodeGGA+0x1a8>
 8000fe2:	bf00      	nop
 8000fe4:	2000008c 	.word	0x2000008c
	{
		buffer[i] = GGAbuffer[inx];
 8000fe8:	4b9f      	ldr	r3, [pc, #636]	; (8001268 <decodeGGA+0x400>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	7819      	ldrb	r1, [r3, #0]
 8000ff4:	f107 020c 	add.w	r2, r7, #12
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
		i++;
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	3301      	adds	r3, #1
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001006:	4b98      	ldr	r3, [pc, #608]	; (8001268 <decodeGGA+0x400>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a96      	ldr	r2, [pc, #600]	; (8001268 <decodeGGA+0x400>)
 800100e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001010:	4b95      	ldr	r3, [pc, #596]	; (8001268 <decodeGGA+0x400>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b2c      	cmp	r3, #44	; 0x2c
 800101e:	d1e3      	bne.n	8000fe8 <decodeGGA+0x180>
	}

//	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
	hr = (atoi(buffer)/10000) - 400/100; // hardcoded
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f839 	bl	800509c <atoi>
 800102a:	4603      	mov	r3, r0
 800102c:	4a8f      	ldr	r2, [pc, #572]	; (800126c <decodeGGA+0x404>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1312      	asrs	r2, r2, #12
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	3b04      	subs	r3, #4
 800103a:	4a8d      	ldr	r2, [pc, #564]	; (8001270 <decodeGGA+0x408>)
 800103c:	6013      	str	r3, [r2, #0]
//	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
	min = ((atoi(buffer)/100)%100) - 400%100; // hardcoded
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f82a 	bl	800509c <atoi>
 8001048:	4603      	mov	r3, r0
 800104a:	4a8a      	ldr	r2, [pc, #552]	; (8001274 <decodeGGA+0x40c>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1152      	asrs	r2, r2, #5
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4b87      	ldr	r3, [pc, #540]	; (8001274 <decodeGGA+0x40c>)
 8001058:	fb83 1302 	smull	r1, r3, r3, r2
 800105c:	1159      	asrs	r1, r3, #5
 800105e:	17d3      	asrs	r3, r2, #31
 8001060:	1acb      	subs	r3, r1, r3
 8001062:	2164      	movs	r1, #100	; 0x64
 8001064:	fb01 f303 	mul.w	r3, r1, r3
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	4a83      	ldr	r2, [pc, #524]	; (8001278 <decodeGGA+0x410>)
 800106c:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <decodeGGA+0x410>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b3b      	cmp	r3, #59	; 0x3b
 8001074:	dd09      	ble.n	800108a <decodeGGA+0x222>
	{
		min = min-60;
 8001076:	4b80      	ldr	r3, [pc, #512]	; (8001278 <decodeGGA+0x410>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3b3c      	subs	r3, #60	; 0x3c
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <decodeGGA+0x410>)
 800107e:	6013      	str	r3, [r2, #0]
		hr++;
 8001080:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <decodeGGA+0x408>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <decodeGGA+0x408>)
 8001088:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800108a:	4b79      	ldr	r3, [pc, #484]	; (8001270 <decodeGGA+0x408>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da09      	bge.n	80010a6 <decodeGGA+0x23e>
	{
		hr=24+hr;
 8001092:	4b77      	ldr	r3, [pc, #476]	; (8001270 <decodeGGA+0x408>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3318      	adds	r3, #24
 8001098:	4a75      	ldr	r2, [pc, #468]	; (8001270 <decodeGGA+0x408>)
 800109a:	6013      	str	r3, [r2, #0]
		daychange--;
 800109c:	4b77      	ldr	r3, [pc, #476]	; (800127c <decodeGGA+0x414>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a76      	ldr	r2, [pc, #472]	; (800127c <decodeGGA+0x414>)
 80010a4:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <decodeGGA+0x408>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b17      	cmp	r3, #23
 80010ac:	dd09      	ble.n	80010c2 <decodeGGA+0x25a>
	{
		hr=hr-24;
 80010ae:	4b70      	ldr	r3, [pc, #448]	; (8001270 <decodeGGA+0x408>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3b18      	subs	r3, #24
 80010b4:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <decodeGGA+0x408>)
 80010b6:	6013      	str	r3, [r2, #0]
		daychange++;
 80010b8:	4b70      	ldr	r3, [pc, #448]	; (800127c <decodeGGA+0x414>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a6f      	ldr	r2, [pc, #444]	; (800127c <decodeGGA+0x414>)
 80010c0:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80010c2:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <decodeGGA+0x408>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80010ca:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <decodeGGA+0x410>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 ffe0 	bl	800509c <atoi>
 80010dc:	4602      	mov	r2, r0
 80010de:	4b65      	ldr	r3, [pc, #404]	; (8001274 <decodeGGA+0x40c>)
 80010e0:	fb83 1302 	smull	r1, r3, r3, r2
 80010e4:	1159      	asrs	r1, r3, #5
 80010e6:	17d3      	asrs	r3, r2, #31
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	2164      	movs	r1, #100	; 0x64
 80010ec:	fb01 f303 	mul.w	r3, r1, r3
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <decodeGGA+0x400>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a5a      	ldr	r2, [pc, #360]	; (8001268 <decodeGGA+0x400>)
 80010fe:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	220c      	movs	r2, #12
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fff5 	bl	80050f8 <memset>
	i=0;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001112:	e013      	b.n	800113c <decodeGGA+0x2d4>
	{
		buffer[i] = GGAbuffer[inx];
 8001114:	4b54      	ldr	r3, [pc, #336]	; (8001268 <decodeGGA+0x400>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	7819      	ldrb	r1, [r3, #0]
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	4413      	add	r3, r2
 8001128:	460a      	mov	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
		i++;
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	3301      	adds	r3, #1
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001132:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <decodeGGA+0x400>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a4b      	ldr	r2, [pc, #300]	; (8001268 <decodeGGA+0x400>)
 800113a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <decodeGGA+0x400>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2c      	cmp	r3, #44	; 0x2c
 800114a:	d1e3      	bne.n	8001114 <decodeGGA+0x2ac>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f841 	bl	80001d8 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	2b05      	cmp	r3, #5
 800115a:	d801      	bhi.n	8001160 <decodeGGA+0x2f8>
 800115c:	2302      	movs	r3, #2
 800115e:	e206      	b.n	800156e <decodeGGA+0x706>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4618      	mov	r0, r3
 8001166:	f003 ff99 	bl	800509c <atoi>
 800116a:	4603      	mov	r3, r0
 800116c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001172:	e002      	b.n	800117a <decodeGGA+0x312>
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	3301      	adds	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b2e      	cmp	r3, #46	; 0x2e
 8001186:	d1f5      	bne.n	8001174 <decodeGGA+0x30c>
	j++;
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	3301      	adds	r3, #1
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f820 	bl	80001d8 <strlen>
 8001198:	4602      	mov	r2, r0
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	4413      	add	r3, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 ff77 	bl	800509c <atoi>
 80011ae:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80011b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f969 	bl	800048c <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <decodeGGA+0x418>)
 80011c0:	f7ff faf8 	bl	80007b4 <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4690      	mov	r8, r2
 80011ca:	4699      	mov	r9, r3
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f7ff f95d 	bl	800048c <__aeabi_i2d>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	3302      	adds	r3, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f956 	bl	800048c <__aeabi_i2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ec43 2b11 	vmov	d1, r2, r3
 80011e8:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8001260 <decodeGGA+0x3f8>
 80011ec:	f004 f818 	bl	8005220 <pow>
 80011f0:	ec53 2b10 	vmov	r2, r3, d0
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff fadc 	bl	80007b4 <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4640      	mov	r0, r8
 8001202:	4649      	mov	r1, r9
 8001204:	f7fe fff6 	bl	80001f4 <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fc56 	bl	8000ac0 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]
	inx++;  
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <decodeGGA+0x400>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a10      	ldr	r2, [pc, #64]	; (8001268 <decodeGGA+0x400>)
 8001226:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <decodeGGA+0x400>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <decodeGGA+0x400>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <decodeGGA+0x400>)
 8001240:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <decodeGGA+0x400>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <decodeGGA+0x400>)
 800124a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	220c      	movs	r2, #12
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ff4f 	bl	80050f8 <memset>
	i=0;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800125e:	e025      	b.n	80012ac <decodeGGA+0x444>
 8001260:	00000000 	.word	0x00000000
 8001264:	40240000 	.word	0x40240000
 8001268:	2000008c 	.word	0x2000008c
 800126c:	68db8bad 	.word	0x68db8bad
 8001270:	20000090 	.word	0x20000090
 8001274:	51eb851f 	.word	0x51eb851f
 8001278:	20000094 	.word	0x20000094
 800127c:	200000a4 	.word	0x200000a4
 8001280:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001284:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <decodeGGA+0x648>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	7819      	ldrb	r1, [r3, #0]
 8001290:	f107 020c 	add.w	r2, r7, #12
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	4413      	add	r3, r2
 8001298:	460a      	mov	r2, r1
 800129a:	701a      	strb	r2, [r3, #0]
		i++;
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	3301      	adds	r3, #1
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80012a2:	4b83      	ldr	r3, [pc, #524]	; (80014b0 <decodeGGA+0x648>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a81      	ldr	r2, [pc, #516]	; (80014b0 <decodeGGA+0x648>)
 80012aa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80012ac:	4b80      	ldr	r3, [pc, #512]	; (80014b0 <decodeGGA+0x648>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b2c      	cmp	r3, #44	; 0x2c
 80012ba:	d1e3      	bne.n	8001284 <decodeGGA+0x41c>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 feeb 	bl	800509c <atoi>
 80012c6:	4603      	mov	r3, r0
 80012c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80012ce:	e002      	b.n	80012d6 <decodeGGA+0x46e>
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	3301      	adds	r3, #1
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b2e      	cmp	r3, #46	; 0x2e
 80012e2:	d1f5      	bne.n	80012d0 <decodeGGA+0x468>
	j++;
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	3301      	adds	r3, #1
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff72 	bl	80001d8 <strlen>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	f107 020c 	add.w	r2, r7, #12
 8001302:	4413      	add	r3, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fec9 	bl	800509c <atoi>
 800130a:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800130c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8bb 	bl	800048c <__aeabi_i2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <decodeGGA+0x64c>)
 800131c:	f7ff fa4a 	bl	80007b4 <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	69f8      	ldr	r0, [r7, #28]
 800132a:	f7ff f8af 	bl	800048c <__aeabi_i2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	3302      	adds	r3, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8a8 	bl	800048c <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	ec43 2b11 	vmov	d1, r2, r3
 8001344:	ed9f 0b58 	vldr	d0, [pc, #352]	; 80014a8 <decodeGGA+0x640>
 8001348:	f003 ff6a 	bl	8005220 <pow>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff fa2e 	bl	80007b4 <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4640      	mov	r0, r8
 800135e:	4649      	mov	r1, r9
 8001360:	f7fe ff48 	bl	80001f4 <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fba8 	bl	8000ac0 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]
	inx++;
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <decodeGGA+0x648>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <decodeGGA+0x648>)
 8001382:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <decodeGGA+0x648>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001394:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <decodeGGA+0x648>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <decodeGGA+0x648>)
 800139c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <decodeGGA+0x648>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <decodeGGA+0x648>)
 80013a6:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80013a8:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <decodeGGA+0x648>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a40      	ldr	r2, [pc, #256]	; (80014b0 <decodeGGA+0x648>)
 80013b0:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <decodeGGA+0x648>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <decodeGGA+0x648>)
 80013ba:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	220c      	movs	r2, #12
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fe97 	bl	80050f8 <memset>
	i=0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80013ce:	e013      	b.n	80013f8 <decodeGGA+0x590>
	{
		buffer[i] = GGAbuffer[inx];
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <decodeGGA+0x648>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	7819      	ldrb	r1, [r3, #0]
 80013dc:	f107 020c 	add.w	r2, r7, #12
 80013e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e2:	4413      	add	r3, r2
 80013e4:	460a      	mov	r2, r1
 80013e6:	701a      	strb	r2, [r3, #0]
		i++;
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	3301      	adds	r3, #1
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <decodeGGA+0x648>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <decodeGGA+0x648>)
 80013f6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <decodeGGA+0x648>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b2c      	cmp	r3, #44	; 0x2c
 8001406:	d1e3      	bne.n	80013d0 <decodeGGA+0x568>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fe45 	bl	800509c <atoi>
 8001412:	4602      	mov	r2, r0
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <decodeGGA+0x648>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <decodeGGA+0x648>)
 8001420:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001422:	e004      	b.n	800142e <decodeGGA+0x5c6>
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <decodeGGA+0x648>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <decodeGGA+0x648>)
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <decodeGGA+0x648>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b2c      	cmp	r3, #44	; 0x2c
 800143c:	d1f2      	bne.n	8001424 <decodeGGA+0x5bc>


	/*************** Altitude calculation ********************/
	inx++;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <decodeGGA+0x648>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <decodeGGA+0x648>)
 8001446:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	220c      	movs	r2, #12
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fe51 	bl	80050f8 <memset>
	i=0;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 800145a:	e013      	b.n	8001484 <decodeGGA+0x61c>
	{
		buffer[i] = GGAbuffer[inx];
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <decodeGGA+0x648>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	7819      	ldrb	r1, [r3, #0]
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	4413      	add	r3, r2
 8001470:	460a      	mov	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
		i++;
 8001474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001476:	3301      	adds	r3, #1
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <decodeGGA+0x648>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <decodeGGA+0x648>)
 8001482:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <decodeGGA+0x648>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b2c      	cmp	r3, #44	; 0x2c
 8001492:	d1e3      	bne.n	800145c <decodeGGA+0x5f4>
	}
	num = (atoi(buffer));
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fdff 	bl	800509c <atoi>
 800149e:	4603      	mov	r3, r0
 80014a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80014a6:	e00a      	b.n	80014be <decodeGGA+0x656>
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40240000 	.word	0x40240000
 80014b0:	2000008c 	.word	0x2000008c
 80014b4:	40590000 	.word	0x40590000
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	3301      	adds	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b2e      	cmp	r3, #46	; 0x2e
 80014ca:	d1f5      	bne.n	80014b8 <decodeGGA+0x650>
	j++;
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	3301      	adds	r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe7e 	bl	80001d8 <strlen>
 80014dc:	4602      	mov	r2, r0
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	4413      	add	r3, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fdd5 	bl	800509c <atoi>
 80014f2:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80014f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffc7 	bl	800048c <__aeabi_i2d>
 80014fe:	4604      	mov	r4, r0
 8001500:	460d      	mov	r5, r1
 8001502:	69f8      	ldr	r0, [r7, #28]
 8001504:	f7fe ffc2 	bl	800048c <__aeabi_i2d>
 8001508:	4680      	mov	r8, r0
 800150a:	4689      	mov	r9, r1
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f7fe ffbd 	bl	800048c <__aeabi_i2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	ec43 2b11 	vmov	d1, r2, r3
 800151a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001578 <decodeGGA+0x710>
 800151e:	f003 fe7f 	bl	8005220 <pow>
 8001522:	ec53 2b10 	vmov	r2, r3, d0
 8001526:	4640      	mov	r0, r8
 8001528:	4649      	mov	r1, r9
 800152a:	f7ff f943 	bl	80007b4 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4620      	mov	r0, r4
 8001534:	4629      	mov	r1, r5
 8001536:	f7fe fe5d 	bl	80001f4 <__adddf3>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fabd 	bl	8000ac0 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	621a      	str	r2, [r3, #32]

	inx++;
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <decodeGGA+0x718>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <decodeGGA+0x718>)
 8001558:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <decodeGGA+0x718>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800156c:	2300      	movs	r3, #0

}
 800156e:	4618      	mov	r0, r3
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001578:	00000000 	.word	0x00000000
 800157c:	40240000 	.word	0x40240000
 8001580:	2000008c 	.word	0x2000008c
 8001584:	00000000 	.word	0x00000000

08001588 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800158c:	b090      	sub	sp, #64	; 0x40
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001594:	4b94      	ldr	r3, [pc, #592]	; (80017e8 <decodeRMC+0x260>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800159e:	e004      	b.n	80015aa <decodeRMC+0x22>
 80015a0:	4b91      	ldr	r3, [pc, #580]	; (80017e8 <decodeRMC+0x260>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <decodeRMC+0x260>)
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <decodeRMC+0x260>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b2c      	cmp	r3, #44	; 0x2c
 80015b8:	d1f2      	bne.n	80015a0 <decodeRMC+0x18>
	inx++;
 80015ba:	4b8b      	ldr	r3, [pc, #556]	; (80017e8 <decodeRMC+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a89      	ldr	r2, [pc, #548]	; (80017e8 <decodeRMC+0x260>)
 80015c2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80015c4:	e004      	b.n	80015d0 <decodeRMC+0x48>
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <decodeRMC+0x260>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <decodeRMC+0x260>)
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <decodeRMC+0x260>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b2c      	cmp	r3, #44	; 0x2c
 80015de:	d1f2      	bne.n	80015c6 <decodeRMC+0x3e>
	inx++;
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <decodeRMC+0x260>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <decodeRMC+0x260>)
 80015e8:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80015ea:	4b7f      	ldr	r3, [pc, #508]	; (80017e8 <decodeRMC+0x260>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b41      	cmp	r3, #65	; 0x41
 80015f8:	d10d      	bne.n	8001616 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001600:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <decodeRMC+0x260>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a78      	ldr	r2, [pc, #480]	; (80017e8 <decodeRMC+0x260>)
 8001608:	6013      	str	r3, [r2, #0]
	inx++;
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <decodeRMC+0x260>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a75      	ldr	r2, [pc, #468]	; (80017e8 <decodeRMC+0x260>)
 8001612:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001614:	e009      	b.n	800162a <decodeRMC+0xa2>
		rmc->isValid =0;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
		return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e1d8      	b.n	80019d2 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001620:	4b71      	ldr	r3, [pc, #452]	; (80017e8 <decodeRMC+0x260>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a70      	ldr	r2, [pc, #448]	; (80017e8 <decodeRMC+0x260>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <decodeRMC+0x260>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b2c      	cmp	r3, #44	; 0x2c
 8001638:	d1f2      	bne.n	8001620 <decodeRMC+0x98>
	inx++;
 800163a:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <decodeRMC+0x260>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a69      	ldr	r2, [pc, #420]	; (80017e8 <decodeRMC+0x260>)
 8001642:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001644:	e004      	b.n	8001650 <decodeRMC+0xc8>
 8001646:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <decodeRMC+0x260>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a66      	ldr	r2, [pc, #408]	; (80017e8 <decodeRMC+0x260>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <decodeRMC+0x260>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b2c      	cmp	r3, #44	; 0x2c
 800165e:	d1f2      	bne.n	8001646 <decodeRMC+0xbe>
	inx++;
 8001660:	4b61      	ldr	r3, [pc, #388]	; (80017e8 <decodeRMC+0x260>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a60      	ldr	r2, [pc, #384]	; (80017e8 <decodeRMC+0x260>)
 8001668:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800166a:	e004      	b.n	8001676 <decodeRMC+0xee>
 800166c:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <decodeRMC+0x260>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a5d      	ldr	r2, [pc, #372]	; (80017e8 <decodeRMC+0x260>)
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <decodeRMC+0x260>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b2c      	cmp	r3, #44	; 0x2c
 8001684:	d1f2      	bne.n	800166c <decodeRMC+0xe4>
	inx++;
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <decodeRMC+0x260>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <decodeRMC+0x260>)
 800168e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001690:	e004      	b.n	800169c <decodeRMC+0x114>
 8001692:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <decodeRMC+0x260>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a53      	ldr	r2, [pc, #332]	; (80017e8 <decodeRMC+0x260>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <decodeRMC+0x260>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b2c      	cmp	r3, #44	; 0x2c
 80016aa:	d1f2      	bne.n	8001692 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80016ac:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <decodeRMC+0x260>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <decodeRMC+0x260>)
 80016b4:	6013      	str	r3, [r2, #0]
	i=0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	220c      	movs	r2, #12
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fd18 	bl	80050f8 <memset>
	while (RMCbuffer[inx] != ',')
 80016c8:	e013      	b.n	80016f2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <decodeRMC+0x260>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	7819      	ldrb	r1, [r3, #0]
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016dc:	4413      	add	r3, r2
 80016de:	460a      	mov	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
		i++;
 80016e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e4:	3301      	adds	r3, #1
 80016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <decodeRMC+0x260>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <decodeRMC+0x260>)
 80016f0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <decodeRMC+0x260>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b2c      	cmp	r3, #44	; 0x2c
 8001700:	d1e3      	bne.n	80016ca <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d056      	beq.n	80017ba <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f003 fcc3 	bl	800509c <atoi>
 8001716:	4603      	mov	r3, r0
 8001718:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 800171e:	e002      	b.n	8001726 <decodeRMC+0x19e>
 8001720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001722:	3301      	adds	r3, #1
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
 8001726:	f107 0208 	add.w	r2, r7, #8
 800172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b2e      	cmp	r3, #46	; 0x2e
 8001732:	d1f5      	bne.n	8001720 <decodeRMC+0x198>
		j++;
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	3301      	adds	r3, #1
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd4a 	bl	80001d8 <strlen>
 8001744:	4602      	mov	r2, r0
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	4413      	add	r3, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fca1 	bl	800509c <atoi>
 800175a:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800175c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe93 	bl	800048c <__aeabi_i2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800176c:	f7fe fe8e 	bl	800048c <__aeabi_i2d>
 8001770:	4680      	mov	r8, r0
 8001772:	4689      	mov	r9, r1
 8001774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001776:	f7fe fe89 	bl	800048c <__aeabi_i2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ec43 2b11 	vmov	d1, r2, r3
 8001782:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80017e0 <decodeRMC+0x258>
 8001786:	f003 fd4b 	bl	8005220 <pow>
 800178a:	ec53 2b10 	vmov	r2, r3, d0
 800178e:	4640      	mov	r0, r8
 8001790:	4649      	mov	r1, r9
 8001792:	f7ff f80f 	bl	80007b4 <__aeabi_ddiv>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fd29 	bl	80001f4 <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f989 	bl	8000ac0 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	e003      	b.n	80017c2 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <decodeRMC+0x260>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <decodeRMC+0x260>)
 80017ca:	6013      	str	r3, [r2, #0]
	i=0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	220c      	movs	r2, #12
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fc8d 	bl	80050f8 <memset>
	while (RMCbuffer[inx] != ',')
 80017de:	e019      	b.n	8001814 <decodeRMC+0x28c>
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40240000 	.word	0x40240000
 80017e8:	2000008c 	.word	0x2000008c
	{
		buffer[i] = RMCbuffer[inx];
 80017ec:	4b7e      	ldr	r3, [pc, #504]	; (80019e8 <decodeRMC+0x460>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	7819      	ldrb	r1, [r3, #0]
 80017f8:	f107 0208 	add.w	r2, r7, #8
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	4413      	add	r3, r2
 8001800:	460a      	mov	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
		i++;
 8001804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001806:	3301      	adds	r3, #1
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 800180a:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <decodeRMC+0x460>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a75      	ldr	r2, [pc, #468]	; (80019e8 <decodeRMC+0x460>)
 8001812:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001814:	4b74      	ldr	r3, [pc, #464]	; (80019e8 <decodeRMC+0x460>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b2c      	cmp	r3, #44	; 0x2c
 8001822:	d1e3      	bne.n	80017ec <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d056      	beq.n	80018dc <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fc32 	bl	800509c <atoi>
 8001838:	4603      	mov	r3, r0
 800183a:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001840:	e002      	b.n	8001848 <decodeRMC+0x2c0>
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001844:	3301      	adds	r3, #1
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
 8001848:	f107 0208 	add.w	r2, r7, #8
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b2e      	cmp	r3, #46	; 0x2e
 8001854:	d1f5      	bne.n	8001842 <decodeRMC+0x2ba>
		j++;
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	3301      	adds	r3, #1
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fcb9 	bl	80001d8 <strlen>
 8001866:	4602      	mov	r2, r0
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001870:	f107 0208 	add.w	r2, r7, #8
 8001874:	4413      	add	r3, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fc10 	bl	800509c <atoi>
 800187c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800187e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe02 	bl	800048c <__aeabi_i2d>
 8001888:	4604      	mov	r4, r0
 800188a:	460d      	mov	r5, r1
 800188c:	69b8      	ldr	r0, [r7, #24]
 800188e:	f7fe fdfd 	bl	800048c <__aeabi_i2d>
 8001892:	4680      	mov	r8, r0
 8001894:	4689      	mov	r9, r1
 8001896:	69f8      	ldr	r0, [r7, #28]
 8001898:	f7fe fdf8 	bl	800048c <__aeabi_i2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	ec43 2b11 	vmov	d1, r2, r3
 80018a4:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80019e0 <decodeRMC+0x458>
 80018a8:	f003 fcba 	bl	8005220 <pow>
 80018ac:	ec53 2b10 	vmov	r2, r3, d0
 80018b0:	4640      	mov	r0, r8
 80018b2:	4649      	mov	r1, r9
 80018b4:	f7fe ff7e 	bl	80007b4 <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fc98 	bl	80001f4 <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f8f8 	bl	8000ac0 <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	e003      	b.n	80018e4 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <decodeRMC+0x460>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <decodeRMC+0x460>)
 80018ec:	6013      	str	r3, [r2, #0]
	i=0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	220c      	movs	r2, #12
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fbfc 	bl	80050f8 <memset>
	while (RMCbuffer[inx] != ',')
 8001900:	e013      	b.n	800192a <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <decodeRMC+0x460>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	7819      	ldrb	r1, [r3, #0]
 800190e:	f107 0208 	add.w	r2, r7, #8
 8001912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001914:	4413      	add	r3, r2
 8001916:	460a      	mov	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
		i++;
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	3301      	adds	r3, #1
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <decodeRMC+0x460>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a30      	ldr	r2, [pc, #192]	; (80019e8 <decodeRMC+0x460>)
 8001928:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <decodeRMC+0x460>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b2c      	cmp	r3, #44	; 0x2c
 8001938:	d1e3      	bne.n	8001902 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f003 fbac 	bl	800509c <atoi>
 8001944:	4603      	mov	r3, r0
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <decodeRMC+0x464>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	1312      	asrs	r2, r2, #12
 800194e:	17db      	asrs	r3, r3, #31
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <decodeRMC+0x468>)
 8001954:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fb9e 	bl	800509c <atoi>
 8001960:	4603      	mov	r3, r0
 8001962:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <decodeRMC+0x46c>)
 8001964:	fb82 1203 	smull	r1, r2, r2, r3
 8001968:	1152      	asrs	r2, r2, #5
 800196a:	17db      	asrs	r3, r3, #31
 800196c:	1ad2      	subs	r2, r2, r3
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <decodeRMC+0x46c>)
 8001970:	fb83 1302 	smull	r1, r3, r3, r2
 8001974:	1159      	asrs	r1, r3, #5
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1acb      	subs	r3, r1, r3
 800197a:	2164      	movs	r1, #100	; 0x64
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <decodeRMC+0x470>)
 8001984:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fb86 	bl	800509c <atoi>
 8001990:	4602      	mov	r2, r0
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <decodeRMC+0x46c>)
 8001994:	fb83 1302 	smull	r1, r3, r3, r2
 8001998:	1159      	asrs	r1, r3, #5
 800199a:	17d3      	asrs	r3, r2, #31
 800199c:	1acb      	subs	r3, r1, r3
 800199e:	2164      	movs	r1, #100	; 0x64
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <decodeRMC+0x474>)
 80019a8:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <decodeRMC+0x468>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <decodeRMC+0x478>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <decodeRMC+0x468>)
 80019b6:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <decodeRMC+0x468>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <decodeRMC+0x470>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <decodeRMC+0x474>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	609a      	str	r2, [r3, #8]

	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3740      	adds	r7, #64	; 0x40
 80019d6:	46bd      	mov	sp, r7
 80019d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40240000 	.word	0x40240000
 80019e8:	2000008c 	.word	0x2000008c
 80019ec:	68db8bad 	.word	0x68db8bad
 80019f0:	20000098 	.word	0x20000098
 80019f4:	51eb851f 	.word	0x51eb851f
 80019f8:	2000009c 	.word	0x2000009c
 80019fc:	200000a0 	.word	0x200000a0
 8001a00:	200000a4 	.word	0x200000a4

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a0a:	f000 fce9 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0e:	f000 f85d 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a12:	f000 f90d 	bl	8001c30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a16:	f000 f8ab 	bl	8001b70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a1a:	f000 f8d9 	bl	8001bd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8001a1e:	f000 fa99 	bl	8001f54 <Ringbuf_init>
//  HAL_Delay(500);
  uint32_t microsReady, microsCurrent; // unsigned long
  microsReady = 30000; // 30s
 8001a22:	f247 5330 	movw	r3, #30000	; 0x7530
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48
  int flag = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  ========== Part 1 Code ==================================
	  if (Wait_for("GG") == 1) { // "GPGGA" - need "A" for decodeGGA to work properly
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <main+0xa4>)
 8001a2e:	f000 fbbd 	bl	80021ac <Wait_for>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d109      	bne.n	8001a4c <main+0x48>
		  int value_1 = Copy_upto("*", GGA); // 1=successful copy
 8001a38:	491c      	ldr	r1, [pc, #112]	; (8001aac <main+0xa8>)
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <main+0xac>)
 8001a3c:	f000 fb3a 	bl	80020b4 <Copy_upto>
 8001a40:	6478      	str	r0, [r7, #68]	; 0x44
		  int value_2 = decodeGGA(GGA,&gpsData.ggastruct); // 0=fixed; 1=error
 8001a42:	491c      	ldr	r1, [pc, #112]	; (8001ab4 <main+0xb0>)
 8001a44:	4819      	ldr	r0, [pc, #100]	; (8001aac <main+0xa8>)
 8001a46:	f7ff fa0f 	bl	8000e68 <decodeGGA>
 8001a4a:	6438      	str	r0, [r7, #64]	; 0x40
	  }

	  if (Wait_for("RM") == 1) { // "GPRMC" - need "C" for decodeRMC to work properly
 8001a4c:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <main+0xb4>)
 8001a4e:	f000 fbad 	bl	80021ac <Wait_for>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d109      	bne.n	8001a6c <main+0x68>
		  int value_3 = Copy_upto("*", RMC); // 1=successful copy
 8001a58:	4918      	ldr	r1, [pc, #96]	; (8001abc <main+0xb8>)
 8001a5a:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <main+0xac>)
 8001a5c:	f000 fb2a 	bl	80020b4 <Copy_upto>
 8001a60:	63f8      	str	r0, [r7, #60]	; 0x3c
		  int value_4 = decodeRMC(RMC,&gpsData.rmcstruct); // 0=fixed; 1=error
 8001a62:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <main+0xbc>)
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <main+0xb8>)
 8001a66:	f7ff fd8f 	bl	8001588 <decodeRMC>
 8001a6a:	63b8      	str	r0, [r7, #56]	; 0x38
	  }


	  microsCurrent = HAL_GetTick();
 8001a6c:	f000 fd28 	bl	80024c0 <HAL_GetTick>
 8001a70:	6378      	str	r0, [r7, #52]	; 0x34
	  char ready_msg[] = "\r\n GPS data is stable and ready for reading.";
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <main+0xc0>)
 8001a74:	1d3c      	adds	r4, r7, #4
 8001a76:	461d      	mov	r5, r3
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a84:	c407      	stmia	r4!, {r0, r1, r2}
 8001a86:	7023      	strb	r3, [r4, #0]
	  if ( (microsCurrent >= microsReady) && (flag == 0) ) { // 30s
 8001a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3cd      	bcc.n	8001a2c <main+0x28>
 8001a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ca      	bne.n	8001a2c <main+0x28>
		  flag = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	64fb      	str	r3, [r7, #76]	; 0x4c
		  HAL_UART_Transmit(&huart2, ready_msg, sizeof(ready_msg), 10);
 8001a9a:	1d39      	adds	r1, r7, #4
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	222d      	movs	r2, #45	; 0x2d
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <main+0xc4>)
 8001aa2:	f002 fa83 	bl	8003fac <HAL_UART_Transmit>
  {
 8001aa6:	e7c1      	b.n	8001a2c <main+0x28>
 8001aa8:	08006070 	.word	0x08006070
 8001aac:	200001b0 	.word	0x200001b0
 8001ab0:	08006074 	.word	0x08006074
 8001ab4:	20000278 	.word	0x20000278
 8001ab8:	08006078 	.word	0x08006078
 8001abc:	20000214 	.word	0x20000214
 8001ac0:	200002a4 	.word	0x200002a4
 8001ac4:	0800607c 	.word	0x0800607c
 8001ac8:	2000012c 	.word	0x2000012c

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2244      	movs	r2, #68	; 0x44
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fb0c 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af2:	f001 f821 	bl	8002b38 <HAL_PWREx_ControlVoltageScaling>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001afc:	f000 f8fe 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b12:	2302      	movs	r3, #2
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 f858 	bl	8002be4 <HAL_RCC_OscConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b3a:	f000 f8df 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3e:	230f      	movs	r3, #15
 8001b40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b42:	2303      	movs	r3, #3
 8001b44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	2104      	movs	r1, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fc58 	bl	800340c <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b62:	f000 f8cb 	bl	8001cfc <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3758      	adds	r7, #88	; 0x58
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <MX_USART1_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART1_UART_Init+0x58>)
 8001bb4:	f002 f9ac 	bl	8003f10 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f89d 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000a8 	.word	0x200000a8
 8001bcc:	40013800 	.word	0x40013800

08001bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <MX_USART2_UART_Init+0x5c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c14:	f002 f97c 	bl	8003f10 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c1e:	f000 f86d 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000012c 	.word	0x2000012c
 8001c2c:	40004400 	.word	0x40004400

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a18      	ldr	r2, [pc, #96]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_GPIO_Init+0xc4>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2120      	movs	r1, #32
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f000 ff1d 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <MX_GPIO_Init+0xc8>)
 8001cca:	f000 fd95 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f000 fd86 	bl	80027f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000800 	.word	0x48000800

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_MspInit+0x44>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6613      	str	r3, [r2, #96]	; 0x60
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_MspInit+0x44>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_MspInit+0x44>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_MspInit+0x44>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a6      	sub	sp, #152	; 0x98
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2268      	movs	r2, #104	; 0x68
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f9c1 	bl	80050f8 <memset>
  if(huart->Instance==USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <HAL_UART_MspInit+0x158>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d145      	bne.n	8001e0c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fd61 	bl	8003854 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff ffb0 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a42      	ldr	r2, [pc, #264]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de6:	2307      	movs	r3, #7
 8001de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f000 fcff 	bl	80027f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2025      	movs	r0, #37	; 0x25
 8001e00:	f000 fc45 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e04:	2025      	movs	r0, #37	; 0x25
 8001e06:	f000 fc5e 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e0a:	e048      	b.n	8001e9e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <HAL_UART_MspInit+0x160>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d143      	bne.n	8001e9e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fd16 	bl	8003854 <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001e2e:	f7ff ff65 	bl	8001cfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0x15c>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e62:	230c      	movs	r3, #12
 8001e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e84:	4619      	mov	r1, r3
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f000 fcb5 	bl	80027f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2026      	movs	r0, #38	; 0x26
 8001e94:	f000 fbfb 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e98:	2026      	movs	r0, #38	; 0x26
 8001e9a:	f000 fc14 	bl	80026c6 <HAL_NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3798      	adds	r7, #152	; 0x98
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler+0x4>

08001eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//	if (timeout > 0) timeout--;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f00:	f000 faca 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART1_IRQHandler+0x10>)
 8001f0e:	f000 f9d5 	bl	80022bc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200000a8 	.word	0x200000a8

08001f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USART2_IRQHandler+0x10>)
 8001f22:	f002 f8d7 	bl	80040d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000012c 	.word	0x2000012c

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <Ringbuf_init+0x3c>)
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <Ringbuf_init+0x40>)
 8001f5c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <Ringbuf_init+0x44>)
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <Ringbuf_init+0x48>)
 8001f62:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <Ringbuf_init+0x4c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <Ringbuf_init+0x4c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <Ringbuf_init+0x4c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <Ringbuf_init+0x4c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0220 	orr.w	r2, r2, #32
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200006d0 	.word	0x200006d0
 8001f94:	200002c0 	.word	0x200002c0
 8001f98:	200006d4 	.word	0x200006d4
 8001f9c:	200004c8 	.word	0x200004c8
 8001fa0:	200000a8 	.word	0x200000a8

08001fa4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbc:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d009      	beq.n	8001fde <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	79f9      	ldrb	r1, [r7, #7]
 8001fd4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <Uart_read+0x54>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <Uart_read+0x54>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002002:	429a      	cmp	r2, r3
 8002004:	d102      	bne.n	800200c <Uart_read+0x20>
  {
    return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	e013      	b.n	8002034 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <Uart_read+0x54>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <Uart_read+0x54>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <Uart_read+0x54>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <Uart_read+0x54>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800202e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002032:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	200006d0 	.word	0x200006d0

08002044 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <IsDataAvailable+0x30>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <IsDataAvailable+0x30>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800205a:	b29b      	uxth	r3, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	b29b      	uxth	r3, r3
 8002060:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002064:	b29b      	uxth	r3, r3
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
  // checking the character that's at [buf_size + head - tail] positions
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	200006d0 	.word	0x200006d0

08002078 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <Uart_peek+0x38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <Uart_peek+0x38>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800208c:	429a      	cmp	r2, r3
 800208e:	d102      	bne.n	8002096 <Uart_peek+0x1e>
  {
    return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e006      	b.n	80020a4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <Uart_peek+0x38>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <Uart_peek+0x38>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200006d0 	.word	0x200006d0

080020b4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
//	int len = strlen(string) ;
//	int len = sizeof (string) ;
	int len = 1; // WORKS!
 80020c2:	2301      	movs	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80020ca:	e01e      	b.n	800210a <Copy_upto+0x56>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <Copy_upto+0xf0>)
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <Copy_upto+0xf0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	4403      	add	r3, r0
 80020de:	5c8a      	ldrb	r2, [r1, r2]
 80020e0:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <Copy_upto+0xf0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <Copy_upto+0xf0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3301      	adds	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80020fe:	bf00      	nop
 8002100:	f7ff ffa0 	bl	8002044 <IsDataAvailable>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0fa      	beq.n	8002100 <Copy_upto+0x4c>
	while (Uart_peek() != string[so_far])
 800210a:	f7ff ffb5 	bl	8002078 <Uart_peek>
 800210e:	4601      	mov	r1, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4299      	cmp	r1, r3
 800211a:	d1d7      	bne.n	80020cc <Copy_upto+0x18>

		}
	while (Uart_peek() == string [so_far])
 800211c:	e027      	b.n	800216e <Copy_upto+0xba>
	{
		so_far++;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002124:	f7ff ff62 	bl	8001fec <Uart_read>
 8002128:	4601      	mov	r1, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	613a      	str	r2, [r7, #16]
 8002130:	461a      	mov	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4413      	add	r3, r2
 8002136:	b2ca      	uxtb	r2, r1
 8002138:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	d101      	bne.n	8002146 <Copy_upto+0x92>
 8002142:	2301      	movs	r3, #1
 8002144:	e02a      	b.n	800219c <Copy_upto+0xe8>
		timeout = TIMEOUT_DEF;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <Copy_upto+0xf4>)
 8002148:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800214c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800214e:	bf00      	nop
 8002150:	f7ff ff78 	bl	8002044 <IsDataAvailable>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <Copy_upto+0xae>
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <Copy_upto+0xf4>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f6      	bne.n	8002150 <Copy_upto+0x9c>
		if (timeout == 0) return 0;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <Copy_upto+0xf4>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <Copy_upto+0xba>
 800216a:	2300      	movs	r3, #0
 800216c:	e016      	b.n	800219c <Copy_upto+0xe8>
	while (Uart_peek() == string [so_far])
 800216e:	f7ff ff83 	bl	8002078 <Uart_peek>
 8002172:	4601      	mov	r1, r0
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4299      	cmp	r1, r3
 800217e:	d0ce      	beq.n	800211e <Copy_upto+0x6a>
	}

	if (so_far != len)
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	429a      	cmp	r2, r3
 8002186:	d002      	beq.n	800218e <Copy_upto+0xda>
	{
		so_far = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
		goto again;
 800218c:	e79d      	b.n	80020ca <Copy_upto+0x16>
	}

	if (so_far == len) return 1;
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d101      	bne.n	800219a <Copy_upto+0xe6>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <Copy_upto+0xe8>
	else return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200006d0 	.word	0x200006d0
 80021a8:	200002bc 	.word	0x200002bc

080021ac <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe f80d 	bl	80001d8 <strlen>
 80021be:	4603      	mov	r3, r0
 80021c0:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <Wait_for+0x108>)
 80021c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c8:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80021ca:	bf00      	nop
 80021cc:	f7ff ff3a 	bl	8002044 <IsDataAvailable>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <Wait_for+0x32>
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <Wait_for+0x108>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f6      	bne.n	80021cc <Wait_for+0x20>
	if (timeout == 0) return 0;
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <Wait_for+0x108>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <Wait_for+0x6e>
 80021e6:	2300      	movs	r3, #0
 80021e8:	e060      	b.n	80022ac <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <Wait_for+0x10c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <Wait_for+0x10c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d00b      	beq.n	8002216 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <Wait_for+0x10c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <Wait_for+0x10c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002214:	e001      	b.n	800221a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002216:	2300      	movs	r3, #0
 8002218:	e048      	b.n	80022ac <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800221a:	f7ff ff2d 	bl	8002078 <Uart_peek>
 800221e:	4601      	mov	r1, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4299      	cmp	r1, r3
 800222a:	d1de      	bne.n	80021ea <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800222c:	e027      	b.n	800227e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <Wait_for+0x10c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <Wait_for+0x10c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <Wait_for+0xaa>
 8002252:	2301      	movs	r3, #1
 8002254:	e02a      	b.n	80022ac <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <Wait_for+0x108>)
 8002258:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800225c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800225e:	bf00      	nop
 8002260:	f7ff fef0 	bl	8002044 <IsDataAvailable>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <Wait_for+0xc6>
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <Wait_for+0x108>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f6      	bne.n	8002260 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <Wait_for+0x108>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <Wait_for+0xd2>
 800227a:	2300      	movs	r3, #0
 800227c:	e016      	b.n	80022ac <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800227e:	f7ff fefb 	bl	8002078 <Uart_peek>
 8002282:	4601      	mov	r1, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4299      	cmp	r1, r3
 800228e:	d0ce      	beq.n	800222e <Wait_for+0x82>
	}

	if (so_far != len)
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d002      	beq.n	800229e <Wait_for+0xf2>
	{
		so_far = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
		goto again;
 800229c:	e791      	b.n	80021c2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d101      	bne.n	80022aa <Wait_for+0xfe>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <Wait_for+0x100>
	else return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200002bc 	.word	0x200002bc
 80022b8:	200006d0 	.word	0x200006d0

080022bc <Uart_isr>:


/* corrected version from May 6, 2023 */
void Uart_isr (UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    /* if DR is not empty and the Rx Int is enabled */
    if ((((&huart1)->Instance->ISR & USART_ISR_RXNE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <Uart_isr+0xc4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <Uart_isr+0x44>
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <Uart_isr+0xc4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00f      	beq.n	8002300 <Uart_isr+0x44>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	75fb      	strb	r3, [r7, #23]
        store_char (c, _rx_buffer);  // store data in buffer
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <Uart_isr+0xc8>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe53 	bl	8001fa4 <store_char>
        return;
 80022fe:	e03b      	b.n	8002378 <Uart_isr+0xbc>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((((&huart1)->Instance->ISR & USART_ISR_TXE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_TXEIE) != RESET))
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <Uart_isr+0xc4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d034      	beq.n	8002378 <Uart_isr+0xbc>
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <Uart_isr+0xc4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02d      	beq.n	8002378 <Uart_isr+0xbc>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <Uart_isr+0xcc>)
 800231e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <Uart_isr+0xcc>)
 8002324:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002328:	429a      	cmp	r2, r3
 800232a:	d108      	bne.n	800233e <Uart_isr+0x82>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800233a:	601a      	str	r2, [r3, #0]
    	      /* try explicitly calling huart2 */
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
    	      (&huart1)->Instance->TDR = c; // transmit data register

    	    }
    	return;
 800233c:	e01b      	b.n	8002376 <Uart_isr+0xba>
    		  volatile unsigned int tail_test = tx_buffer.tail;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <Uart_isr+0xcc>)
 8002340:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002344:	613b      	str	r3, [r7, #16]
    		  volatile uint16_t c = tx_buffer.buffer[tx_buffer.tail]; // prevent optimized away
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <Uart_isr+0xcc>)
 8002348:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <Uart_isr+0xcc>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	b29b      	uxth	r3, r3
 8002352:	81fb      	strh	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE; // increment tail value of tx_buffer
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <Uart_isr+0xcc>)
 8002356:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002360:	4a09      	ldr	r2, [pc, #36]	; (8002388 <Uart_isr+0xcc>)
 8002362:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <Uart_isr+0xc4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69db      	ldr	r3, [r3, #28]
    	      (&huart1)->Instance->TDR = c; // transmit data register
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <Uart_isr+0xc4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	89fa      	ldrh	r2, [r7, #14]
 8002372:	b292      	uxth	r2, r2
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 8002376:	bf00      	nop
    }
}
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200000a8 	.word	0x200000a8
 8002384:	200006d0 	.word	0x200006d0
 8002388:	200004c8 	.word	0x200004c8

0800238c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002390:	f7ff fdce 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002396:	490d      	ldr	r1, [pc, #52]	; (80023cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <LoopForever+0xe>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <LoopForever+0x16>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ba:	f002 fe79 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023be:	f7ff fb21 	bl	8001a04 <main>

080023c2 <LoopForever>:

LoopForever:
    b LoopForever
 80023c2:	e7fe      	b.n	80023c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023c4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023d0:	08006238 	.word	0x08006238
  ldr r2, =_sbss
 80023d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023d8:	200006dc 	.word	0x200006dc

080023dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_Init+0x3c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_Init+0x3c>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f6:	2003      	movs	r0, #3
 80023f8:	f000 f93e 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fc:	2000      	movs	r0, #0
 80023fe:	f000 f80f 	bl	8002420 <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	e001      	b.n	8002412 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800240e:	f7ff fc7b 	bl	8001d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002412:	79fb      	ldrb	r3, [r7, #7]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_InitTick+0x6c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d023      	beq.n	800247c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_InitTick+0x70>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_InitTick+0x6c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	fbb3 f3f1 	udiv	r3, r3, r1
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f949 	bl	80026e2 <HAL_SYSTICK_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10f      	bne.n	8002476 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d809      	bhi.n	8002470 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f000 f913 	bl	800268e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_InitTick+0x74>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e007      	b.n	8002480 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e004      	b.n	8002480 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e001      	b.n	8002480 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000008 	.word	0x20000008
 8002490:	20000000 	.word	0x20000000
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x20>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x24>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_IncTick+0x24>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008
 80024bc:	200006d8 	.word	0x200006d8

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_GetTick+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	200006d8 	.word	0x200006d8

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff3e 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff8e 	bl	80025cc <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5d 	bl	8002578 <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff31 	bl	800253c <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa2 	bl	8002634 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d008      	beq.n	8002724 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e022      	b.n	800276a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020e 	bic.w	r2, r2, #14
 8002732:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 021c 	and.w	r2, r3, #28
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d005      	beq.n	800279a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2204      	movs	r2, #4
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e029      	b.n	80027ee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 020e 	bic.w	r2, r2, #14
 80027a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f003 021c 	and.w	r2, r3, #28
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    }
  }
  return status;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002806:	e154      	b.n	8002ab2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8146 	beq.w	8002aac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_GPIO_Init+0x40>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d123      	bne.n	800292a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	6939      	ldr	r1, [r7, #16]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0203 	and.w	r2, r3, #3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80a0 	beq.w	8002aac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296c:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_GPIO_Init+0x2d8>)
 800296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_GPIO_Init+0x2d8>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6613      	str	r3, [r2, #96]	; 0x60
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <HAL_GPIO_Init+0x2d8>)
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002984:	4a53      	ldr	r2, [pc, #332]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ae:	d019      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <HAL_GPIO_Init+0x2e0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a48      	ldr	r2, [pc, #288]	; (8002adc <HAL_GPIO_Init+0x2e4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00d      	beq.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a47      	ldr	r2, [pc, #284]	; (8002ae0 <HAL_GPIO_Init+0x2e8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <HAL_GPIO_Init+0x1e0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a46      	ldr	r2, [pc, #280]	; (8002ae4 <HAL_GPIO_Init+0x2ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_GPIO_Init+0x1dc>
 80029d0:	2304      	movs	r3, #4
 80029d2:	e008      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029d4:	2307      	movs	r3, #7
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029d8:	2303      	movs	r3, #3
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e4:	2300      	movs	r3, #0
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029f6:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a28:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_GPIO_Init+0x2f0>)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f aea3 	bne.w	8002808 <HAL_GPIO_Init+0x10>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	48001000 	.word	0x48001000
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000

08002b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b46:	d130      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d038      	beq.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2232      	movs	r2, #50	; 0x32
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	3301      	adds	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7c:	e002      	b.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b90:	d102      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f2      	bne.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d110      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e00f      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d007      	beq.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	431bde83 	.word	0x431bde83

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f000 bc02 	b.w	80033fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf8:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c02:	4b94      	ldr	r3, [pc, #592]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80e4 	beq.w	8002de2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4c>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	f040 808b 	bne.w	8002d3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	f040 8087 	bne.w	8002d3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c30:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e3d9      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1a      	ldr	r2, [r3, #32]
 8002c4c:	4b81      	ldr	r3, [pc, #516]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_RCC_OscConfig+0x7e>
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c60:	e005      	b.n	8002c6e <HAL_RCC_OscConfig+0x8a>
 8002c62:	4b7c      	ldr	r3, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d223      	bcs.n	8002cba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fd8c 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e3ba      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c86:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a72      	ldr	r2, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	496d      	ldr	r1, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4968      	ldr	r1, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
 8002cb8:	e025      	b.n	8002d06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4960      	ldr	r1, [pc, #384]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	495b      	ldr	r1, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fd4c 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e37a      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d06:	f000 fc81 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	4950      	ldr	r1, [pc, #320]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002d18:	5ccb      	ldrb	r3, [r1, r3]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	4a4e      	ldr	r2, [pc, #312]	; (8002e5c <HAL_RCC_OscConfig+0x278>)
 8002d24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d26:	4b4e      	ldr	r3, [pc, #312]	; (8002e60 <HAL_RCC_OscConfig+0x27c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb78 	bl	8002420 <HAL_InitTick>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d052      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	e35e      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d032      	beq.n	8002dac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fbb5 	bl	80024c0 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5a:	f7ff fbb1 	bl	80024c0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e347      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6c:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4930      	ldr	r1, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	492b      	ldr	r1, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e01a      	b.n	8002de2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fb82 	bl	80024c0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc0:	f7ff fb7e 	bl	80024c0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e314      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1dc>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d073      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_OscConfig+0x21c>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d10e      	bne.n	8002e18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d063      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d15f      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e2f1      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x24c>
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e025      	b.n	8002e7c <HAL_RCC_OscConfig+0x298>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d114      	bne.n	8002e64 <HAL_RCC_OscConfig+0x280>
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e013      	b.n	8002e7c <HAL_RCC_OscConfig+0x298>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	080060ac 	.word	0x080060ac
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004
 8002e64:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a9f      	ldr	r2, [pc, #636]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a9c      	ldr	r2, [pc, #624]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7ff fb1c 	bl	80024c0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7ff fb18 	bl	80024c0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e2ae      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9e:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2a8>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7ff fb08 	bl	80024c0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7ff fb04 	bl	80024c0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e29a      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2d0>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d060      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x310>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d119      	bne.n	8002f22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d116      	bne.n	8002f22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef4:	4b7c      	ldr	r3, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x328>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e277      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4973      	ldr	r1, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f20:	e040      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d023      	beq.n	8002f72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7ff fac3 	bl	80024c0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7ff fabf 	bl	80024c0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e255      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f50:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	495f      	ldr	r1, [pc, #380]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7ff fa9f 	bl	80024c0 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f86:	f7ff fa9b 	bl	80024c0 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e231      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d03c      	beq.n	800302a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7ff fa7a 	bl	80024c0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7ff fa76 	bl	80024c0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e20c      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x3ec>
 8002ff0:	e01b      	b.n	800302a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	4a3b      	ldr	r2, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7ff fa5d 	bl	80024c0 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300a:	f7ff fa59 	bl	80024c0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1ef      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ef      	bne.n	800300a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80a6 	beq.w	8003184 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10d      	bne.n	8003064 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003052:	6593      	str	r3, [r2, #88]	; 0x58
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003064:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_RCC_OscConfig+0x508>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d118      	bne.n	80030a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_OscConfig+0x508>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_RCC_OscConfig+0x508>)
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307c:	f7ff fa20 	bl	80024c0 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003084:	f7ff fa1c 	bl	80024c0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1b2      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCC_OscConfig+0x508>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d108      	bne.n	80030bc <HAL_RCC_OscConfig+0x4d8>
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ba:	e029      	b.n	8003110 <HAL_RCC_OscConfig+0x52c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_OscConfig+0x50c>
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x52c>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
 80030f0:	4b9a      	ldr	r3, [pc, #616]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	4a99      	ldr	r2, [pc, #612]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	4a95      	ldr	r2, [pc, #596]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d016      	beq.n	8003146 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7ff f9d2 	bl	80024c0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7ff f9ce 	bl	80024c0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e162      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ed      	beq.n	8003120 <HAL_RCC_OscConfig+0x53c>
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7ff f9bb 	bl	80024c0 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff f9b7 	bl	80024c0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e14b      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003164:	4b7d      	ldr	r3, [pc, #500]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ed      	bne.n	800314e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003178:	4b78      	ldr	r3, [pc, #480]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	4a77      	ldr	r2, [pc, #476]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800317e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03c      	beq.n	800320a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003198:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800319a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319e:	4a6f      	ldr	r2, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7ff f98a 	bl	80024c0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b0:	f7ff f986 	bl	80024c0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e11c      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c2:	4b66      	ldr	r3, [pc, #408]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80031c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <HAL_RCC_OscConfig+0x5cc>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d2:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80031d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d8:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7ff f96d 	bl	80024c0 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ea:	f7ff f969 	bl	80024c0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0ff      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031fc:	4b57      	ldr	r3, [pc, #348]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80031fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ef      	bne.n	80031ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80f3 	beq.w	80033fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	f040 80c9 	bne.w	80033b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0203 	and.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	429a      	cmp	r2, r3
 8003230:	d12c      	bne.n	800328c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	3b01      	subs	r3, #1
 800323e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d123      	bne.n	800328c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d11b      	bne.n	800328c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d113      	bne.n	800328c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d109      	bne.n	800328c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d06b      	beq.n	8003364 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d062      	beq.n	8003358 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0ac      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032a2:	4b2e      	ldr	r3, [pc, #184]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2d      	ldr	r2, [pc, #180]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80032a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ae:	f7ff f907 	bl	80024c0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff f903 	bl	80024c0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e099      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <HAL_RCC_OscConfig+0x778>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x77c>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032e4:	3a01      	subs	r2, #1
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ee:	0212      	lsls	r2, r2, #8
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0552      	lsls	r2, r2, #21
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	3a01      	subs	r2, #1
 8003306:	0652      	lsls	r2, r2, #25
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800330e:	06d2      	lsls	r2, r2, #27
 8003310:	430a      	orrs	r2, r1
 8003312:	4912      	ldr	r1, [pc, #72]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003314:	4313      	orrs	r3, r2
 8003316:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_RCC_OscConfig+0x778>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a0c      	ldr	r2, [pc, #48]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003330:	f7ff f8c6 	bl	80024c0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7ff f8c2 	bl	80024c0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e058      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <HAL_RCC_OscConfig+0x778>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003356:	e050      	b.n	80033fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04f      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
 800335c:	40021000 	.word	0x40021000
 8003360:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d144      	bne.n	80033fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a20      	ldr	r2, [pc, #128]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003388:	f7ff f89a 	bl	80024c0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7ff f896 	bl	80024c0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e02c      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x7ac>
 80033ae:	e024      	b.n	80033fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d01f      	beq.n	80033f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7ff f87d 	bl	80024c0 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7ff f879 	bl	80024c0 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e00f      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4905      	ldr	r1, [pc, #20]	; (8003404 <HAL_RCC_OscConfig+0x820>)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x824>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	60cb      	str	r3, [r1, #12]
 80033f4:	e001      	b.n	80033fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	feeefffc 	.word	0xfeeefffc

0800340c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0e7      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b75      	ldr	r3, [pc, #468]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d910      	bls.n	8003450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4970      	ldr	r1, [pc, #448]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b6e      	ldr	r3, [pc, #440]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0cf      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	429a      	cmp	r2, r3
 800346a:	d908      	bls.n	800347e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4960      	ldr	r1, [pc, #384]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04c      	beq.n	8003524 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003492:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d121      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0a6      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e09a      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e08e      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e086      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b46      	ldr	r3, [pc, #280]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4943      	ldr	r1, [pc, #268]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fe ffe4 	bl	80024c0 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe ffe0 	bl	80024c0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e06e      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	429a      	cmp	r2, r3
 800353e:	d208      	bcs.n	8003552 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	492b      	ldr	r1, [pc, #172]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d210      	bcs.n	8003582 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 0207 	bic.w	r2, r3, #7
 8003568:	4923      	ldr	r1, [pc, #140]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e036      	b.n	80035f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4918      	ldr	r1, [pc, #96]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4910      	ldr	r1, [pc, #64]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c0:	f000 f824 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	490b      	ldr	r1, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x1f4>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1fc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe ff1b 	bl	8002420 <HAL_InitTick>
 80035ea:	4603      	mov	r3, r0
 80035ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ee:	7afb      	ldrb	r3, [r7, #11]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40021000 	.word	0x40021000
 8003600:	080060ac 	.word	0x080060ac
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361a:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d121      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d11e      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003640:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800364c:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e005      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800365c:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003668:	4a2b      	ldr	r2, [pc, #172]	; (8003718 <HAL_RCC_GetSysClockFreq+0x10c>)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d102      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_GetSysClockFreq+0x110>)
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e004      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d101      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_RCC_GetSysClockFreq+0x114>)
 8003692:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d134      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d003      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0xac>
 80036b0:	e005      	b.n	80036be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_GetSysClockFreq+0x110>)
 80036b4:	617b      	str	r3, [r7, #20]
      break;
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ba:	617b      	str	r3, [r7, #20]
      break;
 80036bc:	e002      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	617b      	str	r3, [r7, #20]
      break;
 80036c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	3301      	adds	r3, #1
 80036d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	fb03 f202 	mul.w	r2, r3, r2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	0e5b      	lsrs	r3, r3, #25
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	3301      	adds	r3, #1
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003704:	69bb      	ldr	r3, [r7, #24]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	080060c4 	.word	0x080060c4
 800371c:	00f42400 	.word	0x00f42400
 8003720:	007a1200 	.word	0x007a1200

08003724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000000 	.word	0x20000000

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003740:	f7ff fff0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4904      	ldr	r1, [pc, #16]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	080060bc 	.word	0x080060bc

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800376c:	f7ff ffda 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0adb      	lsrs	r3, r3, #11
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4904      	ldr	r1, [pc, #16]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	080060bc 	.word	0x080060bc

08003794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037ac:	f7ff f9b6 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 80037b0:	6178      	str	r0, [r7, #20]
 80037b2:	e014      	b.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6593      	str	r3, [r2, #88]	; 0x58
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037cc:	f7ff f9a6 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 80037d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e4:	d10b      	bne.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d919      	bls.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2ba0      	cmp	r3, #160	; 0xa0
 80037f0:	d902      	bls.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037f2:	2302      	movs	r3, #2
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e013      	b.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f8:	2301      	movs	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e010      	b.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d902      	bls.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003804:	2303      	movs	r3, #3
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e00a      	b.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d102      	bne.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003810:	2302      	movs	r3, #2
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e004      	b.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b70      	cmp	r3, #112	; 0x70
 800381a:	d101      	bne.n	8003820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0207 	bic.w	r2, r3, #7
 8003828:	4909      	ldr	r1, [pc, #36]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	40022000 	.word	0x40022000

08003854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800385c:	2300      	movs	r3, #0
 800385e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003860:	2300      	movs	r3, #0
 8003862:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	2b00      	cmp	r3, #0
 800386e:	d031      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003878:	d01a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800387a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800387e:	d814      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003888:	d10f      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800388a:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a5c      	ldr	r2, [pc, #368]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003896:	e00c      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa44 	bl	8003d2c <RCCEx_PLLSAI1_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a8:	e003      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	74fb      	strb	r3, [r7, #19]
      break;
 80038ae:	e000      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b8:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	494e      	ldr	r1, [pc, #312]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038ce:	e001      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 809e 	beq.w	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038e6:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003906:	6593      	str	r3, [r2, #88]	; 0x58
 8003908:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003914:	2301      	movs	r3, #1
 8003916:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003918:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003924:	f7fe fdcc 	bl	80024c0 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392a:	e009      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392c:	f7fe fdc8 	bl	80024c0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	74fb      	strb	r3, [r7, #19]
        break;
 800393e:	e005      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d15a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01e      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	d019      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003978:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800397a:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fd88 	bl	80024c0 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00b      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fe fd84 	bl	80024c0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d902      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	74fb      	strb	r3, [r7, #19]
            break;
 80039ca:	e006      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ec      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ee:	4904      	ldr	r1, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039f6:	e009      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0c:	7c7b      	ldrb	r3, [r7, #17]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b9e      	ldr	r3, [pc, #632]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4a9d      	ldr	r2, [pc, #628]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2a:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f023 0203 	bic.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4994      	ldr	r1, [pc, #592]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a4c:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 020c 	bic.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	498c      	ldr	r1, [pc, #560]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a6e:	4b87      	ldr	r3, [pc, #540]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	4983      	ldr	r1, [pc, #524]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a90:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	497b      	ldr	r1, [pc, #492]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab2:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4972      	ldr	r1, [pc, #456]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad4:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	496a      	ldr	r1, [pc, #424]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	4961      	ldr	r1, [pc, #388]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b18:	4b5c      	ldr	r3, [pc, #368]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	4959      	ldr	r1, [pc, #356]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b3a:	4b54      	ldr	r3, [pc, #336]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	4950      	ldr	r1, [pc, #320]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	4948      	ldr	r1, [pc, #288]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7e:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b84:	f023 0203 	bic.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	493f      	ldr	r1, [pc, #252]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d028      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bae:	4937      	ldr	r1, [pc, #220]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
 8003bcc:	e011      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f8a4 	bl	8003d2c <RCCEx_PLLSAI1_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	491f      	ldr	r1, [pc, #124]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c28:	60d3      	str	r3, [r2, #12]
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f875 	bl	8003d2c <RCCEx_PLLSAI1_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c7a:	d109      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c7c:	4b03      	ldr	r3, [pc, #12]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a02      	ldr	r2, [pc, #8]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c86:	60d3      	str	r3, [r2, #12]
 8003c88:	e014      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f843 	bl	8003d2c <RCCEx_PLLSAI1_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	4916      	ldr	r1, [pc, #88]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cde:	d10c      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f820 	bl	8003d2c <RCCEx_PLLSAI1_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	4904      	ldr	r1, [pc, #16]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000

08003d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d3a:	4b74      	ldr	r3, [pc, #464]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d018      	beq.n	8003d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d46:	4b71      	ldr	r3, [pc, #452]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0203 	and.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d10d      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
       ||
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d5e:	4b6b      	ldr	r3, [pc, #428]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d047      	beq.n	8003e02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	e044      	b.n	8003e02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d018      	beq.n	8003db2 <RCCEx_PLLSAI1_Config+0x86>
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d825      	bhi.n	8003dd0 <RCCEx_PLLSAI1_Config+0xa4>
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d002      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x62>
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d009      	beq.n	8003da0 <RCCEx_PLLSAI1_Config+0x74>
 8003d8c:	e020      	b.n	8003dd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11d      	bne.n	8003dd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9e:	e01a      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da0:	4b5a      	ldr	r3, [pc, #360]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d116      	bne.n	8003dda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db0:	e013      	b.n	8003dda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003db2:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dbe:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dce:	e006      	b.n	8003dde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd4:	e004      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10d      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003de6:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	4943      	ldr	r1, [pc, #268]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d17c      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e08:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e14:	f7fe fb54 	bl	80024c0 <HAL_GetTick>
 8003e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e1a:	e009      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e1c:	f7fe fb50 	bl	80024c0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d902      	bls.n	8003e30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e2e:	e005      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e30:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1ef      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d15f      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d110      	bne.n	8003e6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	0211      	lsls	r1, r2, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	06d2      	lsls	r2, r2, #27
 8003e60:	430a      	orrs	r2, r1
 8003e62:	492a      	ldr	r1, [pc, #168]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	610b      	str	r3, [r1, #16]
 8003e68:	e027      	b.n	8003eba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d112      	bne.n	8003e96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e70:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6912      	ldr	r2, [r2, #16]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0552      	lsls	r2, r2, #21
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	491f      	ldr	r1, [pc, #124]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	610b      	str	r3, [r1, #16]
 8003e94:	e011      	b.n	8003eba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	0211      	lsls	r1, r2, #8
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6952      	ldr	r2, [r2, #20]
 8003eac:	0852      	lsrs	r2, r2, #1
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0652      	lsls	r2, r2, #25
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	4915      	ldr	r1, [pc, #84]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fafb 	bl	80024c0 <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ecc:	e009      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ece:	f7fe faf7 	bl	80024c0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d902      	bls.n	8003ee2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	73fb      	strb	r3, [r7, #15]
          break;
 8003ee0:	e005      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e040      	b.n	8003fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd ff0c 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fbc2 	bl	80046d8 <UART_SetConfig>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fe3c 	bl	8004be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fec3 	bl	8004d28 <UART_CheckIdleState>
 8003fa2:	4603      	mov	r3, r0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	f040 8082 	bne.w	80040ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_Transmit+0x26>
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07a      	b.n	80040cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Transmit+0x38>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e073      	b.n	80040cc <HAL_UART_Transmit+0x120>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffa:	f7fe fa61 	bl	80024c0 <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x80>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800403c:	e02d      	b.n	800409a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 feb6 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e039      	b.n	80040cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406a:	b292      	uxth	r2, r2
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	3302      	adds	r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e008      	b.n	8004088 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b292      	uxth	r2, r2
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1cb      	bne.n	800403e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fe82 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e005      	b.n	80040cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0ba      	sub	sp, #232	; 0xe8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004102:	4013      	ands	r3, r2
 8004104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d115      	bne.n	800413c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00f      	beq.n	800413c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 82a6 	beq.w	800467e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
      }
      return;
 800413a:	e2a0      	b.n	800467e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800413c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8117 	beq.w	8004374 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004152:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004156:	4b85      	ldr	r3, [pc, #532]	; (800436c <HAL_UART_IRQHandler+0x298>)
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 810a 	beq.w	8004374 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d011      	beq.n	8004190 <HAL_UART_IRQHandler+0xbc>
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_UART_IRQHandler+0xec>
 800419c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2202      	movs	r2, #2
 80041ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d011      	beq.n	80041f0 <HAL_UART_IRQHandler+0x11c>
 80041cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2204      	movs	r2, #4
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e6:	f043 0202 	orr.w	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d017      	beq.n	800422c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2208      	movs	r2, #8
 800421a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004222:	f043 0208 	orr.w	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <HAL_UART_IRQHandler+0x18a>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800424c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 820c 	beq.w	8004682 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d04f      	beq.n	8004356 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fe43 	bl	8004f42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d141      	bne.n	800434e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800430e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1d9      	bne.n	80042ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	2b00      	cmp	r3, #0
 800431c:	d013      	beq.n	8004346 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <HAL_UART_IRQHandler+0x29c>)
 8004324:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fa23 	bl	8002776 <HAL_DMA_Abort_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d017      	beq.n	8004366 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004340:	4610      	mov	r0, r2
 8004342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00f      	b.n	8004366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9b0 	bl	80046ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e00b      	b.n	8004366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f9ac 	bl	80046ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004354:	e007      	b.n	8004366 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9a8 	bl	80046ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004364:	e18d      	b.n	8004682 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004366:	bf00      	nop
    return;
 8004368:	e18b      	b.n	8004682 <HAL_UART_IRQHandler+0x5ae>
 800436a:	bf00      	nop
 800436c:	04000120 	.word	0x04000120
 8004370:	08005009 	.word	0x08005009

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 8146 	bne.w	800460a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 813f 	beq.w	800460a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8138 	beq.w	800460a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2210      	movs	r2, #16
 80043a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	f040 80b4 	bne.w	800451a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 815f 	beq.w	8004686 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f080 8157 	bcs.w	8004686 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 8085 	bne.w	80044fe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800441e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004422:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800442a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1da      	bne.n	80043f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3308      	adds	r3, #8
 8004444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800444e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800446a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e1      	bne.n	800443e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800448a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800449e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e3      	bne.n	800447a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e4      	bne.n	80044be <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe f8fe 	bl	80026fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800450a:	b29b      	uxth	r3, r3
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	b29b      	uxth	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8d4 	bl	80046c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004518:	e0b5      	b.n	8004686 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004526:	b29b      	uxth	r3, r3
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80a7 	beq.w	800468a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800453c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a2 	beq.w	800468a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800455a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004568:	647b      	str	r3, [r7, #68]	; 0x44
 800456a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800456e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e4      	bne.n	8004546 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	623b      	str	r3, [r7, #32]
   return(result);
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045a0:	633a      	str	r2, [r7, #48]	; 0x30
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e3      	bne.n	800457c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	617b      	str	r3, [r7, #20]
   return(result);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e4      	bne.n	80045c6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f85c 	bl	80046c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004608:	e03f      	b.n	800468a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <HAL_UART_IRQHandler+0x560>
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800462a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd2b 	bl	8005088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004632:	e02d      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00e      	beq.n	800465e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
    }
    return;
 800465c:	e017      	b.n	800468e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <HAL_UART_IRQHandler+0x5bc>
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fcdc 	bl	8005034 <UART_EndTransmit_IT>
    return;
 800467c:	e008      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
      return;
 800467e:	bf00      	nop
 8004680:	e006      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004682:	bf00      	nop
 8004684:	e004      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004686:	bf00      	nop
 8004688:	e002      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
      return;
 800468a:	bf00      	nop
 800468c:	e000      	b.n	8004690 <HAL_UART_IRQHandler+0x5bc>
    return;
 800468e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004690:	37e8      	adds	r7, #232	; 0xe8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop

08004698 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b08a      	sub	sp, #40	; 0x28
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4ba5      	ldr	r3, [pc, #660]	; (800499c <UART_SetConfig+0x2c4>)
 8004708:	4013      	ands	r3, r2
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004710:	430b      	orrs	r3, r1
 8004712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a9a      	ldr	r2, [pc, #616]	; (80049a0 <UART_SetConfig+0x2c8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	4313      	orrs	r3, r2
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a91      	ldr	r2, [pc, #580]	; (80049a4 <UART_SetConfig+0x2cc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d126      	bne.n	80047b0 <UART_SetConfig+0xd8>
 8004762:	4b91      	ldr	r3, [pc, #580]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b03      	cmp	r3, #3
 800476e:	d81b      	bhi.n	80047a8 <UART_SetConfig+0xd0>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0xa0>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	08004799 	.word	0x08004799
 8004780:	08004791 	.word	0x08004791
 8004784:	080047a1 	.word	0x080047a1
 8004788:	2301      	movs	r3, #1
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e0d6      	b.n	800493e <UART_SetConfig+0x266>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0d2      	b.n	800493e <UART_SetConfig+0x266>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e0ce      	b.n	800493e <UART_SetConfig+0x266>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e0ca      	b.n	800493e <UART_SetConfig+0x266>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e0c6      	b.n	800493e <UART_SetConfig+0x266>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7d      	ldr	r2, [pc, #500]	; (80049ac <UART_SetConfig+0x2d4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d138      	bne.n	800482c <UART_SetConfig+0x154>
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <UART_SetConfig+0x2d0>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d82d      	bhi.n	8004824 <UART_SetConfig+0x14c>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0xf8>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004825 	.word	0x08004825
 80047d8:	08004825 	.word	0x08004825
 80047dc:	08004825 	.word	0x08004825
 80047e0:	08004815 	.word	0x08004815
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	08004825 	.word	0x08004825
 80047f8:	08004825 	.word	0x08004825
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800481d 	.word	0x0800481d
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e098      	b.n	800493e <UART_SetConfig+0x266>
 800480c:	2302      	movs	r3, #2
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e094      	b.n	800493e <UART_SetConfig+0x266>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481a:	e090      	b.n	800493e <UART_SetConfig+0x266>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	e08c      	b.n	800493e <UART_SetConfig+0x266>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e088      	b.n	800493e <UART_SetConfig+0x266>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5f      	ldr	r2, [pc, #380]	; (80049b0 <UART_SetConfig+0x2d8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d125      	bne.n	8004882 <UART_SetConfig+0x1aa>
 8004836:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d016      	beq.n	8004872 <UART_SetConfig+0x19a>
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d818      	bhi.n	800487a <UART_SetConfig+0x1a2>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d00a      	beq.n	8004862 <UART_SetConfig+0x18a>
 800484c:	2b20      	cmp	r3, #32
 800484e:	d814      	bhi.n	800487a <UART_SetConfig+0x1a2>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <UART_SetConfig+0x182>
 8004854:	2b10      	cmp	r3, #16
 8004856:	d008      	beq.n	800486a <UART_SetConfig+0x192>
 8004858:	e00f      	b.n	800487a <UART_SetConfig+0x1a2>
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004860:	e06d      	b.n	800493e <UART_SetConfig+0x266>
 8004862:	2302      	movs	r3, #2
 8004864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004868:	e069      	b.n	800493e <UART_SetConfig+0x266>
 800486a:	2304      	movs	r3, #4
 800486c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004870:	e065      	b.n	800493e <UART_SetConfig+0x266>
 8004872:	2308      	movs	r3, #8
 8004874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004878:	e061      	b.n	800493e <UART_SetConfig+0x266>
 800487a:	2310      	movs	r3, #16
 800487c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004880:	e05d      	b.n	800493e <UART_SetConfig+0x266>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4b      	ldr	r2, [pc, #300]	; (80049b4 <UART_SetConfig+0x2dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d125      	bne.n	80048d8 <UART_SetConfig+0x200>
 800488c:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <UART_SetConfig+0x2d0>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004896:	2bc0      	cmp	r3, #192	; 0xc0
 8004898:	d016      	beq.n	80048c8 <UART_SetConfig+0x1f0>
 800489a:	2bc0      	cmp	r3, #192	; 0xc0
 800489c:	d818      	bhi.n	80048d0 <UART_SetConfig+0x1f8>
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d00a      	beq.n	80048b8 <UART_SetConfig+0x1e0>
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d814      	bhi.n	80048d0 <UART_SetConfig+0x1f8>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <UART_SetConfig+0x1d8>
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d008      	beq.n	80048c0 <UART_SetConfig+0x1e8>
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x1f8>
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e042      	b.n	800493e <UART_SetConfig+0x266>
 80048b8:	2302      	movs	r3, #2
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e03e      	b.n	800493e <UART_SetConfig+0x266>
 80048c0:	2304      	movs	r3, #4
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e03a      	b.n	800493e <UART_SetConfig+0x266>
 80048c8:	2308      	movs	r3, #8
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ce:	e036      	b.n	800493e <UART_SetConfig+0x266>
 80048d0:	2310      	movs	r3, #16
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d6:	e032      	b.n	800493e <UART_SetConfig+0x266>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <UART_SetConfig+0x2c8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12a      	bne.n	8004938 <UART_SetConfig+0x260>
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <UART_SetConfig+0x2d0>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f0:	d01a      	beq.n	8004928 <UART_SetConfig+0x250>
 80048f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0x258>
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d00c      	beq.n	8004918 <UART_SetConfig+0x240>
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004902:	d815      	bhi.n	8004930 <UART_SetConfig+0x258>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <UART_SetConfig+0x238>
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d008      	beq.n	8004920 <UART_SetConfig+0x248>
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x258>
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e012      	b.n	800493e <UART_SetConfig+0x266>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e00e      	b.n	800493e <UART_SetConfig+0x266>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e00a      	b.n	800493e <UART_SetConfig+0x266>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e006      	b.n	800493e <UART_SetConfig+0x266>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e002      	b.n	800493e <UART_SetConfig+0x266>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <UART_SetConfig+0x2c8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	f040 808b 	bne.w	8004a60 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800494a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800494e:	2b08      	cmp	r3, #8
 8004950:	d834      	bhi.n	80049bc <UART_SetConfig+0x2e4>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x280>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	0800497d 	.word	0x0800497d
 800495c:	080049bd 	.word	0x080049bd
 8004960:	08004985 	.word	0x08004985
 8004964:	080049bd 	.word	0x080049bd
 8004968:	0800498b 	.word	0x0800498b
 800496c:	080049bd 	.word	0x080049bd
 8004970:	080049bd 	.word	0x080049bd
 8004974:	080049bd 	.word	0x080049bd
 8004978:	08004993 	.word	0x08004993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7fe fede 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004980:	61f8      	str	r0, [r7, #28]
        break;
 8004982:	e021      	b.n	80049c8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <UART_SetConfig+0x2e0>)
 8004986:	61fb      	str	r3, [r7, #28]
        break;
 8004988:	e01e      	b.n	80049c8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498a:	f7fe fe3f 	bl	800360c <HAL_RCC_GetSysClockFreq>
 800498e:	61f8      	str	r0, [r7, #28]
        break;
 8004990:	e01a      	b.n	80049c8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004996:	61fb      	str	r3, [r7, #28]
        break;
 8004998:	e016      	b.n	80049c8 <UART_SetConfig+0x2f0>
 800499a:	bf00      	nop
 800499c:	efff69f3 	.word	0xefff69f3
 80049a0:	40008000 	.word	0x40008000
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40004400 	.word	0x40004400
 80049b0:	40004800 	.word	0x40004800
 80049b4:	40004c00 	.word	0x40004c00
 80049b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80fa 	beq.w	8004bc4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d305      	bcc.n	80049ec <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d903      	bls.n	80049f4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049f2:	e0e7      	b.n	8004bc4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2200      	movs	r2, #0
 80049f8:	461c      	mov	r4, r3
 80049fa:	4615      	mov	r5, r2
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	022b      	lsls	r3, r5, #8
 8004a06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a0a:	0222      	lsls	r2, r4, #8
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	6849      	ldr	r1, [r1, #4]
 8004a10:	0849      	lsrs	r1, r1, #1
 8004a12:	2000      	movs	r0, #0
 8004a14:	4688      	mov	r8, r1
 8004a16:	4681      	mov	r9, r0
 8004a18:	eb12 0a08 	adds.w	sl, r2, r8
 8004a1c:	eb43 0b09 	adc.w	fp, r3, r9
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a2e:	4650      	mov	r0, sl
 8004a30:	4659      	mov	r1, fp
 8004a32:	f7fc f895 	bl	8000b60 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a44:	d308      	bcc.n	8004a58 <UART_SetConfig+0x380>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4c:	d204      	bcs.n	8004a58 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e0b5      	b.n	8004bc4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a5e:	e0b1      	b.n	8004bc4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d15d      	bne.n	8004b26 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d827      	bhi.n	8004ac2 <UART_SetConfig+0x3ea>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <UART_SetConfig+0x3a0>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004ac3 	.word	0x08004ac3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004abb 	.word	0x08004abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fe fe4e 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004aa0:	61f8      	str	r0, [r7, #28]
        break;
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fe fe60 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e010      	b.n	8004ace <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <UART_SetConfig+0x508>)
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e00d      	b.n	8004ace <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fe fdab 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8004ab6:	61f8      	str	r0, [r7, #28]
        break;
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e005      	b.n	8004ace <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d077      	beq.n	8004bc4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005a      	lsls	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d916      	bls.n	8004b1e <UART_SetConfig+0x446>
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af6:	d212      	bcs.n	8004b1e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f023 030f 	bic.w	r3, r3, #15
 8004b00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	8afa      	ldrh	r2, [r7, #22]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	e052      	b.n	8004bc4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b24:	e04e      	b.n	8004bc4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d827      	bhi.n	8004b7e <UART_SetConfig+0x4a6>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x45c>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fdf0 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e014      	b.n	8004b8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fe fe02 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61f8      	str	r0, [r7, #28]
        break;
 8004b66:	e010      	b.n	8004b8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <UART_SetConfig+0x508>)
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e00d      	b.n	8004b8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fe fd4d 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8004b72:	61f8      	str	r0, [r7, #28]
        break;
 8004b74:	e009      	b.n	8004b8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	61fb      	str	r3, [r7, #28]
        break;
 8004b7c:	e005      	b.n	8004b8a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b88:	bf00      	nop
    }

    if (pclk != 0U)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085a      	lsrs	r2, r3, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d909      	bls.n	8004bbe <UART_SetConfig+0x4e6>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d205      	bcs.n	8004bbe <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	e002      	b.n	8004bc4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3728      	adds	r7, #40	; 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	00f42400 	.word	0x00f42400

08004be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01a      	beq.n	8004cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce2:	d10a      	bne.n	8004cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d38:	f7fd fbc2 	bl	80024c0 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d10e      	bne.n	8004d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f82d 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e023      	b.n	8004db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d10e      	bne.n	8004d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f817 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00d      	b.n	8004db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b09c      	sub	sp, #112	; 0x70
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dca:	e0a5      	b.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	f000 80a1 	beq.w	8004f18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fd fb73 	bl	80024c0 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <UART_WaitOnFlagUntilTimeout+0x32>
 8004de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d13e      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e00:	667b      	str	r3, [r7, #100]	; 0x64
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e6      	bne.n	8004dec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	663b      	str	r3, [r7, #96]	; 0x60
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e5      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e067      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d04f      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d147      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e90:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ee4:	623a      	str	r2, [r7, #32]
 8004ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e010      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f43f af4a 	beq.w	8004dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3770      	adds	r7, #112	; 0x70
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b095      	sub	sp, #84	; 0x54
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f68:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d118      	bne.n	8004fea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e6      	bne.n	8004fb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ffc:	bf00      	nop
 8004ffe:	3754      	adds	r7, #84	; 0x54
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fb40 	bl	80046ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	60bb      	str	r3, [r7, #8]
   return(result);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	613b      	str	r3, [r7, #16]
   return(result);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e6      	bne.n	800503c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fb0c 	bl	8004698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005080:	bf00      	nop
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <atoi>:
 800509c:	220a      	movs	r2, #10
 800509e:	2100      	movs	r1, #0
 80050a0:	f000 b8b4 	b.w	800520c <strtol>

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	; (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	; (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	; (80050ec <__libc_init_array+0x3c>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2600      	movs	r6, #0
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	; (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	; (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 ffc6 	bl	8006054 <_init>
 80050c8:	1b64      	subs	r4, r4, r5
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2600      	movs	r6, #0
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	08006230 	.word	0x08006230
 80050ec:	08006230 	.word	0x08006230
 80050f0:	08006230 	.word	0x08006230
 80050f4:	08006234 	.word	0x08006234

080050f8 <memset>:
 80050f8:	4402      	add	r2, r0
 80050fa:	4603      	mov	r3, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <_strtol_l.constprop.0>:
 8005108:	2b01      	cmp	r3, #1
 800510a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800510e:	d001      	beq.n	8005114 <_strtol_l.constprop.0+0xc>
 8005110:	2b24      	cmp	r3, #36	; 0x24
 8005112:	d906      	bls.n	8005122 <_strtol_l.constprop.0+0x1a>
 8005114:	f7ff ffc6 	bl	80050a4 <__errno>
 8005118:	2316      	movs	r3, #22
 800511a:	6003      	str	r3, [r0, #0]
 800511c:	2000      	movs	r0, #0
 800511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005122:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005208 <_strtol_l.constprop.0+0x100>
 8005126:	460d      	mov	r5, r1
 8005128:	462e      	mov	r6, r5
 800512a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800512e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005132:	f017 0708 	ands.w	r7, r7, #8
 8005136:	d1f7      	bne.n	8005128 <_strtol_l.constprop.0+0x20>
 8005138:	2c2d      	cmp	r4, #45	; 0x2d
 800513a:	d132      	bne.n	80051a2 <_strtol_l.constprop.0+0x9a>
 800513c:	782c      	ldrb	r4, [r5, #0]
 800513e:	2701      	movs	r7, #1
 8005140:	1cb5      	adds	r5, r6, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d05b      	beq.n	80051fe <_strtol_l.constprop.0+0xf6>
 8005146:	2b10      	cmp	r3, #16
 8005148:	d109      	bne.n	800515e <_strtol_l.constprop.0+0x56>
 800514a:	2c30      	cmp	r4, #48	; 0x30
 800514c:	d107      	bne.n	800515e <_strtol_l.constprop.0+0x56>
 800514e:	782c      	ldrb	r4, [r5, #0]
 8005150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005154:	2c58      	cmp	r4, #88	; 0x58
 8005156:	d14d      	bne.n	80051f4 <_strtol_l.constprop.0+0xec>
 8005158:	786c      	ldrb	r4, [r5, #1]
 800515a:	2310      	movs	r3, #16
 800515c:	3502      	adds	r5, #2
 800515e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005162:	f108 38ff 	add.w	r8, r8, #4294967295
 8005166:	f04f 0c00 	mov.w	ip, #0
 800516a:	fbb8 f9f3 	udiv	r9, r8, r3
 800516e:	4666      	mov	r6, ip
 8005170:	fb03 8a19 	mls	sl, r3, r9, r8
 8005174:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005178:	f1be 0f09 	cmp.w	lr, #9
 800517c:	d816      	bhi.n	80051ac <_strtol_l.constprop.0+0xa4>
 800517e:	4674      	mov	r4, lr
 8005180:	42a3      	cmp	r3, r4
 8005182:	dd24      	ble.n	80051ce <_strtol_l.constprop.0+0xc6>
 8005184:	f1bc 0f00 	cmp.w	ip, #0
 8005188:	db1e      	blt.n	80051c8 <_strtol_l.constprop.0+0xc0>
 800518a:	45b1      	cmp	r9, r6
 800518c:	d31c      	bcc.n	80051c8 <_strtol_l.constprop.0+0xc0>
 800518e:	d101      	bne.n	8005194 <_strtol_l.constprop.0+0x8c>
 8005190:	45a2      	cmp	sl, r4
 8005192:	db19      	blt.n	80051c8 <_strtol_l.constprop.0+0xc0>
 8005194:	fb06 4603 	mla	r6, r6, r3, r4
 8005198:	f04f 0c01 	mov.w	ip, #1
 800519c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051a0:	e7e8      	b.n	8005174 <_strtol_l.constprop.0+0x6c>
 80051a2:	2c2b      	cmp	r4, #43	; 0x2b
 80051a4:	bf04      	itt	eq
 80051a6:	782c      	ldrbeq	r4, [r5, #0]
 80051a8:	1cb5      	addeq	r5, r6, #2
 80051aa:	e7ca      	b.n	8005142 <_strtol_l.constprop.0+0x3a>
 80051ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80051b0:	f1be 0f19 	cmp.w	lr, #25
 80051b4:	d801      	bhi.n	80051ba <_strtol_l.constprop.0+0xb2>
 80051b6:	3c37      	subs	r4, #55	; 0x37
 80051b8:	e7e2      	b.n	8005180 <_strtol_l.constprop.0+0x78>
 80051ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80051be:	f1be 0f19 	cmp.w	lr, #25
 80051c2:	d804      	bhi.n	80051ce <_strtol_l.constprop.0+0xc6>
 80051c4:	3c57      	subs	r4, #87	; 0x57
 80051c6:	e7db      	b.n	8005180 <_strtol_l.constprop.0+0x78>
 80051c8:	f04f 3cff 	mov.w	ip, #4294967295
 80051cc:	e7e6      	b.n	800519c <_strtol_l.constprop.0+0x94>
 80051ce:	f1bc 0f00 	cmp.w	ip, #0
 80051d2:	da05      	bge.n	80051e0 <_strtol_l.constprop.0+0xd8>
 80051d4:	2322      	movs	r3, #34	; 0x22
 80051d6:	6003      	str	r3, [r0, #0]
 80051d8:	4646      	mov	r6, r8
 80051da:	b942      	cbnz	r2, 80051ee <_strtol_l.constprop.0+0xe6>
 80051dc:	4630      	mov	r0, r6
 80051de:	e79e      	b.n	800511e <_strtol_l.constprop.0+0x16>
 80051e0:	b107      	cbz	r7, 80051e4 <_strtol_l.constprop.0+0xdc>
 80051e2:	4276      	negs	r6, r6
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d0f9      	beq.n	80051dc <_strtol_l.constprop.0+0xd4>
 80051e8:	f1bc 0f00 	cmp.w	ip, #0
 80051ec:	d000      	beq.n	80051f0 <_strtol_l.constprop.0+0xe8>
 80051ee:	1e69      	subs	r1, r5, #1
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	e7f3      	b.n	80051dc <_strtol_l.constprop.0+0xd4>
 80051f4:	2430      	movs	r4, #48	; 0x30
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1b1      	bne.n	800515e <_strtol_l.constprop.0+0x56>
 80051fa:	2308      	movs	r3, #8
 80051fc:	e7af      	b.n	800515e <_strtol_l.constprop.0+0x56>
 80051fe:	2c30      	cmp	r4, #48	; 0x30
 8005200:	d0a5      	beq.n	800514e <_strtol_l.constprop.0+0x46>
 8005202:	230a      	movs	r3, #10
 8005204:	e7ab      	b.n	800515e <_strtol_l.constprop.0+0x56>
 8005206:	bf00      	nop
 8005208:	080060f5 	.word	0x080060f5

0800520c <strtol>:
 800520c:	4613      	mov	r3, r2
 800520e:	460a      	mov	r2, r1
 8005210:	4601      	mov	r1, r0
 8005212:	4802      	ldr	r0, [pc, #8]	; (800521c <strtol+0x10>)
 8005214:	6800      	ldr	r0, [r0, #0]
 8005216:	f7ff bf77 	b.w	8005108 <_strtol_l.constprop.0>
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <pow>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	ed2d 8b02 	vpush	{d8}
 8005226:	eeb0 8a40 	vmov.f32	s16, s0
 800522a:	eef0 8a60 	vmov.f32	s17, s1
 800522e:	ec55 4b11 	vmov	r4, r5, d1
 8005232:	f000 f865 	bl	8005300 <__ieee754_pow>
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	4620      	mov	r0, r4
 800523c:	4629      	mov	r1, r5
 800523e:	ec57 6b10 	vmov	r6, r7, d0
 8005242:	f7fb fc27 	bl	8000a94 <__aeabi_dcmpun>
 8005246:	2800      	cmp	r0, #0
 8005248:	d13b      	bne.n	80052c2 <pow+0xa2>
 800524a:	ec51 0b18 	vmov	r0, r1, d8
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	f7fb fbed 	bl	8000a30 <__aeabi_dcmpeq>
 8005256:	b1b8      	cbz	r0, 8005288 <pow+0x68>
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb fbe6 	bl	8000a30 <__aeabi_dcmpeq>
 8005264:	2800      	cmp	r0, #0
 8005266:	d146      	bne.n	80052f6 <pow+0xd6>
 8005268:	ec45 4b10 	vmov	d0, r4, r5
 800526c:	f000 fe61 	bl	8005f32 <finite>
 8005270:	b338      	cbz	r0, 80052c2 <pow+0xa2>
 8005272:	2200      	movs	r2, #0
 8005274:	2300      	movs	r3, #0
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb fbe3 	bl	8000a44 <__aeabi_dcmplt>
 800527e:	b300      	cbz	r0, 80052c2 <pow+0xa2>
 8005280:	f7ff ff10 	bl	80050a4 <__errno>
 8005284:	2322      	movs	r3, #34	; 0x22
 8005286:	e01b      	b.n	80052c0 <pow+0xa0>
 8005288:	ec47 6b10 	vmov	d0, r6, r7
 800528c:	f000 fe51 	bl	8005f32 <finite>
 8005290:	b9e0      	cbnz	r0, 80052cc <pow+0xac>
 8005292:	eeb0 0a48 	vmov.f32	s0, s16
 8005296:	eef0 0a68 	vmov.f32	s1, s17
 800529a:	f000 fe4a 	bl	8005f32 <finite>
 800529e:	b1a8      	cbz	r0, 80052cc <pow+0xac>
 80052a0:	ec45 4b10 	vmov	d0, r4, r5
 80052a4:	f000 fe45 	bl	8005f32 <finite>
 80052a8:	b180      	cbz	r0, 80052cc <pow+0xac>
 80052aa:	4632      	mov	r2, r6
 80052ac:	463b      	mov	r3, r7
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fb fbef 	bl	8000a94 <__aeabi_dcmpun>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d0e2      	beq.n	8005280 <pow+0x60>
 80052ba:	f7ff fef3 	bl	80050a4 <__errno>
 80052be:	2321      	movs	r3, #33	; 0x21
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	ecbd 8b02 	vpop	{d8}
 80052c6:	ec47 6b10 	vmov	d0, r6, r7
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fbac 	bl	8000a30 <__aeabi_dcmpeq>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d0f2      	beq.n	80052c2 <pow+0xa2>
 80052dc:	eeb0 0a48 	vmov.f32	s0, s16
 80052e0:	eef0 0a68 	vmov.f32	s1, s17
 80052e4:	f000 fe25 	bl	8005f32 <finite>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0ea      	beq.n	80052c2 <pow+0xa2>
 80052ec:	ec45 4b10 	vmov	d0, r4, r5
 80052f0:	f000 fe1f 	bl	8005f32 <finite>
 80052f4:	e7c3      	b.n	800527e <pow+0x5e>
 80052f6:	4f01      	ldr	r7, [pc, #4]	; (80052fc <pow+0xdc>)
 80052f8:	2600      	movs	r6, #0
 80052fa:	e7e2      	b.n	80052c2 <pow+0xa2>
 80052fc:	3ff00000 	.word	0x3ff00000

08005300 <__ieee754_pow>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b06 	vpush	{d8-d10}
 8005308:	b089      	sub	sp, #36	; 0x24
 800530a:	ed8d 1b00 	vstr	d1, [sp]
 800530e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005312:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005316:	ea58 0102 	orrs.w	r1, r8, r2
 800531a:	ec57 6b10 	vmov	r6, r7, d0
 800531e:	d115      	bne.n	800534c <__ieee754_pow+0x4c>
 8005320:	19b3      	adds	r3, r6, r6
 8005322:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005326:	4152      	adcs	r2, r2
 8005328:	4299      	cmp	r1, r3
 800532a:	4b89      	ldr	r3, [pc, #548]	; (8005550 <__ieee754_pow+0x250>)
 800532c:	4193      	sbcs	r3, r2
 800532e:	f080 84d2 	bcs.w	8005cd6 <__ieee754_pow+0x9d6>
 8005332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005336:	4630      	mov	r0, r6
 8005338:	4639      	mov	r1, r7
 800533a:	f7fa ff5b 	bl	80001f4 <__adddf3>
 800533e:	ec41 0b10 	vmov	d0, r0, r1
 8005342:	b009      	add	sp, #36	; 0x24
 8005344:	ecbd 8b06 	vpop	{d8-d10}
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	4b81      	ldr	r3, [pc, #516]	; (8005554 <__ieee754_pow+0x254>)
 800534e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005352:	429c      	cmp	r4, r3
 8005354:	ee10 aa10 	vmov	sl, s0
 8005358:	463d      	mov	r5, r7
 800535a:	dc06      	bgt.n	800536a <__ieee754_pow+0x6a>
 800535c:	d101      	bne.n	8005362 <__ieee754_pow+0x62>
 800535e:	2e00      	cmp	r6, #0
 8005360:	d1e7      	bne.n	8005332 <__ieee754_pow+0x32>
 8005362:	4598      	cmp	r8, r3
 8005364:	dc01      	bgt.n	800536a <__ieee754_pow+0x6a>
 8005366:	d10f      	bne.n	8005388 <__ieee754_pow+0x88>
 8005368:	b172      	cbz	r2, 8005388 <__ieee754_pow+0x88>
 800536a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800536e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005372:	ea55 050a 	orrs.w	r5, r5, sl
 8005376:	d1dc      	bne.n	8005332 <__ieee754_pow+0x32>
 8005378:	e9dd 3200 	ldrd	r3, r2, [sp]
 800537c:	18db      	adds	r3, r3, r3
 800537e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005382:	4152      	adcs	r2, r2
 8005384:	429d      	cmp	r5, r3
 8005386:	e7d0      	b.n	800532a <__ieee754_pow+0x2a>
 8005388:	2d00      	cmp	r5, #0
 800538a:	da3b      	bge.n	8005404 <__ieee754_pow+0x104>
 800538c:	4b72      	ldr	r3, [pc, #456]	; (8005558 <__ieee754_pow+0x258>)
 800538e:	4598      	cmp	r8, r3
 8005390:	dc51      	bgt.n	8005436 <__ieee754_pow+0x136>
 8005392:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005396:	4598      	cmp	r8, r3
 8005398:	f340 84ac 	ble.w	8005cf4 <__ieee754_pow+0x9f4>
 800539c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053a4:	2b14      	cmp	r3, #20
 80053a6:	dd0f      	ble.n	80053c8 <__ieee754_pow+0xc8>
 80053a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80053ac:	fa22 f103 	lsr.w	r1, r2, r3
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f040 849d 	bne.w	8005cf4 <__ieee754_pow+0x9f4>
 80053ba:	f001 0101 	and.w	r1, r1, #1
 80053be:	f1c1 0302 	rsb	r3, r1, #2
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	b182      	cbz	r2, 80053e8 <__ieee754_pow+0xe8>
 80053c6:	e05f      	b.n	8005488 <__ieee754_pow+0x188>
 80053c8:	2a00      	cmp	r2, #0
 80053ca:	d15b      	bne.n	8005484 <__ieee754_pow+0x184>
 80053cc:	f1c3 0314 	rsb	r3, r3, #20
 80053d0:	fa48 f103 	asr.w	r1, r8, r3
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	4543      	cmp	r3, r8
 80053da:	f040 8488 	bne.w	8005cee <__ieee754_pow+0x9ee>
 80053de:	f001 0101 	and.w	r1, r1, #1
 80053e2:	f1c1 0302 	rsb	r3, r1, #2
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	4b5c      	ldr	r3, [pc, #368]	; (800555c <__ieee754_pow+0x25c>)
 80053ea:	4598      	cmp	r8, r3
 80053ec:	d132      	bne.n	8005454 <__ieee754_pow+0x154>
 80053ee:	f1b9 0f00 	cmp.w	r9, #0
 80053f2:	f280 8478 	bge.w	8005ce6 <__ieee754_pow+0x9e6>
 80053f6:	4959      	ldr	r1, [pc, #356]	; (800555c <__ieee754_pow+0x25c>)
 80053f8:	4632      	mov	r2, r6
 80053fa:	463b      	mov	r3, r7
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7fb f9d9 	bl	80007b4 <__aeabi_ddiv>
 8005402:	e79c      	b.n	800533e <__ieee754_pow+0x3e>
 8005404:	2300      	movs	r3, #0
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	2a00      	cmp	r2, #0
 800540a:	d13d      	bne.n	8005488 <__ieee754_pow+0x188>
 800540c:	4b51      	ldr	r3, [pc, #324]	; (8005554 <__ieee754_pow+0x254>)
 800540e:	4598      	cmp	r8, r3
 8005410:	d1ea      	bne.n	80053e8 <__ieee754_pow+0xe8>
 8005412:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005416:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800541a:	ea53 030a 	orrs.w	r3, r3, sl
 800541e:	f000 845a 	beq.w	8005cd6 <__ieee754_pow+0x9d6>
 8005422:	4b4f      	ldr	r3, [pc, #316]	; (8005560 <__ieee754_pow+0x260>)
 8005424:	429c      	cmp	r4, r3
 8005426:	dd08      	ble.n	800543a <__ieee754_pow+0x13a>
 8005428:	f1b9 0f00 	cmp.w	r9, #0
 800542c:	f2c0 8457 	blt.w	8005cde <__ieee754_pow+0x9de>
 8005430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005434:	e783      	b.n	800533e <__ieee754_pow+0x3e>
 8005436:	2302      	movs	r3, #2
 8005438:	e7e5      	b.n	8005406 <__ieee754_pow+0x106>
 800543a:	f1b9 0f00 	cmp.w	r9, #0
 800543e:	f04f 0000 	mov.w	r0, #0
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	f6bf af7a 	bge.w	800533e <__ieee754_pow+0x3e>
 800544a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800544e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005452:	e774      	b.n	800533e <__ieee754_pow+0x3e>
 8005454:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005458:	d106      	bne.n	8005468 <__ieee754_pow+0x168>
 800545a:	4632      	mov	r2, r6
 800545c:	463b      	mov	r3, r7
 800545e:	4630      	mov	r0, r6
 8005460:	4639      	mov	r1, r7
 8005462:	f7fb f87d 	bl	8000560 <__aeabi_dmul>
 8005466:	e76a      	b.n	800533e <__ieee754_pow+0x3e>
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <__ieee754_pow+0x264>)
 800546a:	4599      	cmp	r9, r3
 800546c:	d10c      	bne.n	8005488 <__ieee754_pow+0x188>
 800546e:	2d00      	cmp	r5, #0
 8005470:	db0a      	blt.n	8005488 <__ieee754_pow+0x188>
 8005472:	ec47 6b10 	vmov	d0, r6, r7
 8005476:	b009      	add	sp, #36	; 0x24
 8005478:	ecbd 8b06 	vpop	{d8-d10}
 800547c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	f000 bc6c 	b.w	8005d5c <__ieee754_sqrt>
 8005484:	2300      	movs	r3, #0
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	ec47 6b10 	vmov	d0, r6, r7
 800548c:	f000 fd48 	bl	8005f20 <fabs>
 8005490:	ec51 0b10 	vmov	r0, r1, d0
 8005494:	f1ba 0f00 	cmp.w	sl, #0
 8005498:	d129      	bne.n	80054ee <__ieee754_pow+0x1ee>
 800549a:	b124      	cbz	r4, 80054a6 <__ieee754_pow+0x1a6>
 800549c:	4b2f      	ldr	r3, [pc, #188]	; (800555c <__ieee754_pow+0x25c>)
 800549e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d123      	bne.n	80054ee <__ieee754_pow+0x1ee>
 80054a6:	f1b9 0f00 	cmp.w	r9, #0
 80054aa:	da05      	bge.n	80054b8 <__ieee754_pow+0x1b8>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	2000      	movs	r0, #0
 80054b2:	492a      	ldr	r1, [pc, #168]	; (800555c <__ieee754_pow+0x25c>)
 80054b4:	f7fb f97e 	bl	80007b4 <__aeabi_ddiv>
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	f6bf af40 	bge.w	800533e <__ieee754_pow+0x3e>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054c8:	4323      	orrs	r3, r4
 80054ca:	d108      	bne.n	80054de <__ieee754_pow+0x1de>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	f7fa fe8c 	bl	80001f0 <__aeabi_dsub>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	e78f      	b.n	80053fe <__ieee754_pow+0xfe>
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	f47f af2c 	bne.w	800533e <__ieee754_pow+0x3e>
 80054e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054ea:	4619      	mov	r1, r3
 80054ec:	e727      	b.n	800533e <__ieee754_pow+0x3e>
 80054ee:	0feb      	lsrs	r3, r5, #31
 80054f0:	3b01      	subs	r3, #1
 80054f2:	9306      	str	r3, [sp, #24]
 80054f4:	9a06      	ldr	r2, [sp, #24]
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	d102      	bne.n	8005502 <__ieee754_pow+0x202>
 80054fc:	4632      	mov	r2, r6
 80054fe:	463b      	mov	r3, r7
 8005500:	e7e6      	b.n	80054d0 <__ieee754_pow+0x1d0>
 8005502:	4b19      	ldr	r3, [pc, #100]	; (8005568 <__ieee754_pow+0x268>)
 8005504:	4598      	cmp	r8, r3
 8005506:	f340 80fb 	ble.w	8005700 <__ieee754_pow+0x400>
 800550a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800550e:	4598      	cmp	r8, r3
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <__ieee754_pow+0x260>)
 8005512:	dd0c      	ble.n	800552e <__ieee754_pow+0x22e>
 8005514:	429c      	cmp	r4, r3
 8005516:	dc0f      	bgt.n	8005538 <__ieee754_pow+0x238>
 8005518:	f1b9 0f00 	cmp.w	r9, #0
 800551c:	da0f      	bge.n	800553e <__ieee754_pow+0x23e>
 800551e:	2000      	movs	r0, #0
 8005520:	b009      	add	sp, #36	; 0x24
 8005522:	ecbd 8b06 	vpop	{d8-d10}
 8005526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	f000 bcf0 	b.w	8005f0e <__math_oflow>
 800552e:	429c      	cmp	r4, r3
 8005530:	dbf2      	blt.n	8005518 <__ieee754_pow+0x218>
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <__ieee754_pow+0x25c>)
 8005534:	429c      	cmp	r4, r3
 8005536:	dd19      	ble.n	800556c <__ieee754_pow+0x26c>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	dcef      	bgt.n	800551e <__ieee754_pow+0x21e>
 800553e:	2000      	movs	r0, #0
 8005540:	b009      	add	sp, #36	; 0x24
 8005542:	ecbd 8b06 	vpop	{d8-d10}
 8005546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	f000 bcd7 	b.w	8005efc <__math_uflow>
 800554e:	bf00      	nop
 8005550:	fff00000 	.word	0xfff00000
 8005554:	7ff00000 	.word	0x7ff00000
 8005558:	433fffff 	.word	0x433fffff
 800555c:	3ff00000 	.word	0x3ff00000
 8005560:	3fefffff 	.word	0x3fefffff
 8005564:	3fe00000 	.word	0x3fe00000
 8005568:	41e00000 	.word	0x41e00000
 800556c:	4b60      	ldr	r3, [pc, #384]	; (80056f0 <__ieee754_pow+0x3f0>)
 800556e:	2200      	movs	r2, #0
 8005570:	f7fa fe3e 	bl	80001f0 <__aeabi_dsub>
 8005574:	a354      	add	r3, pc, #336	; (adr r3, 80056c8 <__ieee754_pow+0x3c8>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	4604      	mov	r4, r0
 800557c:	460d      	mov	r5, r1
 800557e:	f7fa ffef 	bl	8000560 <__aeabi_dmul>
 8005582:	a353      	add	r3, pc, #332	; (adr r3, 80056d0 <__ieee754_pow+0x3d0>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	4606      	mov	r6, r0
 800558a:	460f      	mov	r7, r1
 800558c:	4620      	mov	r0, r4
 800558e:	4629      	mov	r1, r5
 8005590:	f7fa ffe6 	bl	8000560 <__aeabi_dmul>
 8005594:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <__ieee754_pow+0x3f4>)
 8005596:	4682      	mov	sl, r0
 8005598:	468b      	mov	fp, r1
 800559a:	2200      	movs	r2, #0
 800559c:	4620      	mov	r0, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fa ffde 	bl	8000560 <__aeabi_dmul>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	a14b      	add	r1, pc, #300	; (adr r1, 80056d8 <__ieee754_pow+0x3d8>)
 80055aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055ae:	f7fa fe1f 	bl	80001f0 <__aeabi_dsub>
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	f7fa ffd3 	bl	8000560 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	2000      	movs	r0, #0
 80055c0:	494d      	ldr	r1, [pc, #308]	; (80056f8 <__ieee754_pow+0x3f8>)
 80055c2:	f7fa fe15 	bl	80001f0 <__aeabi_dsub>
 80055c6:	4622      	mov	r2, r4
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	462b      	mov	r3, r5
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fa ffc5 	bl	8000560 <__aeabi_dmul>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4640      	mov	r0, r8
 80055dc:	4649      	mov	r1, r9
 80055de:	f7fa ffbf 	bl	8000560 <__aeabi_dmul>
 80055e2:	a33f      	add	r3, pc, #252	; (adr r3, 80056e0 <__ieee754_pow+0x3e0>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f7fa ffba 	bl	8000560 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4650      	mov	r0, sl
 80055f2:	4659      	mov	r1, fp
 80055f4:	f7fa fdfc 	bl	80001f0 <__aeabi_dsub>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4680      	mov	r8, r0
 80055fe:	4689      	mov	r9, r1
 8005600:	4630      	mov	r0, r6
 8005602:	4639      	mov	r1, r7
 8005604:	f7fa fdf6 	bl	80001f4 <__adddf3>
 8005608:	2000      	movs	r0, #0
 800560a:	4632      	mov	r2, r6
 800560c:	463b      	mov	r3, r7
 800560e:	4604      	mov	r4, r0
 8005610:	460d      	mov	r5, r1
 8005612:	f7fa fded 	bl	80001f0 <__aeabi_dsub>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fa fde7 	bl	80001f0 <__aeabi_dsub>
 8005622:	9b04      	ldr	r3, [sp, #16]
 8005624:	9a06      	ldr	r2, [sp, #24]
 8005626:	3b01      	subs	r3, #1
 8005628:	4313      	orrs	r3, r2
 800562a:	4682      	mov	sl, r0
 800562c:	468b      	mov	fp, r1
 800562e:	f040 81e7 	bne.w	8005a00 <__ieee754_pow+0x700>
 8005632:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80056e8 <__ieee754_pow+0x3e8>
 8005636:	eeb0 8a47 	vmov.f32	s16, s14
 800563a:	eef0 8a67 	vmov.f32	s17, s15
 800563e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005642:	2600      	movs	r6, #0
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800564c:	f7fa fdd0 	bl	80001f0 <__aeabi_dsub>
 8005650:	4622      	mov	r2, r4
 8005652:	462b      	mov	r3, r5
 8005654:	f7fa ff84 	bl	8000560 <__aeabi_dmul>
 8005658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800565c:	4680      	mov	r8, r0
 800565e:	4689      	mov	r9, r1
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fa ff7c 	bl	8000560 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fdc0 	bl	80001f4 <__adddf3>
 8005674:	4632      	mov	r2, r6
 8005676:	463b      	mov	r3, r7
 8005678:	4680      	mov	r8, r0
 800567a:	4689      	mov	r9, r1
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	f7fa ff6e 	bl	8000560 <__aeabi_dmul>
 8005684:	460b      	mov	r3, r1
 8005686:	4604      	mov	r4, r0
 8005688:	460d      	mov	r5, r1
 800568a:	4602      	mov	r2, r0
 800568c:	4649      	mov	r1, r9
 800568e:	4640      	mov	r0, r8
 8005690:	f7fa fdb0 	bl	80001f4 <__adddf3>
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <__ieee754_pow+0x3fc>)
 8005696:	4299      	cmp	r1, r3
 8005698:	ec45 4b19 	vmov	d9, r4, r5
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	468b      	mov	fp, r1
 80056a2:	f340 82f1 	ble.w	8005c88 <__ieee754_pow+0x988>
 80056a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80056aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80056ae:	4303      	orrs	r3, r0
 80056b0:	f000 81e4 	beq.w	8005a7c <__ieee754_pow+0x77c>
 80056b4:	ec51 0b18 	vmov	r0, r1, d8
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	f7fb f9c2 	bl	8000a44 <__aeabi_dcmplt>
 80056c0:	3800      	subs	r0, #0
 80056c2:	bf18      	it	ne
 80056c4:	2001      	movne	r0, #1
 80056c6:	e72b      	b.n	8005520 <__ieee754_pow+0x220>
 80056c8:	60000000 	.word	0x60000000
 80056cc:	3ff71547 	.word	0x3ff71547
 80056d0:	f85ddf44 	.word	0xf85ddf44
 80056d4:	3e54ae0b 	.word	0x3e54ae0b
 80056d8:	55555555 	.word	0x55555555
 80056dc:	3fd55555 	.word	0x3fd55555
 80056e0:	652b82fe 	.word	0x652b82fe
 80056e4:	3ff71547 	.word	0x3ff71547
 80056e8:	00000000 	.word	0x00000000
 80056ec:	bff00000 	.word	0xbff00000
 80056f0:	3ff00000 	.word	0x3ff00000
 80056f4:	3fd00000 	.word	0x3fd00000
 80056f8:	3fe00000 	.word	0x3fe00000
 80056fc:	408fffff 	.word	0x408fffff
 8005700:	4bd5      	ldr	r3, [pc, #852]	; (8005a58 <__ieee754_pow+0x758>)
 8005702:	402b      	ands	r3, r5
 8005704:	2200      	movs	r2, #0
 8005706:	b92b      	cbnz	r3, 8005714 <__ieee754_pow+0x414>
 8005708:	4bd4      	ldr	r3, [pc, #848]	; (8005a5c <__ieee754_pow+0x75c>)
 800570a:	f7fa ff29 	bl	8000560 <__aeabi_dmul>
 800570e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005712:	460c      	mov	r4, r1
 8005714:	1523      	asrs	r3, r4, #20
 8005716:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800571a:	4413      	add	r3, r2
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	4bd0      	ldr	r3, [pc, #832]	; (8005a60 <__ieee754_pow+0x760>)
 8005720:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005724:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005728:	429c      	cmp	r4, r3
 800572a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800572e:	dd08      	ble.n	8005742 <__ieee754_pow+0x442>
 8005730:	4bcc      	ldr	r3, [pc, #816]	; (8005a64 <__ieee754_pow+0x764>)
 8005732:	429c      	cmp	r4, r3
 8005734:	f340 8162 	ble.w	80059fc <__ieee754_pow+0x6fc>
 8005738:	9b05      	ldr	r3, [sp, #20]
 800573a:	3301      	adds	r3, #1
 800573c:	9305      	str	r3, [sp, #20]
 800573e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005742:	2400      	movs	r4, #0
 8005744:	00e3      	lsls	r3, r4, #3
 8005746:	9307      	str	r3, [sp, #28]
 8005748:	4bc7      	ldr	r3, [pc, #796]	; (8005a68 <__ieee754_pow+0x768>)
 800574a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800574e:	ed93 7b00 	vldr	d7, [r3]
 8005752:	4629      	mov	r1, r5
 8005754:	ec53 2b17 	vmov	r2, r3, d7
 8005758:	eeb0 9a47 	vmov.f32	s18, s14
 800575c:	eef0 9a67 	vmov.f32	s19, s15
 8005760:	4682      	mov	sl, r0
 8005762:	f7fa fd45 	bl	80001f0 <__aeabi_dsub>
 8005766:	4652      	mov	r2, sl
 8005768:	4606      	mov	r6, r0
 800576a:	460f      	mov	r7, r1
 800576c:	462b      	mov	r3, r5
 800576e:	ec51 0b19 	vmov	r0, r1, d9
 8005772:	f7fa fd3f 	bl	80001f4 <__adddf3>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	2000      	movs	r0, #0
 800577c:	49bb      	ldr	r1, [pc, #748]	; (8005a6c <__ieee754_pow+0x76c>)
 800577e:	f7fb f819 	bl	80007b4 <__aeabi_ddiv>
 8005782:	ec41 0b1a 	vmov	d10, r0, r1
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4630      	mov	r0, r6
 800578c:	4639      	mov	r1, r7
 800578e:	f7fa fee7 	bl	8000560 <__aeabi_dmul>
 8005792:	2300      	movs	r3, #0
 8005794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005798:	9302      	str	r3, [sp, #8]
 800579a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800579e:	46ab      	mov	fp, r5
 80057a0:	106d      	asrs	r5, r5, #1
 80057a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80057a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80057aa:	ec41 0b18 	vmov	d8, r0, r1
 80057ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80057b2:	2200      	movs	r2, #0
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	4614      	mov	r4, r2
 80057ba:	461d      	mov	r5, r3
 80057bc:	f7fa fed0 	bl	8000560 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fa fd12 	bl	80001f0 <__aeabi_dsub>
 80057cc:	ec53 2b19 	vmov	r2, r3, d9
 80057d0:	4606      	mov	r6, r0
 80057d2:	460f      	mov	r7, r1
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fa fd0a 	bl	80001f0 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f7fa fd04 	bl	80001f0 <__aeabi_dsub>
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	f7fa feb8 	bl	8000560 <__aeabi_dmul>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fa fcfa 	bl	80001f0 <__aeabi_dsub>
 80057fc:	ec53 2b1a 	vmov	r2, r3, d10
 8005800:	f7fa feae 	bl	8000560 <__aeabi_dmul>
 8005804:	ec53 2b18 	vmov	r2, r3, d8
 8005808:	ec41 0b19 	vmov	d9, r0, r1
 800580c:	ec51 0b18 	vmov	r0, r1, d8
 8005810:	f7fa fea6 	bl	8000560 <__aeabi_dmul>
 8005814:	a37c      	add	r3, pc, #496	; (adr r3, 8005a08 <__ieee754_pow+0x708>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
 800581e:	f7fa fe9f 	bl	8000560 <__aeabi_dmul>
 8005822:	a37b      	add	r3, pc, #492	; (adr r3, 8005a10 <__ieee754_pow+0x710>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fce4 	bl	80001f4 <__adddf3>
 800582c:	4622      	mov	r2, r4
 800582e:	462b      	mov	r3, r5
 8005830:	f7fa fe96 	bl	8000560 <__aeabi_dmul>
 8005834:	a378      	add	r3, pc, #480	; (adr r3, 8005a18 <__ieee754_pow+0x718>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f7fa fcdb 	bl	80001f4 <__adddf3>
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f7fa fe8d 	bl	8000560 <__aeabi_dmul>
 8005846:	a376      	add	r3, pc, #472	; (adr r3, 8005a20 <__ieee754_pow+0x720>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa fcd2 	bl	80001f4 <__adddf3>
 8005850:	4622      	mov	r2, r4
 8005852:	462b      	mov	r3, r5
 8005854:	f7fa fe84 	bl	8000560 <__aeabi_dmul>
 8005858:	a373      	add	r3, pc, #460	; (adr r3, 8005a28 <__ieee754_pow+0x728>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fcc9 	bl	80001f4 <__adddf3>
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	f7fa fe7b 	bl	8000560 <__aeabi_dmul>
 800586a:	a371      	add	r3, pc, #452	; (adr r3, 8005a30 <__ieee754_pow+0x730>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fcc0 	bl	80001f4 <__adddf3>
 8005874:	4622      	mov	r2, r4
 8005876:	4606      	mov	r6, r0
 8005878:	460f      	mov	r7, r1
 800587a:	462b      	mov	r3, r5
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fe6e 	bl	8000560 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fa fe68 	bl	8000560 <__aeabi_dmul>
 8005890:	4642      	mov	r2, r8
 8005892:	4604      	mov	r4, r0
 8005894:	460d      	mov	r5, r1
 8005896:	464b      	mov	r3, r9
 8005898:	ec51 0b18 	vmov	r0, r1, d8
 800589c:	f7fa fcaa 	bl	80001f4 <__adddf3>
 80058a0:	ec53 2b19 	vmov	r2, r3, d9
 80058a4:	f7fa fe5c 	bl	8000560 <__aeabi_dmul>
 80058a8:	4622      	mov	r2, r4
 80058aa:	462b      	mov	r3, r5
 80058ac:	f7fa fca2 	bl	80001f4 <__adddf3>
 80058b0:	4642      	mov	r2, r8
 80058b2:	4682      	mov	sl, r0
 80058b4:	468b      	mov	fp, r1
 80058b6:	464b      	mov	r3, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fa fe50 	bl	8000560 <__aeabi_dmul>
 80058c0:	4b6b      	ldr	r3, [pc, #428]	; (8005a70 <__ieee754_pow+0x770>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	f7fa fc94 	bl	80001f4 <__adddf3>
 80058cc:	4652      	mov	r2, sl
 80058ce:	465b      	mov	r3, fp
 80058d0:	f7fa fc90 	bl	80001f4 <__adddf3>
 80058d4:	2000      	movs	r0, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	460d      	mov	r5, r1
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4640      	mov	r0, r8
 80058e0:	4649      	mov	r1, r9
 80058e2:	f7fa fe3d 	bl	8000560 <__aeabi_dmul>
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <__ieee754_pow+0x770>)
 80058e8:	4680      	mov	r8, r0
 80058ea:	4689      	mov	r9, r1
 80058ec:	2200      	movs	r2, #0
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fa fc7d 	bl	80001f0 <__aeabi_dsub>
 80058f6:	4632      	mov	r2, r6
 80058f8:	463b      	mov	r3, r7
 80058fa:	f7fa fc79 	bl	80001f0 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4650      	mov	r0, sl
 8005904:	4659      	mov	r1, fp
 8005906:	f7fa fc73 	bl	80001f0 <__aeabi_dsub>
 800590a:	ec53 2b18 	vmov	r2, r3, d8
 800590e:	f7fa fe27 	bl	8000560 <__aeabi_dmul>
 8005912:	4622      	mov	r2, r4
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	462b      	mov	r3, r5
 800591a:	ec51 0b19 	vmov	r0, r1, d9
 800591e:	f7fa fe1f 	bl	8000560 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4630      	mov	r0, r6
 8005928:	4639      	mov	r1, r7
 800592a:	f7fa fc63 	bl	80001f4 <__adddf3>
 800592e:	4606      	mov	r6, r0
 8005930:	460f      	mov	r7, r1
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	f7fa fc5b 	bl	80001f4 <__adddf3>
 800593e:	a33e      	add	r3, pc, #248	; (adr r3, 8005a38 <__ieee754_pow+0x738>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	2000      	movs	r0, #0
 8005946:	4604      	mov	r4, r0
 8005948:	460d      	mov	r5, r1
 800594a:	f7fa fe09 	bl	8000560 <__aeabi_dmul>
 800594e:	4642      	mov	r2, r8
 8005950:	ec41 0b18 	vmov	d8, r0, r1
 8005954:	464b      	mov	r3, r9
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fa fc49 	bl	80001f0 <__aeabi_dsub>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4630      	mov	r0, r6
 8005964:	4639      	mov	r1, r7
 8005966:	f7fa fc43 	bl	80001f0 <__aeabi_dsub>
 800596a:	a335      	add	r3, pc, #212	; (adr r3, 8005a40 <__ieee754_pow+0x740>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f7fa fdf6 	bl	8000560 <__aeabi_dmul>
 8005974:	a334      	add	r3, pc, #208	; (adr r3, 8005a48 <__ieee754_pow+0x748>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	4606      	mov	r6, r0
 800597c:	460f      	mov	r7, r1
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fa fded 	bl	8000560 <__aeabi_dmul>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4630      	mov	r0, r6
 800598c:	4639      	mov	r1, r7
 800598e:	f7fa fc31 	bl	80001f4 <__adddf3>
 8005992:	9a07      	ldr	r2, [sp, #28]
 8005994:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <__ieee754_pow+0x774>)
 8005996:	4413      	add	r3, r2
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc2a 	bl	80001f4 <__adddf3>
 80059a0:	4682      	mov	sl, r0
 80059a2:	9805      	ldr	r0, [sp, #20]
 80059a4:	468b      	mov	fp, r1
 80059a6:	f7fa fd71 	bl	800048c <__aeabi_i2d>
 80059aa:	9a07      	ldr	r2, [sp, #28]
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <__ieee754_pow+0x778>)
 80059ae:	4413      	add	r3, r2
 80059b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	4652      	mov	r2, sl
 80059ba:	465b      	mov	r3, fp
 80059bc:	ec51 0b18 	vmov	r0, r1, d8
 80059c0:	f7fa fc18 	bl	80001f4 <__adddf3>
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	f7fa fc14 	bl	80001f4 <__adddf3>
 80059cc:	4632      	mov	r2, r6
 80059ce:	463b      	mov	r3, r7
 80059d0:	f7fa fc10 	bl	80001f4 <__adddf3>
 80059d4:	2000      	movs	r0, #0
 80059d6:	4632      	mov	r2, r6
 80059d8:	463b      	mov	r3, r7
 80059da:	4604      	mov	r4, r0
 80059dc:	460d      	mov	r5, r1
 80059de:	f7fa fc07 	bl	80001f0 <__aeabi_dsub>
 80059e2:	4642      	mov	r2, r8
 80059e4:	464b      	mov	r3, r9
 80059e6:	f7fa fc03 	bl	80001f0 <__aeabi_dsub>
 80059ea:	ec53 2b18 	vmov	r2, r3, d8
 80059ee:	f7fa fbff 	bl	80001f0 <__aeabi_dsub>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4650      	mov	r0, sl
 80059f8:	4659      	mov	r1, fp
 80059fa:	e610      	b.n	800561e <__ieee754_pow+0x31e>
 80059fc:	2401      	movs	r4, #1
 80059fe:	e6a1      	b.n	8005744 <__ieee754_pow+0x444>
 8005a00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005a50 <__ieee754_pow+0x750>
 8005a04:	e617      	b.n	8005636 <__ieee754_pow+0x336>
 8005a06:	bf00      	nop
 8005a08:	4a454eef 	.word	0x4a454eef
 8005a0c:	3fca7e28 	.word	0x3fca7e28
 8005a10:	93c9db65 	.word	0x93c9db65
 8005a14:	3fcd864a 	.word	0x3fcd864a
 8005a18:	a91d4101 	.word	0xa91d4101
 8005a1c:	3fd17460 	.word	0x3fd17460
 8005a20:	518f264d 	.word	0x518f264d
 8005a24:	3fd55555 	.word	0x3fd55555
 8005a28:	db6fabff 	.word	0xdb6fabff
 8005a2c:	3fdb6db6 	.word	0x3fdb6db6
 8005a30:	33333303 	.word	0x33333303
 8005a34:	3fe33333 	.word	0x3fe33333
 8005a38:	e0000000 	.word	0xe0000000
 8005a3c:	3feec709 	.word	0x3feec709
 8005a40:	dc3a03fd 	.word	0xdc3a03fd
 8005a44:	3feec709 	.word	0x3feec709
 8005a48:	145b01f5 	.word	0x145b01f5
 8005a4c:	be3e2fe0 	.word	0xbe3e2fe0
 8005a50:	00000000 	.word	0x00000000
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	7ff00000 	.word	0x7ff00000
 8005a5c:	43400000 	.word	0x43400000
 8005a60:	0003988e 	.word	0x0003988e
 8005a64:	000bb679 	.word	0x000bb679
 8005a68:	080061f8 	.word	0x080061f8
 8005a6c:	3ff00000 	.word	0x3ff00000
 8005a70:	40080000 	.word	0x40080000
 8005a74:	08006218 	.word	0x08006218
 8005a78:	08006208 	.word	0x08006208
 8005a7c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005d54 <__ieee754_pow+0xa54>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fbb5 	bl	80001f4 <__adddf3>
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	ec41 0b1a 	vmov	d10, r0, r1
 8005a90:	462b      	mov	r3, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fa fbab 	bl	80001f0 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	ec51 0b1a 	vmov	r0, r1, d10
 8005aa2:	f7fa ffed 	bl	8000a80 <__aeabi_dcmpgt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f47f ae04 	bne.w	80056b4 <__ieee754_pow+0x3b4>
 8005aac:	4aa4      	ldr	r2, [pc, #656]	; (8005d40 <__ieee754_pow+0xa40>)
 8005aae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	f340 8108 	ble.w	8005cc8 <__ieee754_pow+0x9c8>
 8005ab8:	151b      	asrs	r3, r3, #20
 8005aba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005abe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005ac2:	fa4a f303 	asr.w	r3, sl, r3
 8005ac6:	445b      	add	r3, fp
 8005ac8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005acc:	4e9d      	ldr	r6, [pc, #628]	; (8005d44 <__ieee754_pow+0xa44>)
 8005ace:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005ad2:	4116      	asrs	r6, r2
 8005ad4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005ad8:	2000      	movs	r0, #0
 8005ada:	ea23 0106 	bic.w	r1, r3, r6
 8005ade:	f1c2 0214 	rsb	r2, r2, #20
 8005ae2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005ae6:	fa4a fa02 	asr.w	sl, sl, r2
 8005aea:	f1bb 0f00 	cmp.w	fp, #0
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	bfb8      	it	lt
 8005af8:	f1ca 0a00 	rsblt	sl, sl, #0
 8005afc:	f7fa fb78 	bl	80001f0 <__aeabi_dsub>
 8005b00:	ec41 0b19 	vmov	d9, r0, r1
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	ec51 0b19 	vmov	r0, r1, d9
 8005b0c:	f7fa fb72 	bl	80001f4 <__adddf3>
 8005b10:	a37b      	add	r3, pc, #492	; (adr r3, 8005d00 <__ieee754_pow+0xa00>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	2000      	movs	r0, #0
 8005b18:	4604      	mov	r4, r0
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	f7fa fd20 	bl	8000560 <__aeabi_dmul>
 8005b20:	ec53 2b19 	vmov	r2, r3, d9
 8005b24:	4606      	mov	r6, r0
 8005b26:	460f      	mov	r7, r1
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	f7fa fb60 	bl	80001f0 <__aeabi_dsub>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4640      	mov	r0, r8
 8005b36:	4649      	mov	r1, r9
 8005b38:	f7fa fb5a 	bl	80001f0 <__aeabi_dsub>
 8005b3c:	a372      	add	r3, pc, #456	; (adr r3, 8005d08 <__ieee754_pow+0xa08>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fd0d 	bl	8000560 <__aeabi_dmul>
 8005b46:	a372      	add	r3, pc, #456	; (adr r3, 8005d10 <__ieee754_pow+0xa10>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4689      	mov	r9, r1
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fd04 	bl	8000560 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fb48 	bl	80001f4 <__adddf3>
 8005b64:	4604      	mov	r4, r0
 8005b66:	460d      	mov	r5, r1
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	4639      	mov	r1, r7
 8005b70:	f7fa fb40 	bl	80001f4 <__adddf3>
 8005b74:	4632      	mov	r2, r6
 8005b76:	463b      	mov	r3, r7
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	f7fa fb38 	bl	80001f0 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4620      	mov	r0, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	f7fa fb32 	bl	80001f0 <__aeabi_dsub>
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	4606      	mov	r6, r0
 8005b90:	460f      	mov	r7, r1
 8005b92:	464b      	mov	r3, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7fa fce2 	bl	8000560 <__aeabi_dmul>
 8005b9c:	a35e      	add	r3, pc, #376	; (adr r3, 8005d18 <__ieee754_pow+0xa18>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	f7fa fcdb 	bl	8000560 <__aeabi_dmul>
 8005baa:	a35d      	add	r3, pc, #372	; (adr r3, 8005d20 <__ieee754_pow+0xa20>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fb1e 	bl	80001f0 <__aeabi_dsub>
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	f7fa fcd2 	bl	8000560 <__aeabi_dmul>
 8005bbc:	a35a      	add	r3, pc, #360	; (adr r3, 8005d28 <__ieee754_pow+0xa28>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fb17 	bl	80001f4 <__adddf3>
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	f7fa fcc9 	bl	8000560 <__aeabi_dmul>
 8005bce:	a358      	add	r3, pc, #352	; (adr r3, 8005d30 <__ieee754_pow+0xa30>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fb0c 	bl	80001f0 <__aeabi_dsub>
 8005bd8:	4622      	mov	r2, r4
 8005bda:	462b      	mov	r3, r5
 8005bdc:	f7fa fcc0 	bl	8000560 <__aeabi_dmul>
 8005be0:	a355      	add	r3, pc, #340	; (adr r3, 8005d38 <__ieee754_pow+0xa38>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fb05 	bl	80001f4 <__adddf3>
 8005bea:	4622      	mov	r2, r4
 8005bec:	462b      	mov	r3, r5
 8005bee:	f7fa fcb7 	bl	8000560 <__aeabi_dmul>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	f7fa faf9 	bl	80001f0 <__aeabi_dsub>
 8005bfe:	4604      	mov	r4, r0
 8005c00:	460d      	mov	r5, r1
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa fca9 	bl	8000560 <__aeabi_dmul>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	ec41 0b19 	vmov	d9, r0, r1
 8005c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa fae8 	bl	80001f0 <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	ec51 0b19 	vmov	r0, r1, d9
 8005c28:	f7fa fdc4 	bl	80007b4 <__aeabi_ddiv>
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	4604      	mov	r4, r0
 8005c30:	460d      	mov	r5, r1
 8005c32:	463b      	mov	r3, r7
 8005c34:	4640      	mov	r0, r8
 8005c36:	4649      	mov	r1, r9
 8005c38:	f7fa fc92 	bl	8000560 <__aeabi_dmul>
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	f7fa fad8 	bl	80001f4 <__adddf3>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4620      	mov	r0, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f7fa fad0 	bl	80001f0 <__aeabi_dsub>
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	f7fa facc 	bl	80001f0 <__aeabi_dsub>
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	493a      	ldr	r1, [pc, #232]	; (8005d48 <__ieee754_pow+0xa48>)
 8005c5e:	2000      	movs	r0, #0
 8005c60:	f7fa fac6 	bl	80001f0 <__aeabi_dsub>
 8005c64:	ec41 0b10 	vmov	d0, r0, r1
 8005c68:	ee10 3a90 	vmov	r3, s1
 8005c6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c74:	da2b      	bge.n	8005cce <__ieee754_pow+0x9ce>
 8005c76:	4650      	mov	r0, sl
 8005c78:	f000 f966 	bl	8005f48 <scalbn>
 8005c7c:	ec51 0b10 	vmov	r0, r1, d0
 8005c80:	ec53 2b18 	vmov	r2, r3, d8
 8005c84:	f7ff bbed 	b.w	8005462 <__ieee754_pow+0x162>
 8005c88:	4b30      	ldr	r3, [pc, #192]	; (8005d4c <__ieee754_pow+0xa4c>)
 8005c8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005c8e:	429e      	cmp	r6, r3
 8005c90:	f77f af0c 	ble.w	8005aac <__ieee754_pow+0x7ac>
 8005c94:	4b2e      	ldr	r3, [pc, #184]	; (8005d50 <__ieee754_pow+0xa50>)
 8005c96:	440b      	add	r3, r1
 8005c98:	4303      	orrs	r3, r0
 8005c9a:	d009      	beq.n	8005cb0 <__ieee754_pow+0x9b0>
 8005c9c:	ec51 0b18 	vmov	r0, r1, d8
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f7fa fece 	bl	8000a44 <__aeabi_dcmplt>
 8005ca8:	3800      	subs	r0, #0
 8005caa:	bf18      	it	ne
 8005cac:	2001      	movne	r0, #1
 8005cae:	e447      	b.n	8005540 <__ieee754_pow+0x240>
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	f7fa fa9c 	bl	80001f0 <__aeabi_dsub>
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	f7fa fed6 	bl	8000a6c <__aeabi_dcmpge>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f43f aef3 	beq.w	8005aac <__ieee754_pow+0x7ac>
 8005cc6:	e7e9      	b.n	8005c9c <__ieee754_pow+0x99c>
 8005cc8:	f04f 0a00 	mov.w	sl, #0
 8005ccc:	e71a      	b.n	8005b04 <__ieee754_pow+0x804>
 8005cce:	ec51 0b10 	vmov	r0, r1, d0
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	e7d4      	b.n	8005c80 <__ieee754_pow+0x980>
 8005cd6:	491c      	ldr	r1, [pc, #112]	; (8005d48 <__ieee754_pow+0xa48>)
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f7ff bb30 	b.w	800533e <__ieee754_pow+0x3e>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f7ff bb2c 	b.w	800533e <__ieee754_pow+0x3e>
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	f7ff bb28 	b.w	800533e <__ieee754_pow+0x3e>
 8005cee:	9204      	str	r2, [sp, #16]
 8005cf0:	f7ff bb7a 	b.w	80053e8 <__ieee754_pow+0xe8>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f7ff bb64 	b.w	80053c2 <__ieee754_pow+0xc2>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
 8005d00:	00000000 	.word	0x00000000
 8005d04:	3fe62e43 	.word	0x3fe62e43
 8005d08:	fefa39ef 	.word	0xfefa39ef
 8005d0c:	3fe62e42 	.word	0x3fe62e42
 8005d10:	0ca86c39 	.word	0x0ca86c39
 8005d14:	be205c61 	.word	0xbe205c61
 8005d18:	72bea4d0 	.word	0x72bea4d0
 8005d1c:	3e663769 	.word	0x3e663769
 8005d20:	c5d26bf1 	.word	0xc5d26bf1
 8005d24:	3ebbbd41 	.word	0x3ebbbd41
 8005d28:	af25de2c 	.word	0xaf25de2c
 8005d2c:	3f11566a 	.word	0x3f11566a
 8005d30:	16bebd93 	.word	0x16bebd93
 8005d34:	3f66c16c 	.word	0x3f66c16c
 8005d38:	5555553e 	.word	0x5555553e
 8005d3c:	3fc55555 	.word	0x3fc55555
 8005d40:	3fe00000 	.word	0x3fe00000
 8005d44:	000fffff 	.word	0x000fffff
 8005d48:	3ff00000 	.word	0x3ff00000
 8005d4c:	4090cbff 	.word	0x4090cbff
 8005d50:	3f6f3400 	.word	0x3f6f3400
 8005d54:	652b82fe 	.word	0x652b82fe
 8005d58:	3c971547 	.word	0x3c971547

08005d5c <__ieee754_sqrt>:
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	ec55 4b10 	vmov	r4, r5, d0
 8005d64:	4e55      	ldr	r6, [pc, #340]	; (8005ebc <__ieee754_sqrt+0x160>)
 8005d66:	43ae      	bics	r6, r5
 8005d68:	ee10 0a10 	vmov	r0, s0
 8005d6c:	ee10 3a10 	vmov	r3, s0
 8005d70:	462a      	mov	r2, r5
 8005d72:	4629      	mov	r1, r5
 8005d74:	d110      	bne.n	8005d98 <__ieee754_sqrt+0x3c>
 8005d76:	ee10 2a10 	vmov	r2, s0
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	f7fa fbf0 	bl	8000560 <__aeabi_dmul>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fa34 	bl	80001f4 <__adddf3>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	460d      	mov	r5, r1
 8005d90:	ec45 4b10 	vmov	d0, r4, r5
 8005d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	dc10      	bgt.n	8005dbe <__ieee754_sqrt+0x62>
 8005d9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005da0:	4330      	orrs	r0, r6
 8005da2:	d0f5      	beq.n	8005d90 <__ieee754_sqrt+0x34>
 8005da4:	b15d      	cbz	r5, 8005dbe <__ieee754_sqrt+0x62>
 8005da6:	ee10 2a10 	vmov	r2, s0
 8005daa:	462b      	mov	r3, r5
 8005dac:	ee10 0a10 	vmov	r0, s0
 8005db0:	f7fa fa1e 	bl	80001f0 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	f7fa fcfc 	bl	80007b4 <__aeabi_ddiv>
 8005dbc:	e7e6      	b.n	8005d8c <__ieee754_sqrt+0x30>
 8005dbe:	1512      	asrs	r2, r2, #20
 8005dc0:	d074      	beq.n	8005eac <__ieee754_sqrt+0x150>
 8005dc2:	07d4      	lsls	r4, r2, #31
 8005dc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005dc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005dd0:	bf5e      	ittt	pl
 8005dd2:	0fda      	lsrpl	r2, r3, #31
 8005dd4:	005b      	lslpl	r3, r3, #1
 8005dd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005dda:	2400      	movs	r4, #0
 8005ddc:	0fda      	lsrs	r2, r3, #31
 8005dde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005de2:	107f      	asrs	r7, r7, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2516      	movs	r5, #22
 8005de8:	4620      	mov	r0, r4
 8005dea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005dee:	1886      	adds	r6, r0, r2
 8005df0:	428e      	cmp	r6, r1
 8005df2:	bfde      	ittt	le
 8005df4:	1b89      	suble	r1, r1, r6
 8005df6:	18b0      	addle	r0, r6, r2
 8005df8:	18a4      	addle	r4, r4, r2
 8005dfa:	0049      	lsls	r1, r1, #1
 8005dfc:	3d01      	subs	r5, #1
 8005dfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005e02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005e06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e0a:	d1f0      	bne.n	8005dee <__ieee754_sqrt+0x92>
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	f04f 0e20 	mov.w	lr, #32
 8005e12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e16:	4281      	cmp	r1, r0
 8005e18:	eb06 0c05 	add.w	ip, r6, r5
 8005e1c:	dc02      	bgt.n	8005e24 <__ieee754_sqrt+0xc8>
 8005e1e:	d113      	bne.n	8005e48 <__ieee754_sqrt+0xec>
 8005e20:	459c      	cmp	ip, r3
 8005e22:	d811      	bhi.n	8005e48 <__ieee754_sqrt+0xec>
 8005e24:	f1bc 0f00 	cmp.w	ip, #0
 8005e28:	eb0c 0506 	add.w	r5, ip, r6
 8005e2c:	da43      	bge.n	8005eb6 <__ieee754_sqrt+0x15a>
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	db41      	blt.n	8005eb6 <__ieee754_sqrt+0x15a>
 8005e32:	f100 0801 	add.w	r8, r0, #1
 8005e36:	1a09      	subs	r1, r1, r0
 8005e38:	459c      	cmp	ip, r3
 8005e3a:	bf88      	it	hi
 8005e3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005e40:	eba3 030c 	sub.w	r3, r3, ip
 8005e44:	4432      	add	r2, r6
 8005e46:	4640      	mov	r0, r8
 8005e48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005e4c:	f1be 0e01 	subs.w	lr, lr, #1
 8005e50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005e54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e5c:	d1db      	bne.n	8005e16 <__ieee754_sqrt+0xba>
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	d006      	beq.n	8005e70 <__ieee754_sqrt+0x114>
 8005e62:	1c50      	adds	r0, r2, #1
 8005e64:	bf13      	iteet	ne
 8005e66:	3201      	addne	r2, #1
 8005e68:	3401      	addeq	r4, #1
 8005e6a:	4672      	moveq	r2, lr
 8005e6c:	f022 0201 	bicne.w	r2, r2, #1
 8005e70:	1063      	asrs	r3, r4, #1
 8005e72:	0852      	lsrs	r2, r2, #1
 8005e74:	07e1      	lsls	r1, r4, #31
 8005e76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e7e:	bf48      	it	mi
 8005e80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005e84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005e88:	4614      	mov	r4, r2
 8005e8a:	e781      	b.n	8005d90 <__ieee754_sqrt+0x34>
 8005e8c:	0ad9      	lsrs	r1, r3, #11
 8005e8e:	3815      	subs	r0, #21
 8005e90:	055b      	lsls	r3, r3, #21
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d0fa      	beq.n	8005e8c <__ieee754_sqrt+0x130>
 8005e96:	02cd      	lsls	r5, r1, #11
 8005e98:	d50a      	bpl.n	8005eb0 <__ieee754_sqrt+0x154>
 8005e9a:	f1c2 0420 	rsb	r4, r2, #32
 8005e9e:	fa23 f404 	lsr.w	r4, r3, r4
 8005ea2:	1e55      	subs	r5, r2, #1
 8005ea4:	4093      	lsls	r3, r2
 8005ea6:	4321      	orrs	r1, r4
 8005ea8:	1b42      	subs	r2, r0, r5
 8005eaa:	e78a      	b.n	8005dc2 <__ieee754_sqrt+0x66>
 8005eac:	4610      	mov	r0, r2
 8005eae:	e7f0      	b.n	8005e92 <__ieee754_sqrt+0x136>
 8005eb0:	0049      	lsls	r1, r1, #1
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	e7ef      	b.n	8005e96 <__ieee754_sqrt+0x13a>
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	e7bd      	b.n	8005e36 <__ieee754_sqrt+0xda>
 8005eba:	bf00      	nop
 8005ebc:	7ff00000 	.word	0x7ff00000

08005ec0 <with_errno>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
 8005ec6:	4616      	mov	r6, r2
 8005ec8:	f7ff f8ec 	bl	80050a4 <__errno>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	6006      	str	r6, [r0, #0]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <xflow>:
 8005ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed6:	4614      	mov	r4, r2
 8005ed8:	461d      	mov	r5, r3
 8005eda:	b108      	cbz	r0, 8005ee0 <xflow+0xc>
 8005edc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ee0:	e9cd 2300 	strd	r2, r3, [sp]
 8005ee4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa fb38 	bl	8000560 <__aeabi_dmul>
 8005ef0:	2222      	movs	r2, #34	; 0x22
 8005ef2:	b003      	add	sp, #12
 8005ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ef8:	f7ff bfe2 	b.w	8005ec0 <with_errno>

08005efc <__math_uflow>:
 8005efc:	b508      	push	{r3, lr}
 8005efe:	2200      	movs	r2, #0
 8005f00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f04:	f7ff ffe6 	bl	8005ed4 <xflow>
 8005f08:	ec41 0b10 	vmov	d0, r0, r1
 8005f0c:	bd08      	pop	{r3, pc}

08005f0e <__math_oflow>:
 8005f0e:	b508      	push	{r3, lr}
 8005f10:	2200      	movs	r2, #0
 8005f12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f16:	f7ff ffdd 	bl	8005ed4 <xflow>
 8005f1a:	ec41 0b10 	vmov	d0, r0, r1
 8005f1e:	bd08      	pop	{r3, pc}

08005f20 <fabs>:
 8005f20:	ec51 0b10 	vmov	r0, r1, d0
 8005f24:	ee10 2a10 	vmov	r2, s0
 8005f28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f2c:	ec43 2b10 	vmov	d0, r2, r3
 8005f30:	4770      	bx	lr

08005f32 <finite>:
 8005f32:	b082      	sub	sp, #8
 8005f34:	ed8d 0b00 	vstr	d0, [sp]
 8005f38:	9801      	ldr	r0, [sp, #4]
 8005f3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005f3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f42:	0fc0      	lsrs	r0, r0, #31
 8005f44:	b002      	add	sp, #8
 8005f46:	4770      	bx	lr

08005f48 <scalbn>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	ec55 4b10 	vmov	r4, r5, d0
 8005f4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f52:	4606      	mov	r6, r0
 8005f54:	462b      	mov	r3, r5
 8005f56:	b99a      	cbnz	r2, 8005f80 <scalbn+0x38>
 8005f58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f5c:	4323      	orrs	r3, r4
 8005f5e:	d036      	beq.n	8005fce <scalbn+0x86>
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <scalbn+0x100>)
 8005f62:	4629      	mov	r1, r5
 8005f64:	ee10 0a10 	vmov	r0, s0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f7fa faf9 	bl	8000560 <__aeabi_dmul>
 8005f6e:	4b37      	ldr	r3, [pc, #220]	; (800604c <scalbn+0x104>)
 8005f70:	429e      	cmp	r6, r3
 8005f72:	4604      	mov	r4, r0
 8005f74:	460d      	mov	r5, r1
 8005f76:	da10      	bge.n	8005f9a <scalbn+0x52>
 8005f78:	a32b      	add	r3, pc, #172	; (adr r3, 8006028 <scalbn+0xe0>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	e03a      	b.n	8005ff6 <scalbn+0xae>
 8005f80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005f84:	428a      	cmp	r2, r1
 8005f86:	d10c      	bne.n	8005fa2 <scalbn+0x5a>
 8005f88:	ee10 2a10 	vmov	r2, s0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa f930 	bl	80001f4 <__adddf3>
 8005f94:	4604      	mov	r4, r0
 8005f96:	460d      	mov	r5, r1
 8005f98:	e019      	b.n	8005fce <scalbn+0x86>
 8005f9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	3a36      	subs	r2, #54	; 0x36
 8005fa2:	4432      	add	r2, r6
 8005fa4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005fa8:	428a      	cmp	r2, r1
 8005faa:	dd08      	ble.n	8005fbe <scalbn+0x76>
 8005fac:	2d00      	cmp	r5, #0
 8005fae:	a120      	add	r1, pc, #128	; (adr r1, 8006030 <scalbn+0xe8>)
 8005fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fb4:	da1c      	bge.n	8005ff0 <scalbn+0xa8>
 8005fb6:	a120      	add	r1, pc, #128	; (adr r1, 8006038 <scalbn+0xf0>)
 8005fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fbc:	e018      	b.n	8005ff0 <scalbn+0xa8>
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	dd08      	ble.n	8005fd4 <scalbn+0x8c>
 8005fc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fce:	ec45 4b10 	vmov	d0, r4, r5
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fd8:	da19      	bge.n	800600e <scalbn+0xc6>
 8005fda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005fde:	429e      	cmp	r6, r3
 8005fe0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005fe4:	dd0a      	ble.n	8005ffc <scalbn+0xb4>
 8005fe6:	a112      	add	r1, pc, #72	; (adr r1, 8006030 <scalbn+0xe8>)
 8005fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e2      	bne.n	8005fb6 <scalbn+0x6e>
 8005ff0:	a30f      	add	r3, pc, #60	; (adr r3, 8006030 <scalbn+0xe8>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa fab3 	bl	8000560 <__aeabi_dmul>
 8005ffa:	e7cb      	b.n	8005f94 <scalbn+0x4c>
 8005ffc:	a10a      	add	r1, pc, #40	; (adr r1, 8006028 <scalbn+0xe0>)
 8005ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0b8      	beq.n	8005f78 <scalbn+0x30>
 8006006:	a10e      	add	r1, pc, #56	; (adr r1, 8006040 <scalbn+0xf8>)
 8006008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800600c:	e7b4      	b.n	8005f78 <scalbn+0x30>
 800600e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006012:	3236      	adds	r2, #54	; 0x36
 8006014:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006018:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800601c:	4620      	mov	r0, r4
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <scalbn+0x108>)
 8006020:	2200      	movs	r2, #0
 8006022:	e7e8      	b.n	8005ff6 <scalbn+0xae>
 8006024:	f3af 8000 	nop.w
 8006028:	c2f8f359 	.word	0xc2f8f359
 800602c:	01a56e1f 	.word	0x01a56e1f
 8006030:	8800759c 	.word	0x8800759c
 8006034:	7e37e43c 	.word	0x7e37e43c
 8006038:	8800759c 	.word	0x8800759c
 800603c:	fe37e43c 	.word	0xfe37e43c
 8006040:	c2f8f359 	.word	0xc2f8f359
 8006044:	81a56e1f 	.word	0x81a56e1f
 8006048:	43500000 	.word	0x43500000
 800604c:	ffff3cb0 	.word	0xffff3cb0
 8006050:	3c900000 	.word	0x3c900000

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
