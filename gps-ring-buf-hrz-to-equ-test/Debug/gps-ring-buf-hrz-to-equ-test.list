
gps-ring-buf-hrz-to-equ-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c40  0800a170  0800a170  0001a170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdb0  0800bdb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdb8  0800bdb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdbc  0800bdbc  0001bdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bdc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000070  0800be30  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  0800be30  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010424  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a88  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00032f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023245  00000000  00000000  00034840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108a8  00000000  00000000  00057a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d13db  00000000  00000000  0006832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  00139758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000004e  00000000  00000000  0013d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a154 	.word	0x0800a154

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800a154 	.word	0x0800a154

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2uiz>:
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	d211      	bcs.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d211      	bcs.n	8000b3e <__aeabi_d2uiz+0x2e>
 8000b1a:	d50d      	bpl.n	8000b38 <__aeabi_d2uiz+0x28>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d40e      	bmi.n	8000b44 <__aeabi_d2uiz+0x34>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	fa23 f002 	lsr.w	r0, r3, r2
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_d2uiz+0x3a>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b974 	b.w	8000ef0 <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9d08      	ldr	r5, [sp, #32]
 8000c26:	4604      	mov	r4, r0
 8000c28:	468e      	mov	lr, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d14d      	bne.n	8000cca <__udivmoddi4+0xaa>
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	4694      	mov	ip, r2
 8000c32:	d969      	bls.n	8000d08 <__udivmoddi4+0xe8>
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	b152      	cbz	r2, 8000c50 <__udivmoddi4+0x30>
 8000c3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3e:	f1c2 0120 	rsb	r1, r2, #32
 8000c42:	fa20 f101 	lsr.w	r1, r0, r1
 8000c46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4e:	4094      	lsls	r4, r2
 8000c50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c54:	0c21      	lsrs	r1, r4, #16
 8000c56:	fbbe f6f8 	udiv	r6, lr, r8
 8000c5a:	fa1f f78c 	uxth.w	r7, ip
 8000c5e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c66:	fb06 f107 	mul.w	r1, r6, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x64>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c76:	f080 811f 	bcs.w	8000eb8 <__udivmoddi4+0x298>
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	f240 811c 	bls.w	8000eb8 <__udivmoddi4+0x298>
 8000c80:	3e02      	subs	r6, #2
 8000c82:	4463      	add	r3, ip
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c94:	fb00 f707 	mul.w	r7, r0, r7
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x92>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca4:	f080 810a 	bcs.w	8000ebc <__udivmoddi4+0x29c>
 8000ca8:	42a7      	cmp	r7, r4
 8000caa:	f240 8107 	bls.w	8000ebc <__udivmoddi4+0x29c>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb6:	1be4      	subs	r4, r4, r7
 8000cb8:	2600      	movs	r6, #0
 8000cba:	b11d      	cbz	r5, 8000cc4 <__udivmoddi4+0xa4>
 8000cbc:	40d4      	lsrs	r4, r2
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d909      	bls.n	8000ce2 <__udivmoddi4+0xc2>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	f000 80ef 	beq.w	8000eb2 <__udivmoddi4+0x292>
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cda:	4630      	mov	r0, r6
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	fab3 f683 	clz	r6, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d14a      	bne.n	8000d80 <__udivmoddi4+0x160>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xd4>
 8000cee:	4282      	cmp	r2, r0
 8000cf0:	f200 80f9 	bhi.w	8000ee6 <__udivmoddi4+0x2c6>
 8000cf4:	1a84      	subs	r4, r0, r2
 8000cf6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	469e      	mov	lr, r3
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e0      	beq.n	8000cc4 <__udivmoddi4+0xa4>
 8000d02:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d06:	e7dd      	b.n	8000cc4 <__udivmoddi4+0xa4>
 8000d08:	b902      	cbnz	r2, 8000d0c <__udivmoddi4+0xec>
 8000d0a:	deff      	udf	#255	; 0xff
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	f040 8092 	bne.w	8000e3a <__udivmoddi4+0x21a>
 8000d16:	eba1 010c 	sub.w	r1, r1, ip
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2601      	movs	r6, #1
 8000d24:	0c20      	lsrs	r0, r4, #16
 8000d26:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d2a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d32:	fb0e f003 	mul.w	r0, lr, r3
 8000d36:	4288      	cmp	r0, r1
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x12c>
 8000d3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x12a>
 8000d44:	4288      	cmp	r0, r1
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2c0>
 8000d4a:	4643      	mov	r3, r8
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d54:	fb07 1110 	mls	r1, r7, r0, r1
 8000d58:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x156>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x154>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2ca>
 8000d74:	4608      	mov	r0, r1
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7e:	e79c      	b.n	8000cba <__udivmoddi4+0x9a>
 8000d80:	f1c6 0720 	rsb	r7, r6, #32
 8000d84:	40b3      	lsls	r3, r6
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d92:	fa01 f306 	lsl.w	r3, r1, r6
 8000d96:	431c      	orrs	r4, r3
 8000d98:	40f9      	lsrs	r1, r7
 8000d9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9e:	fa00 f306 	lsl.w	r3, r0, r6
 8000da2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da6:	0c20      	lsrs	r0, r4, #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fb09 1118 	mls	r1, r9, r8, r1
 8000db0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db4:	fb08 f00e 	mul.w	r0, r8, lr
 8000db8:	4288      	cmp	r0, r1
 8000dba:	fa02 f206 	lsl.w	r2, r2, r6
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b8>
 8000dc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2bc>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2bc>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de0:	fb09 1110 	mls	r1, r9, r0, r1
 8000de4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dec:	458e      	cmp	lr, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1e2>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2b4>
 8000dfa:	458e      	cmp	lr, r1
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2b4>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e06:	fba0 9402 	umull	r9, r4, r0, r2
 8000e0a:	eba1 010e 	sub.w	r1, r1, lr
 8000e0e:	42a1      	cmp	r1, r4
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46a6      	mov	lr, r4
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x2a4>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x2a0>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x212>
 8000e1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e22:	fa01 f707 	lsl.w	r7, r1, r7
 8000e26:	fa22 f306 	lsr.w	r3, r2, r6
 8000e2a:	40f1      	lsrs	r1, r6
 8000e2c:	431f      	orrs	r7, r3
 8000e2e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	f1c2 0320 	rsb	r3, r2, #32
 8000e3e:	40d8      	lsrs	r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	fa21 f303 	lsr.w	r3, r1, r3
 8000e48:	4091      	lsls	r1, r2
 8000e4a:	4301      	orrs	r1, r0
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e58:	fb07 3610 	mls	r6, r7, r0, r3
 8000e5c:	0c0b      	lsrs	r3, r1, #16
 8000e5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e62:	fb00 f60e 	mul.w	r6, r0, lr
 8000e66:	429e      	cmp	r6, r3
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x260>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b8>
 8000e78:	429e      	cmp	r6, r3
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b8>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1b9b      	subs	r3, r3, r6
 8000e82:	b289      	uxth	r1, r1
 8000e84:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e88:	fb07 3316 	mls	r3, r7, r6, r3
 8000e8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e90:	fb06 f30e 	mul.w	r3, r6, lr
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x28a>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2b0>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2b0>
 8000ea6:	3e02      	subs	r6, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0x104>
 8000eb2:	462e      	mov	r6, r5
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	e705      	b.n	8000cc4 <__udivmoddi4+0xa4>
 8000eb8:	4606      	mov	r6, r0
 8000eba:	e6e3      	b.n	8000c84 <__udivmoddi4+0x64>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6f8      	b.n	8000cb2 <__udivmoddi4+0x92>
 8000ec0:	454b      	cmp	r3, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f8>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ecc:	3801      	subs	r0, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f8>
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x28a>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1e2>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x260>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b8>
 8000ee0:	3b02      	subs	r3, #2
 8000ee2:	4461      	add	r1, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x12c>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e709      	b.n	8000cfe <__udivmoddi4+0xde>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x156>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000efc:	b08c      	sub	sp, #48	; 0x30
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f04:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <decodeGGA+0x17c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ',' (after GGA/RMC)
 8000f0e:	e004      	b.n	8000f1a <decodeGGA+0x22>
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <decodeGGA+0x17c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a57      	ldr	r2, [pc, #348]	; (8001074 <decodeGGA+0x17c>)
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b56      	ldr	r3, [pc, #344]	; (8001074 <decodeGGA+0x17c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b2c      	cmp	r3, #44	; 0x2c
 8000f28:	d1f2      	bne.n	8000f10 <decodeGGA+0x18>
	inx++;
 8000f2a:	4b52      	ldr	r3, [pc, #328]	; (8001074 <decodeGGA+0x17c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a50      	ldr	r2, [pc, #320]	; (8001074 <decodeGGA+0x17c>)
 8000f32:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f34:	e004      	b.n	8000f40 <decodeGGA+0x48>
 8000f36:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <decodeGGA+0x17c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <decodeGGA+0x17c>)
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <decodeGGA+0x17c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b2c      	cmp	r3, #44	; 0x2c
 8000f4e:	d1f2      	bne.n	8000f36 <decodeGGA+0x3e>
	inx++;
 8000f50:	4b48      	ldr	r3, [pc, #288]	; (8001074 <decodeGGA+0x17c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a47      	ldr	r2, [pc, #284]	; (8001074 <decodeGGA+0x17c>)
 8000f58:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000f5a:	e004      	b.n	8000f66 <decodeGGA+0x6e>
 8000f5c:	4b45      	ldr	r3, [pc, #276]	; (8001074 <decodeGGA+0x17c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a44      	ldr	r2, [pc, #272]	; (8001074 <decodeGGA+0x17c>)
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <decodeGGA+0x17c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b2c      	cmp	r3, #44	; 0x2c
 8000f74:	d1f2      	bne.n	8000f5c <decodeGGA+0x64>
	inx++;
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <decodeGGA+0x17c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <decodeGGA+0x17c>)
 8000f7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ',' (north/south)
 8000f80:	e004      	b.n	8000f8c <decodeGGA+0x94>
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <decodeGGA+0x17c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <decodeGGA+0x17c>)
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <decodeGGA+0x17c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9a:	d1f2      	bne.n	8000f82 <decodeGGA+0x8a>
	inx++;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <decodeGGA+0x17c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a34      	ldr	r2, [pc, #208]	; (8001074 <decodeGGA+0x17c>)
 8000fa4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000fa6:	e004      	b.n	8000fb2 <decodeGGA+0xba>
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <decodeGGA+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <decodeGGA+0x17c>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <decodeGGA+0x17c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc0:	d1f2      	bne.n	8000fa8 <decodeGGA+0xb0>
	inx++;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <decodeGGA+0x17c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <decodeGGA+0x17c>)
 8000fca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ',' (east/west)
 8000fcc:	e004      	b.n	8000fd8 <decodeGGA+0xe0>
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <decodeGGA+0x17c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <decodeGGA+0x17c>)
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <decodeGGA+0x17c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b2c      	cmp	r3, #44	; 0x2c
 8000fe6:	d1f2      	bne.n	8000fce <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <decodeGGA+0x17c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <decodeGGA+0x17c>)
 8000ff0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <decodeGGA+0x17c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b31      	cmp	r3, #49	; 0x31
 8001000:	d00f      	beq.n	8001022 <decodeGGA+0x12a>
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <decodeGGA+0x17c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b32      	cmp	r3, #50	; 0x32
 8001010:	d007      	beq.n	8001022 <decodeGGA+0x12a>
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b36      	cmp	r3, #54	; 0x36
 8001020:	d106      	bne.n	8001030 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <decodeGGA+0x17c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800102e:	e009      	b.n	8001044 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001036:	2301      	movs	r3, #1
 8001038:	e2e1      	b.n	80015fe <decodeGGA+0x706>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <decodeGGA+0x17c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <decodeGGA+0x17c>)
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <decodeGGA+0x17c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b2c      	cmp	r3, #44	; 0x2c
 8001052:	d1f2      	bne.n	800103a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <decodeGGA+0x17c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <decodeGGA+0x17c>)
 800105c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	220c      	movs	r2, #12
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f005 ff1a 	bl	8006ea0 <memset>
	i=0;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001070:	e016      	b.n	80010a0 <decodeGGA+0x1a8>
 8001072:	bf00      	nop
 8001074:	2000008c 	.word	0x2000008c
	{
		buffer[i] = GGAbuffer[inx];
 8001078:	4b9f      	ldr	r3, [pc, #636]	; (80012f8 <decodeGGA+0x400>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	7819      	ldrb	r1, [r3, #0]
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	4413      	add	r3, r2
 800108c:	460a      	mov	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
		i++;
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	3301      	adds	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001096:	4b98      	ldr	r3, [pc, #608]	; (80012f8 <decodeGGA+0x400>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a96      	ldr	r2, [pc, #600]	; (80012f8 <decodeGGA+0x400>)
 800109e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010a0:	4b95      	ldr	r3, [pc, #596]	; (80012f8 <decodeGGA+0x400>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b2c      	cmp	r3, #44	; 0x2c
 80010ae:	d1e3      	bne.n	8001078 <decodeGGA+0x180>
	}

//	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
	hr = (atoi(buffer)/10000) - 400/100; // hardcoded
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 feb7 	bl	8006e28 <atoi>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a8f      	ldr	r2, [pc, #572]	; (80012fc <decodeGGA+0x404>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1312      	asrs	r2, r2, #12
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	3b04      	subs	r3, #4
 80010ca:	4a8d      	ldr	r2, [pc, #564]	; (8001300 <decodeGGA+0x408>)
 80010cc:	6013      	str	r3, [r2, #0]
//	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
	min = ((atoi(buffer)/100)%100) - 400%100; // hardcoded
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fea8 	bl	8006e28 <atoi>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a8a      	ldr	r2, [pc, #552]	; (8001304 <decodeGGA+0x40c>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1152      	asrs	r2, r2, #5
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	4b87      	ldr	r3, [pc, #540]	; (8001304 <decodeGGA+0x40c>)
 80010e8:	fb83 1302 	smull	r1, r3, r3, r2
 80010ec:	1159      	asrs	r1, r3, #5
 80010ee:	17d3      	asrs	r3, r2, #31
 80010f0:	1acb      	subs	r3, r1, r3
 80010f2:	2164      	movs	r1, #100	; 0x64
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	4a83      	ldr	r2, [pc, #524]	; (8001308 <decodeGGA+0x410>)
 80010fc:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 80010fe:	4b82      	ldr	r3, [pc, #520]	; (8001308 <decodeGGA+0x410>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b3b      	cmp	r3, #59	; 0x3b
 8001104:	dd09      	ble.n	800111a <decodeGGA+0x222>
	{
		min = min-60;
 8001106:	4b80      	ldr	r3, [pc, #512]	; (8001308 <decodeGGA+0x410>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3b3c      	subs	r3, #60	; 0x3c
 800110c:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <decodeGGA+0x410>)
 800110e:	6013      	str	r3, [r2, #0]
		hr++;
 8001110:	4b7b      	ldr	r3, [pc, #492]	; (8001300 <decodeGGA+0x408>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a7a      	ldr	r2, [pc, #488]	; (8001300 <decodeGGA+0x408>)
 8001118:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800111a:	4b79      	ldr	r3, [pc, #484]	; (8001300 <decodeGGA+0x408>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	da09      	bge.n	8001136 <decodeGGA+0x23e>
	{
		hr=24+hr;
 8001122:	4b77      	ldr	r3, [pc, #476]	; (8001300 <decodeGGA+0x408>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3318      	adds	r3, #24
 8001128:	4a75      	ldr	r2, [pc, #468]	; (8001300 <decodeGGA+0x408>)
 800112a:	6013      	str	r3, [r2, #0]
		daychange--;
 800112c:	4b77      	ldr	r3, [pc, #476]	; (800130c <decodeGGA+0x414>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a76      	ldr	r2, [pc, #472]	; (800130c <decodeGGA+0x414>)
 8001134:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <decodeGGA+0x408>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b17      	cmp	r3, #23
 800113c:	dd09      	ble.n	8001152 <decodeGGA+0x25a>
	{
		hr=hr-24;
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <decodeGGA+0x408>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3b18      	subs	r3, #24
 8001144:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <decodeGGA+0x408>)
 8001146:	6013      	str	r3, [r2, #0]
		daychange++;
 8001148:	4b70      	ldr	r3, [pc, #448]	; (800130c <decodeGGA+0x414>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a6f      	ldr	r2, [pc, #444]	; (800130c <decodeGGA+0x414>)
 8001150:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001152:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <decodeGGA+0x408>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 800115a:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <decodeGGA+0x410>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fe5e 	bl	8006e28 <atoi>
 800116c:	4602      	mov	r2, r0
 800116e:	4b65      	ldr	r3, [pc, #404]	; (8001304 <decodeGGA+0x40c>)
 8001170:	fb83 1302 	smull	r1, r3, r3, r2
 8001174:	1159      	asrs	r1, r3, #5
 8001176:	17d3      	asrs	r3, r2, #31
 8001178:	1acb      	subs	r3, r1, r3
 800117a:	2164      	movs	r1, #100	; 0x64
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <decodeGGA+0x400>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <decodeGGA+0x400>)
 800118e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	220c      	movs	r2, #12
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fe81 	bl	8006ea0 <memset>
	i=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80011a2:	e013      	b.n	80011cc <decodeGGA+0x2d4>
	{
		buffer[i] = GGAbuffer[inx];
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <decodeGGA+0x400>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f107 020c 	add.w	r2, r7, #12
 80011b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
		i++;
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	3301      	adds	r3, #1
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <decodeGGA+0x400>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <decodeGGA+0x400>)
 80011ca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80011cc:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <decodeGGA+0x400>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b2c      	cmp	r3, #44	; 0x2c
 80011da:	d1e3      	bne.n	80011a4 <decodeGGA+0x2ac>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7fe fff9 	bl	80001d8 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d801      	bhi.n	80011f0 <decodeGGA+0x2f8>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e206      	b.n	80015fe <decodeGGA+0x706>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f005 fe17 	bl	8006e28 <atoi>
 80011fa:	4603      	mov	r3, r0
 80011fc:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001202:	e002      	b.n	800120a <decodeGGA+0x312>
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	3301      	adds	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b2e      	cmp	r3, #46	; 0x2e
 8001216:	d1f5      	bne.n	8001204 <decodeGGA+0x30c>
	j++;
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	3301      	adds	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4618      	mov	r0, r3
 8001224:	f7fe ffd8 	bl	80001d8 <strlen>
 8001228:	4602      	mov	r2, r0
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	4413      	add	r3, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f005 fdf5 	bl	8006e28 <atoi>
 800123e:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001240:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f921 	bl	800048c <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <decodeGGA+0x418>)
 8001250:	f7ff fab0 	bl	80007b4 <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4690      	mov	r8, r2
 800125a:	4699      	mov	r9, r3
 800125c:	69f8      	ldr	r0, [r7, #28]
 800125e:	f7ff f915 	bl	800048c <__aeabi_i2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	3302      	adds	r3, #2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f90e 	bl	800048c <__aeabi_i2d>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	ec43 2b11 	vmov	d1, r2, r3
 8001278:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 80012f0 <decodeGGA+0x3f8>
 800127c:	f006 fa22 	bl	80076c4 <pow>
 8001280:	ec53 2b10 	vmov	r2, r3, d0
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff fa94 	bl	80007b4 <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4640      	mov	r0, r8
 8001292:	4649      	mov	r1, r9
 8001294:	f7fe ffae 	bl	80001f4 <__adddf3>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc56 	bl	8000b50 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	601a      	str	r2, [r3, #0]
	inx++;  
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <decodeGGA+0x400>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <decodeGGA+0x400>)
 80012b6:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <decodeGGA+0x400>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <decodeGGA+0x400>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <decodeGGA+0x400>)
 80012d0:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <decodeGGA+0x400>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <decodeGGA+0x400>)
 80012da:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	220c      	movs	r2, #12
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 fddb 	bl	8006ea0 <memset>
	i=0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80012ee:	e025      	b.n	800133c <decodeGGA+0x444>
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40240000 	.word	0x40240000
 80012f8:	2000008c 	.word	0x2000008c
 80012fc:	68db8bad 	.word	0x68db8bad
 8001300:	20000090 	.word	0x20000090
 8001304:	51eb851f 	.word	0x51eb851f
 8001308:	20000094 	.word	0x20000094
 800130c:	200000a4 	.word	0x200000a4
 8001310:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8001314:	4b8a      	ldr	r3, [pc, #552]	; (8001540 <decodeGGA+0x648>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	f107 020c 	add.w	r2, r7, #12
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	4413      	add	r3, r2
 8001328:	460a      	mov	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
		i++;
 800132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132e:	3301      	adds	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001332:	4b83      	ldr	r3, [pc, #524]	; (8001540 <decodeGGA+0x648>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a81      	ldr	r2, [pc, #516]	; (8001540 <decodeGGA+0x648>)
 800133a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800133c:	4b80      	ldr	r3, [pc, #512]	; (8001540 <decodeGGA+0x648>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b2c      	cmp	r3, #44	; 0x2c
 800134a:	d1e3      	bne.n	8001314 <decodeGGA+0x41c>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4618      	mov	r0, r3
 8001352:	f005 fd69 	bl	8006e28 <atoi>
 8001356:	4603      	mov	r3, r0
 8001358:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800135e:	e002      	b.n	8001366 <decodeGGA+0x46e>
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	3301      	adds	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
 8001366:	f107 020c 	add.w	r2, r7, #12
 800136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b2e      	cmp	r3, #46	; 0x2e
 8001372:	d1f5      	bne.n	8001360 <decodeGGA+0x468>
	j++;
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	3301      	adds	r3, #1
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff2a 	bl	80001d8 <strlen>
 8001384:	4602      	mov	r2, r0
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	4413      	add	r3, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fd47 	bl	8006e28 <atoi>
 800139a:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800139c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f873 	bl	800048c <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <decodeGGA+0x64c>)
 80013ac:	f7ff fa02 	bl	80007b4 <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4690      	mov	r8, r2
 80013b6:	4699      	mov	r9, r3
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	f7ff f867 	bl	800048c <__aeabi_i2d>
 80013be:	4604      	mov	r4, r0
 80013c0:	460d      	mov	r5, r1
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	3302      	adds	r3, #2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f860 	bl	800048c <__aeabi_i2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b11 	vmov	d1, r2, r3
 80013d4:	ed9f 0b58 	vldr	d0, [pc, #352]	; 8001538 <decodeGGA+0x640>
 80013d8:	f006 f974 	bl	80076c4 <pow>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f9e6 	bl	80007b4 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7fe ff00 	bl	80001f4 <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fba8 	bl	8000b50 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]
	inx++;
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <decodeGGA+0x648>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <decodeGGA+0x648>)
 8001412:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <decodeGGA+0x648>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <decodeGGA+0x648>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a45      	ldr	r2, [pc, #276]	; (8001540 <decodeGGA+0x648>)
 800142c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <decodeGGA+0x648>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a42      	ldr	r2, [pc, #264]	; (8001540 <decodeGGA+0x648>)
 8001436:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001438:	4b41      	ldr	r3, [pc, #260]	; (8001540 <decodeGGA+0x648>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a40      	ldr	r2, [pc, #256]	; (8001540 <decodeGGA+0x648>)
 8001440:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <decodeGGA+0x648>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a3d      	ldr	r2, [pc, #244]	; (8001540 <decodeGGA+0x648>)
 800144a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	220c      	movs	r2, #12
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fd23 	bl	8006ea0 <memset>
	i=0;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800145e:	e013      	b.n	8001488 <decodeGGA+0x590>
	{
		buffer[i] = GGAbuffer[inx];
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <decodeGGA+0x648>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	7819      	ldrb	r1, [r3, #0]
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	4413      	add	r3, r2
 8001474:	460a      	mov	r2, r1
 8001476:	701a      	strb	r2, [r3, #0]
		i++;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	3301      	adds	r3, #1
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <decodeGGA+0x648>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <decodeGGA+0x648>)
 8001486:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <decodeGGA+0x648>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b2c      	cmp	r3, #44	; 0x2c
 8001496:	d1e3      	bne.n	8001460 <decodeGGA+0x568>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fcc3 	bl	8006e28 <atoi>
 80014a2:	4602      	mov	r2, r0
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <decodeGGA+0x648>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <decodeGGA+0x648>)
 80014b0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80014b2:	e004      	b.n	80014be <decodeGGA+0x5c6>
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <decodeGGA+0x648>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <decodeGGA+0x648>)
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <decodeGGA+0x648>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b2c      	cmp	r3, #44	; 0x2c
 80014cc:	d1f2      	bne.n	80014b4 <decodeGGA+0x5bc>


	/*************** Altitude calculation ********************/
	inx++;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <decodeGGA+0x648>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <decodeGGA+0x648>)
 80014d6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	220c      	movs	r2, #12
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f005 fcdd 	bl	8006ea0 <memset>
	i=0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80014ea:	e013      	b.n	8001514 <decodeGGA+0x61c>
	{
		buffer[i] = GGAbuffer[inx];
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <decodeGGA+0x648>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	7819      	ldrb	r1, [r3, #0]
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
		i++;
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	3301      	adds	r3, #1
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <decodeGGA+0x648>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <decodeGGA+0x648>)
 8001512:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <decodeGGA+0x648>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b2c      	cmp	r3, #44	; 0x2c
 8001522:	d1e3      	bne.n	80014ec <decodeGGA+0x5f4>
	}
	num = (atoi(buffer));
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fc7d 	bl	8006e28 <atoi>
 800152e:	4603      	mov	r3, r0
 8001530:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001536:	e00a      	b.n	800154e <decodeGGA+0x656>
 8001538:	00000000 	.word	0x00000000
 800153c:	40240000 	.word	0x40240000
 8001540:	2000008c 	.word	0x2000008c
 8001544:	40590000 	.word	0x40590000
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	3301      	adds	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b2e      	cmp	r3, #46	; 0x2e
 800155a:	d1f5      	bne.n	8001548 <decodeGGA+0x650>
	j++;
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	3301      	adds	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe36 	bl	80001d8 <strlen>
 800156c:	4602      	mov	r2, r0
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	4413      	add	r3, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fc53 	bl	8006e28 <atoi>
 8001582:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001584:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff7f 	bl	800048c <__aeabi_i2d>
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f7fe ff7a 	bl	800048c <__aeabi_i2d>
 8001598:	4680      	mov	r8, r0
 800159a:	4689      	mov	r9, r1
 800159c:	6a38      	ldr	r0, [r7, #32]
 800159e:	f7fe ff75 	bl	800048c <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	ec43 2b11 	vmov	d1, r2, r3
 80015aa:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001608 <decodeGGA+0x710>
 80015ae:	f006 f889 	bl	80076c4 <pow>
 80015b2:	ec53 2b10 	vmov	r2, r3, d0
 80015b6:	4640      	mov	r0, r8
 80015b8:	4649      	mov	r1, r9
 80015ba:	f7ff f8fb 	bl	80007b4 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fe15 	bl	80001f4 <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fabd 	bl	8000b50 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	621a      	str	r2, [r3, #32]

	inx++;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <decodeGGA+0x718>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <decodeGGA+0x718>)
 80015e8:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <decodeGGA+0x718>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80015fc:	2300      	movs	r3, #0

}
 80015fe:	4618      	mov	r0, r3
 8001600:	3730      	adds	r7, #48	; 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001608:	00000000 	.word	0x00000000
 800160c:	40240000 	.word	0x40240000
 8001610:	2000008c 	.word	0x2000008c
 8001614:	00000000 	.word	0x00000000

08001618 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800161c:	b090      	sub	sp, #64	; 0x40
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001624:	4b94      	ldr	r3, [pc, #592]	; (8001878 <decodeRMC+0x260>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800162e:	e004      	b.n	800163a <decodeRMC+0x22>
 8001630:	4b91      	ldr	r3, [pc, #580]	; (8001878 <decodeRMC+0x260>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a90      	ldr	r2, [pc, #576]	; (8001878 <decodeRMC+0x260>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b8f      	ldr	r3, [pc, #572]	; (8001878 <decodeRMC+0x260>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b2c      	cmp	r3, #44	; 0x2c
 8001648:	d1f2      	bne.n	8001630 <decodeRMC+0x18>
	inx++;
 800164a:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <decodeRMC+0x260>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	4a89      	ldr	r2, [pc, #548]	; (8001878 <decodeRMC+0x260>)
 8001652:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001654:	e004      	b.n	8001660 <decodeRMC+0x48>
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <decodeRMC+0x260>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a86      	ldr	r2, [pc, #536]	; (8001878 <decodeRMC+0x260>)
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b85      	ldr	r3, [pc, #532]	; (8001878 <decodeRMC+0x260>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b2c      	cmp	r3, #44	; 0x2c
 800166e:	d1f2      	bne.n	8001656 <decodeRMC+0x3e>
	inx++;
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <decodeRMC+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <decodeRMC+0x260>)
 8001678:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <decodeRMC+0x260>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b41      	cmp	r3, #65	; 0x41
 8001688:	d10d      	bne.n	80016a6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <decodeRMC+0x260>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a78      	ldr	r2, [pc, #480]	; (8001878 <decodeRMC+0x260>)
 8001698:	6013      	str	r3, [r2, #0]
	inx++;
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <decodeRMC+0x260>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a75      	ldr	r2, [pc, #468]	; (8001878 <decodeRMC+0x260>)
 80016a2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80016a4:	e009      	b.n	80016ba <decodeRMC+0xa2>
		rmc->isValid =0;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
		return 1;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e1d8      	b.n	8001a62 <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80016b0:	4b71      	ldr	r3, [pc, #452]	; (8001878 <decodeRMC+0x260>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a70      	ldr	r2, [pc, #448]	; (8001878 <decodeRMC+0x260>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <decodeRMC+0x260>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b2c      	cmp	r3, #44	; 0x2c
 80016c8:	d1f2      	bne.n	80016b0 <decodeRMC+0x98>
	inx++;
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <decodeRMC+0x260>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a69      	ldr	r2, [pc, #420]	; (8001878 <decodeRMC+0x260>)
 80016d2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80016d4:	e004      	b.n	80016e0 <decodeRMC+0xc8>
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <decodeRMC+0x260>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a66      	ldr	r2, [pc, #408]	; (8001878 <decodeRMC+0x260>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <decodeRMC+0x260>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b2c      	cmp	r3, #44	; 0x2c
 80016ee:	d1f2      	bne.n	80016d6 <decodeRMC+0xbe>
	inx++;
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <decodeRMC+0x260>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	4a60      	ldr	r2, [pc, #384]	; (8001878 <decodeRMC+0x260>)
 80016f8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80016fa:	e004      	b.n	8001706 <decodeRMC+0xee>
 80016fc:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <decodeRMC+0x260>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	4a5d      	ldr	r2, [pc, #372]	; (8001878 <decodeRMC+0x260>)
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <decodeRMC+0x260>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b2c      	cmp	r3, #44	; 0x2c
 8001714:	d1f2      	bne.n	80016fc <decodeRMC+0xe4>
	inx++;
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <decodeRMC+0x260>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a56      	ldr	r2, [pc, #344]	; (8001878 <decodeRMC+0x260>)
 800171e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001720:	e004      	b.n	800172c <decodeRMC+0x114>
 8001722:	4b55      	ldr	r3, [pc, #340]	; (8001878 <decodeRMC+0x260>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a53      	ldr	r2, [pc, #332]	; (8001878 <decodeRMC+0x260>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b52      	ldr	r3, [pc, #328]	; (8001878 <decodeRMC+0x260>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b2c      	cmp	r3, #44	; 0x2c
 800173a:	d1f2      	bne.n	8001722 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800173c:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <decodeRMC+0x260>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <decodeRMC+0x260>)
 8001744:	6013      	str	r3, [r2, #0]
	i=0;
 8001746:	2300      	movs	r3, #0
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	220c      	movs	r2, #12
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fba4 	bl	8006ea0 <memset>
	while (RMCbuffer[inx] != ',')
 8001758:	e013      	b.n	8001782 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <decodeRMC+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	7819      	ldrb	r1, [r3, #0]
 8001766:	f107 0208 	add.w	r2, r7, #8
 800176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176c:	4413      	add	r3, r2
 800176e:	460a      	mov	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
		i++;
 8001772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001774:	3301      	adds	r3, #1
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <decodeRMC+0x260>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <decodeRMC+0x260>)
 8001780:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <decodeRMC+0x260>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b2c      	cmp	r3, #44	; 0x2c
 8001790:	d1e3      	bne.n	800175a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d056      	beq.n	800184a <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fb41 	bl	8006e28 <atoi>
 80017a6:	4603      	mov	r3, r0
 80017a8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80017ae:	e002      	b.n	80017b6 <decodeRMC+0x19e>
 80017b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b2:	3301      	adds	r3, #1
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b6:	f107 0208 	add.w	r2, r7, #8
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b2e      	cmp	r3, #46	; 0x2e
 80017c2:	d1f5      	bne.n	80017b0 <decodeRMC+0x198>
		j++;
 80017c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c6:	3301      	adds	r3, #1
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd02 	bl	80001d8 <strlen>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80017dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	4413      	add	r3, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fb1f 	bl	8006e28 <atoi>
 80017ea:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 80017ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe4b 	bl	800048c <__aeabi_i2d>
 80017f6:	4604      	mov	r4, r0
 80017f8:	460d      	mov	r5, r1
 80017fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017fc:	f7fe fe46 	bl	800048c <__aeabi_i2d>
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001806:	f7fe fe41 	bl	800048c <__aeabi_i2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ec43 2b11 	vmov	d1, r2, r3
 8001812:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001870 <decodeRMC+0x258>
 8001816:	f005 ff55 	bl	80076c4 <pow>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	4640      	mov	r0, r8
 8001820:	4649      	mov	r1, r9
 8001822:	f7fe ffc7 	bl	80007b4 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fce1 	bl	80001f4 <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f989 	bl	8000b50 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	e003      	b.n	8001852 <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <decodeRMC+0x260>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <decodeRMC+0x260>)
 800185a:	6013      	str	r3, [r2, #0]
	i=0;
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	220c      	movs	r2, #12
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fb19 	bl	8006ea0 <memset>
	while (RMCbuffer[inx] != ',')
 800186e:	e019      	b.n	80018a4 <decodeRMC+0x28c>
 8001870:	00000000 	.word	0x00000000
 8001874:	40240000 	.word	0x40240000
 8001878:	2000008c 	.word	0x2000008c
	{
		buffer[i] = RMCbuffer[inx];
 800187c:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <decodeRMC+0x460>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	7819      	ldrb	r1, [r3, #0]
 8001888:	f107 0208 	add.w	r2, r7, #8
 800188c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188e:	4413      	add	r3, r2
 8001890:	460a      	mov	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
		i++;
 8001894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001896:	3301      	adds	r3, #1
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 800189a:	4b77      	ldr	r3, [pc, #476]	; (8001a78 <decodeRMC+0x460>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <decodeRMC+0x460>)
 80018a2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018a4:	4b74      	ldr	r3, [pc, #464]	; (8001a78 <decodeRMC+0x460>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b2c      	cmp	r3, #44	; 0x2c
 80018b2:	d1e3      	bne.n	800187c <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d056      	beq.n	800196c <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fab0 	bl	8006e28 <atoi>
 80018c8:	4603      	mov	r3, r0
 80018ca:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80018d0:	e002      	b.n	80018d8 <decodeRMC+0x2c0>
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	3301      	adds	r3, #1
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
 80018d8:	f107 0208 	add.w	r2, r7, #8
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b2e      	cmp	r3, #46	; 0x2e
 80018e4:	d1f5      	bne.n	80018d2 <decodeRMC+0x2ba>
		j++;
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	3301      	adds	r3, #1
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc71 	bl	80001d8 <strlen>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80018fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001900:	f107 0208 	add.w	r2, r7, #8
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f005 fa8e 	bl	8006e28 <atoi>
 800190c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800190e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fdba 	bl	800048c <__aeabi_i2d>
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
 800191c:	69b8      	ldr	r0, [r7, #24]
 800191e:	f7fe fdb5 	bl	800048c <__aeabi_i2d>
 8001922:	4680      	mov	r8, r0
 8001924:	4689      	mov	r9, r1
 8001926:	69f8      	ldr	r0, [r7, #28]
 8001928:	f7fe fdb0 	bl	800048c <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	ec43 2b11 	vmov	d1, r2, r3
 8001934:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001a70 <decodeRMC+0x458>
 8001938:	f005 fec4 	bl	80076c4 <pow>
 800193c:	ec53 2b10 	vmov	r2, r3, d0
 8001940:	4640      	mov	r0, r8
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe ff36 	bl	80007b4 <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fc50 	bl	80001f4 <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8f8 	bl	8000b50 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	e003      	b.n	8001974 <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001974:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <decodeRMC+0x460>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <decodeRMC+0x460>)
 800197c:	6013      	str	r3, [r2, #0]
	i=0;
 800197e:	2300      	movs	r3, #0
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	220c      	movs	r2, #12
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f005 fa88 	bl	8006ea0 <memset>
	while (RMCbuffer[inx] != ',')
 8001990:	e013      	b.n	80019ba <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <decodeRMC+0x460>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	f107 0208 	add.w	r2, r7, #8
 80019a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a4:	4413      	add	r3, r2
 80019a6:	460a      	mov	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
		i++;
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	3301      	adds	r3, #1
 80019ae:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <decodeRMC+0x460>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <decodeRMC+0x460>)
 80019b8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <decodeRMC+0x460>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b2c      	cmp	r3, #44	; 0x2c
 80019c8:	d1e3      	bne.n	8001992 <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4618      	mov	r0, r3
 80019d0:	f005 fa2a 	bl	8006e28 <atoi>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <decodeRMC+0x464>)
 80019d8:	fb82 1203 	smull	r1, r2, r2, r3
 80019dc:	1312      	asrs	r2, r2, #12
 80019de:	17db      	asrs	r3, r3, #31
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <decodeRMC+0x468>)
 80019e4:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fa1c 	bl	8006e28 <atoi>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <decodeRMC+0x46c>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	1152      	asrs	r2, r2, #5
 80019fa:	17db      	asrs	r3, r3, #31
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <decodeRMC+0x46c>)
 8001a00:	fb83 1302 	smull	r1, r3, r3, r2
 8001a04:	1159      	asrs	r1, r3, #5
 8001a06:	17d3      	asrs	r3, r2, #31
 8001a08:	1acb      	subs	r3, r1, r3
 8001a0a:	2164      	movs	r1, #100	; 0x64
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <decodeRMC+0x470>)
 8001a14:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fa04 	bl	8006e28 <atoi>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <decodeRMC+0x46c>)
 8001a24:	fb83 1302 	smull	r1, r3, r3, r2
 8001a28:	1159      	asrs	r1, r3, #5
 8001a2a:	17d3      	asrs	r3, r2, #31
 8001a2c:	1acb      	subs	r3, r1, r3
 8001a2e:	2164      	movs	r1, #100	; 0x64
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <decodeRMC+0x474>)
 8001a38:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <decodeRMC+0x468>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <decodeRMC+0x478>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <decodeRMC+0x468>)
 8001a46:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <decodeRMC+0x468>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <decodeRMC+0x470>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <decodeRMC+0x474>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	609a      	str	r2, [r3, #8]

	return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3740      	adds	r7, #64	; 0x40
 8001a66:	46bd      	mov	sp, r7
 8001a68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a6c:	f3af 8000 	nop.w
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40240000 	.word	0x40240000
 8001a78:	2000008c 	.word	0x2000008c
 8001a7c:	68db8bad 	.word	0x68db8bad
 8001a80:	20000098 	.word	0x20000098
 8001a84:	51eb851f 	.word	0x51eb851f
 8001a88:	2000009c 	.word	0x2000009c
 8001a8c:	200000a0 	.word	0x200000a0
 8001a90:	200000a4 	.word	0x200000a4

08001a94 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <Ringbuf_init+0x3c>)
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <Ringbuf_init+0x40>)
 8001a9c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <Ringbuf_init+0x44>)
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <Ringbuf_init+0x48>)
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <Ringbuf_init+0x4c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <Ringbuf_init+0x4c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <Ringbuf_init+0x4c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <Ringbuf_init+0x4c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200004bc 	.word	0x200004bc
 8001ad4:	200000ac 	.word	0x200000ac
 8001ad8:	200004c0 	.word	0x200004c0
 8001adc:	200002b4 	.word	0x200002b4
 8001ae0:	200004e8 	.word	0x200004e8

08001ae4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afc:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d009      	beq.n	8001b1e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	79f9      	ldrb	r1, [r7, #7]
 8001b14:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <Uart_read+0x54>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <Uart_read+0x54>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d102      	bne.n	8001b4c <Uart_read+0x20>
  {
    return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	e013      	b.n	8001b74 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <Uart_read+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <Uart_read+0x54>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <Uart_read+0x54>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <Uart_read+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	200004bc 	.word	0x200004bc

08001b84 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <IsDataAvailable+0x30>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <IsDataAvailable+0x30>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  // checking the character that's at [buf_size + head - tail] positions
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	200004bc 	.word	0x200004bc

08001bb8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <Uart_peek+0x38>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <Uart_peek+0x38>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d102      	bne.n	8001bd6 <Uart_peek+0x1e>
  {
    return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e006      	b.n	8001be4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <Uart_peek+0x38>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <Uart_peek+0x38>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200004bc 	.word	0x200004bc

08001bf4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
//	int len = strlen(string) ;
//	int len = sizeof (string) ;
	int len = 1; // WORKS!
 8001c02:	2301      	movs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001c0a:	e01e      	b.n	8001c4a <Copy_upto+0x56>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <Copy_upto+0xf0>)
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <Copy_upto+0xf0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6838      	ldr	r0, [r7, #0]
 8001c1c:	4403      	add	r3, r0
 8001c1e:	5c8a      	ldrb	r2, [r1, r2]
 8001c20:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <Copy_upto+0xf0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <Copy_upto+0xf0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffa0 	bl	8001b84 <IsDataAvailable>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0fa      	beq.n	8001c40 <Copy_upto+0x4c>
	while (Uart_peek() != string[so_far])
 8001c4a:	f7ff ffb5 	bl	8001bb8 <Uart_peek>
 8001c4e:	4601      	mov	r1, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4299      	cmp	r1, r3
 8001c5a:	d1d7      	bne.n	8001c0c <Copy_upto+0x18>

		}
	while (Uart_peek() == string [so_far])
 8001c5c:	e027      	b.n	8001cae <Copy_upto+0xba>
	{
		so_far++;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001c64:	f7ff ff62 	bl	8001b2c <Uart_read>
 8001c68:	4601      	mov	r1, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	613a      	str	r2, [r7, #16]
 8001c70:	461a      	mov	r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d101      	bne.n	8001c86 <Copy_upto+0x92>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e02a      	b.n	8001cdc <Copy_upto+0xe8>
		timeout = TIMEOUT_DEF;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <Copy_upto+0xf4>)
 8001c88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c8c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001c8e:	bf00      	nop
 8001c90:	f7ff ff78 	bl	8001b84 <IsDataAvailable>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <Copy_upto+0xae>
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <Copy_upto+0xf4>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f6      	bne.n	8001c90 <Copy_upto+0x9c>
		if (timeout == 0) return 0;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <Copy_upto+0xf4>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <Copy_upto+0xba>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e016      	b.n	8001cdc <Copy_upto+0xe8>
	while (Uart_peek() == string [so_far])
 8001cae:	f7ff ff83 	bl	8001bb8 <Uart_peek>
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d0ce      	beq.n	8001c5e <Copy_upto+0x6a>
	}

	if (so_far != len)
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d002      	beq.n	8001cce <Copy_upto+0xda>
	{
		so_far = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
		goto again;
 8001ccc:	e79d      	b.n	8001c0a <Copy_upto+0x16>
	}

	if (so_far == len) return 1;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d101      	bne.n	8001cda <Copy_upto+0xe6>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <Copy_upto+0xe8>
	else return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200004bc 	.word	0x200004bc
 8001ce8:	200000a8 	.word	0x200000a8

08001cec <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7fe fa6d 	bl	80001d8 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <Wait_for+0x108>)
 8001d04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d08:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ff3a 	bl	8001b84 <IsDataAvailable>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <Wait_for+0x32>
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <Wait_for+0x108>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f6      	bne.n	8001d0c <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <Wait_for+0x108>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d119      	bne.n	8001d5a <Wait_for+0x6e>
 8001d26:	2300      	movs	r3, #0
 8001d28:	e060      	b.n	8001dec <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <Wait_for+0x10c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <Wait_for+0x10c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d00b      	beq.n	8001d56 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <Wait_for+0x10c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <Wait_for+0x10c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d54:	e001      	b.n	8001d5a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e048      	b.n	8001dec <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001d5a:	f7ff ff2d 	bl	8001bb8 <Uart_peek>
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4299      	cmp	r1, r3
 8001d6a:	d1de      	bne.n	8001d2a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001d6c:	e027      	b.n	8001dbe <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <Wait_for+0x10c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <Wait_for+0x10c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d101      	bne.n	8001d96 <Wait_for+0xaa>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e02a      	b.n	8001dec <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <Wait_for+0x108>)
 8001d98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d9c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001d9e:	bf00      	nop
 8001da0:	f7ff fef0 	bl	8001b84 <IsDataAvailable>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <Wait_for+0xc6>
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <Wait_for+0x108>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f6      	bne.n	8001da0 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <Wait_for+0x108>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <Wait_for+0xd2>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e016      	b.n	8001dec <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001dbe:	f7ff fefb 	bl	8001bb8 <Uart_peek>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4299      	cmp	r1, r3
 8001dce:	d0ce      	beq.n	8001d6e <Wait_for+0x82>
	}

	if (so_far != len)
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d002      	beq.n	8001dde <Wait_for+0xf2>
	{
		so_far = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
		goto again;
 8001ddc:	e791      	b.n	8001d02 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d101      	bne.n	8001dea <Wait_for+0xfe>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <Wait_for+0x100>
	else return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200000a8 	.word	0x200000a8
 8001df8:	200004bc 	.word	0x200004bc

08001dfc <Uart_isr>:


/* corrected version from May 6, 2023 */
void Uart_isr (UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    /* if DR is not empty and the Rx Int is enabled */
    if ((((&huart1)->Instance->ISR & USART_ISR_RXNE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <Uart_isr+0xc4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <Uart_isr+0x44>
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <Uart_isr+0xc4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00f      	beq.n	8001e40 <Uart_isr+0x44>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	75fb      	strb	r3, [r7, #23]
        store_char (c, _rx_buffer);  // store data in buffer
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <Uart_isr+0xc8>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe53 	bl	8001ae4 <store_char>
        return;
 8001e3e:	e03b      	b.n	8001eb8 <Uart_isr+0xbc>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((((&huart1)->Instance->ISR & USART_ISR_TXE) != RESET) && (((&huart1)->Instance->CR1 & USART_CR1_TXEIE) != RESET))
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <Uart_isr+0xc4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d034      	beq.n	8001eb8 <Uart_isr+0xbc>
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <Uart_isr+0xc4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02d      	beq.n	8001eb8 <Uart_isr+0xbc>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <Uart_isr+0xcc>)
 8001e5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <Uart_isr+0xcc>)
 8001e64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d108      	bne.n	8001e7e <Uart_isr+0x82>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7a:	601a      	str	r2, [r3, #0]
    	      /* try explicitly calling huart2 */
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
    	      (&huart1)->Instance->TDR = c; // transmit data register

    	    }
    	return;
 8001e7c:	e01b      	b.n	8001eb6 <Uart_isr+0xba>
    		  volatile unsigned int tail_test = tx_buffer.tail;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <Uart_isr+0xcc>)
 8001e80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e84:	613b      	str	r3, [r7, #16]
    		  volatile uint16_t c = tx_buffer.buffer[tx_buffer.tail]; // prevent optimized away
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <Uart_isr+0xcc>)
 8001e88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <Uart_isr+0xcc>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	81fb      	strh	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE; // increment tail value of tx_buffer
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <Uart_isr+0xcc>)
 8001e96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <Uart_isr+0xcc>)
 8001ea2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      (&huart1)->Instance->ISR; // ?? dont't know why this is needed
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <Uart_isr+0xc4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69db      	ldr	r3, [r3, #28]
    	      (&huart1)->Instance->TDR = c; // transmit data register
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <Uart_isr+0xc4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	89fa      	ldrh	r2, [r7, #14]
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 8001eb6:	bf00      	nop
    }
}
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200004e8 	.word	0x200004e8
 8001ec4:	200004bc 	.word	0x200004bc
 8001ec8:	200002b4 	.word	0x200002b4
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <get_dynamical_diff_sh1>:
    };
 					

/* Stephenson and Houlden  for years prior to 948 A.D.*/
static double get_dynamical_diff_sh1 (double JD)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	ed87 0b00 	vstr	d0, [r7]
    double TD,E;
    
    /* number of centuries from 948 */
    E = (JD - 2067314.5) / 36525.0;
 8001eda:	a326      	add	r3, pc, #152	; (adr r3, 8001f74 <get_dynamical_diff_sh1+0xa4>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee4:	f7fe f984 	bl	80001f0 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	a322      	add	r3, pc, #136	; (adr r3, 8001f7c <get_dynamical_diff_sh1+0xac>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fc5d 	bl	80007b4 <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 1830.0 - 405.0 * E + 46.5 * E * E;
 8001f02:	a320      	add	r3, pc, #128	; (adr r3, 8001f84 <get_dynamical_diff_sh1+0xb4>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f0c:	f7fe fb28 	bl	8000560 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	a11d      	add	r1, pc, #116	; (adr r1, 8001f8c <get_dynamical_diff_sh1+0xbc>)
 8001f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f1a:	f7fe f969 	bl	80001f0 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	461d      	mov	r5, r3
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <get_dynamical_diff_sh1+0xa0>)
 8001f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f30:	f7fe fb16 	bl	8000560 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f40:	f7fe fb0e 	bl	8000560 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f7fe f952 	bl	80001f4 <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (TD);
 8001f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f60:	eeb0 0a47 	vmov.f32	s0, s14
 8001f64:	eef0 0a67 	vmov.f32	s1, s15
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40474000 	.word	0x40474000
 8001f74:	80000000 	.word	0x80000000
 8001f78:	413f8b72 	.word	0x413f8b72
 8001f7c:	00000000 	.word	0x00000000
 8001f80:	40e1d5a0 	.word	0x40e1d5a0
 8001f84:	00000000 	.word	0x00000000
 8001f88:	40795000 	.word	0x40795000
 8001f8c:	00000000 	.word	0x00000000
 8001f90:	409c9800 	.word	0x409c9800
 8001f94:	00000000 	.word	0x00000000

08001f98 <get_dynamical_diff_sh2>:

/* Stephenson and Houlden for years between 948 A.D. and 1600 A.D.*/
static double get_dynamical_diff_sh2 (double JD)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	ed87 0b00 	vstr	d0, [r7]
    double TD,t;
    
    /* number of centuries from 1850 */
    t = (JD - 2396758.5) / 36525.0;
 8001fa2:	a31a      	add	r3, pc, #104	; (adr r3, 800200c <get_dynamical_diff_sh2+0x74>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fac:	f7fe f920 	bl	80001f0 <__aeabi_dsub>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	a316      	add	r3, pc, #88	; (adr r3, 8002014 <get_dynamical_diff_sh2+0x7c>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fbf9 	bl	80007b4 <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    TD = 22.5 * t * t;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <get_dynamical_diff_sh2+0x70>)
 8001fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fd4:	f7fe fac4 	bl	8000560 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fe0:	f7fe fabe 	bl	8000560 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return TD;
 8001fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff8:	eef0 0a67 	vmov.f32	s1, s15
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	f3af 8000 	nop.w
 8002008:	40368000 	.word	0x40368000
 800200c:	40000000 	.word	0x40000000
 8002010:	4142492b 	.word	0x4142492b
 8002014:	00000000 	.word	0x00000000
 8002018:	40e1d5a0 	.word	0x40e1d5a0
 800201c:	00000000 	.word	0x00000000

08002020 <get_dynamical_diff_table>:

/* Table 9.a pg 72 for years 1600..1992.*/
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_table (double JD)
{
 8002020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002024:	b08e      	sub	sp, #56	; 0x38
 8002026:	af00      	add	r7, sp, #0
 8002028:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double a,b,c,n;
    int i;
    
    /* get no days since 1620 and divide by 2 years */
    i = (int)((JD - 2312752.5) / 730.5);
 8002038:	a35d      	add	r3, pc, #372	; (adr r3, 80021b0 <get_dynamical_diff_table+0x190>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002042:	f7fe f8d5 	bl	80001f0 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	a356      	add	r3, pc, #344	; (adr r3, 80021a8 <get_dynamical_diff_table+0x188>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fbae 	bl	80007b4 <__aeabi_ddiv>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fd2e 	bl	8000ac0 <__aeabi_d2iz>
 8002064:	4603      	mov	r3, r0
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
    
    /* get the base interpolation factor in the table */
    if (i > (TERMS - 2))
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	2bbe      	cmp	r3, #190	; 0xbe
 800206c:	dd01      	ble.n	8002072 <get_dynamical_diff_table+0x52>
        i = TERMS - 2;
 800206e:	23be      	movs	r3, #190	; 0xbe
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* calc a,b,c,n */
	a = delta_t[i+1] - delta_t[i];
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	3301      	adds	r3, #1
 8002076:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <get_dynamical_diff_table+0x198>)
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002080:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <get_dynamical_diff_table+0x198>)
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe f8b0 	bl	80001f0 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	e9c7 2308 	strd	r2, r3, [r7, #32]
	b = delta_t[i+2] - delta_t[i+1];
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	3302      	adds	r3, #2
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <get_dynamical_diff_table+0x198>)
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a43      	ldr	r2, [pc, #268]	; (80021b8 <get_dynamical_diff_table+0x198>)
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe f89c 	bl	80001f0 <__aeabi_dsub>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	c = a - b;
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020c8:	f7fe f892 	bl	80001f0 <__aeabi_dsub>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	n = ((JD - (2312752.5 + (730.5 * i))) / 730.5);
 80020d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020d6:	f7fe f9d9 	bl	800048c <__aeabi_i2d>
 80020da:	a333      	add	r3, pc, #204	; (adr r3, 80021a8 <get_dynamical_diff_table+0x188>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe fa3e 	bl	8000560 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	a330      	add	r3, pc, #192	; (adr r3, 80021b0 <get_dynamical_diff_table+0x190>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe f87f 	bl	80001f4 <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fe:	f7fe f877 	bl	80001f0 <__aeabi_dsub>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	a327      	add	r3, pc, #156	; (adr r3, 80021a8 <get_dynamical_diff_table+0x188>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe fb50 	bl	80007b4 <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	TD = delta_t[i+1] + n / 2 * (a + b + n * c);
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	3301      	adds	r3, #1
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <get_dynamical_diff_table+0x198>)
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	e9d3 4500 	ldrd	r4, r5, [r3]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002136:	f7fe fb3d 	bl	80007b4 <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002146:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800214a:	f7fe f853 	bl	80001f4 <__adddf3>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4692      	mov	sl, r2
 8002154:	469b      	mov	fp, r3
 8002156:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800215e:	f7fe f9ff 	bl	8000560 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4650      	mov	r0, sl
 8002168:	4659      	mov	r1, fp
 800216a:	f7fe f843 	bl	80001f4 <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4640      	mov	r0, r8
 8002174:	4649      	mov	r1, r9
 8002176:	f7fe f9f3 	bl	8000560 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe f837 	bl	80001f4 <__adddf3>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    return TD;
 800218e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002192:	ec43 2b17 	vmov	d7, r2, r3
}
 8002196:	eeb0 0a47 	vmov.f32	s0, s14
 800219a:	eef0 0a67 	vmov.f32	s1, s15
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a6:	bf00      	nop
 80021a8:	00000000 	.word	0x00000000
 80021ac:	4086d400 	.word	0x4086d400
 80021b0:	40000000 	.word	0x40000000
 80021b4:	4141a518 	.word	0x4141a518
 80021b8:	0800a1c8 	.word	0x0800a1c8
 80021bc:	00000000 	.word	0x00000000

080021c0 <get_dynamical_diff_near>:

/* get the dynamical time diff in the near past / future 1992 .. 2010 */
/* uses interpolation formula 3.3 on pg 25 */
static double get_dynamical_diff_near (double JD)
{
 80021c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c4:	b092      	sub	sp, #72	; 0x48
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	ed87 0b00 	vstr	d0, [r7]
    double TD = 0;
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    /* TD for 1990, 2000, 2010 */
    double delta_T[3] = {56.86, 63.83, 70.0};
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <get_dynamical_diff_near+0x120>)
 80021da:	f107 0408 	add.w	r4, r7, #8
 80021de:	461d      	mov	r5, r3
 80021e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e8:	e884 0003 	stmia.w	r4, {r0, r1}
    double a,b,c,n;
         
    /* calculate TD by interpolating value */
    a = delta_T[1] - delta_T[0];
 80021ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021f4:	f7fd fffc 	bl	80001f0 <__aeabi_dsub>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    b = delta_T[2] - delta_T[1];
 8002200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002208:	f7fd fff2 	bl	80001f0 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    c = b - a;
 8002214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002218:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800221c:	f7fd ffe8 	bl	80001f0 <__aeabi_dsub>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    
    /* get number of days since 2000 and divide by 10 years */
	n = (JD - 2451544.5) / 3652.5; 
 8002228:	a329      	add	r3, pc, #164	; (adr r3, 80022d0 <get_dynamical_diff_near+0x110>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002232:	f7fd ffdd 	bl	80001f0 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	a326      	add	r3, pc, #152	; (adr r3, 80022d8 <get_dynamical_diff_near+0x118>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe fab6 	bl	80007b4 <__aeabi_ddiv>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	TD = delta_T[1] + (n / 2) * (a + b + n * c);
 8002250:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002260:	f7fe faa8 	bl	80007b4 <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4690      	mov	r8, r2
 800226a:	4699      	mov	r9, r3
 800226c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002270:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002274:	f7fd ffbe 	bl	80001f4 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4692      	mov	sl, r2
 800227e:	469b      	mov	fp, r3
 8002280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002288:	f7fe f96a 	bl	8000560 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4650      	mov	r0, sl
 8002292:	4659      	mov	r1, fp
 8002294:	f7fd ffae 	bl	80001f4 <__adddf3>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4640      	mov	r0, r8
 800229e:	4649      	mov	r1, r9
 80022a0:	f7fe f95e 	bl	8000560 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd ffa2 	bl	80001f4 <__adddf3>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	     
    return TD;
 80022b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022bc:	ec43 2b17 	vmov	d7, r2, r3
} 
 80022c0:	eeb0 0a47 	vmov.f32	s0, s14
 80022c4:	eef0 0a67 	vmov.f32	s1, s15
 80022c8:	3748      	adds	r7, #72	; 0x48
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d0:	40000000 	.word	0x40000000
 80022d4:	4142b42c 	.word	0x4142b42c
 80022d8:	00000000 	.word	0x00000000
 80022dc:	40ac8900 	.word	0x40ac8900
 80022e0:	0800a170 	.word	0x0800a170
 80022e4:	00000000 	.word	0x00000000

080022e8 <get_dynamical_diff_other>:

/* uses equation 9.1 pg 73 to calc JDE for othe JD values */          
static double get_dynamical_diff_other (double JD)
{     
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	ed87 0b00 	vstr	d0, [r7]
    double TD;
    double a;
    
    a = (JD - 2382148);
 80022f2:	a31c      	add	r3, pc, #112	; (adr r3, 8002364 <get_dynamical_diff_other+0x7c>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022fc:	f7fd ff78 	bl	80001f0 <__aeabi_dsub>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    a *= a;
 8002308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800230c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002310:	f7fe f926 	bl	8000560 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TD = -15 + a / 41048480;
 800231c:	a313      	add	r3, pc, #76	; (adr r3, 800236c <get_dynamical_diff_other+0x84>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002326:	f7fe fa45 	bl	80007b4 <__aeabi_ddiv>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <get_dynamical_diff_other+0x78>)
 8002338:	f7fd ff5a 	bl	80001f0 <__aeabi_dsub>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	e9c7 2302 	strd	r2, r3, [r7, #8]
       
    return (TD);
 8002344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002348:	ec43 2b17 	vmov	d7, r2, r3
}  
 800234c:	eeb0 0a47 	vmov.f32	s0, s14
 8002350:	eef0 0a67 	vmov.f32	s1, s15
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	402e0000 	.word	0x402e0000
 8002364:	00000000 	.word	0x00000000
 8002368:	41422ca2 	.word	0x41422ca2
 800236c:	00000000 	.word	0x00000000
 8002370:	418392cd 	.word	0x418392cd
 8002374:	00000000 	.word	0x00000000

08002378 <ln_get_dynamical_time_diff>:
* universal time.
*/
/* Equation 9.1 on pg 73.
*/
double ln_get_dynamical_time_diff (double JD)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	ed87 0b00 	vstr	d0, [r7]
    double TD;

    /* check when JD is, and use corresponding formula */
    /* check for date < 948 A.D. */
    if ( JD < 2067314.5 )
 8002382:	a339      	add	r3, pc, #228	; (adr r3, 8002468 <ln_get_dynamical_time_diff+0xf0>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800238c:	f7fe fb5a 	bl	8000a44 <__aeabi_dcmplt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <ln_get_dynamical_time_diff+0x2c>
        /* Stephenson and Houlden */
	    TD = get_dynamical_diff_sh1 (JD);
 8002396:	ed97 0b00 	vldr	d0, [r7]
 800239a:	f7ff fd99 	bl	8001ed0 <get_dynamical_diff_sh1>
 800239e:	ed87 0b02 	vstr	d0, [r7, #8]
 80023a2:	e056      	b.n	8002452 <ln_get_dynamical_time_diff+0xda>
    else if ( JD >= 2067314.5 && JD < 2305447.5 )
 80023a4:	a330      	add	r3, pc, #192	; (adr r3, 8002468 <ln_get_dynamical_time_diff+0xf0>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023ae:	f7fe fb5d 	bl	8000a6c <__aeabi_dcmpge>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <ln_get_dynamical_time_diff+0x62>
 80023b8:	a32d      	add	r3, pc, #180	; (adr r3, 8002470 <ln_get_dynamical_time_diff+0xf8>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c2:	f7fe fb3f 	bl	8000a44 <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <ln_get_dynamical_time_diff+0x62>
	    /* check for date 948..1600 A.D. Stephenson and Houlden */
    	TD = get_dynamical_diff_sh2 (JD);
 80023cc:	ed97 0b00 	vldr	d0, [r7]
 80023d0:	f7ff fde2 	bl	8001f98 <get_dynamical_diff_sh2>
 80023d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80023d8:	e03b      	b.n	8002452 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2312752.5 && JD < 2448622.5 )
 80023da:	a327      	add	r3, pc, #156	; (adr r3, 8002478 <ln_get_dynamical_time_diff+0x100>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e4:	f7fe fb42 	bl	8000a6c <__aeabi_dcmpge>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <ln_get_dynamical_time_diff+0x98>
 80023ee:	a324      	add	r3, pc, #144	; (adr r3, 8002480 <ln_get_dynamical_time_diff+0x108>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f8:	f7fe fb24 	bl	8000a44 <__aeabi_dcmplt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <ln_get_dynamical_time_diff+0x98>
		/* check for value in table 1620..1992  interpolation of table */
		TD = get_dynamical_diff_table (JD);
 8002402:	ed97 0b00 	vldr	d0, [r7]
 8002406:	f7ff fe0b 	bl	8002020 <get_dynamical_diff_table>
 800240a:	ed87 0b02 	vstr	d0, [r7, #8]
 800240e:	e020      	b.n	8002452 <ln_get_dynamical_time_diff+0xda>
	else if ( JD >= 2448622.5 && JD <= 2455197.5 )
 8002410:	a31b      	add	r3, pc, #108	; (adr r3, 8002480 <ln_get_dynamical_time_diff+0x108>)
 8002412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800241a:	f7fe fb27 	bl	8000a6c <__aeabi_dcmpge>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <ln_get_dynamical_time_diff+0xce>
 8002424:	a318      	add	r3, pc, #96	; (adr r3, 8002488 <ln_get_dynamical_time_diff+0x110>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800242e:	f7fe fb13 	bl	8000a58 <__aeabi_dcmple>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <ln_get_dynamical_time_diff+0xce>
		/* check for near future 1992..2010 interpolation */
		TD = get_dynamical_diff_near (JD);       
 8002438:	ed97 0b00 	vldr	d0, [r7]
 800243c:	f7ff fec0 	bl	80021c0 <get_dynamical_diff_near>
 8002440:	ed87 0b02 	vstr	d0, [r7, #8]
 8002444:	e005      	b.n	8002452 <ln_get_dynamical_time_diff+0xda>
	else
	    /* other time period outside */
	    TD = get_dynamical_diff_other (JD);   	    
 8002446:	ed97 0b00 	vldr	d0, [r7]
 800244a:	f7ff ff4d 	bl	80022e8 <get_dynamical_diff_other>
 800244e:	ed87 0b02 	vstr	d0, [r7, #8]
		    
	return TD;
 8002452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002456:	ec43 2b17 	vmov	d7, r2, r3
}
 800245a:	eeb0 0a47 	vmov.f32	s0, s14
 800245e:	eef0 0a67 	vmov.f32	s1, s15
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	80000000 	.word	0x80000000
 800246c:	413f8b72 	.word	0x413f8b72
 8002470:	c0000000 	.word	0xc0000000
 8002474:	414196d3 	.word	0x414196d3
 8002478:	40000000 	.word	0x40000000
 800247c:	4141a518 	.word	0x4141a518
 8002480:	40000000 	.word	0x40000000
 8002484:	4142ae77 	.word	0x4142ae77
 8002488:	c0000000 	.word	0xc0000000
 800248c:	4142bb4e 	.word	0x4142bb4e

08002490 <ln_get_jde>:
*     
* Calculates the Julian Ephemeris Day (JDE) from the given julian day
*/     
    
double ln_get_jde (double JD)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	ed87 0b00 	vstr	d0, [r7]
    double JDE;
    double secs_in_day = 24 * 60 * 60;
 800249a:	a313      	add	r3, pc, #76	; (adr r3, 80024e8 <ln_get_jde+0x58>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    JDE = JD +  ln_get_dynamical_time_diff (JD) / secs_in_day;
 80024a4:	ed97 0b00 	vldr	d0, [r7]
 80024a8:	f7ff ff66 	bl	8002378 <ln_get_dynamical_time_diff>
 80024ac:	ec51 0b10 	vmov	r0, r1, d0
 80024b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024b4:	f7fe f97e 	bl	80007b4 <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024c0:	f7fd fe98 	bl	80001f4 <__adddf3>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return JDE;
 80024cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80024d4:	eeb0 0a47 	vmov.f32	s0, s14
 80024d8:	eef0 0a67 	vmov.f32	s1, s15
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	f3af 8000 	nop.w
 80024e8:	00000000 	.word	0x00000000
 80024ec:	40f51800 	.word	0x40f51800

080024f0 <ln_get_julian_day>:
* Valid for positive and negative years but not for negative JD.
*/
/* Formula 7.1 on pg 61 
*/
double ln_get_julian_day (struct ln_date * date)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b090      	sub	sp, #64	; 0x40
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    double days;
    int a,b;
    struct ln_date local_date;
		
	/* create local copy */
    memcpy (&local_date, date, sizeof (struct ln_date));
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	2220      	movs	r2, #32
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fcbf 	bl	8006e84 <memcpy>
		
    /* check for month = January or February */
    if (local_date.months < 3 ) {
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b02      	cmp	r3, #2
 800250a:	dc05      	bgt.n	8002518 <ln_get_julian_day+0x28>
        local_date.years--;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	3b01      	subs	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
	    local_date.months += 12;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	330c      	adds	r3, #12
 8002516:	60fb      	str	r3, [r7, #12]
	}
	
	a = local_date.years / 100;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <ln_get_julian_day+0x1b8>)
 800251c:	fb82 1203 	smull	r1, r2, r2, r3
 8002520:	1152      	asrs	r2, r2, #5
 8002522:	17db      	asrs	r3, r3, #31
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
	
	/* check for Julian or Gregorian calendar (starts Oct 4th 1582) */
	if (local_date.years > 1582 || 
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f240 622e 	movw	r2, #1582	; 0x62e
 800252e:	4293      	cmp	r3, r2
 8002530:	dc0d      	bgt.n	800254e <ln_get_julian_day+0x5e>
		(local_date.years == 1582 && 
 8002532:	68bb      	ldr	r3, [r7, #8]
	if (local_date.years > 1582 || 
 8002534:	f240 622e 	movw	r2, #1582	; 0x62e
 8002538:	4293      	cmp	r3, r2
 800253a:	d113      	bne.n	8002564 <ln_get_julian_day+0x74>
		(local_date.months > 10 || 
 800253c:	68fb      	ldr	r3, [r7, #12]
		(local_date.years == 1582 && 
 800253e:	2b0a      	cmp	r3, #10
 8002540:	dc05      	bgt.n	800254e <ln_get_julian_day+0x5e>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8002542:	68fb      	ldr	r3, [r7, #12]
		(local_date.months > 10 || 
 8002544:	2b0a      	cmp	r3, #10
 8002546:	d10d      	bne.n	8002564 <ln_get_julian_day+0x74>
		(local_date.months == 10 && local_date.days >= 4)))) {
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b03      	cmp	r3, #3
 800254c:	dd0a      	ble.n	8002564 <ln_get_julian_day+0x74>
	    /* Gregorian calendar */    
	    b = 2 - a + (a / 4);
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	f1c3 0202 	rsb	r2, r3, #2
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	da00      	bge.n	800255c <ln_get_julian_day+0x6c>
 800255a:	3303      	adds	r3, #3
 800255c:	109b      	asrs	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002562:	e001      	b.n	8002568 <ln_get_julian_day+0x78>
	} else {
	    /* Julian calendar */
	    b = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	
	/* add a fraction of hours, minutes and secs to days*/
	days = local_date.days + (double)(local_date.hours / 24.0) + (double)(local_date.minutes / 1440.0) + (double)(local_date.seconds /  86400.0);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd ff8e 	bl	800048c <__aeabi_i2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ff88 	bl	800048c <__aeabi_i2d>
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <ln_get_julian_day+0x1bc>)
 8002582:	f7fe f917 	bl	80007b4 <__aeabi_ddiv>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4620      	mov	r0, r4
 800258c:	4629      	mov	r1, r5
 800258e:	f7fd fe31 	bl	80001f4 <__adddf3>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4614      	mov	r4, r2
 8002598:	461d      	mov	r5, r3
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff75 	bl	800048c <__aeabi_i2d>
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <ln_get_julian_day+0x1c0>)
 80025a8:	f7fe f904 	bl	80007b4 <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe1e 	bl	80001f4 <__adddf3>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025c4:	a330      	add	r3, pc, #192	; (adr r3, 8002688 <ln_get_julian_day+0x198>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f8f3 	bl	80007b4 <__aeabi_ddiv>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe0d 	bl	80001f4 <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* now get the JD */
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80025e8:	330c      	adds	r3, #12
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff4e 	bl	800048c <__aeabi_i2d>
 80025f0:	a327      	add	r3, pc, #156	; (adr r3, 8002690 <ln_get_julian_day+0x1a0>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd ffb3 	bl	8000560 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fa5d 	bl	8000ac0 <__aeabi_d2iz>
 8002606:	4604      	mov	r4, r0
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff3d 	bl	800048c <__aeabi_i2d>
 8002612:	a321      	add	r3, pc, #132	; (adr r3, 8002698 <ln_get_julian_day+0x1a8>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f7fd ffa2 	bl	8000560 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe fa4c 	bl	8000ac0 <__aeabi_d2iz>
 8002628:	4603      	mov	r3, r0
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 800262a:	4423      	add	r3, r4
	    (int)(30.6001 * (local_date.months + 1)) + days + b - 1524.5;
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff2d 	bl	800048c <__aeabi_i2d>
 8002632:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002636:	f7fd fddd 	bl	80001f4 <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	461d      	mov	r5, r3
 8002642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002644:	f7fd ff22 	bl	800048c <__aeabi_i2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fdd0 	bl	80001f4 <__adddf3>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
	JD = (int)(365.25 * (local_date.years + 4716)) + 
 800265c:	a310      	add	r3, pc, #64	; (adr r3, 80026a0 <ln_get_julian_day+0x1b0>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd fdc5 	bl	80001f0 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
	return JD;
 800266e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002672:	ec43 2b17 	vmov	d7, r2, r3
}
 8002676:	eeb0 0a47 	vmov.f32	s0, s14
 800267a:	eef0 0a67 	vmov.f32	s1, s15
 800267e:	3740      	adds	r7, #64	; 0x40
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	00000000 	.word	0x00000000
 800268c:	40f51800 	.word	0x40f51800
 8002690:	00000000 	.word	0x00000000
 8002694:	4076d400 	.word	0x4076d400
 8002698:	27525461 	.word	0x27525461
 800269c:	403e99a0 	.word	0x403e99a0
 80026a0:	00000000 	.word	0x00000000
 80026a4:	4097d200 	.word	0x4097d200
 80026a8:	51eb851f 	.word	0x51eb851f
 80026ac:	40380000 	.word	0x40380000
 80026b0:	40968000 	.word	0x40968000
 80026b4:	00000000 	.word	0x00000000

080026b8 <ln_get_nutation>:
*/
/* Chapter 21 pg 131-134 Using Table 21A 
*/

void ln_get_nutation (double JD, struct ln_nutation * nutation)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b09e      	sub	sp, #120	; 0x78
 80026bc:	af00      	add	r7, sp, #0
 80026be:	ed87 0b02 	vstr	d0, [r7, #8]
 80026c2:	6078      	str	r0, [r7, #4]
	long double coeff_sine, coeff_cos;
	long double argument;
	int i;

	/* should we bother recalculating nutation */
	if (fabs(JD - c_JD) > LN_NUTATION_EPOCH_THRESHOLD) {
 80026c4:	4bd2      	ldr	r3, [pc, #840]	; (8002a10 <ln_get_nutation+0x358>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026ce:	f7fd fd8f 	bl	80001f0 <__aeabi_dsub>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4614      	mov	r4, r2
 80026d8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80026dc:	a39e      	add	r3, pc, #632	; (adr r3, 8002958 <ln_get_nutation+0x2a0>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fe f9cb 	bl	8000a80 <__aeabi_dcmpgt>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8308 	beq.w	8002d02 <ln_get_nutation+0x64a>
		/* set the new epoch */
		c_JD = JD;
 80026f2:	49c7      	ldr	r1, [pc, #796]	; (8002a10 <ln_get_nutation+0x358>)
 80026f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]

		/* get julian ephemeris day */
		JDE = ln_get_jde (JD);
 80026fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8002700:	f7ff fec6 	bl	8002490 <ln_get_jde>
 8002704:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
		
		/* calc T */
		T = (JDE - 2451545.0)/36525;
 8002708:	a395      	add	r3, pc, #596	; (adr r3, 8002960 <ln_get_nutation+0x2a8>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002712:	f7fd fd6d 	bl	80001f0 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	a392      	add	r3, pc, #584	; (adr r3, 8002968 <ln_get_nutation+0x2b0>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fe f846 	bl	80007b4 <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		T2 = T * T;
 8002730:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002734:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002738:	f7fd ff12 	bl	8000560 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		T3 = T2 * T;
 8002744:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002748:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800274c:	f7fd ff08 	bl	8000560 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		/* calculate D,M,M',F and Omega */
		D = 297.85036 + 445267.111480 * T - 0.0019142 * T2 + T3 / 189474.0;
 8002758:	a385      	add	r3, pc, #532	; (adr r3, 8002970 <ln_get_nutation+0x2b8>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002762:	f7fd fefd 	bl	8000560 <__aeabi_dmul>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	a382      	add	r3, pc, #520	; (adr r3, 8002978 <ln_get_nutation+0x2c0>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd fd3e 	bl	80001f4 <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	a37f      	add	r3, pc, #508	; (adr r3, 8002980 <ln_get_nutation+0x2c8>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800278a:	f7fd fee9 	bl	8000560 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd fd2b 	bl	80001f0 <__aeabi_dsub>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	461d      	mov	r5, r3
 80027a2:	a379      	add	r3, pc, #484	; (adr r3, 8002988 <ln_get_nutation+0x2d0>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027ac:	f7fe f802 	bl	80007b4 <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fd1c 	bl	80001f4 <__adddf3>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		M = 357.52772 + 35999.050340 * T - 0.0001603 * T2 - T3 / 300000.0;
 80027c4:	a372      	add	r3, pc, #456	; (adr r3, 8002990 <ln_get_nutation+0x2d8>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027ce:	f7fd fec7 	bl	8000560 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	a36f      	add	r3, pc, #444	; (adr r3, 8002998 <ln_get_nutation+0x2e0>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd08 	bl	80001f4 <__adddf3>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	a36c      	add	r3, pc, #432	; (adr r3, 80029a0 <ln_get_nutation+0x2e8>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80027f6:	f7fd feb3 	bl	8000560 <__aeabi_dmul>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fcf5 	bl	80001f0 <__aeabi_dsub>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	461d      	mov	r5, r3
 800280e:	a366      	add	r3, pc, #408	; (adr r3, 80029a8 <ln_get_nutation+0x2f0>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002818:	f7fd ffcc 	bl	80007b4 <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4620      	mov	r0, r4
 8002822:	4629      	mov	r1, r5
 8002824:	f7fd fce4 	bl	80001f0 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		MM = 134.96298 + 477198.867398 * T + 0.0086972 * T2 + T3 / 56250.0;
 8002830:	a35f      	add	r3, pc, #380	; (adr r3, 80029b0 <ln_get_nutation+0x2f8>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800283a:	f7fd fe91 	bl	8000560 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	a35c      	add	r3, pc, #368	; (adr r3, 80029b8 <ln_get_nutation+0x300>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fcd2 	bl	80001f4 <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	a359      	add	r3, pc, #356	; (adr r3, 80029c0 <ln_get_nutation+0x308>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002862:	f7fd fe7d 	bl	8000560 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fd fcc1 	bl	80001f4 <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4614      	mov	r4, r2
 8002878:	461d      	mov	r5, r3
 800287a:	a353      	add	r3, pc, #332	; (adr r3, 80029c8 <ln_get_nutation+0x310>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002884:	f7fd ff96 	bl	80007b4 <__aeabi_ddiv>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fd fcb0 	bl	80001f4 <__adddf3>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		F = 93.2719100 + 483202.017538 * T - 0.0036825 * T2 + T3 / 327270.0;
 800289c:	a34c      	add	r3, pc, #304	; (adr r3, 80029d0 <ln_get_nutation+0x318>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028a6:	f7fd fe5b 	bl	8000560 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	a349      	add	r3, pc, #292	; (adr r3, 80029d8 <ln_get_nutation+0x320>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fc9c 	bl	80001f4 <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	a346      	add	r3, pc, #280	; (adr r3, 80029e0 <ln_get_nutation+0x328>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028ce:	f7fd fe47 	bl	8000560 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fc89 	bl	80001f0 <__aeabi_dsub>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	a340      	add	r3, pc, #256	; (adr r3, 80029e8 <ln_get_nutation+0x330>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028f0:	f7fd ff60 	bl	80007b4 <__aeabi_ddiv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fc7a 	bl	80001f4 <__adddf3>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		O = 125.04452 - 1934.136261 * T + 0.0020708 * T2 + T3 / 450000.0;
 8002908:	a339      	add	r3, pc, #228	; (adr r3, 80029f0 <ln_get_nutation+0x338>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002912:	f7fd fe25 	bl	8000560 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	a137      	add	r1, pc, #220	; (adr r1, 80029f8 <ln_get_nutation+0x340>)
 800291c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002920:	f7fd fc66 	bl	80001f0 <__aeabi_dsub>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4614      	mov	r4, r2
 800292a:	461d      	mov	r5, r3
 800292c:	a334      	add	r3, pc, #208	; (adr r3, 8002a00 <ln_get_nutation+0x348>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002936:	f7fd fe13 	bl	8000560 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fc57 	bl	80001f4 <__adddf3>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4614      	mov	r4, r2
 800294c:	461d      	mov	r5, r3
 800294e:	a32e      	add	r3, pc, #184	; (adr r3, 8002a08 <ln_get_nutation+0x350>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	e05e      	b.n	8002a14 <ln_get_nutation+0x35c>
 8002956:	bf00      	nop
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fb99999 	.word	0x3fb99999
 8002960:	80000000 	.word	0x80000000
 8002964:	4142b42c 	.word	0x4142b42c
 8002968:	00000000 	.word	0x00000000
 800296c:	40e1d5a0 	.word	0x40e1d5a0
 8002970:	7227d029 	.word	0x7227d029
 8002974:	411b2d4c 	.word	0x411b2d4c
 8002978:	13165d3a 	.word	0x13165d3a
 800297c:	40729d9b 	.word	0x40729d9b
 8002980:	9978e26a 	.word	0x9978e26a
 8002984:	3f5f5cbc 	.word	0x3f5f5cbc
 8002988:	00000000 	.word	0x00000000
 800298c:	41072110 	.word	0x41072110
 8002990:	9c62a1b6 	.word	0x9c62a1b6
 8002994:	40e193e1 	.word	0x40e193e1
 8002998:	8a86d71f 	.word	0x8a86d71f
 800299c:	40765871 	.word	0x40765871
 80029a0:	83dd6fb2 	.word	0x83dd6fb2
 80029a4:	3f2502c6 	.word	0x3f2502c6
 80029a8:	00000000 	.word	0x00000000
 80029ac:	41124f80 	.word	0x41124f80
 80029b0:	78372e6a 	.word	0x78372e6a
 80029b4:	411d203b 	.word	0x411d203b
 80029b8:	bb6ed677 	.word	0xbb6ed677
 80029bc:	4060ded0 	.word	0x4060ded0
 80029c0:	6c88bf57 	.word	0x6c88bf57
 80029c4:	3f81cfd6 	.word	0x3f81cfd6
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40eb7740 	.word	0x40eb7740
 80029d0:	11f57b42 	.word	0x11f57b42
 80029d4:	411d7e08 	.word	0x411d7e08
 80029d8:	f9335d25 	.word	0xf9335d25
 80029dc:	40575166 	.word	0x40575166
 80029e0:	22291fb4 	.word	0x22291fb4
 80029e4:	3f6e2ac3 	.word	0x3f6e2ac3
 80029e8:	00000000 	.word	0x00000000
 80029ec:	4113f998 	.word	0x4113f998
 80029f0:	8800eae2 	.word	0x8800eae2
 80029f4:	409e388b 	.word	0x409e388b
 80029f8:	6a6a0126 	.word	0x6a6a0126
 80029fc:	405f42d9 	.word	0x405f42d9
 8002a00:	48d98da5 	.word	0x48d98da5
 8002a04:	3f60f6c8 	.word	0x3f60f6c8
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	411b7740 	.word	0x411b7740
 8002a10:	200004c8 	.word	0x200004c8
 8002a14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a18:	f7fd fecc 	bl	80007b4 <__aeabi_ddiv>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fbe6 	bl	80001f4 <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	
		/* convert to radians */
		D = ln_deg_to_rad (D);
 8002a30:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002a34:	f000 fdb4 	bl	80035a0 <ln_deg_to_rad>
 8002a38:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
		M = ln_deg_to_rad (M);
 8002a3c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002a40:	f000 fdae 	bl	80035a0 <ln_deg_to_rad>
 8002a44:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		MM = ln_deg_to_rad (MM);
 8002a48:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002a4c:	f000 fda8 	bl	80035a0 <ln_deg_to_rad>
 8002a50:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
		F = ln_deg_to_rad (F);
 8002a54:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002a58:	f000 fda2 	bl	80035a0 <ln_deg_to_rad>
 8002a5c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
		O = ln_deg_to_rad (O);
 8002a60:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8002a64:	f000 fd9c 	bl	80035a0 <ln_deg_to_rad>
 8002a68:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

		/* calc sum of terms in table 21A */
		for (i=0; i< TERMS; i++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a70:	e0da      	b.n	8002c28 <ln_get_nutation+0x570>
			/* calc coefficients of sine and cosine */
			coeff_sine = (coefficients[i].longitude1 + (coefficients[i].longitude2 * T));
 8002a72:	4abb      	ldr	r2, [pc, #748]	; (8002d60 <ln_get_nutation+0x6a8>)
 8002a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a76:	015b      	lsls	r3, r3, #5
 8002a78:	4413      	add	r3, r2
 8002a7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a7e:	4ab8      	ldr	r2, [pc, #736]	; (8002d60 <ln_get_nutation+0x6a8>)
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	4413      	add	r3, r2
 8002a86:	3308      	adds	r3, #8
 8002a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a90:	f7fd fd66 	bl	8000560 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fbaa 	bl	80001f4 <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			coeff_cos = (coefficients[i].obliquity1 + (coefficients[i].obliquity2 * T));
 8002aa8:	4aad      	ldr	r2, [pc, #692]	; (8002d60 <ln_get_nutation+0x6a8>)
 8002aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aac:	015b      	lsls	r3, r3, #5
 8002aae:	4413      	add	r3, r2
 8002ab0:	3310      	adds	r3, #16
 8002ab2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ab6:	4aaa      	ldr	r2, [pc, #680]	; (8002d60 <ln_get_nutation+0x6a8>)
 8002ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	4413      	add	r3, r2
 8002abe:	3318      	adds	r3, #24
 8002ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ac8:	f7fd fd4a 	bl	8000560 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fb8e 	bl	80001f4 <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	e9c7 2306 	strd	r2, r3, [r7, #24]

			argument = arguments[i].D * D 
 8002ae0:	49a0      	ldr	r1, [pc, #640]	; (8002d64 <ln_get_nutation+0x6ac>)
 8002ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002af6:	f7fd fd33 	bl	8000560 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	461d      	mov	r5, r3
				+ arguments[i].M * M 
 8002b02:	4998      	ldr	r1, [pc, #608]	; (8002d64 <ln_get_nutation+0x6ac>)
 8002b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	3308      	adds	r3, #8
 8002b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b1a:	f7fd fd21 	bl	8000560 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4620      	mov	r0, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	f7fd fb65 	bl	80001f4 <__adddf3>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	461d      	mov	r5, r3
				+ arguments[i].MM * MM 
 8002b32:	498c      	ldr	r1, [pc, #560]	; (8002d64 <ln_get_nutation+0x6ac>)
 8002b34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3310      	adds	r3, #16
 8002b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b4a:	f7fd fd09 	bl	8000560 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fd fb4d 	bl	80001f4 <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4614      	mov	r4, r2
 8002b60:	461d      	mov	r5, r3
				+ arguments[i].F * F
 8002b62:	4980      	ldr	r1, [pc, #512]	; (8002d64 <ln_get_nutation+0x6ac>)
 8002b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3318      	adds	r3, #24
 8002b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b7a:	f7fd fcf1 	bl	8000560 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fb35 	bl	80001f4 <__adddf3>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4614      	mov	r4, r2
 8002b90:	461d      	mov	r5, r3
				+ arguments[i].O * O;
 8002b92:	4974      	ldr	r1, [pc, #464]	; (8002d64 <ln_get_nutation+0x6ac>)
 8002b94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002baa:	f7fd fcd9 	bl	8000560 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
			argument = arguments[i].D * D 
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f7fd fb1d 	bl	80001f4 <__adddf3>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
            
			c_longitude += coeff_sine * sin(argument);
 8002bc2:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bc6:	f004 fc87 	bl	80074d8 <sin>
 8002bca:	ec51 0b10 	vmov	r0, r1, d0
 8002bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd2:	f7fd fcc5 	bl	8000560 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fb06 	bl	80001f4 <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	495e      	ldr	r1, [pc, #376]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002bee:	e9c1 2300 	strd	r2, r3, [r1]
			c_obliquity += coeff_cos * cos(argument);
 8002bf2:	ed97 0b04 	vldr	d0, [r7, #16]
 8002bf6:	f004 fb8f 	bl	8007318 <cos>
 8002bfa:	ec51 0b10 	vmov	r0, r1, d0
 8002bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c02:	f7fd fcad 	bl	8000560 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd faee 	bl	80001f4 <__adddf3>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4953      	ldr	r1, [pc, #332]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
		for (i=0; i< TERMS; i++) {
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	3301      	adds	r3, #1
 8002c26:	677b      	str	r3, [r7, #116]	; 0x74
 8002c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c2c:	f77f af21 	ble.w	8002a72 <ln_get_nutation+0x3ba>
		}

		/* change to arcsecs */
		c_longitude /= 10000;
 8002c30:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	a33e      	add	r3, pc, #248	; (adr r3, 8002d30 <ln_get_nutation+0x678>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fdba 	bl	80007b4 <__aeabi_ddiv>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4948      	ldr	r1, [pc, #288]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002c46:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= 10000;
 8002c4a:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c50:	a337      	add	r3, pc, #220	; (adr r3, 8002d30 <ln_get_nutation+0x678>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fdad 	bl	80007b4 <__aeabi_ddiv>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4943      	ldr	r1, [pc, #268]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c60:	e9c1 2300 	strd	r2, r3, [r1]

		/* change to degrees */
		c_longitude /= (60 * 60);
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c6a:	a333      	add	r3, pc, #204	; (adr r3, 8002d38 <ln_get_nutation+0x680>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fda0 	bl	80007b4 <__aeabi_ddiv>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	493b      	ldr	r1, [pc, #236]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002c7a:	e9c1 2300 	strd	r2, r3, [r1]
		c_obliquity /= (60 * 60);
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c84:	a32c      	add	r3, pc, #176	; (adr r3, 8002d38 <ln_get_nutation+0x680>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fd93 	bl	80007b4 <__aeabi_ddiv>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4936      	ldr	r1, [pc, #216]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002c94:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* calculate mean ecliptic - Meeus 2nd edition, eq. 22.2 */
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
                   - 46.8150/3600 * T
 8002c98:	a329      	add	r3, pc, #164	; (adr r3, 8002d40 <ln_get_nutation+0x688>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ca2:	f7fd fc5d 	bl	8000560 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	a127      	add	r1, pc, #156	; (adr r1, 8002d48 <ln_get_nutation+0x690>)
 8002cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cb0:	f7fd fa9e 	bl	80001f0 <__aeabi_dsub>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
                   - 0.00059/3600 * T2
 8002cbc:	a324      	add	r3, pc, #144	; (adr r3, 8002d50 <ln_get_nutation+0x698>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cc6:	f7fd fc4b 	bl	8000560 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd fa8d 	bl	80001f0 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4614      	mov	r4, r2
 8002cdc:	461d      	mov	r5, r3
                   + 0.001813/3600 * T3;
 8002cde:	a31e      	add	r3, pc, #120	; (adr r3, 8002d58 <ln_get_nutation+0x6a0>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ce8:	f7fd fc3a 	bl	8000560 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fd fa7e 	bl	80001f4 <__adddf3>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
		c_ecliptic = 23.0 + 26.0 / 60.0 + 21.448 / 3600.0
 8002cfc:	491c      	ldr	r1, [pc, #112]	; (8002d70 <ln_get_nutation+0x6b8>)
 8002cfe:	e9c1 2300 	strd	r2, r3, [r1]
                                         return true obliquity rather than
                                         mean obliquity */
	}

	/* return results */
	nutation->longitude = c_longitude;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <ln_get_nutation+0x6b0>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	e9c1 2300 	strd	r2, r3, [r1]
	nutation->obliquity = c_obliquity;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <ln_get_nutation+0x6b4>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	e9c1 2302 	strd	r2, r3, [r1, #8]
	nutation->ecliptic = c_ecliptic;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <ln_get_nutation+0x6b8>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002d26:	bf00      	nop
 8002d28:	e024      	b.n	8002d74 <ln_get_nutation+0x6bc>
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w
 8002d30:	00000000 	.word	0x00000000
 8002d34:	40c38800 	.word	0x40c38800
 8002d38:	00000000 	.word	0x00000000
 8002d3c:	40ac2000 	.word	0x40ac2000
 8002d40:	b45c4be9 	.word	0xb45c4be9
 8002d44:	3f8aa1ed 	.word	0x3f8aa1ed
 8002d48:	61dba54e 	.word	0x61dba54e
 8002d4c:	40377075 	.word	0x40377075
 8002d50:	e9770fa3 	.word	0xe9770fa3
 8002d54:	3e85ff2d 	.word	0x3e85ff2d
 8002d58:	8b8ade58 	.word	0x8b8ade58
 8002d5c:	3ea0e5fc 	.word	0x3ea0e5fc
 8002d60:	0800b1a0 	.word	0x0800b1a0
 8002d64:	0800a7c8 	.word	0x0800a7c8
 8002d68:	200004d0 	.word	0x200004d0
 8002d6c:	200004d8 	.word	0x200004d8
 8002d70:	200004e0 	.word	0x200004e0
 8002d74:	3778      	adds	r7, #120	; 0x78
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	0000      	movs	r0, r0
	...

08002d80 <ln_get_mean_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_mean_sidereal_time (double JD)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	ed87 0b00 	vstr	d0, [r7]
    long double sidereal;
    long double T;
    
    T = (JD - 2451545.0) / 36525.0;
 8002d8a:	a343      	add	r3, pc, #268	; (adr r3, 8002e98 <ln_get_mean_sidereal_time+0x118>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d94:	f7fd fa2c 	bl	80001f0 <__aeabi_dsub>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	a33f      	add	r3, pc, #252	; (adr r3, 8002ea0 <ln_get_mean_sidereal_time+0x120>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fd05 	bl	80007b4 <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	e9c7 2304 	strd	r2, r3, [r7, #16]
        
    /* calc mean angle */
    sidereal = 280.46061837 + (360.98564736629 * (JD - 2451545.0)) + (0.000387933 * T * T) - (T * T * T / 38710000.0);
 8002db2:	a339      	add	r3, pc, #228	; (adr r3, 8002e98 <ln_get_mean_sidereal_time+0x118>)
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dbc:	f7fd fa18 	bl	80001f0 <__aeabi_dsub>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	a337      	add	r3, pc, #220	; (adr r3, 8002ea8 <ln_get_mean_sidereal_time+0x128>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fbc7 	bl	8000560 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	a335      	add	r3, pc, #212	; (adr r3, 8002eb0 <ln_get_mean_sidereal_time+0x130>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fa08 	bl	80001f4 <__adddf3>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	a332      	add	r3, pc, #200	; (adr r3, 8002eb8 <ln_get_mean_sidereal_time+0x138>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002df6:	f7fd fbb3 	bl	8000560 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e06:	f7fd fbab 	bl	8000560 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd f9ef 	bl	80001f4 <__adddf3>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4614      	mov	r4, r2
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e26:	f7fd fb9b 	bl	8000560 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e36:	f7fd fb93 	bl	8000560 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	a31f      	add	r3, pc, #124	; (adr r3, 8002ec0 <ln_get_mean_sidereal_time+0x140>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd fcb4 	bl	80007b4 <__aeabi_ddiv>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7fd f9cc 	bl	80001f0 <__aeabi_dsub>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    /* add a convenient multiple of 360 degrees */
    sidereal = ln_range_degrees (sidereal);
 8002e60:	ed97 0b02 	vldr	d0, [r7, #8]
 8002e64:	f000 fd02 	bl	800386c <ln_range_degrees>
 8002e68:	ed87 0b02 	vstr	d0, [r7, #8]
    
    /* change to hours */
    sidereal *= 24.0 / 360.0;
 8002e6c:	a316      	add	r3, pc, #88	; (adr r3, 8002ec8 <ln_get_mean_sidereal_time+0x148>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e76:	f7fd fb73 	bl	8000560 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        
    return sidereal;
 8002e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e86:	ec43 2b17 	vmov	d7, r2, r3
} 
 8002e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e8e:	eef0 0a67 	vmov.f32	s1, s15
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}
 8002e98:	80000000 	.word	0x80000000
 8002e9c:	4142b42c 	.word	0x4142b42c
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40e1d5a0 	.word	0x40e1d5a0
 8002ea8:	362c39aa 	.word	0x362c39aa
 8002eac:	40768fc5 	.word	0x40768fc5
 8002eb0:	b15e3164 	.word	0xb15e3164
 8002eb4:	4071875e 	.word	0x4071875e
 8002eb8:	8c4c4b7f 	.word	0x8c4c4b7f
 8002ebc:	3f396c6f 	.word	0x3f396c6f
 8002ec0:	80000000 	.word	0x80000000
 8002ec4:	41827557 	.word	0x41827557
 8002ec8:	11111111 	.word	0x11111111
 8002ecc:	3fb11111 	.word	0x3fb11111

08002ed0 <ln_get_apparent_sidereal_time>:
*/
/* Formula 11.1, 11.4 pg 83 
*/

double ln_get_apparent_sidereal_time (double JD)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	ed87 0b00 	vstr	d0, [r7]
   double correction, sidereal;
   struct ln_nutation nutation;  
   
   /* get the mean sidereal time */
   sidereal = ln_get_mean_sidereal_time (JD);
 8002eda:	ed97 0b00 	vldr	d0, [r7]
 8002ede:	f7ff ff4f 	bl	8002d80 <ln_get_mean_sidereal_time>
 8002ee2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
        
   /* add corrections for nutation in longitude and for the true obliquity of 
   the ecliptic */   
   ln_get_nutation (JD, &nutation); 
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	4618      	mov	r0, r3
 8002eec:	ed97 0b00 	vldr	d0, [r7]
 8002ef0:	f7ff fbe2 	bl	80026b8 <ln_get_nutation>
    
   correction = (nutation.longitude / 15.0 * cos (ln_deg_to_rad(nutation.obliquity)));
 8002ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <ln_get_apparent_sidereal_time+0x9c>)
 8002efe:	f7fd fc59 	bl	80007b4 <__aeabi_ddiv>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	461d      	mov	r5, r3
 8002f0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f000 fb43 	bl	80035a0 <ln_deg_to_rad>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	eef0 7a60 	vmov.f32	s15, s1
 8002f22:	eeb0 0a47 	vmov.f32	s0, s14
 8002f26:	eef0 0a67 	vmov.f32	s1, s15
 8002f2a:	f004 f9f5 	bl	8007318 <cos>
 8002f2e:	ec53 2b10 	vmov	r2, r3, d0
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	f7fd fb13 	bl	8000560 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  
   sidereal += correction;
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f4a:	f7fd f953 	bl	80001f4 <__adddf3>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   
   return sidereal;
 8002f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f62:	eef0 0a67 	vmov.f32	s1, s15
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6c:	402e0000 	.word	0x402e0000

08002f70 <ln_get_hrz_from_equ>:
* TODO:
* Transform horizontal coordinates to galactic coordinates.
*/

void ln_get_hrz_from_equ (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_hrz_posn * position)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6178      	str	r0, [r7, #20]
 8002f78:	6139      	str	r1, [r7, #16]
 8002f7a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
	double sidereal;
	
	/* get mean sidereal time in hours*/
	sidereal = ln_get_mean_sidereal_time (JD);
 8002f80:	ed97 0b02 	vldr	d0, [r7, #8]
 8002f84:	f7ff fefc 	bl	8002d80 <ln_get_mean_sidereal_time>
 8002f88:	ed87 0b06 	vstr	d0, [r7, #24]
	ln_get_hrz_from_equ_sidereal_time (object, observer, sidereal, position);
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002f92:	6939      	ldr	r1, [r7, #16]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f000 f807 	bl	8002fa8 <ln_get_hrz_from_equ_sidereal_time>
}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	0000      	movs	r0, r0
 8002fa4:	0000      	movs	r0, r0
	...

08002fa8 <ln_get_hrz_from_equ_sidereal_time>:


void ln_get_hrz_from_equ_sidereal_time (struct ln_equ_posn * object, struct ln_lnlat_posn * observer, double sidereal, struct ln_hrz_posn * position)
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b09a      	sub	sp, #104	; 0x68
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6178      	str	r0, [r7, #20]
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	ed87 0b02 	vstr	d0, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
	long double H, ra, latitude, declination, A, Ac, As, h, Z, Zs;

	/* change sidereal_time from hours to radians*/
	sidereal *= 2.0 * M_PI / 24.0;
 8002fba:	a3e0      	add	r3, pc, #896	; (adr r3, 800333c <ln_get_hrz_from_equ_sidereal_time+0x394>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fc4:	f7fd facc 	bl	8000560 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* calculate hour angle of object at observers position */
	ra = ln_deg_to_rad (object->ra);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	ed93 7b00 	vldr	d7, [r3]
 8002fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fda:	eef0 0a67 	vmov.f32	s1, s15
 8002fde:	f000 fadf 	bl	80035a0 <ln_deg_to_rad>
 8002fe2:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
	H = sidereal + ln_deg_to_rad (observer->lng) - ra;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	ed93 7b00 	vldr	d7, [r3]
 8002fec:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff0:	eef0 0a67 	vmov.f32	s1, s15
 8002ff4:	f000 fad4 	bl	80035a0 <ln_deg_to_rad>
 8002ff8:	ec51 0b10 	vmov	r0, r1, d0
 8002ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003000:	f7fd f8f8 	bl	80001f4 <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003010:	f7fd f8ee 	bl	80001f0 <__aeabi_dsub>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	/* hence formula 12.5 and 12.6 give */
	/* convert to radians - hour angle, observers latitude, object declination */
	latitude = ln_deg_to_rad (observer->lat);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003022:	eeb0 0a47 	vmov.f32	s0, s14
 8003026:	eef0 0a67 	vmov.f32	s1, s15
 800302a:	f000 fab9 	bl	80035a0 <ln_deg_to_rad>
 800302e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	declination = ln_deg_to_rad (object->dec);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	ed93 7b02 	vldr	d7, [r3, #8]
 8003038:	eeb0 0a47 	vmov.f32	s0, s14
 800303c:	eef0 0a67 	vmov.f32	s1, s15
 8003040:	f000 faae 	bl	80035a0 <ln_deg_to_rad>
 8003044:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

	/* formula 12.6 *; missuse of A (you have been warned) */
	A = sin (latitude) * sin (declination) + cos (latitude) * cos (declination) * cos (H);
 8003048:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800304c:	f004 fa44 	bl	80074d8 <sin>
 8003050:	ec59 8b10 	vmov	r8, r9, d0
 8003054:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003058:	f004 fa3e 	bl	80074d8 <sin>
 800305c:	ec53 2b10 	vmov	r2, r3, d0
 8003060:	4640      	mov	r0, r8
 8003062:	4649      	mov	r1, r9
 8003064:	f7fd fa7c 	bl	8000560 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4690      	mov	r8, r2
 800306e:	4699      	mov	r9, r3
 8003070:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8003074:	f004 f950 	bl	8007318 <cos>
 8003078:	ec5b ab10 	vmov	sl, fp, d0
 800307c:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003080:	f004 f94a 	bl	8007318 <cos>
 8003084:	ec53 2b10 	vmov	r2, r3, d0
 8003088:	4650      	mov	r0, sl
 800308a:	4659      	mov	r1, fp
 800308c:	f7fd fa68 	bl	8000560 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4692      	mov	sl, r2
 8003096:	469b      	mov	fp, r3
 8003098:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800309c:	f004 f93c 	bl	8007318 <cos>
 80030a0:	ec53 2b10 	vmov	r2, r3, d0
 80030a4:	4650      	mov	r0, sl
 80030a6:	4659      	mov	r1, fp
 80030a8:	f7fd fa5a 	bl	8000560 <__aeabi_dmul>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd f89e 	bl	80001f4 <__adddf3>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	h = asin (A);
 80030c0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80030c4:	f004 fac8 	bl	8007658 <asin>
 80030c8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

	/* convert back to degrees */
	position->alt = ln_rad_to_deg (h);   
 80030cc:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80030d0:	f000 fa4a 	bl	8003568 <ln_rad_to_deg>
 80030d4:	eeb0 7a40 	vmov.f32	s14, s0
 80030d8:	eef0 7a60 	vmov.f32	s15, s1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	ed83 7b02 	vstr	d7, [r3, #8]

	/* zenith distance, Telescope Control 6.8a */
	Z = acos (A);
 80030e2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80030e6:	f004 fa83 	bl	80075f0 <acos>
 80030ea:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* is'n there better way to compute that? */
	Zs = sin (Z);
 80030ee:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80030f2:	f004 f9f1 	bl	80074d8 <sin>
 80030f6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* sane check for zenith distance; don't try to divide by 0 */
	if (fabs(Zs) < 1e-5) {
 80030fa:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003102:	a390      	add	r3, pc, #576	; (adr r3, 8003344 <ln_get_hrz_from_equ_sidereal_time+0x39c>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd fc9a 	bl	8000a44 <__aeabi_dcmplt>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d057      	beq.n	80031c6 <ln_get_hrz_from_equ_sidereal_time+0x21e>
		if (object->dec > 0)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f7fd fcac 	bl	8000a80 <__aeabi_dcmpgt>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <ln_get_hrz_from_equ_sidereal_time+0x194>
			position->az = 180;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	4b7e      	ldr	r3, [pc, #504]	; (8003330 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 8003136:	e9c1 2300 	strd	r2, r3, [r1]
 800313a:	e006      	b.n	800314a <ln_get_hrz_from_equ_sidereal_time+0x1a2>
		else
			position->az = 0;
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9c1 2300 	strd	r2, r3, [r1]
		if ((object->dec > 0 && observer->lat > 0)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f7fd fc92 	bl	8000a80 <__aeabi_dcmpgt>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <ln_get_hrz_from_equ_sidereal_time+0x1d2>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	f7fd fc86 	bl	8000a80 <__aeabi_dcmpgt>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d117      	bne.n	80031aa <ln_get_hrz_from_equ_sidereal_time+0x202>
		   || (object->dec < 0 && observer->lat < 0))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	f7fd fc5c 	bl	8000a44 <__aeabi_dcmplt>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d012      	beq.n	80031b8 <ln_get_hrz_from_equ_sidereal_time+0x210>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f7fd fc50 	bl	8000a44 <__aeabi_dcmplt>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <ln_get_hrz_from_equ_sidereal_time+0x210>
		  	position->alt = 90;
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <ln_get_hrz_from_equ_sidereal_time+0x38c>)
 80031b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		else
		  	position->alt = -90;
		return;
 80031b6:	e0b4      	b.n	8003322 <ln_get_hrz_from_equ_sidereal_time+0x37a>
		  	position->alt = -90;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	4b5e      	ldr	r3, [pc, #376]	; (8003338 <ln_get_hrz_from_equ_sidereal_time+0x390>)
 80031c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 80031c4:	e0ad      	b.n	8003322 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}

	/* formulas TC 6.8d Taff 1991, pp. 2 and 13 - vector transformations */
	As = (cos (declination) * sin (H)) / Zs;
 80031c6:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80031ca:	f004 f8a5 	bl	8007318 <cos>
 80031ce:	ec55 4b10 	vmov	r4, r5, d0
 80031d2:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80031d6:	f004 f97f 	bl	80074d8 <sin>
 80031da:	ec53 2b10 	vmov	r2, r3, d0
 80031de:	4620      	mov	r0, r4
 80031e0:	4629      	mov	r1, r5
 80031e2:	f7fd f9bd 	bl	8000560 <__aeabi_dmul>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f2:	f7fd fadf 	bl	80007b4 <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	Ac = (sin (latitude) * cos (declination) * cos (H) - cos (latitude) * sin (declination)) / Zs;
 80031fe:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8003202:	f004 f969 	bl	80074d8 <sin>
 8003206:	ec55 4b10 	vmov	r4, r5, d0
 800320a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800320e:	f004 f883 	bl	8007318 <cos>
 8003212:	ec53 2b10 	vmov	r2, r3, d0
 8003216:	4620      	mov	r0, r4
 8003218:	4629      	mov	r1, r5
 800321a:	f7fd f9a1 	bl	8000560 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4614      	mov	r4, r2
 8003224:	461d      	mov	r5, r3
 8003226:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800322a:	f004 f875 	bl	8007318 <cos>
 800322e:	ec53 2b10 	vmov	r2, r3, d0
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd f993 	bl	8000560 <__aeabi_dmul>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4614      	mov	r4, r2
 8003240:	461d      	mov	r5, r3
 8003242:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8003246:	f004 f867 	bl	8007318 <cos>
 800324a:	ec59 8b10 	vmov	r8, r9, d0
 800324e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003252:	f004 f941 	bl	80074d8 <sin>
 8003256:	ec53 2b10 	vmov	r2, r3, d0
 800325a:	4640      	mov	r0, r8
 800325c:	4649      	mov	r1, r9
 800325e:	f7fd f97f 	bl	8000560 <__aeabi_dmul>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fc ffc1 	bl	80001f0 <__aeabi_dsub>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800327a:	f7fd fa9b 	bl	80007b4 <__aeabi_ddiv>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// don't blom at atan2
	if (Ac == 0 && As == 0) {
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003292:	f7fd fbcd 	bl	8000a30 <__aeabi_dcmpeq>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d025      	beq.n	80032e8 <ln_get_hrz_from_equ_sidereal_time+0x340>
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032a8:	f7fd fbc2 	bl	8000a30 <__aeabi_dcmpeq>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01a      	beq.n	80032e8 <ln_get_hrz_from_equ_sidereal_time+0x340>
	        if (object->dec > 0)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	f7fd fbde 	bl	8000a80 <__aeabi_dcmpgt>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <ln_get_hrz_from_equ_sidereal_time+0x330>
			position->az = 180.0;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <ln_get_hrz_from_equ_sidereal_time+0x388>)
 80032d2:	e9c1 2300 	strd	r2, r3, [r1]
		else
			position->az = 0.0;
		return;
 80032d6:	e024      	b.n	8003322 <ln_get_hrz_from_equ_sidereal_time+0x37a>
			position->az = 0.0;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 80032e6:	e01c      	b.n	8003322 <ln_get_hrz_from_equ_sidereal_time+0x37a>
	}
	A = atan2 (As, Ac);
 80032e8:	ed97 1b06 	vldr	d1, [r7, #24]
 80032ec:	ed97 0b08 	vldr	d0, [r7, #32]
 80032f0:	f004 f9e6 	bl	80076c0 <atan2>
 80032f4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* convert back to degrees */
	position->az = ln_range_degrees(ln_rad_to_deg (A));
 80032f8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80032fc:	f000 f934 	bl	8003568 <ln_rad_to_deg>
 8003300:	eeb0 7a40 	vmov.f32	s14, s0
 8003304:	eef0 7a60 	vmov.f32	s15, s1
 8003308:	eeb0 0a47 	vmov.f32	s0, s14
 800330c:	eef0 0a67 	vmov.f32	s1, s15
 8003310:	f000 faac 	bl	800386c <ln_range_degrees>
 8003314:	eeb0 7a40 	vmov.f32	s14, s0
 8003318:	eef0 7a60 	vmov.f32	s15, s1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	ed83 7b00 	vstr	d7, [r3]
}
 8003322:	3768      	adds	r7, #104	; 0x68
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	40668000 	.word	0x40668000
 8003334:	40568000 	.word	0x40568000
 8003338:	c0568000 	.word	0xc0568000
 800333c:	382d7365 	.word	0x382d7365
 8003340:	3fd0c152 	.word	0x3fd0c152
 8003344:	88e368f1 	.word	0x88e368f1
 8003348:	3ee4f8b5 	.word	0x3ee4f8b5
 800334c:	00000000 	.word	0x00000000

08003350 <ln_get_equ_from_hrz>:
*
* Transform an objects horizontal coordinates into equatorial coordinates
* for the given julian day and observers position.
*/
void ln_get_equ_from_hrz (struct ln_hrz_posn * object, struct ln_lnlat_posn * observer, double JD, struct ln_equ_posn * position)
{
 8003350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003354:	ed2d 8b02 	vpush	{d8}
 8003358:	b094      	sub	sp, #80	; 0x50
 800335a:	af00      	add	r7, sp, #0
 800335c:	6178      	str	r0, [r7, #20]
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	ed87 0b02 	vstr	d0, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
	long double H, longitude, declination, latitude, A, h, sidereal;

	/* change observer/object position into radians */

	/* object alt/az */
	A = ln_deg_to_rad (object->az);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	ed93 7b00 	vldr	d7, [r3]
 800336c:	eeb0 0a47 	vmov.f32	s0, s14
 8003370:	eef0 0a67 	vmov.f32	s1, s15
 8003374:	f000 f914 	bl	80035a0 <ln_deg_to_rad>
 8003378:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	h = ln_deg_to_rad (object->alt);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003382:	eeb0 0a47 	vmov.f32	s0, s14
 8003386:	eef0 0a67 	vmov.f32	s1, s15
 800338a:	f000 f909 	bl	80035a0 <ln_deg_to_rad>
 800338e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	/* observer long / lat */
	longitude = ln_deg_to_rad (observer->lng);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	ed93 7b00 	vldr	d7, [r3]
 8003398:	eeb0 0a47 	vmov.f32	s0, s14
 800339c:	eef0 0a67 	vmov.f32	s1, s15
 80033a0:	f000 f8fe 	bl	80035a0 <ln_deg_to_rad>
 80033a4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	latitude = ln_deg_to_rad (observer->lat);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80033ae:	eeb0 0a47 	vmov.f32	s0, s14
 80033b2:	eef0 0a67 	vmov.f32	s1, s15
 80033b6:	f000 f8f3 	bl	80035a0 <ln_deg_to_rad>
 80033ba:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	/* equ on pg89 */
	H = atan2 (sin (A), ( cos(A) * sin (latitude) + tan(h) * cos (latitude)));
 80033be:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80033c2:	f004 f889 	bl	80074d8 <sin>
 80033c6:	eeb0 8a40 	vmov.f32	s16, s0
 80033ca:	eef0 8a60 	vmov.f32	s17, s1
 80033ce:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80033d2:	f003 ffa1 	bl	8007318 <cos>
 80033d6:	ec55 4b10 	vmov	r4, r5, d0
 80033da:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80033de:	f004 f87b 	bl	80074d8 <sin>
 80033e2:	ec53 2b10 	vmov	r2, r3, d0
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fd f8b9 	bl	8000560 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	461d      	mov	r5, r3
 80033f6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80033fa:	f004 f8c5 	bl	8007588 <tan>
 80033fe:	ec59 8b10 	vmov	r8, r9, d0
 8003402:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8003406:	f003 ff87 	bl	8007318 <cos>
 800340a:	ec53 2b10 	vmov	r2, r3, d0
 800340e:	4640      	mov	r0, r8
 8003410:	4649      	mov	r1, r9
 8003412:	f7fd f8a5 	bl	8000560 <__aeabi_dmul>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fc fee9 	bl	80001f4 <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	ec43 2b17 	vmov	d7, r2, r3
 800342a:	eeb0 1a47 	vmov.f32	s2, s14
 800342e:	eef0 1a67 	vmov.f32	s3, s15
 8003432:	eeb0 0a48 	vmov.f32	s0, s16
 8003436:	eef0 0a68 	vmov.f32	s1, s17
 800343a:	f004 f941 	bl	80076c0 <atan2>
 800343e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	declination = sin(latitude) * sin(h) - cos(latitude) * cos(h) * cos(A);
 8003442:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8003446:	f004 f847 	bl	80074d8 <sin>
 800344a:	ec55 4b10 	vmov	r4, r5, d0
 800344e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003452:	f004 f841 	bl	80074d8 <sin>
 8003456:	ec53 2b10 	vmov	r2, r3, d0
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fd f87f 	bl	8000560 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4614      	mov	r4, r2
 8003468:	461d      	mov	r5, r3
 800346a:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800346e:	f003 ff53 	bl	8007318 <cos>
 8003472:	ec59 8b10 	vmov	r8, r9, d0
 8003476:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800347a:	f003 ff4d 	bl	8007318 <cos>
 800347e:	ec53 2b10 	vmov	r2, r3, d0
 8003482:	4640      	mov	r0, r8
 8003484:	4649      	mov	r1, r9
 8003486:	f7fd f86b 	bl	8000560 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4690      	mov	r8, r2
 8003490:	4699      	mov	r9, r3
 8003492:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003496:	f003 ff3f 	bl	8007318 <cos>
 800349a:	ec53 2b10 	vmov	r2, r3, d0
 800349e:	4640      	mov	r0, r8
 80034a0:	4649      	mov	r1, r9
 80034a2:	f7fd f85d 	bl	8000560 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f7fc fe9f 	bl	80001f0 <__aeabi_dsub>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	declination = asin (declination);
 80034ba:	ed97 0b08 	vldr	d0, [r7, #32]
 80034be:	f004 f8cb 	bl	8007658 <asin>
 80034c2:	ed87 0b08 	vstr	d0, [r7, #32]

	/* get ra = sidereal - longitude + H and change sidereal to radians*/
	sidereal = ln_get_apparent_sidereal_time(JD);
 80034c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80034ca:	f7ff fd01 	bl	8002ed0 <ln_get_apparent_sidereal_time>
 80034ce:	ed87 0b06 	vstr	d0, [r7, #24]
	sidereal *= 2.0 * M_PI / 24.0;
 80034d2:	a323      	add	r3, pc, #140	; (adr r3, 8003560 <ln_get_equ_from_hrz+0x210>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034dc:	f7fd f840 	bl	8000560 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	position->ra = ln_range_degrees(ln_rad_to_deg (sidereal - H + longitude));
 80034e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034f0:	f7fc fe7e 	bl	80001f0 <__aeabi_dsub>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003500:	f7fc fe78 	bl	80001f4 <__adddf3>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	ec43 2b17 	vmov	d7, r2, r3
 800350c:	eeb0 0a47 	vmov.f32	s0, s14
 8003510:	eef0 0a67 	vmov.f32	s1, s15
 8003514:	f000 f828 	bl	8003568 <ln_rad_to_deg>
 8003518:	eeb0 7a40 	vmov.f32	s14, s0
 800351c:	eef0 7a60 	vmov.f32	s15, s1
 8003520:	eeb0 0a47 	vmov.f32	s0, s14
 8003524:	eef0 0a67 	vmov.f32	s1, s15
 8003528:	f000 f9a0 	bl	800386c <ln_range_degrees>
 800352c:	eeb0 7a40 	vmov.f32	s14, s0
 8003530:	eef0 7a60 	vmov.f32	s15, s1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	ed83 7b00 	vstr	d7, [r3]
	position->dec = ln_rad_to_deg (declination);
 800353a:	ed97 0b08 	vldr	d0, [r7, #32]
 800353e:	f000 f813 	bl	8003568 <ln_rad_to_deg>
 8003542:	eeb0 7a40 	vmov.f32	s14, s0
 8003546:	eef0 7a60 	vmov.f32	s15, s1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	3750      	adds	r7, #80	; 0x50
 8003554:	46bd      	mov	sp, r7
 8003556:	ecbd 8b02 	vpop	{d8}
 800355a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800355e:	bf00      	nop
 8003560:	382d7365 	.word	0x382d7365
 8003564:	3fd0c152 	.word	0x3fd0c152

08003568 <ln_rad_to_deg>:
}


/* convert radians to degrees */
double ln_rad_to_deg (double radians)
{   
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	ed87 0b00 	vstr	d0, [r7]
	return (radians * R2D);
 8003572:	a309      	add	r3, pc, #36	; (adr r3, 8003598 <ln_rad_to_deg+0x30>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800357c:	f7fc fff0 	bl	8000560 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	ec43 2b17 	vmov	d7, r2, r3
}    
 8003588:	eeb0 0a47 	vmov.f32	s0, s14
 800358c:	eef0 0a67 	vmov.f32	s1, s15
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	1a63c1f8 	.word	0x1a63c1f8
 800359c:	404ca5dc 	.word	0x404ca5dc

080035a0 <ln_deg_to_rad>:

/* convert degrees to radians */
double ln_deg_to_rad (double degrees)
{   
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	ed87 0b00 	vstr	d0, [r7]
	return (degrees * D2R);
 80035aa:	a309      	add	r3, pc, #36	; (adr r3, 80035d0 <ln_deg_to_rad+0x30>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035b4:	f7fc ffd4 	bl	8000560 <__aeabi_dmul>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	ec43 2b17 	vmov	d7, r2, r3
}    
 80035c0:	eeb0 0a47 	vmov.f32	s0, s14
 80035c4:	eef0 0a67 	vmov.f32	s1, s15
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	a2529d39 	.word	0xa2529d39
 80035d4:	3f91df46 	.word	0x3f91df46

080035d8 <ln_hms_to_deg>:

/* convert hours:mins:secs to degrees */
double ln_hms_to_deg (struct ln_hms *hms)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees = ((double)hms->hours / 24) * 360;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ff41 	bl	800046c <__aeabi_ui2d>
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <ln_hms_to_deg+0xbc>)
 80035f0:	f7fd f8e0 	bl	80007b4 <__aeabi_ddiv>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <ln_hms_to_deg+0xc0>)
 8003602:	f7fc ffad 	bl	8000560 <__aeabi_dmul>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->minutes / 60) * 15;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	885b      	ldrh	r3, [r3, #2]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ff2a 	bl	800046c <__aeabi_ui2d>
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <ln_hms_to_deg+0xc4>)
 800361e:	f7fd f8c9 	bl	80007b4 <__aeabi_ddiv>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <ln_hms_to_deg+0xc8>)
 8003630:	f7fc ff96 	bl	8000560 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800363c:	f7fc fdda 	bl	80001f4 <__adddf3>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += ((double)hms->seconds / 60) * 0.25;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <ln_hms_to_deg+0xc4>)
 8003654:	f7fd f8ae 	bl	80007b4 <__aeabi_ddiv>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <ln_hms_to_deg+0xcc>)
 8003666:	f7fc ff7b 	bl	8000560 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003672:	f7fc fdbf 	bl	80001f4 <__adddf3>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    
    return degrees;
 800367e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003682:	ec43 2b17 	vmov	d7, r2, r3
}
 8003686:	eeb0 0a47 	vmov.f32	s0, s14
 800368a:	eef0 0a67 	vmov.f32	s1, s15
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40380000 	.word	0x40380000
 8003698:	40768000 	.word	0x40768000
 800369c:	404e0000 	.word	0x404e0000
 80036a0:	402e0000 	.word	0x402e0000
 80036a4:	3fd00000 	.word	0x3fd00000

080036a8 <ln_dms_to_deg>:
}


/* convert dms to degrees */
double ln_dms_to_deg (struct ln_dms *dms)
{
 80036a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    double degrees;
    
    degrees =  fabs((double)dms->degrees);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	885b      	ldrh	r3, [r3, #2]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc fed8 	bl	800046c <__aeabi_ui2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->minutes / 60);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	889b      	ldrh	r3, [r3, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fc fecf 	bl	800046c <__aeabi_ui2d>
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <ln_dms_to_deg+0xa8>)
 80036d4:	f7fd f86e 	bl	80007b4 <__aeabi_ddiv>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e0:	f7fc fd88 	bl	80001f4 <__adddf3>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    degrees += fabs((double)dms->seconds / 3600);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80036f2:	a315      	add	r3, pc, #84	; (adr r3, 8003748 <ln_dms_to_deg+0xa0>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fd f85c 	bl	80007b4 <__aeabi_ddiv>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4690      	mov	r8, r2
 8003702:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800370e:	f7fc fd71 	bl	80001f4 <__adddf3>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	e9c7 2302 	strd	r2, r3, [r7, #8]
	
	// negative ?
	if (dms->neg)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <ln_dms_to_deg+0x86>
		degrees *= -1.0;
 8003722:	68bc      	ldr	r4, [r7, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800372a:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return degrees;
 800372e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003732:	ec43 2b17 	vmov	d7, r2, r3
}
 8003736:	eeb0 0a47 	vmov.f32	s0, s14
 800373a:	eef0 0a67 	vmov.f32	s1, s15
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003746:	bf00      	nop
 8003748:	00000000 	.word	0x00000000
 800374c:	40ac2000 	.word	0x40ac2000
 8003750:	404e0000 	.word	0x404e0000

08003754 <ln_deg_to_dms>:
    return radians;
}

/* convert degrees to dms */
void ln_deg_to_dms (double degrees, struct ln_dms * dms)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	ed87 0b02 	vstr	d0, [r7, #8]
 800375e:	6078      	str	r0, [r7, #4]
    double dtemp;

    if (degrees >= 0) 
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800376c:	f7fd f97e 	bl	8000a6c <__aeabi_dcmpge>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <ln_deg_to_dms+0x2a>
		dms->neg = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e002      	b.n	8003784 <ln_deg_to_dms+0x30>
	else
		dms->neg = 1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	801a      	strh	r2, [r3, #0]

	degrees = fabs(degrees);
 8003784:	68bc      	ldr	r4, [r7, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800378c:	e9c7 4502 	strd	r4, r5, [r7, #8]
	dms->degrees = (int)degrees;
 8003790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003794:	f7fd f994 	bl	8000ac0 <__aeabi_d2iz>
 8003798:	4603      	mov	r3, r0
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	805a      	strh	r2, [r3, #2]
	
    /* multiply remainder by 60 to get minutes */
    dtemp = 60*(degrees - dms->degrees);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	885b      	ldrh	r3, [r3, #2]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fe71 	bl	800048c <__aeabi_i2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037b2:	f7fc fd1d 	bl	80001f0 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	4b28      	ldr	r3, [pc, #160]	; (8003864 <ln_deg_to_dms+0x110>)
 80037c4:	f7fc fecc 	bl	8000560 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    dms->minutes = (unsigned short)dtemp;
 80037d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037d4:	f7fd f99c 	bl	8000b10 <__aeabi_d2uiz>
 80037d8:	4603      	mov	r3, r0
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	809a      	strh	r2, [r3, #4]
    
    /* multiply remainder by 60 to get seconds */
    dms->seconds = 60*(dtemp - dms->minutes);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	889b      	ldrh	r3, [r3, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fe51 	bl	800048c <__aeabi_i2d>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037f2:	f7fc fcfd 	bl	80001f0 <__aeabi_dsub>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <ln_deg_to_dms+0x110>)
 8003804:	f7fc feac 	bl	8000560 <__aeabi_dmul>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    
    /* catch any overflows */
    if (dms->seconds > 59) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <ln_deg_to_dms+0x114>)
 800381e:	f7fd f92f 	bl	8000a80 <__aeabi_dcmpgt>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00c      	beq.n	8003842 <ln_deg_to_dms+0xee>
    	dms->seconds = 0;
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	dms->minutes ++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	3301      	adds	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	809a      	strh	r2, [r3, #4]
    }
    if (dms->minutes > 59) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	889b      	ldrh	r3, [r3, #4]
 8003846:	2b3b      	cmp	r3, #59	; 0x3b
 8003848:	d908      	bls.n	800385c <ln_deg_to_dms+0x108>
    	dms->minutes = 0;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	809a      	strh	r2, [r3, #4]
    	dms->degrees ++;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	885b      	ldrh	r3, [r3, #2]
 8003854:	3301      	adds	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	805a      	strh	r2, [r3, #2]
    }
}
 800385c:	bf00      	nop
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	404e0000 	.word	0x404e0000
 8003868:	404d8000 	.word	0x404d8000

0800386c <ln_range_degrees>:
}


/* puts a large angle in the correct range 0 - 360 degrees */
double ln_range_degrees (double angle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	ed87 0b00 	vstr	d0, [r7]
    double temp;
    
    if (angle >= 0.0 && angle < 360.0)
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003882:	f7fd f8f3 	bl	8000a6c <__aeabi_dcmpge>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <ln_range_degrees+0x3a>
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <ln_range_degrees+0xc8>)
 8003892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003896:	f7fd f8d5 	bl	8000a44 <__aeabi_dcmplt>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <ln_range_degrees+0x3a>
    	return angle;
 80038a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a4:	e03d      	b.n	8003922 <ln_range_degrees+0xb6>
 
	temp = (int)(angle / 360);
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <ln_range_degrees+0xc8>)
 80038ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038b0:	f7fc ff80 	bl	80007b4 <__aeabi_ddiv>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f900 	bl	8000ac0 <__aeabi_d2iz>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fde2 	bl	800048c <__aeabi_i2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (angle < 0.0)
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038dc:	f7fd f8b2 	bl	8000a44 <__aeabi_dcmplt>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <ln_range_degrees+0x90>
	   	temp --;
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <ln_range_degrees+0xcc>)
 80038ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f0:	f7fc fc7e 	bl	80001f0 <__aeabi_dsub>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    temp *= 360;
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <ln_range_degrees+0xc8>)
 8003902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003906:	f7fc fe2b 	bl	8000560 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return angle - temp;
 8003912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800391a:	f7fc fc69 	bl	80001f0 <__aeabi_dsub>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
}
 8003922:	ec43 2b17 	vmov	d7, r2, r3
 8003926:	eeb0 0a47 	vmov.f32	s0, s14
 800392a:	eef0 0a67 	vmov.f32	s1, s15
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40768000 	.word	0x40768000
 8003938:	3ff00000 	.word	0x3ff00000

0800393c <ln_hequ_to_equ>:
/*! \fn void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
* \brief human readable equatorial position to double equatorial position
* \ingroup conversion
*/
void ln_hequ_to_equ (struct lnh_equ_posn * hpos, struct ln_equ_posn * pos)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	pos->ra = ln_hms_to_deg (&hpos->ra);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fe45 	bl	80035d8 <ln_hms_to_deg>
 800394e:	eeb0 7a40 	vmov.f32	s14, s0
 8003952:	eef0 7a60 	vmov.f32	s15, s1
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	ed83 7b00 	vstr	d7, [r3]
	pos->dec = ln_dms_to_deg (&hpos->dec);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3310      	adds	r3, #16
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fea1 	bl	80036a8 <ln_dms_to_deg>
 8003966:	eeb0 7a40 	vmov.f32	s14, s0
 800396a:	eef0 7a60 	vmov.f32	s15, s1
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ln_hrz_to_hhrz>:
/*! \fn void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
* \brief double horizontal position to human readable horizontal position
* \ingroup conversion
*/
void ln_hrz_to_hhrz (struct ln_hrz_posn * pos, struct lnh_hrz_posn * hpos)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	ln_deg_to_dms (pos->alt, &hpos->alt);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	ed93 7b02 	vldr	d7, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	eeb0 0a47 	vmov.f32	s0, s14
 8003996:	eef0 0a67 	vmov.f32	s1, s15
 800399a:	f7ff fedb 	bl	8003754 <ln_deg_to_dms>
	ln_deg_to_dms (pos->az, &hpos->az);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	ed93 7b00 	vldr	d7, [r3]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	eeb0 0a47 	vmov.f32	s0, s14
 80039ac:	eef0 0a67 	vmov.f32	s1, s15
 80039b0:	f7ff fed0 	bl	8003754 <ln_deg_to_dms>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <ln_hlnlat_to_lnlat>:
/*! \fn void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
* \brief human readable long/lat position to double long/lat position
* \ingroup conversion
*/
void ln_hlnlat_to_lnlat (struct lnh_lnlat_posn * hpos, struct ln_lnlat_posn * pos)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	pos->lng = ln_dms_to_deg (&hpos->lng);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fe6d 	bl	80036a8 <ln_dms_to_deg>
 80039ce:	eeb0 7a40 	vmov.f32	s14, s0
 80039d2:	eef0 7a60 	vmov.f32	s15, s1
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	ed83 7b00 	vstr	d7, [r3]
	pos->lat = ln_dms_to_deg (&hpos->lat);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3310      	adds	r3, #16
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fe61 	bl	80036a8 <ln_dms_to_deg>
 80039e6:	eeb0 7a40 	vmov.f32	s14, s0
 80039ea:	eef0 7a60 	vmov.f32	s15, s1
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b0c8      	sub	sp, #288	; 0x120
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a02:	f000 fbb3 	bl	800416c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a06:	f000 f937 	bl	8003c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a0a:	f000 f9e7 	bl	8003ddc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003a0e:	f000 f985 	bl	8003d1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003a12:	f000 f9b3 	bl	8003d7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8003a16:	f7fe f83d 	bl	8001a94 <Ringbuf_init>
//  HAL_Delay(500);
  uint32_t microsReady, microsCurrent; // unsigned long
  microsReady = 30000; // 30s
 8003a1a:	f247 5330 	movw	r3, #30000	; 0x7530
 8003a1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  int flag = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  ========== GPS Ring Buffer ==================================
	  if (Wait_for("GG") == 1) { // "GPGGA" - need "A" for decodeGGA to work properly
 8003a28:	4885      	ldr	r0, [pc, #532]	; (8003c40 <main+0x244>)
 8003a2a:	f7fe f95f 	bl	8001cec <Wait_for>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10b      	bne.n	8003a4c <main+0x50>
		  int value_1 = Copy_upto("*", GGA); // 1=successful copy
 8003a34:	4983      	ldr	r1, [pc, #524]	; (8003c44 <main+0x248>)
 8003a36:	4884      	ldr	r0, [pc, #528]	; (8003c48 <main+0x24c>)
 8003a38:	f7fe f8dc 	bl	8001bf4 <Copy_upto>
 8003a3c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		  int value_2 = decodeGGA(GGA,&gpsData.ggastruct); // 0=fixed; 1=error
 8003a40:	4982      	ldr	r1, [pc, #520]	; (8003c4c <main+0x250>)
 8003a42:	4880      	ldr	r0, [pc, #512]	; (8003c44 <main+0x248>)
 8003a44:	f7fd fa58 	bl	8000ef8 <decodeGGA>
 8003a48:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	  }

	  if (Wait_for("RM") == 1) { // "GPRMC" - need "C" for decodeRMC to work properly
 8003a4c:	4880      	ldr	r0, [pc, #512]	; (8003c50 <main+0x254>)
 8003a4e:	f7fe f94d 	bl	8001cec <Wait_for>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10b      	bne.n	8003a70 <main+0x74>
		  int value_3 = Copy_upto("*", RMC); // 1=successful copy
 8003a58:	497e      	ldr	r1, [pc, #504]	; (8003c54 <main+0x258>)
 8003a5a:	487b      	ldr	r0, [pc, #492]	; (8003c48 <main+0x24c>)
 8003a5c:	f7fe f8ca 	bl	8001bf4 <Copy_upto>
 8003a60:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		  int value_4 = decodeRMC(RMC,&gpsData.rmcstruct); // 0=fixed; 1=error
 8003a64:	497c      	ldr	r1, [pc, #496]	; (8003c58 <main+0x25c>)
 8003a66:	487b      	ldr	r0, [pc, #492]	; (8003c54 <main+0x258>)
 8003a68:	f7fd fdd6 	bl	8001618 <decodeRMC>
 8003a6c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	  }


	  microsCurrent = HAL_GetTick();
 8003a70:	f000 fbec 	bl	800424c <HAL_GetTick>
 8003a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	  char ready_msg[] = "\r\n GPS data is stable and ready for reading.";
 8003a78:	4b78      	ldr	r3, [pc, #480]	; (8003c5c <main+0x260>)
 8003a7a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8003a7e:	461d      	mov	r5, r3
 8003a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a8c:	c407      	stmia	r4!, {r0, r1, r2}
 8003a8e:	7023      	strb	r3, [r4, #0]
	  if ( (microsCurrent >= microsReady) && (flag == 0) ) { // 30s
 8003a90:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003a94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d30d      	bcc.n	8003ab8 <main+0xbc>
 8003a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <main+0xbc>
		  flag = 1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		  HAL_UART_Transmit(&huart2, ready_msg, sizeof(ready_msg), 10);
 8003aaa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003aae:	230a      	movs	r3, #10
 8003ab0:	222d      	movs	r2, #45	; 0x2d
 8003ab2:	486b      	ldr	r0, [pc, #428]	; (8003c60 <main+0x264>)
 8003ab4:	f002 f940 	bl	8005d38 <HAL_UART_Transmit>
	  }
	  // check if time is still incrementing

//	  ========== Conversion ==================================
	  // get lat -> Encode(lat...)
	  float lat = gpsData.ggastruct.lcation.latitude; // float - check if this works
 8003ab8:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <main+0x250>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		 * lat: 43.665620
		 * lng: -79.398590
		 * DMS lat: 43° 39' 56.232'' N
		 * DMS lng: 79° 23' 54.924'' W
		 */
		hobserver.lng.neg = 1;
 8003ac0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ac4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ac8:	2201      	movs	r2, #1
 8003aca:	801a      	strh	r2, [r3, #0]
		hobserver.lng.degrees = 79;
 8003acc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ad0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ad4:	224f      	movs	r2, #79	; 0x4f
 8003ad6:	805a      	strh	r2, [r3, #2]
		hobserver.lng.minutes = 23;
 8003ad8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003adc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ae0:	2217      	movs	r2, #23
 8003ae2:	809a      	strh	r2, [r3, #4]
		hobserver.lng.seconds = 54;
 8003ae4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ae8:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	4b5c      	ldr	r3, [pc, #368]	; (8003c64 <main+0x268>)
 8003af2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		hobserver.lat.neg = 0;
 8003af6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003afa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003afe:	2200      	movs	r2, #0
 8003b00:	821a      	strh	r2, [r3, #16]
		hobserver.lat.degrees = 43;
 8003b02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b0a:	222b      	movs	r2, #43	; 0x2b
 8003b0c:	825a      	strh	r2, [r3, #18]
		hobserver.lat.minutes = 39;
 8003b0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b12:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b16:	2227      	movs	r2, #39	; 0x27
 8003b18:	829a      	strh	r2, [r3, #20]
		hobserver.lat.seconds = 56;
 8003b1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b1e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <main+0x26c>)
 8003b28:	e9c1 2306 	strd	r2, r3, [r1, #24]

		/* Alnilam
		 * RA: 05h 36m 12s
		 * DEC: -01° 12' 06"
		 */
		hobject.ra.hours = 5;
 8003b2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b34:	2205      	movs	r2, #5
 8003b36:	801a      	strh	r2, [r3, #0]
		hobject.ra.minutes = 36;
 8003b38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b40:	2224      	movs	r2, #36	; 0x24
 8003b42:	805a      	strh	r2, [r3, #2]
		hobject.ra.seconds = 12;
 8003b44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b48:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <main+0x270>)
 8003b52:	e9c1 2302 	strd	r2, r3, [r1, #8]
		hobject.dec.neg = 1;
 8003b56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b5e:	2201      	movs	r2, #1
 8003b60:	821a      	strh	r2, [r3, #16]
		hobject.dec.degrees = 1;
 8003b62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	825a      	strh	r2, [r3, #18]
		hobject.dec.minutes = 12;
 8003b6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b76:	220c      	movs	r2, #12
 8003b78:	829a      	strh	r2, [r3, #20]
		hobject.dec.seconds = 6;
 8003b7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b7e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <main+0x274>)
 8003b88:	e9c1 2306 	strd	r2, r3, [r1, #24]

		/* UT date and time */
		date.years = 2023;
 8003b8c:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
		date.months = 6;
 8003b92:	2306      	movs	r3, #6
 8003b94:	667b      	str	r3, [r7, #100]	; 0x64
		date.days = 13;
 8003b96:	230d      	movs	r3, #13
 8003b98:	66bb      	str	r3, [r7, #104]	; 0x68
		date.hours = 21;
 8003b9a:	2315      	movs	r3, #21
 8003b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
		date.minutes = 6;
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	673b      	str	r3, [r7, #112]	; 0x70
		date.seconds = 45;
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <main+0x278>)
 8003ba8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

		JD = ln_get_julian_day (&date);
 8003bac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fc9d 	bl	80024f0 <ln_get_julian_day>
 8003bb6:	ed87 0b3c 	vstr	d0, [r7, #240]	; 0xf0
		ln_hequ_to_equ (&hobject, &object);
 8003bba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff feba 	bl	800393c <ln_hequ_to_equ>
		ln_hlnlat_to_lnlat (&hobserver, &observer);
 8003bc8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003bcc:	f107 0320 	add.w	r3, r7, #32
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fef2 	bl	80039bc <ln_hlnlat_to_lnlat>

		ln_get_hrz_from_equ (&object, &observer, JD, &hrz);
 8003bd8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003bdc:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003be0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003be4:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff f9c1 	bl	8002f70 <ln_get_hrz_from_equ>
		ln_hrz_to_hhrz(&hrz, &hhrz);
 8003bee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003bf2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff febf 	bl	800397c <ln_hrz_to_hhrz>

		ln_get_equ_from_hrz (&hrz, &observer, JD, &equ); // <-- check this
 8003bfe:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003c02:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003c06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c0a:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fb9e 	bl	8003350 <ln_get_equ_from_hrz>

		/* random code */
		int count = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		for (int i=0; i<5;i++) {
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003c20:	e009      	b.n	8003c36 <main+0x23a>
		  count++;
 8003c22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		for (int i=0; i<5;i++) {
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c30:	3301      	adds	r3, #1
 8003c32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	ddf1      	ble.n	8003c22 <main+0x226>
  {
 8003c3e:	e6f3      	b.n	8003a28 <main+0x2c>
 8003c40:	0800a188 	.word	0x0800a188
 8003c44:	200005f0 	.word	0x200005f0
 8003c48:	0800a18c 	.word	0x0800a18c
 8003c4c:	200006b8 	.word	0x200006b8
 8003c50:	0800a190 	.word	0x0800a190
 8003c54:	20000654 	.word	0x20000654
 8003c58:	200006e4 	.word	0x200006e4
 8003c5c:	0800a194 	.word	0x0800a194
 8003c60:	2000056c 	.word	0x2000056c
 8003c64:	404b0000 	.word	0x404b0000
 8003c68:	404c0000 	.word	0x404c0000
 8003c6c:	40280000 	.word	0x40280000
 8003c70:	40180000 	.word	0x40180000
 8003c74:	40468000 	.word	0x40468000

08003c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b096      	sub	sp, #88	; 0x58
 8003c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	2244      	movs	r2, #68	; 0x44
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f003 f90a 	bl	8006ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c8c:	463b      	mov	r3, r7
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c9e:	f000 fe11 	bl	80048c4 <HAL_PWREx_ControlVoltageScaling>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003ca8:	f000 f8fe 	bl	8003ea8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cac:	2302      	movs	r3, #2
 8003cae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003cca:	2307      	movs	r3, #7
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cd6:	f107 0314 	add.w	r3, r7, #20
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fe48 	bl	8004970 <HAL_RCC_OscConfig>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003ce6:	f000 f8df 	bl	8003ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cea:	230f      	movs	r3, #15
 8003cec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cfe:	463b      	mov	r3, r7
 8003d00:	2104      	movs	r1, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fa48 	bl	8005198 <HAL_RCC_ClockConfig>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003d0e:	f000 f8cb 	bl	8003ea8 <Error_Handler>
  }
}
 8003d12:	bf00      	nop
 8003d14:	3758      	adds	r7, #88	; 0x58
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <MX_USART1_UART_Init+0x5c>)
 8003d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d34:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d42:	220c      	movs	r2, #12
 8003d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d5e:	4805      	ldr	r0, [pc, #20]	; (8003d74 <MX_USART1_UART_Init+0x58>)
 8003d60:	f001 ff9c 	bl	8005c9c <HAL_UART_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003d6a:	f000 f89d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200004e8 	.word	0x200004e8
 8003d78:	40013800 	.word	0x40013800

08003d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <MX_USART2_UART_Init+0x5c>)
 8003d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_USART2_UART_Init+0x58>)
 8003dc0:	f001 ff6c 	bl	8005c9c <HAL_UART_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003dca:	f000 f86d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000056c 	.word	0x2000056c
 8003dd8:	40004400 	.word	0x40004400

08003ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df2:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e0a:	4b25      	ldr	r3, [pc, #148]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3a:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <MX_GPIO_Init+0xc4>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2120      	movs	r1, #32
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e5a:	f000 fd0d 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <MX_GPIO_Init+0xc8>)
 8003e76:	f000 fb85 	bl	8004584 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e86:	2300      	movs	r3, #0
 8003e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e94:	f000 fb76 	bl	8004584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	48000800 	.word	0x48000800

08003ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <Error_Handler+0x8>
	...

08003eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_MspInit+0x44>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b0a6      	sub	sp, #152	; 0x98
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f04:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	2268      	movs	r2, #104	; 0x68
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 ffbf 	bl	8006ea0 <memset>
  if(huart->Instance==USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_UART_MspInit+0x158>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d145      	bne.n	8003fb8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fb51 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f44:	f7ff ffb0 	bl	8003ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f48:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4c:	4a42      	ldr	r2, [pc, #264]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f52:	6613      	str	r3, [r2, #96]	; 0x60
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f6c:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f92:	2307      	movs	r3, #7
 8003f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa2:	f000 faef 	bl	8004584 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2025      	movs	r0, #37	; 0x25
 8003fac:	f000 fa35 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fb0:	2025      	movs	r0, #37	; 0x25
 8003fb2:	f000 fa4e 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fb6:	e048      	b.n	800404a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a27      	ldr	r2, [pc, #156]	; (800405c <HAL_UART_MspInit+0x160>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d143      	bne.n	800404a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fca:	f107 031c 	add.w	r3, r7, #28
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fb06 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8003fda:	f7ff ff65 	bl	8003ea8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <HAL_UART_MspInit+0x15c>)
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800400e:	230c      	movs	r3, #12
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004020:	2303      	movs	r3, #3
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004026:	2307      	movs	r3, #7
 8004028:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004030:	4619      	mov	r1, r3
 8004032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004036:	f000 faa5 	bl	8004584 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2026      	movs	r0, #38	; 0x26
 8004040:	f000 f9eb 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004044:	2026      	movs	r0, #38	; 0x26
 8004046:	f000 fa04 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3798      	adds	r7, #152	; 0x98
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40013800 	.word	0x40013800
 8004058:	40021000 	.word	0x40021000
 800405c:	40004400 	.word	0x40004400

08004060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004064:	e7fe      	b.n	8004064 <NMI_Handler+0x4>

08004066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800406a:	e7fe      	b.n	800406a <HardFault_Handler+0x4>

0800406c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004070:	e7fe      	b.n	8004070 <MemManage_Handler+0x4>

08004072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004076:	e7fe      	b.n	8004076 <BusFault_Handler+0x4>

08004078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800407c:	e7fe      	b.n	800407c <UsageFault_Handler+0x4>

0800407e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout > 0) timeout--;
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <SysTick_Handler+0x20>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <SysTick_Handler+0x18>
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <SysTick_Handler+0x20>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <SysTick_Handler+0x20>)
 80040be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c0:	f000 f8b0 	bl	8004224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200000a8 	.word	0x200000a8

080040cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <USART1_IRQHandler+0x10>)
 80040d2:	f7fd fe93 	bl	8001dfc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200004e8 	.word	0x200004e8

080040e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <USART2_IRQHandler+0x10>)
 80040e6:	f001 febb 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000056c 	.word	0x2000056c

080040f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <SystemInit+0x20>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	4a05      	ldr	r2, [pc, #20]	; (8004114 <SystemInit+0x20>)
 8004100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004150 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800411c:	f7ff ffea 	bl	80040f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <LoopForever+0x6>)
  ldr r1, =_edata
 8004122:	490d      	ldr	r1, [pc, #52]	; (8004158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <LoopForever+0xe>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004128:	e002      	b.n	8004130 <LoopCopyDataInit>

0800412a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800412c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800412e:	3304      	adds	r3, #4

08004130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004134:	d3f9      	bcc.n	800412a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004138:	4c0a      	ldr	r4, [pc, #40]	; (8004164 <LoopForever+0x16>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800413c:	e001      	b.n	8004142 <LoopFillZerobss>

0800413e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800413e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004140:	3204      	adds	r2, #4

08004142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004144:	d3fb      	bcc.n	800413e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004146:	f002 fe79 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800414a:	f7ff fc57 	bl	80039fc <main>

0800414e <LoopForever>:

LoopForever:
    b LoopForever
 800414e:	e7fe      	b.n	800414e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004150:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8004154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004158:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800415c:	0800bdc0 	.word	0x0800bdc0
  ldr r2, =_sbss
 8004160:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004164:	20000700 	.word	0x20000700

08004168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004168:	e7fe      	b.n	8004168 <ADC1_IRQHandler>
	...

0800416c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_Init+0x3c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <HAL_Init+0x3c>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004182:	2003      	movs	r0, #3
 8004184:	f000 f93e 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004188:	2000      	movs	r0, #0
 800418a:	f000 f80f 	bl	80041ac <HAL_InitTick>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	e001      	b.n	800419e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800419a:	f7ff fe8b 	bl	8003eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800419e:	79fb      	ldrb	r3, [r7, #7]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40022000 	.word	0x40022000

080041ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041b8:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_InitTick+0x6c>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d023      	beq.n	8004208 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041c0:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_InitTick+0x70>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_InitTick+0x6c>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f949 	bl	800446e <HAL_SYSTICK_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d809      	bhi.n	80041fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e8:	2200      	movs	r2, #0
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f000 f913 	bl	800441a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_InitTick+0x74>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e007      	b.n	800420c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e004      	b.n	800420c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e001      	b.n	800420c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000008 	.word	0x20000008
 800421c:	20000000 	.word	0x20000000
 8004220:	20000004 	.word	0x20000004

08004224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_IncTick+0x20>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_IncTick+0x24>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <HAL_IncTick+0x24>)
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000008 	.word	0x20000008
 8004248:	200006fc 	.word	0x200006fc

0800424c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return uwTick;
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_GetTick+0x14>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200006fc 	.word	0x200006fc

08004264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800428c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60d3      	str	r3, [r2, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0b      	blt.n	80042f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <__NVIC_EnableIRQ+0x38>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	; (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
         );
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f7ff ff8e 	bl	8004304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff29 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff3e 	bl	80042ac <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff8e 	bl	8004358 <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5d 	bl	8004304 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff31 	bl	80042c8 <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ffa2 	bl	80043c0 <SysTick_Config>
 800447c:	4603      	mov	r3, r0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d008      	beq.n	80044b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2204      	movs	r2, #4
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e022      	b.n	80044f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f003 021c 	and.w	r2, r3, #28
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f202 	lsl.w	r2, r1, r2
 80044e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d005      	beq.n	8004526 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	e029      	b.n	800457a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 020e 	bic.w	r2, r2, #14
 8004534:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f003 021c 	and.w	r2, r3, #28
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2101      	movs	r1, #1
 8004554:	fa01 f202 	lsl.w	r2, r1, r2
 8004558:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
    }
  }
  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004592:	e154      	b.n	800483e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8146 	beq.w	8004838 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d005      	beq.n	80045c4 <HAL_GPIO_Init+0x40>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d130      	bne.n	8004626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fa:	2201      	movs	r2, #1
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 0201 	and.w	r2, r3, #1
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d017      	beq.n	8004662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d123      	bne.n	80046b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	220f      	movs	r2, #15
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	08da      	lsrs	r2, r3, #3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3208      	adds	r2, #8
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2203      	movs	r2, #3
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0203 	and.w	r2, r3, #3
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a0 	beq.w	8004838 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f8:	4b58      	ldr	r3, [pc, #352]	; (800485c <HAL_GPIO_Init+0x2d8>)
 80046fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fc:	4a57      	ldr	r2, [pc, #348]	; (800485c <HAL_GPIO_Init+0x2d8>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6613      	str	r3, [r2, #96]	; 0x60
 8004704:	4b55      	ldr	r3, [pc, #340]	; (800485c <HAL_GPIO_Init+0x2d8>)
 8004706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004710:	4a53      	ldr	r2, [pc, #332]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	089b      	lsrs	r3, r3, #2
 8004716:	3302      	adds	r3, #2
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	220f      	movs	r2, #15
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800473a:	d019      	beq.n	8004770 <HAL_GPIO_Init+0x1ec>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a49      	ldr	r2, [pc, #292]	; (8004864 <HAL_GPIO_Init+0x2e0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_GPIO_Init+0x1e8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a48      	ldr	r2, [pc, #288]	; (8004868 <HAL_GPIO_Init+0x2e4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00d      	beq.n	8004768 <HAL_GPIO_Init+0x1e4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a47      	ldr	r2, [pc, #284]	; (800486c <HAL_GPIO_Init+0x2e8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <HAL_GPIO_Init+0x1e0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a46      	ldr	r2, [pc, #280]	; (8004870 <HAL_GPIO_Init+0x2ec>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_GPIO_Init+0x1dc>
 800475c:	2304      	movs	r3, #4
 800475e:	e008      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004760:	2307      	movs	r3, #7
 8004762:	e006      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004764:	2303      	movs	r3, #3
 8004766:	e004      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004768:	2302      	movs	r3, #2
 800476a:	e002      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_GPIO_Init+0x1ee>
 8004770:	2300      	movs	r3, #0
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	f002 0203 	and.w	r2, r2, #3
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	4093      	lsls	r3, r2
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004782:	4937      	ldr	r1, [pc, #220]	; (8004860 <HAL_GPIO_Init+0x2dc>)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004790:	4b38      	ldr	r3, [pc, #224]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	43db      	mvns	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b4:	4a2f      	ldr	r2, [pc, #188]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047e4:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3301      	adds	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f aea3 	bne.w	8004594 <HAL_GPIO_Init+0x10>
  }
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	40010000 	.word	0x40010000
 8004864:	48000400 	.word	0x48000400
 8004868:	48000800 	.word	0x48000800
 800486c:	48000c00 	.word	0x48000c00
 8004870:	48001000 	.word	0x48001000
 8004874:	40010400 	.word	0x40010400

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004894:	e002      	b.n	800489c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40007000 	.word	0x40007000

080048c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d2:	d130      	bne.n	8004936 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d038      	beq.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ea:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2232      	movs	r2, #50	; 0x32
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0c9b      	lsrs	r3, r3, #18
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004908:	e002      	b.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b01      	subs	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d102      	bne.n	8004924 <HAL_PWREx_ControlVoltageScaling+0x60>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f2      	bne.n	800490a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d110      	bne.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e00f      	b.n	8004956 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004942:	d007      	beq.n	8004954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004952:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40007000 	.word	0x40007000
 8004968:	20000000 	.word	0x20000000
 800496c:	431bde83 	.word	0x431bde83

08004970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f000 bc02 	b.w	8005188 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004984:	4b96      	ldr	r3, [pc, #600]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800498e:	4b94      	ldr	r3, [pc, #592]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80e4 	beq.w	8004b6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_RCC_OscConfig+0x4c>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	f040 808b 	bne.w	8004aca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	f040 8087 	bne.w	8004aca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049bc:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_OscConfig+0x64>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e3d9      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1a      	ldr	r2, [r3, #32]
 80049d8:	4b81      	ldr	r3, [pc, #516]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_RCC_OscConfig+0x7e>
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ec:	e005      	b.n	80049fa <HAL_RCC_OscConfig+0x8a>
 80049ee:	4b7c      	ldr	r3, [pc, #496]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d223      	bcs.n	8004a46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fd8c 	bl	8005520 <RCC_SetFlashLatencyFromMSIRange>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e3ba      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a12:	4b73      	ldr	r3, [pc, #460]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a72      	ldr	r2, [pc, #456]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b70      	ldr	r3, [pc, #448]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	496d      	ldr	r1, [pc, #436]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a30:	4b6b      	ldr	r3, [pc, #428]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4968      	ldr	r1, [pc, #416]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
 8004a44:	e025      	b.n	8004a92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a46:	4b66      	ldr	r3, [pc, #408]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a65      	ldr	r2, [pc, #404]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4960      	ldr	r1, [pc, #384]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a64:	4b5e      	ldr	r3, [pc, #376]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	495b      	ldr	r1, [pc, #364]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd4c 	bl	8005520 <RCC_SetFlashLatencyFromMSIRange>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e37a      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a92:	f000 fc81 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b51      	ldr	r3, [pc, #324]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	4950      	ldr	r1, [pc, #320]	; (8004be4 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	4a4e      	ldr	r2, [pc, #312]	; (8004be8 <HAL_RCC_OscConfig+0x278>)
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab2:	4b4e      	ldr	r3, [pc, #312]	; (8004bec <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fb78 	bl	80041ac <HAL_InitTick>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d052      	beq.n	8004b6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	e35e      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d032      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ad2:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a42      	ldr	r2, [pc, #264]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ade:	f7ff fbb5 	bl	800424c <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ae6:	f7ff fbb1 	bl	800424c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e347      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af8:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b04:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	f043 0308 	orr.w	r3, r3, #8
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	4930      	ldr	r1, [pc, #192]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b22:	4b2f      	ldr	r3, [pc, #188]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	492b      	ldr	r1, [pc, #172]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
 8004b36:	e01a      	b.n	8004b6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b38:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a28      	ldr	r2, [pc, #160]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b44:	f7ff fb82 	bl	800424c <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4c:	f7ff fb7e 	bl	800424c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e314      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1dc>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d073      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_OscConfig+0x21c>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d10e      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d063      	beq.n	8004c60 <HAL_RCC_OscConfig+0x2f0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d15f      	bne.n	8004c60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2f1      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x24c>
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e025      	b.n	8004c08 <HAL_RCC_OscConfig+0x298>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc4:	d114      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x280>
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a02      	ldr	r2, [pc, #8]	; (8004be0 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e013      	b.n	8004c08 <HAL_RCC_OscConfig+0x298>
 8004be0:	40021000 	.word	0x40021000
 8004be4:	0800b980 	.word	0x0800b980
 8004be8:	20000000 	.word	0x20000000
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	4ba0      	ldr	r3, [pc, #640]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a9f      	ldr	r2, [pc, #636]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b9d      	ldr	r3, [pc, #628]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a9c      	ldr	r2, [pc, #624]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7ff fb1c 	bl	800424c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7ff fb18 	bl	800424c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e2ae      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2a:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2a8>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7ff fb08 	bl	800424c <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7ff fb04 	bl	800424c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e29a      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c52:	4b88      	ldr	r3, [pc, #544]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2d0>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d060      	beq.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_OscConfig+0x310>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d119      	bne.n	8004cae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d116      	bne.n	8004cae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c80:	4b7c      	ldr	r3, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_OscConfig+0x328>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e277      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c98:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	4973      	ldr	r1, [pc, #460]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cac:	e040      	b.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d023      	beq.n	8004cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb6:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6e      	ldr	r2, [pc, #440]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7ff fac3 	bl	800424c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cca:	f7ff fabf 	bl	800424c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e255      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cdc:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce8:	4b62      	ldr	r3, [pc, #392]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	495f      	ldr	r1, [pc, #380]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	604b      	str	r3, [r1, #4]
 8004cfc:	e018      	b.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a5c      	ldr	r2, [pc, #368]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7ff fa9f 	bl	800424c <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d12:	f7ff fa9b 	bl	800424c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e231      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f0      	bne.n	8004d12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03c      	beq.n	8004db6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d44:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4a:	4a4a      	ldr	r2, [pc, #296]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7ff fa7a 	bl	800424c <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5c:	f7ff fa76 	bl	800424c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e20c      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ef      	beq.n	8004d5c <HAL_RCC_OscConfig+0x3ec>
 8004d7c:	e01b      	b.n	8004db6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d84:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7ff fa5d 	bl	800424c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d96:	f7ff fa59 	bl	800424c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1ef      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da8:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ef      	bne.n	8004d96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80a6 	beq.w	8004f10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10d      	bne.n	8004df0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6593      	str	r3, [r2, #88]	; 0x58
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_RCC_OscConfig+0x508>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d118      	bne.n	8004e2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCC_OscConfig+0x508>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <HAL_RCC_OscConfig+0x508>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e08:	f7ff fa20 	bl	800424c <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7ff fa1c 	bl	800424c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e1b2      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x508>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d108      	bne.n	8004e48 <HAL_RCC_OscConfig+0x4d8>
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e46:	e029      	b.n	8004e9c <HAL_RCC_OscConfig+0x52c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d115      	bne.n	8004e7c <HAL_RCC_OscConfig+0x50c>
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <HAL_RCC_OscConfig+0x504>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e70:	e014      	b.n	8004e9c <HAL_RCC_OscConfig+0x52c>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	4b9a      	ldr	r3, [pc, #616]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	4a99      	ldr	r2, [pc, #612]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e8c:	4b96      	ldr	r3, [pc, #600]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	4a95      	ldr	r2, [pc, #596]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d016      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7ff f9d2 	bl	800424c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7ff f9ce 	bl	800424c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e162      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec2:	4b89      	ldr	r3, [pc, #548]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ed      	beq.n	8004eac <HAL_RCC_OscConfig+0x53c>
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7ff f9bb 	bl	800424c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7ff f9b7 	bl	800424c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e14b      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef0:	4b7d      	ldr	r3, [pc, #500]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1ed      	bne.n	8004eda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004efe:	7ffb      	ldrb	r3, [r7, #31]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d105      	bne.n	8004f10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f04:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d03c      	beq.n	8004f96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f24:	4b70      	ldr	r3, [pc, #448]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f2a:	4a6f      	ldr	r2, [pc, #444]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7ff f98a 	bl	800424c <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f3c:	f7ff f986 	bl	800424c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e11c      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f4e:	4b66      	ldr	r3, [pc, #408]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <HAL_RCC_OscConfig+0x5cc>
 8004f5c:	e01b      	b.n	8004f96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5e:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f64:	4a60      	ldr	r2, [pc, #384]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7ff f96d 	bl	800424c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f76:	f7ff f969 	bl	800424c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0ff      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f88:	4b57      	ldr	r3, [pc, #348]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ef      	bne.n	8004f76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80f3 	beq.w	8005186 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	f040 80c9 	bne.w	800513c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004faa:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f003 0203 	and.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d12c      	bne.n	8005018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d123      	bne.n	8005018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d11b      	bne.n	8005018 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d113      	bne.n	8005018 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d109      	bne.n	8005018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	3b01      	subs	r3, #1
 8005012:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d06b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d062      	beq.n	80050e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0ac      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005038:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800503a:	f7ff f907 	bl	800424c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005042:	f7ff f903 	bl	800424c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e099      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005060:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_RCC_OscConfig+0x77c>)
 8005066:	4013      	ands	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005070:	3a01      	subs	r2, #1
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	4311      	orrs	r1, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800507a:	0212      	lsls	r2, r2, #8
 800507c:	4311      	orrs	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005082:	0852      	lsrs	r2, r2, #1
 8005084:	3a01      	subs	r2, #1
 8005086:	0552      	lsls	r2, r2, #21
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800509a:	06d2      	lsls	r2, r2, #27
 800509c:	430a      	orrs	r2, r1
 800509e:	4912      	ldr	r1, [pc, #72]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050bc:	f7ff f8c6 	bl	800424c <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7ff f8c2 	bl	800424c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e058      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d6:	4b04      	ldr	r3, [pc, #16]	; (80050e8 <HAL_RCC_OscConfig+0x778>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e2:	e050      	b.n	8005186 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e04f      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
 80050e8:	40021000 	.word	0x40021000
 80050ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f0:	4b27      	ldr	r3, [pc, #156]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d144      	bne.n	8005186 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005112:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005114:	f7ff f89a 	bl	800424c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7ff f896 	bl	800424c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e02c      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0x7ac>
 800513a:	e024      	b.n	8005186 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d01f      	beq.n	8005182 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b13      	ldr	r3, [pc, #76]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 8005148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7ff f87d 	bl	800424c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7ff f879 	bl	800424c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e00f      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005168:	4b09      	ldr	r3, [pc, #36]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	4905      	ldr	r1, [pc, #20]	; (8005190 <HAL_RCC_OscConfig+0x820>)
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_OscConfig+0x824>)
 800517c:	4013      	ands	r3, r2
 800517e:	60cb      	str	r3, [r1, #12]
 8005180:	e001      	b.n	8005186 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	feeefffc 	.word	0xfeeefffc

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0e7      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051ac:	4b75      	ldr	r3, [pc, #468]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d910      	bls.n	80051dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b72      	ldr	r3, [pc, #456]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 0207 	bic.w	r2, r3, #7
 80051c2:	4970      	ldr	r1, [pc, #448]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0cf      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d908      	bls.n	800520a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f8:	4b63      	ldr	r3, [pc, #396]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4960      	ldr	r1, [pc, #384]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d04c      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d121      	bne.n	800526e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0a6      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005236:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d115      	bne.n	800526e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e09a      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800524e:	4b4e      	ldr	r3, [pc, #312]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e08e      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525e:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e086      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800526e:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0203 	bic.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4943      	ldr	r1, [pc, #268]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fe ffe4 	bl	800424c <HAL_GetTick>
 8005284:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	e00a      	b.n	800529e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005288:	f7fe ffe0 	bl	800424c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e06e      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 020c 	and.w	r2, r3, #12
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1eb      	bne.n	8005288 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d010      	beq.n	80052de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	4b31      	ldr	r3, [pc, #196]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d208      	bcs.n	80052de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	492b      	ldr	r1, [pc, #172]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d210      	bcs.n	800530e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 0207 	bic.w	r2, r3, #7
 80052f4:	4923      	ldr	r1, [pc, #140]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fc:	4b21      	ldr	r3, [pc, #132]	; (8005384 <HAL_RCC_ClockConfig+0x1ec>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d001      	beq.n	800530e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e036      	b.n	800537c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4918      	ldr	r1, [pc, #96]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4910      	ldr	r1, [pc, #64]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005348:	4313      	orrs	r3, r2
 800534a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800534c:	f000 f824 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	490b      	ldr	r1, [pc, #44]	; (800538c <HAL_RCC_ClockConfig+0x1f4>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	4a09      	ldr	r2, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1f8>)
 800536a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_RCC_ClockConfig+0x1fc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe ff1b 	bl	80041ac <HAL_InitTick>
 8005376:	4603      	mov	r3, r0
 8005378:	72fb      	strb	r3, [r7, #11]

  return status;
 800537a:	7afb      	ldrb	r3, [r7, #11]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40022000 	.word	0x40022000
 8005388:	40021000 	.word	0x40021000
 800538c:	0800b980 	.word	0x0800b980
 8005390:	20000000 	.word	0x20000000
 8005394:	20000004 	.word	0x20000004

08005398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	2300      	movs	r3, #0
 80053a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a6:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b0:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x34>
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d121      	bne.n	800540a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11e      	bne.n	800540a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053d8:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	e005      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053e8:	4b2d      	ldr	r3, [pc, #180]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053f4:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d102      	bne.n	8005416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e004      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d101      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_RCC_GetSysClockFreq+0x114>)
 800541e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d134      	bne.n	8005490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005426:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0xa6>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d003      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xac>
 800543c:	e005      	b.n	800544a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005440:	617b      	str	r3, [r7, #20]
      break;
 8005442:	e005      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_RCC_GetSysClockFreq+0x114>)
 8005446:	617b      	str	r3, [r7, #20]
      break;
 8005448:	e002      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	617b      	str	r3, [r7, #20]
      break;
 800544e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	3301      	adds	r3, #1
 800545c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	fb03 f202 	mul.w	r2, r3, r2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	0e5b      	lsrs	r3, r3, #25
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	3301      	adds	r3, #1
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005490:	69bb      	ldr	r3, [r7, #24]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3724      	adds	r7, #36	; 0x24
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	0800b998 	.word	0x0800b998
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	007a1200 	.word	0x007a1200

080054b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000000 	.word	0x20000000

080054c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054cc:	f7ff fff0 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4904      	ldr	r1, [pc, #16]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800b990 	.word	0x0800b990

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054f8:	f7ff ffda 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0adb      	lsrs	r3, r3, #11
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4904      	ldr	r1, [pc, #16]	; (800551c <HAL_RCC_GetPCLK2Freq+0x28>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	0800b990 	.word	0x0800b990

08005520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800552c:	4b2a      	ldr	r3, [pc, #168]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005538:	f7ff f9b6 	bl	80048a8 <HAL_PWREx_GetVoltageRange>
 800553c:	6178      	str	r0, [r7, #20]
 800553e:	e014      	b.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005540:	4b25      	ldr	r3, [pc, #148]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554a:	6593      	str	r3, [r2, #88]	; 0x58
 800554c:	4b22      	ldr	r3, [pc, #136]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005558:	f7ff f9a6 	bl	80048a8 <HAL_PWREx_GetVoltageRange>
 800555c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005570:	d10b      	bne.n	800558a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d919      	bls.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2ba0      	cmp	r3, #160	; 0xa0
 800557c:	d902      	bls.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800557e:	2302      	movs	r3, #2
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e013      	b.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005584:	2301      	movs	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e010      	b.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d902      	bls.n	8005596 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005590:	2303      	movs	r3, #3
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	e00a      	b.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d102      	bne.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800559c:	2302      	movs	r3, #2
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	e004      	b.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d101      	bne.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055a8:	2301      	movs	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f023 0207 	bic.w	r2, r3, #7
 80055b4:	4909      	ldr	r1, [pc, #36]	; (80055dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40022000 	.word	0x40022000

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e8:	2300      	movs	r3, #0
 80055ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d031      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005600:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005604:	d01a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005606:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800560a:	d814      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005614:	d10f      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005616:	4b5d      	ldr	r3, [pc, #372]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4a5c      	ldr	r2, [pc, #368]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005622:	e00c      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fa44 	bl	8005ab8 <RCCEx_PLLSAI1_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	74fb      	strb	r3, [r7, #19]
      break;
 800563a:	e000      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800563c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005644:	4b51      	ldr	r3, [pc, #324]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005652:	494e      	ldr	r1, [pc, #312]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800565a:	e001      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 809e 	beq.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005672:	4b46      	ldr	r3, [pc, #280]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005688:	4b40      	ldr	r3, [pc, #256]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	4a3f      	ldr	r2, [pc, #252]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005692:	6593      	str	r3, [r2, #88]	; 0x58
 8005694:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a0:	2301      	movs	r3, #1
 80056a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a4:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a39      	ldr	r2, [pc, #228]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b0:	f7fe fdcc 	bl	800424c <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fe fdc8 	bl	800424c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	74fb      	strb	r3, [r7, #19]
        break;
 80056ca:	e005      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056cc:	4b30      	ldr	r3, [pc, #192]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d15a      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01e      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d019      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056fa:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d016      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fe fd88 	bl	800424c <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573e:	e00b      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f7fe fd84 	bl	800424c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f241 3288 	movw	r2, #5000	; 0x1388
 800574e:	4293      	cmp	r3, r2
 8005750:	d902      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	74fb      	strb	r3, [r7, #19]
            break;
 8005756:	e006      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ec      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	4904      	ldr	r1, [pc, #16]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005782:	e009      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	74bb      	strb	r3, [r7, #18]
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005798:	7c7b      	ldrb	r3, [r7, #17]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4b9e      	ldr	r3, [pc, #632]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4a9d      	ldr	r2, [pc, #628]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057b6:	4b98      	ldr	r3, [pc, #608]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	f023 0203 	bic.w	r2, r3, #3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	4994      	ldr	r1, [pc, #592]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d8:	4b8f      	ldr	r3, [pc, #572]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 020c 	bic.w	r2, r3, #12
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	498c      	ldr	r1, [pc, #560]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057fa:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	4983      	ldr	r1, [pc, #524]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800581c:	4b7e      	ldr	r3, [pc, #504]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	497b      	ldr	r1, [pc, #492]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800583e:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	4972      	ldr	r1, [pc, #456]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005860:	4b6d      	ldr	r3, [pc, #436]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	496a      	ldr	r1, [pc, #424]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005882:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005890:	4961      	ldr	r1, [pc, #388]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a4:	4b5c      	ldr	r3, [pc, #368]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	4959      	ldr	r1, [pc, #356]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058c6:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	4950      	ldr	r1, [pc, #320]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058e8:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	4948      	ldr	r1, [pc, #288]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800590a:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800590c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005910:	f023 0203 	bic.w	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	493f      	ldr	r1, [pc, #252]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d028      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800592c:	4b3a      	ldr	r3, [pc, #232]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	4937      	ldr	r1, [pc, #220]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800594a:	d106      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800594c:	4b32      	ldr	r3, [pc, #200]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a31      	ldr	r2, [pc, #196]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005956:	60d3      	str	r3, [r2, #12]
 8005958:	e011      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005962:	d10c      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	2101      	movs	r1, #1
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f8a4 	bl	8005ab8 <RCCEx_PLLSAI1_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d028      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800598a:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	491f      	ldr	r1, [pc, #124]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a8:	d106      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b4:	60d3      	str	r3, [r2, #12]
 80059b6:	e011      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059c0:	d10c      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f875 	bl	8005ab8 <RCCEx_PLLSAI1_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02b      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	4908      	ldr	r1, [pc, #32]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a06:	d109      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a08:	4b03      	ldr	r3, [pc, #12]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a02      	ldr	r2, [pc, #8]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a12:	60d3      	str	r3, [r2, #12]
 8005a14:	e014      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f843 	bl	8005ab8 <RCCEx_PLLSAI1_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a4c:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5a:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f820 	bl	8005ab8 <RCCEx_PLLSAI1_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa0:	4904      	ldr	r1, [pc, #16]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005aa8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ac6:	4b74      	ldr	r3, [pc, #464]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ad2:	4b71      	ldr	r3, [pc, #452]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0203 	and.w	r2, r3, #3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d10d      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005aea:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
       ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d047      	beq.n	8005b8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
 8005b02:	e044      	b.n	8005b8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d018      	beq.n	8005b3e <RCCEx_PLLSAI1_Config+0x86>
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d825      	bhi.n	8005b5c <RCCEx_PLLSAI1_Config+0xa4>
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d002      	beq.n	8005b1a <RCCEx_PLLSAI1_Config+0x62>
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d009      	beq.n	8005b2c <RCCEx_PLLSAI1_Config+0x74>
 8005b18:	e020      	b.n	8005b5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2a:	e01a      	b.n	8005b62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b2c:	4b5a      	ldr	r3, [pc, #360]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d116      	bne.n	8005b66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3c:	e013      	b.n	8005b66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b4a:	4b53      	ldr	r3, [pc, #332]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b5a:	e006      	b.n	8005b6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e004      	b.n	8005b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b62:	bf00      	nop
 8005b64:	e002      	b.n	8005b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b72:	4b49      	ldr	r3, [pc, #292]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	430b      	orrs	r3, r1
 8005b88:	4943      	ldr	r1, [pc, #268]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d17c      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba0:	f7fe fb54 	bl	800424c <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ba6:	e009      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba8:	f7fe fb50 	bl	800424c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d902      	bls.n	8005bbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bba:	e005      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1ef      	bne.n	8005ba8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d15f      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d110      	bne.n	8005bf6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	0211      	lsls	r1, r2, #8
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68d2      	ldr	r2, [r2, #12]
 8005bea:	06d2      	lsls	r2, r2, #27
 8005bec:	430a      	orrs	r2, r1
 8005bee:	492a      	ldr	r1, [pc, #168]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	610b      	str	r3, [r1, #16]
 8005bf4:	e027      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d112      	bne.n	8005c22 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bfc:	4b26      	ldr	r3, [pc, #152]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6892      	ldr	r2, [r2, #8]
 8005c0c:	0211      	lsls	r1, r2, #8
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6912      	ldr	r2, [r2, #16]
 8005c12:	0852      	lsrs	r2, r2, #1
 8005c14:	3a01      	subs	r2, #1
 8005c16:	0552      	lsls	r2, r2, #21
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	491f      	ldr	r1, [pc, #124]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	610b      	str	r3, [r1, #16]
 8005c20:	e011      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6892      	ldr	r2, [r2, #8]
 8005c32:	0211      	lsls	r1, r2, #8
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6952      	ldr	r2, [r2, #20]
 8005c38:	0852      	lsrs	r2, r2, #1
 8005c3a:	3a01      	subs	r2, #1
 8005c3c:	0652      	lsls	r2, r2, #25
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	4915      	ldr	r1, [pc, #84]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fe fafb 	bl	800424c <HAL_GetTick>
 8005c56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c58:	e009      	b.n	8005c6e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c5a:	f7fe faf7 	bl	800424c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d902      	bls.n	8005c6e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c6c:	e005      	b.n	8005c7a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ef      	beq.n	8005c5a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c80:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000

08005c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e040      	b.n	8005d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fe f91c 	bl	8003efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fbc2 	bl	8006464 <UART_SetConfig>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e022      	b.n	8005d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fe3c 	bl	8006970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fec3 	bl	8006ab4 <UART_CheckIdleState>
 8005d2e:	4603      	mov	r3, r0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	f040 8082 	bne.w	8005e56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_UART_Transmit+0x26>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e07a      	b.n	8005e58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Transmit+0x38>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e073      	b.n	8005e58 <HAL_UART_Transmit+0x120>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2221      	movs	r2, #33	; 0x21
 8005d84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d86:	f7fe fa61 	bl	800424c <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da4:	d108      	bne.n	8005db8 <HAL_UART_Transmit+0x80>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d104      	bne.n	8005db8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	e003      	b.n	8005dc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005dc8:	e02d      	b.n	8005e26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 feb6 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e039      	b.n	8005e58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	881a      	ldrh	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df6:	b292      	uxth	r2, r2
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e008      	b.n	8005e14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	781a      	ldrb	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1cb      	bne.n	8005dca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	; 0x40
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fe82 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e005      	b.n	8005e58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b0ba      	sub	sp, #232	; 0xe8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e8e:	4013      	ands	r3, r2
 8005e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 82a6 	beq.w	800640a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
      }
      return;
 8005ec6:	e2a0      	b.n	800640a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8117 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_UART_IRQHandler+0x298>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 810a 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
 8005f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f42:	f043 0204 	orr.w	r2, r3, #4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fae:	f043 0208 	orr.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 820c 	beq.w	800640e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800603a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04f      	beq.n	80060e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fe43 	bl	8006cce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d141      	bne.n	80060da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800608e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1d9      	bne.n	8006056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d013      	beq.n	80060d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_UART_IRQHandler+0x29c>)
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe fa23 	bl	8004502 <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	e00f      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9b0 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00b      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9ac 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e007      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9a8 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060f0:	e18d      	b.n	800640e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	bf00      	nop
    return;
 80060f4:	e18b      	b.n	800640e <HAL_UART_IRQHandler+0x5ae>
 80060f6:	bf00      	nop
 80060f8:	04000120 	.word	0x04000120
 80060fc:	08006d95 	.word	0x08006d95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	2b01      	cmp	r3, #1
 8006106:	f040 8146 	bne.w	8006396 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 813f 	beq.w	8006396 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8138 	beq.w	8006396 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	f040 80b4 	bne.w	80062a6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 815f 	beq.w	8006412 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800615a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800615e:	429a      	cmp	r2, r3
 8006160:	f080 8157 	bcs.w	8006412 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 8085 	bne.w	800628a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1da      	bne.n	8006180 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	e853 3f00 	ldrex	r3, [r3]
 80061d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e1      	bne.n	80061ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625a:	f023 0310 	bic.w	r3, r3, #16
 800625e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626c:	65bb      	str	r3, [r7, #88]	; 0x58
 800626e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e4      	bne.n	800624a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe f8fe 	bl	8004486 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006296:	b29b      	uxth	r3, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8d4 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a4:	e0b5      	b.n	8006412 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80a7 	beq.w	8006416 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a2 	beq.w	8006416 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f4:	647b      	str	r3, [r7, #68]	; 0x44
 80062f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e4      	bne.n	80062d2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	623b      	str	r3, [r7, #32]
   return(result);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800632c:	633a      	str	r2, [r7, #48]	; 0x30
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e3      	bne.n	8006308 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69b9      	ldr	r1, [r7, #24]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	617b      	str	r3, [r7, #20]
   return(result);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e4      	bne.n	8006352 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f85c 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006394:	e03f      	b.n	8006416 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <HAL_UART_IRQHandler+0x560>
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fd2b 	bl	8006e14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063be:	e02d      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00e      	beq.n	80063ea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01c      	beq.n	800641a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
    }
    return;
 80063e8:	e017      	b.n	800641a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <HAL_UART_IRQHandler+0x5bc>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fcdc 	bl	8006dc0 <UART_EndTransmit_IT>
    return;
 8006408:	e008      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
      return;
 800640a:	bf00      	nop
 800640c:	e006      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
    return;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_UART_IRQHandler+0x5bc>
    return;
 800641a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800641c:	37e8      	adds	r7, #232	; 0xe8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b08a      	sub	sp, #40	; 0x28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4ba5      	ldr	r3, [pc, #660]	; (8006728 <UART_SetConfig+0x2c4>)
 8006494:	4013      	ands	r3, r2
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800649c:	430b      	orrs	r3, r1
 800649e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a9a      	ldr	r2, [pc, #616]	; (800672c <UART_SetConfig+0x2c8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	4313      	orrs	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a91      	ldr	r2, [pc, #580]	; (8006730 <UART_SetConfig+0x2cc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d126      	bne.n	800653c <UART_SetConfig+0xd8>
 80064ee:	4b91      	ldr	r3, [pc, #580]	; (8006734 <UART_SetConfig+0x2d0>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d81b      	bhi.n	8006534 <UART_SetConfig+0xd0>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0xa0>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	08006525 	.word	0x08006525
 800650c:	0800651d 	.word	0x0800651d
 8006510:	0800652d 	.word	0x0800652d
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e0d6      	b.n	80066ca <UART_SetConfig+0x266>
 800651c:	2302      	movs	r3, #2
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e0d2      	b.n	80066ca <UART_SetConfig+0x266>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e0ce      	b.n	80066ca <UART_SetConfig+0x266>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006532:	e0ca      	b.n	80066ca <UART_SetConfig+0x266>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653a:	e0c6      	b.n	80066ca <UART_SetConfig+0x266>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7d      	ldr	r2, [pc, #500]	; (8006738 <UART_SetConfig+0x2d4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d138      	bne.n	80065b8 <UART_SetConfig+0x154>
 8006546:	4b7b      	ldr	r3, [pc, #492]	; (8006734 <UART_SetConfig+0x2d0>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d82d      	bhi.n	80065b0 <UART_SetConfig+0x14c>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0xf8>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006591 	.word	0x08006591
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	080065b1 	.word	0x080065b1
 800657c:	08006599 	.word	0x08006599
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065a9 	.word	0x080065a9
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006596:	e098      	b.n	80066ca <UART_SetConfig+0x266>
 8006598:	2302      	movs	r3, #2
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659e:	e094      	b.n	80066ca <UART_SetConfig+0x266>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a6:	e090      	b.n	80066ca <UART_SetConfig+0x266>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ae:	e08c      	b.n	80066ca <UART_SetConfig+0x266>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b6:	e088      	b.n	80066ca <UART_SetConfig+0x266>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5f      	ldr	r2, [pc, #380]	; (800673c <UART_SetConfig+0x2d8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d125      	bne.n	800660e <UART_SetConfig+0x1aa>
 80065c2:	4b5c      	ldr	r3, [pc, #368]	; (8006734 <UART_SetConfig+0x2d0>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065cc:	2b30      	cmp	r3, #48	; 0x30
 80065ce:	d016      	beq.n	80065fe <UART_SetConfig+0x19a>
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d818      	bhi.n	8006606 <UART_SetConfig+0x1a2>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d00a      	beq.n	80065ee <UART_SetConfig+0x18a>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d814      	bhi.n	8006606 <UART_SetConfig+0x1a2>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <UART_SetConfig+0x182>
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d008      	beq.n	80065f6 <UART_SetConfig+0x192>
 80065e4:	e00f      	b.n	8006606 <UART_SetConfig+0x1a2>
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ec:	e06d      	b.n	80066ca <UART_SetConfig+0x266>
 80065ee:	2302      	movs	r3, #2
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f4:	e069      	b.n	80066ca <UART_SetConfig+0x266>
 80065f6:	2304      	movs	r3, #4
 80065f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fc:	e065      	b.n	80066ca <UART_SetConfig+0x266>
 80065fe:	2308      	movs	r3, #8
 8006600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006604:	e061      	b.n	80066ca <UART_SetConfig+0x266>
 8006606:	2310      	movs	r3, #16
 8006608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660c:	e05d      	b.n	80066ca <UART_SetConfig+0x266>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4b      	ldr	r2, [pc, #300]	; (8006740 <UART_SetConfig+0x2dc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d125      	bne.n	8006664 <UART_SetConfig+0x200>
 8006618:	4b46      	ldr	r3, [pc, #280]	; (8006734 <UART_SetConfig+0x2d0>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006622:	2bc0      	cmp	r3, #192	; 0xc0
 8006624:	d016      	beq.n	8006654 <UART_SetConfig+0x1f0>
 8006626:	2bc0      	cmp	r3, #192	; 0xc0
 8006628:	d818      	bhi.n	800665c <UART_SetConfig+0x1f8>
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d00a      	beq.n	8006644 <UART_SetConfig+0x1e0>
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d814      	bhi.n	800665c <UART_SetConfig+0x1f8>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <UART_SetConfig+0x1d8>
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d008      	beq.n	800664c <UART_SetConfig+0x1e8>
 800663a:	e00f      	b.n	800665c <UART_SetConfig+0x1f8>
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006642:	e042      	b.n	80066ca <UART_SetConfig+0x266>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664a:	e03e      	b.n	80066ca <UART_SetConfig+0x266>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e03a      	b.n	80066ca <UART_SetConfig+0x266>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665a:	e036      	b.n	80066ca <UART_SetConfig+0x266>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006662:	e032      	b.n	80066ca <UART_SetConfig+0x266>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a30      	ldr	r2, [pc, #192]	; (800672c <UART_SetConfig+0x2c8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d12a      	bne.n	80066c4 <UART_SetConfig+0x260>
 800666e:	4b31      	ldr	r3, [pc, #196]	; (8006734 <UART_SetConfig+0x2d0>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006674:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006678:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800667c:	d01a      	beq.n	80066b4 <UART_SetConfig+0x250>
 800667e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006682:	d81b      	bhi.n	80066bc <UART_SetConfig+0x258>
 8006684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006688:	d00c      	beq.n	80066a4 <UART_SetConfig+0x240>
 800668a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668e:	d815      	bhi.n	80066bc <UART_SetConfig+0x258>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <UART_SetConfig+0x238>
 8006694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006698:	d008      	beq.n	80066ac <UART_SetConfig+0x248>
 800669a:	e00f      	b.n	80066bc <UART_SetConfig+0x258>
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e012      	b.n	80066ca <UART_SetConfig+0x266>
 80066a4:	2302      	movs	r3, #2
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e00e      	b.n	80066ca <UART_SetConfig+0x266>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e00a      	b.n	80066ca <UART_SetConfig+0x266>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e006      	b.n	80066ca <UART_SetConfig+0x266>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e002      	b.n	80066ca <UART_SetConfig+0x266>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a17      	ldr	r2, [pc, #92]	; (800672c <UART_SetConfig+0x2c8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	f040 808b 	bne.w	80067ec <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d834      	bhi.n	8006748 <UART_SetConfig+0x2e4>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0x280>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006709 	.word	0x08006709
 80066e8:	08006749 	.word	0x08006749
 80066ec:	08006711 	.word	0x08006711
 80066f0:	08006749 	.word	0x08006749
 80066f4:	08006717 	.word	0x08006717
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	0800671f 	.word	0x0800671f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006708:	f7fe fede 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 800670c:	61f8      	str	r0, [r7, #28]
        break;
 800670e:	e021      	b.n	8006754 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <UART_SetConfig+0x2e0>)
 8006712:	61fb      	str	r3, [r7, #28]
        break;
 8006714:	e01e      	b.n	8006754 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006716:	f7fe fe3f 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 800671a:	61f8      	str	r0, [r7, #28]
        break;
 800671c:	e01a      	b.n	8006754 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	61fb      	str	r3, [r7, #28]
        break;
 8006724:	e016      	b.n	8006754 <UART_SetConfig+0x2f0>
 8006726:	bf00      	nop
 8006728:	efff69f3 	.word	0xefff69f3
 800672c:	40008000 	.word	0x40008000
 8006730:	40013800 	.word	0x40013800
 8006734:	40021000 	.word	0x40021000
 8006738:	40004400 	.word	0x40004400
 800673c:	40004800 	.word	0x40004800
 8006740:	40004c00 	.word	0x40004c00
 8006744:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006752:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80fa 	beq.w	8006950 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	429a      	cmp	r2, r3
 800676a:	d305      	bcc.n	8006778 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	429a      	cmp	r2, r3
 8006776:	d903      	bls.n	8006780 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800677e:	e0e7      	b.n	8006950 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2200      	movs	r2, #0
 8006784:	461c      	mov	r4, r3
 8006786:	4615      	mov	r5, r2
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	022b      	lsls	r3, r5, #8
 8006792:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006796:	0222      	lsls	r2, r4, #8
 8006798:	68f9      	ldr	r1, [r7, #12]
 800679a:	6849      	ldr	r1, [r1, #4]
 800679c:	0849      	lsrs	r1, r1, #1
 800679e:	2000      	movs	r0, #0
 80067a0:	4688      	mov	r8, r1
 80067a2:	4681      	mov	r9, r0
 80067a4:	eb12 0a08 	adds.w	sl, r2, r8
 80067a8:	eb43 0b09 	adc.w	fp, r3, r9
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ba:	4650      	mov	r0, sl
 80067bc:	4659      	mov	r1, fp
 80067be:	f7fa fa17 	bl	8000bf0 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4613      	mov	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d0:	d308      	bcc.n	80067e4 <UART_SetConfig+0x380>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d8:	d204      	bcs.n	80067e4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e0b5      	b.n	8006950 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067ea:	e0b1      	b.n	8006950 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f4:	d15d      	bne.n	80068b2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80067f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d827      	bhi.n	800684e <UART_SetConfig+0x3ea>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <UART_SetConfig+0x3a0>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006829 	.word	0x08006829
 8006808:	08006831 	.word	0x08006831
 800680c:	08006839 	.word	0x08006839
 8006810:	0800684f 	.word	0x0800684f
 8006814:	0800683f 	.word	0x0800683f
 8006818:	0800684f 	.word	0x0800684f
 800681c:	0800684f 	.word	0x0800684f
 8006820:	0800684f 	.word	0x0800684f
 8006824:	08006847 	.word	0x08006847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006828:	f7fe fe4e 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 800682c:	61f8      	str	r0, [r7, #28]
        break;
 800682e:	e014      	b.n	800685a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006830:	f7fe fe60 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 8006834:	61f8      	str	r0, [r7, #28]
        break;
 8006836:	e010      	b.n	800685a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006838:	4b4c      	ldr	r3, [pc, #304]	; (800696c <UART_SetConfig+0x508>)
 800683a:	61fb      	str	r3, [r7, #28]
        break;
 800683c:	e00d      	b.n	800685a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683e:	f7fe fdab 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8006842:	61f8      	str	r0, [r7, #28]
        break;
 8006844:	e009      	b.n	800685a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684a:	61fb      	str	r3, [r7, #28]
        break;
 800684c:	e005      	b.n	800685a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d077      	beq.n	8006950 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005a      	lsls	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b0f      	cmp	r3, #15
 800687a:	d916      	bls.n	80068aa <UART_SetConfig+0x446>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006882:	d212      	bcs.n	80068aa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f023 030f 	bic.w	r3, r3, #15
 800688c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	b29b      	uxth	r3, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	b29a      	uxth	r2, r3
 800689a:	8afb      	ldrh	r3, [r7, #22]
 800689c:	4313      	orrs	r3, r2
 800689e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	8afa      	ldrh	r2, [r7, #22]
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	e052      	b.n	8006950 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068b0:	e04e      	b.n	8006950 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d827      	bhi.n	800690a <UART_SetConfig+0x4a6>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <UART_SetConfig+0x45c>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	0800690b 	.word	0x0800690b
 80068d0:	080068fb 	.word	0x080068fb
 80068d4:	0800690b 	.word	0x0800690b
 80068d8:	0800690b 	.word	0x0800690b
 80068dc:	0800690b 	.word	0x0800690b
 80068e0:	08006903 	.word	0x08006903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe fdf0 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 80068e8:	61f8      	str	r0, [r7, #28]
        break;
 80068ea:	e014      	b.n	8006916 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ec:	f7fe fe02 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 80068f0:	61f8      	str	r0, [r7, #28]
        break;
 80068f2:	e010      	b.n	8006916 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f4:	4b1d      	ldr	r3, [pc, #116]	; (800696c <UART_SetConfig+0x508>)
 80068f6:	61fb      	str	r3, [r7, #28]
        break;
 80068f8:	e00d      	b.n	8006916 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fa:	f7fe fd4d 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 80068fe:	61f8      	str	r0, [r7, #28]
        break;
 8006900:	e009      	b.n	8006916 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006906:	61fb      	str	r3, [r7, #28]
        break;
 8006908:	e005      	b.n	8006916 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006914:	bf00      	nop
    }

    if (pclk != 0U)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d019      	beq.n	8006950 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	085a      	lsrs	r2, r3, #1
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d909      	bls.n	800694a <UART_SetConfig+0x4e6>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693c:	d205      	bcs.n	800694a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60da      	str	r2, [r3, #12]
 8006948:	e002      	b.n	8006950 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800695c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696a:	bf00      	nop
 800696c:	00f42400 	.word	0x00f42400

08006970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d10a      	bne.n	8006a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac4:	f7fd fbc2 	bl	800424c <HAL_GetTick>
 8006ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d10e      	bne.n	8006af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f82d 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e023      	b.n	8006b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d10e      	bne.n	8006b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f817 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e00d      	b.n	8006b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	e0a5      	b.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	f000 80a1 	beq.w	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fd fb73 	bl	800424c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d13e      	bne.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bca:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e067      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d04f      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c12:	d147      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c70:	623a      	str	r2, [r7, #32]
 8006c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	69f9      	ldr	r1, [r7, #28]
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e010      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4013      	ands	r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f43f af4a 	beq.w	8006b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3770      	adds	r7, #112	; 0x70
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b095      	sub	sp, #84	; 0x54
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8006cf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3308      	adds	r3, #8
 8006d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d118      	bne.n	8006d76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f023 0310 	bic.w	r3, r3, #16
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6979      	ldr	r1, [r7, #20]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006d88:	bf00      	nop
 8006d8a:	3754      	adds	r7, #84	; 0x54
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fb40 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6979      	ldr	r1, [r7, #20]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	613b      	str	r3, [r7, #16]
   return(result);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e6      	bne.n	8006dc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fb0c 	bl	8006424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0c:	bf00      	nop
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <atoi>:
 8006e28:	220a      	movs	r2, #10
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f000 b8c2 	b.w	8006fb4 <strtol>

08006e30 <__errno>:
 8006e30:	4b01      	ldr	r3, [pc, #4]	; (8006e38 <__errno+0x8>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4d0d      	ldr	r5, [pc, #52]	; (8006e74 <__libc_init_array+0x38>)
 8006e40:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e42:	1b64      	subs	r4, r4, r5
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	2600      	movs	r6, #0
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	4d0b      	ldr	r5, [pc, #44]	; (8006e7c <__libc_init_array+0x40>)
 8006e4e:	4c0c      	ldr	r4, [pc, #48]	; (8006e80 <__libc_init_array+0x44>)
 8006e50:	f003 f980 	bl	800a154 <_init>
 8006e54:	1b64      	subs	r4, r4, r5
 8006e56:	10a4      	asrs	r4, r4, #2
 8006e58:	2600      	movs	r6, #0
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	0800bdb8 	.word	0x0800bdb8
 8006e78:	0800bdb8 	.word	0x0800bdb8
 8006e7c:	0800bdb8 	.word	0x0800bdb8
 8006e80:	0800bdbc 	.word	0x0800bdbc

08006e84 <memcpy>:
 8006e84:	440a      	add	r2, r1
 8006e86:	4291      	cmp	r1, r2
 8006e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e8c:	d100      	bne.n	8006e90 <memcpy+0xc>
 8006e8e:	4770      	bx	lr
 8006e90:	b510      	push	{r4, lr}
 8006e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	d1f9      	bne.n	8006e92 <memcpy+0xe>
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <memset>:
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memset+0xa>
 8006ea8:	4770      	bx	lr
 8006eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006eae:	e7f9      	b.n	8006ea4 <memset+0x4>

08006eb0 <_strtol_l.constprop.0>:
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb6:	d001      	beq.n	8006ebc <_strtol_l.constprop.0+0xc>
 8006eb8:	2b24      	cmp	r3, #36	; 0x24
 8006eba:	d906      	bls.n	8006eca <_strtol_l.constprop.0+0x1a>
 8006ebc:	f7ff ffb8 	bl	8006e30 <__errno>
 8006ec0:	2316      	movs	r3, #22
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006fb0 <_strtol_l.constprop.0+0x100>
 8006ece:	460d      	mov	r5, r1
 8006ed0:	462e      	mov	r6, r5
 8006ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ed6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006eda:	f017 0708 	ands.w	r7, r7, #8
 8006ede:	d1f7      	bne.n	8006ed0 <_strtol_l.constprop.0+0x20>
 8006ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ee2:	d132      	bne.n	8006f4a <_strtol_l.constprop.0+0x9a>
 8006ee4:	782c      	ldrb	r4, [r5, #0]
 8006ee6:	2701      	movs	r7, #1
 8006ee8:	1cb5      	adds	r5, r6, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d05b      	beq.n	8006fa6 <_strtol_l.constprop.0+0xf6>
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d109      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006ef2:	2c30      	cmp	r4, #48	; 0x30
 8006ef4:	d107      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006ef6:	782c      	ldrb	r4, [r5, #0]
 8006ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006efc:	2c58      	cmp	r4, #88	; 0x58
 8006efe:	d14d      	bne.n	8006f9c <_strtol_l.constprop.0+0xec>
 8006f00:	786c      	ldrb	r4, [r5, #1]
 8006f02:	2310      	movs	r3, #16
 8006f04:	3502      	adds	r5, #2
 8006f06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f0e:	f04f 0c00 	mov.w	ip, #0
 8006f12:	fbb8 f9f3 	udiv	r9, r8, r3
 8006f16:	4666      	mov	r6, ip
 8006f18:	fb03 8a19 	mls	sl, r3, r9, r8
 8006f1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006f20:	f1be 0f09 	cmp.w	lr, #9
 8006f24:	d816      	bhi.n	8006f54 <_strtol_l.constprop.0+0xa4>
 8006f26:	4674      	mov	r4, lr
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	dd24      	ble.n	8006f76 <_strtol_l.constprop.0+0xc6>
 8006f2c:	f1bc 0f00 	cmp.w	ip, #0
 8006f30:	db1e      	blt.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f32:	45b1      	cmp	r9, r6
 8006f34:	d31c      	bcc.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f36:	d101      	bne.n	8006f3c <_strtol_l.constprop.0+0x8c>
 8006f38:	45a2      	cmp	sl, r4
 8006f3a:	db19      	blt.n	8006f70 <_strtol_l.constprop.0+0xc0>
 8006f3c:	fb06 4603 	mla	r6, r6, r3, r4
 8006f40:	f04f 0c01 	mov.w	ip, #1
 8006f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f48:	e7e8      	b.n	8006f1c <_strtol_l.constprop.0+0x6c>
 8006f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f4c:	bf04      	itt	eq
 8006f4e:	782c      	ldrbeq	r4, [r5, #0]
 8006f50:	1cb5      	addeq	r5, r6, #2
 8006f52:	e7ca      	b.n	8006eea <_strtol_l.constprop.0+0x3a>
 8006f54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f58:	f1be 0f19 	cmp.w	lr, #25
 8006f5c:	d801      	bhi.n	8006f62 <_strtol_l.constprop.0+0xb2>
 8006f5e:	3c37      	subs	r4, #55	; 0x37
 8006f60:	e7e2      	b.n	8006f28 <_strtol_l.constprop.0+0x78>
 8006f62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f66:	f1be 0f19 	cmp.w	lr, #25
 8006f6a:	d804      	bhi.n	8006f76 <_strtol_l.constprop.0+0xc6>
 8006f6c:	3c57      	subs	r4, #87	; 0x57
 8006f6e:	e7db      	b.n	8006f28 <_strtol_l.constprop.0+0x78>
 8006f70:	f04f 3cff 	mov.w	ip, #4294967295
 8006f74:	e7e6      	b.n	8006f44 <_strtol_l.constprop.0+0x94>
 8006f76:	f1bc 0f00 	cmp.w	ip, #0
 8006f7a:	da05      	bge.n	8006f88 <_strtol_l.constprop.0+0xd8>
 8006f7c:	2322      	movs	r3, #34	; 0x22
 8006f7e:	6003      	str	r3, [r0, #0]
 8006f80:	4646      	mov	r6, r8
 8006f82:	b942      	cbnz	r2, 8006f96 <_strtol_l.constprop.0+0xe6>
 8006f84:	4630      	mov	r0, r6
 8006f86:	e79e      	b.n	8006ec6 <_strtol_l.constprop.0+0x16>
 8006f88:	b107      	cbz	r7, 8006f8c <_strtol_l.constprop.0+0xdc>
 8006f8a:	4276      	negs	r6, r6
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	d0f9      	beq.n	8006f84 <_strtol_l.constprop.0+0xd4>
 8006f90:	f1bc 0f00 	cmp.w	ip, #0
 8006f94:	d000      	beq.n	8006f98 <_strtol_l.constprop.0+0xe8>
 8006f96:	1e69      	subs	r1, r5, #1
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	e7f3      	b.n	8006f84 <_strtol_l.constprop.0+0xd4>
 8006f9c:	2430      	movs	r4, #48	; 0x30
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1b1      	bne.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fa2:	2308      	movs	r3, #8
 8006fa4:	e7af      	b.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fa6:	2c30      	cmp	r4, #48	; 0x30
 8006fa8:	d0a5      	beq.n	8006ef6 <_strtol_l.constprop.0+0x46>
 8006faa:	230a      	movs	r3, #10
 8006fac:	e7ab      	b.n	8006f06 <_strtol_l.constprop.0+0x56>
 8006fae:	bf00      	nop
 8006fb0:	0800b9c9 	.word	0x0800b9c9

08006fb4 <strtol>:
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	460a      	mov	r2, r1
 8006fb8:	4601      	mov	r1, r0
 8006fba:	4802      	ldr	r0, [pc, #8]	; (8006fc4 <strtol+0x10>)
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f7ff bf77 	b.w	8006eb0 <_strtol_l.constprop.0>
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c

08006fc8 <nan>:
 8006fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006fd0 <nan+0x8>
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	7ff80000 	.word	0x7ff80000

08006fd8 <atan>:
 8006fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	ec55 4b10 	vmov	r4, r5, d0
 8006fe0:	4bc3      	ldr	r3, [pc, #780]	; (80072f0 <atan+0x318>)
 8006fe2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fe6:	429e      	cmp	r6, r3
 8006fe8:	46ab      	mov	fp, r5
 8006fea:	dd18      	ble.n	800701e <atan+0x46>
 8006fec:	4bc1      	ldr	r3, [pc, #772]	; (80072f4 <atan+0x31c>)
 8006fee:	429e      	cmp	r6, r3
 8006ff0:	dc01      	bgt.n	8006ff6 <atan+0x1e>
 8006ff2:	d109      	bne.n	8007008 <atan+0x30>
 8006ff4:	b144      	cbz	r4, 8007008 <atan+0x30>
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 f8f9 	bl	80001f4 <__adddf3>
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	e006      	b.n	8007016 <atan+0x3e>
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	f300 8131 	bgt.w	8007272 <atan+0x29a>
 8007010:	a59b      	add	r5, pc, #620	; (adr r5, 8007280 <atan+0x2a8>)
 8007012:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007016:	ec45 4b10 	vmov	d0, r4, r5
 800701a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701e:	4bb6      	ldr	r3, [pc, #728]	; (80072f8 <atan+0x320>)
 8007020:	429e      	cmp	r6, r3
 8007022:	dc14      	bgt.n	800704e <atan+0x76>
 8007024:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007028:	429e      	cmp	r6, r3
 800702a:	dc0d      	bgt.n	8007048 <atan+0x70>
 800702c:	a396      	add	r3, pc, #600	; (adr r3, 8007288 <atan+0x2b0>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	ee10 0a10 	vmov	r0, s0
 8007036:	4629      	mov	r1, r5
 8007038:	f7f9 f8dc 	bl	80001f4 <__adddf3>
 800703c:	4baf      	ldr	r3, [pc, #700]	; (80072fc <atan+0x324>)
 800703e:	2200      	movs	r2, #0
 8007040:	f7f9 fd1e 	bl	8000a80 <__aeabi_dcmpgt>
 8007044:	2800      	cmp	r0, #0
 8007046:	d1e6      	bne.n	8007016 <atan+0x3e>
 8007048:	f04f 3aff 	mov.w	sl, #4294967295
 800704c:	e02b      	b.n	80070a6 <atan+0xce>
 800704e:	f000 f9b7 	bl	80073c0 <fabs>
 8007052:	4bab      	ldr	r3, [pc, #684]	; (8007300 <atan+0x328>)
 8007054:	429e      	cmp	r6, r3
 8007056:	ec55 4b10 	vmov	r4, r5, d0
 800705a:	f300 80bf 	bgt.w	80071dc <atan+0x204>
 800705e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007062:	429e      	cmp	r6, r3
 8007064:	f300 80a0 	bgt.w	80071a8 <atan+0x1d0>
 8007068:	ee10 2a10 	vmov	r2, s0
 800706c:	ee10 0a10 	vmov	r0, s0
 8007070:	462b      	mov	r3, r5
 8007072:	4629      	mov	r1, r5
 8007074:	f7f9 f8be 	bl	80001f4 <__adddf3>
 8007078:	4ba0      	ldr	r3, [pc, #640]	; (80072fc <atan+0x324>)
 800707a:	2200      	movs	r2, #0
 800707c:	f7f9 f8b8 	bl	80001f0 <__aeabi_dsub>
 8007080:	2200      	movs	r2, #0
 8007082:	4606      	mov	r6, r0
 8007084:	460f      	mov	r7, r1
 8007086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 f8b1 	bl	80001f4 <__adddf3>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4630      	mov	r0, r6
 8007098:	4639      	mov	r1, r7
 800709a:	f7f9 fb8b 	bl	80007b4 <__aeabi_ddiv>
 800709e:	f04f 0a00 	mov.w	sl, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 fa57 	bl	8000560 <__aeabi_dmul>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4680      	mov	r8, r0
 80070b8:	4689      	mov	r9, r1
 80070ba:	f7f9 fa51 	bl	8000560 <__aeabi_dmul>
 80070be:	a374      	add	r3, pc, #464	; (adr r3, 8007290 <atan+0x2b8>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	f7f9 fa4a 	bl	8000560 <__aeabi_dmul>
 80070cc:	a372      	add	r3, pc, #456	; (adr r3, 8007298 <atan+0x2c0>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f88f 	bl	80001f4 <__adddf3>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 fa41 	bl	8000560 <__aeabi_dmul>
 80070de:	a370      	add	r3, pc, #448	; (adr r3, 80072a0 <atan+0x2c8>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f886 	bl	80001f4 <__adddf3>
 80070e8:	4632      	mov	r2, r6
 80070ea:	463b      	mov	r3, r7
 80070ec:	f7f9 fa38 	bl	8000560 <__aeabi_dmul>
 80070f0:	a36d      	add	r3, pc, #436	; (adr r3, 80072a8 <atan+0x2d0>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 f87d 	bl	80001f4 <__adddf3>
 80070fa:	4632      	mov	r2, r6
 80070fc:	463b      	mov	r3, r7
 80070fe:	f7f9 fa2f 	bl	8000560 <__aeabi_dmul>
 8007102:	a36b      	add	r3, pc, #428	; (adr r3, 80072b0 <atan+0x2d8>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f874 	bl	80001f4 <__adddf3>
 800710c:	4632      	mov	r2, r6
 800710e:	463b      	mov	r3, r7
 8007110:	f7f9 fa26 	bl	8000560 <__aeabi_dmul>
 8007114:	a368      	add	r3, pc, #416	; (adr r3, 80072b8 <atan+0x2e0>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f86b 	bl	80001f4 <__adddf3>
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	f7f9 fa1d 	bl	8000560 <__aeabi_dmul>
 8007126:	a366      	add	r3, pc, #408	; (adr r3, 80072c0 <atan+0x2e8>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	4680      	mov	r8, r0
 800712e:	4689      	mov	r9, r1
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fa14 	bl	8000560 <__aeabi_dmul>
 8007138:	a363      	add	r3, pc, #396	; (adr r3, 80072c8 <atan+0x2f0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f857 	bl	80001f0 <__aeabi_dsub>
 8007142:	4632      	mov	r2, r6
 8007144:	463b      	mov	r3, r7
 8007146:	f7f9 fa0b 	bl	8000560 <__aeabi_dmul>
 800714a:	a361      	add	r3, pc, #388	; (adr r3, 80072d0 <atan+0x2f8>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f84e 	bl	80001f0 <__aeabi_dsub>
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	f7f9 fa02 	bl	8000560 <__aeabi_dmul>
 800715c:	a35e      	add	r3, pc, #376	; (adr r3, 80072d8 <atan+0x300>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 f845 	bl	80001f0 <__aeabi_dsub>
 8007166:	4632      	mov	r2, r6
 8007168:	463b      	mov	r3, r7
 800716a:	f7f9 f9f9 	bl	8000560 <__aeabi_dmul>
 800716e:	a35c      	add	r3, pc, #368	; (adr r3, 80072e0 <atan+0x308>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f9 f83c 	bl	80001f0 <__aeabi_dsub>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 f9f0 	bl	8000560 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 f834 	bl	80001f4 <__adddf3>
 800718c:	4622      	mov	r2, r4
 800718e:	462b      	mov	r3, r5
 8007190:	f7f9 f9e6 	bl	8000560 <__aeabi_dmul>
 8007194:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	d14b      	bne.n	8007236 <atan+0x25e>
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 f825 	bl	80001f0 <__aeabi_dsub>
 80071a6:	e72c      	b.n	8007002 <atan+0x2a>
 80071a8:	ee10 0a10 	vmov	r0, s0
 80071ac:	4b53      	ldr	r3, [pc, #332]	; (80072fc <atan+0x324>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 f81d 	bl	80001f0 <__aeabi_dsub>
 80071b6:	4b51      	ldr	r3, [pc, #324]	; (80072fc <atan+0x324>)
 80071b8:	4606      	mov	r6, r0
 80071ba:	460f      	mov	r7, r1
 80071bc:	2200      	movs	r2, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f817 	bl	80001f4 <__adddf3>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4630      	mov	r0, r6
 80071cc:	4639      	mov	r1, r7
 80071ce:	f7f9 faf1 	bl	80007b4 <__aeabi_ddiv>
 80071d2:	f04f 0a01 	mov.w	sl, #1
 80071d6:	4604      	mov	r4, r0
 80071d8:	460d      	mov	r5, r1
 80071da:	e764      	b.n	80070a6 <atan+0xce>
 80071dc:	4b49      	ldr	r3, [pc, #292]	; (8007304 <atan+0x32c>)
 80071de:	429e      	cmp	r6, r3
 80071e0:	da1d      	bge.n	800721e <atan+0x246>
 80071e2:	ee10 0a10 	vmov	r0, s0
 80071e6:	4b48      	ldr	r3, [pc, #288]	; (8007308 <atan+0x330>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	4629      	mov	r1, r5
 80071ec:	f7f9 f800 	bl	80001f0 <__aeabi_dsub>
 80071f0:	4b45      	ldr	r3, [pc, #276]	; (8007308 <atan+0x330>)
 80071f2:	4606      	mov	r6, r0
 80071f4:	460f      	mov	r7, r1
 80071f6:	2200      	movs	r2, #0
 80071f8:	4620      	mov	r0, r4
 80071fa:	4629      	mov	r1, r5
 80071fc:	f7f9 f9b0 	bl	8000560 <__aeabi_dmul>
 8007200:	4b3e      	ldr	r3, [pc, #248]	; (80072fc <atan+0x324>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f8 fff6 	bl	80001f4 <__adddf3>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fad0 	bl	80007b4 <__aeabi_ddiv>
 8007214:	f04f 0a02 	mov.w	sl, #2
 8007218:	4604      	mov	r4, r0
 800721a:	460d      	mov	r5, r1
 800721c:	e743      	b.n	80070a6 <atan+0xce>
 800721e:	462b      	mov	r3, r5
 8007220:	ee10 2a10 	vmov	r2, s0
 8007224:	4939      	ldr	r1, [pc, #228]	; (800730c <atan+0x334>)
 8007226:	2000      	movs	r0, #0
 8007228:	f7f9 fac4 	bl	80007b4 <__aeabi_ddiv>
 800722c:	f04f 0a03 	mov.w	sl, #3
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	e737      	b.n	80070a6 <atan+0xce>
 8007236:	4b36      	ldr	r3, [pc, #216]	; (8007310 <atan+0x338>)
 8007238:	4e36      	ldr	r6, [pc, #216]	; (8007314 <atan+0x33c>)
 800723a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800723e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007242:	e9da 2300 	ldrd	r2, r3, [sl]
 8007246:	f7f8 ffd3 	bl	80001f0 <__aeabi_dsub>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	f7f8 ffcf 	bl	80001f0 <__aeabi_dsub>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	e9d6 0100 	ldrd	r0, r1, [r6]
 800725a:	f7f8 ffc9 	bl	80001f0 <__aeabi_dsub>
 800725e:	f1bb 0f00 	cmp.w	fp, #0
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	f6bf aed6 	bge.w	8007016 <atan+0x3e>
 800726a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800726e:	461d      	mov	r5, r3
 8007270:	e6d1      	b.n	8007016 <atan+0x3e>
 8007272:	a51d      	add	r5, pc, #116	; (adr r5, 80072e8 <atan+0x310>)
 8007274:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007278:	e6cd      	b.n	8007016 <atan+0x3e>
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w
 8007280:	54442d18 	.word	0x54442d18
 8007284:	bff921fb 	.word	0xbff921fb
 8007288:	8800759c 	.word	0x8800759c
 800728c:	7e37e43c 	.word	0x7e37e43c
 8007290:	e322da11 	.word	0xe322da11
 8007294:	3f90ad3a 	.word	0x3f90ad3a
 8007298:	24760deb 	.word	0x24760deb
 800729c:	3fa97b4b 	.word	0x3fa97b4b
 80072a0:	a0d03d51 	.word	0xa0d03d51
 80072a4:	3fb10d66 	.word	0x3fb10d66
 80072a8:	c54c206e 	.word	0xc54c206e
 80072ac:	3fb745cd 	.word	0x3fb745cd
 80072b0:	920083ff 	.word	0x920083ff
 80072b4:	3fc24924 	.word	0x3fc24924
 80072b8:	5555550d 	.word	0x5555550d
 80072bc:	3fd55555 	.word	0x3fd55555
 80072c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80072c4:	bfa2b444 	.word	0xbfa2b444
 80072c8:	52defd9a 	.word	0x52defd9a
 80072cc:	3fadde2d 	.word	0x3fadde2d
 80072d0:	af749a6d 	.word	0xaf749a6d
 80072d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80072d8:	fe231671 	.word	0xfe231671
 80072dc:	3fbc71c6 	.word	0x3fbc71c6
 80072e0:	9998ebc4 	.word	0x9998ebc4
 80072e4:	3fc99999 	.word	0x3fc99999
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	3ff921fb 	.word	0x3ff921fb
 80072f0:	440fffff 	.word	0x440fffff
 80072f4:	7ff00000 	.word	0x7ff00000
 80072f8:	3fdbffff 	.word	0x3fdbffff
 80072fc:	3ff00000 	.word	0x3ff00000
 8007300:	3ff2ffff 	.word	0x3ff2ffff
 8007304:	40038000 	.word	0x40038000
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	bff00000 	.word	0xbff00000
 8007310:	0800bb50 	.word	0x0800bb50
 8007314:	0800bb30 	.word	0x0800bb30

08007318 <cos>:
 8007318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800731a:	ec53 2b10 	vmov	r2, r3, d0
 800731e:	4826      	ldr	r0, [pc, #152]	; (80073b8 <cos+0xa0>)
 8007320:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007324:	4281      	cmp	r1, r0
 8007326:	dc06      	bgt.n	8007336 <cos+0x1e>
 8007328:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80073b0 <cos+0x98>
 800732c:	b005      	add	sp, #20
 800732e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007332:	f001 bf69 	b.w	8009208 <__kernel_cos>
 8007336:	4821      	ldr	r0, [pc, #132]	; (80073bc <cos+0xa4>)
 8007338:	4281      	cmp	r1, r0
 800733a:	dd09      	ble.n	8007350 <cos+0x38>
 800733c:	ee10 0a10 	vmov	r0, s0
 8007340:	4619      	mov	r1, r3
 8007342:	f7f8 ff55 	bl	80001f0 <__aeabi_dsub>
 8007346:	ec41 0b10 	vmov	d0, r0, r1
 800734a:	b005      	add	sp, #20
 800734c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007350:	4668      	mov	r0, sp
 8007352:	f001 fc99 	bl	8008c88 <__ieee754_rem_pio2>
 8007356:	f000 0003 	and.w	r0, r0, #3
 800735a:	2801      	cmp	r0, #1
 800735c:	d00b      	beq.n	8007376 <cos+0x5e>
 800735e:	2802      	cmp	r0, #2
 8007360:	d016      	beq.n	8007390 <cos+0x78>
 8007362:	b9e0      	cbnz	r0, 800739e <cos+0x86>
 8007364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007368:	ed9d 0b00 	vldr	d0, [sp]
 800736c:	f001 ff4c 	bl	8009208 <__kernel_cos>
 8007370:	ec51 0b10 	vmov	r0, r1, d0
 8007374:	e7e7      	b.n	8007346 <cos+0x2e>
 8007376:	ed9d 1b02 	vldr	d1, [sp, #8]
 800737a:	ed9d 0b00 	vldr	d0, [sp]
 800737e:	f002 fb5b 	bl	8009a38 <__kernel_sin>
 8007382:	ec53 2b10 	vmov	r2, r3, d0
 8007386:	ee10 0a10 	vmov	r0, s0
 800738a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800738e:	e7da      	b.n	8007346 <cos+0x2e>
 8007390:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007394:	ed9d 0b00 	vldr	d0, [sp]
 8007398:	f001 ff36 	bl	8009208 <__kernel_cos>
 800739c:	e7f1      	b.n	8007382 <cos+0x6a>
 800739e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80073a2:	ed9d 0b00 	vldr	d0, [sp]
 80073a6:	2001      	movs	r0, #1
 80073a8:	f002 fb46 	bl	8009a38 <__kernel_sin>
 80073ac:	e7e0      	b.n	8007370 <cos+0x58>
 80073ae:	bf00      	nop
	...
 80073b8:	3fe921fb 	.word	0x3fe921fb
 80073bc:	7fefffff 	.word	0x7fefffff

080073c0 <fabs>:
 80073c0:	ec51 0b10 	vmov	r0, r1, d0
 80073c4:	ee10 2a10 	vmov	r2, s0
 80073c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073cc:	ec43 2b10 	vmov	d0, r2, r3
 80073d0:	4770      	bx	lr
 80073d2:	0000      	movs	r0, r0
 80073d4:	0000      	movs	r0, r0
	...

080073d8 <floor>:
 80073d8:	ec51 0b10 	vmov	r0, r1, d0
 80073dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80073e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80073e8:	2e13      	cmp	r6, #19
 80073ea:	ee10 5a10 	vmov	r5, s0
 80073ee:	ee10 8a10 	vmov	r8, s0
 80073f2:	460c      	mov	r4, r1
 80073f4:	dc32      	bgt.n	800745c <floor+0x84>
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	da14      	bge.n	8007424 <floor+0x4c>
 80073fa:	a333      	add	r3, pc, #204	; (adr r3, 80074c8 <floor+0xf0>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f8 fef8 	bl	80001f4 <__adddf3>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	f7f9 fb3a 	bl	8000a80 <__aeabi_dcmpgt>
 800740c:	b138      	cbz	r0, 800741e <floor+0x46>
 800740e:	2c00      	cmp	r4, #0
 8007410:	da57      	bge.n	80074c2 <floor+0xea>
 8007412:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007416:	431d      	orrs	r5, r3
 8007418:	d001      	beq.n	800741e <floor+0x46>
 800741a:	4c2d      	ldr	r4, [pc, #180]	; (80074d0 <floor+0xf8>)
 800741c:	2500      	movs	r5, #0
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	e025      	b.n	8007470 <floor+0x98>
 8007424:	4f2b      	ldr	r7, [pc, #172]	; (80074d4 <floor+0xfc>)
 8007426:	4137      	asrs	r7, r6
 8007428:	ea01 0307 	and.w	r3, r1, r7
 800742c:	4303      	orrs	r3, r0
 800742e:	d01f      	beq.n	8007470 <floor+0x98>
 8007430:	a325      	add	r3, pc, #148	; (adr r3, 80074c8 <floor+0xf0>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f8 fedd 	bl	80001f4 <__adddf3>
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	f7f9 fb1f 	bl	8000a80 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	d0eb      	beq.n	800741e <floor+0x46>
 8007446:	2c00      	cmp	r4, #0
 8007448:	bfbe      	ittt	lt
 800744a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800744e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007452:	19a4      	addlt	r4, r4, r6
 8007454:	ea24 0407 	bic.w	r4, r4, r7
 8007458:	2500      	movs	r5, #0
 800745a:	e7e0      	b.n	800741e <floor+0x46>
 800745c:	2e33      	cmp	r6, #51	; 0x33
 800745e:	dd0b      	ble.n	8007478 <floor+0xa0>
 8007460:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007464:	d104      	bne.n	8007470 <floor+0x98>
 8007466:	ee10 2a10 	vmov	r2, s0
 800746a:	460b      	mov	r3, r1
 800746c:	f7f8 fec2 	bl	80001f4 <__adddf3>
 8007470:	ec41 0b10 	vmov	d0, r0, r1
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800747c:	f04f 33ff 	mov.w	r3, #4294967295
 8007480:	fa23 f707 	lsr.w	r7, r3, r7
 8007484:	4207      	tst	r7, r0
 8007486:	d0f3      	beq.n	8007470 <floor+0x98>
 8007488:	a30f      	add	r3, pc, #60	; (adr r3, 80074c8 <floor+0xf0>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f7f8 feb1 	bl	80001f4 <__adddf3>
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	f7f9 faf3 	bl	8000a80 <__aeabi_dcmpgt>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0bf      	beq.n	800741e <floor+0x46>
 800749e:	2c00      	cmp	r4, #0
 80074a0:	da02      	bge.n	80074a8 <floor+0xd0>
 80074a2:	2e14      	cmp	r6, #20
 80074a4:	d103      	bne.n	80074ae <floor+0xd6>
 80074a6:	3401      	adds	r4, #1
 80074a8:	ea25 0507 	bic.w	r5, r5, r7
 80074ac:	e7b7      	b.n	800741e <floor+0x46>
 80074ae:	2301      	movs	r3, #1
 80074b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80074b4:	fa03 f606 	lsl.w	r6, r3, r6
 80074b8:	4435      	add	r5, r6
 80074ba:	4545      	cmp	r5, r8
 80074bc:	bf38      	it	cc
 80074be:	18e4      	addcc	r4, r4, r3
 80074c0:	e7f2      	b.n	80074a8 <floor+0xd0>
 80074c2:	2500      	movs	r5, #0
 80074c4:	462c      	mov	r4, r5
 80074c6:	e7aa      	b.n	800741e <floor+0x46>
 80074c8:	8800759c 	.word	0x8800759c
 80074cc:	7e37e43c 	.word	0x7e37e43c
 80074d0:	bff00000 	.word	0xbff00000
 80074d4:	000fffff 	.word	0x000fffff

080074d8 <sin>:
 80074d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074da:	ec53 2b10 	vmov	r2, r3, d0
 80074de:	4828      	ldr	r0, [pc, #160]	; (8007580 <sin+0xa8>)
 80074e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074e4:	4281      	cmp	r1, r0
 80074e6:	dc07      	bgt.n	80074f8 <sin+0x20>
 80074e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007578 <sin+0xa0>
 80074ec:	2000      	movs	r0, #0
 80074ee:	b005      	add	sp, #20
 80074f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074f4:	f002 baa0 	b.w	8009a38 <__kernel_sin>
 80074f8:	4822      	ldr	r0, [pc, #136]	; (8007584 <sin+0xac>)
 80074fa:	4281      	cmp	r1, r0
 80074fc:	dd09      	ble.n	8007512 <sin+0x3a>
 80074fe:	ee10 0a10 	vmov	r0, s0
 8007502:	4619      	mov	r1, r3
 8007504:	f7f8 fe74 	bl	80001f0 <__aeabi_dsub>
 8007508:	ec41 0b10 	vmov	d0, r0, r1
 800750c:	b005      	add	sp, #20
 800750e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007512:	4668      	mov	r0, sp
 8007514:	f001 fbb8 	bl	8008c88 <__ieee754_rem_pio2>
 8007518:	f000 0003 	and.w	r0, r0, #3
 800751c:	2801      	cmp	r0, #1
 800751e:	d00c      	beq.n	800753a <sin+0x62>
 8007520:	2802      	cmp	r0, #2
 8007522:	d011      	beq.n	8007548 <sin+0x70>
 8007524:	b9f0      	cbnz	r0, 8007564 <sin+0x8c>
 8007526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800752a:	ed9d 0b00 	vldr	d0, [sp]
 800752e:	2001      	movs	r0, #1
 8007530:	f002 fa82 	bl	8009a38 <__kernel_sin>
 8007534:	ec51 0b10 	vmov	r0, r1, d0
 8007538:	e7e6      	b.n	8007508 <sin+0x30>
 800753a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800753e:	ed9d 0b00 	vldr	d0, [sp]
 8007542:	f001 fe61 	bl	8009208 <__kernel_cos>
 8007546:	e7f5      	b.n	8007534 <sin+0x5c>
 8007548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800754c:	ed9d 0b00 	vldr	d0, [sp]
 8007550:	2001      	movs	r0, #1
 8007552:	f002 fa71 	bl	8009a38 <__kernel_sin>
 8007556:	ec53 2b10 	vmov	r2, r3, d0
 800755a:	ee10 0a10 	vmov	r0, s0
 800755e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007562:	e7d1      	b.n	8007508 <sin+0x30>
 8007564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007568:	ed9d 0b00 	vldr	d0, [sp]
 800756c:	f001 fe4c 	bl	8009208 <__kernel_cos>
 8007570:	e7f1      	b.n	8007556 <sin+0x7e>
 8007572:	bf00      	nop
 8007574:	f3af 8000 	nop.w
	...
 8007580:	3fe921fb 	.word	0x3fe921fb
 8007584:	7fefffff 	.word	0x7fefffff

08007588 <tan>:
 8007588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800758a:	ec53 2b10 	vmov	r2, r3, d0
 800758e:	4816      	ldr	r0, [pc, #88]	; (80075e8 <tan+0x60>)
 8007590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007594:	4281      	cmp	r1, r0
 8007596:	dc07      	bgt.n	80075a8 <tan+0x20>
 8007598:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80075e0 <tan+0x58>
 800759c:	2001      	movs	r0, #1
 800759e:	b005      	add	sp, #20
 80075a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a4:	f002 bb08 	b.w	8009bb8 <__kernel_tan>
 80075a8:	4810      	ldr	r0, [pc, #64]	; (80075ec <tan+0x64>)
 80075aa:	4281      	cmp	r1, r0
 80075ac:	dd09      	ble.n	80075c2 <tan+0x3a>
 80075ae:	ee10 0a10 	vmov	r0, s0
 80075b2:	4619      	mov	r1, r3
 80075b4:	f7f8 fe1c 	bl	80001f0 <__aeabi_dsub>
 80075b8:	ec41 0b10 	vmov	d0, r0, r1
 80075bc:	b005      	add	sp, #20
 80075be:	f85d fb04 	ldr.w	pc, [sp], #4
 80075c2:	4668      	mov	r0, sp
 80075c4:	f001 fb60 	bl	8008c88 <__ieee754_rem_pio2>
 80075c8:	0040      	lsls	r0, r0, #1
 80075ca:	f000 0002 	and.w	r0, r0, #2
 80075ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80075d2:	ed9d 0b00 	vldr	d0, [sp]
 80075d6:	f1c0 0001 	rsb	r0, r0, #1
 80075da:	f002 faed 	bl	8009bb8 <__kernel_tan>
 80075de:	e7ed      	b.n	80075bc <tan+0x34>
	...
 80075e8:	3fe921fb 	.word	0x3fe921fb
 80075ec:	7fefffff 	.word	0x7fefffff

080075f0 <acos>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	ed2d 8b02 	vpush	{d8}
 80075f6:	ec55 4b10 	vmov	r4, r5, d0
 80075fa:	f000 f8d5 	bl	80077a8 <__ieee754_acos>
 80075fe:	4622      	mov	r2, r4
 8007600:	462b      	mov	r3, r5
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	eeb0 8a40 	vmov.f32	s16, s0
 800760a:	eef0 8a60 	vmov.f32	s17, s1
 800760e:	f7f9 fa41 	bl	8000a94 <__aeabi_dcmpun>
 8007612:	b9a8      	cbnz	r0, 8007640 <acos+0x50>
 8007614:	ec45 4b10 	vmov	d0, r4, r5
 8007618:	f7ff fed2 	bl	80073c0 <fabs>
 800761c:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <acos+0x60>)
 800761e:	ec51 0b10 	vmov	r0, r1, d0
 8007622:	2200      	movs	r2, #0
 8007624:	f7f9 fa2c 	bl	8000a80 <__aeabi_dcmpgt>
 8007628:	b150      	cbz	r0, 8007640 <acos+0x50>
 800762a:	f7ff fc01 	bl	8006e30 <__errno>
 800762e:	ecbd 8b02 	vpop	{d8}
 8007632:	2321      	movs	r3, #33	; 0x21
 8007634:	6003      	str	r3, [r0, #0]
 8007636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763a:	4806      	ldr	r0, [pc, #24]	; (8007654 <acos+0x64>)
 800763c:	f7ff bcc4 	b.w	8006fc8 <nan>
 8007640:	eeb0 0a48 	vmov.f32	s0, s16
 8007644:	eef0 0a68 	vmov.f32	s1, s17
 8007648:	ecbd 8b02 	vpop	{d8}
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	3ff00000 	.word	0x3ff00000
 8007654:	0800bb70 	.word	0x0800bb70

08007658 <asin>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	ed2d 8b02 	vpush	{d8}
 800765e:	ec55 4b10 	vmov	r4, r5, d0
 8007662:	f000 fb01 	bl	8007c68 <__ieee754_asin>
 8007666:	4622      	mov	r2, r4
 8007668:	462b      	mov	r3, r5
 800766a:	4620      	mov	r0, r4
 800766c:	4629      	mov	r1, r5
 800766e:	eeb0 8a40 	vmov.f32	s16, s0
 8007672:	eef0 8a60 	vmov.f32	s17, s1
 8007676:	f7f9 fa0d 	bl	8000a94 <__aeabi_dcmpun>
 800767a:	b9a8      	cbnz	r0, 80076a8 <asin+0x50>
 800767c:	ec45 4b10 	vmov	d0, r4, r5
 8007680:	f7ff fe9e 	bl	80073c0 <fabs>
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <asin+0x60>)
 8007686:	ec51 0b10 	vmov	r0, r1, d0
 800768a:	2200      	movs	r2, #0
 800768c:	f7f9 f9f8 	bl	8000a80 <__aeabi_dcmpgt>
 8007690:	b150      	cbz	r0, 80076a8 <asin+0x50>
 8007692:	f7ff fbcd 	bl	8006e30 <__errno>
 8007696:	ecbd 8b02 	vpop	{d8}
 800769a:	2321      	movs	r3, #33	; 0x21
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a2:	4806      	ldr	r0, [pc, #24]	; (80076bc <asin+0x64>)
 80076a4:	f7ff bc90 	b.w	8006fc8 <nan>
 80076a8:	eeb0 0a48 	vmov.f32	s0, s16
 80076ac:	eef0 0a68 	vmov.f32	s1, s17
 80076b0:	ecbd 8b02 	vpop	{d8}
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	bf00      	nop
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	0800bb70 	.word	0x0800bb70

080076c0 <atan2>:
 80076c0:	f000 bce6 	b.w	8008090 <__ieee754_atan2>

080076c4 <pow>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	ed2d 8b02 	vpush	{d8}
 80076ca:	eeb0 8a40 	vmov.f32	s16, s0
 80076ce:	eef0 8a60 	vmov.f32	s17, s1
 80076d2:	ec55 4b11 	vmov	r4, r5, d1
 80076d6:	f000 fda7 	bl	8008228 <__ieee754_pow>
 80076da:	4622      	mov	r2, r4
 80076dc:	462b      	mov	r3, r5
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	ec57 6b10 	vmov	r6, r7, d0
 80076e6:	f7f9 f9d5 	bl	8000a94 <__aeabi_dcmpun>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d13b      	bne.n	8007766 <pow+0xa2>
 80076ee:	ec51 0b18 	vmov	r0, r1, d8
 80076f2:	2200      	movs	r2, #0
 80076f4:	2300      	movs	r3, #0
 80076f6:	f7f9 f99b 	bl	8000a30 <__aeabi_dcmpeq>
 80076fa:	b1b8      	cbz	r0, 800772c <pow+0x68>
 80076fc:	2200      	movs	r2, #0
 80076fe:	2300      	movs	r3, #0
 8007700:	4620      	mov	r0, r4
 8007702:	4629      	mov	r1, r5
 8007704:	f7f9 f994 	bl	8000a30 <__aeabi_dcmpeq>
 8007708:	2800      	cmp	r0, #0
 800770a:	d146      	bne.n	800779a <pow+0xd6>
 800770c:	ec45 4b10 	vmov	d0, r4, r5
 8007710:	f002 fc8c 	bl	800a02c <finite>
 8007714:	b338      	cbz	r0, 8007766 <pow+0xa2>
 8007716:	2200      	movs	r2, #0
 8007718:	2300      	movs	r3, #0
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f9 f991 	bl	8000a44 <__aeabi_dcmplt>
 8007722:	b300      	cbz	r0, 8007766 <pow+0xa2>
 8007724:	f7ff fb84 	bl	8006e30 <__errno>
 8007728:	2322      	movs	r3, #34	; 0x22
 800772a:	e01b      	b.n	8007764 <pow+0xa0>
 800772c:	ec47 6b10 	vmov	d0, r6, r7
 8007730:	f002 fc7c 	bl	800a02c <finite>
 8007734:	b9e0      	cbnz	r0, 8007770 <pow+0xac>
 8007736:	eeb0 0a48 	vmov.f32	s0, s16
 800773a:	eef0 0a68 	vmov.f32	s1, s17
 800773e:	f002 fc75 	bl	800a02c <finite>
 8007742:	b1a8      	cbz	r0, 8007770 <pow+0xac>
 8007744:	ec45 4b10 	vmov	d0, r4, r5
 8007748:	f002 fc70 	bl	800a02c <finite>
 800774c:	b180      	cbz	r0, 8007770 <pow+0xac>
 800774e:	4632      	mov	r2, r6
 8007750:	463b      	mov	r3, r7
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f9 f99d 	bl	8000a94 <__aeabi_dcmpun>
 800775a:	2800      	cmp	r0, #0
 800775c:	d0e2      	beq.n	8007724 <pow+0x60>
 800775e:	f7ff fb67 	bl	8006e30 <__errno>
 8007762:	2321      	movs	r3, #33	; 0x21
 8007764:	6003      	str	r3, [r0, #0]
 8007766:	ecbd 8b02 	vpop	{d8}
 800776a:	ec47 6b10 	vmov	d0, r6, r7
 800776e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f9 f95a 	bl	8000a30 <__aeabi_dcmpeq>
 800777c:	2800      	cmp	r0, #0
 800777e:	d0f2      	beq.n	8007766 <pow+0xa2>
 8007780:	eeb0 0a48 	vmov.f32	s0, s16
 8007784:	eef0 0a68 	vmov.f32	s1, s17
 8007788:	f002 fc50 	bl	800a02c <finite>
 800778c:	2800      	cmp	r0, #0
 800778e:	d0ea      	beq.n	8007766 <pow+0xa2>
 8007790:	ec45 4b10 	vmov	d0, r4, r5
 8007794:	f002 fc4a 	bl	800a02c <finite>
 8007798:	e7c3      	b.n	8007722 <pow+0x5e>
 800779a:	4f01      	ldr	r7, [pc, #4]	; (80077a0 <pow+0xdc>)
 800779c:	2600      	movs	r6, #0
 800779e:	e7e2      	b.n	8007766 <pow+0xa2>
 80077a0:	3ff00000 	.word	0x3ff00000
 80077a4:	00000000 	.word	0x00000000

080077a8 <__ieee754_acos>:
 80077a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	ec55 4b10 	vmov	r4, r5, d0
 80077b0:	49b7      	ldr	r1, [pc, #732]	; (8007a90 <__ieee754_acos+0x2e8>)
 80077b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80077b6:	428b      	cmp	r3, r1
 80077b8:	dd1b      	ble.n	80077f2 <__ieee754_acos+0x4a>
 80077ba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80077be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077c2:	4323      	orrs	r3, r4
 80077c4:	d106      	bne.n	80077d4 <__ieee754_acos+0x2c>
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	f300 8211 	bgt.w	8007bee <__ieee754_acos+0x446>
 80077cc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8007a28 <__ieee754_acos+0x280>
 80077d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	ee10 2a10 	vmov	r2, s0
 80077d8:	462b      	mov	r3, r5
 80077da:	ee10 0a10 	vmov	r0, s0
 80077de:	4629      	mov	r1, r5
 80077e0:	f7f8 fd06 	bl	80001f0 <__aeabi_dsub>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	f7f8 ffe4 	bl	80007b4 <__aeabi_ddiv>
 80077ec:	ec41 0b10 	vmov	d0, r0, r1
 80077f0:	e7ee      	b.n	80077d0 <__ieee754_acos+0x28>
 80077f2:	49a8      	ldr	r1, [pc, #672]	; (8007a94 <__ieee754_acos+0x2ec>)
 80077f4:	428b      	cmp	r3, r1
 80077f6:	f300 8087 	bgt.w	8007908 <__ieee754_acos+0x160>
 80077fa:	4aa7      	ldr	r2, [pc, #668]	; (8007a98 <__ieee754_acos+0x2f0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	f340 81f9 	ble.w	8007bf4 <__ieee754_acos+0x44c>
 8007802:	ee10 2a10 	vmov	r2, s0
 8007806:	ee10 0a10 	vmov	r0, s0
 800780a:	462b      	mov	r3, r5
 800780c:	4629      	mov	r1, r5
 800780e:	f7f8 fea7 	bl	8000560 <__aeabi_dmul>
 8007812:	a387      	add	r3, pc, #540	; (adr r3, 8007a30 <__ieee754_acos+0x288>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	f7f8 fea0 	bl	8000560 <__aeabi_dmul>
 8007820:	a385      	add	r3, pc, #532	; (adr r3, 8007a38 <__ieee754_acos+0x290>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fce5 	bl	80001f4 <__adddf3>
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	f7f8 fe97 	bl	8000560 <__aeabi_dmul>
 8007832:	a383      	add	r3, pc, #524	; (adr r3, 8007a40 <__ieee754_acos+0x298>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fcda 	bl	80001f0 <__aeabi_dsub>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f8 fe8e 	bl	8000560 <__aeabi_dmul>
 8007844:	a380      	add	r3, pc, #512	; (adr r3, 8007a48 <__ieee754_acos+0x2a0>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fcd3 	bl	80001f4 <__adddf3>
 800784e:	4632      	mov	r2, r6
 8007850:	463b      	mov	r3, r7
 8007852:	f7f8 fe85 	bl	8000560 <__aeabi_dmul>
 8007856:	a37e      	add	r3, pc, #504	; (adr r3, 8007a50 <__ieee754_acos+0x2a8>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f8 fcc8 	bl	80001f0 <__aeabi_dsub>
 8007860:	4632      	mov	r2, r6
 8007862:	463b      	mov	r3, r7
 8007864:	f7f8 fe7c 	bl	8000560 <__aeabi_dmul>
 8007868:	a37b      	add	r3, pc, #492	; (adr r3, 8007a58 <__ieee754_acos+0x2b0>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fcc1 	bl	80001f4 <__adddf3>
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	f7f8 fe73 	bl	8000560 <__aeabi_dmul>
 800787a:	a379      	add	r3, pc, #484	; (adr r3, 8007a60 <__ieee754_acos+0x2b8>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	4680      	mov	r8, r0
 8007882:	4689      	mov	r9, r1
 8007884:	4630      	mov	r0, r6
 8007886:	4639      	mov	r1, r7
 8007888:	f7f8 fe6a 	bl	8000560 <__aeabi_dmul>
 800788c:	a376      	add	r3, pc, #472	; (adr r3, 8007a68 <__ieee754_acos+0x2c0>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 fcad 	bl	80001f0 <__aeabi_dsub>
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	f7f8 fe61 	bl	8000560 <__aeabi_dmul>
 800789e:	a374      	add	r3, pc, #464	; (adr r3, 8007a70 <__ieee754_acos+0x2c8>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fca6 	bl	80001f4 <__adddf3>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	f7f8 fe58 	bl	8000560 <__aeabi_dmul>
 80078b0:	a371      	add	r3, pc, #452	; (adr r3, 8007a78 <__ieee754_acos+0x2d0>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f7f8 fc9b 	bl	80001f0 <__aeabi_dsub>
 80078ba:	4632      	mov	r2, r6
 80078bc:	463b      	mov	r3, r7
 80078be:	f7f8 fe4f 	bl	8000560 <__aeabi_dmul>
 80078c2:	4b76      	ldr	r3, [pc, #472]	; (8007a9c <__ieee754_acos+0x2f4>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	f7f8 fc95 	bl	80001f4 <__adddf3>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	f7f8 ff6f 	bl	80007b4 <__aeabi_ddiv>
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	f7f8 fe41 	bl	8000560 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	a167      	add	r1, pc, #412	; (adr r1, 8007a80 <__ieee754_acos+0x2d8>)
 80078e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e8:	f7f8 fc82 	bl	80001f0 <__aeabi_dsub>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4620      	mov	r0, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	f7f8 fc7c 	bl	80001f0 <__aeabi_dsub>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	a162      	add	r1, pc, #392	; (adr r1, 8007a88 <__ieee754_acos+0x2e0>)
 80078fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007902:	f7f8 fc75 	bl	80001f0 <__aeabi_dsub>
 8007906:	e771      	b.n	80077ec <__ieee754_acos+0x44>
 8007908:	2d00      	cmp	r5, #0
 800790a:	f280 80cb 	bge.w	8007aa4 <__ieee754_acos+0x2fc>
 800790e:	ee10 0a10 	vmov	r0, s0
 8007912:	4b62      	ldr	r3, [pc, #392]	; (8007a9c <__ieee754_acos+0x2f4>)
 8007914:	2200      	movs	r2, #0
 8007916:	4629      	mov	r1, r5
 8007918:	f7f8 fc6c 	bl	80001f4 <__adddf3>
 800791c:	4b60      	ldr	r3, [pc, #384]	; (8007aa0 <__ieee754_acos+0x2f8>)
 800791e:	2200      	movs	r2, #0
 8007920:	f7f8 fe1e 	bl	8000560 <__aeabi_dmul>
 8007924:	a342      	add	r3, pc, #264	; (adr r3, 8007a30 <__ieee754_acos+0x288>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	f7f8 fe17 	bl	8000560 <__aeabi_dmul>
 8007932:	a341      	add	r3, pc, #260	; (adr r3, 8007a38 <__ieee754_acos+0x290>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fc5c 	bl	80001f4 <__adddf3>
 800793c:	4622      	mov	r2, r4
 800793e:	462b      	mov	r3, r5
 8007940:	f7f8 fe0e 	bl	8000560 <__aeabi_dmul>
 8007944:	a33e      	add	r3, pc, #248	; (adr r3, 8007a40 <__ieee754_acos+0x298>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fc51 	bl	80001f0 <__aeabi_dsub>
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	f7f8 fe05 	bl	8000560 <__aeabi_dmul>
 8007956:	a33c      	add	r3, pc, #240	; (adr r3, 8007a48 <__ieee754_acos+0x2a0>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f7f8 fc4a 	bl	80001f4 <__adddf3>
 8007960:	4622      	mov	r2, r4
 8007962:	462b      	mov	r3, r5
 8007964:	f7f8 fdfc 	bl	8000560 <__aeabi_dmul>
 8007968:	a339      	add	r3, pc, #228	; (adr r3, 8007a50 <__ieee754_acos+0x2a8>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f7f8 fc3f 	bl	80001f0 <__aeabi_dsub>
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	f7f8 fdf3 	bl	8000560 <__aeabi_dmul>
 800797a:	a337      	add	r3, pc, #220	; (adr r3, 8007a58 <__ieee754_acos+0x2b0>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fc38 	bl	80001f4 <__adddf3>
 8007984:	4622      	mov	r2, r4
 8007986:	462b      	mov	r3, r5
 8007988:	f7f8 fdea 	bl	8000560 <__aeabi_dmul>
 800798c:	ec45 4b10 	vmov	d0, r4, r5
 8007990:	4680      	mov	r8, r0
 8007992:	4689      	mov	r9, r1
 8007994:	f001 fb84 	bl	80090a0 <__ieee754_sqrt>
 8007998:	a331      	add	r3, pc, #196	; (adr r3, 8007a60 <__ieee754_acos+0x2b8>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	ec57 6b10 	vmov	r6, r7, d0
 80079a6:	f7f8 fddb 	bl	8000560 <__aeabi_dmul>
 80079aa:	a32f      	add	r3, pc, #188	; (adr r3, 8007a68 <__ieee754_acos+0x2c0>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fc1e 	bl	80001f0 <__aeabi_dsub>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fdd2 	bl	8000560 <__aeabi_dmul>
 80079bc:	a32c      	add	r3, pc, #176	; (adr r3, 8007a70 <__ieee754_acos+0x2c8>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fc17 	bl	80001f4 <__adddf3>
 80079c6:	4622      	mov	r2, r4
 80079c8:	462b      	mov	r3, r5
 80079ca:	f7f8 fdc9 	bl	8000560 <__aeabi_dmul>
 80079ce:	a32a      	add	r3, pc, #168	; (adr r3, 8007a78 <__ieee754_acos+0x2d0>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fc0c 	bl	80001f0 <__aeabi_dsub>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	f7f8 fdc0 	bl	8000560 <__aeabi_dmul>
 80079e0:	4b2e      	ldr	r3, [pc, #184]	; (8007a9c <__ieee754_acos+0x2f4>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7f8 fc06 	bl	80001f4 <__adddf3>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4640      	mov	r0, r8
 80079ee:	4649      	mov	r1, r9
 80079f0:	f7f8 fee0 	bl	80007b4 <__aeabi_ddiv>
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	f7f8 fdb2 	bl	8000560 <__aeabi_dmul>
 80079fc:	a320      	add	r3, pc, #128	; (adr r3, 8007a80 <__ieee754_acos+0x2d8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fbf5 	bl	80001f0 <__aeabi_dsub>
 8007a06:	4632      	mov	r2, r6
 8007a08:	463b      	mov	r3, r7
 8007a0a:	f7f8 fbf3 	bl	80001f4 <__adddf3>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	f7f8 fbef 	bl	80001f4 <__adddf3>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	a103      	add	r1, pc, #12	; (adr r1, 8007a28 <__ieee754_acos+0x280>)
 8007a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a20:	e76f      	b.n	8007902 <__ieee754_acos+0x15a>
 8007a22:	bf00      	nop
 8007a24:	f3af 8000 	nop.w
 8007a28:	54442d18 	.word	0x54442d18
 8007a2c:	400921fb 	.word	0x400921fb
 8007a30:	0dfdf709 	.word	0x0dfdf709
 8007a34:	3f023de1 	.word	0x3f023de1
 8007a38:	7501b288 	.word	0x7501b288
 8007a3c:	3f49efe0 	.word	0x3f49efe0
 8007a40:	b5688f3b 	.word	0xb5688f3b
 8007a44:	3fa48228 	.word	0x3fa48228
 8007a48:	0e884455 	.word	0x0e884455
 8007a4c:	3fc9c155 	.word	0x3fc9c155
 8007a50:	03eb6f7d 	.word	0x03eb6f7d
 8007a54:	3fd4d612 	.word	0x3fd4d612
 8007a58:	55555555 	.word	0x55555555
 8007a5c:	3fc55555 	.word	0x3fc55555
 8007a60:	b12e9282 	.word	0xb12e9282
 8007a64:	3fb3b8c5 	.word	0x3fb3b8c5
 8007a68:	1b8d0159 	.word	0x1b8d0159
 8007a6c:	3fe6066c 	.word	0x3fe6066c
 8007a70:	9c598ac8 	.word	0x9c598ac8
 8007a74:	40002ae5 	.word	0x40002ae5
 8007a78:	1c8a2d4b 	.word	0x1c8a2d4b
 8007a7c:	40033a27 	.word	0x40033a27
 8007a80:	33145c07 	.word	0x33145c07
 8007a84:	3c91a626 	.word	0x3c91a626
 8007a88:	54442d18 	.word	0x54442d18
 8007a8c:	3ff921fb 	.word	0x3ff921fb
 8007a90:	3fefffff 	.word	0x3fefffff
 8007a94:	3fdfffff 	.word	0x3fdfffff
 8007a98:	3c600000 	.word	0x3c600000
 8007a9c:	3ff00000 	.word	0x3ff00000
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	ee10 2a10 	vmov	r2, s0
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	496d      	ldr	r1, [pc, #436]	; (8007c60 <__ieee754_acos+0x4b8>)
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7f8 fb9f 	bl	80001f0 <__aeabi_dsub>
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <__ieee754_acos+0x4bc>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f7f8 fd53 	bl	8000560 <__aeabi_dmul>
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
 8007abe:	ec45 4b10 	vmov	d0, r4, r5
 8007ac2:	f001 faed 	bl	80090a0 <__ieee754_sqrt>
 8007ac6:	a34e      	add	r3, pc, #312	; (adr r3, 8007c00 <__ieee754_acos+0x458>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	ec59 8b10 	vmov	r8, r9, d0
 8007ad4:	f7f8 fd44 	bl	8000560 <__aeabi_dmul>
 8007ad8:	a34b      	add	r3, pc, #300	; (adr r3, 8007c08 <__ieee754_acos+0x460>)
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f7f8 fb89 	bl	80001f4 <__adddf3>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	f7f8 fd3b 	bl	8000560 <__aeabi_dmul>
 8007aea:	a349      	add	r3, pc, #292	; (adr r3, 8007c10 <__ieee754_acos+0x468>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fb7e 	bl	80001f0 <__aeabi_dsub>
 8007af4:	4622      	mov	r2, r4
 8007af6:	462b      	mov	r3, r5
 8007af8:	f7f8 fd32 	bl	8000560 <__aeabi_dmul>
 8007afc:	a346      	add	r3, pc, #280	; (adr r3, 8007c18 <__ieee754_acos+0x470>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fb77 	bl	80001f4 <__adddf3>
 8007b06:	4622      	mov	r2, r4
 8007b08:	462b      	mov	r3, r5
 8007b0a:	f7f8 fd29 	bl	8000560 <__aeabi_dmul>
 8007b0e:	a344      	add	r3, pc, #272	; (adr r3, 8007c20 <__ieee754_acos+0x478>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fb6c 	bl	80001f0 <__aeabi_dsub>
 8007b18:	4622      	mov	r2, r4
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	f7f8 fd20 	bl	8000560 <__aeabi_dmul>
 8007b20:	a341      	add	r3, pc, #260	; (adr r3, 8007c28 <__ieee754_acos+0x480>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fb65 	bl	80001f4 <__adddf3>
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	f7f8 fd17 	bl	8000560 <__aeabi_dmul>
 8007b32:	a33f      	add	r3, pc, #252	; (adr r3, 8007c30 <__ieee754_acos+0x488>)
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	4682      	mov	sl, r0
 8007b3a:	468b      	mov	fp, r1
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 fd0e 	bl	8000560 <__aeabi_dmul>
 8007b44:	a33c      	add	r3, pc, #240	; (adr r3, 8007c38 <__ieee754_acos+0x490>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb51 	bl	80001f0 <__aeabi_dsub>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	462b      	mov	r3, r5
 8007b52:	f7f8 fd05 	bl	8000560 <__aeabi_dmul>
 8007b56:	a33a      	add	r3, pc, #232	; (adr r3, 8007c40 <__ieee754_acos+0x498>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fb4a 	bl	80001f4 <__adddf3>
 8007b60:	4622      	mov	r2, r4
 8007b62:	462b      	mov	r3, r5
 8007b64:	f7f8 fcfc 	bl	8000560 <__aeabi_dmul>
 8007b68:	a337      	add	r3, pc, #220	; (adr r3, 8007c48 <__ieee754_acos+0x4a0>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fb3f 	bl	80001f0 <__aeabi_dsub>
 8007b72:	4622      	mov	r2, r4
 8007b74:	462b      	mov	r3, r5
 8007b76:	f7f8 fcf3 	bl	8000560 <__aeabi_dmul>
 8007b7a:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <__ieee754_acos+0x4b8>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7f8 fb39 	bl	80001f4 <__adddf3>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4650      	mov	r0, sl
 8007b88:	4659      	mov	r1, fp
 8007b8a:	f7f8 fe13 	bl	80007b4 <__aeabi_ddiv>
 8007b8e:	4642      	mov	r2, r8
 8007b90:	464b      	mov	r3, r9
 8007b92:	f7f8 fce5 	bl	8000560 <__aeabi_dmul>
 8007b96:	2600      	movs	r6, #0
 8007b98:	4682      	mov	sl, r0
 8007b9a:	468b      	mov	fp, r1
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 fcdc 	bl	8000560 <__aeabi_dmul>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4620      	mov	r0, r4
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 fb1e 	bl	80001f0 <__aeabi_dsub>
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	464b      	mov	r3, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	f7f8 fb18 	bl	80001f4 <__adddf3>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4620      	mov	r0, r4
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7f8 fdf2 	bl	80007b4 <__aeabi_ddiv>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	f7f8 fb0c 	bl	80001f4 <__adddf3>
 8007bdc:	4632      	mov	r2, r6
 8007bde:	464b      	mov	r3, r9
 8007be0:	f7f8 fb08 	bl	80001f4 <__adddf3>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	f7f8 fb04 	bl	80001f4 <__adddf3>
 8007bec:	e5fe      	b.n	80077ec <__ieee754_acos+0x44>
 8007bee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8007c50 <__ieee754_acos+0x4a8>
 8007bf2:	e5ed      	b.n	80077d0 <__ieee754_acos+0x28>
 8007bf4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8007c58 <__ieee754_acos+0x4b0>
 8007bf8:	e5ea      	b.n	80077d0 <__ieee754_acos+0x28>
 8007bfa:	bf00      	nop
 8007bfc:	f3af 8000 	nop.w
 8007c00:	0dfdf709 	.word	0x0dfdf709
 8007c04:	3f023de1 	.word	0x3f023de1
 8007c08:	7501b288 	.word	0x7501b288
 8007c0c:	3f49efe0 	.word	0x3f49efe0
 8007c10:	b5688f3b 	.word	0xb5688f3b
 8007c14:	3fa48228 	.word	0x3fa48228
 8007c18:	0e884455 	.word	0x0e884455
 8007c1c:	3fc9c155 	.word	0x3fc9c155
 8007c20:	03eb6f7d 	.word	0x03eb6f7d
 8007c24:	3fd4d612 	.word	0x3fd4d612
 8007c28:	55555555 	.word	0x55555555
 8007c2c:	3fc55555 	.word	0x3fc55555
 8007c30:	b12e9282 	.word	0xb12e9282
 8007c34:	3fb3b8c5 	.word	0x3fb3b8c5
 8007c38:	1b8d0159 	.word	0x1b8d0159
 8007c3c:	3fe6066c 	.word	0x3fe6066c
 8007c40:	9c598ac8 	.word	0x9c598ac8
 8007c44:	40002ae5 	.word	0x40002ae5
 8007c48:	1c8a2d4b 	.word	0x1c8a2d4b
 8007c4c:	40033a27 	.word	0x40033a27
	...
 8007c58:	54442d18 	.word	0x54442d18
 8007c5c:	3ff921fb 	.word	0x3ff921fb
 8007c60:	3ff00000 	.word	0x3ff00000
 8007c64:	3fe00000 	.word	0x3fe00000

08007c68 <__ieee754_asin>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b04 	vpush	{d8-d9}
 8007c70:	ec55 4b10 	vmov	r4, r5, d0
 8007c74:	4bcc      	ldr	r3, [pc, #816]	; (8007fa8 <__ieee754_asin+0x340>)
 8007c76:	b083      	sub	sp, #12
 8007c78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007c7c:	4598      	cmp	r8, r3
 8007c7e:	9501      	str	r5, [sp, #4]
 8007c80:	dd35      	ble.n	8007cee <__ieee754_asin+0x86>
 8007c82:	ee10 3a10 	vmov	r3, s0
 8007c86:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007c8a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007c8e:	ea58 0303 	orrs.w	r3, r8, r3
 8007c92:	d117      	bne.n	8007cc4 <__ieee754_asin+0x5c>
 8007c94:	a3aa      	add	r3, pc, #680	; (adr r3, 8007f40 <__ieee754_asin+0x2d8>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	ee10 0a10 	vmov	r0, s0
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 fc5e 	bl	8000560 <__aeabi_dmul>
 8007ca4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007f48 <__ieee754_asin+0x2e0>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 fc55 	bl	8000560 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 fa99 	bl	80001f4 <__adddf3>
 8007cc2:	e00b      	b.n	8007cdc <__ieee754_asin+0x74>
 8007cc4:	ee10 2a10 	vmov	r2, s0
 8007cc8:	462b      	mov	r3, r5
 8007cca:	ee10 0a10 	vmov	r0, s0
 8007cce:	4629      	mov	r1, r5
 8007cd0:	f7f8 fa8e 	bl	80001f0 <__aeabi_dsub>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	f7f8 fd6c 	bl	80007b4 <__aeabi_ddiv>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	ec45 4b10 	vmov	d0, r4, r5
 8007ce4:	b003      	add	sp, #12
 8007ce6:	ecbd 8b04 	vpop	{d8-d9}
 8007cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cee:	4baf      	ldr	r3, [pc, #700]	; (8007fac <__ieee754_asin+0x344>)
 8007cf0:	4598      	cmp	r8, r3
 8007cf2:	dc11      	bgt.n	8007d18 <__ieee754_asin+0xb0>
 8007cf4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007cf8:	f280 80ae 	bge.w	8007e58 <__ieee754_asin+0x1f0>
 8007cfc:	a394      	add	r3, pc, #592	; (adr r3, 8007f50 <__ieee754_asin+0x2e8>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	ee10 0a10 	vmov	r0, s0
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fa74 	bl	80001f4 <__adddf3>
 8007d0c:	4ba8      	ldr	r3, [pc, #672]	; (8007fb0 <__ieee754_asin+0x348>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f7f8 feb6 	bl	8000a80 <__aeabi_dcmpgt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e3      	bne.n	8007ce0 <__ieee754_asin+0x78>
 8007d18:	ec45 4b10 	vmov	d0, r4, r5
 8007d1c:	f7ff fb50 	bl	80073c0 <fabs>
 8007d20:	49a3      	ldr	r1, [pc, #652]	; (8007fb0 <__ieee754_asin+0x348>)
 8007d22:	ec53 2b10 	vmov	r2, r3, d0
 8007d26:	2000      	movs	r0, #0
 8007d28:	f7f8 fa62 	bl	80001f0 <__aeabi_dsub>
 8007d2c:	4ba1      	ldr	r3, [pc, #644]	; (8007fb4 <__ieee754_asin+0x34c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f7f8 fc16 	bl	8000560 <__aeabi_dmul>
 8007d34:	a388      	add	r3, pc, #544	; (adr r3, 8007f58 <__ieee754_asin+0x2f0>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	f7f8 fc0f 	bl	8000560 <__aeabi_dmul>
 8007d42:	a387      	add	r3, pc, #540	; (adr r3, 8007f60 <__ieee754_asin+0x2f8>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 fa54 	bl	80001f4 <__adddf3>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	f7f8 fc06 	bl	8000560 <__aeabi_dmul>
 8007d54:	a384      	add	r3, pc, #528	; (adr r3, 8007f68 <__ieee754_asin+0x300>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa49 	bl	80001f0 <__aeabi_dsub>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	f7f8 fbfd 	bl	8000560 <__aeabi_dmul>
 8007d66:	a382      	add	r3, pc, #520	; (adr r3, 8007f70 <__ieee754_asin+0x308>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fa42 	bl	80001f4 <__adddf3>
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	f7f8 fbf4 	bl	8000560 <__aeabi_dmul>
 8007d78:	a37f      	add	r3, pc, #508	; (adr r3, 8007f78 <__ieee754_asin+0x310>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fa37 	bl	80001f0 <__aeabi_dsub>
 8007d82:	4622      	mov	r2, r4
 8007d84:	462b      	mov	r3, r5
 8007d86:	f7f8 fbeb 	bl	8000560 <__aeabi_dmul>
 8007d8a:	a37d      	add	r3, pc, #500	; (adr r3, 8007f80 <__ieee754_asin+0x318>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa30 	bl	80001f4 <__adddf3>
 8007d94:	4622      	mov	r2, r4
 8007d96:	462b      	mov	r3, r5
 8007d98:	f7f8 fbe2 	bl	8000560 <__aeabi_dmul>
 8007d9c:	a37a      	add	r3, pc, #488	; (adr r3, 8007f88 <__ieee754_asin+0x320>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	ec41 0b18 	vmov	d8, r0, r1
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fbd9 	bl	8000560 <__aeabi_dmul>
 8007dae:	a378      	add	r3, pc, #480	; (adr r3, 8007f90 <__ieee754_asin+0x328>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fa1c 	bl	80001f0 <__aeabi_dsub>
 8007db8:	4622      	mov	r2, r4
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f7f8 fbd0 	bl	8000560 <__aeabi_dmul>
 8007dc0:	a375      	add	r3, pc, #468	; (adr r3, 8007f98 <__ieee754_asin+0x330>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f7f8 fa15 	bl	80001f4 <__adddf3>
 8007dca:	4622      	mov	r2, r4
 8007dcc:	462b      	mov	r3, r5
 8007dce:	f7f8 fbc7 	bl	8000560 <__aeabi_dmul>
 8007dd2:	a373      	add	r3, pc, #460	; (adr r3, 8007fa0 <__ieee754_asin+0x338>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fa0a 	bl	80001f0 <__aeabi_dsub>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	f7f8 fbbe 	bl	8000560 <__aeabi_dmul>
 8007de4:	4b72      	ldr	r3, [pc, #456]	; (8007fb0 <__ieee754_asin+0x348>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	f7f8 fa04 	bl	80001f4 <__adddf3>
 8007dec:	ec45 4b10 	vmov	d0, r4, r5
 8007df0:	4606      	mov	r6, r0
 8007df2:	460f      	mov	r7, r1
 8007df4:	f001 f954 	bl	80090a0 <__ieee754_sqrt>
 8007df8:	4b6f      	ldr	r3, [pc, #444]	; (8007fb8 <__ieee754_asin+0x350>)
 8007dfa:	4598      	cmp	r8, r3
 8007dfc:	ec5b ab10 	vmov	sl, fp, d0
 8007e00:	f340 80dc 	ble.w	8007fbc <__ieee754_asin+0x354>
 8007e04:	4632      	mov	r2, r6
 8007e06:	463b      	mov	r3, r7
 8007e08:	ec51 0b18 	vmov	r0, r1, d8
 8007e0c:	f7f8 fcd2 	bl	80007b4 <__aeabi_ddiv>
 8007e10:	4652      	mov	r2, sl
 8007e12:	465b      	mov	r3, fp
 8007e14:	f7f8 fba4 	bl	8000560 <__aeabi_dmul>
 8007e18:	4652      	mov	r2, sl
 8007e1a:	465b      	mov	r3, fp
 8007e1c:	f7f8 f9ea 	bl	80001f4 <__adddf3>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	f7f8 f9e6 	bl	80001f4 <__adddf3>
 8007e28:	a347      	add	r3, pc, #284	; (adr r3, 8007f48 <__ieee754_asin+0x2e0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 f9df 	bl	80001f0 <__aeabi_dsub>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	a142      	add	r1, pc, #264	; (adr r1, 8007f40 <__ieee754_asin+0x2d8>)
 8007e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3c:	f7f8 f9d8 	bl	80001f0 <__aeabi_dsub>
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bfdc      	itt	le
 8007e46:	4602      	movle	r2, r0
 8007e48:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	bfdc      	itt	le
 8007e52:	4614      	movle	r4, r2
 8007e54:	461d      	movle	r5, r3
 8007e56:	e743      	b.n	8007ce0 <__ieee754_asin+0x78>
 8007e58:	ee10 2a10 	vmov	r2, s0
 8007e5c:	ee10 0a10 	vmov	r0, s0
 8007e60:	462b      	mov	r3, r5
 8007e62:	4629      	mov	r1, r5
 8007e64:	f7f8 fb7c 	bl	8000560 <__aeabi_dmul>
 8007e68:	a33b      	add	r3, pc, #236	; (adr r3, 8007f58 <__ieee754_asin+0x2f0>)
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	f7f8 fb75 	bl	8000560 <__aeabi_dmul>
 8007e76:	a33a      	add	r3, pc, #232	; (adr r3, 8007f60 <__ieee754_asin+0x2f8>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	f7f8 f9ba 	bl	80001f4 <__adddf3>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fb6c 	bl	8000560 <__aeabi_dmul>
 8007e88:	a337      	add	r3, pc, #220	; (adr r3, 8007f68 <__ieee754_asin+0x300>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 f9af 	bl	80001f0 <__aeabi_dsub>
 8007e92:	4632      	mov	r2, r6
 8007e94:	463b      	mov	r3, r7
 8007e96:	f7f8 fb63 	bl	8000560 <__aeabi_dmul>
 8007e9a:	a335      	add	r3, pc, #212	; (adr r3, 8007f70 <__ieee754_asin+0x308>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 f9a8 	bl	80001f4 <__adddf3>
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	f7f8 fb5a 	bl	8000560 <__aeabi_dmul>
 8007eac:	a332      	add	r3, pc, #200	; (adr r3, 8007f78 <__ieee754_asin+0x310>)
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	f7f8 f99d 	bl	80001f0 <__aeabi_dsub>
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	463b      	mov	r3, r7
 8007eba:	f7f8 fb51 	bl	8000560 <__aeabi_dmul>
 8007ebe:	a330      	add	r3, pc, #192	; (adr r3, 8007f80 <__ieee754_asin+0x318>)
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f7f8 f996 	bl	80001f4 <__adddf3>
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	f7f8 fb48 	bl	8000560 <__aeabi_dmul>
 8007ed0:	a32d      	add	r3, pc, #180	; (adr r3, 8007f88 <__ieee754_asin+0x320>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	4680      	mov	r8, r0
 8007ed8:	4689      	mov	r9, r1
 8007eda:	4630      	mov	r0, r6
 8007edc:	4639      	mov	r1, r7
 8007ede:	f7f8 fb3f 	bl	8000560 <__aeabi_dmul>
 8007ee2:	a32b      	add	r3, pc, #172	; (adr r3, 8007f90 <__ieee754_asin+0x328>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f982 	bl	80001f0 <__aeabi_dsub>
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	f7f8 fb36 	bl	8000560 <__aeabi_dmul>
 8007ef4:	a328      	add	r3, pc, #160	; (adr r3, 8007f98 <__ieee754_asin+0x330>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f7f8 f97b 	bl	80001f4 <__adddf3>
 8007efe:	4632      	mov	r2, r6
 8007f00:	463b      	mov	r3, r7
 8007f02:	f7f8 fb2d 	bl	8000560 <__aeabi_dmul>
 8007f06:	a326      	add	r3, pc, #152	; (adr r3, 8007fa0 <__ieee754_asin+0x338>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 f970 	bl	80001f0 <__aeabi_dsub>
 8007f10:	4632      	mov	r2, r6
 8007f12:	463b      	mov	r3, r7
 8007f14:	f7f8 fb24 	bl	8000560 <__aeabi_dmul>
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <__ieee754_asin+0x348>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7f8 f96a 	bl	80001f4 <__adddf3>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4640      	mov	r0, r8
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 fc44 	bl	80007b4 <__aeabi_ddiv>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	462b      	mov	r3, r5
 8007f30:	f7f8 fb16 	bl	8000560 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	e6bf      	b.n	8007cbe <__ieee754_asin+0x56>
 8007f3e:	bf00      	nop
 8007f40:	54442d18 	.word	0x54442d18
 8007f44:	3ff921fb 	.word	0x3ff921fb
 8007f48:	33145c07 	.word	0x33145c07
 8007f4c:	3c91a626 	.word	0x3c91a626
 8007f50:	8800759c 	.word	0x8800759c
 8007f54:	7e37e43c 	.word	0x7e37e43c
 8007f58:	0dfdf709 	.word	0x0dfdf709
 8007f5c:	3f023de1 	.word	0x3f023de1
 8007f60:	7501b288 	.word	0x7501b288
 8007f64:	3f49efe0 	.word	0x3f49efe0
 8007f68:	b5688f3b 	.word	0xb5688f3b
 8007f6c:	3fa48228 	.word	0x3fa48228
 8007f70:	0e884455 	.word	0x0e884455
 8007f74:	3fc9c155 	.word	0x3fc9c155
 8007f78:	03eb6f7d 	.word	0x03eb6f7d
 8007f7c:	3fd4d612 	.word	0x3fd4d612
 8007f80:	55555555 	.word	0x55555555
 8007f84:	3fc55555 	.word	0x3fc55555
 8007f88:	b12e9282 	.word	0xb12e9282
 8007f8c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007f90:	1b8d0159 	.word	0x1b8d0159
 8007f94:	3fe6066c 	.word	0x3fe6066c
 8007f98:	9c598ac8 	.word	0x9c598ac8
 8007f9c:	40002ae5 	.word	0x40002ae5
 8007fa0:	1c8a2d4b 	.word	0x1c8a2d4b
 8007fa4:	40033a27 	.word	0x40033a27
 8007fa8:	3fefffff 	.word	0x3fefffff
 8007fac:	3fdfffff 	.word	0x3fdfffff
 8007fb0:	3ff00000 	.word	0x3ff00000
 8007fb4:	3fe00000 	.word	0x3fe00000
 8007fb8:	3fef3332 	.word	0x3fef3332
 8007fbc:	ee10 2a10 	vmov	r2, s0
 8007fc0:	ee10 0a10 	vmov	r0, s0
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	4659      	mov	r1, fp
 8007fc8:	f7f8 f914 	bl	80001f4 <__adddf3>
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	ec41 0b19 	vmov	d9, r0, r1
 8007fd4:	ec51 0b18 	vmov	r0, r1, d8
 8007fd8:	f7f8 fbec 	bl	80007b4 <__aeabi_ddiv>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	ec51 0b19 	vmov	r0, r1, d9
 8007fe4:	f7f8 fabc 	bl	8000560 <__aeabi_dmul>
 8007fe8:	f04f 0800 	mov.w	r8, #0
 8007fec:	4606      	mov	r6, r0
 8007fee:	460f      	mov	r7, r1
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f7f8 fab2 	bl	8000560 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f8f4 	bl	80001f0 <__aeabi_dsub>
 8008008:	4642      	mov	r2, r8
 800800a:	4604      	mov	r4, r0
 800800c:	460d      	mov	r5, r1
 800800e:	465b      	mov	r3, fp
 8008010:	4650      	mov	r0, sl
 8008012:	4659      	mov	r1, fp
 8008014:	f7f8 f8ee 	bl	80001f4 <__adddf3>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 fbc8 	bl	80007b4 <__aeabi_ddiv>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	f7f8 f8e4 	bl	80001f4 <__adddf3>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	a113      	add	r1, pc, #76	; (adr r1, 8008080 <__ieee754_asin+0x418>)
 8008032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008036:	f7f8 f8db 	bl	80001f0 <__aeabi_dsub>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 f8d5 	bl	80001f0 <__aeabi_dsub>
 8008046:	4642      	mov	r2, r8
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	465b      	mov	r3, fp
 800804e:	4640      	mov	r0, r8
 8008050:	4659      	mov	r1, fp
 8008052:	f7f8 f8cf 	bl	80001f4 <__adddf3>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	a10b      	add	r1, pc, #44	; (adr r1, 8008088 <__ieee754_asin+0x420>)
 800805c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008060:	f7f8 f8c6 	bl	80001f0 <__aeabi_dsub>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4620      	mov	r0, r4
 800806a:	4629      	mov	r1, r5
 800806c:	f7f8 f8c0 	bl	80001f0 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	a104      	add	r1, pc, #16	; (adr r1, 8008088 <__ieee754_asin+0x420>)
 8008076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800807a:	e6df      	b.n	8007e3c <__ieee754_asin+0x1d4>
 800807c:	f3af 8000 	nop.w
 8008080:	33145c07 	.word	0x33145c07
 8008084:	3c91a626 	.word	0x3c91a626
 8008088:	54442d18 	.word	0x54442d18
 800808c:	3fe921fb 	.word	0x3fe921fb

08008090 <__ieee754_atan2>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	ec57 6b11 	vmov	r6, r7, d1
 8008098:	4273      	negs	r3, r6
 800809a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008220 <__ieee754_atan2+0x190>
 800809e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80080a2:	4333      	orrs	r3, r6
 80080a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80080a8:	4573      	cmp	r3, lr
 80080aa:	ec51 0b10 	vmov	r0, r1, d0
 80080ae:	ee11 8a10 	vmov	r8, s2
 80080b2:	d80a      	bhi.n	80080ca <__ieee754_atan2+0x3a>
 80080b4:	4244      	negs	r4, r0
 80080b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080ba:	4304      	orrs	r4, r0
 80080bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80080c0:	4574      	cmp	r4, lr
 80080c2:	ee10 9a10 	vmov	r9, s0
 80080c6:	468c      	mov	ip, r1
 80080c8:	d907      	bls.n	80080da <__ieee754_atan2+0x4a>
 80080ca:	4632      	mov	r2, r6
 80080cc:	463b      	mov	r3, r7
 80080ce:	f7f8 f891 	bl	80001f4 <__adddf3>
 80080d2:	ec41 0b10 	vmov	d0, r0, r1
 80080d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80080de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80080e2:	4334      	orrs	r4, r6
 80080e4:	d103      	bne.n	80080ee <__ieee754_atan2+0x5e>
 80080e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ea:	f7fe bf75 	b.w	8006fd8 <atan>
 80080ee:	17bc      	asrs	r4, r7, #30
 80080f0:	f004 0402 	and.w	r4, r4, #2
 80080f4:	ea53 0909 	orrs.w	r9, r3, r9
 80080f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80080fc:	d107      	bne.n	800810e <__ieee754_atan2+0x7e>
 80080fe:	2c02      	cmp	r4, #2
 8008100:	d060      	beq.n	80081c4 <__ieee754_atan2+0x134>
 8008102:	2c03      	cmp	r4, #3
 8008104:	d1e5      	bne.n	80080d2 <__ieee754_atan2+0x42>
 8008106:	a142      	add	r1, pc, #264	; (adr r1, 8008210 <__ieee754_atan2+0x180>)
 8008108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800810c:	e7e1      	b.n	80080d2 <__ieee754_atan2+0x42>
 800810e:	ea52 0808 	orrs.w	r8, r2, r8
 8008112:	d106      	bne.n	8008122 <__ieee754_atan2+0x92>
 8008114:	f1bc 0f00 	cmp.w	ip, #0
 8008118:	da5f      	bge.n	80081da <__ieee754_atan2+0x14a>
 800811a:	a13f      	add	r1, pc, #252	; (adr r1, 8008218 <__ieee754_atan2+0x188>)
 800811c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008120:	e7d7      	b.n	80080d2 <__ieee754_atan2+0x42>
 8008122:	4572      	cmp	r2, lr
 8008124:	d10f      	bne.n	8008146 <__ieee754_atan2+0xb6>
 8008126:	4293      	cmp	r3, r2
 8008128:	f104 34ff 	add.w	r4, r4, #4294967295
 800812c:	d107      	bne.n	800813e <__ieee754_atan2+0xae>
 800812e:	2c02      	cmp	r4, #2
 8008130:	d84c      	bhi.n	80081cc <__ieee754_atan2+0x13c>
 8008132:	4b35      	ldr	r3, [pc, #212]	; (8008208 <__ieee754_atan2+0x178>)
 8008134:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008138:	e9d4 0100 	ldrd	r0, r1, [r4]
 800813c:	e7c9      	b.n	80080d2 <__ieee754_atan2+0x42>
 800813e:	2c02      	cmp	r4, #2
 8008140:	d848      	bhi.n	80081d4 <__ieee754_atan2+0x144>
 8008142:	4b32      	ldr	r3, [pc, #200]	; (800820c <__ieee754_atan2+0x17c>)
 8008144:	e7f6      	b.n	8008134 <__ieee754_atan2+0xa4>
 8008146:	4573      	cmp	r3, lr
 8008148:	d0e4      	beq.n	8008114 <__ieee754_atan2+0x84>
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008150:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008154:	da1e      	bge.n	8008194 <__ieee754_atan2+0x104>
 8008156:	2f00      	cmp	r7, #0
 8008158:	da01      	bge.n	800815e <__ieee754_atan2+0xce>
 800815a:	323c      	adds	r2, #60	; 0x3c
 800815c:	db1e      	blt.n	800819c <__ieee754_atan2+0x10c>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	f7f8 fb27 	bl	80007b4 <__aeabi_ddiv>
 8008166:	ec41 0b10 	vmov	d0, r0, r1
 800816a:	f7ff f929 	bl	80073c0 <fabs>
 800816e:	f7fe ff33 	bl	8006fd8 <atan>
 8008172:	ec51 0b10 	vmov	r0, r1, d0
 8008176:	2c01      	cmp	r4, #1
 8008178:	d013      	beq.n	80081a2 <__ieee754_atan2+0x112>
 800817a:	2c02      	cmp	r4, #2
 800817c:	d015      	beq.n	80081aa <__ieee754_atan2+0x11a>
 800817e:	2c00      	cmp	r4, #0
 8008180:	d0a7      	beq.n	80080d2 <__ieee754_atan2+0x42>
 8008182:	a319      	add	r3, pc, #100	; (adr r3, 80081e8 <__ieee754_atan2+0x158>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f832 	bl	80001f0 <__aeabi_dsub>
 800818c:	a318      	add	r3, pc, #96	; (adr r3, 80081f0 <__ieee754_atan2+0x160>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	e014      	b.n	80081be <__ieee754_atan2+0x12e>
 8008194:	a118      	add	r1, pc, #96	; (adr r1, 80081f8 <__ieee754_atan2+0x168>)
 8008196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800819a:	e7ec      	b.n	8008176 <__ieee754_atan2+0xe6>
 800819c:	2000      	movs	r0, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	e7e9      	b.n	8008176 <__ieee754_atan2+0xe6>
 80081a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081a6:	4619      	mov	r1, r3
 80081a8:	e793      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081aa:	a30f      	add	r3, pc, #60	; (adr r3, 80081e8 <__ieee754_atan2+0x158>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f7f8 f81e 	bl	80001f0 <__aeabi_dsub>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	a10d      	add	r1, pc, #52	; (adr r1, 80081f0 <__ieee754_atan2+0x160>)
 80081ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081be:	f7f8 f817 	bl	80001f0 <__aeabi_dsub>
 80081c2:	e786      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081c4:	a10a      	add	r1, pc, #40	; (adr r1, 80081f0 <__ieee754_atan2+0x160>)
 80081c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ca:	e782      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081cc:	a10c      	add	r1, pc, #48	; (adr r1, 8008200 <__ieee754_atan2+0x170>)
 80081ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d2:	e77e      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081d4:	2000      	movs	r0, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	e77b      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081da:	a107      	add	r1, pc, #28	; (adr r1, 80081f8 <__ieee754_atan2+0x168>)
 80081dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e0:	e777      	b.n	80080d2 <__ieee754_atan2+0x42>
 80081e2:	bf00      	nop
 80081e4:	f3af 8000 	nop.w
 80081e8:	33145c07 	.word	0x33145c07
 80081ec:	3ca1a626 	.word	0x3ca1a626
 80081f0:	54442d18 	.word	0x54442d18
 80081f4:	400921fb 	.word	0x400921fb
 80081f8:	54442d18 	.word	0x54442d18
 80081fc:	3ff921fb 	.word	0x3ff921fb
 8008200:	54442d18 	.word	0x54442d18
 8008204:	3fe921fb 	.word	0x3fe921fb
 8008208:	0800bb78 	.word	0x0800bb78
 800820c:	0800bb90 	.word	0x0800bb90
 8008210:	54442d18 	.word	0x54442d18
 8008214:	c00921fb 	.word	0xc00921fb
 8008218:	54442d18 	.word	0x54442d18
 800821c:	bff921fb 	.word	0xbff921fb
 8008220:	7ff00000 	.word	0x7ff00000
 8008224:	00000000 	.word	0x00000000

08008228 <__ieee754_pow>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	ed2d 8b06 	vpush	{d8-d10}
 8008230:	b089      	sub	sp, #36	; 0x24
 8008232:	ed8d 1b00 	vstr	d1, [sp]
 8008236:	e9dd 2900 	ldrd	r2, r9, [sp]
 800823a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800823e:	ea58 0102 	orrs.w	r1, r8, r2
 8008242:	ec57 6b10 	vmov	r6, r7, d0
 8008246:	d115      	bne.n	8008274 <__ieee754_pow+0x4c>
 8008248:	19b3      	adds	r3, r6, r6
 800824a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800824e:	4152      	adcs	r2, r2
 8008250:	4299      	cmp	r1, r3
 8008252:	4b89      	ldr	r3, [pc, #548]	; (8008478 <__ieee754_pow+0x250>)
 8008254:	4193      	sbcs	r3, r2
 8008256:	f080 84d2 	bcs.w	8008bfe <__ieee754_pow+0x9d6>
 800825a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800825e:	4630      	mov	r0, r6
 8008260:	4639      	mov	r1, r7
 8008262:	f7f7 ffc7 	bl	80001f4 <__adddf3>
 8008266:	ec41 0b10 	vmov	d0, r0, r1
 800826a:	b009      	add	sp, #36	; 0x24
 800826c:	ecbd 8b06 	vpop	{d8-d10}
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	4b81      	ldr	r3, [pc, #516]	; (800847c <__ieee754_pow+0x254>)
 8008276:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800827a:	429c      	cmp	r4, r3
 800827c:	ee10 aa10 	vmov	sl, s0
 8008280:	463d      	mov	r5, r7
 8008282:	dc06      	bgt.n	8008292 <__ieee754_pow+0x6a>
 8008284:	d101      	bne.n	800828a <__ieee754_pow+0x62>
 8008286:	2e00      	cmp	r6, #0
 8008288:	d1e7      	bne.n	800825a <__ieee754_pow+0x32>
 800828a:	4598      	cmp	r8, r3
 800828c:	dc01      	bgt.n	8008292 <__ieee754_pow+0x6a>
 800828e:	d10f      	bne.n	80082b0 <__ieee754_pow+0x88>
 8008290:	b172      	cbz	r2, 80082b0 <__ieee754_pow+0x88>
 8008292:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008296:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800829a:	ea55 050a 	orrs.w	r5, r5, sl
 800829e:	d1dc      	bne.n	800825a <__ieee754_pow+0x32>
 80082a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082a4:	18db      	adds	r3, r3, r3
 80082a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80082aa:	4152      	adcs	r2, r2
 80082ac:	429d      	cmp	r5, r3
 80082ae:	e7d0      	b.n	8008252 <__ieee754_pow+0x2a>
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	da3b      	bge.n	800832c <__ieee754_pow+0x104>
 80082b4:	4b72      	ldr	r3, [pc, #456]	; (8008480 <__ieee754_pow+0x258>)
 80082b6:	4598      	cmp	r8, r3
 80082b8:	dc51      	bgt.n	800835e <__ieee754_pow+0x136>
 80082ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80082be:	4598      	cmp	r8, r3
 80082c0:	f340 84ac 	ble.w	8008c1c <__ieee754_pow+0x9f4>
 80082c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082cc:	2b14      	cmp	r3, #20
 80082ce:	dd0f      	ble.n	80082f0 <__ieee754_pow+0xc8>
 80082d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80082d4:	fa22 f103 	lsr.w	r1, r2, r3
 80082d8:	fa01 f303 	lsl.w	r3, r1, r3
 80082dc:	4293      	cmp	r3, r2
 80082de:	f040 849d 	bne.w	8008c1c <__ieee754_pow+0x9f4>
 80082e2:	f001 0101 	and.w	r1, r1, #1
 80082e6:	f1c1 0302 	rsb	r3, r1, #2
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	b182      	cbz	r2, 8008310 <__ieee754_pow+0xe8>
 80082ee:	e05f      	b.n	80083b0 <__ieee754_pow+0x188>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d15b      	bne.n	80083ac <__ieee754_pow+0x184>
 80082f4:	f1c3 0314 	rsb	r3, r3, #20
 80082f8:	fa48 f103 	asr.w	r1, r8, r3
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	4543      	cmp	r3, r8
 8008302:	f040 8488 	bne.w	8008c16 <__ieee754_pow+0x9ee>
 8008306:	f001 0101 	and.w	r1, r1, #1
 800830a:	f1c1 0302 	rsb	r3, r1, #2
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	4b5c      	ldr	r3, [pc, #368]	; (8008484 <__ieee754_pow+0x25c>)
 8008312:	4598      	cmp	r8, r3
 8008314:	d132      	bne.n	800837c <__ieee754_pow+0x154>
 8008316:	f1b9 0f00 	cmp.w	r9, #0
 800831a:	f280 8478 	bge.w	8008c0e <__ieee754_pow+0x9e6>
 800831e:	4959      	ldr	r1, [pc, #356]	; (8008484 <__ieee754_pow+0x25c>)
 8008320:	4632      	mov	r2, r6
 8008322:	463b      	mov	r3, r7
 8008324:	2000      	movs	r0, #0
 8008326:	f7f8 fa45 	bl	80007b4 <__aeabi_ddiv>
 800832a:	e79c      	b.n	8008266 <__ieee754_pow+0x3e>
 800832c:	2300      	movs	r3, #0
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	2a00      	cmp	r2, #0
 8008332:	d13d      	bne.n	80083b0 <__ieee754_pow+0x188>
 8008334:	4b51      	ldr	r3, [pc, #324]	; (800847c <__ieee754_pow+0x254>)
 8008336:	4598      	cmp	r8, r3
 8008338:	d1ea      	bne.n	8008310 <__ieee754_pow+0xe8>
 800833a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800833e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008342:	ea53 030a 	orrs.w	r3, r3, sl
 8008346:	f000 845a 	beq.w	8008bfe <__ieee754_pow+0x9d6>
 800834a:	4b4f      	ldr	r3, [pc, #316]	; (8008488 <__ieee754_pow+0x260>)
 800834c:	429c      	cmp	r4, r3
 800834e:	dd08      	ble.n	8008362 <__ieee754_pow+0x13a>
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	f2c0 8457 	blt.w	8008c06 <__ieee754_pow+0x9de>
 8008358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835c:	e783      	b.n	8008266 <__ieee754_pow+0x3e>
 800835e:	2302      	movs	r3, #2
 8008360:	e7e5      	b.n	800832e <__ieee754_pow+0x106>
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	f04f 0000 	mov.w	r0, #0
 800836a:	f04f 0100 	mov.w	r1, #0
 800836e:	f6bf af7a 	bge.w	8008266 <__ieee754_pow+0x3e>
 8008372:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008376:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800837a:	e774      	b.n	8008266 <__ieee754_pow+0x3e>
 800837c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008380:	d106      	bne.n	8008390 <__ieee754_pow+0x168>
 8008382:	4632      	mov	r2, r6
 8008384:	463b      	mov	r3, r7
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 f8e9 	bl	8000560 <__aeabi_dmul>
 800838e:	e76a      	b.n	8008266 <__ieee754_pow+0x3e>
 8008390:	4b3e      	ldr	r3, [pc, #248]	; (800848c <__ieee754_pow+0x264>)
 8008392:	4599      	cmp	r9, r3
 8008394:	d10c      	bne.n	80083b0 <__ieee754_pow+0x188>
 8008396:	2d00      	cmp	r5, #0
 8008398:	db0a      	blt.n	80083b0 <__ieee754_pow+0x188>
 800839a:	ec47 6b10 	vmov	d0, r6, r7
 800839e:	b009      	add	sp, #36	; 0x24
 80083a0:	ecbd 8b06 	vpop	{d8-d10}
 80083a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	f000 be7a 	b.w	80090a0 <__ieee754_sqrt>
 80083ac:	2300      	movs	r3, #0
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	ec47 6b10 	vmov	d0, r6, r7
 80083b4:	f7ff f804 	bl	80073c0 <fabs>
 80083b8:	ec51 0b10 	vmov	r0, r1, d0
 80083bc:	f1ba 0f00 	cmp.w	sl, #0
 80083c0:	d129      	bne.n	8008416 <__ieee754_pow+0x1ee>
 80083c2:	b124      	cbz	r4, 80083ce <__ieee754_pow+0x1a6>
 80083c4:	4b2f      	ldr	r3, [pc, #188]	; (8008484 <__ieee754_pow+0x25c>)
 80083c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d123      	bne.n	8008416 <__ieee754_pow+0x1ee>
 80083ce:	f1b9 0f00 	cmp.w	r9, #0
 80083d2:	da05      	bge.n	80083e0 <__ieee754_pow+0x1b8>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	2000      	movs	r0, #0
 80083da:	492a      	ldr	r1, [pc, #168]	; (8008484 <__ieee754_pow+0x25c>)
 80083dc:	f7f8 f9ea 	bl	80007b4 <__aeabi_ddiv>
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	f6bf af40 	bge.w	8008266 <__ieee754_pow+0x3e>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083f0:	4323      	orrs	r3, r4
 80083f2:	d108      	bne.n	8008406 <__ieee754_pow+0x1de>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7f7 fef8 	bl	80001f0 <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	e78f      	b.n	8008326 <__ieee754_pow+0xfe>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	2b01      	cmp	r3, #1
 800840a:	f47f af2c 	bne.w	8008266 <__ieee754_pow+0x3e>
 800840e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008412:	4619      	mov	r1, r3
 8008414:	e727      	b.n	8008266 <__ieee754_pow+0x3e>
 8008416:	0feb      	lsrs	r3, r5, #31
 8008418:	3b01      	subs	r3, #1
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	9a06      	ldr	r2, [sp, #24]
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	4313      	orrs	r3, r2
 8008422:	d102      	bne.n	800842a <__ieee754_pow+0x202>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	e7e6      	b.n	80083f8 <__ieee754_pow+0x1d0>
 800842a:	4b19      	ldr	r3, [pc, #100]	; (8008490 <__ieee754_pow+0x268>)
 800842c:	4598      	cmp	r8, r3
 800842e:	f340 80fb 	ble.w	8008628 <__ieee754_pow+0x400>
 8008432:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008436:	4598      	cmp	r8, r3
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <__ieee754_pow+0x260>)
 800843a:	dd0c      	ble.n	8008456 <__ieee754_pow+0x22e>
 800843c:	429c      	cmp	r4, r3
 800843e:	dc0f      	bgt.n	8008460 <__ieee754_pow+0x238>
 8008440:	f1b9 0f00 	cmp.w	r9, #0
 8008444:	da0f      	bge.n	8008466 <__ieee754_pow+0x23e>
 8008446:	2000      	movs	r0, #0
 8008448:	b009      	add	sp, #36	; 0x24
 800844a:	ecbd 8b06 	vpop	{d8-d10}
 800844e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008452:	f001 bde2 	b.w	800a01a <__math_oflow>
 8008456:	429c      	cmp	r4, r3
 8008458:	dbf2      	blt.n	8008440 <__ieee754_pow+0x218>
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <__ieee754_pow+0x25c>)
 800845c:	429c      	cmp	r4, r3
 800845e:	dd19      	ble.n	8008494 <__ieee754_pow+0x26c>
 8008460:	f1b9 0f00 	cmp.w	r9, #0
 8008464:	dcef      	bgt.n	8008446 <__ieee754_pow+0x21e>
 8008466:	2000      	movs	r0, #0
 8008468:	b009      	add	sp, #36	; 0x24
 800846a:	ecbd 8b06 	vpop	{d8-d10}
 800846e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008472:	f001 bdc9 	b.w	800a008 <__math_uflow>
 8008476:	bf00      	nop
 8008478:	fff00000 	.word	0xfff00000
 800847c:	7ff00000 	.word	0x7ff00000
 8008480:	433fffff 	.word	0x433fffff
 8008484:	3ff00000 	.word	0x3ff00000
 8008488:	3fefffff 	.word	0x3fefffff
 800848c:	3fe00000 	.word	0x3fe00000
 8008490:	41e00000 	.word	0x41e00000
 8008494:	4b60      	ldr	r3, [pc, #384]	; (8008618 <__ieee754_pow+0x3f0>)
 8008496:	2200      	movs	r2, #0
 8008498:	f7f7 feaa 	bl	80001f0 <__aeabi_dsub>
 800849c:	a354      	add	r3, pc, #336	; (adr r3, 80085f0 <__ieee754_pow+0x3c8>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	4604      	mov	r4, r0
 80084a4:	460d      	mov	r5, r1
 80084a6:	f7f8 f85b 	bl	8000560 <__aeabi_dmul>
 80084aa:	a353      	add	r3, pc, #332	; (adr r3, 80085f8 <__ieee754_pow+0x3d0>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	4606      	mov	r6, r0
 80084b2:	460f      	mov	r7, r1
 80084b4:	4620      	mov	r0, r4
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7f8 f852 	bl	8000560 <__aeabi_dmul>
 80084bc:	4b57      	ldr	r3, [pc, #348]	; (800861c <__ieee754_pow+0x3f4>)
 80084be:	4682      	mov	sl, r0
 80084c0:	468b      	mov	fp, r1
 80084c2:	2200      	movs	r2, #0
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f8 f84a 	bl	8000560 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	a14b      	add	r1, pc, #300	; (adr r1, 8008600 <__ieee754_pow+0x3d8>)
 80084d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d6:	f7f7 fe8b 	bl	80001f0 <__aeabi_dsub>
 80084da:	4622      	mov	r2, r4
 80084dc:	462b      	mov	r3, r5
 80084de:	f7f8 f83f 	bl	8000560 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	2000      	movs	r0, #0
 80084e8:	494d      	ldr	r1, [pc, #308]	; (8008620 <__ieee754_pow+0x3f8>)
 80084ea:	f7f7 fe81 	bl	80001f0 <__aeabi_dsub>
 80084ee:	4622      	mov	r2, r4
 80084f0:	4680      	mov	r8, r0
 80084f2:	4689      	mov	r9, r1
 80084f4:	462b      	mov	r3, r5
 80084f6:	4620      	mov	r0, r4
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7f8 f831 	bl	8000560 <__aeabi_dmul>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f8 f82b 	bl	8000560 <__aeabi_dmul>
 800850a:	a33f      	add	r3, pc, #252	; (adr r3, 8008608 <__ieee754_pow+0x3e0>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f8 f826 	bl	8000560 <__aeabi_dmul>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	f7f7 fe68 	bl	80001f0 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4680      	mov	r8, r0
 8008526:	4689      	mov	r9, r1
 8008528:	4630      	mov	r0, r6
 800852a:	4639      	mov	r1, r7
 800852c:	f7f7 fe62 	bl	80001f4 <__adddf3>
 8008530:	2000      	movs	r0, #0
 8008532:	4632      	mov	r2, r6
 8008534:	463b      	mov	r3, r7
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f7 fe59 	bl	80001f0 <__aeabi_dsub>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f7 fe53 	bl	80001f0 <__aeabi_dsub>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	9a06      	ldr	r2, [sp, #24]
 800854e:	3b01      	subs	r3, #1
 8008550:	4313      	orrs	r3, r2
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	f040 81e7 	bne.w	8008928 <__ieee754_pow+0x700>
 800855a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008610 <__ieee754_pow+0x3e8>
 800855e:	eeb0 8a47 	vmov.f32	s16, s14
 8008562:	eef0 8a67 	vmov.f32	s17, s15
 8008566:	e9dd 6700 	ldrd	r6, r7, [sp]
 800856a:	2600      	movs	r6, #0
 800856c:	4632      	mov	r2, r6
 800856e:	463b      	mov	r3, r7
 8008570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008574:	f7f7 fe3c 	bl	80001f0 <__aeabi_dsub>
 8008578:	4622      	mov	r2, r4
 800857a:	462b      	mov	r3, r5
 800857c:	f7f7 fff0 	bl	8000560 <__aeabi_dmul>
 8008580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	f7f7 ffe8 	bl	8000560 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4640      	mov	r0, r8
 8008596:	4649      	mov	r1, r9
 8008598:	f7f7 fe2c 	bl	80001f4 <__adddf3>
 800859c:	4632      	mov	r2, r6
 800859e:	463b      	mov	r3, r7
 80085a0:	4680      	mov	r8, r0
 80085a2:	4689      	mov	r9, r1
 80085a4:	4620      	mov	r0, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	f7f7 ffda 	bl	8000560 <__aeabi_dmul>
 80085ac:	460b      	mov	r3, r1
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	4602      	mov	r2, r0
 80085b4:	4649      	mov	r1, r9
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7f7 fe1c 	bl	80001f4 <__adddf3>
 80085bc:	4b19      	ldr	r3, [pc, #100]	; (8008624 <__ieee754_pow+0x3fc>)
 80085be:	4299      	cmp	r1, r3
 80085c0:	ec45 4b19 	vmov	d9, r4, r5
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	468b      	mov	fp, r1
 80085ca:	f340 82f1 	ble.w	8008bb0 <__ieee754_pow+0x988>
 80085ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80085d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80085d6:	4303      	orrs	r3, r0
 80085d8:	f000 81e4 	beq.w	80089a4 <__ieee754_pow+0x77c>
 80085dc:	ec51 0b18 	vmov	r0, r1, d8
 80085e0:	2200      	movs	r2, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	f7f8 fa2e 	bl	8000a44 <__aeabi_dcmplt>
 80085e8:	3800      	subs	r0, #0
 80085ea:	bf18      	it	ne
 80085ec:	2001      	movne	r0, #1
 80085ee:	e72b      	b.n	8008448 <__ieee754_pow+0x220>
 80085f0:	60000000 	.word	0x60000000
 80085f4:	3ff71547 	.word	0x3ff71547
 80085f8:	f85ddf44 	.word	0xf85ddf44
 80085fc:	3e54ae0b 	.word	0x3e54ae0b
 8008600:	55555555 	.word	0x55555555
 8008604:	3fd55555 	.word	0x3fd55555
 8008608:	652b82fe 	.word	0x652b82fe
 800860c:	3ff71547 	.word	0x3ff71547
 8008610:	00000000 	.word	0x00000000
 8008614:	bff00000 	.word	0xbff00000
 8008618:	3ff00000 	.word	0x3ff00000
 800861c:	3fd00000 	.word	0x3fd00000
 8008620:	3fe00000 	.word	0x3fe00000
 8008624:	408fffff 	.word	0x408fffff
 8008628:	4bd5      	ldr	r3, [pc, #852]	; (8008980 <__ieee754_pow+0x758>)
 800862a:	402b      	ands	r3, r5
 800862c:	2200      	movs	r2, #0
 800862e:	b92b      	cbnz	r3, 800863c <__ieee754_pow+0x414>
 8008630:	4bd4      	ldr	r3, [pc, #848]	; (8008984 <__ieee754_pow+0x75c>)
 8008632:	f7f7 ff95 	bl	8000560 <__aeabi_dmul>
 8008636:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800863a:	460c      	mov	r4, r1
 800863c:	1523      	asrs	r3, r4, #20
 800863e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008642:	4413      	add	r3, r2
 8008644:	9305      	str	r3, [sp, #20]
 8008646:	4bd0      	ldr	r3, [pc, #832]	; (8008988 <__ieee754_pow+0x760>)
 8008648:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800864c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008650:	429c      	cmp	r4, r3
 8008652:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008656:	dd08      	ble.n	800866a <__ieee754_pow+0x442>
 8008658:	4bcc      	ldr	r3, [pc, #816]	; (800898c <__ieee754_pow+0x764>)
 800865a:	429c      	cmp	r4, r3
 800865c:	f340 8162 	ble.w	8008924 <__ieee754_pow+0x6fc>
 8008660:	9b05      	ldr	r3, [sp, #20]
 8008662:	3301      	adds	r3, #1
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800866a:	2400      	movs	r4, #0
 800866c:	00e3      	lsls	r3, r4, #3
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	4bc7      	ldr	r3, [pc, #796]	; (8008990 <__ieee754_pow+0x768>)
 8008672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008676:	ed93 7b00 	vldr	d7, [r3]
 800867a:	4629      	mov	r1, r5
 800867c:	ec53 2b17 	vmov	r2, r3, d7
 8008680:	eeb0 9a47 	vmov.f32	s18, s14
 8008684:	eef0 9a67 	vmov.f32	s19, s15
 8008688:	4682      	mov	sl, r0
 800868a:	f7f7 fdb1 	bl	80001f0 <__aeabi_dsub>
 800868e:	4652      	mov	r2, sl
 8008690:	4606      	mov	r6, r0
 8008692:	460f      	mov	r7, r1
 8008694:	462b      	mov	r3, r5
 8008696:	ec51 0b19 	vmov	r0, r1, d9
 800869a:	f7f7 fdab 	bl	80001f4 <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	2000      	movs	r0, #0
 80086a4:	49bb      	ldr	r1, [pc, #748]	; (8008994 <__ieee754_pow+0x76c>)
 80086a6:	f7f8 f885 	bl	80007b4 <__aeabi_ddiv>
 80086aa:	ec41 0b1a 	vmov	d10, r0, r1
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4630      	mov	r0, r6
 80086b4:	4639      	mov	r1, r7
 80086b6:	f7f7 ff53 	bl	8000560 <__aeabi_dmul>
 80086ba:	2300      	movs	r3, #0
 80086bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086c6:	46ab      	mov	fp, r5
 80086c8:	106d      	asrs	r5, r5, #1
 80086ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086d2:	ec41 0b18 	vmov	d8, r0, r1
 80086d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80086da:	2200      	movs	r2, #0
 80086dc:	4640      	mov	r0, r8
 80086de:	4649      	mov	r1, r9
 80086e0:	4614      	mov	r4, r2
 80086e2:	461d      	mov	r5, r3
 80086e4:	f7f7 ff3c 	bl	8000560 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f7f7 fd7e 	bl	80001f0 <__aeabi_dsub>
 80086f4:	ec53 2b19 	vmov	r2, r3, d9
 80086f8:	4606      	mov	r6, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	4620      	mov	r0, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	f7f7 fd76 	bl	80001f0 <__aeabi_dsub>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4650      	mov	r0, sl
 800870a:	4659      	mov	r1, fp
 800870c:	f7f7 fd70 	bl	80001f0 <__aeabi_dsub>
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	f7f7 ff24 	bl	8000560 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f7 fd66 	bl	80001f0 <__aeabi_dsub>
 8008724:	ec53 2b1a 	vmov	r2, r3, d10
 8008728:	f7f7 ff1a 	bl	8000560 <__aeabi_dmul>
 800872c:	ec53 2b18 	vmov	r2, r3, d8
 8008730:	ec41 0b19 	vmov	d9, r0, r1
 8008734:	ec51 0b18 	vmov	r0, r1, d8
 8008738:	f7f7 ff12 	bl	8000560 <__aeabi_dmul>
 800873c:	a37c      	add	r3, pc, #496	; (adr r3, 8008930 <__ieee754_pow+0x708>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	4604      	mov	r4, r0
 8008744:	460d      	mov	r5, r1
 8008746:	f7f7 ff0b 	bl	8000560 <__aeabi_dmul>
 800874a:	a37b      	add	r3, pc, #492	; (adr r3, 8008938 <__ieee754_pow+0x710>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 fd50 	bl	80001f4 <__adddf3>
 8008754:	4622      	mov	r2, r4
 8008756:	462b      	mov	r3, r5
 8008758:	f7f7 ff02 	bl	8000560 <__aeabi_dmul>
 800875c:	a378      	add	r3, pc, #480	; (adr r3, 8008940 <__ieee754_pow+0x718>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fd47 	bl	80001f4 <__adddf3>
 8008766:	4622      	mov	r2, r4
 8008768:	462b      	mov	r3, r5
 800876a:	f7f7 fef9 	bl	8000560 <__aeabi_dmul>
 800876e:	a376      	add	r3, pc, #472	; (adr r3, 8008948 <__ieee754_pow+0x720>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f7f7 fd3e 	bl	80001f4 <__adddf3>
 8008778:	4622      	mov	r2, r4
 800877a:	462b      	mov	r3, r5
 800877c:	f7f7 fef0 	bl	8000560 <__aeabi_dmul>
 8008780:	a373      	add	r3, pc, #460	; (adr r3, 8008950 <__ieee754_pow+0x728>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fd35 	bl	80001f4 <__adddf3>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f7f7 fee7 	bl	8000560 <__aeabi_dmul>
 8008792:	a371      	add	r3, pc, #452	; (adr r3, 8008958 <__ieee754_pow+0x730>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 fd2c 	bl	80001f4 <__adddf3>
 800879c:	4622      	mov	r2, r4
 800879e:	4606      	mov	r6, r0
 80087a0:	460f      	mov	r7, r1
 80087a2:	462b      	mov	r3, r5
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f7f7 feda 	bl	8000560 <__aeabi_dmul>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fed4 	bl	8000560 <__aeabi_dmul>
 80087b8:	4642      	mov	r2, r8
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	464b      	mov	r3, r9
 80087c0:	ec51 0b18 	vmov	r0, r1, d8
 80087c4:	f7f7 fd16 	bl	80001f4 <__adddf3>
 80087c8:	ec53 2b19 	vmov	r2, r3, d9
 80087cc:	f7f7 fec8 	bl	8000560 <__aeabi_dmul>
 80087d0:	4622      	mov	r2, r4
 80087d2:	462b      	mov	r3, r5
 80087d4:	f7f7 fd0e 	bl	80001f4 <__adddf3>
 80087d8:	4642      	mov	r2, r8
 80087da:	4682      	mov	sl, r0
 80087dc:	468b      	mov	fp, r1
 80087de:	464b      	mov	r3, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	4649      	mov	r1, r9
 80087e4:	f7f7 febc 	bl	8000560 <__aeabi_dmul>
 80087e8:	4b6b      	ldr	r3, [pc, #428]	; (8008998 <__ieee754_pow+0x770>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	f7f7 fd00 	bl	80001f4 <__adddf3>
 80087f4:	4652      	mov	r2, sl
 80087f6:	465b      	mov	r3, fp
 80087f8:	f7f7 fcfc 	bl	80001f4 <__adddf3>
 80087fc:	2000      	movs	r0, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	460d      	mov	r5, r1
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4640      	mov	r0, r8
 8008808:	4649      	mov	r1, r9
 800880a:	f7f7 fea9 	bl	8000560 <__aeabi_dmul>
 800880e:	4b62      	ldr	r3, [pc, #392]	; (8008998 <__ieee754_pow+0x770>)
 8008810:	4680      	mov	r8, r0
 8008812:	4689      	mov	r9, r1
 8008814:	2200      	movs	r2, #0
 8008816:	4620      	mov	r0, r4
 8008818:	4629      	mov	r1, r5
 800881a:	f7f7 fce9 	bl	80001f0 <__aeabi_dsub>
 800881e:	4632      	mov	r2, r6
 8008820:	463b      	mov	r3, r7
 8008822:	f7f7 fce5 	bl	80001f0 <__aeabi_dsub>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f7 fcdf 	bl	80001f0 <__aeabi_dsub>
 8008832:	ec53 2b18 	vmov	r2, r3, d8
 8008836:	f7f7 fe93 	bl	8000560 <__aeabi_dmul>
 800883a:	4622      	mov	r2, r4
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	462b      	mov	r3, r5
 8008842:	ec51 0b19 	vmov	r0, r1, d9
 8008846:	f7f7 fe8b 	bl	8000560 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f7 fccf 	bl	80001f4 <__adddf3>
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f7 fcc7 	bl	80001f4 <__adddf3>
 8008866:	a33e      	add	r3, pc, #248	; (adr r3, 8008960 <__ieee754_pow+0x738>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	2000      	movs	r0, #0
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	f7f7 fe75 	bl	8000560 <__aeabi_dmul>
 8008876:	4642      	mov	r2, r8
 8008878:	ec41 0b18 	vmov	d8, r0, r1
 800887c:	464b      	mov	r3, r9
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fcb5 	bl	80001f0 <__aeabi_dsub>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f7 fcaf 	bl	80001f0 <__aeabi_dsub>
 8008892:	a335      	add	r3, pc, #212	; (adr r3, 8008968 <__ieee754_pow+0x740>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 fe62 	bl	8000560 <__aeabi_dmul>
 800889c:	a334      	add	r3, pc, #208	; (adr r3, 8008970 <__ieee754_pow+0x748>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fe59 	bl	8000560 <__aeabi_dmul>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4630      	mov	r0, r6
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 fc9d 	bl	80001f4 <__adddf3>
 80088ba:	9a07      	ldr	r2, [sp, #28]
 80088bc:	4b37      	ldr	r3, [pc, #220]	; (800899c <__ieee754_pow+0x774>)
 80088be:	4413      	add	r3, r2
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fc96 	bl	80001f4 <__adddf3>
 80088c8:	4682      	mov	sl, r0
 80088ca:	9805      	ldr	r0, [sp, #20]
 80088cc:	468b      	mov	fp, r1
 80088ce:	f7f7 fddd 	bl	800048c <__aeabi_i2d>
 80088d2:	9a07      	ldr	r2, [sp, #28]
 80088d4:	4b32      	ldr	r3, [pc, #200]	; (80089a0 <__ieee754_pow+0x778>)
 80088d6:	4413      	add	r3, r2
 80088d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088dc:	4606      	mov	r6, r0
 80088de:	460f      	mov	r7, r1
 80088e0:	4652      	mov	r2, sl
 80088e2:	465b      	mov	r3, fp
 80088e4:	ec51 0b18 	vmov	r0, r1, d8
 80088e8:	f7f7 fc84 	bl	80001f4 <__adddf3>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	f7f7 fc80 	bl	80001f4 <__adddf3>
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	f7f7 fc7c 	bl	80001f4 <__adddf3>
 80088fc:	2000      	movs	r0, #0
 80088fe:	4632      	mov	r2, r6
 8008900:	463b      	mov	r3, r7
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	f7f7 fc73 	bl	80001f0 <__aeabi_dsub>
 800890a:	4642      	mov	r2, r8
 800890c:	464b      	mov	r3, r9
 800890e:	f7f7 fc6f 	bl	80001f0 <__aeabi_dsub>
 8008912:	ec53 2b18 	vmov	r2, r3, d8
 8008916:	f7f7 fc6b 	bl	80001f0 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4650      	mov	r0, sl
 8008920:	4659      	mov	r1, fp
 8008922:	e610      	b.n	8008546 <__ieee754_pow+0x31e>
 8008924:	2401      	movs	r4, #1
 8008926:	e6a1      	b.n	800866c <__ieee754_pow+0x444>
 8008928:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008978 <__ieee754_pow+0x750>
 800892c:	e617      	b.n	800855e <__ieee754_pow+0x336>
 800892e:	bf00      	nop
 8008930:	4a454eef 	.word	0x4a454eef
 8008934:	3fca7e28 	.word	0x3fca7e28
 8008938:	93c9db65 	.word	0x93c9db65
 800893c:	3fcd864a 	.word	0x3fcd864a
 8008940:	a91d4101 	.word	0xa91d4101
 8008944:	3fd17460 	.word	0x3fd17460
 8008948:	518f264d 	.word	0x518f264d
 800894c:	3fd55555 	.word	0x3fd55555
 8008950:	db6fabff 	.word	0xdb6fabff
 8008954:	3fdb6db6 	.word	0x3fdb6db6
 8008958:	33333303 	.word	0x33333303
 800895c:	3fe33333 	.word	0x3fe33333
 8008960:	e0000000 	.word	0xe0000000
 8008964:	3feec709 	.word	0x3feec709
 8008968:	dc3a03fd 	.word	0xdc3a03fd
 800896c:	3feec709 	.word	0x3feec709
 8008970:	145b01f5 	.word	0x145b01f5
 8008974:	be3e2fe0 	.word	0xbe3e2fe0
 8008978:	00000000 	.word	0x00000000
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	43400000 	.word	0x43400000
 8008988:	0003988e 	.word	0x0003988e
 800898c:	000bb679 	.word	0x000bb679
 8008990:	0800bba8 	.word	0x0800bba8
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	40080000 	.word	0x40080000
 800899c:	0800bbc8 	.word	0x0800bbc8
 80089a0:	0800bbb8 	.word	0x0800bbb8
 80089a4:	a3b5      	add	r3, pc, #724	; (adr r3, 8008c7c <__ieee754_pow+0xa54>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	f7f7 fc21 	bl	80001f4 <__adddf3>
 80089b2:	4622      	mov	r2, r4
 80089b4:	ec41 0b1a 	vmov	d10, r0, r1
 80089b8:	462b      	mov	r3, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	f7f7 fc17 	bl	80001f0 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	ec51 0b1a 	vmov	r0, r1, d10
 80089ca:	f7f8 f859 	bl	8000a80 <__aeabi_dcmpgt>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f47f ae04 	bne.w	80085dc <__ieee754_pow+0x3b4>
 80089d4:	4aa4      	ldr	r2, [pc, #656]	; (8008c68 <__ieee754_pow+0xa40>)
 80089d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089da:	4293      	cmp	r3, r2
 80089dc:	f340 8108 	ble.w	8008bf0 <__ieee754_pow+0x9c8>
 80089e0:	151b      	asrs	r3, r3, #20
 80089e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089ea:	fa4a f303 	asr.w	r3, sl, r3
 80089ee:	445b      	add	r3, fp
 80089f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089f4:	4e9d      	ldr	r6, [pc, #628]	; (8008c6c <__ieee754_pow+0xa44>)
 80089f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80089fa:	4116      	asrs	r6, r2
 80089fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a00:	2000      	movs	r0, #0
 8008a02:	ea23 0106 	bic.w	r1, r3, r6
 8008a06:	f1c2 0214 	rsb	r2, r2, #20
 8008a0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a0e:	fa4a fa02 	asr.w	sl, sl, r2
 8008a12:	f1bb 0f00 	cmp.w	fp, #0
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	bfb8      	it	lt
 8008a20:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a24:	f7f7 fbe4 	bl	80001f0 <__aeabi_dsub>
 8008a28:	ec41 0b19 	vmov	d9, r0, r1
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	ec51 0b19 	vmov	r0, r1, d9
 8008a34:	f7f7 fbde 	bl	80001f4 <__adddf3>
 8008a38:	a37b      	add	r3, pc, #492	; (adr r3, 8008c28 <__ieee754_pow+0xa00>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	2000      	movs	r0, #0
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	f7f7 fd8c 	bl	8000560 <__aeabi_dmul>
 8008a48:	ec53 2b19 	vmov	r2, r3, d9
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fbcc 	bl	80001f0 <__aeabi_dsub>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4640      	mov	r0, r8
 8008a5e:	4649      	mov	r1, r9
 8008a60:	f7f7 fbc6 	bl	80001f0 <__aeabi_dsub>
 8008a64:	a372      	add	r3, pc, #456	; (adr r3, 8008c30 <__ieee754_pow+0xa08>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f7f7 fd79 	bl	8000560 <__aeabi_dmul>
 8008a6e:	a372      	add	r3, pc, #456	; (adr r3, 8008c38 <__ieee754_pow+0xa10>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	4680      	mov	r8, r0
 8008a76:	4689      	mov	r9, r1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f7 fd70 	bl	8000560 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	f7f7 fbb4 	bl	80001f4 <__adddf3>
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f7f7 fbac 	bl	80001f4 <__adddf3>
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4689      	mov	r9, r1
 8008aa4:	f7f7 fba4 	bl	80001f0 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fb9e 	bl	80001f0 <__aeabi_dsub>
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	464b      	mov	r3, r9
 8008abc:	4640      	mov	r0, r8
 8008abe:	4649      	mov	r1, r9
 8008ac0:	f7f7 fd4e 	bl	8000560 <__aeabi_dmul>
 8008ac4:	a35e      	add	r3, pc, #376	; (adr r3, 8008c40 <__ieee754_pow+0xa18>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	f7f7 fd47 	bl	8000560 <__aeabi_dmul>
 8008ad2:	a35d      	add	r3, pc, #372	; (adr r3, 8008c48 <__ieee754_pow+0xa20>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fb8a 	bl	80001f0 <__aeabi_dsub>
 8008adc:	4622      	mov	r2, r4
 8008ade:	462b      	mov	r3, r5
 8008ae0:	f7f7 fd3e 	bl	8000560 <__aeabi_dmul>
 8008ae4:	a35a      	add	r3, pc, #360	; (adr r3, 8008c50 <__ieee754_pow+0xa28>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fb83 	bl	80001f4 <__adddf3>
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	f7f7 fd35 	bl	8000560 <__aeabi_dmul>
 8008af6:	a358      	add	r3, pc, #352	; (adr r3, 8008c58 <__ieee754_pow+0xa30>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fb78 	bl	80001f0 <__aeabi_dsub>
 8008b00:	4622      	mov	r2, r4
 8008b02:	462b      	mov	r3, r5
 8008b04:	f7f7 fd2c 	bl	8000560 <__aeabi_dmul>
 8008b08:	a355      	add	r3, pc, #340	; (adr r3, 8008c60 <__ieee754_pow+0xa38>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fb71 	bl	80001f4 <__adddf3>
 8008b12:	4622      	mov	r2, r4
 8008b14:	462b      	mov	r3, r5
 8008b16:	f7f7 fd23 	bl	8000560 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4649      	mov	r1, r9
 8008b22:	f7f7 fb65 	bl	80001f0 <__aeabi_dsub>
 8008b26:	4604      	mov	r4, r0
 8008b28:	460d      	mov	r5, r1
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fd15 	bl	8000560 <__aeabi_dmul>
 8008b36:	2200      	movs	r2, #0
 8008b38:	ec41 0b19 	vmov	d9, r0, r1
 8008b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b40:	4620      	mov	r0, r4
 8008b42:	4629      	mov	r1, r5
 8008b44:	f7f7 fb54 	bl	80001f0 <__aeabi_dsub>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	ec51 0b19 	vmov	r0, r1, d9
 8008b50:	f7f7 fe30 	bl	80007b4 <__aeabi_ddiv>
 8008b54:	4632      	mov	r2, r6
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	463b      	mov	r3, r7
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	4649      	mov	r1, r9
 8008b60:	f7f7 fcfe 	bl	8000560 <__aeabi_dmul>
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	f7f7 fb44 	bl	80001f4 <__adddf3>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fb3c 	bl	80001f0 <__aeabi_dsub>
 8008b78:	4642      	mov	r2, r8
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	f7f7 fb38 	bl	80001f0 <__aeabi_dsub>
 8008b80:	460b      	mov	r3, r1
 8008b82:	4602      	mov	r2, r0
 8008b84:	493a      	ldr	r1, [pc, #232]	; (8008c70 <__ieee754_pow+0xa48>)
 8008b86:	2000      	movs	r0, #0
 8008b88:	f7f7 fb32 	bl	80001f0 <__aeabi_dsub>
 8008b8c:	ec41 0b10 	vmov	d0, r0, r1
 8008b90:	ee10 3a90 	vmov	r3, s1
 8008b94:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9c:	da2b      	bge.n	8008bf6 <__ieee754_pow+0x9ce>
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f001 fa52 	bl	800a048 <scalbn>
 8008ba4:	ec51 0b10 	vmov	r0, r1, d0
 8008ba8:	ec53 2b18 	vmov	r2, r3, d8
 8008bac:	f7ff bbed 	b.w	800838a <__ieee754_pow+0x162>
 8008bb0:	4b30      	ldr	r3, [pc, #192]	; (8008c74 <__ieee754_pow+0xa4c>)
 8008bb2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bb6:	429e      	cmp	r6, r3
 8008bb8:	f77f af0c 	ble.w	80089d4 <__ieee754_pow+0x7ac>
 8008bbc:	4b2e      	ldr	r3, [pc, #184]	; (8008c78 <__ieee754_pow+0xa50>)
 8008bbe:	440b      	add	r3, r1
 8008bc0:	4303      	orrs	r3, r0
 8008bc2:	d009      	beq.n	8008bd8 <__ieee754_pow+0x9b0>
 8008bc4:	ec51 0b18 	vmov	r0, r1, d8
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f7f7 ff3a 	bl	8000a44 <__aeabi_dcmplt>
 8008bd0:	3800      	subs	r0, #0
 8008bd2:	bf18      	it	ne
 8008bd4:	2001      	movne	r0, #1
 8008bd6:	e447      	b.n	8008468 <__ieee754_pow+0x240>
 8008bd8:	4622      	mov	r2, r4
 8008bda:	462b      	mov	r3, r5
 8008bdc:	f7f7 fb08 	bl	80001f0 <__aeabi_dsub>
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	f7f7 ff42 	bl	8000a6c <__aeabi_dcmpge>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f43f aef3 	beq.w	80089d4 <__ieee754_pow+0x7ac>
 8008bee:	e7e9      	b.n	8008bc4 <__ieee754_pow+0x99c>
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	e71a      	b.n	8008a2c <__ieee754_pow+0x804>
 8008bf6:	ec51 0b10 	vmov	r0, r1, d0
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	e7d4      	b.n	8008ba8 <__ieee754_pow+0x980>
 8008bfe:	491c      	ldr	r1, [pc, #112]	; (8008c70 <__ieee754_pow+0xa48>)
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7ff bb30 	b.w	8008266 <__ieee754_pow+0x3e>
 8008c06:	2000      	movs	r0, #0
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f7ff bb2c 	b.w	8008266 <__ieee754_pow+0x3e>
 8008c0e:	4630      	mov	r0, r6
 8008c10:	4639      	mov	r1, r7
 8008c12:	f7ff bb28 	b.w	8008266 <__ieee754_pow+0x3e>
 8008c16:	9204      	str	r2, [sp, #16]
 8008c18:	f7ff bb7a 	b.w	8008310 <__ieee754_pow+0xe8>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f7ff bb64 	b.w	80082ea <__ieee754_pow+0xc2>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	3fe62e43 	.word	0x3fe62e43
 8008c30:	fefa39ef 	.word	0xfefa39ef
 8008c34:	3fe62e42 	.word	0x3fe62e42
 8008c38:	0ca86c39 	.word	0x0ca86c39
 8008c3c:	be205c61 	.word	0xbe205c61
 8008c40:	72bea4d0 	.word	0x72bea4d0
 8008c44:	3e663769 	.word	0x3e663769
 8008c48:	c5d26bf1 	.word	0xc5d26bf1
 8008c4c:	3ebbbd41 	.word	0x3ebbbd41
 8008c50:	af25de2c 	.word	0xaf25de2c
 8008c54:	3f11566a 	.word	0x3f11566a
 8008c58:	16bebd93 	.word	0x16bebd93
 8008c5c:	3f66c16c 	.word	0x3f66c16c
 8008c60:	5555553e 	.word	0x5555553e
 8008c64:	3fc55555 	.word	0x3fc55555
 8008c68:	3fe00000 	.word	0x3fe00000
 8008c6c:	000fffff 	.word	0x000fffff
 8008c70:	3ff00000 	.word	0x3ff00000
 8008c74:	4090cbff 	.word	0x4090cbff
 8008c78:	3f6f3400 	.word	0x3f6f3400
 8008c7c:	652b82fe 	.word	0x652b82fe
 8008c80:	3c971547 	.word	0x3c971547
 8008c84:	00000000 	.word	0x00000000

08008c88 <__ieee754_rem_pio2>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	ed2d 8b02 	vpush	{d8}
 8008c90:	ec55 4b10 	vmov	r4, r5, d0
 8008c94:	4bca      	ldr	r3, [pc, #808]	; (8008fc0 <__ieee754_rem_pio2+0x338>)
 8008c96:	b08b      	sub	sp, #44	; 0x2c
 8008c98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008c9c:	4598      	cmp	r8, r3
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	9502      	str	r5, [sp, #8]
 8008ca2:	dc08      	bgt.n	8008cb6 <__ieee754_rem_pio2+0x2e>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	ed80 0b00 	vstr	d0, [r0]
 8008cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cb0:	f04f 0b00 	mov.w	fp, #0
 8008cb4:	e028      	b.n	8008d08 <__ieee754_rem_pio2+0x80>
 8008cb6:	4bc3      	ldr	r3, [pc, #780]	; (8008fc4 <__ieee754_rem_pio2+0x33c>)
 8008cb8:	4598      	cmp	r8, r3
 8008cba:	dc78      	bgt.n	8008dae <__ieee754_rem_pio2+0x126>
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	4ec2      	ldr	r6, [pc, #776]	; (8008fc8 <__ieee754_rem_pio2+0x340>)
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	ee10 0a10 	vmov	r0, s0
 8008cc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f88 <__ieee754_rem_pio2+0x300>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	4629      	mov	r1, r5
 8008cce:	dd39      	ble.n	8008d44 <__ieee754_rem_pio2+0xbc>
 8008cd0:	f7f7 fa8e 	bl	80001f0 <__aeabi_dsub>
 8008cd4:	45b0      	cmp	r8, r6
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	460d      	mov	r5, r1
 8008cda:	d01b      	beq.n	8008d14 <__ieee754_rem_pio2+0x8c>
 8008cdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x308>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f7f7 fa85 	bl	80001f0 <__aeabi_dsub>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	e9ca 2300 	strd	r2, r3, [sl]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fa7d 	bl	80001f0 <__aeabi_dsub>
 8008cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x308>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fa78 	bl	80001f0 <__aeabi_dsub>
 8008d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d04:	f04f 0b01 	mov.w	fp, #1
 8008d08:	4658      	mov	r0, fp
 8008d0a:	b00b      	add	sp, #44	; 0x2c
 8008d0c:	ecbd 8b02 	vpop	{d8}
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d14:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x310>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f7f7 fa69 	bl	80001f0 <__aeabi_dsub>
 8008d1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x318>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	f7f7 fa62 	bl	80001f0 <__aeabi_dsub>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	e9ca 2300 	strd	r2, r3, [sl]
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fa5a 	bl	80001f0 <__aeabi_dsub>
 8008d3c:	a398      	add	r3, pc, #608	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x318>)
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	e7db      	b.n	8008cfc <__ieee754_rem_pio2+0x74>
 8008d44:	f7f7 fa56 	bl	80001f4 <__adddf3>
 8008d48:	45b0      	cmp	r8, r6
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	d016      	beq.n	8008d7e <__ieee754_rem_pio2+0xf6>
 8008d50:	a38f      	add	r3, pc, #572	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x308>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fa4d 	bl	80001f4 <__adddf3>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	e9ca 2300 	strd	r2, r3, [sl]
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 fa43 	bl	80001f0 <__aeabi_dsub>
 8008d6a:	a389      	add	r3, pc, #548	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x308>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fa40 	bl	80001f4 <__adddf3>
 8008d74:	f04f 3bff 	mov.w	fp, #4294967295
 8008d78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d7c:	e7c4      	b.n	8008d08 <__ieee754_rem_pio2+0x80>
 8008d7e:	a386      	add	r3, pc, #536	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x310>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fa36 	bl	80001f4 <__adddf3>
 8008d88:	a385      	add	r3, pc, #532	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x318>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	4604      	mov	r4, r0
 8008d90:	460d      	mov	r5, r1
 8008d92:	f7f7 fa2f 	bl	80001f4 <__adddf3>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fa25 	bl	80001f0 <__aeabi_dsub>
 8008da6:	a37e      	add	r3, pc, #504	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x318>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	e7e0      	b.n	8008d70 <__ieee754_rem_pio2+0xe8>
 8008dae:	4b87      	ldr	r3, [pc, #540]	; (8008fcc <__ieee754_rem_pio2+0x344>)
 8008db0:	4598      	cmp	r8, r3
 8008db2:	f300 80d9 	bgt.w	8008f68 <__ieee754_rem_pio2+0x2e0>
 8008db6:	f7fe fb03 	bl	80073c0 <fabs>
 8008dba:	ec55 4b10 	vmov	r4, r5, d0
 8008dbe:	ee10 0a10 	vmov	r0, s0
 8008dc2:	a379      	add	r3, pc, #484	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x320>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fbc9 	bl	8000560 <__aeabi_dmul>
 8008dce:	4b80      	ldr	r3, [pc, #512]	; (8008fd0 <__ieee754_rem_pio2+0x348>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fa0f 	bl	80001f4 <__adddf3>
 8008dd6:	f7f7 fe73 	bl	8000ac0 <__aeabi_d2iz>
 8008dda:	4683      	mov	fp, r0
 8008ddc:	f7f7 fb56 	bl	800048c <__aeabi_i2d>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	ec43 2b18 	vmov	d8, r2, r3
 8008de8:	a367      	add	r3, pc, #412	; (adr r3, 8008f88 <__ieee754_rem_pio2+0x300>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 fbb7 	bl	8000560 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 f9f9 	bl	80001f0 <__aeabi_dsub>
 8008dfe:	a364      	add	r3, pc, #400	; (adr r3, 8008f90 <__ieee754_rem_pio2+0x308>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	ec51 0b18 	vmov	r0, r1, d8
 8008e0c:	f7f7 fba8 	bl	8000560 <__aeabi_dmul>
 8008e10:	f1bb 0f1f 	cmp.w	fp, #31
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	dc0d      	bgt.n	8008e36 <__ieee754_rem_pio2+0x1ae>
 8008e1a:	4b6e      	ldr	r3, [pc, #440]	; (8008fd4 <__ieee754_rem_pio2+0x34c>)
 8008e1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e24:	4543      	cmp	r3, r8
 8008e26:	d006      	beq.n	8008e36 <__ieee754_rem_pio2+0x1ae>
 8008e28:	4622      	mov	r2, r4
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 f9de 	bl	80001f0 <__aeabi_dsub>
 8008e34:	e00f      	b.n	8008e56 <__ieee754_rem_pio2+0x1ce>
 8008e36:	462b      	mov	r3, r5
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 f9d7 	bl	80001f0 <__aeabi_dsub>
 8008e42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008e50:	f1b8 0f10 	cmp.w	r8, #16
 8008e54:	dc02      	bgt.n	8008e5c <__ieee754_rem_pio2+0x1d4>
 8008e56:	e9ca 0100 	strd	r0, r1, [sl]
 8008e5a:	e039      	b.n	8008ed0 <__ieee754_rem_pio2+0x248>
 8008e5c:	a34e      	add	r3, pc, #312	; (adr r3, 8008f98 <__ieee754_rem_pio2+0x310>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	ec51 0b18 	vmov	r0, r1, d8
 8008e66:	f7f7 fb7b 	bl	8000560 <__aeabi_dmul>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	460d      	mov	r5, r1
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4630      	mov	r0, r6
 8008e74:	4639      	mov	r1, r7
 8008e76:	f7f7 f9bb 	bl	80001f0 <__aeabi_dsub>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 f9b3 	bl	80001f0 <__aeabi_dsub>
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	f7f7 f9af 	bl	80001f0 <__aeabi_dsub>
 8008e92:	a343      	add	r3, pc, #268	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x318>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4604      	mov	r4, r0
 8008e9a:	460d      	mov	r5, r1
 8008e9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ea0:	f7f7 fb5e 	bl	8000560 <__aeabi_dmul>
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	f7f7 f9a2 	bl	80001f0 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 f99a 	bl	80001f0 <__aeabi_dsub>
 8008ebc:	9a03      	ldr	r2, [sp, #12]
 8008ebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b31      	cmp	r3, #49	; 0x31
 8008ec6:	dc24      	bgt.n	8008f12 <__ieee754_rem_pio2+0x28a>
 8008ec8:	e9ca 0100 	strd	r0, r1, [sl]
 8008ecc:	4646      	mov	r6, r8
 8008ece:	464f      	mov	r7, r9
 8008ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 f988 	bl	80001f0 <__aeabi_dsub>
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	f7f7 f984 	bl	80001f0 <__aeabi_dsub>
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ef0:	f6bf af0a 	bge.w	8008d08 <__ieee754_rem_pio2+0x80>
 8008ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ef8:	f8ca 3004 	str.w	r3, [sl, #4]
 8008efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f00:	f8ca 8000 	str.w	r8, [sl]
 8008f04:	f8ca 0008 	str.w	r0, [sl, #8]
 8008f08:	f8ca 300c 	str.w	r3, [sl, #12]
 8008f0c:	f1cb 0b00 	rsb	fp, fp, #0
 8008f10:	e6fa      	b.n	8008d08 <__ieee754_rem_pio2+0x80>
 8008f12:	a327      	add	r3, pc, #156	; (adr r3, 8008fb0 <__ieee754_rem_pio2+0x328>)
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	ec51 0b18 	vmov	r0, r1, d8
 8008f1c:	f7f7 fb20 	bl	8000560 <__aeabi_dmul>
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4640      	mov	r0, r8
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	f7f7 f960 	bl	80001f0 <__aeabi_dsub>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 f958 	bl	80001f0 <__aeabi_dsub>
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	f7f7 f954 	bl	80001f0 <__aeabi_dsub>
 8008f48:	a31b      	add	r3, pc, #108	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x330>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	ec51 0b18 	vmov	r0, r1, d8
 8008f56:	f7f7 fb03 	bl	8000560 <__aeabi_dmul>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	f7f7 f947 	bl	80001f0 <__aeabi_dsub>
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	e75f      	b.n	8008e28 <__ieee754_rem_pio2+0x1a0>
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <__ieee754_rem_pio2+0x350>)
 8008f6a:	4598      	cmp	r8, r3
 8008f6c:	dd36      	ble.n	8008fdc <__ieee754_rem_pio2+0x354>
 8008f6e:	ee10 2a10 	vmov	r2, s0
 8008f72:	462b      	mov	r3, r5
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 f93a 	bl	80001f0 <__aeabi_dsub>
 8008f7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f80:	e9ca 0100 	strd	r0, r1, [sl]
 8008f84:	e694      	b.n	8008cb0 <__ieee754_rem_pio2+0x28>
 8008f86:	bf00      	nop
 8008f88:	54400000 	.word	0x54400000
 8008f8c:	3ff921fb 	.word	0x3ff921fb
 8008f90:	1a626331 	.word	0x1a626331
 8008f94:	3dd0b461 	.word	0x3dd0b461
 8008f98:	1a600000 	.word	0x1a600000
 8008f9c:	3dd0b461 	.word	0x3dd0b461
 8008fa0:	2e037073 	.word	0x2e037073
 8008fa4:	3ba3198a 	.word	0x3ba3198a
 8008fa8:	6dc9c883 	.word	0x6dc9c883
 8008fac:	3fe45f30 	.word	0x3fe45f30
 8008fb0:	2e000000 	.word	0x2e000000
 8008fb4:	3ba3198a 	.word	0x3ba3198a
 8008fb8:	252049c1 	.word	0x252049c1
 8008fbc:	397b839a 	.word	0x397b839a
 8008fc0:	3fe921fb 	.word	0x3fe921fb
 8008fc4:	4002d97b 	.word	0x4002d97b
 8008fc8:	3ff921fb 	.word	0x3ff921fb
 8008fcc:	413921fb 	.word	0x413921fb
 8008fd0:	3fe00000 	.word	0x3fe00000
 8008fd4:	0800bbd8 	.word	0x0800bbd8
 8008fd8:	7fefffff 	.word	0x7fefffff
 8008fdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008fe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008fe4:	ee10 0a10 	vmov	r0, s0
 8008fe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008fec:	ee10 6a10 	vmov	r6, s0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	f7f7 fd65 	bl	8000ac0 <__aeabi_d2iz>
 8008ff6:	f7f7 fa49 	bl	800048c <__aeabi_i2d>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009006:	f7f7 f8f3 	bl	80001f0 <__aeabi_dsub>
 800900a:	4b23      	ldr	r3, [pc, #140]	; (8009098 <__ieee754_rem_pio2+0x410>)
 800900c:	2200      	movs	r2, #0
 800900e:	f7f7 faa7 	bl	8000560 <__aeabi_dmul>
 8009012:	460f      	mov	r7, r1
 8009014:	4606      	mov	r6, r0
 8009016:	f7f7 fd53 	bl	8000ac0 <__aeabi_d2iz>
 800901a:	f7f7 fa37 	bl	800048c <__aeabi_i2d>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4630      	mov	r0, r6
 8009024:	4639      	mov	r1, r7
 8009026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800902a:	f7f7 f8e1 	bl	80001f0 <__aeabi_dsub>
 800902e:	4b1a      	ldr	r3, [pc, #104]	; (8009098 <__ieee754_rem_pio2+0x410>)
 8009030:	2200      	movs	r2, #0
 8009032:	f7f7 fa95 	bl	8000560 <__aeabi_dmul>
 8009036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800903a:	ad04      	add	r5, sp, #16
 800903c:	f04f 0803 	mov.w	r8, #3
 8009040:	46a9      	mov	r9, r5
 8009042:	2600      	movs	r6, #0
 8009044:	2700      	movs	r7, #0
 8009046:	4632      	mov	r2, r6
 8009048:	463b      	mov	r3, r7
 800904a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800904e:	46c3      	mov	fp, r8
 8009050:	3d08      	subs	r5, #8
 8009052:	f108 38ff 	add.w	r8, r8, #4294967295
 8009056:	f7f7 fceb 	bl	8000a30 <__aeabi_dcmpeq>
 800905a:	2800      	cmp	r0, #0
 800905c:	d1f3      	bne.n	8009046 <__ieee754_rem_pio2+0x3be>
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <__ieee754_rem_pio2+0x414>)
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	2302      	movs	r3, #2
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	4622      	mov	r2, r4
 8009068:	465b      	mov	r3, fp
 800906a:	4651      	mov	r1, sl
 800906c:	4648      	mov	r0, r9
 800906e:	f000 f993 	bl	8009398 <__kernel_rem_pio2>
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	4683      	mov	fp, r0
 8009078:	f6bf ae46 	bge.w	8008d08 <__ieee754_rem_pio2+0x80>
 800907c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009084:	e9ca 2300 	strd	r2, r3, [sl]
 8009088:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800908c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009090:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009094:	e73a      	b.n	8008f0c <__ieee754_rem_pio2+0x284>
 8009096:	bf00      	nop
 8009098:	41700000 	.word	0x41700000
 800909c:	0800bc58 	.word	0x0800bc58

080090a0 <__ieee754_sqrt>:
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	4e55      	ldr	r6, [pc, #340]	; (8009200 <__ieee754_sqrt+0x160>)
 80090aa:	43ae      	bics	r6, r5
 80090ac:	ee10 0a10 	vmov	r0, s0
 80090b0:	ee10 3a10 	vmov	r3, s0
 80090b4:	462a      	mov	r2, r5
 80090b6:	4629      	mov	r1, r5
 80090b8:	d110      	bne.n	80090dc <__ieee754_sqrt+0x3c>
 80090ba:	ee10 2a10 	vmov	r2, s0
 80090be:	462b      	mov	r3, r5
 80090c0:	f7f7 fa4e 	bl	8000560 <__aeabi_dmul>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f892 	bl	80001f4 <__adddf3>
 80090d0:	4604      	mov	r4, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	ec45 4b10 	vmov	d0, r4, r5
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	2d00      	cmp	r5, #0
 80090de:	dc10      	bgt.n	8009102 <__ieee754_sqrt+0x62>
 80090e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090e4:	4330      	orrs	r0, r6
 80090e6:	d0f5      	beq.n	80090d4 <__ieee754_sqrt+0x34>
 80090e8:	b15d      	cbz	r5, 8009102 <__ieee754_sqrt+0x62>
 80090ea:	ee10 2a10 	vmov	r2, s0
 80090ee:	462b      	mov	r3, r5
 80090f0:	ee10 0a10 	vmov	r0, s0
 80090f4:	f7f7 f87c 	bl	80001f0 <__aeabi_dsub>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	f7f7 fb5a 	bl	80007b4 <__aeabi_ddiv>
 8009100:	e7e6      	b.n	80090d0 <__ieee754_sqrt+0x30>
 8009102:	1512      	asrs	r2, r2, #20
 8009104:	d074      	beq.n	80091f0 <__ieee754_sqrt+0x150>
 8009106:	07d4      	lsls	r4, r2, #31
 8009108:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800910c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009114:	bf5e      	ittt	pl
 8009116:	0fda      	lsrpl	r2, r3, #31
 8009118:	005b      	lslpl	r3, r3, #1
 800911a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800911e:	2400      	movs	r4, #0
 8009120:	0fda      	lsrs	r2, r3, #31
 8009122:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009126:	107f      	asrs	r7, r7, #1
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	2516      	movs	r5, #22
 800912c:	4620      	mov	r0, r4
 800912e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009132:	1886      	adds	r6, r0, r2
 8009134:	428e      	cmp	r6, r1
 8009136:	bfde      	ittt	le
 8009138:	1b89      	suble	r1, r1, r6
 800913a:	18b0      	addle	r0, r6, r2
 800913c:	18a4      	addle	r4, r4, r2
 800913e:	0049      	lsls	r1, r1, #1
 8009140:	3d01      	subs	r5, #1
 8009142:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009146:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800914a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800914e:	d1f0      	bne.n	8009132 <__ieee754_sqrt+0x92>
 8009150:	462a      	mov	r2, r5
 8009152:	f04f 0e20 	mov.w	lr, #32
 8009156:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800915a:	4281      	cmp	r1, r0
 800915c:	eb06 0c05 	add.w	ip, r6, r5
 8009160:	dc02      	bgt.n	8009168 <__ieee754_sqrt+0xc8>
 8009162:	d113      	bne.n	800918c <__ieee754_sqrt+0xec>
 8009164:	459c      	cmp	ip, r3
 8009166:	d811      	bhi.n	800918c <__ieee754_sqrt+0xec>
 8009168:	f1bc 0f00 	cmp.w	ip, #0
 800916c:	eb0c 0506 	add.w	r5, ip, r6
 8009170:	da43      	bge.n	80091fa <__ieee754_sqrt+0x15a>
 8009172:	2d00      	cmp	r5, #0
 8009174:	db41      	blt.n	80091fa <__ieee754_sqrt+0x15a>
 8009176:	f100 0801 	add.w	r8, r0, #1
 800917a:	1a09      	subs	r1, r1, r0
 800917c:	459c      	cmp	ip, r3
 800917e:	bf88      	it	hi
 8009180:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009184:	eba3 030c 	sub.w	r3, r3, ip
 8009188:	4432      	add	r2, r6
 800918a:	4640      	mov	r0, r8
 800918c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009190:	f1be 0e01 	subs.w	lr, lr, #1
 8009194:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009198:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800919c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091a0:	d1db      	bne.n	800915a <__ieee754_sqrt+0xba>
 80091a2:	430b      	orrs	r3, r1
 80091a4:	d006      	beq.n	80091b4 <__ieee754_sqrt+0x114>
 80091a6:	1c50      	adds	r0, r2, #1
 80091a8:	bf13      	iteet	ne
 80091aa:	3201      	addne	r2, #1
 80091ac:	3401      	addeq	r4, #1
 80091ae:	4672      	moveq	r2, lr
 80091b0:	f022 0201 	bicne.w	r2, r2, #1
 80091b4:	1063      	asrs	r3, r4, #1
 80091b6:	0852      	lsrs	r2, r2, #1
 80091b8:	07e1      	lsls	r1, r4, #31
 80091ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80091be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80091c2:	bf48      	it	mi
 80091c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80091c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80091cc:	4614      	mov	r4, r2
 80091ce:	e781      	b.n	80090d4 <__ieee754_sqrt+0x34>
 80091d0:	0ad9      	lsrs	r1, r3, #11
 80091d2:	3815      	subs	r0, #21
 80091d4:	055b      	lsls	r3, r3, #21
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d0fa      	beq.n	80091d0 <__ieee754_sqrt+0x130>
 80091da:	02cd      	lsls	r5, r1, #11
 80091dc:	d50a      	bpl.n	80091f4 <__ieee754_sqrt+0x154>
 80091de:	f1c2 0420 	rsb	r4, r2, #32
 80091e2:	fa23 f404 	lsr.w	r4, r3, r4
 80091e6:	1e55      	subs	r5, r2, #1
 80091e8:	4093      	lsls	r3, r2
 80091ea:	4321      	orrs	r1, r4
 80091ec:	1b42      	subs	r2, r0, r5
 80091ee:	e78a      	b.n	8009106 <__ieee754_sqrt+0x66>
 80091f0:	4610      	mov	r0, r2
 80091f2:	e7f0      	b.n	80091d6 <__ieee754_sqrt+0x136>
 80091f4:	0049      	lsls	r1, r1, #1
 80091f6:	3201      	adds	r2, #1
 80091f8:	e7ef      	b.n	80091da <__ieee754_sqrt+0x13a>
 80091fa:	4680      	mov	r8, r0
 80091fc:	e7bd      	b.n	800917a <__ieee754_sqrt+0xda>
 80091fe:	bf00      	nop
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	00000000 	.word	0x00000000

08009208 <__kernel_cos>:
 8009208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	ec57 6b10 	vmov	r6, r7, d0
 8009210:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009214:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009218:	ed8d 1b00 	vstr	d1, [sp]
 800921c:	da07      	bge.n	800922e <__kernel_cos+0x26>
 800921e:	ee10 0a10 	vmov	r0, s0
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 fc4c 	bl	8000ac0 <__aeabi_d2iz>
 8009228:	2800      	cmp	r0, #0
 800922a:	f000 8088 	beq.w	800933e <__kernel_cos+0x136>
 800922e:	4632      	mov	r2, r6
 8009230:	463b      	mov	r3, r7
 8009232:	4630      	mov	r0, r6
 8009234:	4639      	mov	r1, r7
 8009236:	f7f7 f993 	bl	8000560 <__aeabi_dmul>
 800923a:	4b51      	ldr	r3, [pc, #324]	; (8009380 <__kernel_cos+0x178>)
 800923c:	2200      	movs	r2, #0
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	f7f7 f98d 	bl	8000560 <__aeabi_dmul>
 8009246:	a340      	add	r3, pc, #256	; (adr r3, 8009348 <__kernel_cos+0x140>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	4682      	mov	sl, r0
 800924e:	468b      	mov	fp, r1
 8009250:	4620      	mov	r0, r4
 8009252:	4629      	mov	r1, r5
 8009254:	f7f7 f984 	bl	8000560 <__aeabi_dmul>
 8009258:	a33d      	add	r3, pc, #244	; (adr r3, 8009350 <__kernel_cos+0x148>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f6 ffc9 	bl	80001f4 <__adddf3>
 8009262:	4622      	mov	r2, r4
 8009264:	462b      	mov	r3, r5
 8009266:	f7f7 f97b 	bl	8000560 <__aeabi_dmul>
 800926a:	a33b      	add	r3, pc, #236	; (adr r3, 8009358 <__kernel_cos+0x150>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f6 ffbe 	bl	80001f0 <__aeabi_dsub>
 8009274:	4622      	mov	r2, r4
 8009276:	462b      	mov	r3, r5
 8009278:	f7f7 f972 	bl	8000560 <__aeabi_dmul>
 800927c:	a338      	add	r3, pc, #224	; (adr r3, 8009360 <__kernel_cos+0x158>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 ffb7 	bl	80001f4 <__adddf3>
 8009286:	4622      	mov	r2, r4
 8009288:	462b      	mov	r3, r5
 800928a:	f7f7 f969 	bl	8000560 <__aeabi_dmul>
 800928e:	a336      	add	r3, pc, #216	; (adr r3, 8009368 <__kernel_cos+0x160>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f6 ffac 	bl	80001f0 <__aeabi_dsub>
 8009298:	4622      	mov	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f7f7 f960 	bl	8000560 <__aeabi_dmul>
 80092a0:	a333      	add	r3, pc, #204	; (adr r3, 8009370 <__kernel_cos+0x168>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f6 ffa5 	bl	80001f4 <__adddf3>
 80092aa:	4622      	mov	r2, r4
 80092ac:	462b      	mov	r3, r5
 80092ae:	f7f7 f957 	bl	8000560 <__aeabi_dmul>
 80092b2:	4622      	mov	r2, r4
 80092b4:	462b      	mov	r3, r5
 80092b6:	f7f7 f953 	bl	8000560 <__aeabi_dmul>
 80092ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092be:	4604      	mov	r4, r0
 80092c0:	460d      	mov	r5, r1
 80092c2:	4630      	mov	r0, r6
 80092c4:	4639      	mov	r1, r7
 80092c6:	f7f7 f94b 	bl	8000560 <__aeabi_dmul>
 80092ca:	460b      	mov	r3, r1
 80092cc:	4602      	mov	r2, r0
 80092ce:	4629      	mov	r1, r5
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7f6 ff8d 	bl	80001f0 <__aeabi_dsub>
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <__kernel_cos+0x17c>)
 80092d8:	4598      	cmp	r8, r3
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	dc10      	bgt.n	8009302 <__kernel_cos+0xfa>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4650      	mov	r0, sl
 80092e6:	4659      	mov	r1, fp
 80092e8:	f7f6 ff82 	bl	80001f0 <__aeabi_dsub>
 80092ec:	460b      	mov	r3, r1
 80092ee:	4926      	ldr	r1, [pc, #152]	; (8009388 <__kernel_cos+0x180>)
 80092f0:	4602      	mov	r2, r0
 80092f2:	2000      	movs	r0, #0
 80092f4:	f7f6 ff7c 	bl	80001f0 <__aeabi_dsub>
 80092f8:	ec41 0b10 	vmov	d0, r0, r1
 80092fc:	b003      	add	sp, #12
 80092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009302:	4b22      	ldr	r3, [pc, #136]	; (800938c <__kernel_cos+0x184>)
 8009304:	4920      	ldr	r1, [pc, #128]	; (8009388 <__kernel_cos+0x180>)
 8009306:	4598      	cmp	r8, r3
 8009308:	bfcc      	ite	gt
 800930a:	4d21      	ldrgt	r5, [pc, #132]	; (8009390 <__kernel_cos+0x188>)
 800930c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009310:	2400      	movs	r4, #0
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	2000      	movs	r0, #0
 8009318:	f7f6 ff6a 	bl	80001f0 <__aeabi_dsub>
 800931c:	4622      	mov	r2, r4
 800931e:	4680      	mov	r8, r0
 8009320:	4689      	mov	r9, r1
 8009322:	462b      	mov	r3, r5
 8009324:	4650      	mov	r0, sl
 8009326:	4659      	mov	r1, fp
 8009328:	f7f6 ff62 	bl	80001f0 <__aeabi_dsub>
 800932c:	4632      	mov	r2, r6
 800932e:	463b      	mov	r3, r7
 8009330:	f7f6 ff5e 	bl	80001f0 <__aeabi_dsub>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4640      	mov	r0, r8
 800933a:	4649      	mov	r1, r9
 800933c:	e7da      	b.n	80092f4 <__kernel_cos+0xec>
 800933e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009378 <__kernel_cos+0x170>
 8009342:	e7db      	b.n	80092fc <__kernel_cos+0xf4>
 8009344:	f3af 8000 	nop.w
 8009348:	be8838d4 	.word	0xbe8838d4
 800934c:	bda8fae9 	.word	0xbda8fae9
 8009350:	bdb4b1c4 	.word	0xbdb4b1c4
 8009354:	3e21ee9e 	.word	0x3e21ee9e
 8009358:	809c52ad 	.word	0x809c52ad
 800935c:	3e927e4f 	.word	0x3e927e4f
 8009360:	19cb1590 	.word	0x19cb1590
 8009364:	3efa01a0 	.word	0x3efa01a0
 8009368:	16c15177 	.word	0x16c15177
 800936c:	3f56c16c 	.word	0x3f56c16c
 8009370:	5555554c 	.word	0x5555554c
 8009374:	3fa55555 	.word	0x3fa55555
 8009378:	00000000 	.word	0x00000000
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	3fe00000 	.word	0x3fe00000
 8009384:	3fd33332 	.word	0x3fd33332
 8009388:	3ff00000 	.word	0x3ff00000
 800938c:	3fe90000 	.word	0x3fe90000
 8009390:	3fd20000 	.word	0x3fd20000
 8009394:	00000000 	.word	0x00000000

08009398 <__kernel_rem_pio2>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	ed2d 8b02 	vpush	{d8}
 80093a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80093a4:	f112 0f14 	cmn.w	r2, #20
 80093a8:	9308      	str	r3, [sp, #32]
 80093aa:	9101      	str	r1, [sp, #4]
 80093ac:	4bc4      	ldr	r3, [pc, #784]	; (80096c0 <__kernel_rem_pio2+0x328>)
 80093ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80093b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80093b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093b6:	9302      	str	r3, [sp, #8]
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80093be:	bfa8      	it	ge
 80093c0:	1ed4      	subge	r4, r2, #3
 80093c2:	9306      	str	r3, [sp, #24]
 80093c4:	bfb2      	itee	lt
 80093c6:	2400      	movlt	r4, #0
 80093c8:	2318      	movge	r3, #24
 80093ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80093ce:	f06f 0317 	mvn.w	r3, #23
 80093d2:	fb04 3303 	mla	r3, r4, r3, r3
 80093d6:	eb03 0a02 	add.w	sl, r3, r2
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	9a06      	ldr	r2, [sp, #24]
 80093de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80096b0 <__kernel_rem_pio2+0x318>
 80093e2:	eb03 0802 	add.w	r8, r3, r2
 80093e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80093e8:	1aa7      	subs	r7, r4, r2
 80093ea:	ae22      	add	r6, sp, #136	; 0x88
 80093ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80093f0:	2500      	movs	r5, #0
 80093f2:	4545      	cmp	r5, r8
 80093f4:	dd13      	ble.n	800941e <__kernel_rem_pio2+0x86>
 80093f6:	9b08      	ldr	r3, [sp, #32]
 80093f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80096b0 <__kernel_rem_pio2+0x318>
 80093fc:	aa22      	add	r2, sp, #136	; 0x88
 80093fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009402:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	9b02      	ldr	r3, [sp, #8]
 800940c:	4598      	cmp	r8, r3
 800940e:	dc2f      	bgt.n	8009470 <__kernel_rem_pio2+0xd8>
 8009410:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009414:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009418:	462f      	mov	r7, r5
 800941a:	2600      	movs	r6, #0
 800941c:	e01b      	b.n	8009456 <__kernel_rem_pio2+0xbe>
 800941e:	42ef      	cmn	r7, r5
 8009420:	d407      	bmi.n	8009432 <__kernel_rem_pio2+0x9a>
 8009422:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009426:	f7f7 f831 	bl	800048c <__aeabi_i2d>
 800942a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800942e:	3501      	adds	r5, #1
 8009430:	e7df      	b.n	80093f2 <__kernel_rem_pio2+0x5a>
 8009432:	ec51 0b18 	vmov	r0, r1, d8
 8009436:	e7f8      	b.n	800942a <__kernel_rem_pio2+0x92>
 8009438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009440:	f7f7 f88e 	bl	8000560 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800944c:	f7f6 fed2 	bl	80001f4 <__adddf3>
 8009450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009454:	3601      	adds	r6, #1
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	429e      	cmp	r6, r3
 800945a:	f1a7 0708 	sub.w	r7, r7, #8
 800945e:	ddeb      	ble.n	8009438 <__kernel_rem_pio2+0xa0>
 8009460:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009464:	f108 0801 	add.w	r8, r8, #1
 8009468:	ecab 7b02 	vstmia	fp!, {d7}
 800946c:	3508      	adds	r5, #8
 800946e:	e7cc      	b.n	800940a <__kernel_rem_pio2+0x72>
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	aa0e      	add	r2, sp, #56	; 0x38
 8009474:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009478:	930d      	str	r3, [sp, #52]	; 0x34
 800947a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800947c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009480:	9c02      	ldr	r4, [sp, #8]
 8009482:	930c      	str	r3, [sp, #48]	; 0x30
 8009484:	00e3      	lsls	r3, r4, #3
 8009486:	930a      	str	r3, [sp, #40]	; 0x28
 8009488:	ab9a      	add	r3, sp, #616	; 0x268
 800948a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800948e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009492:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009496:	ab72      	add	r3, sp, #456	; 0x1c8
 8009498:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800949c:	46c3      	mov	fp, r8
 800949e:	46a1      	mov	r9, r4
 80094a0:	f1b9 0f00 	cmp.w	r9, #0
 80094a4:	f1a5 0508 	sub.w	r5, r5, #8
 80094a8:	dc77      	bgt.n	800959a <__kernel_rem_pio2+0x202>
 80094aa:	ec47 6b10 	vmov	d0, r6, r7
 80094ae:	4650      	mov	r0, sl
 80094b0:	f000 fdca 	bl	800a048 <scalbn>
 80094b4:	ec57 6b10 	vmov	r6, r7, d0
 80094b8:	2200      	movs	r2, #0
 80094ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80094be:	ee10 0a10 	vmov	r0, s0
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 f84c 	bl	8000560 <__aeabi_dmul>
 80094c8:	ec41 0b10 	vmov	d0, r0, r1
 80094cc:	f7fd ff84 	bl	80073d8 <floor>
 80094d0:	4b7c      	ldr	r3, [pc, #496]	; (80096c4 <__kernel_rem_pio2+0x32c>)
 80094d2:	ec51 0b10 	vmov	r0, r1, d0
 80094d6:	2200      	movs	r2, #0
 80094d8:	f7f7 f842 	bl	8000560 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f6 fe84 	bl	80001f0 <__aeabi_dsub>
 80094e8:	460f      	mov	r7, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	f7f7 fae8 	bl	8000ac0 <__aeabi_d2iz>
 80094f0:	9004      	str	r0, [sp, #16]
 80094f2:	f7f6 ffcb 	bl	800048c <__aeabi_i2d>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f6 fe77 	bl	80001f0 <__aeabi_dsub>
 8009502:	f1ba 0f00 	cmp.w	sl, #0
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	dd6d      	ble.n	80095e8 <__kernel_rem_pio2+0x250>
 800950c:	1e62      	subs	r2, r4, #1
 800950e:	ab0e      	add	r3, sp, #56	; 0x38
 8009510:	9d04      	ldr	r5, [sp, #16]
 8009512:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009516:	f1ca 0118 	rsb	r1, sl, #24
 800951a:	fa40 f301 	asr.w	r3, r0, r1
 800951e:	441d      	add	r5, r3
 8009520:	408b      	lsls	r3, r1
 8009522:	1ac0      	subs	r0, r0, r3
 8009524:	ab0e      	add	r3, sp, #56	; 0x38
 8009526:	9504      	str	r5, [sp, #16]
 8009528:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800952c:	f1ca 0317 	rsb	r3, sl, #23
 8009530:	fa40 fb03 	asr.w	fp, r0, r3
 8009534:	f1bb 0f00 	cmp.w	fp, #0
 8009538:	dd65      	ble.n	8009606 <__kernel_rem_pio2+0x26e>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	2200      	movs	r2, #0
 800953e:	3301      	adds	r3, #1
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	4615      	mov	r5, r2
 8009544:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009548:	4294      	cmp	r4, r2
 800954a:	f300 809c 	bgt.w	8009686 <__kernel_rem_pio2+0x2ee>
 800954e:	f1ba 0f00 	cmp.w	sl, #0
 8009552:	dd07      	ble.n	8009564 <__kernel_rem_pio2+0x1cc>
 8009554:	f1ba 0f01 	cmp.w	sl, #1
 8009558:	f000 80c0 	beq.w	80096dc <__kernel_rem_pio2+0x344>
 800955c:	f1ba 0f02 	cmp.w	sl, #2
 8009560:	f000 80c6 	beq.w	80096f0 <__kernel_rem_pio2+0x358>
 8009564:	f1bb 0f02 	cmp.w	fp, #2
 8009568:	d14d      	bne.n	8009606 <__kernel_rem_pio2+0x26e>
 800956a:	4632      	mov	r2, r6
 800956c:	463b      	mov	r3, r7
 800956e:	4956      	ldr	r1, [pc, #344]	; (80096c8 <__kernel_rem_pio2+0x330>)
 8009570:	2000      	movs	r0, #0
 8009572:	f7f6 fe3d 	bl	80001f0 <__aeabi_dsub>
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	2d00      	cmp	r5, #0
 800957c:	d043      	beq.n	8009606 <__kernel_rem_pio2+0x26e>
 800957e:	4650      	mov	r0, sl
 8009580:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80096b8 <__kernel_rem_pio2+0x320>
 8009584:	f000 fd60 	bl	800a048 <scalbn>
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	ec53 2b10 	vmov	r2, r3, d0
 8009590:	f7f6 fe2e 	bl	80001f0 <__aeabi_dsub>
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	e035      	b.n	8009606 <__kernel_rem_pio2+0x26e>
 800959a:	4b4c      	ldr	r3, [pc, #304]	; (80096cc <__kernel_rem_pio2+0x334>)
 800959c:	2200      	movs	r2, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 ffdd 	bl	8000560 <__aeabi_dmul>
 80095a6:	f7f7 fa8b 	bl	8000ac0 <__aeabi_d2iz>
 80095aa:	f7f6 ff6f 	bl	800048c <__aeabi_i2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	ec43 2b18 	vmov	d8, r2, r3
 80095b6:	4b46      	ldr	r3, [pc, #280]	; (80096d0 <__kernel_rem_pio2+0x338>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	f7f6 ffd1 	bl	8000560 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4630      	mov	r0, r6
 80095c4:	4639      	mov	r1, r7
 80095c6:	f7f6 fe13 	bl	80001f0 <__aeabi_dsub>
 80095ca:	f7f7 fa79 	bl	8000ac0 <__aeabi_d2iz>
 80095ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095d2:	f84b 0b04 	str.w	r0, [fp], #4
 80095d6:	ec51 0b18 	vmov	r0, r1, d8
 80095da:	f7f6 fe0b 	bl	80001f4 <__adddf3>
 80095de:	f109 39ff 	add.w	r9, r9, #4294967295
 80095e2:	4606      	mov	r6, r0
 80095e4:	460f      	mov	r7, r1
 80095e6:	e75b      	b.n	80094a0 <__kernel_rem_pio2+0x108>
 80095e8:	d106      	bne.n	80095f8 <__kernel_rem_pio2+0x260>
 80095ea:	1e63      	subs	r3, r4, #1
 80095ec:	aa0e      	add	r2, sp, #56	; 0x38
 80095ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80095f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80095f6:	e79d      	b.n	8009534 <__kernel_rem_pio2+0x19c>
 80095f8:	4b36      	ldr	r3, [pc, #216]	; (80096d4 <__kernel_rem_pio2+0x33c>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	f7f7 fa36 	bl	8000a6c <__aeabi_dcmpge>
 8009600:	2800      	cmp	r0, #0
 8009602:	d13d      	bne.n	8009680 <__kernel_rem_pio2+0x2e8>
 8009604:	4683      	mov	fp, r0
 8009606:	2200      	movs	r2, #0
 8009608:	2300      	movs	r3, #0
 800960a:	4630      	mov	r0, r6
 800960c:	4639      	mov	r1, r7
 800960e:	f7f7 fa0f 	bl	8000a30 <__aeabi_dcmpeq>
 8009612:	2800      	cmp	r0, #0
 8009614:	f000 80c0 	beq.w	8009798 <__kernel_rem_pio2+0x400>
 8009618:	1e65      	subs	r5, r4, #1
 800961a:	462b      	mov	r3, r5
 800961c:	2200      	movs	r2, #0
 800961e:	9902      	ldr	r1, [sp, #8]
 8009620:	428b      	cmp	r3, r1
 8009622:	da6c      	bge.n	80096fe <__kernel_rem_pio2+0x366>
 8009624:	2a00      	cmp	r2, #0
 8009626:	f000 8089 	beq.w	800973c <__kernel_rem_pio2+0x3a4>
 800962a:	ab0e      	add	r3, sp, #56	; 0x38
 800962c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009630:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80ad 	beq.w	8009794 <__kernel_rem_pio2+0x3fc>
 800963a:	4650      	mov	r0, sl
 800963c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80096b8 <__kernel_rem_pio2+0x320>
 8009640:	f000 fd02 	bl	800a048 <scalbn>
 8009644:	ab9a      	add	r3, sp, #616	; 0x268
 8009646:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800964a:	ec57 6b10 	vmov	r6, r7, d0
 800964e:	00ec      	lsls	r4, r5, #3
 8009650:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009654:	46aa      	mov	sl, r5
 8009656:	f1ba 0f00 	cmp.w	sl, #0
 800965a:	f280 80d6 	bge.w	800980a <__kernel_rem_pio2+0x472>
 800965e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80096b0 <__kernel_rem_pio2+0x318>
 8009662:	462e      	mov	r6, r5
 8009664:	2e00      	cmp	r6, #0
 8009666:	f2c0 8104 	blt.w	8009872 <__kernel_rem_pio2+0x4da>
 800966a:	ab72      	add	r3, sp, #456	; 0x1c8
 800966c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009670:	f8df a064 	ldr.w	sl, [pc, #100]	; 80096d8 <__kernel_rem_pio2+0x340>
 8009674:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009678:	f04f 0800 	mov.w	r8, #0
 800967c:	1baf      	subs	r7, r5, r6
 800967e:	e0ea      	b.n	8009856 <__kernel_rem_pio2+0x4be>
 8009680:	f04f 0b02 	mov.w	fp, #2
 8009684:	e759      	b.n	800953a <__kernel_rem_pio2+0x1a2>
 8009686:	f8d8 3000 	ldr.w	r3, [r8]
 800968a:	b955      	cbnz	r5, 80096a2 <__kernel_rem_pio2+0x30a>
 800968c:	b123      	cbz	r3, 8009698 <__kernel_rem_pio2+0x300>
 800968e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009692:	f8c8 3000 	str.w	r3, [r8]
 8009696:	2301      	movs	r3, #1
 8009698:	3201      	adds	r2, #1
 800969a:	f108 0804 	add.w	r8, r8, #4
 800969e:	461d      	mov	r5, r3
 80096a0:	e752      	b.n	8009548 <__kernel_rem_pio2+0x1b0>
 80096a2:	1acb      	subs	r3, r1, r3
 80096a4:	f8c8 3000 	str.w	r3, [r8]
 80096a8:	462b      	mov	r3, r5
 80096aa:	e7f5      	b.n	8009698 <__kernel_rem_pio2+0x300>
 80096ac:	f3af 8000 	nop.w
	...
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	0800bda0 	.word	0x0800bda0
 80096c4:	40200000 	.word	0x40200000
 80096c8:	3ff00000 	.word	0x3ff00000
 80096cc:	3e700000 	.word	0x3e700000
 80096d0:	41700000 	.word	0x41700000
 80096d4:	3fe00000 	.word	0x3fe00000
 80096d8:	0800bd60 	.word	0x0800bd60
 80096dc:	1e62      	subs	r2, r4, #1
 80096de:	ab0e      	add	r3, sp, #56	; 0x38
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80096e8:	a90e      	add	r1, sp, #56	; 0x38
 80096ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80096ee:	e739      	b.n	8009564 <__kernel_rem_pio2+0x1cc>
 80096f0:	1e62      	subs	r2, r4, #1
 80096f2:	ab0e      	add	r3, sp, #56	; 0x38
 80096f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80096fc:	e7f4      	b.n	80096e8 <__kernel_rem_pio2+0x350>
 80096fe:	a90e      	add	r1, sp, #56	; 0x38
 8009700:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009704:	3b01      	subs	r3, #1
 8009706:	430a      	orrs	r2, r1
 8009708:	e789      	b.n	800961e <__kernel_rem_pio2+0x286>
 800970a:	3301      	adds	r3, #1
 800970c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009710:	2900      	cmp	r1, #0
 8009712:	d0fa      	beq.n	800970a <__kernel_rem_pio2+0x372>
 8009714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009716:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800971a:	446a      	add	r2, sp
 800971c:	3a98      	subs	r2, #152	; 0x98
 800971e:	920a      	str	r2, [sp, #40]	; 0x28
 8009720:	9a08      	ldr	r2, [sp, #32]
 8009722:	18e3      	adds	r3, r4, r3
 8009724:	18a5      	adds	r5, r4, r2
 8009726:	aa22      	add	r2, sp, #136	; 0x88
 8009728:	f104 0801 	add.w	r8, r4, #1
 800972c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	4543      	cmp	r3, r8
 8009736:	da04      	bge.n	8009742 <__kernel_rem_pio2+0x3aa>
 8009738:	461c      	mov	r4, r3
 800973a:	e6a3      	b.n	8009484 <__kernel_rem_pio2+0xec>
 800973c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800973e:	2301      	movs	r3, #1
 8009740:	e7e4      	b.n	800970c <__kernel_rem_pio2+0x374>
 8009742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009744:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009748:	f7f6 fea0 	bl	800048c <__aeabi_i2d>
 800974c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009752:	46ab      	mov	fp, r5
 8009754:	461c      	mov	r4, r3
 8009756:	f04f 0900 	mov.w	r9, #0
 800975a:	2600      	movs	r6, #0
 800975c:	2700      	movs	r7, #0
 800975e:	9b06      	ldr	r3, [sp, #24]
 8009760:	4599      	cmp	r9, r3
 8009762:	dd06      	ble.n	8009772 <__kernel_rem_pio2+0x3da>
 8009764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009766:	e8e3 6702 	strd	r6, r7, [r3], #8
 800976a:	f108 0801 	add.w	r8, r8, #1
 800976e:	930a      	str	r3, [sp, #40]	; 0x28
 8009770:	e7df      	b.n	8009732 <__kernel_rem_pio2+0x39a>
 8009772:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009776:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800977a:	f7f6 fef1 	bl	8000560 <__aeabi_dmul>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f6 fd35 	bl	80001f4 <__adddf3>
 800978a:	f109 0901 	add.w	r9, r9, #1
 800978e:	4606      	mov	r6, r0
 8009790:	460f      	mov	r7, r1
 8009792:	e7e4      	b.n	800975e <__kernel_rem_pio2+0x3c6>
 8009794:	3d01      	subs	r5, #1
 8009796:	e748      	b.n	800962a <__kernel_rem_pio2+0x292>
 8009798:	ec47 6b10 	vmov	d0, r6, r7
 800979c:	f1ca 0000 	rsb	r0, sl, #0
 80097a0:	f000 fc52 	bl	800a048 <scalbn>
 80097a4:	ec57 6b10 	vmov	r6, r7, d0
 80097a8:	4ba0      	ldr	r3, [pc, #640]	; (8009a2c <__kernel_rem_pio2+0x694>)
 80097aa:	ee10 0a10 	vmov	r0, s0
 80097ae:	2200      	movs	r2, #0
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f7 f95b 	bl	8000a6c <__aeabi_dcmpge>
 80097b6:	b1f8      	cbz	r0, 80097f8 <__kernel_rem_pio2+0x460>
 80097b8:	4b9d      	ldr	r3, [pc, #628]	; (8009a30 <__kernel_rem_pio2+0x698>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f6 fece 	bl	8000560 <__aeabi_dmul>
 80097c4:	f7f7 f97c 	bl	8000ac0 <__aeabi_d2iz>
 80097c8:	4680      	mov	r8, r0
 80097ca:	f7f6 fe5f 	bl	800048c <__aeabi_i2d>
 80097ce:	4b97      	ldr	r3, [pc, #604]	; (8009a2c <__kernel_rem_pio2+0x694>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 fec5 	bl	8000560 <__aeabi_dmul>
 80097d6:	460b      	mov	r3, r1
 80097d8:	4602      	mov	r2, r0
 80097da:	4639      	mov	r1, r7
 80097dc:	4630      	mov	r0, r6
 80097de:	f7f6 fd07 	bl	80001f0 <__aeabi_dsub>
 80097e2:	f7f7 f96d 	bl	8000ac0 <__aeabi_d2iz>
 80097e6:	1c65      	adds	r5, r4, #1
 80097e8:	ab0e      	add	r3, sp, #56	; 0x38
 80097ea:	f10a 0a18 	add.w	sl, sl, #24
 80097ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80097f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80097f6:	e720      	b.n	800963a <__kernel_rem_pio2+0x2a2>
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	f7f7 f960 	bl	8000ac0 <__aeabi_d2iz>
 8009800:	ab0e      	add	r3, sp, #56	; 0x38
 8009802:	4625      	mov	r5, r4
 8009804:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009808:	e717      	b.n	800963a <__kernel_rem_pio2+0x2a2>
 800980a:	ab0e      	add	r3, sp, #56	; 0x38
 800980c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009810:	f7f6 fe3c 	bl	800048c <__aeabi_i2d>
 8009814:	4632      	mov	r2, r6
 8009816:	463b      	mov	r3, r7
 8009818:	f7f6 fea2 	bl	8000560 <__aeabi_dmul>
 800981c:	4b84      	ldr	r3, [pc, #528]	; (8009a30 <__kernel_rem_pio2+0x698>)
 800981e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009822:	2200      	movs	r2, #0
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f6 fe9a 	bl	8000560 <__aeabi_dmul>
 800982c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	e70f      	b.n	8009656 <__kernel_rem_pio2+0x2be>
 8009836:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800983a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800983e:	f7f6 fe8f 	bl	8000560 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984a:	f7f6 fcd3 	bl	80001f4 <__adddf3>
 800984e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009852:	f108 0801 	add.w	r8, r8, #1
 8009856:	9b02      	ldr	r3, [sp, #8]
 8009858:	4598      	cmp	r8, r3
 800985a:	dc01      	bgt.n	8009860 <__kernel_rem_pio2+0x4c8>
 800985c:	45b8      	cmp	r8, r7
 800985e:	ddea      	ble.n	8009836 <__kernel_rem_pio2+0x49e>
 8009860:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009864:	ab4a      	add	r3, sp, #296	; 0x128
 8009866:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800986a:	ed87 7b00 	vstr	d7, [r7]
 800986e:	3e01      	subs	r6, #1
 8009870:	e6f8      	b.n	8009664 <__kernel_rem_pio2+0x2cc>
 8009872:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009874:	2b02      	cmp	r3, #2
 8009876:	dc0b      	bgt.n	8009890 <__kernel_rem_pio2+0x4f8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc35      	bgt.n	80098e8 <__kernel_rem_pio2+0x550>
 800987c:	d059      	beq.n	8009932 <__kernel_rem_pio2+0x59a>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	f003 0007 	and.w	r0, r3, #7
 8009884:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009888:	ecbd 8b02 	vpop	{d8}
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009892:	2b03      	cmp	r3, #3
 8009894:	d1f3      	bne.n	800987e <__kernel_rem_pio2+0x4e6>
 8009896:	ab4a      	add	r3, sp, #296	; 0x128
 8009898:	4423      	add	r3, r4
 800989a:	9306      	str	r3, [sp, #24]
 800989c:	461c      	mov	r4, r3
 800989e:	469a      	mov	sl, r3
 80098a0:	9502      	str	r5, [sp, #8]
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80098aa:	dc6b      	bgt.n	8009984 <__kernel_rem_pio2+0x5ec>
 80098ac:	46aa      	mov	sl, r5
 80098ae:	f1ba 0f01 	cmp.w	sl, #1
 80098b2:	f1a4 0408 	sub.w	r4, r4, #8
 80098b6:	f300 8085 	bgt.w	80099c4 <__kernel_rem_pio2+0x62c>
 80098ba:	9c06      	ldr	r4, [sp, #24]
 80098bc:	2000      	movs	r0, #0
 80098be:	3408      	adds	r4, #8
 80098c0:	2100      	movs	r1, #0
 80098c2:	2d01      	cmp	r5, #1
 80098c4:	f300 809d 	bgt.w	8009a02 <__kernel_rem_pio2+0x66a>
 80098c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80098cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	f040 809b 	bne.w	8009a0e <__kernel_rem_pio2+0x676>
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	e9c3 5600 	strd	r5, r6, [r3]
 80098de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80098e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80098e6:	e7ca      	b.n	800987e <__kernel_rem_pio2+0x4e6>
 80098e8:	3408      	adds	r4, #8
 80098ea:	ab4a      	add	r3, sp, #296	; 0x128
 80098ec:	441c      	add	r4, r3
 80098ee:	462e      	mov	r6, r5
 80098f0:	2000      	movs	r0, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	2e00      	cmp	r6, #0
 80098f6:	da36      	bge.n	8009966 <__kernel_rem_pio2+0x5ce>
 80098f8:	f1bb 0f00 	cmp.w	fp, #0
 80098fc:	d039      	beq.n	8009972 <__kernel_rem_pio2+0x5da>
 80098fe:	4602      	mov	r2, r0
 8009900:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009904:	9c01      	ldr	r4, [sp, #4]
 8009906:	e9c4 2300 	strd	r2, r3, [r4]
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009912:	f7f6 fc6d 	bl	80001f0 <__aeabi_dsub>
 8009916:	ae4c      	add	r6, sp, #304	; 0x130
 8009918:	2401      	movs	r4, #1
 800991a:	42a5      	cmp	r5, r4
 800991c:	da2c      	bge.n	8009978 <__kernel_rem_pio2+0x5e0>
 800991e:	f1bb 0f00 	cmp.w	fp, #0
 8009922:	d002      	beq.n	800992a <__kernel_rem_pio2+0x592>
 8009924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009928:	4619      	mov	r1, r3
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009930:	e7a5      	b.n	800987e <__kernel_rem_pio2+0x4e6>
 8009932:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009936:	eb0d 0403 	add.w	r4, sp, r3
 800993a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800993e:	2000      	movs	r0, #0
 8009940:	2100      	movs	r1, #0
 8009942:	2d00      	cmp	r5, #0
 8009944:	da09      	bge.n	800995a <__kernel_rem_pio2+0x5c2>
 8009946:	f1bb 0f00 	cmp.w	fp, #0
 800994a:	d002      	beq.n	8009952 <__kernel_rem_pio2+0x5ba>
 800994c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009950:	4619      	mov	r1, r3
 8009952:	9b01      	ldr	r3, [sp, #4]
 8009954:	e9c3 0100 	strd	r0, r1, [r3]
 8009958:	e791      	b.n	800987e <__kernel_rem_pio2+0x4e6>
 800995a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800995e:	f7f6 fc49 	bl	80001f4 <__adddf3>
 8009962:	3d01      	subs	r5, #1
 8009964:	e7ed      	b.n	8009942 <__kernel_rem_pio2+0x5aa>
 8009966:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800996a:	f7f6 fc43 	bl	80001f4 <__adddf3>
 800996e:	3e01      	subs	r6, #1
 8009970:	e7c0      	b.n	80098f4 <__kernel_rem_pio2+0x55c>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	e7c5      	b.n	8009904 <__kernel_rem_pio2+0x56c>
 8009978:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800997c:	f7f6 fc3a 	bl	80001f4 <__adddf3>
 8009980:	3401      	adds	r4, #1
 8009982:	e7ca      	b.n	800991a <__kernel_rem_pio2+0x582>
 8009984:	e9da 8900 	ldrd	r8, r9, [sl]
 8009988:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	3b01      	subs	r3, #1
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	4632      	mov	r2, r6
 8009994:	463b      	mov	r3, r7
 8009996:	4640      	mov	r0, r8
 8009998:	4649      	mov	r1, r9
 800999a:	f7f6 fc2b 	bl	80001f4 <__adddf3>
 800999e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4640      	mov	r0, r8
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f6 fc21 	bl	80001f0 <__aeabi_dsub>
 80099ae:	4632      	mov	r2, r6
 80099b0:	463b      	mov	r3, r7
 80099b2:	f7f6 fc1f 	bl	80001f4 <__adddf3>
 80099b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80099ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099be:	ed8a 7b00 	vstr	d7, [sl]
 80099c2:	e76e      	b.n	80098a2 <__kernel_rem_pio2+0x50a>
 80099c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80099c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80099cc:	4640      	mov	r0, r8
 80099ce:	4632      	mov	r2, r6
 80099d0:	463b      	mov	r3, r7
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f6 fc0e 	bl	80001f4 <__adddf3>
 80099d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f6 fc04 	bl	80001f0 <__aeabi_dsub>
 80099e8:	4632      	mov	r2, r6
 80099ea:	463b      	mov	r3, r7
 80099ec:	f7f6 fc02 	bl	80001f4 <__adddf3>
 80099f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099f8:	ed84 7b00 	vstr	d7, [r4]
 80099fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a00:	e755      	b.n	80098ae <__kernel_rem_pio2+0x516>
 8009a02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009a06:	f7f6 fbf5 	bl	80001f4 <__adddf3>
 8009a0a:	3d01      	subs	r5, #1
 8009a0c:	e759      	b.n	80098c2 <__kernel_rem_pio2+0x52a>
 8009a0e:	9b01      	ldr	r3, [sp, #4]
 8009a10:	9a01      	ldr	r2, [sp, #4]
 8009a12:	601d      	str	r5, [r3, #0]
 8009a14:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009a18:	605c      	str	r4, [r3, #4]
 8009a1a:	609f      	str	r7, [r3, #8]
 8009a1c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009a20:	60d3      	str	r3, [r2, #12]
 8009a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a26:	6110      	str	r0, [r2, #16]
 8009a28:	6153      	str	r3, [r2, #20]
 8009a2a:	e728      	b.n	800987e <__kernel_rem_pio2+0x4e6>
 8009a2c:	41700000 	.word	0x41700000
 8009a30:	3e700000 	.word	0x3e700000
 8009a34:	00000000 	.word	0x00000000

08009a38 <__kernel_sin>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	ed2d 8b04 	vpush	{d8-d9}
 8009a40:	eeb0 8a41 	vmov.f32	s16, s2
 8009a44:	eef0 8a61 	vmov.f32	s17, s3
 8009a48:	ec55 4b10 	vmov	r4, r5, d0
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009a56:	9001      	str	r0, [sp, #4]
 8009a58:	da06      	bge.n	8009a68 <__kernel_sin+0x30>
 8009a5a:	ee10 0a10 	vmov	r0, s0
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f7 f82e 	bl	8000ac0 <__aeabi_d2iz>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d051      	beq.n	8009b0c <__kernel_sin+0xd4>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	f7f6 fd76 	bl	8000560 <__aeabi_dmul>
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fd6e 	bl	8000560 <__aeabi_dmul>
 8009a84:	a341      	add	r3, pc, #260	; (adr r3, 8009b8c <__kernel_sin+0x154>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	4650      	mov	r0, sl
 8009a90:	4659      	mov	r1, fp
 8009a92:	f7f6 fd65 	bl	8000560 <__aeabi_dmul>
 8009a96:	a33f      	add	r3, pc, #252	; (adr r3, 8009b94 <__kernel_sin+0x15c>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fba8 	bl	80001f0 <__aeabi_dsub>
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	f7f6 fd5c 	bl	8000560 <__aeabi_dmul>
 8009aa8:	a33c      	add	r3, pc, #240	; (adr r3, 8009b9c <__kernel_sin+0x164>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f7f6 fba1 	bl	80001f4 <__adddf3>
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	f7f6 fd53 	bl	8000560 <__aeabi_dmul>
 8009aba:	a33a      	add	r3, pc, #232	; (adr r3, 8009ba4 <__kernel_sin+0x16c>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fb96 	bl	80001f0 <__aeabi_dsub>
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	465b      	mov	r3, fp
 8009ac8:	f7f6 fd4a 	bl	8000560 <__aeabi_dmul>
 8009acc:	a337      	add	r3, pc, #220	; (adr r3, 8009bac <__kernel_sin+0x174>)
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	f7f6 fb8f 	bl	80001f4 <__adddf3>
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	4606      	mov	r6, r0
 8009ada:	460f      	mov	r7, r1
 8009adc:	b9eb      	cbnz	r3, 8009b1a <__kernel_sin+0xe2>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	f7f6 fd3b 	bl	8000560 <__aeabi_dmul>
 8009aea:	a325      	add	r3, pc, #148	; (adr r3, 8009b80 <__kernel_sin+0x148>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fb7e 	bl	80001f0 <__aeabi_dsub>
 8009af4:	4642      	mov	r2, r8
 8009af6:	464b      	mov	r3, r9
 8009af8:	f7f6 fd32 	bl	8000560 <__aeabi_dmul>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	f7f6 fb76 	bl	80001f4 <__adddf3>
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	ec45 4b10 	vmov	d0, r4, r5
 8009b10:	b003      	add	sp, #12
 8009b12:	ecbd 8b04 	vpop	{d8-d9}
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <__kernel_sin+0x150>)
 8009b1c:	ec51 0b18 	vmov	r0, r1, d8
 8009b20:	2200      	movs	r2, #0
 8009b22:	f7f6 fd1d 	bl	8000560 <__aeabi_dmul>
 8009b26:	4632      	mov	r2, r6
 8009b28:	ec41 0b19 	vmov	d9, r0, r1
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	4640      	mov	r0, r8
 8009b30:	4649      	mov	r1, r9
 8009b32:	f7f6 fd15 	bl	8000560 <__aeabi_dmul>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	ec51 0b19 	vmov	r0, r1, d9
 8009b3e:	f7f6 fb57 	bl	80001f0 <__aeabi_dsub>
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fd0b 	bl	8000560 <__aeabi_dmul>
 8009b4a:	ec53 2b18 	vmov	r2, r3, d8
 8009b4e:	f7f6 fb4f 	bl	80001f0 <__aeabi_dsub>
 8009b52:	a30b      	add	r3, pc, #44	; (adr r3, 8009b80 <__kernel_sin+0x148>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	4606      	mov	r6, r0
 8009b5a:	460f      	mov	r7, r1
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 fcfe 	bl	8000560 <__aeabi_dmul>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fb42 	bl	80001f4 <__adddf3>
 8009b70:	4602      	mov	r2, r0
 8009b72:	460b      	mov	r3, r1
 8009b74:	4620      	mov	r0, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	f7f6 fb3a 	bl	80001f0 <__aeabi_dsub>
 8009b7c:	e7c4      	b.n	8009b08 <__kernel_sin+0xd0>
 8009b7e:	bf00      	nop
 8009b80:	55555549 	.word	0x55555549
 8009b84:	3fc55555 	.word	0x3fc55555
 8009b88:	3fe00000 	.word	0x3fe00000
 8009b8c:	5acfd57c 	.word	0x5acfd57c
 8009b90:	3de5d93a 	.word	0x3de5d93a
 8009b94:	8a2b9ceb 	.word	0x8a2b9ceb
 8009b98:	3e5ae5e6 	.word	0x3e5ae5e6
 8009b9c:	57b1fe7d 	.word	0x57b1fe7d
 8009ba0:	3ec71de3 	.word	0x3ec71de3
 8009ba4:	19c161d5 	.word	0x19c161d5
 8009ba8:	3f2a01a0 	.word	0x3f2a01a0
 8009bac:	1110f8a6 	.word	0x1110f8a6
 8009bb0:	3f811111 	.word	0x3f811111
 8009bb4:	00000000 	.word	0x00000000

08009bb8 <__kernel_tan>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	ed2d 8b06 	vpush	{d8-d10}
 8009bc0:	ec5b ab10 	vmov	sl, fp, d0
 8009bc4:	4be0      	ldr	r3, [pc, #896]	; (8009f48 <__kernel_tan+0x390>)
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009bcc:	429f      	cmp	r7, r3
 8009bce:	ec59 8b11 	vmov	r8, r9, d1
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	f8cd b000 	str.w	fp, [sp]
 8009bd8:	dc61      	bgt.n	8009c9e <__kernel_tan+0xe6>
 8009bda:	ee10 0a10 	vmov	r0, s0
 8009bde:	4659      	mov	r1, fp
 8009be0:	f7f6 ff6e 	bl	8000ac0 <__aeabi_d2iz>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f040 8083 	bne.w	8009cf2 <__kernel_tan+0x13a>
 8009bec:	1c73      	adds	r3, r6, #1
 8009bee:	4652      	mov	r2, sl
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	433b      	orrs	r3, r7
 8009bf4:	d112      	bne.n	8009c1c <__kernel_tan+0x64>
 8009bf6:	ec4b ab10 	vmov	d0, sl, fp
 8009bfa:	f7fd fbe1 	bl	80073c0 <fabs>
 8009bfe:	49d3      	ldr	r1, [pc, #844]	; (8009f4c <__kernel_tan+0x394>)
 8009c00:	ec53 2b10 	vmov	r2, r3, d0
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f6 fdd5 	bl	80007b4 <__aeabi_ddiv>
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	468b      	mov	fp, r1
 8009c0e:	ec4b ab10 	vmov	d0, sl, fp
 8009c12:	b003      	add	sp, #12
 8009c14:	ecbd 8b06 	vpop	{d8-d10}
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	2e01      	cmp	r6, #1
 8009c1e:	d0f6      	beq.n	8009c0e <__kernel_tan+0x56>
 8009c20:	4642      	mov	r2, r8
 8009c22:	464b      	mov	r3, r9
 8009c24:	4650      	mov	r0, sl
 8009c26:	4659      	mov	r1, fp
 8009c28:	f7f6 fae4 	bl	80001f4 <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	460f      	mov	r7, r1
 8009c32:	2000      	movs	r0, #0
 8009c34:	49c6      	ldr	r1, [pc, #792]	; (8009f50 <__kernel_tan+0x398>)
 8009c36:	f7f6 fdbd 	bl	80007b4 <__aeabi_ddiv>
 8009c3a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c42:	462e      	mov	r6, r5
 8009c44:	4652      	mov	r2, sl
 8009c46:	462c      	mov	r4, r5
 8009c48:	4630      	mov	r0, r6
 8009c4a:	461d      	mov	r5, r3
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	465b      	mov	r3, fp
 8009c50:	f7f6 face 	bl	80001f0 <__aeabi_dsub>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 fac8 	bl	80001f0 <__aeabi_dsub>
 8009c60:	4632      	mov	r2, r6
 8009c62:	462b      	mov	r3, r5
 8009c64:	f7f6 fc7c 	bl	8000560 <__aeabi_dmul>
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	4689      	mov	r9, r1
 8009c6e:	462b      	mov	r3, r5
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 fc74 	bl	8000560 <__aeabi_dmul>
 8009c78:	4bb4      	ldr	r3, [pc, #720]	; (8009f4c <__kernel_tan+0x394>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7f6 faba 	bl	80001f4 <__adddf3>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 fab4 	bl	80001f4 <__adddf3>
 8009c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c90:	f7f6 fc66 	bl	8000560 <__aeabi_dmul>
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	f7f6 faac 	bl	80001f4 <__adddf3>
 8009c9c:	e7b5      	b.n	8009c0a <__kernel_tan+0x52>
 8009c9e:	4bad      	ldr	r3, [pc, #692]	; (8009f54 <__kernel_tan+0x39c>)
 8009ca0:	429f      	cmp	r7, r3
 8009ca2:	dd26      	ble.n	8009cf2 <__kernel_tan+0x13a>
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da09      	bge.n	8009cbe <__kernel_tan+0x106>
 8009caa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009cae:	469b      	mov	fp, r3
 8009cb0:	ee10 aa10 	vmov	sl, s0
 8009cb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cb8:	ee11 8a10 	vmov	r8, s2
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	465b      	mov	r3, fp
 8009cc2:	a183      	add	r1, pc, #524	; (adr r1, 8009ed0 <__kernel_tan+0x318>)
 8009cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc8:	f7f6 fa92 	bl	80001f0 <__aeabi_dsub>
 8009ccc:	4642      	mov	r2, r8
 8009cce:	464b      	mov	r3, r9
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	a180      	add	r1, pc, #512	; (adr r1, 8009ed8 <__kernel_tan+0x320>)
 8009cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cda:	f7f6 fa89 	bl	80001f0 <__aeabi_dsub>
 8009cde:	4622      	mov	r2, r4
 8009ce0:	462b      	mov	r3, r5
 8009ce2:	f7f6 fa87 	bl	80001f4 <__adddf3>
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	4682      	mov	sl, r0
 8009cec:	468b      	mov	fp, r1
 8009cee:	f04f 0900 	mov.w	r9, #0
 8009cf2:	4652      	mov	r2, sl
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	4650      	mov	r0, sl
 8009cf8:	4659      	mov	r1, fp
 8009cfa:	f7f6 fc31 	bl	8000560 <__aeabi_dmul>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	ec43 2b18 	vmov	d8, r2, r3
 8009d06:	f7f6 fc2b 	bl	8000560 <__aeabi_dmul>
 8009d0a:	ec53 2b18 	vmov	r2, r3, d8
 8009d0e:	4604      	mov	r4, r0
 8009d10:	460d      	mov	r5, r1
 8009d12:	4650      	mov	r0, sl
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fc23 	bl	8000560 <__aeabi_dmul>
 8009d1a:	a371      	add	r3, pc, #452	; (adr r3, 8009ee0 <__kernel_tan+0x328>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	ec41 0b19 	vmov	d9, r0, r1
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fc1a 	bl	8000560 <__aeabi_dmul>
 8009d2c:	a36e      	add	r3, pc, #440	; (adr r3, 8009ee8 <__kernel_tan+0x330>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 fa5f 	bl	80001f4 <__adddf3>
 8009d36:	4622      	mov	r2, r4
 8009d38:	462b      	mov	r3, r5
 8009d3a:	f7f6 fc11 	bl	8000560 <__aeabi_dmul>
 8009d3e:	a36c      	add	r3, pc, #432	; (adr r3, 8009ef0 <__kernel_tan+0x338>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 fa56 	bl	80001f4 <__adddf3>
 8009d48:	4622      	mov	r2, r4
 8009d4a:	462b      	mov	r3, r5
 8009d4c:	f7f6 fc08 	bl	8000560 <__aeabi_dmul>
 8009d50:	a369      	add	r3, pc, #420	; (adr r3, 8009ef8 <__kernel_tan+0x340>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fa4d 	bl	80001f4 <__adddf3>
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	f7f6 fbff 	bl	8000560 <__aeabi_dmul>
 8009d62:	a367      	add	r3, pc, #412	; (adr r3, 8009f00 <__kernel_tan+0x348>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f7f6 fa44 	bl	80001f4 <__adddf3>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	462b      	mov	r3, r5
 8009d70:	f7f6 fbf6 	bl	8000560 <__aeabi_dmul>
 8009d74:	a364      	add	r3, pc, #400	; (adr r3, 8009f08 <__kernel_tan+0x350>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fa3b 	bl	80001f4 <__adddf3>
 8009d7e:	ec53 2b18 	vmov	r2, r3, d8
 8009d82:	f7f6 fbed 	bl	8000560 <__aeabi_dmul>
 8009d86:	a362      	add	r3, pc, #392	; (adr r3, 8009f10 <__kernel_tan+0x358>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	ec41 0b1a 	vmov	d10, r0, r1
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7f6 fbe4 	bl	8000560 <__aeabi_dmul>
 8009d98:	a35f      	add	r3, pc, #380	; (adr r3, 8009f18 <__kernel_tan+0x360>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fa29 	bl	80001f4 <__adddf3>
 8009da2:	4622      	mov	r2, r4
 8009da4:	462b      	mov	r3, r5
 8009da6:	f7f6 fbdb 	bl	8000560 <__aeabi_dmul>
 8009daa:	a35d      	add	r3, pc, #372	; (adr r3, 8009f20 <__kernel_tan+0x368>)
 8009dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db0:	f7f6 fa20 	bl	80001f4 <__adddf3>
 8009db4:	4622      	mov	r2, r4
 8009db6:	462b      	mov	r3, r5
 8009db8:	f7f6 fbd2 	bl	8000560 <__aeabi_dmul>
 8009dbc:	a35a      	add	r3, pc, #360	; (adr r3, 8009f28 <__kernel_tan+0x370>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fa17 	bl	80001f4 <__adddf3>
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	462b      	mov	r3, r5
 8009dca:	f7f6 fbc9 	bl	8000560 <__aeabi_dmul>
 8009dce:	a358      	add	r3, pc, #352	; (adr r3, 8009f30 <__kernel_tan+0x378>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f7f6 fa0e 	bl	80001f4 <__adddf3>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	f7f6 fbc0 	bl	8000560 <__aeabi_dmul>
 8009de0:	a355      	add	r3, pc, #340	; (adr r3, 8009f38 <__kernel_tan+0x380>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fa05 	bl	80001f4 <__adddf3>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	ec51 0b1a 	vmov	r0, r1, d10
 8009df2:	f7f6 f9ff 	bl	80001f4 <__adddf3>
 8009df6:	ec53 2b19 	vmov	r2, r3, d9
 8009dfa:	f7f6 fbb1 	bl	8000560 <__aeabi_dmul>
 8009dfe:	4642      	mov	r2, r8
 8009e00:	464b      	mov	r3, r9
 8009e02:	f7f6 f9f7 	bl	80001f4 <__adddf3>
 8009e06:	ec53 2b18 	vmov	r2, r3, d8
 8009e0a:	f7f6 fba9 	bl	8000560 <__aeabi_dmul>
 8009e0e:	4642      	mov	r2, r8
 8009e10:	464b      	mov	r3, r9
 8009e12:	f7f6 f9ef 	bl	80001f4 <__adddf3>
 8009e16:	a34a      	add	r3, pc, #296	; (adr r3, 8009f40 <__kernel_tan+0x388>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	460d      	mov	r5, r1
 8009e20:	ec51 0b19 	vmov	r0, r1, d9
 8009e24:	f7f6 fb9c 	bl	8000560 <__aeabi_dmul>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 f9e2 	bl	80001f4 <__adddf3>
 8009e30:	460b      	mov	r3, r1
 8009e32:	ec41 0b18 	vmov	d8, r0, r1
 8009e36:	4602      	mov	r2, r0
 8009e38:	4659      	mov	r1, fp
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	f7f6 f9da 	bl	80001f4 <__adddf3>
 8009e40:	4b44      	ldr	r3, [pc, #272]	; (8009f54 <__kernel_tan+0x39c>)
 8009e42:	429f      	cmp	r7, r3
 8009e44:	4604      	mov	r4, r0
 8009e46:	460d      	mov	r5, r1
 8009e48:	f340 8086 	ble.w	8009f58 <__kernel_tan+0x3a0>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7f6 fb1d 	bl	800048c <__aeabi_i2d>
 8009e52:	4622      	mov	r2, r4
 8009e54:	4680      	mov	r8, r0
 8009e56:	4689      	mov	r9, r1
 8009e58:	462b      	mov	r3, r5
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7f6 fb7f 	bl	8000560 <__aeabi_dmul>
 8009e62:	4642      	mov	r2, r8
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	f7f6 f9c1 	bl	80001f4 <__adddf3>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4630      	mov	r0, r6
 8009e78:	4639      	mov	r1, r7
 8009e7a:	f7f6 fc9b 	bl	80007b4 <__aeabi_ddiv>
 8009e7e:	ec53 2b18 	vmov	r2, r3, d8
 8009e82:	f7f6 f9b5 	bl	80001f0 <__aeabi_dsub>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4650      	mov	r0, sl
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	f7f6 f9af 	bl	80001f0 <__aeabi_dsub>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	f7f6 f9ad 	bl	80001f4 <__adddf3>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 f9a5 	bl	80001f0 <__aeabi_dsub>
 8009ea6:	9b00      	ldr	r3, [sp, #0]
 8009ea8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009eac:	f00a 0a02 	and.w	sl, sl, #2
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	f1ca 0001 	rsb	r0, sl, #1
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	f7f6 fae8 	bl	800048c <__aeabi_i2d>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 fb4c 	bl	8000560 <__aeabi_dmul>
 8009ec8:	e69f      	b.n	8009c0a <__kernel_tan+0x52>
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	54442d18 	.word	0x54442d18
 8009ed4:	3fe921fb 	.word	0x3fe921fb
 8009ed8:	33145c07 	.word	0x33145c07
 8009edc:	3c81a626 	.word	0x3c81a626
 8009ee0:	74bf7ad4 	.word	0x74bf7ad4
 8009ee4:	3efb2a70 	.word	0x3efb2a70
 8009ee8:	32f0a7e9 	.word	0x32f0a7e9
 8009eec:	3f12b80f 	.word	0x3f12b80f
 8009ef0:	1a8d1068 	.word	0x1a8d1068
 8009ef4:	3f3026f7 	.word	0x3f3026f7
 8009ef8:	fee08315 	.word	0xfee08315
 8009efc:	3f57dbc8 	.word	0x3f57dbc8
 8009f00:	e96e8493 	.word	0xe96e8493
 8009f04:	3f8226e3 	.word	0x3f8226e3
 8009f08:	1bb341fe 	.word	0x1bb341fe
 8009f0c:	3faba1ba 	.word	0x3faba1ba
 8009f10:	db605373 	.word	0xdb605373
 8009f14:	bef375cb 	.word	0xbef375cb
 8009f18:	a03792a6 	.word	0xa03792a6
 8009f1c:	3f147e88 	.word	0x3f147e88
 8009f20:	f2f26501 	.word	0xf2f26501
 8009f24:	3f4344d8 	.word	0x3f4344d8
 8009f28:	c9560328 	.word	0xc9560328
 8009f2c:	3f6d6d22 	.word	0x3f6d6d22
 8009f30:	8406d637 	.word	0x8406d637
 8009f34:	3f9664f4 	.word	0x3f9664f4
 8009f38:	1110fe7a 	.word	0x1110fe7a
 8009f3c:	3fc11111 	.word	0x3fc11111
 8009f40:	55555563 	.word	0x55555563
 8009f44:	3fd55555 	.word	0x3fd55555
 8009f48:	3e2fffff 	.word	0x3e2fffff
 8009f4c:	3ff00000 	.word	0x3ff00000
 8009f50:	bff00000 	.word	0xbff00000
 8009f54:	3fe59427 	.word	0x3fe59427
 8009f58:	2e01      	cmp	r6, #1
 8009f5a:	d02f      	beq.n	8009fbc <__kernel_tan+0x404>
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4689      	mov	r9, r1
 8009f64:	2000      	movs	r0, #0
 8009f66:	4917      	ldr	r1, [pc, #92]	; (8009fc4 <__kernel_tan+0x40c>)
 8009f68:	f7f6 fc24 	bl	80007b4 <__aeabi_ddiv>
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 f939 	bl	80001f0 <__aeabi_dsub>
 8009f7e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	ec51 0b18 	vmov	r0, r1, d8
 8009f8a:	f7f6 f931 	bl	80001f0 <__aeabi_dsub>
 8009f8e:	4632      	mov	r2, r6
 8009f90:	462b      	mov	r3, r5
 8009f92:	f7f6 fae5 	bl	8000560 <__aeabi_dmul>
 8009f96:	46b0      	mov	r8, r6
 8009f98:	460f      	mov	r7, r1
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	4634      	mov	r4, r6
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	f7f6 fadb 	bl	8000560 <__aeabi_dmul>
 8009faa:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <__kernel_tan+0x410>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 f921 	bl	80001f4 <__adddf3>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	e665      	b.n	8009c88 <__kernel_tan+0xd0>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	468b      	mov	fp, r1
 8009fc0:	e625      	b.n	8009c0e <__kernel_tan+0x56>
 8009fc2:	bf00      	nop
 8009fc4:	bff00000 	.word	0xbff00000
 8009fc8:	3ff00000 	.word	0x3ff00000

08009fcc <with_errno>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	4616      	mov	r6, r2
 8009fd4:	f7fc ff2c 	bl	8006e30 <__errno>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	6006      	str	r6, [r0, #0]
 8009fdc:	4620      	mov	r0, r4
 8009fde:	bd70      	pop	{r4, r5, r6, pc}

08009fe0 <xflow>:
 8009fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fe2:	4614      	mov	r4, r2
 8009fe4:	461d      	mov	r5, r3
 8009fe6:	b108      	cbz	r0, 8009fec <xflow+0xc>
 8009fe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009fec:	e9cd 2300 	strd	r2, r3, [sp]
 8009ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	f7f6 fab2 	bl	8000560 <__aeabi_dmul>
 8009ffc:	2222      	movs	r2, #34	; 0x22
 8009ffe:	b003      	add	sp, #12
 800a000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a004:	f7ff bfe2 	b.w	8009fcc <with_errno>

0800a008 <__math_uflow>:
 800a008:	b508      	push	{r3, lr}
 800a00a:	2200      	movs	r2, #0
 800a00c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a010:	f7ff ffe6 	bl	8009fe0 <xflow>
 800a014:	ec41 0b10 	vmov	d0, r0, r1
 800a018:	bd08      	pop	{r3, pc}

0800a01a <__math_oflow>:
 800a01a:	b508      	push	{r3, lr}
 800a01c:	2200      	movs	r2, #0
 800a01e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a022:	f7ff ffdd 	bl	8009fe0 <xflow>
 800a026:	ec41 0b10 	vmov	d0, r0, r1
 800a02a:	bd08      	pop	{r3, pc}

0800a02c <finite>:
 800a02c:	b082      	sub	sp, #8
 800a02e:	ed8d 0b00 	vstr	d0, [sp]
 800a032:	9801      	ldr	r0, [sp, #4]
 800a034:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a038:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a03c:	0fc0      	lsrs	r0, r0, #31
 800a03e:	b002      	add	sp, #8
 800a040:	4770      	bx	lr
 800a042:	0000      	movs	r0, r0
 800a044:	0000      	movs	r0, r0
	...

0800a048 <scalbn>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	ec55 4b10 	vmov	r4, r5, d0
 800a04e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a052:	4606      	mov	r6, r0
 800a054:	462b      	mov	r3, r5
 800a056:	b99a      	cbnz	r2, 800a080 <scalbn+0x38>
 800a058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a05c:	4323      	orrs	r3, r4
 800a05e:	d036      	beq.n	800a0ce <scalbn+0x86>
 800a060:	4b39      	ldr	r3, [pc, #228]	; (800a148 <scalbn+0x100>)
 800a062:	4629      	mov	r1, r5
 800a064:	ee10 0a10 	vmov	r0, s0
 800a068:	2200      	movs	r2, #0
 800a06a:	f7f6 fa79 	bl	8000560 <__aeabi_dmul>
 800a06e:	4b37      	ldr	r3, [pc, #220]	; (800a14c <scalbn+0x104>)
 800a070:	429e      	cmp	r6, r3
 800a072:	4604      	mov	r4, r0
 800a074:	460d      	mov	r5, r1
 800a076:	da10      	bge.n	800a09a <scalbn+0x52>
 800a078:	a32b      	add	r3, pc, #172	; (adr r3, 800a128 <scalbn+0xe0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	e03a      	b.n	800a0f6 <scalbn+0xae>
 800a080:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a084:	428a      	cmp	r2, r1
 800a086:	d10c      	bne.n	800a0a2 <scalbn+0x5a>
 800a088:	ee10 2a10 	vmov	r2, s0
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	f7f6 f8b0 	bl	80001f4 <__adddf3>
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	e019      	b.n	800a0ce <scalbn+0x86>
 800a09a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a09e:	460b      	mov	r3, r1
 800a0a0:	3a36      	subs	r2, #54	; 0x36
 800a0a2:	4432      	add	r2, r6
 800a0a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a0a8:	428a      	cmp	r2, r1
 800a0aa:	dd08      	ble.n	800a0be <scalbn+0x76>
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	a120      	add	r1, pc, #128	; (adr r1, 800a130 <scalbn+0xe8>)
 800a0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b4:	da1c      	bge.n	800a0f0 <scalbn+0xa8>
 800a0b6:	a120      	add	r1, pc, #128	; (adr r1, 800a138 <scalbn+0xf0>)
 800a0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0bc:	e018      	b.n	800a0f0 <scalbn+0xa8>
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	dd08      	ble.n	800a0d4 <scalbn+0x8c>
 800a0c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0ce:	ec45 4b10 	vmov	d0, r4, r5
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a0d8:	da19      	bge.n	800a10e <scalbn+0xc6>
 800a0da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a0e4:	dd0a      	ble.n	800a0fc <scalbn+0xb4>
 800a0e6:	a112      	add	r1, pc, #72	; (adr r1, 800a130 <scalbn+0xe8>)
 800a0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e2      	bne.n	800a0b6 <scalbn+0x6e>
 800a0f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a130 <scalbn+0xe8>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fa33 	bl	8000560 <__aeabi_dmul>
 800a0fa:	e7cb      	b.n	800a094 <scalbn+0x4c>
 800a0fc:	a10a      	add	r1, pc, #40	; (adr r1, 800a128 <scalbn+0xe0>)
 800a0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0b8      	beq.n	800a078 <scalbn+0x30>
 800a106:	a10e      	add	r1, pc, #56	; (adr r1, 800a140 <scalbn+0xf8>)
 800a108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10c:	e7b4      	b.n	800a078 <scalbn+0x30>
 800a10e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a112:	3236      	adds	r2, #54	; 0x36
 800a114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a118:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a11c:	4620      	mov	r0, r4
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <scalbn+0x108>)
 800a120:	2200      	movs	r2, #0
 800a122:	e7e8      	b.n	800a0f6 <scalbn+0xae>
 800a124:	f3af 8000 	nop.w
 800a128:	c2f8f359 	.word	0xc2f8f359
 800a12c:	01a56e1f 	.word	0x01a56e1f
 800a130:	8800759c 	.word	0x8800759c
 800a134:	7e37e43c 	.word	0x7e37e43c
 800a138:	8800759c 	.word	0x8800759c
 800a13c:	fe37e43c 	.word	0xfe37e43c
 800a140:	c2f8f359 	.word	0xc2f8f359
 800a144:	81a56e1f 	.word	0x81a56e1f
 800a148:	43500000 	.word	0x43500000
 800a14c:	ffff3cb0 	.word	0xffff3cb0
 800a150:	3c900000 	.word	0x3c900000

0800a154 <_init>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	bf00      	nop
 800a158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15a:	bc08      	pop	{r3}
 800a15c:	469e      	mov	lr, r3
 800a15e:	4770      	bx	lr

0800a160 <_fini>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr
